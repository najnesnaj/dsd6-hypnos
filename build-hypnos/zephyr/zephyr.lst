
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_gc_clear_roots(void)
{
   0:	20004378 	.word	0x20004378
#define LV_CLEAR_ROOT(root_type, root_name) _lv_memset_00(&LV_GC_ROOT(root_name), sizeof(LV_GC_ROOT(root_name)));
    LV_ITERATE_ROOTS(LV_CLEAR_ROOT)
   4:	000047e9 	.word	0x000047e9
   8:	0001e74b 	.word	0x0001e74b
   c:	00004819 	.word	0x00004819
  10:	00004819 	.word	0x00004819
  14:	00004819 	.word	0x00004819
  18:	00004819 	.word	0x00004819
	...
  2c:	000045e9 	.word	0x000045e9
  30:	00004819 	.word	0x00004819
  34:	00000000 	.word	0x00000000
  38:	000045a1 	.word	0x000045a1
  3c:	0001e733 	.word	0x0001e733

00000040 <_irq_vector_table>:
  40:	000047a9 00011ba5 000047a9 000047a9     .G.......G...G..
  50:	000047a9 000047a9 000047a9 000047a9     .G...G...G...G..
  60:	000047a9 000047a9 000047a9 000047a9     .G...G...G...G..
  70:	000047a9 000047a9 000047a9 000047a9     .G...G...G...G..
  80:	000047a9 000047a9 000047a9 000047a9     .G...G...G...G..
  90:	000047a9 000047a9 000047a9 000047a9     .G...G...G...G..
  a0:	000047a9 000047a9 000047a9 000047a9     .G...G...G...G..
  b0:	000047a9 000047a9 000047a9 000047a9     .G...G...G...G..
  c0:	000047a9 000047a9 000047a9 000047a9     .G...G...G...G..
  d0:	000047a9 000047a9 000047a9              .G...G...G..

Disassembly of section text:

000000e0 <memchr>:
      e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
      e4:	2a10      	cmp	r2, #16
      e6:	db2b      	blt.n	140 <CONFIG_IDLE_STACK_SIZE>
      e8:	f010 0f07 	tst.w	r0, #7
      ec:	d008      	beq.n	100 <CONFIG_KOBJECT_TEXT_AREA>
      ee:	f810 3b01 	ldrb.w	r3, [r0], #1
      f2:	3a01      	subs	r2, #1
      f4:	428b      	cmp	r3, r1
      f6:	d02d      	beq.n	154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
      f8:	f010 0f07 	tst.w	r0, #7
      fc:	b342      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
      fe:	d1f6      	bne.n	ee <memchr+0xe>
     100:	b4f0      	push	{r4, r5, r6, r7}
     102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     10a:	f022 0407 	bic.w	r4, r2, #7
     10e:	f07f 0700 	mvns.w	r7, #0
     112:	2300      	movs	r3, #0
     114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     118:	3c08      	subs	r4, #8
     11a:	ea85 0501 	eor.w	r5, r5, r1
     11e:	ea86 0601 	eor.w	r6, r6, r1
     122:	fa85 f547 	uadd8	r5, r5, r7
     126:	faa3 f587 	sel	r5, r3, r7
     12a:	fa86 f647 	uadd8	r6, r6, r7
     12e:	faa5 f687 	sel	r6, r5, r7
     132:	b98e      	cbnz	r6, 158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     134:	d1ee      	bne.n	114 <CONFIG_KOBJECT_TEXT_AREA+0x14>
     136:	bcf0      	pop	{r4, r5, r6, r7}
     138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     13c:	f002 0207 	and.w	r2, r2, #7
     140:	b132      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
     142:	f810 3b01 	ldrb.w	r3, [r0], #1
     146:	3a01      	subs	r2, #1
     148:	ea83 0301 	eor.w	r3, r3, r1
     14c:	b113      	cbz	r3, 154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
     14e:	d1f8      	bne.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     150:	2000      	movs	r0, #0
     152:	4770      	bx	lr
     154:	3801      	subs	r0, #1
     156:	4770      	bx	lr
     158:	2d00      	cmp	r5, #0
     15a:	bf06      	itte	eq
     15c:	4635      	moveq	r5, r6
     15e:	3803      	subeq	r0, #3
     160:	3807      	subne	r0, #7
     162:	f015 0f01 	tst.w	r5, #1
     166:	d107      	bne.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     168:	3001      	adds	r0, #1
     16a:	f415 7f80 	tst.w	r5, #256	; 0x100
     16e:	bf02      	ittt	eq
     170:	3001      	addeq	r0, #1
     172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     176:	3001      	addeq	r0, #1
     178:	bcf0      	pop	{r4, r5, r6, r7}
     17a:	3801      	subs	r0, #1
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__aeabi_uldivmod>:
     180:	b953      	cbnz	r3, 198 <CONFIG_LVGL_INDEV_DEF_LONG_PRESS_TIME+0x8>
     182:	b94a      	cbnz	r2, 198 <CONFIG_LVGL_INDEV_DEF_LONG_PRESS_TIME+0x8>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
     18c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     194:	f000 b96e 	b.w	474 <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1a0:	f000 f806 	bl	1b0 <__udivmoddi4>
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1ac:	b004      	add	sp, #16
     1ae:	4770      	bx	lr

000001b0 <__udivmoddi4>:
     1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1b4:	9d08      	ldr	r5, [sp, #32]
     1b6:	460e      	mov	r6, r1
     1b8:	4604      	mov	r4, r0
     1ba:	468c      	mov	ip, r1
     1bc:	2b00      	cmp	r3, #0
     1be:	f040 8081 	bne.w	2c4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x44>
     1c2:	428a      	cmp	r2, r1
     1c4:	4617      	mov	r7, r2
     1c6:	d945      	bls.n	254 <CONFIG_FLASH_SIZE+0x54>
     1c8:	fab2 f282 	clz	r2, r2
     1cc:	b14a      	cbz	r2, 1e2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x22>
     1ce:	f1c2 0120 	rsb	r1, r2, #32
     1d2:	fa06 f302 	lsl.w	r3, r6, r2
     1d6:	fa20 f101 	lsr.w	r1, r0, r1
     1da:	4097      	lsls	r7, r2
     1dc:	ea41 0c03 	orr.w	ip, r1, r3
     1e0:	4094      	lsls	r4, r2
     1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e6:	0c23      	lsrs	r3, r4, #16
     1e8:	fbbc f6fe 	udiv	r6, ip, lr
     1ec:	b2b9      	uxth	r1, r7
     1ee:	fb0e cc16 	mls	ip, lr, r6, ip
     1f2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1f6:	fb06 f001 	mul.w	r0, r6, r1
     1fa:	4298      	cmp	r0, r3
     1fc:	d909      	bls.n	212 <CONFIG_FLASH_SIZE+0x12>
     1fe:	18fb      	adds	r3, r7, r3
     200:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     204:	f080 8115 	bcs.w	432 <CONFIG_MAIN_STACK_SIZE+0x32>
     208:	4298      	cmp	r0, r3
     20a:	f240 8112 	bls.w	432 <CONFIG_MAIN_STACK_SIZE+0x32>
     20e:	3e02      	subs	r6, #2
     210:	443b      	add	r3, r7
     212:	1a1b      	subs	r3, r3, r0
     214:	b2a4      	uxth	r4, r4
     216:	fbb3 f0fe 	udiv	r0, r3, lr
     21a:	fb0e 3310 	mls	r3, lr, r0, r3
     21e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     222:	fb00 f101 	mul.w	r1, r0, r1
     226:	42a1      	cmp	r1, r4
     228:	d909      	bls.n	23e <CONFIG_FLASH_SIZE+0x3e>
     22a:	193c      	adds	r4, r7, r4
     22c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     230:	f080 8101 	bcs.w	436 <CONFIG_MAIN_STACK_SIZE+0x36>
     234:	42a1      	cmp	r1, r4
     236:	f240 80fe 	bls.w	436 <CONFIG_MAIN_STACK_SIZE+0x36>
     23a:	3802      	subs	r0, #2
     23c:	443c      	add	r4, r7
     23e:	1a64      	subs	r4, r4, r1
     240:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     244:	2100      	movs	r1, #0
     246:	b11d      	cbz	r5, 250 <CONFIG_FLASH_SIZE+0x50>
     248:	40d4      	lsrs	r4, r2
     24a:	2300      	movs	r3, #0
     24c:	e9c5 4300 	strd	r4, r3, [r5]
     250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     254:	b902      	cbnz	r2, 258 <CONFIG_FLASH_SIZE+0x58>
     256:	deff      	udf	#255	; 0xff
     258:	fab2 f282 	clz	r2, r2
     25c:	2a00      	cmp	r2, #0
     25e:	d14f      	bne.n	300 <CONFIG_BT_HCI_TX_STACK_SIZE+0x80>
     260:	1bcb      	subs	r3, r1, r7
     262:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     266:	fa1f f887 	uxth.w	r8, r7
     26a:	2101      	movs	r1, #1
     26c:	fbb3 fcfe 	udiv	ip, r3, lr
     270:	0c26      	lsrs	r6, r4, #16
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     27a:	fb08 f30c 	mul.w	r3, r8, ip
     27e:	42b3      	cmp	r3, r6
     280:	d907      	bls.n	292 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     282:	19be      	adds	r6, r7, r6
     284:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     288:	d202      	bcs.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     28a:	42b3      	cmp	r3, r6
     28c:	f200 80eb 	bhi.w	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     290:	4684      	mov	ip, r0
     292:	1af6      	subs	r6, r6, r3
     294:	b2a3      	uxth	r3, r4
     296:	fbb6 f0fe 	udiv	r0, r6, lr
     29a:	fb0e 6610 	mls	r6, lr, r0, r6
     29e:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     2a2:	fb08 f800 	mul.w	r8, r8, r0
     2a6:	45a0      	cmp	r8, r4
     2a8:	d907      	bls.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     2aa:	193c      	adds	r4, r7, r4
     2ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2b0:	d202      	bcs.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2b2:	45a0      	cmp	r8, r4
     2b4:	f200 80d2 	bhi.w	45c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
     2b8:	4618      	mov	r0, r3
     2ba:	eba4 0408 	sub.w	r4, r4, r8
     2be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2c2:	e7c0      	b.n	246 <CONFIG_FLASH_SIZE+0x46>
     2c4:	428b      	cmp	r3, r1
     2c6:	d908      	bls.n	2da <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     2c8:	2d00      	cmp	r5, #0
     2ca:	f000 80af 	beq.w	42c <CONFIG_MAIN_STACK_SIZE+0x2c>
     2ce:	2100      	movs	r1, #0
     2d0:	e9c5 0600 	strd	r0, r6, [r5]
     2d4:	4608      	mov	r0, r1
     2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2da:	fab3 f183 	clz	r1, r3
     2de:	2900      	cmp	r1, #0
     2e0:	d149      	bne.n	376 <CONFIG_BT_DEVICE_APPEARANCE+0x35>
     2e2:	42b3      	cmp	r3, r6
     2e4:	d302      	bcc.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>
     2e6:	4282      	cmp	r2, r0
     2e8:	f200 80bb 	bhi.w	462 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x16>
     2ec:	1a84      	subs	r4, r0, r2
     2ee:	eb66 0303 	sbc.w	r3, r6, r3
     2f2:	2001      	movs	r0, #1
     2f4:	469c      	mov	ip, r3
     2f6:	2d00      	cmp	r5, #0
     2f8:	d0aa      	beq.n	250 <CONFIG_FLASH_SIZE+0x50>
     2fa:	e9c5 4c00 	strd	r4, ip, [r5]
     2fe:	e7a7      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     300:	f1c2 0320 	rsb	r3, r2, #32
     304:	4097      	lsls	r7, r2
     306:	40d8      	lsrs	r0, r3
     308:	4091      	lsls	r1, r2
     30a:	40de      	lsrs	r6, r3
     30c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     310:	4308      	orrs	r0, r1
     312:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     316:	fbb6 f1fe 	udiv	r1, r6, lr
     31a:	fa1f f887 	uxth.w	r8, r7
     31e:	fb0e 6611 	mls	r6, lr, r1, r6
     322:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     326:	fb01 f308 	mul.w	r3, r1, r8
     32a:	42b3      	cmp	r3, r6
     32c:	fa04 f402 	lsl.w	r4, r4, r2
     330:	d909      	bls.n	346 <CONFIG_BT_DEVICE_APPEARANCE+0x5>
     332:	19be      	adds	r6, r7, r6
     334:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     338:	f080 808e 	bcs.w	458 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>
     33c:	42b3      	cmp	r3, r6
     33e:	f240 808b 	bls.w	458 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>
     342:	3902      	subs	r1, #2
     344:	443e      	add	r6, r7
     346:	1af3      	subs	r3, r6, r3
     348:	b286      	uxth	r6, r0
     34a:	fbb3 f0fe 	udiv	r0, r3, lr
     34e:	fb0e 3310 	mls	r3, lr, r0, r3
     352:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     356:	fb00 f308 	mul.w	r3, r0, r8
     35a:	42b3      	cmp	r3, r6
     35c:	d907      	bls.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     35e:	19be      	adds	r6, r7, r6
     360:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     364:	d274      	bcs.n	450 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     366:	42b3      	cmp	r3, r6
     368:	d972      	bls.n	450 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     36a:	3802      	subs	r0, #2
     36c:	443e      	add	r6, r7
     36e:	1af3      	subs	r3, r6, r3
     370:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     374:	e77a      	b.n	26c <CONFIG_FLASH_SIZE+0x6c>
     376:	f1c1 0720 	rsb	r7, r1, #32
     37a:	fa03 f401 	lsl.w	r4, r3, r1
     37e:	fa22 f307 	lsr.w	r3, r2, r7
     382:	431c      	orrs	r4, r3
     384:	fa20 f907 	lsr.w	r9, r0, r7
     388:	fa06 f301 	lsl.w	r3, r6, r1
     38c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     390:	40fe      	lsrs	r6, r7
     392:	ea49 0903 	orr.w	r9, r9, r3
     396:	ea4f 4319 	mov.w	r3, r9, lsr #16
     39a:	fbb6 fefc 	udiv	lr, r6, ip
     39e:	fa1f f884 	uxth.w	r8, r4
     3a2:	fb0c 661e 	mls	r6, ip, lr, r6
     3a6:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     3aa:	fb0e fa08 	mul.w	sl, lr, r8
     3ae:	45b2      	cmp	sl, r6
     3b0:	fa02 f201 	lsl.w	r2, r2, r1
     3b4:	fa00 f301 	lsl.w	r3, r0, r1
     3b8:	d908      	bls.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     3ba:	19a6      	adds	r6, r4, r6
     3bc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     3c0:	d248      	bcs.n	454 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>
     3c2:	45b2      	cmp	sl, r6
     3c4:	d946      	bls.n	454 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>
     3c6:	f1ae 0e02 	sub.w	lr, lr, #2
     3ca:	4426      	add	r6, r4
     3cc:	eba6 060a 	sub.w	r6, r6, sl
     3d0:	fa1f f989 	uxth.w	r9, r9
     3d4:	fbb6 f0fc 	udiv	r0, r6, ip
     3d8:	fb0c 6610 	mls	r6, ip, r0, r6
     3dc:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     3e0:	fb00 f808 	mul.w	r8, r0, r8
     3e4:	45b0      	cmp	r8, r6
     3e6:	d907      	bls.n	3f8 <CONFIG_BT_DEVICE_APPEARANCE+0xb7>
     3e8:	19a6      	adds	r6, r4, r6
     3ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     3ee:	d22d      	bcs.n	44c <CONFIG_BT_HCI_ECC_STACK_SIZE>
     3f0:	45b0      	cmp	r8, r6
     3f2:	d92b      	bls.n	44c <CONFIG_BT_HCI_ECC_STACK_SIZE>
     3f4:	3802      	subs	r0, #2
     3f6:	4426      	add	r6, r4
     3f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     3fc:	eba6 0608 	sub.w	r6, r6, r8
     400:	fba0 8902 	umull	r8, r9, r0, r2
     404:	454e      	cmp	r6, r9
     406:	46c4      	mov	ip, r8
     408:	46ce      	mov	lr, r9
     40a:	d318      	bcc.n	43e <CONFIG_MAIN_STACK_SIZE+0x3e>
     40c:	d015      	beq.n	43a <CONFIG_MAIN_STACK_SIZE+0x3a>
     40e:	b375      	cbz	r5, 46e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x22>
     410:	ebb3 020c 	subs.w	r2, r3, ip
     414:	eb66 060e 	sbc.w	r6, r6, lr
     418:	fa06 f707 	lsl.w	r7, r6, r7
     41c:	fa22 f301 	lsr.w	r3, r2, r1
     420:	40ce      	lsrs	r6, r1
     422:	431f      	orrs	r7, r3
     424:	e9c5 7600 	strd	r7, r6, [r5]
     428:	2100      	movs	r1, #0
     42a:	e711      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     42c:	4629      	mov	r1, r5
     42e:	4628      	mov	r0, r5
     430:	e70e      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     432:	4666      	mov	r6, ip
     434:	e6ed      	b.n	212 <CONFIG_FLASH_SIZE+0x12>
     436:	4618      	mov	r0, r3
     438:	e701      	b.n	23e <CONFIG_FLASH_SIZE+0x3e>
     43a:	4543      	cmp	r3, r8
     43c:	d2e7      	bcs.n	40e <CONFIG_MAIN_STACK_SIZE+0xe>
     43e:	ebb8 0c02 	subs.w	ip, r8, r2
     442:	eb69 0404 	sbc.w	r4, r9, r4
     446:	3801      	subs	r0, #1
     448:	46a6      	mov	lr, r4
     44a:	e7e0      	b.n	40e <CONFIG_MAIN_STACK_SIZE+0xe>
     44c:	4660      	mov	r0, ip
     44e:	e7d3      	b.n	3f8 <CONFIG_BT_DEVICE_APPEARANCE+0xb7>
     450:	4660      	mov	r0, ip
     452:	e78c      	b.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     454:	4686      	mov	lr, r0
     456:	e7b9      	b.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     458:	4661      	mov	r1, ip
     45a:	e774      	b.n	346 <CONFIG_BT_DEVICE_APPEARANCE+0x5>
     45c:	3802      	subs	r0, #2
     45e:	443c      	add	r4, r7
     460:	e72b      	b.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     462:	4608      	mov	r0, r1
     464:	e747      	b.n	2f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     466:	f1ac 0c02 	sub.w	ip, ip, #2
     46a:	443e      	add	r6, r7
     46c:	e711      	b.n	292 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     46e:	4629      	mov	r1, r5
     470:	e6ee      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     472:	bf00      	nop

00000474 <__aeabi_idiv0>:
     474:	4770      	bx	lr
     476:	bf00      	nop

00000478 <strcmp>:
     478:	f810 2b01 	ldrb.w	r2, [r0], #1
     47c:	f811 3b01 	ldrb.w	r3, [r1], #1
     480:	2a01      	cmp	r2, #1
     482:	bf28      	it	cs
     484:	429a      	cmpcs	r2, r3
     486:	d0f7      	beq.n	478 <strcmp>
     488:	1ad0      	subs	r0, r2, r3
     48a:	4770      	bx	lr

0000048c <strlen>:
     48c:	4603      	mov	r3, r0
     48e:	f813 2b01 	ldrb.w	r2, [r3], #1
     492:	2a00      	cmp	r2, #0
     494:	d1fb      	bne.n	48e <strlen+0x2>
     496:	1a18      	subs	r0, r3, r0
     498:	3801      	subs	r0, #1
     49a:	4770      	bx	lr
     49c:	0000      	movs	r0, r0
	...

000004a0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     4a4:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     4a8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     4ac:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
     4b0:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     4b2:	45a0      	cmp	r8, r4
{
     4b4:	460e      	mov	r6, r1
     4b6:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     4b8:	d818      	bhi.n	4ec <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     4ba:	4f1b      	ldr	r7, [pc, #108]	; (528 <ull_drift_ticks_get+0x88>)
     4bc:	a318      	add	r3, pc, #96	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     4be:	e9d3 2300 	ldrd	r2, r3, [r3]
     4c2:	fbac 0107 	umull	r0, r1, ip, r7
     4c6:	f7ff fe5b 	bl	180 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     4ca:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     4ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     4d2:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     4d4:	a312      	add	r3, pc, #72	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
     4da:	fba4 0107 	umull	r0, r1, r4, r7
     4de:	f7ff fe4f 	bl	180 <__aeabi_uldivmod>
     4e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     4e6:	6028      	str	r0, [r5, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     4ec:	4c0e      	ldr	r4, [pc, #56]	; (528 <ull_drift_ticks_get+0x88>)
     4ee:	a30c      	add	r3, pc, #48	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
     4f4:	fba8 0104 	umull	r0, r1, r8, r4
     4f8:	f7ff fe42 	bl	180 <__aeabi_uldivmod>
     4fc:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     500:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
     504:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     506:	fba0 0104 	umull	r0, r1, r0, r4
     50a:	a305      	add	r3, pc, #20	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     50c:	e9d3 2300 	ldrd	r2, r3, [r3]
     510:	f7ff fe36 	bl	180 <__aeabi_uldivmod>
     514:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     518:	6028      	str	r0, [r5, #0]
}
     51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     51e:	bf00      	nop
     520:	1afd498d 	.word	0x1afd498d
     524:	00000007 	.word	0x00000007
     528:	3b9aca00 	.word	0x3b9aca00
     52c:	00000000 	.word	0x00000000

00000530 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	4cb3      	ldr	r4, [pc, #716]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     536:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
     53a:	b08f      	sub	sp, #60	; 0x3c
     53c:	f006 0601 	and.w	r6, r6, #1
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     540:	2800      	cmp	r0, #0
     542:	f000 81ce 	beq.w	8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     546:	bbb6      	cbnz	r6, 5b6 <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     548:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     54c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
		ull_filter_adv_update(lll->filter_policy);
     550:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     554:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		lll->rl_idx = FILTER_IDX_NONE;
     55c:	21ff      	movs	r1, #255	; 0xff
		ull_filter_adv_update(lll->filter_policy);
     55e:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     562:	f8d2 803c 	ldr.w	r8, [r2, #60]	; 0x3c
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     566:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
		lll->rl_idx = FILTER_IDX_NONE;
     56a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
		ull_filter_adv_update(lll->filter_policy);
     56e:	f010 fd7b 	bl	11068 <ull_filter_adv_update>
		if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     572:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
     576:	0741      	lsls	r1, r0, #29
     578:	f100 8127 	bmi.w	7ca <CONFIG_BT_COMPANY_ID+0x1d9>
				tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     57c:	464d      	mov	r5, r9
     57e:	4631      	mov	r1, r6
     580:	f815 0b02 	ldrb.w	r0, [r5], #2
     584:	f3c0 1080 	ubfx	r0, r0, #6, #1
     588:	f00a f8a6 	bl	a6d8 <ll_addr_get>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     58c:	6803      	ldr	r3, [r0, #0]
     58e:	f8c9 3002 	str.w	r3, [r9, #2]
     592:	8883      	ldrh	r3, [r0, #4]
     594:	80ab      	strh	r3, [r5, #4]
     596:	6803      	ldr	r3, [r0, #0]
     598:	f8c8 3002 	str.w	r3, [r8, #2]
     59c:	8883      	ldrh	r3, [r0, #4]
     59e:	f8a8 3006 	strh.w	r3, [r8, #6]
		if (pdu_adv->tx_addr &&
     5a2:	f899 3000 	ldrb.w	r3, [r9]
     5a6:	065a      	lsls	r2, r3, #25
     5a8:	d40a      	bmi.n	5c0 <ll_adv_enable+0x90>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     5aa:	f013 0f0e 	tst.w	r3, #14
     5ae:	f040 80e1 	bne.w	774 <CONFIG_BT_COMPANY_ID+0x183>
		if (lll->conn) {
     5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
     5b4:	b193      	cbz	r3, 5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_unmark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
     5b6:	260c      	movs	r6, #12
}
     5b8:	4630      	mov	r0, r6
     5ba:	b00f      	add	sp, #60	; 0x3c
     5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
     5c0:	2106      	movs	r1, #6
     5c2:	f109 0002 	add.w	r0, r9, #2
     5c6:	f008 fced 	bl	8fa4 <mem_nz>
		if (pdu_adv->tx_addr &&
     5ca:	2800      	cmp	r0, #0
     5cc:	f000 8236 	beq.w	a3c <CONFIG_BT_RX_STACK_SIZE+0x1a4>
     5d0:	f899 3000 	ldrb.w	r3, [r9]
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     5d4:	f013 0f0e 	tst.w	r3, #14
     5d8:	d0eb      	beq.n	5b2 <ll_adv_enable+0x82>
     5da:	e0cb      	b.n	774 <CONFIG_BT_COMPANY_ID+0x183>
		link = ll_rx_link_alloc();
     5dc:	f00c fa84 	bl	cae8 <ll_rx_link_alloc>
		if (!link) {
     5e0:	4682      	mov	sl, r0
     5e2:	2800      	cmp	r0, #0
     5e4:	f000 824f 	beq.w	a86 <CONFIG_BT_RX_STACK_SIZE+0x1ee>
		node_rx = ll_rx_alloc();
     5e8:	f00c fa8a 	bl	cb00 <ll_rx_alloc>
		if (!node_rx) {
     5ec:	4683      	mov	fp, r0
     5ee:	2800      	cmp	r0, #0
     5f0:	f000 8262 	beq.w	ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>
		conn = ll_conn_acquire();
     5f4:	f00d fc70 	bl	ded8 <ll_conn_acquire>
		if (!conn) {
     5f8:	4605      	mov	r5, r0
     5fa:	2800      	cmp	r0, #0
     5fc:	f000 8259 	beq.w	ab2 <CONFIG_BT_RX_STACK_SIZE+0x21a>
		conn_lll->handle = 0xFFFF;
     600:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
     604:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
     606:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
     608:	f105 031c 	add.w	r3, r5, #28
     60c:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     60e:	2800      	cmp	r0, #0
     610:	f000 8235 	beq.w	a7e <CONFIG_BT_RX_STACK_SIZE+0x1e6>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     614:	f105 026c 	add.w	r2, r5, #108	; 0x6c
     618:	f105 0168 	add.w	r1, r5, #104	; 0x68
     61c:	f008 fcce 	bl	8fbc <memq_init>
		conn_lll->phy_tx = BIT(0);
     620:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
     624:	4978      	ldr	r1, [pc, #480]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
		conn->common.fex_valid = 0;
     626:	f895 70dc 	ldrb.w	r7, [r5, #220]	; 0xdc
		conn_lll->data_chan_sel = 0;
     62a:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
     62e:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
		conn->llcp_terminate.node_rx.hdr.link = link;
     632:	f8c5 a130 	str.w	sl, [r5, #304]	; 0x130
		conn_lll->phy_tx = BIT(0);
     636:	400b      	ands	r3, r1
     638:	f443 7388 	orr.w	r3, r3, #272	; 0x110
		conn->common.fex_valid = 0;
     63c:	f027 0c03 	bic.w	ip, r7, #3
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     640:	f895 1126 	ldrb.w	r1, [r5, #294]	; 0x126
		conn->common.fex_valid = 0;
     644:	f885 c0dc 	strb.w	ip, [r5, #220]	; 0xdc
		conn_lll->data_chan_use = 0;
     648:	2700      	movs	r7, #0
		conn_lll->phy_tx = BIT(0);
     64a:	f043 0301 	orr.w	r3, r3, #1
		conn_lll->data_chan_sel = 0;
     64e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     652:	f062 027f 	orn	r2, r2, #127	; 0x7f
		conn_lll->phy_tx = BIT(0);
     656:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
		conn_lll->slave.latency_enabled = 0;
     65a:	f367 0000 	bfi	r0, r7, #0, #1
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     65e:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     662:	f021 0103 	bic.w	r1, r1, #3
		conn_lll->data_chan_sel = 0;
     666:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
     66a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
		conn->connect_expire = 6;
     66e:	2206      	movs	r2, #6
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     670:	4866      	ldr	r0, [pc, #408]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     672:	65eb      	str	r3, [r5, #92]	; 0x5c
		conn->llcp_feature.features_conn = LL_FEAT;
     674:	4b66      	ldr	r3, [pc, #408]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     676:	f885 1126 	strb.w	r1, [r5, #294]	; 0x126
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     67a:	6628      	str	r0, [r5, #96]	; 0x60
		conn->connect_expire = 6;
     67c:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
		conn->llcp_feature.features_conn = LL_FEAT;
     680:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
		conn_lll->slave.window_widening_event_us = 0;
     684:	e9c5 7713 	strd	r7, r7, [r5, #76]	; 0x4c
		conn_lll->data_chan_use = 0;
     688:	f885 703f 	strb.w	r7, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
     68c:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
     68e:	636f      	str	r7, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
     690:	656f      	str	r7, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
     692:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
     696:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     69a:	f8a5 70e8 	strh.w	r7, [r5, #232]	; 0xe8
     69e:	f885 70ea 	strb.w	r7, [r5, #234]	; 0xea
		conn->llcp_rx = NULL;
     6a2:	f8c5 7100 	str.w	r7, [r5, #256]	; 0x100
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     6a6:	f8a5 7104 	strh.w	r7, [r5, #260]	; 0x104
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     6aa:	f8a5 7118 	strh.w	r7, [r5, #280]	; 0x118
		conn->llcp_feature.features_peer = 0;
     6ae:	f8c5 7120 	str.w	r7, [r5, #288]	; 0x120
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     6b2:	f8a5 7124 	strh.w	r7, [r5, #292]	; 0x124
		conn->llcp_terminate.reason_peer = 0;
     6b6:	f885 712f 	strb.w	r7, [r5, #303]	; 0x12f
		conn_lll->link_tx_free = NULL;
     6ba:	67af      	str	r7, [r5, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
     6bc:	f8a5 707c 	strh.w	r7, [r5, #124]	; 0x7c
		conn->llcp_conn_param.disabled = 0;
     6c0:	f895 0172 	ldrb.w	r0, [r5, #370]	; 0x172
		conn->llcp_length.disabled = 0U;
     6c4:	f895 119a 	ldrb.w	r1, [r5, #410]	; 0x19a
		conn_lll->sn = 0;
     6c8:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     6cc:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     6d0:	f8a5 7150 	strh.w	r7, [r5, #336]	; 0x150
		conn->llcp_length.disabled = 0U;
     6d4:	f367 01c3 	bfi	r1, r7, #3, #1
		conn_lll->sn = 0;
     6d8:	f022 021f 	bic.w	r2, r2, #31
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     6dc:	f023 0307 	bic.w	r3, r3, #7
		conn->llcp_conn_param.disabled = 0;
     6e0:	f367 1004 	bfi	r0, r7, #4, #1
		conn->llcp_length.disabled = 0U;
     6e4:	f885 119a 	strb.w	r1, [r5, #410]	; 0x19a
		conn_lll->sn = 0;
     6e8:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     6ec:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
		conn->llcp_conn_param.req = 0;
     6f0:	f8a5 7170 	strh.w	r7, [r5, #368]	; 0x170
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     6f4:	f8a5 7198 	strh.w	r7, [r5, #408]	; 0x198
		conn->llcp_length.cache.tx_octets = 0U;
     6f8:	f8a5 71a4 	strh.w	r7, [r5, #420]	; 0x1a4
		conn->llcp_conn_param.disabled = 0;
     6fc:	f885 0172 	strb.w	r0, [r5, #370]	; 0x172
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     700:	f00d ff00 	bl	e504 <ull_conn_default_tx_octets_get>
     704:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     708:	f00d ff02 	bl	e510 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     70c:	f8d5 21a8 	ldr.w	r2, [r5, #424]	; 0x1a8
     710:	4b40      	ldr	r3, [pc, #256]	; (814 <CONFIG_ISR_STACK_SIZE+0x14>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     712:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     716:	4013      	ands	r3, r2
     718:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     71c:	f00d fefe 	bl	e51c <ull_conn_default_phy_tx_get>
     720:	f895 31ac 	ldrb.w	r3, [r5, #428]	; 0x1ac
     724:	f360 0302 	bfi	r3, r0, #0, #3
     728:	f885 31ac 	strb.w	r3, [r5, #428]	; 0x1ac
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     72c:	f00d fefc 	bl	e528 <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     730:	e9c4 ab11 	strd	sl, fp, [r4, #68]	; 0x44
		lll->conn = conn_lll;
     734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     736:	6263      	str	r3, [r4, #36]	; 0x24
		conn->phy_pref_flags = 0;
     738:	f895 21ac 	ldrb.w	r2, [r5, #428]	; 0x1ac
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     73c:	f895 1020 	ldrb.w	r1, [r5, #32]
		conn->tx_data = conn->tx_data_last = 0;
     740:	f8c5 71c0 	str.w	r7, [r5, #448]	; 0x1c0
		conn->phy_pref_flags = 0;
     744:	0103      	lsls	r3, r0, #4
     746:	f003 0370 	and.w	r3, r3, #112	; 0x70
     74a:	f022 0278 	bic.w	r2, r2, #120	; 0x78
     74e:	4313      	orrs	r3, r2
     750:	f367 0100 	bfi	r1, r7, #0, #1
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     754:	e9c5 776e 	strd	r7, r7, [r5, #440]	; 0x1b8
     758:	e9c5 776c 	strd	r7, r7, [r5, #432]	; 0x1b0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     75c:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->parent = parent;
     760:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_flags = 0;
     762:	f885 31ac 	strb.w	r3, [r5, #428]	; 0x1ac
	hdr->is_stop = 0U;
     766:	f885 1020 	strb.w	r1, [r5, #32]
		err = lll_clock_wait();
     76a:	f011 fe37 	bl	123dc <lll_clock_wait>
		if (err) {
     76e:	2800      	cmp	r0, #0
     770:	f040 816e 	bne.w	a50 <CONFIG_BT_RX_STACK_SIZE+0x1b8>
	uint8_t ch_map = lll->chan_map;
     774:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     778:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     77a:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     77e:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
     780:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     784:	f008 fd92 	bl	92ac <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     788:	2800      	cmp	r0, #0
     78a:	f000 809f 	beq.w	8cc <CONFIG_BT_RX_STACK_SIZE+0x34>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     78e:	f899 3000 	ldrb.w	r3, [r9]
     792:	f003 030f 	and.w	r3, r3, #15
     796:	2b02      	cmp	r3, #2
     798:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     79c:	d03c      	beq.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     79e:	2b01      	cmp	r3, #1
     7a0:	f000 815a 	beq.w	a58 <CONFIG_BT_RX_STACK_SIZE+0x1c0>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
     7a4:	f898 0001 	ldrb.w	r0, [r8, #1]
     7a8:	3010      	adds	r0, #16
		const uint16_t scan_rsp_us =
     7aa:	00c0      	lsls	r0, r0, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     7ac:	2b00      	cmp	r3, #0
     7ae:	f040 8147 	bne.w	a40 <CONFIG_BT_RX_STACK_SIZE+0x1a8>
				adv_size += pdu_adv->len;
     7b2:	f899 3001 	ldrb.w	r3, [r9, #1]
     7b6:	3310      	adds	r3, #16
     7b8:	00db      	lsls	r3, r3, #3
     7ba:	f503 714d 	add.w	r1, r3, #820	; 0x334
     7be:	4408      	add	r0, r1
     7c0:	f503 739a 	add.w	r3, r3, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     7c4:	fb03 0002 	mla	r0, r3, r2, r0
     7c8:	e031      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     7ca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     7ce:	4632      	mov	r2, r6
     7d0:	f104 014f 	add.w	r1, r4, #79	; 0x4f
     7d4:	f010 fe0a 	bl	113ec <ull_filter_rl_find>
			if (lll->rl_idx != FILTER_IDX_NONE) {
     7d8:	28ff      	cmp	r0, #255	; 0xff
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     7da:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
			if (lll->rl_idx != FILTER_IDX_NONE) {
     7de:	d002      	beq.n	7e6 <CONFIG_BT_COMPANY_ID+0x1f5>
				ull_filter_rpa_update(false);
     7e0:	4630      	mov	r0, r6
     7e2:	f010 fce1 	bl	111a8 <ull_filter_rpa_update>
			ull_filter_adv_pdu_update(adv, pdu_adv);
     7e6:	4807      	ldr	r0, [pc, #28]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7e8:	4649      	mov	r1, r9
     7ea:	f010 fc57 	bl	1109c <ull_filter_adv_pdu_update>
			ull_filter_adv_pdu_update(adv, pdu_scan);
     7ee:	4805      	ldr	r0, [pc, #20]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7f0:	4641      	mov	r1, r8
     7f2:	f010 fc53 	bl	1109c <ull_filter_adv_pdu_update>
		if (pdu_adv->tx_addr &&
     7f6:	f899 3000 	ldrb.w	r3, [r9]
     7fa:	065a      	lsls	r2, r3, #25
     7fc:	f57f aed5 	bpl.w	5aa <ll_adv_enable+0x7a>
     800:	e6de      	b.n	5c0 <ll_adv_enable+0x90>
     802:	bf00      	nop
     804:	20002158 	.word	0x20002158
     808:	fffff880 	.word	0xfffff880
     80c:	01480148 	.word	0x01480148
     810:	0001417f 	.word	0x0001417f
     814:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
     818:	f899 3001 	ldrb.w	r3, [r9, #1]
     81c:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     81e:	00db      	lsls	r3, r3, #3
     820:	fb00 f003 	mul.w	r0, r0, r3
     824:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
     828:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     82a:	fb03 0002 	mla	r0, r3, r2, r0
     82e:	f894 7020 	ldrb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     832:	4aab      	ldr	r2, [pc, #684]	; (ae0 <CONFIG_BT_RX_STACK_SIZE+0x248>)
	hdr->parent = parent;
     834:	61e4      	str	r4, [r4, #28]
     836:	2500      	movs	r5, #0
	adv->evt.ticks_xtal_to_start =
     838:	2331      	movs	r3, #49	; 0x31
	hdr->is_stop = 0U;
     83a:	f365 0700 	bfi	r7, r5, #0, #1
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     83e:	fba0 0102 	umull	r0, r1, r0, r2
	adv->evt.ticks_xtal_to_start =
     842:	6023      	str	r3, [r4, #0]
     844:	f884 7020 	strb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     848:	a3a3      	add	r3, pc, #652	; (adr r3, ad8 <CONFIG_BT_RX_STACK_SIZE+0x240>)
     84a:	e9d3 2300 	ldrd	r2, r3, [r3]
     84e:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
     852:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     856:	f7ff fc93 	bl	180 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
     85a:	f8b4 804c 	ldrh.w	r8, [r4, #76]	; 0x4c
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     85e:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     860:	f009 ff34 	bl	a6cc <ticker_ticks_now_get>
     864:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     866:	f1b8 0f00 	cmp.w	r8, #0
     86a:	d108      	bne.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
     86c:	f899 5000 	ldrb.w	r5, [r9]
     870:	f005 050f 	and.w	r5, r5, #15
     874:	f1a5 0501 	sub.w	r5, r5, #1
     878:	fab5 f585 	clz	r5, r5
     87c:	096d      	lsrs	r5, r5, #5
     87e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     882:	68e3      	ldr	r3, [r4, #12]
     884:	f365 0200 	bfi	r2, r5, #0, #1
	if (lll->is_hdcd) {
     888:	f012 0501 	ands.w	r5, r2, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     88c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
     890:	f000 8085 	beq.w	99e <CONFIG_BT_RX_STACK_SIZE+0x106>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     894:	f8df 925c 	ldr.w	r9, [pc, #604]	; af4 <CONFIG_BT_RX_STACK_SIZE+0x25c>
     898:	4992      	ldr	r1, [pc, #584]	; (ae4 <CONFIG_BT_RX_STACK_SIZE+0x24c>)
     89a:	9304      	str	r3, [sp, #16]
     89c:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
     89e:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8a0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
     8a4:	9301      	str	r3, [sp, #4]
     8a6:	9105      	str	r1, [sp, #20]
     8a8:	e9cd 9807 	strd	r9, r8, [sp, #28]
     8ac:	2103      	movs	r1, #3
     8ae:	e9cd 0002 	strd	r0, r0, [sp, #8]
     8b2:	9406      	str	r4, [sp, #24]
     8b4:	462a      	mov	r2, r5
     8b6:	9000      	str	r0, [sp, #0]
     8b8:	463b      	mov	r3, r7
		ret_cb = TICKER_STATUS_BUSY;
     8ba:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8bc:	f009 fe54 	bl	a568 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     8c0:	4641      	mov	r1, r8
     8c2:	f00c f99f 	bl	cc04 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     8c6:	2800      	cmp	r0, #0
     8c8:	f000 80a5 	beq.w	a16 <CONFIG_BT_RX_STACK_SIZE+0x17e>
	if (adv->lll.conn) {
     8cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
     8ce:	2b00      	cmp	r3, #0
     8d0:	f43f ae71 	beq.w	5b6 <ll_adv_enable+0x86>
		conn_release(adv);
     8d4:	f00c fd08 	bl	d2e8 <conn_release.constprop.0>
	return BT_HCI_ERR_CMD_DISALLOWED;
     8d8:	260c      	movs	r6, #12
}
     8da:	4630      	mov	r0, r6
     8dc:	b00f      	add	sp, #60	; 0x3c
     8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!adv || !adv->is_enabled) {
     8e2:	2e00      	cmp	r6, #0
     8e4:	f43f ae67 	beq.w	5b6 <ll_adv_enable+0x86>
	mark = ull_disable_mark(adv);
     8e8:	4620      	mov	r0, r4
     8ea:	f00c f9b3 	bl	cc54 <ull_disable_mark>
	LL_ASSERT(mark == adv);
     8ee:	4284      	cmp	r4, r0
     8f0:	d00c      	beq.n	90c <CONFIG_BT_RX_STACK_SIZE+0x74>
     8f2:	4a7d      	ldr	r2, [pc, #500]	; (ae8 <CONFIG_BT_RX_STACK_SIZE+0x250>)
     8f4:	497d      	ldr	r1, [pc, #500]	; (aec <CONFIG_BT_RX_STACK_SIZE+0x254>)
     8f6:	487e      	ldr	r0, [pc, #504]	; (af0 <CONFIG_BT_RX_STACK_SIZE+0x258>)
     8f8:	f240 7355 	movw	r3, #1877	; 0x755
     8fc:	f01d f9f7 	bl	1dcee <printk>
     900:	4040      	eors	r0, r0
     902:	f380 8811 	msr	BASEPRI, r0
     906:	f04f 0003 	mov.w	r0, #3
     90a:	df02      	svc	2
	if (adv->lll.is_hdcd) {
     90c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     910:	07d8      	lsls	r0, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     912:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
     914:	d50e      	bpl.n	934 <CONFIG_BT_RX_STACK_SIZE+0x9c>
		ret_cb = TICKER_STATUS_BUSY;
     916:	2202      	movs	r2, #2
     918:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     91a:	2103      	movs	r1, #3
     91c:	4b75      	ldr	r3, [pc, #468]	; (af4 <CONFIG_BT_RX_STACK_SIZE+0x25c>)
     91e:	9500      	str	r5, [sp, #0]
     920:	2201      	movs	r2, #1
     922:	2000      	movs	r0, #0
     924:	f009 fe8c 	bl	a640 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
     928:	4629      	mov	r1, r5
     92a:	f00c f96b 	bl	cc04 <ull_ticker_status_take>
		if (ret) {
     92e:	2800      	cmp	r0, #0
     930:	f040 80c7 	bne.w	ac2 <CONFIG_BT_RX_STACK_SIZE+0x22a>
	ret_cb = TICKER_STATUS_BUSY;
     934:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     936:	2103      	movs	r1, #3
     938:	4b6e      	ldr	r3, [pc, #440]	; (af4 <CONFIG_BT_RX_STACK_SIZE+0x25c>)
     93a:	9500      	str	r5, [sp, #0]
     93c:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
     93e:	920d      	str	r2, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     940:	f009 fe7e 	bl	a640 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
     944:	4629      	mov	r1, r5
     946:	f00c f95d 	bl	cc04 <ull_ticker_status_take>
	if (ret) {
     94a:	2800      	cmp	r0, #0
     94c:	f040 809d 	bne.w	a8a <CONFIG_BT_RX_STACK_SIZE+0x1f2>
	}

	ret = ull_disable(&adv->lll);
     950:	4869      	ldr	r0, [pc, #420]	; (af8 <CONFIG_BT_RX_STACK_SIZE+0x260>)
     952:	f00c f9bb 	bl	cccc <ull_disable>
	LL_ASSERT(!ret);
     956:	2800      	cmp	r0, #0
     958:	f040 8083 	bne.w	a62 <CONFIG_BT_RX_STACK_SIZE+0x1ca>

	mark = ull_disable_unmark(adv);
     95c:	4867      	ldr	r0, [pc, #412]	; (afc <CONFIG_BT_RX_STACK_SIZE+0x264>)
     95e:	f00c f985 	bl	cc6c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
     962:	4284      	cmp	r4, r0
     964:	d00c      	beq.n	980 <CONFIG_BT_RX_STACK_SIZE+0xe8>
     966:	4a60      	ldr	r2, [pc, #384]	; (ae8 <CONFIG_BT_RX_STACK_SIZE+0x250>)
     968:	4960      	ldr	r1, [pc, #384]	; (aec <CONFIG_BT_RX_STACK_SIZE+0x254>)
     96a:	4861      	ldr	r0, [pc, #388]	; (af0 <CONFIG_BT_RX_STACK_SIZE+0x258>)
     96c:	f240 7377 	movw	r3, #1911	; 0x777
     970:	f01d f9bd 	bl	1dcee <printk>
     974:	4040      	eors	r0, r0
     976:	f380 8811 	msr	BASEPRI, r0
     97a:	f04f 0003 	mov.w	r0, #3
     97e:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
     980:	6a63      	ldr	r3, [r4, #36]	; 0x24
     982:	b10b      	cbz	r3, 988 <CONFIG_BT_RX_STACK_SIZE+0xf0>
		conn_release(adv);
     984:	f00c fcb0 	bl	d2e8 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
     988:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
     98c:	2600      	movs	r6, #0
	adv->is_enabled = 0U;
     98e:	f36f 0300 	bfc	r3, #0, #1
}
     992:	4630      	mov	r0, r6
	adv->is_enabled = 0U;
     994:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     998:	b00f      	add	sp, #60	; 0x3c
     99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     99e:	4858      	ldr	r0, [pc, #352]	; (b00 <CONFIG_BT_RX_STACK_SIZE+0x268>)
		ll_adv_ticker_ext[handle].ticks_slot_window =
     9a0:	4a58      	ldr	r2, [pc, #352]	; (b04 <CONFIG_BT_RX_STACK_SIZE+0x26c>)
		ret = ticker_start_ext(
     9a2:	f8df e150 	ldr.w	lr, [pc, #336]	; af4 <CONFIG_BT_RX_STACK_SIZE+0x25c>
     9a6:	f8df c13c 	ldr.w	ip, [pc, #316]	; ae4 <CONFIG_BT_RX_STACK_SIZE+0x24c>
     9aa:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     9ac:	fba8 0100 	umull	r0, r1, r8, r0
     9b0:	f04f 0991 	mov.w	r9, #145	; 0x91
     9b4:	fb09 1108 	mla	r1, r9, r8, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     9b8:	f203 1847 	addw	r8, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     9bc:	f8c2 8000 	str.w	r8, [r2]
		ret_cb = TICKER_STATUS_BUSY;
     9c0:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
     9c4:	9304      	str	r3, [sp, #16]
     9c6:	9209      	str	r2, [sp, #36]	; 0x24
     9c8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     9cc:	a342      	add	r3, pc, #264	; (adr r3, ad8 <CONFIG_BT_RX_STACK_SIZE+0x240>)
     9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     9d2:	f64f 7aff 	movw	sl, #65535	; 0xffff
     9d6:	e9cd e807 	strd	lr, r8, [sp, #28]
     9da:	9502      	str	r5, [sp, #8]
		ret_cb = TICKER_STATUS_BUSY;
     9dc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
		ret = ticker_start_ext(
     9e0:	f8cd c014 	str.w	ip, [sp, #20]
     9e4:	f8cd a00c 	str.w	sl, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     9e8:	f7ff fbca 	bl	180 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     9ec:	464a      	mov	r2, r9
     9ee:	e9cd 5000 	strd	r5, r0, [sp]
     9f2:	463b      	mov	r3, r7
     9f4:	4628      	mov	r0, r5
     9f6:	2103      	movs	r1, #3
     9f8:	f009 fd60 	bl	a4bc <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
     9fc:	4641      	mov	r1, r8
     9fe:	f00c f901 	bl	cc04 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     a02:	2800      	cmp	r0, #0
     a04:	f47f af62 	bne.w	8cc <CONFIG_BT_RX_STACK_SIZE+0x34>
	adv->is_enabled = 1;
     a08:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
     a0c:	f043 0301 	orr.w	r3, r3, #1
     a10:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	return 0;
     a14:	e5d0      	b.n	5b8 <ll_adv_enable+0x88>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     a16:	493c      	ldr	r1, [pc, #240]	; (b08 <CONFIG_BT_RX_STACK_SIZE+0x270>)
     a18:	9105      	str	r1, [sp, #20]
     a1a:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     a1e:	9200      	str	r2, [sp, #0]
     a20:	e9cd 9807 	strd	r9, r8, [sp, #28]
     a24:	e9cd 0003 	strd	r0, r0, [sp, #12]
     a28:	e9cd 0001 	strd	r0, r0, [sp, #4]
     a2c:	9406      	str	r4, [sp, #24]
     a2e:	463b      	mov	r3, r7
     a30:	2201      	movs	r2, #1
     a32:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     a34:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     a36:	f009 fd97 	bl	a568 <ticker_start>
     a3a:	e7df      	b.n	9fc <CONFIG_BT_RX_STACK_SIZE+0x164>
			return BT_HCI_ERR_INVALID_PARAM;
     a3c:	2612      	movs	r6, #18
     a3e:	e5bb      	b.n	5b8 <ll_adv_enable+0x88>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     a40:	2b06      	cmp	r3, #6
     a42:	f43f aeb6 	beq.w	7b2 <CONFIG_BT_COMPANY_ID+0x1c1>
     a46:	f44f 73da 	mov.w	r3, #436	; 0x1b4
     a4a:	f44f 701b 	mov.w	r0, #620	; 0x26c
     a4e:	e6b9      	b.n	7c4 <CONFIG_BT_COMPANY_ID+0x1d3>
			conn_release(adv);
     a50:	f00c fc4a 	bl	d2e8 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     a54:	2603      	movs	r6, #3
     a56:	e5af      	b.n	5b8 <ll_adv_enable+0x88>
     a58:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
     a5c:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
     a60:	e6b0      	b.n	7c4 <CONFIG_BT_COMPANY_ID+0x1d3>
	LL_ASSERT(!ret);
     a62:	4a21      	ldr	r2, [pc, #132]	; (ae8 <CONFIG_BT_RX_STACK_SIZE+0x250>)
     a64:	4929      	ldr	r1, [pc, #164]	; (b0c <CONFIG_BT_RX_STACK_SIZE+0x274>)
     a66:	4822      	ldr	r0, [pc, #136]	; (af0 <CONFIG_BT_RX_STACK_SIZE+0x258>)
     a68:	f240 7374 	movw	r3, #1908	; 0x774
     a6c:	f01d f93f 	bl	1dcee <printk>
     a70:	4040      	eors	r0, r0
     a72:	f380 8811 	msr	BASEPRI, r0
     a76:	f04f 0003 	mov.w	r0, #3
     a7a:	df02      	svc	2
     a7c:	e76e      	b.n	95c <CONFIG_BT_RX_STACK_SIZE+0xc4>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     a7e:	f105 0070 	add.w	r0, r5, #112	; 0x70
     a82:	67a8      	str	r0, [r5, #120]	; 0x78
     a84:	e5c6      	b.n	614 <CONFIG_BT_COMPANY_ID+0x23>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     a86:	2607      	movs	r6, #7
     a88:	e596      	b.n	5b8 <ll_adv_enable+0x88>
		mark = ull_disable_unmark(adv);
     a8a:	481c      	ldr	r0, [pc, #112]	; (afc <CONFIG_BT_RX_STACK_SIZE+0x264>)
     a8c:	f00c f8ee 	bl	cc6c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
     a90:	4284      	cmp	r4, r0
     a92:	f43f ad90 	beq.w	5b6 <ll_adv_enable+0x86>
     a96:	f240 736e 	movw	r3, #1902	; 0x76e
     a9a:	4a13      	ldr	r2, [pc, #76]	; (ae8 <CONFIG_BT_RX_STACK_SIZE+0x250>)
     a9c:	4913      	ldr	r1, [pc, #76]	; (aec <CONFIG_BT_RX_STACK_SIZE+0x254>)
     a9e:	4814      	ldr	r0, [pc, #80]	; (af0 <CONFIG_BT_RX_STACK_SIZE+0x258>)
     aa0:	f01d f925 	bl	1dcee <printk>
     aa4:	4040      	eors	r0, r0
     aa6:	f380 8811 	msr	BASEPRI, r0
     aaa:	f04f 0003 	mov.w	r0, #3
     aae:	df02      	svc	2
     ab0:	e581      	b.n	5b6 <ll_adv_enable+0x86>
			ll_rx_release(node_rx);
     ab2:	4658      	mov	r0, fp
     ab4:	f00c f82a 	bl	cb0c <ll_rx_release>
			ll_rx_link_release(link);
     ab8:	4650      	mov	r0, sl
     aba:	f00c f81b 	bl	caf4 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     abe:	2607      	movs	r6, #7
     ac0:	e57a      	b.n	5b8 <ll_adv_enable+0x88>
			mark = ull_disable_unmark(adv);
     ac2:	480e      	ldr	r0, [pc, #56]	; (afc <CONFIG_BT_RX_STACK_SIZE+0x264>)
     ac4:	f00c f8d2 	bl	cc6c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
     ac8:	4284      	cmp	r4, r0
     aca:	f43f ad74 	beq.w	5b6 <ll_adv_enable+0x86>
     ace:	f44f 63ec 	mov.w	r3, #1888	; 0x760
     ad2:	e7e2      	b.n	a9a <CONFIG_BT_RX_STACK_SIZE+0x202>
     ad4:	f3af 8000 	nop.w
     ad8:	1afd498d 	.word	0x1afd498d
     adc:	00000007 	.word	0x00000007
     ae0:	3b9aca00 	.word	0x3b9aca00
     ae4:	0000cfc1 	.word	0x0000cfc1
     ae8:	00027838 	.word	0x00027838
     aec:	00027928 	.word	0x00027928
     af0:	000275f0 	.word	0x000275f0
     af4:	0000bb3d 	.word	0x0000bb3d
     af8:	20002174 	.word	0x20002174
     afc:	20002158 	.word	0x20002158
     b00:	84e72a00 	.word	0x84e72a00
     b04:	200021b0 	.word	0x200021b0
     b08:	0000d261 	.word	0x0000d261
     b0c:	00027720 	.word	0x00027720

00000b10 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
     b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b14:	4604      	mov	r4, r0
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     b16:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
     b1a:	f890 00e8 	ldrb.w	r0, [r0, #232]	; 0xe8
     b1e:	4283      	cmp	r3, r0
{
     b20:	b08b      	sub	sp, #44	; 0x2c
     b22:	460d      	mov	r5, r1
     b24:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
     b26:	d00e      	beq.n	b46 <ull_conn_llcp+0x36>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     b28:	1ac0      	subs	r0, r0, r3
     b2a:	f000 0003 	and.w	r0, r0, #3
     b2e:	2802      	cmp	r0, #2
     b30:	d01b      	beq.n	b6a <ull_conn_llcp+0x5a>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
     b32:	f894 212d 	ldrb.w	r2, [r4, #301]	; 0x12d
     b36:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
     b3a:	429a      	cmp	r2, r3
     b3c:	d130      	bne.n	ba0 <ull_conn_llcp+0x90>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
     b3e:	2000      	movs	r0, #0
}
     b40:	b00b      	add	sp, #44	; 0x2c
     b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !conn->llcp_enc.pause_rx) {
     b46:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	if ((conn->llcp_ack == conn->llcp_req) &&
     b4a:	f012 0801 	ands.w	r8, r2, #1
     b4e:	d1f0      	bne.n	b32 <ull_conn_llcp+0x22>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     b50:	f894 c105 	ldrb.w	ip, [r4, #261]	; 0x105
     b54:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
     b58:	4561      	cmp	r1, ip
     b5a:	f000 836f 	beq.w	123c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x29c>
			conn->llcp_ack -= 2U;
     b5e:	1e98      	subs	r0, r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
     b60:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
     b62:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CONN_UPD;
     b66:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
     b6a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
     b6e:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
     b72:	429a      	cmp	r2, r3
     b74:	d006      	beq.n	b84 <ull_conn_llcp+0x74>
			if ((conn->llcp_length.state ==
     b76:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
     b7a:	f002 0106 	and.w	r1, r2, #6
     b7e:	2904      	cmp	r1, #4
     b80:	f000 839f 	beq.w	12c2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x322>
		switch (conn->llcp_type) {
     b84:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
     b88:	1e7a      	subs	r2, r7, #1
     b8a:	2a05      	cmp	r2, #5
     b8c:	f200 8348 	bhi.w	1220 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x280>
     b90:	e8df f012 	tbh	[pc, r2, lsl #1]
     b94:	02e0005c 	.word	0x02e0005c
     b98:	03460262 	.word	0x03460262
     b9c:	01c40309 	.word	0x01c40309
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     ba0:	4829      	ldr	r0, [pc, #164]	; (c48 <ull_conn_llcp+0x138>)
     ba2:	f008 f9b7 	bl	8f14 <mem_acquire>
		if (tx) {
     ba6:	b358      	cbz	r0, c00 <ull_conn_llcp+0xf0>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
     ba8:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
     bac:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     bb0:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
     bb2:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     bb4:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
     bb8:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     bba:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
     bbc:	71c2      	strb	r2, [r0, #7]
					 struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* data/ctrl packet is in the head */
	    conn->tx_head &&
     bbe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_tx->llctrl.terminate_ind.error_code =
     bc2:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
     bc6:	7202      	strb	r2, [r0, #8]
	if (
     bc8:	b32b      	cbz	r3, c16 <ull_conn_llcp+0x106>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_tx &&
     bca:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
     bce:	0791      	lsls	r1, r2, #30
     bd0:	d421      	bmi.n	c16 <ull_conn_llcp+0x106>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
	    !conn->llcp_phy.pause_tx &&
     bd2:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
     bd6:	07d2      	lsls	r2, r2, #31
     bd8:	d41d      	bmi.n	c16 <ull_conn_llcp+0x106>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
     bda:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
     bde:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
     be0:	bf04      	itt	eq
     be2:	681a      	ldreq	r2, [r3, #0]
     be4:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
     be8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
     bec:	b9b2      	cbnz	r2, c1c <ull_conn_llcp+0x10c>
			tx->next = conn->tx_head->next;
     bee:	681a      	ldr	r2, [r3, #0]
     bf0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
     bf2:	6018      	str	r0, [r3, #0]
			 * control PDU in Encryption Procedure that is not
			 * implicitly paused, will set the control and control
			 * last marker.
			 */
			if (!pause) {
				conn->tx_ctrl = tx;
     bf4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
     bf6:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
     bfa:	b90b      	cbnz	r3, c00 <ull_conn_llcp+0xf0>
		conn->tx_data_last = tx;
     bfc:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
		if (!conn->procedure_expire) {
     c00:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
     c04:	2800      	cmp	r0, #0
     c06:	d19a      	bne.n	b3e <ull_conn_llcp+0x2e>
			conn->procedure_expire = conn->supervision_reload;
     c08:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
     c0c:	2b01      	cmp	r3, #1
     c0e:	d90e      	bls.n	c2e <ull_conn_llcp+0x11e>
			conn->procedure_expire = conn->supervision_reload;
     c10:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
     c14:	e793      	b.n	b3e <ull_conn_llcp+0x2e>
		if (!conn->tx_ctrl) {
     c16:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
     c1a:	b172      	cbz	r2, c3a <ull_conn_llcp+0x12a>
	tx->next = conn->tx_ctrl_last->next;
     c1c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
     c20:	681a      	ldr	r2, [r3, #0]
     c22:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
     c24:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
     c26:	6803      	ldr	r3, [r0, #0]
     c28:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
}
     c2c:	e7e5      	b.n	bfa <ull_conn_llcp+0xea>
				conn->procedure_expire++;
     c2e:	3301      	adds	r3, #1
     c30:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
     c34:	b00b      	add	sp, #44	; 0x2c
     c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
     c3a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
     c3c:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
     c40:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
     c44:	e7d9      	b.n	bfa <ull_conn_llcp+0xea>
     c46:	bf00      	nop
     c48:	2000241c 	.word	0x2000241c
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
     c4c:	4fa6      	ldr	r7, [pc, #664]	; (ee8 <ull_conn_llcp+0x3d8>)

	/* set mutex */
	if (!conn_upd) {
     c4e:	683b      	ldr	r3, [r7, #0]
     c50:	2b00      	cmp	r3, #0
     c52:	f000 84fb 	beq.w	164c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c4>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     c56:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
     c5a:	8e62      	ldrh	r2, [r4, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     c5c:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     c60:	4490      	add	r8, r2
     c62:	44b0      	add	r8, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     c64:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     c68:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     c6c:	f040 8480 	bne.w	1570 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e8>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     c70:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
     c74:	eba8 0209 	sub.w	r2, r8, r9
     c78:	fa1f fa82 	uxth.w	sl, r2
				    pdu_ctrl_tx, NULL, NULL);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */

		ctrl_tx_enqueue(conn, tx);

	} else if (instant_latency <= 0x7FFF) {
     c7c:	0412      	lsls	r2, r2, #16
     c7e:	f53f af58 	bmi.w	b32 <ull_conn_llcp+0x22>
		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;
		conn->llcp_ack = conn->llcp_req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     c82:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
     c86:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
		conn->llcp_cu.ack = conn->llcp_cu.req;
     c8a:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
     c8e:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     c92:	428a      	cmp	r2, r1
		conn->llcp_ack = conn->llcp_req;
     c94:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
     c98:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     c9c:	d009      	beq.n	cb2 <ull_conn_llcp+0x1a2>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     c9e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     ca2:	f002 0207 	and.w	r2, r2, #7
     ca6:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     ca8:	bf04      	itt	eq
     caa:	f884 1171 	strbeq.w	r1, [r4, #369]	; 0x171

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
     cae:	f8a4 30cc 	strheq.w	r3, [r4, #204]	; 0xcc
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
     cb2:	683b      	ldr	r3, [r7, #0]
     cb4:	429c      	cmp	r4, r3
	conn_upd_curr = NULL;
     cb6:	bf04      	itt	eq
     cb8:	2300      	moveq	r3, #0
     cba:	603b      	streq	r3, [r7, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     cbc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
     cc0:	2f00      	cmp	r7, #0
     cc2:	f000 857f 	beq.w	17c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x43c>
     cc6:	6838      	ldr	r0, [r7, #0]
     cc8:	2800      	cmp	r0, #0
     cca:	f000 857b 	beq.w	17c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x43c>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
     cce:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
     cd2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
     cd4:	6841      	ldr	r1, [r0, #4]
     cd6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		if ((conn->llcp_cu.interval != lll->interval) ||
     cda:	4293      	cmp	r3, r2
     cdc:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
     ce0:	f8b4 c10c 	ldrh.w	ip, [r4, #268]	; 0x10c
     ce4:	f000 86c4 	beq.w	1a70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e8>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * 1250) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
     ce8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
     cea:	80fa      	strh	r2, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     cec:	f04f 0e11 	mov.w	lr, #17

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
     cf0:	2200      	movs	r2, #0
			cu->interval = conn->llcp_cu.interval;
     cf2:	83fb      	strh	r3, [r7, #30]
			cu->latency = conn->llcp_cu.latency;
     cf4:	8439      	strh	r1, [r7, #32]
			cu->timeout = conn->llcp_cu.timeout;
     cf6:	f8a7 c022 	strh.w	ip, [r7, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     cfa:	f887 e004 	strb.w	lr, [r7, #4]
			cu->status = 0x00;
     cfe:	773a      	strb	r2, [r7, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     d00:	4639      	mov	r1, r7
     d02:	f00b ff09 	bl	cb18 <ll_rx_put>
		ll_rx_sched();
     d06:	f00b ff11 	bl	cb2c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
     d0a:	6823      	ldr	r3, [r4, #0]
     d0c:	2b00      	cmp	r3, #0
     d0e:	da09      	bge.n	d24 <ull_conn_llcp+0x214>
			uint32_t ticks_prepare_to_start =
     d10:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     d18:	428a      	cmp	r2, r1
     d1a:	bf2c      	ite	cs
     d1c:	18a9      	addcs	r1, r5, r2
     d1e:	1869      	addcc	r1, r5, r1
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     d20:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     d22:	1acd      	subs	r5, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
     d24:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
     d26:	f8b4 7108 	ldrh.w	r7, [r4, #264]	; 0x108
		conn_interval_old = instant_latency * lll->interval;
     d2a:	fb13 f30a 	smulbb	r3, r3, sl
     d2e:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
     d30:	fbb3 f1f7 	udiv	r1, r3, r7
		conn_interval_new = latency * conn->llcp_cu.interval;
     d34:	fb17 f201 	smulbb	r2, r7, r1
     d38:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
     d3a:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
     d3c:	fa1f fb81 	uxth.w	fp, r1
		if (conn_interval_new > conn_interval_old) {
     d40:	f080 852e 	bcs.w	17a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x418>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     d44:	1ad3      	subs	r3, r2, r3
     d46:	4869      	ldr	r0, [pc, #420]	; (eec <ull_conn_llcp+0x3dc>)
     d48:	f240 42e2 	movw	r2, #1250	; 0x4e2
     d4c:	fb02 f303 	mul.w	r3, r2, r3
     d50:	fba3 0100 	umull	r0, r1, r3, r0
     d54:	a362      	add	r3, pc, #392	; (adr r3, ee0 <ull_conn_llcp+0x3d0>)
     d56:	e9d3 2300 	ldrd	r2, r3, [r3]
     d5a:	f7ff fa11 	bl	180 <__aeabi_uldivmod>
     d5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     d62:	4405      	add	r5, r0
				(conn_interval_new - conn_interval_old) * 1250U);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) * 1250U);
		}
		lll->latency_prepare += lazy;
     d64:	8e62      	ldrh	r2, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
     d66:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
     d6a:	eba9 0808 	sub.w	r8, r9, r8
     d6e:	44d8      	add	r8, fp
		lll->latency_prepare += lazy;
     d70:	4432      	add	r2, r6
		lll->latency_prepare -= (instant_latency - latency);
     d72:	4490      	add	r8, r2
		conn_interval_us = conn->llcp_cu.interval * 1250U;
     d74:	f240 49e2 	movw	r9, #1250	; 0x4e2
		} else if (lll->role) {
     d78:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
     d7a:	f8a4 8032 	strh.w	r8, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
     d7e:	fb09 f707 	mul.w	r7, r9, r7
		} else if (lll->role) {
     d82:	f2c0 852f 	blt.w	17e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45c>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
     d86:	4a5a      	ldr	r2, [pc, #360]	; (ef0 <ull_conn_llcp+0x3e0>)
     d88:	495a      	ldr	r1, [pc, #360]	; (ef4 <ull_conn_llcp+0x3e4>)
     d8a:	485b      	ldr	r0, [pc, #364]	; (ef8 <ull_conn_llcp+0x3e8>)
     d8c:	f640 1355 	movw	r3, #2389	; 0x955
     d90:	f01c ffad 	bl	1dcee <printk>
     d94:	4040      	eors	r0, r0
     d96:	f380 8811 	msr	BASEPRI, r0
     d9a:	f04f 0003 	mov.w	r0, #3
     d9e:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
     da0:	f04f 0800 	mov.w	r8, #0
		periodic_us = conn_interval_us;
     da4:	463e      	mov	r6, r7

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     da6:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
		lll->latency = conn->llcp_cu.latency;
     daa:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     dae:	4b53      	ldr	r3, [pc, #332]	; (efc <ull_conn_llcp+0x3ec>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     db0:	4853      	ldr	r0, [pc, #332]	; (f00 <ull_conn_llcp+0x3f0>)
		lll->latency = conn->llcp_cu.latency;
     db2:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     db4:	f242 7c10 	movw	ip, #10000	; 0x2710
     db8:	fb0c 7202 	mla	r2, ip, r2, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     dbc:	443b      	add	r3, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     dbe:	4438      	add	r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     dc0:	fbb3 f3f7 	udiv	r3, r3, r7
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     dc4:	f101 0c06 	add.w	ip, r1, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     dc8:	3a01      	subs	r2, #1
     dca:	fbb2 f2f7 	udiv	r2, r2, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     dce:	fbb0 f7f7 	udiv	r7, r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     dd2:	b298      	uxth	r0, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     dd4:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     dd8:	4560      	cmp	r0, ip
		lll->interval = conn->llcp_cu.interval;
     dda:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     dde:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     de2:	f8a4 70ca 	strh.w	r7, [r4, #202]	; 0xca
		lll->interval = conn->llcp_cu.interval;
     de6:	85e2      	strh	r2, [r4, #46]	; 0x2e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     de8:	dd02      	ble.n	df0 <ull_conn_llcp+0x2e0>
				     (conn->apto_reload - (lll->latency + 6)) :
     dea:	1a40      	subs	r0, r0, r1
     dec:	3806      	subs	r0, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     dee:	b280      	uxth	r0, r0
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
     df0:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     df4:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
     df8:	0758      	lsls	r0, r3, #29
			conn->supervision_expire = 0U;
     dfa:	bf44      	itt	mi
     dfc:	2300      	movmi	r3, #0
     dfe:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     e02:	2102      	movs	r1, #2
     e04:	2001      	movs	r0, #1
     e06:	f013 fa29 	bl	1425c <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     e0a:	2200      	movs	r2, #0
     e0c:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     e0e:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     e10:	2001      	movs	r0, #1
     e12:	f008 f921 	bl	9058 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
     e16:	493b      	ldr	r1, [pc, #236]	; (f04 <ull_conn_llcp+0x3f4>)
     e18:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
     e1c:	4620      	mov	r0, r4
     e1e:	f008 f8ad 	bl	8f7c <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
     e22:	1cc2      	adds	r2, r0, #3
     e24:	fa5f fa82 	uxtb.w	sl, r2
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
     e28:	4b37      	ldr	r3, [pc, #220]	; (f08 <ull_conn_llcp+0x3f8>)
     e2a:	9400      	str	r4, [sp, #0]
     e2c:	4652      	mov	r2, sl
     e2e:	2101      	movs	r1, #1
     e30:	2000      	movs	r0, #0
     e32:	f009 fc05 	bl	a640 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     e36:	f030 0302 	bics.w	r3, r0, #2
     e3a:	d00c      	beq.n	e56 <ull_conn_llcp+0x346>
     e3c:	4a2c      	ldr	r2, [pc, #176]	; (ef0 <ull_conn_llcp+0x3e0>)
     e3e:	4933      	ldr	r1, [pc, #204]	; (f0c <ull_conn_llcp+0x3fc>)
     e40:	482d      	ldr	r0, [pc, #180]	; (ef8 <ull_conn_llcp+0x3e8>)
     e42:	f640 1384 	movw	r3, #2436	; 0x984
     e46:	f01c ff52 	bl	1dcee <printk>
     e4a:	4040      	eors	r0, r0
     e4c:	f380 8811 	msr	BASEPRI, r0
     e50:	f04f 0003 	mov.w	r0, #3
     e54:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     e56:	4b25      	ldr	r3, [pc, #148]	; (eec <ull_conn_llcp+0x3dc>)
     e58:	fba6 6703 	umull	r6, r7, r6, r3
     e5c:	4630      	mov	r0, r6
     e5e:	a320      	add	r3, pc, #128	; (adr r3, ee0 <ull_conn_llcp+0x3d0>)
     e60:	e9d3 2300 	ldrd	r2, r3, [r3]
     e64:	4639      	mov	r1, r7
     e66:	f7ff f98b 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
     e6a:	4a29      	ldr	r2, [pc, #164]	; (f10 <ull_conn_llcp+0x400>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     e6c:	68e3      	ldr	r3, [r4, #12]
     e6e:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
     e70:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
     e74:	fbab 2302 	umull	r2, r3, fp, r2
     e78:	2007      	movs	r0, #7
     e7a:	fb00 330b 	mla	r3, r0, fp, r3
     e7e:	1ab0      	subs	r0, r6, r2
     e80:	eb67 0103 	sbc.w	r1, r7, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     e84:	9408      	str	r4, [sp, #32]
     e86:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
     e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     e8c:	2400      	movs	r4, #0
				     HAL_TICKER_REMAINDER(periodic_us),
     e8e:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     e90:	4f20      	ldr	r7, [pc, #128]	; (f14 <ull_conn_llcp+0x404>)
     e92:	4e21      	ldr	r6, [pc, #132]	; (f18 <ull_conn_llcp+0x408>)
     e94:	9707      	str	r7, [sp, #28]
     e96:	9605      	str	r6, [sp, #20]
     e98:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
     e9a:	f7ff f971 	bl	180 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     e9e:	462b      	mov	r3, r5
     ea0:	e9cd b001 	strd	fp, r0, [sp, #4]
     ea4:	f8cd 8000 	str.w	r8, [sp]
     ea8:	4620      	mov	r0, r4
     eaa:	4652      	mov	r2, sl
     eac:	2101      	movs	r1, #1
     eae:	f009 fb5b 	bl	a568 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     eb2:	f030 0302 	bics.w	r3, r0, #2
     eb6:	d00c      	beq.n	ed2 <ull_conn_llcp+0x3c2>
     eb8:	4a0d      	ldr	r2, [pc, #52]	; (ef0 <ull_conn_llcp+0x3e0>)
     eba:	4914      	ldr	r1, [pc, #80]	; (f0c <ull_conn_llcp+0x3fc>)
     ebc:	480e      	ldr	r0, [pc, #56]	; (ef8 <ull_conn_llcp+0x3e8>)
     ebe:	f640 139e 	movw	r3, #2462	; 0x99e
     ec2:	f01c ff14 	bl	1dcee <printk>
     ec6:	4040      	eors	r0, r0
     ec8:	f380 8811 	msr	BASEPRI, r0
     ecc:	f04f 0003 	mov.w	r0, #3
     ed0:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
     ed2:	f1b9 0f00 	cmp.w	r9, #0
     ed6:	f040 85e4 	bne.w	1aa2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x71a>
				return -ECANCELED;
     eda:	f06f 008b 	mvn.w	r0, #139	; 0x8b
     ede:	e62f      	b.n	b40 <ull_conn_llcp+0x30>
     ee0:	1afd498d 	.word	0x1afd498d
     ee4:	00000007 	.word	0x00000007
     ee8:	20002398 	.word	0x20002398
     eec:	3b9aca00 	.word	0x3b9aca00
     ef0:	00027934 	.word	0x00027934
     ef4:	00027650 	.word	0x00027650
     ef8:	000275f0 	.word	0x000275f0
     efc:	01c9c37f 	.word	0x01c9c37f
     f00:	026259ff 	.word	0x026259ff
     f04:	200021d0 	.word	0x200021d0
     f08:	0000db09 	.word	0x0000db09
     f0c:	00027a74 	.word	0x00027a74
     f10:	1afd498d 	.word	0x1afd498d
     f14:	0000dab1 	.word	0x0000dab1
     f18:	000109a1 	.word	0x000109a1
			event_counter = lll->event_counter +
     f1c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
     f1e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
     f20:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
     f24:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
     f26:	4432      	add	r2, r6
			event_counter = lll->event_counter +
     f28:	b296      	uxth	r6, r2
	if (conn->llcp.phy_upd_ind.initiate) {
     f2a:	07da      	lsls	r2, r3, #31
     f2c:	4619      	mov	r1, r3
     f2e:	f100 8215 	bmi.w	135c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3bc>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
     f32:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
     f36:	1ab6      	subs	r6, r6, r2
     f38:	0430      	lsls	r0, r6, #16
     f3a:	f53f adfa 	bmi.w	b32 <ull_conn_llcp+0x22>

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = lll->phy_tx;
     f3e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
     f42:	f894 8065 	ldrb.w	r8, [r4, #101]	; 0x65
		conn->llcp_ack = conn->llcp_req;
     f46:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
     f4a:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		conn->llcp_ack = conn->llcp_req;
     f4e:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
     f52:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
     f56:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
     f5a:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
     f5e:	f040 85a9 	bne.w	1ab4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72c>
		uint16_t eff_tx_time = lll->max_tx_time;
     f62:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
     f66:	f013 0fe0 	tst.w	r3, #224	; 0xe0
     f6a:	d008      	beq.n	f7e <ull_conn_llcp+0x46e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
     f6c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
     f70:	095b      	lsrs	r3, r3, #5
     f72:	f363 0202 	bfi	r2, r3, #0, #3
     f76:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
     f7a:	f44f 77a4 	mov.w	r7, #328	; 0x148
					      max_rx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		lll->phy_flags = conn->phy_pref_flags;
     f7e:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
     f82:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     f86:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		lll->phy_flags = conn->phy_pref_flags;
     f8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     f8e:	f363 02c3 	bfi	r2, r3, #3, #1
     f92:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		LL_ASSERT(rx && rx->hdr.link);
     f96:	2d00      	cmp	r5, #0
     f98:	f000 85ac 	beq.w	1af4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76c>
     f9c:	6828      	ldr	r0, [r5, #0]
     f9e:	2800      	cmp	r0, #0
     fa0:	f000 85a8 	beq.w	1af4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76c>
		conn->llcp_rx = rx->hdr.link->mem;
     fa4:	f894 e064 	ldrb.w	lr, [r4, #100]	; 0x64
     fa8:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
     fac:	6843      	ldr	r3, [r0, #4]
     fae:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
     fb2:	0789      	lsls	r1, r1, #30
     fb4:	f3ce 0c02 	ubfx	ip, lr, #0, #3
     fb8:	f00e 0307 	and.w	r3, lr, #7
     fbc:	f3c2 0e02 	ubfx	lr, r2, #0, #3
     fc0:	f002 0207 	and.w	r2, r2, #7
     fc4:	d402      	bmi.n	fcc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2c>
     fc6:	4599      	cmp	r9, r3
     fc8:	f000 877c 	beq.w	1ec4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb3c>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
     fcc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     fce:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
     fd0:	2215      	movs	r2, #21

		upd = (void *)rx->pdu;
		upd->status = 0U;
     fd2:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
     fd4:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
     fd8:	f885 e01e 	strb.w	lr, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
     fdc:	712a      	strb	r2, [r5, #4]
		upd->status = 0U;
     fde:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     fe0:	4629      	mov	r1, r5
     fe2:	f00b fd99 	bl	cb18 <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
     fe6:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
     fea:	2d00      	cmp	r5, #0
     fec:	f000 85e5 	beq.w	1bba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x832>
     ff0:	6828      	ldr	r0, [r5, #0]
     ff2:	2800      	cmp	r0, #0
     ff4:	f000 85e1 	beq.w	1bba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x832>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
     ff8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
     ffc:	6842      	ldr	r2, [r0, #4]
     ffe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if ((eff_tx_time <= lll->max_tx_time) &&
    1002:	42b3      	cmp	r3, r6
    1004:	d30a      	bcc.n	101c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x7c>
    1006:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    100a:	d807      	bhi.n	101c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x7c>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    100c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
    1010:	42bb      	cmp	r3, r7
    1012:	d303      	bcc.n	101c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x7c>
		    (eff_rx_time <= lll->max_rx_time) &&
    1014:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1018:	f240 8768 	bls.w	1eec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb64>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    101c:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
    1020:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1024:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    1026:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1028:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    102a:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    102e:	2102      	movs	r1, #2
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1030:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1032:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1034:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1036:	776a      	strb	r2, [r5, #29]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1038:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    103c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1040:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1042:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1044:	84aa      	strh	r2, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1046:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1048:	4629      	mov	r1, r5
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    104a:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    104c:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    104e:	f00b fd63 	bl	cb18 <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    1052:	f00b fd6b 	bl	cb2c <ll_rx_sched>
    1056:	e56c      	b.n	b32 <ull_conn_llcp+0x22>
	if (conn->llcp.encryption.state) {
    1058:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    105c:	f012 0503 	ands.w	r5, r2, #3
    1060:	f000 8224 	beq.w	14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>
		if (lll->role &&
    1064:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1068:	2b00      	cmp	r3, #0
    106a:	f6bf ad62 	bge.w	b32 <ull_conn_llcp+0x22>
    106e:	2d01      	cmp	r5, #1
    1070:	f47f ad5f 	bne.w	b32 <ull_conn_llcp+0x22>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1074:	48b5      	ldr	r0, [pc, #724]	; (134c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3ac>)
    1076:	f007 ff4d 	bl	8f14 <mem_acquire>
	if (!tx) {
    107a:	4606      	mov	r6, r0
    107c:	2800      	cmp	r0, #0
    107e:	f43f ad58 	beq.w	b32 <ull_conn_llcp+0x22>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1082:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1084:	2204      	movs	r2, #4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1086:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    108a:	210d      	movs	r1, #13
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    108c:	f100 0508 	add.w	r5, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1090:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1092:	7141      	strb	r1, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1094:	71c2      	strb	r2, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1096:	210c      	movs	r1, #12
    1098:	4628      	mov	r0, r5
    109a:	f010 ff9f 	bl	11fdc <lll_csrand_isr_get>
    109e:	68b3      	ldr	r3, [r6, #8]
    10a0:	68f2      	ldr	r2, [r6, #12]
    10a2:	f8c4 20fa 	str.w	r2, [r4, #250]	; 0xfa
    10a6:	f8c4 30f6 	str.w	r3, [r4, #246]	; 0xf6
	    conn->tx_head &&
    10aa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    10ae:	6932      	ldr	r2, [r6, #16]
    10b0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	if (
    10b4:	2b00      	cmp	r3, #0
    10b6:	f000 86e2 	beq.w	1e7e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf6>
	    !conn->llcp_enc.pause_tx &&
    10ba:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    10be:	0795      	lsls	r5, r2, #30
    10c0:	f100 86dd 	bmi.w	1e7e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf6>
	    !conn->llcp_phy.pause_tx &&
    10c4:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    10c8:	07d0      	lsls	r0, r2, #31
    10ca:	f100 86d8 	bmi.w	1e7e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf6>
		if (conn->tx_head == conn->tx_data) {
    10ce:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    10d2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    10d4:	bf04      	itt	eq
    10d6:	681a      	ldreq	r2, [r3, #0]
    10d8:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    10dc:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    10e0:	2a00      	cmp	r2, #0
    10e2:	f001 8148 	beq.w	2376 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfee>
	tx->next = conn->tx_ctrl_last->next;
    10e6:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    10ea:	681a      	ldr	r2, [r3, #0]
    10ec:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    10ee:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    10f0:	6833      	ldr	r3, [r6, #0]
    10f2:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    10f6:	2b00      	cmp	r3, #0
    10f8:	f001 80ca 	beq.w	2290 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf08>
			rx = ll_pdu_rx_alloc();
    10fc:	f00b fd3a 	bl	cb74 <ll_pdu_rx_alloc>
			if (!rx) {
    1100:	4601      	mov	r1, r0
    1102:	2800      	cmp	r0, #0
    1104:	f43f ad15 	beq.w	b32 <ull_conn_llcp+0x22>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1108:	7f0b      	ldrb	r3, [r1, #28]
			rx->hdr.handle = conn->lll.handle;
    110a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    110c:	80ca      	strh	r2, [r1, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    110e:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1112:	2502      	movs	r5, #2
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1114:	2017      	movs	r0, #23
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1116:	2203      	movs	r2, #3
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1118:	7748      	strb	r0, [r1, #29]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    111a:	770b      	strb	r3, [r1, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    111c:	710d      	strb	r5, [r1, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    111e:	77ca      	strb	r2, [r1, #31]
    1120:	f8d4 3155 	ldr.w	r3, [r4, #341]	; 0x155
    1124:	f8d4 2159 	ldr.w	r2, [r4, #345]	; 0x159
    1128:	624a      	str	r2, [r1, #36]	; 0x24
    112a:	620b      	str	r3, [r1, #32]
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    112c:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
    1130:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    1134:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    1138:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    113c:	6808      	ldr	r0, [r1, #0]
    113e:	f00b fceb 	bl	cb18 <ll_rx_put>
			ll_rx_sched();
    1142:	f00b fcf3 	bl	cb2c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    1146:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    114a:	f365 0301 	bfi	r3, r5, #0, #2
    114e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    1152:	e4ee      	b.n	b32 <ull_conn_llcp+0x22>
			event_counter = lll->event_counter +
    1154:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    1156:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
	if (conn->llcp.chan_map.initiate) {
    1158:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    115c:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
    115e:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
    1160:	07d9      	lsls	r1, r3, #31
			event_counter = lll->event_counter +
    1162:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
    1164:	f100 8155 	bmi.w	1412 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    1168:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    116c:	1ab6      	subs	r6, r6, r2
    116e:	0436      	lsls	r6, r6, #16
    1170:	f53f acdf 	bmi.w	b32 <ull_conn_llcp+0x22>
		conn->llcp_ack = conn->llcp_req;
    1174:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1178:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    117c:	4623      	mov	r3, r4
		memcpy(&lll->data_chan_map[0],
    117e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    1182:	f853 2fed 	ldr.w	r2, [r3, #237]!
    1186:	63a2      	str	r2, [r4, #56]	; 0x38
    1188:	791b      	ldrb	r3, [r3, #4]
    118a:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
    118c:	2105      	movs	r1, #5
    118e:	f008 f88d 	bl	92ac <util_ones_count_get>
		lll->data_chan_count =
    1192:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1196:	2201      	movs	r2, #1
		lll->data_chan_count =
    1198:	f360 0305 	bfi	r3, r0, #0, #6
    119c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    11a0:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
    11a4:	e4c5      	b.n	b32 <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    11a6:	4869      	ldr	r0, [pc, #420]	; (134c <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3ac>)
    11a8:	f007 feb4 	bl	8f14 <mem_acquire>
	if (tx) {
    11ac:	2800      	cmp	r0, #0
    11ae:	f43f acc0 	beq.w	b32 <ull_conn_llcp+0x22>
		conn->llcp_ack = conn->llcp_req;
    11b2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    11b6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    11ba:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    11bc:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    11be:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    11c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    11c4:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    11c8:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    11ca:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    11cc:	71c1      	strb	r1, [r0, #7]
	if (
    11ce:	2b00      	cmp	r3, #0
    11d0:	f000 82db 	beq.w	178a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x402>
	    !conn->llcp_enc.pause_tx &&
    11d4:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    11d8:	0795      	lsls	r5, r2, #30
    11da:	f100 82d6 	bmi.w	178a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x402>
	    !conn->llcp_phy.pause_tx &&
    11de:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    11e2:	07d1      	lsls	r1, r2, #31
    11e4:	f100 82d1 	bmi.w	178a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x402>
		if (conn->tx_head == conn->tx_data) {
    11e8:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    11ec:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    11ee:	bf04      	itt	eq
    11f0:	681a      	ldreq	r2, [r3, #0]
    11f2:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    11f6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    11fa:	2a00      	cmp	r2, #0
    11fc:	f001 805d 	beq.w	22ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf32>
	tx->next = conn->tx_ctrl_last->next;
    1200:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1204:	681a      	ldr	r2, [r3, #0]
    1206:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1208:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    120a:	6803      	ldr	r3, [r0, #0]
    120c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1210:	2b00      	cmp	r3, #0
    1212:	f000 84e2 	beq.w	1bda <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x852>
		conn->procedure_expire = conn->procedure_reload;
    1216:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    121a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    121e:	e488      	b.n	b32 <ull_conn_llcp+0x22>
			LL_ASSERT(0);
    1220:	4a4b      	ldr	r2, [pc, #300]	; (1350 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3b0>)
    1222:	494c      	ldr	r1, [pc, #304]	; (1354 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3b4>)
    1224:	484c      	ldr	r0, [pc, #304]	; (1358 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3b8>)
    1226:	f240 33bf 	movw	r3, #959	; 0x3bf
    122a:	f01c fd60 	bl	1dcee <printk>
    122e:	4040      	eors	r0, r0
    1230:	f380 8811 	msr	BASEPRI, r0
    1234:	f04f 0003 	mov.w	r0, #3
    1238:	df02      	svc	2
			break;
    123a:	e47a      	b.n	b32 <ull_conn_llcp+0x22>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    123c:	f894 1119 	ldrb.w	r1, [r4, #281]	; 0x119
    1240:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
    1244:	42b9      	cmp	r1, r7
    1246:	d153      	bne.n	12f0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x350>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    1248:	f894 1125 	ldrb.w	r1, [r4, #293]	; 0x125
    124c:	f894 7124 	ldrb.w	r7, [r4, #292]	; 0x124
    1250:	42b9      	cmp	r1, r7
    1252:	f000 8319 	beq.w	1888 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x500>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    1256:	1bc9      	subs	r1, r1, r7
    1258:	07cf      	lsls	r7, r1, #31
    125a:	f57f ac6a 	bpl.w	b32 <ull_conn_llcp+0x22>
	if (conn->llcp_version.tx == 0U) {
    125e:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
    1262:	07d8      	lsls	r0, r3, #31
    1264:	f140 874a 	bpl.w	20fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd74>
	} else if (conn->llcp_version.rx) {
    1268:	079f      	lsls	r7, r3, #30
    126a:	f140 8734 	bpl.w	20d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd4e>
		rx = ll_pdu_rx_alloc();
    126e:	f00b fc81 	bl	cb74 <ll_pdu_rx_alloc>
		if (!rx) {
    1272:	4601      	mov	r1, r0
    1274:	b300      	cbz	r0, 12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
		conn->llcp_version.ack = conn->llcp_version.req;
    1276:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    127a:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    127e:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    1280:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1282:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1284:	f043 0303 	orr.w	r3, r3, #3
    1288:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    128a:	2002      	movs	r0, #2
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    128c:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    128e:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1290:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1292:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1294:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.version_number =
    1296:	f894 0127 	ldrb.w	r0, [r4, #295]	; 0x127
		pdu->llctrl.version_ind.company_id =
    129a:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
		pdu->llctrl.version_ind.sub_version_number =
    129e:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
    12a2:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
    12a6:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.company_id =
    12aa:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
    12ae:	6808      	ldr	r0, [r1, #0]
    12b0:	f00b fc32 	bl	cb18 <ll_rx_put>
		ll_rx_sched();
    12b4:	f00b fc3a 	bl	cb2c <ll_rx_sched>
	break;
    12b8:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    12bc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    12c0:	e432      	b.n	b28 <ull_conn_llcp+0x18>
	switch (conn->llcp_length.state) {
    12c2:	f002 0107 	and.w	r1, r2, #7
    12c6:	2906      	cmp	r1, #6
    12c8:	f201 8198 	bhi.w	25fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1274>
    12cc:	a001      	add	r0, pc, #4	; (adr r0, 12d4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x334>)
    12ce:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    12d2:	bf00      	nop
    12d4:	000016e1 	.word	0x000016e1
    12d8:	00000b85 	.word	0x00000b85
    12dc:	00000b85 	.word	0x00000b85
    12e0:	00000b85 	.word	0x00000b85
    12e4:	0000165d 	.word	0x0000165d
    12e8:	0000165d 	.word	0x0000165d
    12ec:	00000b85 	.word	0x00000b85
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    12f0:	1bc9      	subs	r1, r1, r7
    12f2:	07c8      	lsls	r0, r1, #31
    12f4:	f57f ac1d 	bpl.w	b32 <ull_conn_llcp+0x22>
	if (conn->common.fex_valid) {
    12f8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    12fc:	f013 0701 	ands.w	r7, r3, #1
    1300:	f000 840a 	beq.w	1b18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x790>
		rx = ll_pdu_rx_alloc();
    1304:	f00b fc36 	bl	cb74 <ll_pdu_rx_alloc>
		if (!rx) {
    1308:	4601      	mov	r1, r0
    130a:	2800      	cmp	r0, #0
    130c:	d0d4      	beq.n	12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    130e:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1312:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		rx->hdr.handle = conn->lll.handle;
    1316:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    1318:	f8c0 8020 	str.w	r8, [r0, #32]
    131c:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1320:	2302      	movs	r3, #2
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1322:	2009      	movs	r0, #9
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1324:	7f0a      	ldrb	r2, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1326:	710b      	strb	r3, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1328:	7748      	strb	r0, [r1, #29]
		sys_put_le24(conn->llcp_feature.features_peer,
    132a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
		rx->hdr.handle = conn->lll.handle;
    132e:	80cf      	strh	r7, [r1, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1330:	f042 0203 	orr.w	r2, r2, #3
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
	dst[1] = val >> 8;
    1334:	f3c3 2707 	ubfx	r7, r3, #8, #8
    1338:	770a      	strb	r2, [r1, #28]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le24(uint32_t val, uint8_t dst[3])
{
	sys_put_le16(val, dst);
	dst[2] = val >> 16;
    133a:	0c1a      	lsrs	r2, r3, #16
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    133c:	77c8      	strb	r0, [r1, #31]
	dst[0] = val;
    133e:	f881 3020 	strb.w	r3, [r1, #32]
	dst[1] = val >> 8;
    1342:	f881 7021 	strb.w	r7, [r1, #33]	; 0x21
	dst[2] = val >> 16;
    1346:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    134a:	e7b0      	b.n	12ae <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x30e>
    134c:	2000241c 	.word	0x2000241c
    1350:	00027934 	.word	0x00027934
    1354:	00027650 	.word	0x00027650
    1358:	000275f0 	.word	0x000275f0
		rx = ll_pdu_rx_alloc_peek(2);
    135c:	2002      	movs	r0, #2
    135e:	f00b fbeb 	bl	cb38 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1362:	4607      	mov	r7, r0
    1364:	2800      	cmp	r0, #0
    1366:	f43f abe4 	beq.w	b32 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    136a:	48ba      	ldr	r0, [pc, #744]	; (1654 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2cc>)
    136c:	f007 fdd2 	bl	8f14 <mem_acquire>
		if (!tx) {
    1370:	4605      	mov	r5, r0
    1372:	2800      	cmp	r0, #0
    1374:	f43f abdd 	beq.w	b32 <ull_conn_llcp+0x22>
		conn->llcp.phy_upd_ind.initiate = 0U;
    1378:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    137c:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
    1380:	f3c3 0082 	ubfx	r0, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    1384:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    1388:	ea50 0802 	orrs.w	r8, r0, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
    138c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    1390:	b2db      	uxtb	r3, r3
    1392:	f040 8682 	bne.w	209a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd12>
			conn->llcp_ack = conn->llcp_req;
    1396:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
    139a:	f8a4 80ee 	strh.w	r8, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    139e:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
    13a0:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    13a4:	f100 873d 	bmi.w	2222 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe9a>
    13a8:	4643      	mov	r3, r8
    13aa:	4641      	mov	r1, r8
		pdu_ctrl_tx->len =
    13ac:	2205      	movs	r2, #5
    13ae:	716a      	strb	r2, [r5, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    13b0:	f885 8008 	strb.w	r8, [r5, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    13b4:	792a      	ldrb	r2, [r5, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    13b6:	726b      	strb	r3, [r5, #9]
	    conn->tx_head &&
    13b8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    13bc:	8169      	strh	r1, [r5, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    13be:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    13c2:	2118      	movs	r1, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    13c4:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_tx->llctrl.opcode =
    13c6:	71e9      	strb	r1, [r5, #7]
	if (
    13c8:	2b00      	cmp	r3, #0
    13ca:	f000 840a 	beq.w	1be2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x85a>
	    !conn->llcp_enc.pause_tx &&
    13ce:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    13d2:	0797      	lsls	r7, r2, #30
    13d4:	f100 8405 	bmi.w	1be2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x85a>
	    !conn->llcp_phy.pause_tx &&
    13d8:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    13dc:	07d6      	lsls	r6, r2, #31
    13de:	f100 8400 	bmi.w	1be2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x85a>
		if (conn->tx_head == conn->tx_data) {
    13e2:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    13e6:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    13e8:	bf04      	itt	eq
    13ea:	681a      	ldreq	r2, [r3, #0]
    13ec:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    13f0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    13f4:	2a00      	cmp	r2, #0
    13f6:	f000 8791 	beq.w	231c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf94>
	tx->next = conn->tx_ctrl_last->next;
    13fa:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    13fe:	681a      	ldr	r2, [r3, #0]
    1400:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1402:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    1404:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    1406:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    140a:	2b00      	cmp	r3, #0
    140c:	f47f ab91 	bne.w	b32 <ull_conn_llcp+0x22>
    1410:	e118      	b.n	1644 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2bc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1412:	4890      	ldr	r0, [pc, #576]	; (1654 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2cc>)
    1414:	f007 fd7e 	bl	8f14 <mem_acquire>
		if (tx) {
    1418:	2800      	cmp	r0, #0
    141a:	f43f ab8a 	beq.w	b32 <ull_conn_llcp+0x22>
			conn->llcp.chan_map.instant = event_counter +
    141e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
    1420:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1424:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
    1426:	4433      	add	r3, r6
						      conn->lll.latency + 6;
    1428:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
    142a:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    142e:	f042 0203 	orr.w	r2, r2, #3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    1432:	4623      	mov	r3, r4
			conn->llcp.chan_map.initiate = 0U;
    1434:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1438:	2608      	movs	r6, #8
			pdu_ctrl_tx->llctrl.opcode =
    143a:	2501      	movs	r5, #1
			conn->llcp.chan_map.initiate = 0U;
    143c:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1440:	7146      	strb	r6, [r0, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1442:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
    1444:	71c5      	strb	r5, [r0, #7]
    1446:	f853 2fed 	ldr.w	r2, [r3, #237]!
    144a:	6082      	str	r2, [r0, #8]
    144c:	791b      	ldrb	r3, [r3, #4]
    144e:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    1450:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1454:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    1458:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
    145c:	2b00      	cmp	r3, #0
    145e:	f000 8333 	beq.w	1ac8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x740>
	    !conn->llcp_enc.pause_tx &&
    1462:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1466:	0792      	lsls	r2, r2, #30
    1468:	f100 832e 	bmi.w	1ac8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x740>
	    !conn->llcp_phy.pause_tx &&
    146c:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1470:	07d7      	lsls	r7, r2, #31
    1472:	f100 8329 	bmi.w	1ac8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x740>
		if (conn->tx_head == conn->tx_data) {
    1476:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    147a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    147c:	bf04      	itt	eq
    147e:	681a      	ldreq	r2, [r3, #0]
    1480:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1484:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1488:	2a00      	cmp	r2, #0
    148a:	f000 872c 	beq.w	22e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf5e>
	tx->next = conn->tx_ctrl_last->next;
    148e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1492:	681a      	ldr	r2, [r3, #0]
    1494:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1496:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1498:	6803      	ldr	r3, [r0, #0]
    149a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    149e:	2b00      	cmp	r3, #0
    14a0:	f47f ab47 	bne.w	b32 <ull_conn_llcp+0x22>
		conn->tx_data_last = tx;
    14a4:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    14a8:	f7ff bb43 	b.w	b32 <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    14ac:	4869      	ldr	r0, [pc, #420]	; (1654 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2cc>)
    14ae:	f007 fd31 	bl	8f14 <mem_acquire>
	if (!tx) {
    14b2:	4680      	mov	r8, r0
    14b4:	2800      	cmp	r0, #0
    14b6:	f43f ab3c 	beq.w	b32 <ull_conn_llcp+0x22>
	if (!lll->role) {
    14ba:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    14be:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    14c0:	f100 0904 	add.w	r9, r0, #4
	if (!lll->role) {
    14c4:	f280 846a 	bge.w	1d9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa14>
	else if (!lll->enc_rx) {
    14c8:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    14cc:	071b      	lsls	r3, r3, #28
    14ce:	f100 865d 	bmi.w	218c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe04>
		if (conn->llcp.encryption.error_code) {
    14d2:	f894 50ed 	ldrb.w	r5, [r4, #237]	; 0xed
    14d6:	2d00      	cmp	r5, #0
    14d8:	f000 8511 	beq.w	1efe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb76>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    14dc:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    14de:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    14e2:	f043 0303 	orr.w	r3, r3, #3
	if (conn->common.fex_valid &&
    14e6:	07d6      	lsls	r6, r2, #31
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    14e8:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    14ea:	f140 8680 	bpl.w	21ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe66>
	    (conn->llcp_feature.features_conn &
    14ee:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (conn->common.fex_valid &&
    14f2:	0758      	lsls	r0, r3, #29
    14f4:	f140 867b 	bpl.w	21ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe66>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    14f8:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    14fa:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    14fc:	f888 5009 	strb.w	r5, [r8, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1500:	f888 2007 	strb.w	r2, [r8, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1504:	f888 3008 	strb.w	r3, [r8, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    1508:	f888 7005 	strb.w	r7, [r8, #5]
	    conn->tx_head &&
    150c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	conn->llcp.encryption.error_code = 0U;
    1510:	2200      	movs	r2, #0
    1512:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	if (
    1516:	2b00      	cmp	r3, #0
    1518:	f000 854a 	beq.w	1fb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc28>
	    !conn->llcp_enc.pause_tx &&
    151c:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1520:	0791      	lsls	r1, r2, #30
    1522:	f100 8545 	bmi.w	1fb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc28>
	    !conn->llcp_phy.pause_tx &&
    1526:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    152a:	07d2      	lsls	r2, r2, #31
    152c:	f100 8540 	bmi.w	1fb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc28>
		if (conn->tx_head == conn->tx_data) {
    1530:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1534:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1536:	bf04      	itt	eq
    1538:	681a      	ldreq	r2, [r3, #0]
    153a:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    153e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1542:	2a00      	cmp	r2, #0
    1544:	f000 8758 	beq.w	23f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1070>
	tx->next = conn->tx_ctrl_last->next;
    1548:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    154c:	681a      	ldr	r2, [r3, #0]
    154e:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    1552:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    1556:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
	if (!tx->next) {
    155a:	f8d8 3000 	ldr.w	r3, [r8]
    155e:	2b00      	cmp	r3, #0
    1560:	f000 8597 	beq.w	2092 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd0a>
	conn->llcp_ack = conn->llcp_req;
    1564:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1568:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    156c:	f7ff bae1 	b.w	b32 <ull_conn_llcp+0x22>
		rx = ll_pdu_rx_alloc_peek(1);
    1570:	2001      	movs	r0, #1
    1572:	f00b fae1 	bl	cb38 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1576:	4606      	mov	r6, r0
    1578:	2800      	cmp	r0, #0
    157a:	f43f aada 	beq.w	b32 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    157e:	4835      	ldr	r0, [pc, #212]	; (1654 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2cc>)
    1580:	f007 fcc8 	bl	8f14 <mem_acquire>
		if (!tx) {
    1584:	4605      	mov	r5, r0
    1586:	2800      	cmp	r0, #0
    1588:	f43f aad3 	beq.w	b32 <ull_conn_llcp+0x22>
		(void)ll_pdu_rx_alloc();
    158c:	f00b faf2 	bl	cb74 <ll_pdu_rx_alloc>
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1590:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1594:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		rx->hdr.link->mem = conn->llcp_rx;
    1596:	6832      	ldr	r2, [r6, #0]
    1598:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    159c:	6050      	str	r0, [r2, #4]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    159e:	f36f 0101 	bfc	r1, #0, #2
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    15a2:	4443      	add	r3, r8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    15a4:	f884 1106 	strb.w	r1, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    15a8:	3306      	adds	r3, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    15aa:	7929      	ldrb	r1, [r5, #4]
		conn->llcp_rx = rx;
    15ac:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    15b0:	b29b      	uxth	r3, r3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    15b2:	220c      	movs	r2, #12
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    15b4:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    15b8:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    15bc:	716a      	strb	r2, [r5, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    15be:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
	    conn->tx_head &&
    15c2:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    15c6:	4e24      	ldr	r6, [pc, #144]	; (1658 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d0>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    15c8:	7129      	strb	r1, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    15ca:	2100      	movs	r1, #0
    15cc:	71e9      	strb	r1, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    15ce:	fba6 1202 	umull	r1, r2, r6, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    15d2:	f894 6114 	ldrb.w	r6, [r4, #276]	; 0x114
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    15d6:	f8b4 1108 	ldrh.w	r1, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    15da:	722e      	strb	r6, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    15dc:	f3c2 228f 	ubfx	r2, r2, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    15e0:	f8b4 610a 	ldrh.w	r6, [r4, #266]	; 0x10a
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    15e4:	f8a5 100b 	strh.w	r1, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    15e8:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    15ec:	f8a5 100f 	strh.w	r1, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    15f0:	f8a5 600d 	strh.w	r6, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    15f4:	f8a5 3011 	strh.w	r3, [r5, #17]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    15f8:	f8a5 2009 	strh.w	r2, [r5, #9]
	if (
    15fc:	2800      	cmp	r0, #0
    15fe:	f000 826e 	beq.w	1ade <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x756>
	    !conn->llcp_enc.pause_tx &&
    1602:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    1606:	079e      	lsls	r6, r3, #30
    1608:	f100 8269 	bmi.w	1ade <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x756>
	    !conn->llcp_phy.pause_tx &&
    160c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    1610:	07d9      	lsls	r1, r3, #31
    1612:	f100 8264 	bmi.w	1ade <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x756>
		if (conn->tx_head == conn->tx_data) {
    1616:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    161a:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    161c:	bf04      	itt	eq
    161e:	6803      	ldreq	r3, [r0, #0]
    1620:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1624:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1628:	2b00      	cmp	r3, #0
    162a:	f000 8664 	beq.w	22f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf6e>
	tx->next = conn->tx_ctrl_last->next;
    162e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1632:	681a      	ldr	r2, [r3, #0]
    1634:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1636:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1638:	6828      	ldr	r0, [r5, #0]
    163a:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    163e:	2800      	cmp	r0, #0
    1640:	f47f aa77 	bne.w	b32 <ull_conn_llcp+0x22>
		conn->tx_data_last = tx;
    1644:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    1648:	f7ff ba73 	b.w	b32 <ull_conn_llcp+0x22>
		conn_upd_curr = conn;
    164c:	603c      	str	r4, [r7, #0]
    164e:	f7ff bb02 	b.w	c56 <ull_conn_llcp+0x146>
    1652:	bf00      	nop
    1654:	2000241c 	.word	0x2000241c
    1658:	d1b71759 	.word	0xd1b71759
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    165c:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1660:	f8b4 c19c 	ldrh.w	ip, [r4, #412]	; 0x19c
		lll->max_rx_time = conn->llcp_length.rx_time;
    1664:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    1668:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    166c:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1670:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1674:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    1676:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    167a:	f000 84ba 	beq.w	1ff2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc6a>
			conn->llcp_length.state =
    167e:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    1682:	2206      	movs	r2, #6
    1684:	f362 0302 	bfi	r3, r2, #0, #3
    1688:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    168c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1690:	2f00      	cmp	r7, #0
    1692:	f000 849a 	beq.w	1fca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc42>
    1696:	6838      	ldr	r0, [r7, #0]
    1698:	2800      	cmp	r0, #0
    169a:	f000 8496 	beq.w	1fca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc42>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    169e:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    16a0:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    16a2:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    16a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    16aa:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    16ae:	2202      	movs	r2, #2
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    16b0:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
    16b2:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    16b6:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    16b8:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    16bc:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    16c0:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    16c2:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    16c4:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    16c6:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    16c8:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    16cc:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
    16d0:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
    16d4:	f00b fa20 	bl	cb18 <ll_rx_put>
		ll_rx_sched();
    16d8:	f00b fa28 	bl	cb2c <ll_rx_sched>
	break;
    16dc:	f7ff ba52 	b.w	b84 <ull_conn_llcp+0x74>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    16e0:	48db      	ldr	r0, [pc, #876]	; (1a50 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c8>)
    16e2:	f007 fc17 	bl	8f14 <mem_acquire>
		if (!tx) {
    16e6:	2800      	cmp	r0, #0
    16e8:	f43f aa4c 	beq.w	b84 <ull_conn_llcp+0x74>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    16ec:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    16f0:	f8b4 719e 	ldrh.w	r7, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    16f4:	f8b4 21a2 	ldrh.w	r2, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    16f8:	f8a4 70d6 	strh.w	r7, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    16fc:	2101      	movs	r1, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    16fe:	f8a4 20d8 	strh.w	r2, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1702:	f361 0302 	bfi	r3, r1, #0, #3
		pdu_ctrl_tx->len =
    1706:	2209      	movs	r2, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1708:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		pdu_ctrl_tx->len =
    170c:	7142      	strb	r2, [r0, #5]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    170e:	7902      	ldrb	r2, [r0, #4]
	    conn->tx_head &&
    1710:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    1714:	8187      	strh	r7, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1716:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    171a:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    171e:	72c1      	strb	r1, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1720:	73c1      	strb	r1, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1722:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1724:	7102      	strb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1726:	211b      	movs	r1, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1728:	2248      	movs	r2, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    172a:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    172e:	7247      	strb	r7, [r0, #9]
    1730:	7201      	strb	r1, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1732:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1734:	7382      	strb	r2, [r0, #14]
	if (
    1736:	2b00      	cmp	r3, #0
    1738:	f000 831b 	beq.w	1d72 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ea>
	    !conn->llcp_enc.pause_tx &&
    173c:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1740:	0792      	lsls	r2, r2, #30
    1742:	f100 8316 	bmi.w	1d72 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ea>
	    !conn->llcp_phy.pause_tx &&
    1746:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    174a:	07d7      	lsls	r7, r2, #31
    174c:	f100 8311 	bmi.w	1d72 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ea>
		if (conn->tx_head == conn->tx_data) {
    1750:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1754:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1756:	bf04      	itt	eq
    1758:	681a      	ldreq	r2, [r3, #0]
    175a:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    175e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1762:	2a00      	cmp	r2, #0
    1764:	f000 85ff 	beq.w	2366 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfde>
	tx->next = conn->tx_ctrl_last->next;
    1768:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    176c:	681a      	ldr	r2, [r3, #0]
    176e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1770:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1772:	6803      	ldr	r3, [r0, #0]
    1774:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1778:	2b00      	cmp	r3, #0
    177a:	f000 8543 	beq.w	2204 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe7c>
		conn->procedure_expire = conn->procedure_reload;
    177e:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1782:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    1786:	f7ff b9fd 	b.w	b84 <ull_conn_llcp+0x74>
		if (!conn->tx_ctrl) {
    178a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    178e:	2a00      	cmp	r2, #0
    1790:	f47f ad36 	bne.w	1200 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x260>
			tx->next = conn->tx_head;
    1794:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1796:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    179a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    179e:	e537      	b.n	1210 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x270>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    17a0:	fb07 3311 	mls	r3, r7, r1, r3
    17a4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    17a8:	48aa      	ldr	r0, [pc, #680]	; (1a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6cc>)
    17aa:	b29b      	uxth	r3, r3
    17ac:	fb02 f303 	mul.w	r3, r2, r3
    17b0:	fba3 0100 	umull	r0, r1, r3, r0
    17b4:	a3a4      	add	r3, pc, #656	; (adr r3, 1a48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c0>)
    17b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    17ba:	f7fe fce1 	bl	180 <__aeabi_uldivmod>
    17be:	1a2d      	subs	r5, r5, r0
    17c0:	f7ff bad0 	b.w	d64 <ull_conn_llcp+0x254>
		LL_ASSERT(rx && rx->hdr.link);
    17c4:	4aa4      	ldr	r2, [pc, #656]	; (1a58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d0>)
    17c6:	49a5      	ldr	r1, [pc, #660]	; (1a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d4>)
    17c8:	48a5      	ldr	r0, [pc, #660]	; (1a60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d8>)
    17ca:	f44f 630e 	mov.w	r3, #2272	; 0x8e0
    17ce:	f01c fa8e 	bl	1dcee <printk>
    17d2:	4040      	eors	r0, r0
    17d4:	f380 8811 	msr	BASEPRI, r0
    17d8:	f04f 0003 	mov.w	r0, #3
    17dc:	df02      	svc	2
    17de:	6838      	ldr	r0, [r7, #0]
    17e0:	f7ff ba75 	b.w	cce <ull_conn_llcp+0x1be>
			lll->slave.window_widening_prepare_us -=
    17e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    17e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    17e8:	4e9a      	ldr	r6, [pc, #616]	; (1a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6cc>)
			lll->slave.window_widening_prepare_us -=
    17ea:	fb03 231a 	mls	r3, r3, sl, r2
    17ee:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    17f0:	f010 fe34 	bl	1245c <lll_clock_ppm_local_get>
    17f4:	4680      	mov	r8, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    17f6:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    17fa:	f3c0 0082 	ubfx	r0, r0, #2, #3
    17fe:	f010 fe2f 	bl	12460 <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    1802:	eb08 0300 	add.w	r3, r8, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1806:	fb07 f303 	mul.w	r3, r7, r3
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    180a:	4896      	ldr	r0, [pc, #600]	; (1a64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6dc>)
			lll->slave.window_widening_prepare_us +=
    180c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				conn->llcp_cu.win_size * 1250U;
    180e:	f894 1114 	ldrb.w	r1, [r4, #276]	; 0x114
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1812:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    1816:	f203 233f 	addw	r3, r3, #575	; 0x23f
    181a:	fba0 0303 	umull	r0, r3, r0, r3
    181e:	ea4f 4a93 	mov.w	sl, r3, lsr #18
				lll->slave.window_widening_periodic_us *
    1822:	fb0a f00b 	mul.w	r0, sl, fp
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1826:	087b      	lsrs	r3, r7, #1
			lll->slave.window_widening_prepare_us +=
    1828:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    182a:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    182c:	429a      	cmp	r2, r3
    182e:	bf28      	it	cs
    1830:	461a      	movcs	r2, r3
				conn->llcp_cu.win_size * 1250U;
    1832:	fb09 fc01 	mul.w	ip, r9, r1
			conn->slave.ticks_to_offset = 0U;
    1836:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
    183a:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    183e:	fba0 0106 	umull	r0, r1, r0, r6
    1842:	a381      	add	r3, pc, #516	; (adr r3, 1a48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c0>)
    1844:	e9d3 2300 	ldrd	r2, r3, [r3]
			lll->slave.window_size_prepare_us =
    1848:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
			conn->slave.ticks_to_offset = 0U;
    184c:	f8c4 e0e4 	str.w	lr, [r4, #228]	; 0xe4
			lll->slave.window_widening_periodic_us =
    1850:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1854:	f7fe fc94 	bl	180 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1858:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    185c:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    185e:	4882      	ldr	r0, [pc, #520]	; (1a68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e0>)
    1860:	fba0 3003 	umull	r3, r0, r0, r3
    1864:	0a80      	lsrs	r0, r0, #10
    1866:	fb09 f000 	mul.w	r0, r9, r0
    186a:	fba0 0106 	umull	r0, r1, r0, r6
    186e:	a376      	add	r3, pc, #472	; (adr r3, 1a48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c0>)
    1870:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1874:	eba5 050c 	sub.w	r5, r5, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1878:	f7fe fc82 	bl	180 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    187c:	eba7 060a 	sub.w	r6, r7, sl
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1880:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    1884:	f7ff ba8f 	b.w	da6 <ull_conn_llcp+0x296>
		} else if (conn->llcp_conn_param.ack !=
    1888:	f894 7171 	ldrb.w	r7, [r4, #369]	; 0x171
    188c:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    1890:	428f      	cmp	r7, r1
    1892:	f000 81b4 	beq.w	1bfe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x876>
	conn_upd = conn_upd_curr;
    1896:	4f75      	ldr	r7, [pc, #468]	; (1a6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e4>)
    1898:	6839      	ldr	r1, [r7, #0]
	if (conn_upd && (conn_upd != conn)) {
    189a:	2900      	cmp	r1, #0
    189c:	f000 84e2 	beq.w	2264 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xedc>
    18a0:	428c      	cmp	r4, r1
    18a2:	f47f a946 	bne.w	b32 <ull_conn_llcp+0x22>
	switch (conn->llcp_conn_param.state) {
    18a6:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
    18aa:	f001 0107 	and.w	r1, r1, #7
    18ae:	2905      	cmp	r1, #5
    18b0:	f200 86c2 	bhi.w	2638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b0>
    18b4:	f20f 0e04 	addw	lr, pc, #4
    18b8:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
    18bc:	000019a9 	.word	0x000019a9
    18c0:	00001925 	.word	0x00001925
    18c4:	000018d5 	.word	0x000018d5
    18c8:	00000b29 	.word	0x00000b29
    18cc:	00000b29 	.word	0x00000b29
    18d0:	00000b29 	.word	0x00000b29
	if (conn->llcp_enc.pause_tx) {
    18d4:	0790      	lsls	r0, r2, #30
    18d6:	f53f a92c 	bmi.w	b32 <ull_conn_llcp+0x22>
	rx = ll_pdu_rx_alloc();
    18da:	f00b f94b 	bl	cb74 <ll_pdu_rx_alloc>
	if (!rx) {
    18de:	4601      	mov	r1, r0
    18e0:	2800      	cmp	r0, #0
    18e2:	f43f ace9 	beq.w	12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    18e6:	7f03      	ldrb	r3, [r0, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    18e8:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    18ec:	2003      	movs	r0, #3
    18ee:	f360 0202 	bfi	r2, r0, #0, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    18f2:	4303      	orrs	r3, r0
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    18f4:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
	rx->hdr.handle = conn->lll.handle;
    18f8:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    18fa:	770b      	strb	r3, [r1, #28]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    18fc:	2702      	movs	r7, #2
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    18fe:	2318      	movs	r3, #24
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1900:	710f      	strb	r7, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1902:	774b      	strb	r3, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1904:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1908:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rx->hdr.handle = conn->lll.handle;
    190c:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    190e:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1912:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1914:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1918:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    191a:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    191c:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    191e:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1920:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
    1922:	e4c4      	b.n	12ae <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x30e>
	if (conn->llcp_conn_param.status) {
    1924:	f894 8173 	ldrb.w	r8, [r4, #371]	; 0x173
    1928:	f1b8 0f00 	cmp.w	r8, #0
    192c:	f040 8535 	bne.w	239a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1012>
	if (!conn->lll.role) {
    1930:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1934:	2b00      	cmp	r3, #0
    1936:	f2c0 8570 	blt.w	241a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1092>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    193a:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		if (conn->llcp_conn_param.preferred_periodicity) {
    193e:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
		conn->llcp_cu.win_offset_us = 0U;
    1942:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1946:	2205      	movs	r2, #5
    1948:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
    194c:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    194e:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
    1952:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
		if (conn->llcp_conn_param.preferred_periodicity) {
    1956:	2900      	cmp	r1, #0
    1958:	f000 8618 	beq.w	258c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1204>
				((conn->llcp_conn_param.interval_min /
    195c:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    1960:	fbb3 f3f1 	udiv	r3, r3, r1
				  conn->llcp_conn_param.preferred_periodicity) +
    1964:	4413      	add	r3, r2
			conn->llcp_cu.interval =
    1966:	fb13 f301 	smulbb	r3, r3, r1
    196a:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    196c:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1970:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
    1974:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1978:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    197c:	009b      	lsls	r3, r3, #2
    197e:	f021 0207 	bic.w	r2, r1, #7
    1982:	f043 0302 	orr.w	r3, r3, #2
    1986:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1988:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    198c:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1990:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
    1994:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    1998:	f884 c105 	strb.w	ip, [r4, #261]	; 0x105
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    199c:	f8a4 110a 	strh.w	r1, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    19a0:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
		return;
    19a4:	f7ff b8c5 	b.w	b32 <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    19a8:	4829      	ldr	r0, [pc, #164]	; (1a50 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c8>)
			event_counter = lll->event_counter +
    19aa:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    19ae:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    19b2:	f007 faaf 	bl	8f14 <mem_acquire>
	if (!tx) {
    19b6:	4601      	mov	r1, r0
    19b8:	2800      	cmp	r0, #0
    19ba:	f43f ac7d 	beq.w	12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    19be:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    19c2:	790a      	ldrb	r2, [r1, #4]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    19c4:	f04f 0c04 	mov.w	ip, #4
    19c8:	f36c 0002 	bfi	r0, ip, #0, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    19cc:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    19d0:	f04f 0c18 	mov.w	ip, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    19d4:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
			event_counter = lll->event_counter +
    19d8:	eb08 0309 	add.w	r3, r8, r9
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    19dc:	710a      	strb	r2, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    19de:	f881 c005 	strb.w	ip, [r1, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    19e2:	f8b4 c174 	ldrh.w	ip, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    19e6:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    19ea:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    19ee:	f8a1 c008 	strh.w	ip, [r1, #8]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    19f2:	4433      	add	r3, r6
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    19f4:	f8b4 c17a 	ldrh.w	ip, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    19f8:	8148      	strh	r0, [r1, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    19fa:	818a      	strh	r2, [r1, #12]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    19fc:	200f      	movs	r0, #15
	p->preferred_periodicity = 0U;
    19fe:	2200      	movs	r2, #0
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    1a00:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    1a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1a08:	71c8      	strb	r0, [r1, #7]
	p->offset1 = sys_cpu_to_le16(0xffff);
    1a0a:	754b      	strb	r3, [r1, #21]
    1a0c:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    1a0e:	75cb      	strb	r3, [r1, #23]
    1a10:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    1a12:	764b      	strb	r3, [r1, #25]
    1a14:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    1a16:	76cb      	strb	r3, [r1, #27]
    1a18:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    1a1a:	774b      	strb	r3, [r1, #29]
    1a1c:	778b      	strb	r3, [r1, #30]
	ctrl_tx_pause_enqueue(conn, tx, false);
    1a1e:	4620      	mov	r0, r4
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1a20:	f8a1 c00e 	strh.w	ip, [r1, #14]
	p->preferred_periodicity = 0U;
    1a24:	740a      	strb	r2, [r1, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    1a26:	74ca      	strb	r2, [r1, #19]
    1a28:	750a      	strb	r2, [r1, #20]
	ctrl_tx_pause_enqueue(conn, tx, false);
    1a2a:	f00b ff3d 	bl	d8a8 <ctrl_tx_pause_enqueue>
	conn->procedure_expire = conn->procedure_reload;
    1a2e:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1a32:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1a36:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1a3a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	conn_upd_curr = conn;
    1a3e:	603c      	str	r4, [r7, #0]
	conn->procedure_expire = conn->procedure_reload;
    1a40:	f7ff b872 	b.w	b28 <ull_conn_llcp+0x18>
    1a44:	f3af 8000 	nop.w
    1a48:	1afd498d 	.word	0x1afd498d
    1a4c:	00000007 	.word	0x00000007
    1a50:	2000241c 	.word	0x2000241c
    1a54:	3b9aca00 	.word	0x3b9aca00
    1a58:	00027934 	.word	0x00027934
    1a5c:	00027a60 	.word	0x00027a60
    1a60:	000275f0 	.word	0x000275f0
    1a64:	431bde83 	.word	0x431bde83
    1a68:	d1b71759 	.word	0xd1b71759
    1a6c:	20002398 	.word	0x20002398
		if ((conn->llcp_cu.interval != lll->interval) ||
    1a70:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    1a72:	428a      	cmp	r2, r1
    1a74:	f47f a938 	bne.w	ce8 <ull_conn_llcp+0x1d8>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1a78:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1a7c:	fb02 fb03 	mul.w	fp, r2, r3
    1a80:	f242 7210 	movw	r2, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
    1a84:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1a88:	fb02 b20c 	mla	r2, r2, ip, fp
    1a8c:	3a01      	subs	r2, #1
    1a8e:	fbb2 f2fb 	udiv	r2, r2, fp
		    (conn->llcp_cu.latency != lll->latency) ||
    1a92:	b292      	uxth	r2, r2
    1a94:	4596      	cmp	lr, r2
    1a96:	f47f a927 	bne.w	ce8 <ull_conn_llcp+0x1d8>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    1a9a:	2303      	movs	r3, #3
    1a9c:	713b      	strb	r3, [r7, #4]
    1a9e:	f7ff b92f 	b.w	d00 <ull_conn_llcp+0x1f0>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1aa2:	2201      	movs	r2, #1
    1aa4:	4610      	mov	r0, r2
    1aa6:	2102      	movs	r1, #2
    1aa8:	f007 fad6 	bl	9058 <mayfly_enable>
				return -ECANCELED;
    1aac:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1ab0:	f7ff b846 	b.w	b40 <ull_conn_llcp+0x30>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    1ab4:	f3c3 0082 	ubfx	r0, r3, #2, #3
    1ab8:	f360 0202 	bfi	r2, r0, #0, #3
    1abc:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    1ac0:	f44f 76a4 	mov.w	r6, #328	; 0x148
    1ac4:	f7ff ba4f 	b.w	f66 <ull_conn_llcp+0x456>
		if (!conn->tx_ctrl) {
    1ac8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1acc:	2a00      	cmp	r2, #0
    1ace:	f47f acde 	bne.w	148e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x106>
			tx->next = conn->tx_head;
    1ad2:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1ad4:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1ad8:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1adc:	e4df      	b.n	149e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x116>
		if (!conn->tx_ctrl) {
    1ade:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	f47f ada3 	bne.w	162e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a6>
			tx->next = conn->tx_head;
    1ae8:	6028      	str	r0, [r5, #0]
				conn->tx_ctrl = tx;
    1aea:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1aee:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    1af2:	e5a4      	b.n	163e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b6>
		LL_ASSERT(rx && rx->hdr.link);
    1af4:	4aa4      	ldr	r2, [pc, #656]	; (1d88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa00>)
    1af6:	49a5      	ldr	r1, [pc, #660]	; (1d8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa04>)
    1af8:	48a5      	ldr	r0, [pc, #660]	; (1d90 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa08>)
    1afa:	f640 6359 	movw	r3, #3673	; 0xe59
    1afe:	f01c f8f6 	bl	1dcee <printk>
    1b02:	4040      	eors	r0, r0
    1b04:	f380 8811 	msr	BASEPRI, r0
    1b08:	f04f 0003 	mov.w	r0, #3
    1b0c:	df02      	svc	2
    1b0e:	6828      	ldr	r0, [r5, #0]
    1b10:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    1b14:	f7ff ba46 	b.w	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1b18:	489e      	ldr	r0, [pc, #632]	; (1d94 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0c>)
    1b1a:	f007 f9fb 	bl	8f14 <mem_acquire>
	if (tx) {
    1b1e:	2800      	cmp	r0, #0
    1b20:	f43f abca 	beq.w	12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
		conn->llcp_feature.ack--;
    1b24:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
		conn->llcp_feature.features_conn = LL_FEAT;
    1b28:	4b9b      	ldr	r3, [pc, #620]	; (1d98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa10>)
    1b2a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		conn->llcp_feature.ack--;
    1b2e:	3a01      	subs	r2, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    1b30:	2309      	movs	r3, #9
		conn->llcp_feature.ack--;
    1b32:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    1b36:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    1b38:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
__ssp_bos_icheck3(memset, void *, int)
    1b3c:	6087      	str	r7, [r0, #8]
    1b3e:	60c7      	str	r7, [r0, #12]
		sys_put_le24(conn->llcp_feature.features_conn,
    1b40:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
    1b44:	7203      	strb	r3, [r0, #8]
	dst[1] = val >> 8;
    1b46:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    1b4a:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1b4c:	7242      	strb	r2, [r0, #9]
	dst[2] = val >> 16;
    1b4e:	7283      	strb	r3, [r0, #10]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1b50:	7902      	ldrb	r2, [r0, #4]
	    conn->tx_head &&
    1b52:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		pdu->llctrl.opcode = !conn->lll.role ?
    1b56:	2900      	cmp	r1, #0
    1b58:	bfac      	ite	ge
    1b5a:	2108      	movge	r1, #8
    1b5c:	210e      	movlt	r1, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1b5e:	f042 0203 	orr.w	r2, r2, #3
		pdu->llctrl.opcode = !conn->lll.role ?
    1b62:	71c1      	strb	r1, [r0, #7]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1b64:	7102      	strb	r2, [r0, #4]
	if (
    1b66:	2b00      	cmp	r3, #0
    1b68:	f000 8195 	beq.w	1e96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0e>
	    !conn->llcp_enc.pause_tx &&
    1b6c:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1b70:	0791      	lsls	r1, r2, #30
    1b72:	f100 8190 	bmi.w	1e96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0e>
	    !conn->llcp_phy.pause_tx &&
    1b76:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1b7a:	07d2      	lsls	r2, r2, #31
    1b7c:	f100 818b 	bmi.w	1e96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0e>
		if (conn->tx_head == conn->tx_data) {
    1b80:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1b84:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1b86:	bf04      	itt	eq
    1b88:	681a      	ldreq	r2, [r3, #0]
    1b8a:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1b8e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1b92:	2a00      	cmp	r2, #0
    1b94:	f000 8439 	beq.w	240a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1082>
	tx->next = conn->tx_ctrl_last->next;
    1b98:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1b9c:	681a      	ldr	r2, [r3, #0]
    1b9e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1ba0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1ba2:	6803      	ldr	r3, [r0, #0]
    1ba4:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1ba8:	2b00      	cmp	r3, #0
    1baa:	f000 8328 	beq.w	21fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe76>
		conn->procedure_expire = conn->procedure_reload;
    1bae:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1bb2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1bb6:	f7ff bb7f 	b.w	12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
		LL_ASSERT(rx && rx->hdr.link);
    1bba:	4a73      	ldr	r2, [pc, #460]	; (1d88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa00>)
    1bbc:	4973      	ldr	r1, [pc, #460]	; (1d8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa04>)
    1bbe:	4874      	ldr	r0, [pc, #464]	; (1d90 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa08>)
    1bc0:	f640 6385 	movw	r3, #3717	; 0xe85
    1bc4:	f01c f893 	bl	1dcee <printk>
    1bc8:	4040      	eors	r0, r0
    1bca:	f380 8811 	msr	BASEPRI, r0
    1bce:	f04f 0003 	mov.w	r0, #3
    1bd2:	df02      	svc	2
    1bd4:	6828      	ldr	r0, [r5, #0]
    1bd6:	f7ff ba0f 	b.w	ff8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x58>
		conn->tx_data_last = tx;
    1bda:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    1bde:	f7ff bb1a 	b.w	1216 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x276>
		if (!conn->tx_ctrl) {
    1be2:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1be6:	2a00      	cmp	r2, #0
    1be8:	f47f ac07 	bne.w	13fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72>
			tx->next = conn->tx_head;
    1bec:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    1bee:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1bf2:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	f47e af9b 	bne.w	b32 <ull_conn_llcp+0x22>
    1bfc:	e522      	b.n	1644 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2bc>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1bfe:	f894 7198 	ldrb.w	r7, [r4, #408]	; 0x198
    1c02:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    1c06:	42ba      	cmp	r2, r7
    1c08:	f000 81fe 	beq.w	2008 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc80>
	switch (conn->llcp_length.state) {
    1c0c:	f894 119a 	ldrb.w	r1, [r4, #410]	; 0x19a
    1c10:	f001 0207 	and.w	r2, r1, #7
    1c14:	2a06      	cmp	r2, #6
    1c16:	f200 8500 	bhi.w	261a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1292>
    1c1a:	f20f 0c08 	addw	ip, pc, #8
    1c1e:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    1c22:	bf00      	nop
    1c24:	00001ccd 	.word	0x00001ccd
    1c28:	00000b29 	.word	0x00000b29
    1c2c:	00000b29 	.word	0x00000b29
    1c30:	00000b29 	.word	0x00000b29
    1c34:	00001c41 	.word	0x00001c41
    1c38:	00001c41 	.word	0x00001c41
    1c3c:	00000b29 	.word	0x00000b29
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1c40:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
    1c44:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1c48:	f001 0307 	and.w	r3, r1, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
    1c4c:	f8b4 21a0 	ldrh.w	r2, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    1c50:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    1c54:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_time = conn->llcp_length.rx_time;
    1c58:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1c5c:	2b04      	cmp	r3, #4
    1c5e:	f000 8392 	beq.w	2386 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xffe>
			conn->llcp_length.state =
    1c62:	460b      	mov	r3, r1
    1c64:	2206      	movs	r2, #6
    1c66:	f362 0302 	bfi	r3, r2, #0, #3
    1c6a:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    1c6e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1c72:	2f00      	cmp	r7, #0
    1c74:	f000 8368 	beq.w	2348 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc0>
    1c78:	6838      	ldr	r0, [r7, #0]
    1c7a:	2800      	cmp	r0, #0
    1c7c:	f000 8364 	beq.w	2348 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc0>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1c80:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    1c82:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    1c84:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    1c88:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1c8c:	f043 0303 	orr.w	r3, r3, #3
    1c90:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1c92:	2202      	movs	r2, #2
		pdu_ctrl_rx->len =
    1c94:	2309      	movs	r3, #9
    1c96:	777b      	strb	r3, [r7, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1c98:	713a      	strb	r2, [r7, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1c9a:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1c9e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    1ca2:	847a      	strh	r2, [r7, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1ca4:	2315      	movs	r3, #21
    1ca6:	77fb      	strb	r3, [r7, #31]
		rx->hdr.handle = conn->lll.handle;
    1ca8:	f8a7 c006 	strh.w	ip, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1cac:	8439      	strh	r1, [r7, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1cae:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
    1cb2:	4639      	mov	r1, r7
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1cb4:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    1cb8:	f00a ff2e 	bl	cb18 <ll_rx_put>
		ll_rx_sched();
    1cbc:	f00a ff36 	bl	cb2c <ll_rx_sched>
	break;
    1cc0:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1cc4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    1cc8:	f7fe bf2e 	b.w	b28 <ull_conn_llcp+0x18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1ccc:	4831      	ldr	r0, [pc, #196]	; (1d94 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0c>)
    1cce:	f007 f921 	bl	8f14 <mem_acquire>
		if (!tx) {
    1cd2:	4603      	mov	r3, r0
    1cd4:	2800      	cmp	r0, #0
    1cd6:	f43f aaef 	beq.w	12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1cda:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1cde:	f8b4 719e 	ldrh.w	r7, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    1ce2:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1ce6:	f8a4 70d6 	strh.w	r7, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1cea:	2001      	movs	r0, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    1cec:	f8a4 10d8 	strh.w	r1, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1cf0:	f360 0202 	bfi	r2, r0, #0, #3
		pdu_ctrl_tx->len =
    1cf4:	2109      	movs	r1, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1cf6:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->len =
    1cfa:	7159      	strb	r1, [r3, #5]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1cfc:	7919      	ldrb	r1, [r3, #4]
	    conn->tx_head &&
    1cfe:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    1d02:	819f      	strh	r7, [r3, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d04:	f041 0103 	orr.w	r1, r1, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1d08:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1d0c:	72d8      	strb	r0, [r3, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1d0e:	73d8      	strb	r0, [r3, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1d10:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d12:	7119      	strb	r1, [r3, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1d14:	201b      	movs	r0, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1d16:	2148      	movs	r1, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1d18:	f883 c007 	strb.w	ip, [r3, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1d1c:	725f      	strb	r7, [r3, #9]
    1d1e:	7218      	strb	r0, [r3, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1d20:	7299      	strb	r1, [r3, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1d22:	7399      	strb	r1, [r3, #14]
	if (
    1d24:	2a00      	cmp	r2, #0
    1d26:	f000 8304 	beq.w	2332 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfaa>
	    !conn->llcp_enc.pause_tx &&
    1d2a:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
    1d2e:	0789      	lsls	r1, r1, #30
    1d30:	f100 82ff 	bmi.w	2332 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfaa>
	    !conn->llcp_phy.pause_tx &&
    1d34:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
    1d38:	07cf      	lsls	r7, r1, #31
    1d3a:	f100 82fa 	bmi.w	2332 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfaa>
		if (conn->tx_head == conn->tx_data) {
    1d3e:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
    1d42:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
    1d44:	bf04      	itt	eq
    1d46:	6811      	ldreq	r1, [r2, #0]
    1d48:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1d4c:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    1d50:	2900      	cmp	r1, #0
    1d52:	f000 8445 	beq.w	25e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1258>
	tx->next = conn->tx_ctrl_last->next;
    1d56:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    1d5a:	6811      	ldr	r1, [r2, #0]
    1d5c:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
    1d5e:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
    1d60:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1d64:	681a      	ldr	r2, [r3, #0]
    1d66:	2a00      	cmp	r2, #0
    1d68:	f47f af21 	bne.w	1bae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x826>
		conn->tx_data_last = tx;
    1d6c:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    1d70:	e71d      	b.n	1bae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x826>
		if (!conn->tx_ctrl) {
    1d72:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1d76:	2a00      	cmp	r2, #0
    1d78:	f47f acf6 	bne.w	1768 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e0>
			tx->next = conn->tx_head;
    1d7c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1d7e:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1d82:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1d86:	e4f7      	b.n	1778 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f0>
    1d88:	00027934 	.word	0x00027934
    1d8c:	00027a60 	.word	0x00027a60
    1d90:	000275f0 	.word	0x000275f0
    1d94:	2000241c 	.word	0x2000241c
    1d98:	0001417f 	.word	0x0001417f
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    1d9c:	f104 067f 	add.w	r6, r4, #127	; 0x7f
    1da0:	4633      	mov	r3, r6
    1da2:	462a      	mov	r2, r5
    1da4:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    1da8:	f204 105d 	addw	r0, r4, #349	; 0x15d
    1dac:	f011 fdfc 	bl	139a8 <ecb_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    1db0:	f8d4 208b 	ldr.w	r2, [r4, #139]	; 0x8b
    1db4:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    1db8:	f8d4 007f 	ldr.w	r0, [r4, #127]	; 0x7f
    1dbc:	f8d4 1083 	ldr.w	r1, [r4, #131]	; 0x83
    1dc0:	f8d4 3087 	ldr.w	r3, [r4, #135]	; 0x87
    1dc4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    1dc8:	4622      	mov	r2, r4
    1dca:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    1dce:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
    1dd2:	f852 1f98 	ldr.w	r1, [r2, #152]!
		lll->ccm_rx.direction = 0;
    1dd6:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
    1dda:	6852      	ldr	r2, [r2, #4]
		lll->enc_rx = 1;
    1ddc:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    1de0:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
		lll->ccm_tx.direction = 1;
    1de4:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    1de8:	f8c4 10b9 	str.w	r1, [r4, #185]	; 0xb9
		lll->enc_rx = 1;
    1dec:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    1df0:	f365 0000 	bfi	r0, r5, #0, #1
		lll->ccm_tx.direction = 1;
    1df4:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    1df8:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
		lll->enc_rx = 1;
    1dfc:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    1e00:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
    1e04:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    1e08:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    1e0c:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    1e10:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    1e14:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    1e18:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    1e1c:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    1e20:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    1e24:	4649      	mov	r1, r9
		lll->ccm_tx.counter = 0;
    1e26:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		lll->ccm_tx.direction = 1;
    1e2a:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    1e2e:	4620      	mov	r0, r4
    1e30:	f00b ff08 	bl	dc44 <start_enc_rsp_send>
	    conn->tx_head &&
    1e34:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d037      	beq.n	1eac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb24>
	    !conn->llcp_enc.pause_tx &&
    1e3c:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1e40:	0791      	lsls	r1, r2, #30
    1e42:	d433      	bmi.n	1eac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb24>
	    !conn->llcp_phy.pause_tx &&
    1e44:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1e48:	07d2      	lsls	r2, r2, #31
    1e4a:	d42f      	bmi.n	1eac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb24>
		if (conn->tx_head == conn->tx_data) {
    1e4c:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1e50:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1e52:	bf04      	itt	eq
    1e54:	681a      	ldreq	r2, [r3, #0]
    1e56:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1e5a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1e5e:	2a00      	cmp	r2, #0
    1e60:	f000 82bf 	beq.w	23e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x105a>
	tx->next = conn->tx_ctrl_last->next;
    1e64:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1e68:	681a      	ldr	r2, [r3, #0]
    1e6a:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    1e6e:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    1e72:	f8d8 3000 	ldr.w	r3, [r8]
    1e76:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
}
    1e7a:	f7ff bb70 	b.w	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
		if (!conn->tx_ctrl) {
    1e7e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1e82:	2a00      	cmp	r2, #0
    1e84:	f47f a92f 	bne.w	10e6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x146>
			tx->next = conn->tx_head;
    1e88:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    1e8a:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1e8e:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    1e92:	f7ff b930 	b.w	10f6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x156>
		if (!conn->tx_ctrl) {
    1e96:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1e9a:	2a00      	cmp	r2, #0
    1e9c:	f47f ae7c 	bne.w	1b98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x810>
			tx->next = conn->tx_head;
    1ea0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1ea2:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1ea6:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1eaa:	e67d      	b.n	1ba8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x820>
		if (!conn->tx_ctrl) {
    1eac:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1eb0:	2a00      	cmp	r2, #0
    1eb2:	d1d7      	bne.n	1e64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xadc>
			tx->next = conn->tx_head;
    1eb4:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    1eb8:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1ebc:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    1ec0:	f7ff bb4d 	b.w	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1ec4:	4590      	cmp	r8, r2
    1ec6:	f47f a881 	bne.w	fcc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2c>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    1eca:	2303      	movs	r3, #3
    1ecc:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    1ece:	4629      	mov	r1, r5
    1ed0:	f00a fe22 	bl	cb18 <ll_rx_put>
				rx = conn->llcp_rx;
    1ed4:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
				LL_ASSERT(rx && rx->hdr.link);
    1ed8:	2d00      	cmp	r5, #0
    1eda:	f000 8300 	beq.w	24de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1156>
    1ede:	6828      	ldr	r0, [r5, #0]
    1ee0:	2800      	cmp	r0, #0
    1ee2:	f000 82fc 	beq.w	24de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1156>
				conn->llcp_rx = rx->hdr.link->mem;
    1ee6:	6843      	ldr	r3, [r0, #4]
    1ee8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    1eec:	2303      	movs	r3, #3
    1eee:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    1ef0:	4629      	mov	r1, r5
    1ef2:	f00a fe11 	bl	cb18 <ll_rx_put>
			ll_rx_sched();
    1ef6:	f00a fe19 	bl	cb2c <ll_rx_sched>
			return;
    1efa:	f7fe be1a 	b.w	b32 <ull_conn_llcp+0x22>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    1efe:	f104 067f 	add.w	r6, r4, #127	; 0x7f
    1f02:	4633      	mov	r3, r6
    1f04:	462a      	mov	r2, r5
    1f06:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    1f0a:	f204 105d 	addw	r0, r4, #349	; 0x15d
    1f0e:	f011 fd4b 	bl	139a8 <ecb_encrypt>
    1f12:	f8d4 208b 	ldr.w	r2, [r4, #139]	; 0x8b
    1f16:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    1f1a:	f8d4 007f 	ldr.w	r0, [r4, #127]	; 0x7f
    1f1e:	f8d4 1083 	ldr.w	r1, [r4, #131]	; 0x83
    1f22:	f8d4 3087 	ldr.w	r3, [r4, #135]	; 0x87
    1f26:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    1f2a:	4622      	mov	r2, r4
    1f2c:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
    1f30:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    1f34:	f852 1f98 	ldr.w	r1, [r2, #152]!
			lll->ccm_tx.direction = 0U;
    1f38:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    1f3c:	6852      	ldr	r2, [r2, #4]
    1f3e:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
    1f42:	f8c4 10b9 	str.w	r1, [r4, #185]	; 0xb9
			lll->enc_rx = 1U;
    1f46:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
			lll->ccm_rx.direction = 1U;
    1f4a:	f894 1097 	ldrb.w	r1, [r4, #151]	; 0x97
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f4e:	f898 3004 	ldrb.w	r3, [r8, #4]
			lll->ccm_rx.counter = 0U;
    1f52:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
			lll->enc_rx = 1U;
    1f56:	f042 0208 	orr.w	r2, r2, #8
			lll->ccm_rx.direction = 1U;
    1f5a:	f041 0101 	orr.w	r1, r1, #1
			lll->ccm_tx.direction = 0U;
    1f5e:	f365 0000 	bfi	r0, r5, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1f62:	2601      	movs	r6, #1
			lll->enc_rx = 1U;
    1f64:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    1f68:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    1f6c:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    1f70:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    1f74:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    1f78:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    1f7c:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    1f80:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    1f84:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    1f88:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
			lll->ccm_rx.direction = 1U;
    1f8c:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    1f90:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f94:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->llctrl.opcode =
    1f98:	2205      	movs	r2, #5
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1f9a:	f888 6005 	strb.w	r6, [r8, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f9e:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->llctrl.opcode =
    1fa2:	f888 2007 	strb.w	r2, [r8, #7]
	    conn->tx_head &&
    1fa6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1faa:	2b00      	cmp	r3, #0
    1fac:	f47f aab6 	bne.w	151c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x194>
		if (!conn->tx_ctrl) {
    1fb0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1fb4:	2a00      	cmp	r2, #0
    1fb6:	f47f aac7 	bne.w	1548 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c0>
			tx->next = conn->tx_head;
    1fba:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    1fbe:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1fc2:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    1fc6:	f7ff bac8 	b.w	155a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d2>
		LL_ASSERT(rx && rx->hdr.link);
    1fca:	4acf      	ldr	r2, [pc, #828]	; (2308 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf80>)
    1fcc:	49cf      	ldr	r1, [pc, #828]	; (230c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf84>)
    1fce:	48d0      	ldr	r0, [pc, #832]	; (2310 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf88>)
    1fd0:	f640 5329 	movw	r3, #3369	; 0xd29
    1fd4:	f01b fe8b 	bl	1dcee <printk>
    1fd8:	4040      	eors	r0, r0
    1fda:	f380 8811 	msr	BASEPRI, r0
    1fde:	f04f 0003 	mov.w	r0, #3
    1fe2:	df02      	svc	2
    1fe4:	6838      	ldr	r0, [r7, #0]
    1fe6:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
    1fea:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    1fee:	f7ff bb56 	b.w	169e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x316>
			if (!conn->llcp_length.cache.tx_octets) {
    1ff2:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    1ff6:	2a00      	cmp	r2, #0
    1ff8:	f040 814e 	bne.w	2298 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf10>
				conn->llcp_length.ack = conn->llcp_length.req;
    1ffc:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2000:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    2004:	f7ff bb42 	b.w	168c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x304>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2008:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
    200c:	f894 11a9 	ldrb.w	r1, [r4, #425]	; 0x1a9
    2010:	4291      	cmp	r1, r2
    2012:	f43e ad8e 	beq.w	b32 <ull_conn_llcp+0x22>
	switch (conn->llcp_phy.state) {
    2016:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    201a:	f001 0003 	and.w	r0, r1, #3
    201e:	2803      	cmp	r0, #3
    2020:	f000 826c 	beq.w	24fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1174>
    2024:	2800      	cmp	r0, #0
    2026:	f47e ad84 	bne.w	b32 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    202a:	48ba      	ldr	r0, [pc, #744]	; (2314 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf8c>)
    202c:	f006 ff72 	bl	8f14 <mem_acquire>
		if (!tx) {
    2030:	4601      	mov	r1, r0
    2032:	2800      	cmp	r0, #0
    2034:	f43f a940 	beq.w	12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2038:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_tx = conn->llcp_phy.tx;
    203c:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2040:	f894 71ab 	ldrb.w	r7, [r4, #427]	; 0x1ab
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2044:	2001      	movs	r0, #1
    2046:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    204a:	f3c3 0082 	ubfx	r0, r3, #2, #3
    204e:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2052:	f3c3 1042 	ubfx	r0, r3, #5, #3
    2056:	f360 1206 	bfi	r2, r0, #4, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    205a:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    205e:	7908      	ldrb	r0, [r1, #4]
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2060:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2064:	f367 02c3 	bfi	r2, r7, #3, #1
    2068:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_tx = conn->llcp_phy.tx;
    206c:	f3c3 0c82 	ubfx	ip, r3, #2, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2070:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2074:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->len =
    2078:	2703      	movs	r7, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    207a:	2216      	movs	r2, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    207c:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    207e:	71ca      	strb	r2, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
    2080:	f881 c008 	strb.w	ip, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    2084:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->len =
    2086:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2088:	2200      	movs	r2, #0
    208a:	4620      	mov	r0, r4
    208c:	f00b fc0c 	bl	d8a8 <ctrl_tx_pause_enqueue>
    2090:	e58d      	b.n	1bae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x826>
		conn->tx_data_last = tx;
    2092:	f8c4 81c0 	str.w	r8, [r4, #448]	; 0x1c0
    2096:	f7ff ba65 	b.w	1564 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1dc>
			conn->llcp.phy_upd_ind.instant = event_counter +
    209a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    209c:	4433      	add	r3, r6
							 lll->latency +
    209e:	3306      	adds	r3, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    20a0:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    20a4:	f00a fd66 	bl	cb74 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    20a8:	683b      	ldr	r3, [r7, #0]
    20aa:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    20ae:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    20b0:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
			rx = ll_pdu_rx_alloc();
    20b4:	f00a fd5e 	bl	cb74 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    20b8:	6803      	ldr	r3, [r0, #0]
    20ba:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    20be:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    20c0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    20c4:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    20c8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    20cc:	f3c3 0882 	ubfx	r8, r3, #2, #3
    20d0:	095b      	lsrs	r3, r3, #5
    20d2:	f7ff b96b 	b.w	13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
		LL_ASSERT(0);
    20d6:	f640 3348 	movw	r3, #2888	; 0xb48
		LL_ASSERT(0);
    20da:	4a8b      	ldr	r2, [pc, #556]	; (2308 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf80>)
    20dc:	498e      	ldr	r1, [pc, #568]	; (2318 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf90>)
    20de:	488c      	ldr	r0, [pc, #560]	; (2310 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf88>)
    20e0:	f01b fe05 	bl	1dcee <printk>
    20e4:	4040      	eors	r0, r0
    20e6:	f380 8811 	msr	BASEPRI, r0
    20ea:	f04f 0003 	mov.w	r0, #3
    20ee:	df02      	svc	2
		break;
    20f0:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    20f4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    20f8:	f7fe bd16 	b.w	b28 <ull_conn_llcp+0x18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    20fc:	4885      	ldr	r0, [pc, #532]	; (2314 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf8c>)
    20fe:	f006 ff09 	bl	8f14 <mem_acquire>
		if (tx) {
    2102:	2800      	cmp	r0, #0
    2104:	f43f a8d8 	beq.w	12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
			conn->llcp_version.ack--;
    2108:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
			conn->llcp_version.tx = 1U;
    210c:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
			conn->llcp_version.ack--;
    2110:	3a01      	subs	r2, #1
    2112:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2116:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
    2118:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
    211c:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
    211e:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2122:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
    2126:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    2128:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    212c:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
    212e:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
    2130:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
    2134:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
    2136:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2138:	7242      	strb	r2, [r0, #9]
    213a:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
    213c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
    2140:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
    2142:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    2144:	72c2      	strb	r2, [r0, #11]
    2146:	7302      	strb	r2, [r0, #12]
	if (
    2148:	2b00      	cmp	r3, #0
    214a:	f000 80be 	beq.w	22ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf42>
	    !conn->llcp_enc.pause_tx &&
    214e:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2152:	0791      	lsls	r1, r2, #30
    2154:	f100 80b9 	bmi.w	22ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf42>
	    !conn->llcp_phy.pause_tx &&
    2158:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    215c:	07d2      	lsls	r2, r2, #31
    215e:	f100 80b4 	bmi.w	22ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf42>
		if (conn->tx_head == conn->tx_data) {
    2162:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2166:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2168:	bf04      	itt	eq
    216a:	681a      	ldreq	r2, [r3, #0]
    216c:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2170:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2174:	2a00      	cmp	r2, #0
    2176:	f000 8203 	beq.w	2580 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11f8>
	tx->next = conn->tx_ctrl_last->next;
    217a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    217e:	681a      	ldr	r2, [r3, #0]
    2180:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2182:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    2184:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2188:	6803      	ldr	r3, [r0, #0]
    218a:	e50d      	b.n	1ba8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x820>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    218c:	4649      	mov	r1, r9
    218e:	4620      	mov	r0, r4
    2190:	f00b fd58 	bl	dc44 <start_enc_rsp_send>
	    conn->tx_head &&
    2194:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    2198:	b3c3      	cbz	r3, 220c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe84>
	    !conn->llcp_enc.pause_tx &&
    219a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    219e:	0797      	lsls	r7, r2, #30
    21a0:	d434      	bmi.n	220c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe84>
	    !conn->llcp_phy.pause_tx &&
    21a2:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    21a6:	07d6      	lsls	r6, r2, #31
    21a8:	d430      	bmi.n	220c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe84>
		if (conn->tx_head == conn->tx_data) {
    21aa:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    21ae:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    21b0:	bf04      	itt	eq
    21b2:	681a      	ldreq	r2, [r3, #0]
    21b4:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    21b8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    21bc:	2a00      	cmp	r2, #0
    21be:	f000 8186 	beq.w	24ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1146>
	tx->next = conn->tx_ctrl_last->next;
    21c2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    21c6:	681a      	ldr	r2, [r3, #0]
    21c8:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    21cc:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    21d0:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
	if (!tx->next) {
    21d4:	f8d8 3000 	ldr.w	r3, [r8]
    21d8:	2b00      	cmp	r3, #0
    21da:	f000 8081 	beq.w	22e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf58>
		conn->llcp_enc.pause_rx = 0U;
    21de:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    21e2:	f023 0303 	bic.w	r3, r3, #3
    21e6:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    21ea:	f7ff b9bb 	b.w	1564 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1dc>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    21ee:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    21f0:	f888 5008 	strb.w	r5, [r8, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    21f4:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    21f8:	2702      	movs	r7, #2
    21fa:	f7ff b985 	b.w	1508 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x180>
		conn->tx_data_last = tx;
    21fe:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
			conn->procedure_expire = conn->procedure_reload;
    2202:	e4d4      	b.n	1bae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x826>
		conn->tx_data_last = tx;
    2204:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    2208:	f7ff bab9 	b.w	177e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f6>
		if (!conn->tx_ctrl) {
    220c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2210:	2a00      	cmp	r2, #0
    2212:	d1d6      	bne.n	21c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe3a>
			tx->next = conn->tx_head;
    2214:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    2218:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    221c:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    2220:	e7d8      	b.n	21d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe4c>
				(void)ll_pdu_rx_alloc();
    2222:	f00a fca7 	bl	cb74 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2226:	2315      	movs	r3, #21
				rx->hdr.handle = lll->handle;
    2228:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
				upd->status = 0U;
    222a:	f887 801c 	strb.w	r8, [r7, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    222e:	713b      	strb	r3, [r7, #4]
				upd->tx = lll->phy_tx;
    2230:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    2234:	6838      	ldr	r0, [r7, #0]
				rx->hdr.handle = lll->handle;
    2236:	80fa      	strh	r2, [r7, #6]
				upd->tx = lll->phy_tx;
    2238:	f3c3 0302 	ubfx	r3, r3, #0, #3
    223c:	777b      	strb	r3, [r7, #29]
				upd->rx = lll->phy_rx;
    223e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    2242:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2246:	77bb      	strb	r3, [r7, #30]
				ll_rx_put(rx->hdr.link, rx);
    2248:	4639      	mov	r1, r7
    224a:	f00a fc65 	bl	cb18 <ll_rx_put>
				ll_rx_sched();
    224e:	f00a fc6d 	bl	cb2c <ll_rx_sched>
    2252:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2256:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    225a:	f3c3 0882 	ubfx	r8, r3, #2, #3
    225e:	095b      	lsrs	r3, r3, #5
    2260:	f7ff b8a4 	b.w	13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
	switch (conn->llcp_conn_param.state) {
    2264:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    2268:	f003 0307 	and.w	r3, r3, #7
    226c:	2b05      	cmp	r3, #5
    226e:	f200 81e3 	bhi.w	2638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b0>
    2272:	a101      	add	r1, pc, #4	; (adr r1, 2278 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xef0>)
    2274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    2278:	000019a9 	.word	0x000019a9
    227c:	00001925 	.word	0x00001925
    2280:	000018d5 	.word	0x000018d5
    2284:	00000b33 	.word	0x00000b33
    2288:	00000b33 	.word	0x00000b33
    228c:	00000b33 	.word	0x00000b33
		conn->tx_data_last = tx;
    2290:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    2294:	f7fe bf32 	b.w	10fc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x15c>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2298:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.tx_time =
    229c:	f8b4 71a6 	ldrh.w	r7, [r4, #422]	; 0x1a6
				conn->llcp_length.tx_octets =
    22a0:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.cache.tx_octets = 0;
    22a4:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    22a6:	f363 0002 	bfi	r0, r3, #0, #3
    22aa:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    22ae:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    22b2:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    22b6:	f7ff b9e9 	b.w	168c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x304>
			tx->next = conn->tx_head->next;
    22ba:	681a      	ldr	r2, [r3, #0]
    22bc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    22be:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    22c0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    22c2:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    22c6:	f7fe bfa3 	b.w	1210 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x270>
		if (!conn->tx_ctrl) {
    22ca:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    22ce:	2a00      	cmp	r2, #0
    22d0:	f47f af53 	bne.w	217a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdf2>
			tx->next = conn->tx_head;
    22d4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    22d6:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    22da:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    22de:	e753      	b.n	2188 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe00>
		conn->tx_data_last = tx;
    22e0:	f8c4 81c0 	str.w	r8, [r4, #448]	; 0x1c0
    22e4:	e77b      	b.n	21de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe56>
			tx->next = conn->tx_head->next;
    22e6:	681a      	ldr	r2, [r3, #0]
    22e8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    22ea:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    22ec:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    22ee:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    22f2:	f7ff b8d4 	b.w	149e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x116>
			tx->next = conn->tx_head->next;
    22f6:	6803      	ldr	r3, [r0, #0]
    22f8:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
    22fa:	6005      	str	r5, [r0, #0]
				conn->tx_ctrl = tx;
    22fc:	6828      	ldr	r0, [r5, #0]
				conn->tx_ctrl_last = tx;
    22fe:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    2302:	f7ff b99c 	b.w	163e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b6>
    2306:	bf00      	nop
    2308:	00027934 	.word	0x00027934
    230c:	00027a60 	.word	0x00027a60
    2310:	000275f0 	.word	0x000275f0
    2314:	2000241c 	.word	0x2000241c
    2318:	00027650 	.word	0x00027650
			tx->next = conn->tx_head->next;
    231c:	681a      	ldr	r2, [r3, #0]
    231e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2320:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2322:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2324:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
    2328:	2b00      	cmp	r3, #0
    232a:	f47e ac02 	bne.w	b32 <ull_conn_llcp+0x22>
    232e:	f7ff b989 	b.w	1644 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2bc>
		if (!conn->tx_ctrl) {
    2332:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    2336:	2900      	cmp	r1, #0
    2338:	f47f ad0d 	bne.w	1d56 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ce>
			tx->next = conn->tx_head;
    233c:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
    233e:	e9c4 336c 	strd	r3, r3, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2342:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
    2346:	e50d      	b.n	1d64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9dc>
		LL_ASSERT(rx && rx->hdr.link);
    2348:	4abd      	ldr	r2, [pc, #756]	; (2640 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b8>)
    234a:	49be      	ldr	r1, [pc, #760]	; (2644 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12bc>)
    234c:	48be      	ldr	r0, [pc, #760]	; (2648 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c0>)
    234e:	f640 5329 	movw	r3, #3369	; 0xd29
    2352:	f01b fccc 	bl	1dcee <printk>
    2356:	4040      	eors	r0, r0
    2358:	f380 8811 	msr	BASEPRI, r0
    235c:	f04f 0003 	mov.w	r0, #3
    2360:	df02      	svc	2
    2362:	6838      	ldr	r0, [r7, #0]
    2364:	e48c      	b.n	1c80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8f8>
			tx->next = conn->tx_head->next;
    2366:	681a      	ldr	r2, [r3, #0]
    2368:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    236a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    236c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    236e:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2372:	f7ff ba01 	b.w	1778 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f0>
			tx->next = conn->tx_head->next;
    2376:	681a      	ldr	r2, [r3, #0]
    2378:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    237a:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    237c:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    237e:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2382:	f7fe beb8 	b.w	10f6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x156>
			if (!conn->llcp_length.cache.tx_octets) {
    2386:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    238a:	2a00      	cmp	r2, #0
    238c:	f040 808f 	bne.w	24ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1126>
				conn->llcp_length.ack = conn->llcp_length.req;
    2390:	f884 7199 	strb.w	r7, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2394:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    2398:	e469      	b.n	1c6e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    239a:	48ac      	ldr	r0, [pc, #688]	; (264c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c4>)
    239c:	f006 fdba 	bl	8f14 <mem_acquire>
		if (!tx) {
    23a0:	4601      	mov	r1, r0
    23a2:	2800      	cmp	r0, #0
    23a4:	f43e af88 	beq.w	12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    23a8:	7903      	ldrb	r3, [r0, #4]
    23aa:	f043 0303 	orr.w	r3, r3, #3
    23ae:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    23b0:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    23b2:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    23b4:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    23b6:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    23b8:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    23ba:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
    23bc:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
    23c0:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    23c2:	4620      	mov	r0, r4
    23c4:	2200      	movs	r2, #0
    23c6:	f00b fa6f 	bl	d8a8 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    23ca:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    23ce:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    23d2:	2300      	movs	r3, #0
    23d4:	603b      	str	r3, [r7, #0]
		return;
    23d6:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    23da:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    23de:	f7fe bba3 	b.w	b28 <ull_conn_llcp+0x18>
			tx->next = conn->tx_head->next;
    23e2:	681a      	ldr	r2, [r3, #0]
    23e4:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    23e8:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
    23ec:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    23f0:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    23f4:	f7ff b8b3 	b.w	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
			tx->next = conn->tx_head->next;
    23f8:	681a      	ldr	r2, [r3, #0]
    23fa:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    23fe:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl_last = tx;
    2402:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    2406:	f7ff b8a8 	b.w	155a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d2>
			tx->next = conn->tx_head->next;
    240a:	681a      	ldr	r2, [r3, #0]
    240c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    240e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    2410:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2412:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2416:	f7ff bbc7 	b.w	1ba8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x820>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    241a:	488c      	ldr	r0, [pc, #560]	; (264c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c4>)
    241c:	f006 fd7a 	bl	8f14 <mem_acquire>
	if (!tx) {
    2420:	4601      	mov	r1, r0
    2422:	2800      	cmp	r0, #0
    2424:	f43e af48 	beq.w	12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2428:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    242a:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    242c:	f043 0303 	orr.w	r3, r3, #3
    2430:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2432:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
    2434:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	rsp->interval_max =
    2438:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rsp->latency =
    243c:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	rsp->interval_min =
    2440:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
    2442:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	rsp->interval_max =
    2446:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2448:	2310      	movs	r3, #16
	rsp->latency =
    244a:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
    244c:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    244e:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
    2450:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    2454:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
    2456:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    245a:	f8b4 0180 	ldrh.w	r0, [r4, #384]	; 0x180
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    245e:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
	rsp->reference_conn_event_count =
    2462:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2466:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    246a:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    246e:	f8b4 0186 	ldrh.w	r0, [r4, #390]	; 0x186
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2472:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2476:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    247a:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    247e:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    2482:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2486:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    248a:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    248e:	4620      	mov	r0, r4
    2490:	4642      	mov	r2, r8
    2492:	f00b fa09 	bl	d8a8 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2496:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    249a:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    249e:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    24a2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    24a6:	f8c7 8000 	str.w	r8, [r7]
}
    24aa:	f7fe bb3d 	b.w	b28 <ull_conn_llcp+0x18>
				conn->llcp_length.cache.tx_octets = 0;
    24ae:	2000      	movs	r0, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    24b0:	460b      	mov	r3, r1
    24b2:	f360 0302 	bfi	r3, r0, #0, #3
				conn->llcp_length.tx_octets =
    24b6:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
    24ba:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    24be:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    24c2:	f8a4 01a4 	strh.w	r0, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    24c6:	f8a4 21a2 	strh.w	r2, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    24ca:	f7ff bbd0 	b.w	1c6e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e6>
			tx->next = conn->tx_head->next;
    24ce:	681a      	ldr	r2, [r3, #0]
    24d0:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    24d4:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl_last = tx;
    24d8:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    24dc:	e67a      	b.n	21d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe4c>
				LL_ASSERT(rx && rx->hdr.link);
    24de:	4a58      	ldr	r2, [pc, #352]	; (2640 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b8>)
    24e0:	4958      	ldr	r1, [pc, #352]	; (2644 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12bc>)
    24e2:	4859      	ldr	r0, [pc, #356]	; (2648 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c0>)
    24e4:	f640 6368 	movw	r3, #3688	; 0xe68
    24e8:	f01b fc01 	bl	1dcee <printk>
    24ec:	4040      	eors	r0, r0
    24ee:	f380 8811 	msr	BASEPRI, r0
    24f2:	f04f 0003 	mov.w	r0, #3
    24f6:	df02      	svc	2
    24f8:	6828      	ldr	r0, [r5, #0]
    24fa:	e4f4      	b.n	1ee6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb5e>
		if (conn->llcp_phy.tx & BIT(1)) {
    24fc:	0708      	lsls	r0, r1, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    24fe:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
		if (conn->llcp_phy.tx & BIT(1)) {
    2502:	f3c1 0282 	ubfx	r2, r1, #2, #3
    2506:	d54d      	bpl.n	25a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x121c>
			conn->llcp_phy.tx = BIT(1);
    2508:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    250c:	2102      	movs	r1, #2
    250e:	f361 0284 	bfi	r2, r1, #2, #3
    2512:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.rx & BIT(1)) {
    2516:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    251a:	0657      	lsls	r7, r2, #25
    251c:	ea4f 1152 	mov.w	r1, r2, lsr #5
    2520:	d538      	bpl.n	2594 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x120c>
			conn->llcp_phy.rx = BIT(1);
    2522:	2102      	movs	r1, #2
    2524:	f361 1247 	bfi	r2, r1, #5, #3
    2528:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    252c:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    2530:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2534:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2538:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    253c:	f3c1 0782 	ubfx	r7, r1, #2, #3
    2540:	f00c 0c07 	and.w	ip, ip, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2544:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2548:	f3c2 0280 	ubfx	r2, r2, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    254c:	45bc      	cmp	ip, r7
    254e:	bf08      	it	eq
    2550:	2700      	moveq	r7, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2552:	0052      	lsls	r2, r2, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    2554:	ebb0 1f51 	cmp.w	r0, r1, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    2558:	f042 0201 	orr.w	r2, r2, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    255c:	ea4f 1151 	mov.w	r1, r1, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    2560:	bf08      	it	eq
    2562:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2564:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
		conn->llcp_ack -= 2U;
    2568:	3b02      	subs	r3, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    256a:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    256e:	2106      	movs	r1, #6
		conn->llcp_ack -= 2U;
    2570:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.initiate = 1U;
    2574:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
    2578:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    257c:	f7fe bb02 	b.w	b84 <ull_conn_llcp+0x74>
			tx->next = conn->tx_head->next;
    2580:	681a      	ldr	r2, [r3, #0]
    2582:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2584:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    2586:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    258a:	e5fd      	b.n	2188 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe00>
				conn->llcp_conn_param.interval_max;
    258c:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    2590:	f7ff b9ec 	b.w	196c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e4>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    2594:	07c8      	lsls	r0, r1, #31
    2596:	d50f      	bpl.n	25b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1230>
			conn->llcp_phy.rx = BIT(0);
    2598:	2101      	movs	r1, #1
    259a:	f361 1247 	bfi	r2, r1, #5, #3
    259e:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    25a2:	e7c3      	b.n	252c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11a4>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    25a4:	07d1      	lsls	r1, r2, #31
    25a6:	d510      	bpl.n	25ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1242>
			conn->llcp_phy.tx = BIT(0);
    25a8:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    25ac:	2101      	movs	r1, #1
    25ae:	f361 0284 	bfi	r2, r1, #2, #3
    25b2:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    25b6:	e7ae      	b.n	2516 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118e>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    25b8:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.rx = BIT(2);
    25bc:	bf18      	it	ne
    25be:	2104      	movne	r1, #4
			conn->llcp_phy.rx = 0U;
    25c0:	f361 1247 	bfi	r2, r1, #5, #3
    25c4:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    25c8:	e7b0      	b.n	252c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11a4>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    25ca:	f012 0204 	ands.w	r2, r2, #4
    25ce:	d00e      	beq.n	25ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1266>
			conn->llcp_phy.tx = BIT(2);
    25d0:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    25d4:	2104      	movs	r1, #4
    25d6:	f361 0284 	bfi	r2, r1, #2, #3
    25da:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    25de:	e79a      	b.n	2516 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118e>
			tx->next = conn->tx_head->next;
    25e0:	6811      	ldr	r1, [r2, #0]
    25e2:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
    25e4:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
    25e6:	e9c4 336d 	strd	r3, r3, [r4, #436]	; 0x1b4
    25ea:	f7ff bbbb 	b.w	1d64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9dc>
			conn->llcp_phy.tx = 0U;
    25ee:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    25f2:	f362 0184 	bfi	r1, r2, #2, #3
    25f6:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
    25fa:	e78c      	b.n	2516 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118e>
		LL_ASSERT(0);
    25fc:	4a10      	ldr	r2, [pc, #64]	; (2640 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b8>)
    25fe:	4914      	ldr	r1, [pc, #80]	; (2650 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c8>)
    2600:	4811      	ldr	r0, [pc, #68]	; (2648 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c0>)
    2602:	f640 5351 	movw	r3, #3409	; 0xd51
    2606:	f01b fb72 	bl	1dcee <printk>
    260a:	4040      	eors	r0, r0
    260c:	f380 8811 	msr	BASEPRI, r0
    2610:	f04f 0003 	mov.w	r0, #3
    2614:	df02      	svc	2
		break;
    2616:	f7fe bab5 	b.w	b84 <ull_conn_llcp+0x74>
		LL_ASSERT(0);
    261a:	4a09      	ldr	r2, [pc, #36]	; (2640 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b8>)
    261c:	490c      	ldr	r1, [pc, #48]	; (2650 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c8>)
    261e:	480a      	ldr	r0, [pc, #40]	; (2648 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c0>)
    2620:	f640 5351 	movw	r3, #3409	; 0xd51
    2624:	f01b fb63 	bl	1dcee <printk>
    2628:	4040      	eors	r0, r0
    262a:	f380 8811 	msr	BASEPRI, r0
    262e:	f04f 0003 	mov.w	r0, #3
    2632:	df02      	svc	2
		break;
    2634:	f7fe be40 	b.w	12b8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x318>
		LL_ASSERT(0);
    2638:	f640 4355 	movw	r3, #3157	; 0xc55
    263c:	e54d      	b.n	20da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd52>
    263e:	bf00      	nop
    2640:	00027934 	.word	0x00027934
    2644:	00027a60 	.word	0x00027a60
    2648:	000275f0 	.word	0x000275f0
    264c:	2000241c 	.word	0x2000241c
    2650:	00027650 	.word	0x00027650
    2654:	00000000 	.word	0x00000000

00002658 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    265c:	461c      	mov	r4, r3
	uint16_t win_offset;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    265e:	6813      	ldr	r3, [r2, #0]
{
    2660:	460d      	mov	r5, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2662:	f8d3 a000 	ldr.w	sl, [r3]
    2666:	f831 cf2e 	ldrh.w	ip, [r1, #46]!
	conn = lll->hdr.parent;
    266a:	4623      	mov	r3, r4
{
    266c:	4617      	mov	r7, r2
	conn = lll->hdr.parent;
    266e:	f853 6b0c 	ldr.w	r6, [r3], #12
    2672:	788a      	ldrb	r2, [r1, #2]
    2674:	f8a4 c00c 	strh.w	ip, [r4, #12]
    2678:	709a      	strb	r2, [r3, #2]
    267a:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
    267e:	60a3      	str	r3, [r4, #8]
    2680:	462b      	mov	r3, r5
{
    2682:	4681      	mov	r9, r0
    2684:	f853 2f3a 	ldr.w	r2, [r3, #58]!
    2688:	61e2      	str	r2, [r4, #28]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    268a:	f104 001c 	add.w	r0, r4, #28
    268e:	791b      	ldrb	r3, [r3, #4]
    2690:	7103      	strb	r3, [r0, #4]
{
    2692:	b093      	sub	sp, #76	; 0x4c
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2694:	2105      	movs	r1, #5
    2696:	f006 fe09 	bl	92ac <util_ones_count_get>
    269a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    269e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    26a2:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    26a6:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    26a8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    26ac:	d90a      	bls.n	26c4 <ull_slave_setup+0x6c>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    26ae:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
    26b2:	f003 021f 	and.w	r2, r3, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    26b6:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    26b8:	f3c3 0104 	ubfx	r1, r3, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    26bc:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    26be:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    26c2:	d902      	bls.n	26ca <ull_slave_setup+0x72>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    26c4:	b013      	add	sp, #76	; 0x4c
    26c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    26ca:	683a      	ldr	r2, [r7, #0]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    26cc:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
	((struct lll_adv *)ftr->param)->conn = NULL;
    26d0:	2000      	movs	r0, #0
    26d2:	6090      	str	r0, [r2, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    26d4:	f8b5 8034 	ldrh.w	r8, [r5, #52]	; 0x34
	lll->interval = interval;
    26d8:	f8a4 8012 	strh.w	r8, [r4, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    26dc:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
    26e0:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
    26e4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    26e8:	82a2      	strh	r2, [r4, #20]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    26ea:	095b      	lsrs	r3, r3, #5
    26ec:	f363 0184 	bfi	r1, r3, #2, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    26f0:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    26f2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	conn->slave.sca = pdu_adv->connect_ind.sca;
    26f6:	f886 10dc 	strb.w	r1, [r6, #220]	; 0xdc
	conn_interval_us = interval * 1250U;
    26fa:	f240 43e2 	movw	r3, #1250	; 0x4e2
    26fe:	fb03 f808 	mul.w	r8, r3, r8
		(((lll_clock_ppm_local_get() +
    2702:	f00f feab 	bl	1245c <lll_clock_ppm_local_get>
    2706:	4683      	mov	fp, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    2708:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
    270c:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2710:	f00f fea6 	bl	12460 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    2714:	4458      	add	r0, fp
		   lll_clock_ppm_get(conn->slave.sca)) *
    2716:	fb08 f000 	mul.w	r0, r8, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    271a:	f8df e324 	ldr.w	lr, [pc, #804]	; 2a40 <ull_slave_setup+0x3e8>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    271e:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2722:	8aa1      	ldrh	r1, [r4, #20]
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2724:	4abc      	ldr	r2, [pc, #752]	; (2a18 <ull_slave_setup+0x3c0>)
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2726:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    272a:	f200 203f 	addw	r0, r0, #575	; 0x23f
    272e:	fbae 3000 	umull	r3, r0, lr, r0
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2732:	ea4f 0e58 	mov.w	lr, r8, lsr #1
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2736:	f240 43e2 	movw	r3, #1250	; 0x4e2
    273a:	fb03 f30c 	mul.w	r3, r3, ip
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    273e:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2740:	f1ae 0e96 	sub.w	lr, lr, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    2744:	62a0      	str	r0, [r4, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2746:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2748:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    274c:	f8b5 b038 	ldrh.w	fp, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2750:	48b2      	ldr	r0, [pc, #712]	; (2a1c <ull_slave_setup+0x3c4>)
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2752:	f242 7310 	movw	r3, #10000	; 0x2710
    2756:	fb03 830b 	mla	r3, r3, fp, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    275a:	4442      	add	r2, r8
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    275c:	f101 0c06 	add.w	ip, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2760:	3b01      	subs	r3, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2762:	fbb2 f2f8 	udiv	r2, r2, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2766:	fbb3 f3f8 	udiv	r3, r3, r8
    276a:	f8a6 30c6 	strh.w	r3, [r6, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    276e:	b293      	uxth	r3, r2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2770:	4563      	cmp	r3, ip
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2772:	4440      	add	r0, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2774:	f8a6 30d2 	strh.w	r3, [r6, #210]	; 0xd2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2778:	fbb0 f0f8 	udiv	r0, r0, r8
    277c:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2780:	dd02      	ble.n	2788 <ull_slave_setup+0x130>
			     (conn->apto_reload - (lll->latency + 6)) :
    2782:	1a5b      	subs	r3, r3, r1
    2784:	3b06      	subs	r3, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2786:	b29b      	uxth	r3, r3
    2788:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
    278c:	4629      	mov	r1, r5
    278e:	68a3      	ldr	r3, [r4, #8]
    2790:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	peer_addr_type = pdu_adv->tx_addr;
    2794:	f851 0f1e 	ldr.w	r0, [r1, #30]!
    2798:	7f2b      	ldrb	r3, [r5, #28]
    279a:	888a      	ldrh	r2, [r1, #4]
    279c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
	cc->status = 0U;
    27a0:	f44f 7c80 	mov.w	ip, #256	; 0x100
	peer_addr_type = pdu_adv->tx_addr;
    27a4:	f3c3 1280 	ubfx	r2, r3, #6, #1
	cc->status = 0U;
    27a8:	f8a5 c01c 	strh.w	ip, [r5, #28]
	peer_addr_type = pdu_adv->tx_addr;
    27ac:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	chan_sel = pdu_adv->chan_sel;
    27b0:	f3c3 1240 	ubfx	r2, r3, #5, #1
    27b4:	9010      	str	r0, [sp, #64]	; 0x40
    27b6:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    27ba:	920a      	str	r2, [sp, #40]	; 0x28
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    27bc:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    27c0:	7cba      	ldrb	r2, [r7, #18]
    27c2:	910d      	str	r1, [sp, #52]	; 0x34
    27c4:	920c      	str	r2, [sp, #48]	; 0x30
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    27c6:	f00f f901 	bl	119cc <ull_filter_lll_lrpa_used>
    27ca:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    27ce:	f105 032b 	add.w	r3, r5, #43	; 0x2b
    27d2:	2800      	cmp	r0, #0
    27d4:	f040 80ed 	bne.w	29b2 <ull_slave_setup+0x35a>
	if (rl_idx != FILTER_IDX_NONE) {
    27d8:	2aff      	cmp	r2, #255	; 0xff
__ssp_bos_icheck3(memset, void *, int)
    27da:	f8c5 002b 	str.w	r0, [r5, #43]	; 0x2b
    27de:	8098      	strh	r0, [r3, #4]
    27e0:	f105 0325 	add.w	r3, r5, #37	; 0x25
    27e4:	f000 80f1 	beq.w	29ca <ull_slave_setup+0x372>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    27e8:	4610      	mov	r0, r2
    27ea:	f105 021f 	add.w	r2, r5, #31
    27ee:	930c      	str	r3, [sp, #48]	; 0x30
    27f0:	f00e fb70 	bl	10ed4 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    27f4:	7faa      	ldrb	r2, [r5, #30]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    27f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    27f8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    27fc:	9810      	ldr	r0, [sp, #64]	; 0x40
    27fe:	f8c5 0025 	str.w	r0, [r5, #37]	; 0x25
    2802:	3202      	adds	r2, #2
    2804:	77aa      	strb	r2, [r5, #30]
    2806:	8099      	strh	r1, [r3, #4]
	cc->sca = conn->slave.sca;
    2808:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
	cc->interval = lll->interval;
    280c:	8a61      	ldrh	r1, [r4, #18]
	cc->latency = lll->latency;
    280e:	8aa2      	ldrh	r2, [r4, #20]
    2810:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->slave.sca;
    2812:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2816:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->interval = lll->interval;
    281a:	8669      	strh	r1, [r5, #50]	; 0x32
	cc->timeout = timeout;
    281c:	f8a5 b036 	strh.w	fp, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    2820:	4630      	mov	r0, r6
    2822:	f00b fb65 	bl	def0 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    2826:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    2828:	8220      	strh	r0, [r4, #16]
	rx->handle = lll->handle;
    282a:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    282c:	687d      	ldr	r5, [r7, #4]
		ll_rx_put(link, rx);
    282e:	4648      	mov	r0, r9
    2830:	f00a f972 	bl	cb18 <ll_rx_put>
		rx->handle = lll->handle;
    2834:	8a23      	ldrh	r3, [r4, #16]
    2836:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2838:	2314      	movs	r3, #20
    283a:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    283c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		link = rx->link;
    283e:	6828      	ldr	r0, [r5, #0]
		if (chan_sel) {
    2840:	2b00      	cmp	r3, #0
    2842:	f000 80d1 	beq.w	29e8 <ull_slave_setup+0x390>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    2846:	f894 e009 	ldrb.w	lr, [r4, #9]
				      lll->access_addr[0];
    284a:	7a23      	ldrb	r3, [r4, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    284c:	f894 c00b 	ldrb.w	ip, [r4, #11]
				      lll->access_addr[2];
    2850:	7aa1      	ldrb	r1, [r4, #10]
			lll->data_chan_sel = 1;
    2852:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    2856:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    285a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    285e:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    2860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
			cs->csa = 0x01;
    2864:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    2866:	8463      	strh	r3, [r4, #34]	; 0x22
			lll->data_chan_sel = 1;
    2868:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
			cs->csa = 0x01;
    286c:	7729      	strb	r1, [r5, #28]
	ll_rx_put(link, rx);
    286e:	4629      	mov	r1, r5
    2870:	f00a f952 	bl	cb18 <ll_rx_put>
	ll_rx_sched();
    2874:	f00a f95a 	bl	cb2c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2878:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    287c:	2101      	movs	r1, #1
    287e:	f000 0007 	and.w	r0, r0, #7
    2882:	f00f fd0b 	bl	1229c <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2886:	4a66      	ldr	r2, [pc, #408]	; (2a20 <ull_slave_setup+0x3c8>)
	conn->evt.ticks_active_to_start = 0U;
    2888:	2500      	movs	r5, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    288a:	4681      	mov	r9, r0
	conn->evt.ticks_xtal_to_start =
    288c:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    288e:	f200 4052 	addw	r0, r0, #1106	; 0x452
    2892:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    2896:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    2898:	e9c6 5501 	strd	r5, r5, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    289c:	a35c      	add	r3, pc, #368	; (adr r3, 2a10 <ull_slave_setup+0x3b8>)
    289e:	e9d3 2300 	ldrd	r2, r3, [r3]
    28a2:	f7fd fc6d 	bl	180 <__aeabi_uldivmod>
    28a6:	68fa      	ldr	r2, [r7, #12]
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    28a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    28ac:	f5a2 74ae 	sub.w	r4, r2, #348	; 0x15c
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    28b0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    28b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    28b8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    28bc:	fb03 3302 	mla	r3, r3, r2, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    28c0:	2102      	movs	r1, #2
    28c2:	462a      	mov	r2, r5
	conn->evt.ticks_slot =
    28c4:	60f0      	str	r0, [r6, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    28c6:	2001      	movs	r0, #1
	conn_offset_us -= EVENT_JITTER_US;
    28c8:	441c      	add	r4, r3
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    28ca:	eba8 080c 	sub.w	r8, r8, ip
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    28ce:	f006 fbc3 	bl	9058 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    28d2:	4650      	mov	r0, sl
    28d4:	f00a fea8 	bl	d628 <ull_adv_handle_get>
    28d8:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    28da:	4b52      	ldr	r3, [pc, #328]	; (2a24 <ull_slave_setup+0x3cc>)
    28dc:	f8cd a000 	str.w	sl, [sp]
    28e0:	b2d2      	uxtb	r2, r2
    28e2:	4628      	mov	r0, r5
    28e4:	2101      	movs	r1, #1
    28e6:	f007 feab 	bl	a640 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    28ea:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
    28ec:	eba4 0409 	sub.w	r4, r4, r9
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    28f0:	f000 8086 	beq.w	2a00 <ull_slave_setup+0x3a8>
	if (adv->lll.is_hdcd) {
    28f4:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    28f8:	07db      	lsls	r3, r3, #31
    28fa:	d479      	bmi.n	29f0 <ull_slave_setup+0x398>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    28fc:	4630      	mov	r0, r6
    28fe:	f00b faf7 	bl	def0 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2902:	f8df b11c 	ldr.w	fp, [pc, #284]	; 2a20 <ull_slave_setup+0x3c8>
    2906:	fba8 890b 	umull	r8, r9, r8, fp
    290a:	a341      	add	r3, pc, #260	; (adr r3, 2a10 <ull_slave_setup+0x3b8>)
    290c:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2910:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2912:	4649      	mov	r1, r9
    2914:	4640      	mov	r0, r8
    2916:	f7fd fc33 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    291a:	4a43      	ldr	r2, [pc, #268]	; (2a28 <ull_slave_setup+0x3d0>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    291c:	9606      	str	r6, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    291e:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    2922:	fbaa 2302 	umull	r2, r3, sl, r2
    2926:	2107      	movs	r1, #7
    2928:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    292c:	f240 1145 	movw	r1, #325	; 0x145
    2930:	68bf      	ldr	r7, [r7, #8]
    2932:	9108      	str	r1, [sp, #32]
    2934:	493d      	ldr	r1, [pc, #244]	; (2a2c <ull_slave_setup+0x3d4>)
    2936:	9107      	str	r1, [sp, #28]
    2938:	493d      	ldr	r1, [pc, #244]	; (2a30 <ull_slave_setup+0x3d8>)
    293a:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    293c:	ebb8 0002 	subs.w	r0, r8, r2
    2940:	eb69 0103 	sbc.w	r1, r9, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2944:	68f3      	ldr	r3, [r6, #12]
    2946:	9304      	str	r3, [sp, #16]
    2948:	2600      	movs	r6, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    294a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    294e:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2950:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2952:	f7fd fc15 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2956:	a32e      	add	r3, pc, #184	; (adr r3, 2a10 <ull_slave_setup+0x3b8>)
    2958:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    295c:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    295e:	fba4 010b 	umull	r0, r1, r4, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2962:	e9cd ac01 	strd	sl, ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2966:	f7fd fc0b 	bl	180 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    296a:	3503      	adds	r5, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    296c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2970:	b2ed      	uxtb	r5, r5
    2972:	3f31      	subs	r7, #49	; 0x31
    2974:	463b      	mov	r3, r7
    2976:	9000      	str	r0, [sp, #0]
    2978:	462a      	mov	r2, r5
    297a:	4630      	mov	r0, r6
    297c:	2101      	movs	r1, #1
    297e:	f007 fdf3 	bl	a568 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2982:	f030 0302 	bics.w	r3, r0, #2
    2986:	d00c      	beq.n	29a2 <ull_slave_setup+0x34a>
    2988:	4a2a      	ldr	r2, [pc, #168]	; (2a34 <ull_slave_setup+0x3dc>)
    298a:	492b      	ldr	r1, [pc, #172]	; (2a38 <ull_slave_setup+0x3e0>)
    298c:	482b      	ldr	r0, [pc, #172]	; (2a3c <ull_slave_setup+0x3e4>)
    298e:	f44f 73a3 	mov.w	r3, #326	; 0x146
    2992:	f01b f9ac 	bl	1dcee <printk>
    2996:	4040      	eors	r0, r0
    2998:	f380 8811 	msr	BASEPRI, r0
    299c:	f04f 0003 	mov.w	r0, #3
    29a0:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    29a2:	2201      	movs	r2, #1
    29a4:	4610      	mov	r0, r2
    29a6:	2102      	movs	r1, #2
}
    29a8:	b013      	add	sp, #76	; 0x4c
    29aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    29ae:	f006 bb53 	b.w	9058 <mayfly_enable>
    29b2:	4628      	mov	r0, r5
	if (rl_idx != FILTER_IDX_NONE) {
    29b4:	2aff      	cmp	r2, #255	; 0xff
    29b6:	f850 cf24 	ldr.w	ip, [r0, #36]!
    29ba:	f8c5 c02b 	str.w	ip, [r5, #43]	; 0x2b
    29be:	8880      	ldrh	r0, [r0, #4]
    29c0:	8098      	strh	r0, [r3, #4]
    29c2:	f105 0325 	add.w	r3, r5, #37	; 0x25
    29c6:	f47f af0f 	bne.w	27e8 <ull_slave_setup+0x190>
__ssp_bos_icheck3(memset, void *, int)
    29ca:	2200      	movs	r2, #0
    29cc:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    29d0:	9810      	ldr	r0, [sp, #64]	; 0x40
    29d2:	f8c5 2025 	str.w	r2, [r5, #37]	; 0x25
    29d6:	809a      	strh	r2, [r3, #4]
		cc->peer_addr_type = peer_addr_type;
    29d8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    29dc:	f8a5 1023 	strh.w	r1, [r5, #35]	; 0x23
    29e0:	77ab      	strb	r3, [r5, #30]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    29e2:	f8c5 001f 	str.w	r0, [r5, #31]
    29e6:	e70f      	b.n	2808 <ull_slave_setup+0x1b0>
			cs->csa = 0x00;
    29e8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    29ec:	772b      	strb	r3, [r5, #28]
    29ee:	e73e      	b.n	286e <ull_slave_setup+0x216>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    29f0:	2300      	movs	r3, #0
    29f2:	2201      	movs	r2, #1
    29f4:	9300      	str	r3, [sp, #0]
    29f6:	4618      	mov	r0, r3
    29f8:	4611      	mov	r1, r2
    29fa:	f007 fe21 	bl	a640 <ticker_stop>
    29fe:	e77d      	b.n	28fc <ull_slave_setup+0x2a4>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2a00:	f00a f940 	bl	cc84 <ull_disable_mark_get>
    2a04:	4582      	cmp	sl, r0
    2a06:	f43f af75 	beq.w	28f4 <ull_slave_setup+0x29c>
    2a0a:	f00d ffa5 	bl	10958 <ticker_op_stop_adv_cb.part.0>
    2a0e:	e771      	b.n	28f4 <ull_slave_setup+0x29c>
    2a10:	1afd498d 	.word	0x1afd498d
    2a14:	00000007 	.word	0x00000007
    2a18:	01c9c37f 	.word	0x01c9c37f
    2a1c:	026259ff 	.word	0x026259ff
    2a20:	3b9aca00 	.word	0x3b9aca00
    2a24:	00010985 	.word	0x00010985
    2a28:	1afd498d 	.word	0x1afd498d
    2a2c:	00010929 	.word	0x00010929
    2a30:	000109a1 	.word	0x000109a1
    2a34:	00027b30 	.word	0x00027b30
    2a38:	00027a74 	.word	0x00027a74
    2a3c:	000275f0 	.word	0x000275f0
    2a40:	431bde83 	.word	0x431bde83

00002a44 <battery_init>:

/* ********** ********** ********** ********** ********** */

/* ********** ********** FUNCTIONS ********** ********** */
void battery_init()
{
    2a44:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2a46:	4805      	ldr	r0, [pc, #20]	; (2a5c <battery_init+0x18>)
    2a48:	f017 fc54 	bl	1a2f4 <z_impl_device_get_binding>
	percentage_dev = device_get_binding("ADC_0");
    2a4c:	4a04      	ldr	r2, [pc, #16]	; (2a60 <battery_init+0x1c>)
    2a4e:	6010      	str	r0, [r2, #0]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
    2a50:	6883      	ldr	r3, [r0, #8]
    2a52:	4904      	ldr	r1, [pc, #16]	; (2a64 <battery_init+0x20>)
    2a54:	681b      	ldr	r3, [r3, #0]
	if (adc_channel_setup(percentage_dev, &m_1st_channel_cfg) < 0) {
		LOG_ERR("Failed to setup channel for adc!");
	}

	LOG_DBG("Battery status init: Done");
}
    2a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2a5a:	4718      	bx	r3
    2a5c:	0002873a 	.word	0x0002873a
    2a60:	20001530 	.word	0x20001530
    2a64:	00028734 	.word	0x00028734

00002a68 <battery_update_charging_status>:
	percentage = battery_mv_to_ppt(mv)/100;
}

void battery_update_charging_status(bool value)
{
	charging = value;
    2a68:	4b01      	ldr	r3, [pc, #4]	; (2a70 <battery_update_charging_status+0x8>)
    2a6a:	7018      	strb	r0, [r3, #0]
}
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop
    2a70:	20002f36 	.word	0x20002f36

00002a74 <battery_mv_to_ppt>:

uint32_t battery_mv_to_ppt(uint32_t mv)
{
	const struct battery_level_point *pb = lipo;

	if (mv >= pb->lvl_mV) {
    2a74:	f241 0267 	movw	r2, #4199	; 0x1067
    2a78:	4290      	cmp	r0, r2
{
    2a7a:	b510      	push	{r4, lr}
    2a7c:	4603      	mov	r3, r0
	if (mv >= pb->lvl_mV) {
    2a7e:	d816      	bhi.n	2aae <battery_mv_to_ppt+0x3a>
	const struct battery_level_point *pb = lipo;
    2a80:	4a0c      	ldr	r2, [pc, #48]	; (2ab4 <battery_mv_to_ppt+0x40>)
		return pb->lvl_pptt;
	}

	while ((pb->lvl_pptt > 0)
    2a82:	8810      	ldrh	r0, [r2, #0]
    2a84:	8851      	ldrh	r1, [r2, #2]
    2a86:	b178      	cbz	r0, 2aa8 <battery_mv_to_ppt+0x34>
	       && (mv < pb->lvl_mV)) {
    2a88:	4299      	cmp	r1, r3
    2a8a:	d80b      	bhi.n	2aa4 <battery_mv_to_ppt+0x30>
	}

	const struct battery_level_point *pa = pb - 1;

	return pb->lvl_pptt
	       + ((pa->lvl_pptt - pb->lvl_pptt)
    2a8c:	f832 4c04 	ldrh.w	r4, [r2, #-4]
		  * (mv - pb->lvl_mV)
		  / (pa->lvl_mV - pb->lvl_mV));
    2a90:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	       + ((pa->lvl_pptt - pb->lvl_pptt)
    2a94:	1a24      	subs	r4, r4, r0
		  * (mv - pb->lvl_mV)
    2a96:	1a5b      	subs	r3, r3, r1
    2a98:	4363      	muls	r3, r4
		  / (pa->lvl_mV - pb->lvl_mV));
    2a9a:	1a51      	subs	r1, r2, r1
    2a9c:	fbb3 f3f1 	udiv	r3, r3, r1
	       + ((pa->lvl_pptt - pb->lvl_pptt)
    2aa0:	4418      	add	r0, r3
    2aa2:	e003      	b.n	2aac <battery_mv_to_ppt+0x38>
		++pb;
    2aa4:	3204      	adds	r2, #4
    2aa6:	e7ec      	b.n	2a82 <battery_mv_to_ppt+0xe>
	if (mv < pb->lvl_mV) {
    2aa8:	4299      	cmp	r1, r3
    2aaa:	d9ef      	bls.n	2a8c <battery_mv_to_ppt+0x18>
}
    2aac:	bd10      	pop	{r4, pc}
		return pb->lvl_pptt;
    2aae:	f242 7010 	movw	r0, #10000	; 0x2710
    2ab2:	e7fb      	b.n	2aac <battery_mv_to_ppt+0x38>
    2ab4:	00028720 	.word	0x00028720

00002ab8 <battery_update_percentage>:
{
    2ab8:	b508      	push	{r3, lr}
	adc_read(percentage_dev, &sequence);
    2aba:	4b07      	ldr	r3, [pc, #28]	; (2ad8 <battery_update_percentage+0x20>)
    2abc:	6818      	ldr	r0, [r3, #0]
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    2abe:	6883      	ldr	r3, [r0, #8]
    2ac0:	4906      	ldr	r1, [pc, #24]	; (2adc <battery_update_percentage+0x24>)
    2ac2:	685b      	ldr	r3, [r3, #4]
    2ac4:	4798      	blx	r3
	uint32_t mv = battery_raw_to_mv(data[0]);
    2ac6:	4b06      	ldr	r3, [pc, #24]	; (2ae0 <battery_update_percentage+0x28>)
    2ac8:	f9b3 0000 	ldrsh.w	r0, [r3]
    2acc:	f01a ffbe 	bl	1da4c <battery_raw_to_mv>
}
    2ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	percentage = battery_mv_to_ppt(mv)/100;
    2ad4:	f7ff bfce 	b.w	2a74 <battery_mv_to_ppt>
    2ad8:	20001530 	.word	0x20001530
    2adc:	00027218 	.word	0x00027218
    2ae0:	20002eec 	.word	0x20002eec

00002ae4 <advertise>:
			     sizeof(FW_VERSION));
	return 0;
}

static void advertise(struct k_work *work)
{
    2ae4:	b507      	push	{r0, r1, r2, lr}
	int rc;

	bt_le_adv_stop();
    2ae6:	f003 fc9b 	bl	6420 <bt_le_adv_stop>

	rc = bt_le_adv_start(&param, ad, ARRAY_SIZE(ad), NULL, 0);
    2aea:	2300      	movs	r3, #0
    2aec:	4904      	ldr	r1, [pc, #16]	; (2b00 <advertise+0x1c>)
    2aee:	9300      	str	r3, [sp, #0]
    2af0:	2203      	movs	r2, #3
    2af2:	4804      	ldr	r0, [pc, #16]	; (2b04 <advertise+0x20>)
    2af4:	f003 fc86 	bl	6404 <bt_le_adv_start>
		LOG_ERR("Advertising failed to start (rc %d)", rc);
		return;
	}

	LOG_INF("Advertising successfully started");
}
    2af8:	b003      	add	sp, #12
    2afa:	f85d fb04 	ldr.w	pc, [sp], #4
    2afe:	bf00      	nop
    2b00:	0002722c 	.word	0x0002722c
    2b04:	200001e4 	.word	0x200001e4

00002b08 <bt_init>:
{

}

void bt_init(void)
{
    2b08:	b570      	push	{r4, r5, r6, lr}
	int err = bt_enable(NULL);
    2b0a:	2000      	movs	r0, #0
    2b0c:	f003 fa02 	bl	5f14 <bt_enable>
	if (err) {
    2b10:	4605      	mov	r5, r0
    2b12:	bb58      	cbnz	r0, 2b6c <bt_init+0x64>
 *
 * @return N/A
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    2b14:	4e16      	ldr	r6, [pc, #88]	; (2b70 <bt_init+0x68>)
		LOG_ERR("Bluetooth init failed (err %d)", err);
		return;
	}

	settings_load();
    2b16:	f01b fc59 	bl	1e3cc <settings_load>
	settings_runtime_set("bt/dis/sw",
    2b1a:	4916      	ldr	r1, [pc, #88]	; (2b74 <bt_init+0x6c>)
    2b1c:	4816      	ldr	r0, [pc, #88]	; (2b78 <bt_init+0x70>)
    2b1e:	2207      	movs	r2, #7
    2b20:	f001 f882 	bl	3c28 <settings_runtime_set>
    2b24:	4634      	mov	r4, r6
	settings_runtime_set("bt/dis/fw",
    2b26:	4915      	ldr	r1, [pc, #84]	; (2b7c <bt_init+0x74>)
    2b28:	4815      	ldr	r0, [pc, #84]	; (2b80 <bt_init+0x78>)
    2b2a:	2207      	movs	r2, #7
    2b2c:	f001 f87c 	bl	3c28 <settings_runtime_set>
    2b30:	4b14      	ldr	r3, [pc, #80]	; (2b84 <bt_init+0x7c>)
	settings_runtime_load();

	k_work_init(&advertise_work, advertise);
	bt_conn_cb_register(&m_conn_callbacks);
    2b32:	4815      	ldr	r0, [pc, #84]	; (2b88 <bt_init+0x80>)
    2b34:	f844 5f08 	str.w	r5, [r4, #8]!
    2b38:	6035      	str	r5, [r6, #0]
    2b3a:	6073      	str	r3, [r6, #4]
    2b3c:	f003 fee6 	bl	690c <bt_conn_cb_register>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2b40:	f3bf 8f5b 	dmb	ish
    2b44:	e854 3f00 	ldrex	r3, [r4]
    2b48:	f043 0201 	orr.w	r2, r3, #1
    2b4c:	e844 2100 	strex	r1, r2, [r4]
    2b50:	2900      	cmp	r1, #0
    2b52:	d1f7      	bne.n	2b44 <bt_init+0x3c>
    2b54:	f3bf 8f5b 	dmb	ish
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    2b58:	07db      	lsls	r3, r3, #31
    2b5a:	d403      	bmi.n	2b64 <bt_init+0x5c>
		k_queue_append(&work_q->queue, work);
    2b5c:	480b      	ldr	r0, [pc, #44]	; (2b8c <bt_init+0x84>)
    2b5e:	4631      	mov	r1, r6
    2b60:	f023 fb6b 	bl	2623a <k_queue_append>
	smp_bt_register();
#endif
	cts_sync_init();

	LOG_DBG("Bluetooth initialized");
}
    2b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cts_sync_init();
    2b68:	f000 b926 	b.w	2db8 <cts_sync_init>
}
    2b6c:	bd70      	pop	{r4, r5, r6, pc}
    2b6e:	bf00      	nop
    2b70:	20001534 	.word	0x20001534
    2b74:	00028740 	.word	0x00028740
    2b78:	00028747 	.word	0x00028747
    2b7c:	00028751 	.word	0x00028751
    2b80:	00028758 	.word	0x00028758
    2b84:	00002ae5 	.word	0x00002ae5
    2b88:	200001d0 	.word	0x200001d0
    2b8c:	20001488 	.word	0x20001488

00002b90 <clock_str_to_local_time>:
	.tm_wday = 0,
};

/* ********** ********** FUNCTIONS *********** ********** */
void clock_str_to_local_time(const char *str)
{
    2b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (sscanf(str, "%d-%d-%dT%d:%d:%d", &ti.tm_year, &ti.tm_mon,
    2b92:	4c0f      	ldr	r4, [pc, #60]	; (2bd0 <clock_str_to_local_time+0x40>)
    2b94:	490f      	ldr	r1, [pc, #60]	; (2bd4 <clock_str_to_local_time+0x44>)
    2b96:	9403      	str	r4, [sp, #12]
    2b98:	1d23      	adds	r3, r4, #4
    2b9a:	9302      	str	r3, [sp, #8]
    2b9c:	f104 0308 	add.w	r3, r4, #8
    2ba0:	9301      	str	r3, [sp, #4]
    2ba2:	f104 030c 	add.w	r3, r4, #12
    2ba6:	9300      	str	r3, [sp, #0]
    2ba8:	f104 0214 	add.w	r2, r4, #20
    2bac:	f104 0310 	add.w	r3, r4, #16
    2bb0:	f019 f93c 	bl	1be2c <siscanf>
		   &ti.tm_mday, &ti.tm_hour, &ti.tm_min, &ti.tm_sec) != 6) {
		LOG_ERR("Failed to parse time of build.");
	}
	ti.tm_year-=1900;
    2bb4:	6963      	ldr	r3, [r4, #20]
    2bb6:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
    2bba:	6163      	str	r3, [r4, #20]
	ti.tm_mon-=1;
    2bbc:	6923      	ldr	r3, [r4, #16]
	mktime(&ti);
    2bbe:	4620      	mov	r0, r4
	ti.tm_mon-=1;
    2bc0:	3b01      	subs	r3, #1
    2bc2:	6123      	str	r3, [r4, #16]
}
    2bc4:	b004      	add	sp, #16
    2bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mktime(&ti);
    2bca:	f018 bed5 	b.w	1b978 <mktime>
    2bce:	bf00      	nop
    2bd0:	20001540 	.word	0x20001540
    2bd4:	00028762 	.word	0x00028762

00002bd8 <clock_init>:

void clock_init()
{
	/* Set time to time of build */
	clock_str_to_local_time(TIME_OF_BUILD);
    2bd8:	4801      	ldr	r0, [pc, #4]	; (2be0 <clock_init+0x8>)
    2bda:	f7ff bfd9 	b.w	2b90 <clock_str_to_local_time>
    2bde:	bf00      	nop
    2be0:	00028774 	.word	0x00028774

00002be4 <clock_update_elapsed_ms>:
	LOG_DBG("Time set to time of build");
	LOG_DBG("Clock init: Done");
}

void clock_update_elapsed_ms()
{
    2be4:	b538      	push	{r3, r4, r5, lr}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    2be6:	f023 fd55 	bl	26694 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    2bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2bee:	460a      	mov	r2, r1
    2bf0:	fba0 0103 	umull	r0, r1, r0, r3
    2bf4:	fb03 1102 	mla	r1, r3, r2, r1
	uptime_ms = k_uptime_get();
	elapsed_ms = uptime_ms - last_uptime_ms;
    2bf8:	4a07      	ldr	r2, [pc, #28]	; (2c18 <clock_update_elapsed_ms+0x34>)
    2bfa:	4d08      	ldr	r5, [pc, #32]	; (2c1c <clock_update_elapsed_ms+0x38>)
    2bfc:	0bc3      	lsrs	r3, r0, #15
    2bfe:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    2c02:	0bcc      	lsrs	r4, r1, #15
    2c04:	e9d2 1000 	ldrd	r1, r0, [r2]
    2c08:	1a59      	subs	r1, r3, r1
    2c0a:	eb64 0000 	sbc.w	r0, r4, r0
    2c0e:	e9c5 1000 	strd	r1, r0, [r5]
	last_uptime_ms = uptime_ms;
    2c12:	e9c2 3400 	strd	r3, r4, [r2]
}
    2c16:	bd38      	pop	{r3, r4, r5, pc}
    2c18:	20000ea8 	.word	0x20000ea8
    2c1c:	20000ea0 	.word	0x20000ea0

00002c20 <clock_sync_time>:

/* Called by cts sync */
void clock_sync_time(cts_datetime_t *cts)
{
    2c20:	b508      	push	{r3, lr}
    2c22:	4603      	mov	r3, r0
	ti.tm_year = cts->year -1900;
    2c24:	480a      	ldr	r0, [pc, #40]	; (2c50 <clock_sync_time+0x30>)
    2c26:	881a      	ldrh	r2, [r3, #0]
    2c28:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
    2c2c:	6142      	str	r2, [r0, #20]
	ti.tm_mon = cts->month -1;
    2c2e:	789a      	ldrb	r2, [r3, #2]
    2c30:	3a01      	subs	r2, #1
    2c32:	6102      	str	r2, [r0, #16]
	ti.tm_mday = cts->day;
    2c34:	78da      	ldrb	r2, [r3, #3]
    2c36:	60c2      	str	r2, [r0, #12]
	ti.tm_hour = cts->hours;
    2c38:	791a      	ldrb	r2, [r3, #4]
    2c3a:	6082      	str	r2, [r0, #8]
	ti.tm_min = cts->minutes;
    2c3c:	795a      	ldrb	r2, [r3, #5]
    2c3e:	6042      	str	r2, [r0, #4]
	ti.tm_sec = cts->seconds;
    2c40:	799b      	ldrb	r3, [r3, #6]
    2c42:	6003      	str	r3, [r0, #0]
	mktime(&ti);
    2c44:	f018 fe98 	bl	1b978 <mktime>
	clock_update_elapsed_ms();
}
    2c48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	clock_update_elapsed_ms();
    2c4c:	f7ff bfca 	b.w	2be4 <clock_update_elapsed_ms>
    2c50:	20001540 	.word	0x20001540

00002c54 <clock_increment_local_time>:

/* Called by event handler */
void clock_increment_local_time()
{
    2c54:	b510      	push	{r4, lr}
	clock_update_elapsed_ms();
    2c56:	f7ff ffc5 	bl	2be4 <clock_update_elapsed_ms>
	ti.tm_sec += elapsed_ms / 1000;
    2c5a:	4908      	ldr	r1, [pc, #32]	; (2c7c <clock_increment_local_time+0x28>)
    2c5c:	4c08      	ldr	r4, [pc, #32]	; (2c80 <clock_increment_local_time+0x2c>)
    2c5e:	2300      	movs	r3, #0
    2c60:	e9d1 0100 	ldrd	r0, r1, [r1]
    2c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c68:	f7fd fa8a 	bl	180 <__aeabi_uldivmod>
    2c6c:	6823      	ldr	r3, [r4, #0]
    2c6e:	4403      	add	r3, r0
    2c70:	6023      	str	r3, [r4, #0]
	mktime(&ti);
    2c72:	4620      	mov	r0, r4
}
    2c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mktime(&ti);
    2c78:	f018 be7e 	b.w	1b978 <mktime>
    2c7c:	20000ea0 	.word	0x20000ea0
    2c80:	20001540 	.word	0x20001540

00002c84 <clock_show_time>:

void clock_show_time()
{
    2c84:	b570      	push	{r4, r5, r6, lr}
	strftime(time_label_str, 32, "%H:%M", &ti);
    2c86:	4e0b      	ldr	r6, [pc, #44]	; (2cb4 <clock_show_time+0x30>)
    2c88:	4d0b      	ldr	r5, [pc, #44]	; (2cb8 <clock_show_time+0x34>)
	strftime(date_label_str, 32, "%a %d %b", &ti);
    2c8a:	4c0c      	ldr	r4, [pc, #48]	; (2cbc <clock_show_time+0x38>)
	strftime(time_label_str, 32, "%H:%M", &ti);
    2c8c:	4a0c      	ldr	r2, [pc, #48]	; (2cc0 <clock_show_time+0x3c>)
    2c8e:	4633      	mov	r3, r6
    2c90:	2120      	movs	r1, #32
    2c92:	4628      	mov	r0, r5
    2c94:	f019 fe40 	bl	1c918 <strftime>
	strftime(date_label_str, 32, "%a %d %b", &ti);
    2c98:	4633      	mov	r3, r6
    2c9a:	4a0a      	ldr	r2, [pc, #40]	; (2cc4 <clock_show_time+0x40>)
    2c9c:	2120      	movs	r1, #32
    2c9e:	4620      	mov	r0, r4
    2ca0:	f019 fe3a 	bl	1c918 <strftime>
	gfx_time_set_label(time_label_str);
    2ca4:	4628      	mov	r0, r5
    2ca6:	f000 f999 	bl	2fdc <gfx_time_set_label>
	gfx_date_set_label(date_label_str);
    2caa:	4620      	mov	r0, r4
}
    2cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gfx_date_set_label(date_label_str);
    2cb0:	f000 b9a8 	b.w	3004 <gfx_date_set_label>
    2cb4:	20001540 	.word	0x20001540
    2cb8:	20002f57 	.word	0x20002f57
    2cbc:	20002f37 	.word	0x20002f37
    2cc0:	00028788 	.word	0x00028788
    2cc4:	0002878e 	.word	0x0002878e

00002cc8 <cts_sync_timer_timeout_handler>:
	t->tm_sec = clock_datetime.seconds;
}

static void cts_sync_timer_timeout_handler(struct k_timer *tmr)
{
	bt_conn_foreach(BT_CONN_TYPE_LE, cts_sync_processor, NULL);
    2cc8:	4902      	ldr	r1, [pc, #8]	; (2cd4 <cts_sync_timer_timeout_handler+0xc>)
    2cca:	2200      	movs	r2, #0
    2ccc:	2001      	movs	r0, #1
    2cce:	f003 bf43 	b.w	6b58 <bt_conn_foreach>
    2cd2:	bf00      	nop
    2cd4:	00002cd9 	.word	0x00002cd9

00002cd8 <cts_sync_processor>:

	return BT_GATT_ITER_STOP;
}

static void cts_sync_processor(struct bt_conn *conn, void *data)
{
    2cd8:	b082      	sub	sp, #8
	memcpy(&uuid, BT_UUID_CTS_CURRENT_TIME, sizeof(uuid));
    2cda:	2300      	movs	r3, #0
    2cdc:	f88d 3004 	strb.w	r3, [sp, #4]
    2ce0:	f642 232b 	movw	r3, #10795	; 0x2a2b
    2ce4:	f8ad 3006 	strh.w	r3, [sp, #6]
    2ce8:	4b08      	ldr	r3, [pc, #32]	; (2d0c <cts_sync_processor+0x34>)
	cts_discovery_params.func = cts_sync_service_discovered;
    2cea:	4909      	ldr	r1, [pc, #36]	; (2d10 <cts_sync_processor+0x38>)
    2cec:	9a01      	ldr	r2, [sp, #4]
    2cee:	601a      	str	r2, [r3, #0]
    2cf0:	4a08      	ldr	r2, [pc, #32]	; (2d14 <cts_sync_processor+0x3c>)
    2cf2:	604a      	str	r2, [r1, #4]
	cts_discovery_params.start_handle = 0x0001;
    2cf4:	2201      	movs	r2, #1
    2cf6:	810a      	strh	r2, [r1, #8]
	cts_discovery_params.end_handle = 0xFFFF;
    2cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2cfc:	81ca      	strh	r2, [r1, #14]
	cts_discovery_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
    2cfe:	2203      	movs	r2, #3
    2d00:	740a      	strb	r2, [r1, #16]
	cts_discovery_params.uuid = (struct bt_uuid *) &uuid;
    2d02:	600b      	str	r3, [r1, #0]

	if (bt_gatt_discover(conn, &cts_discovery_params) != 0) {
		LOG_ERR("CTS Sync > GATT discovery FAILED.");
	}
}
    2d04:	b002      	add	sp, #8
	if (bt_gatt_discover(conn, &cts_discovery_params) != 0) {
    2d06:	f005 bd99 	b.w	883c <bt_gatt_discover>
    2d0a:	bf00      	nop
    2d0c:	20002ef8 	.word	0x20002ef8
    2d10:	20001564 	.word	0x20001564
    2d14:	00002d19 	.word	0x00002d19

00002d18 <cts_sync_service_discovered>:
{
    2d18:	b510      	push	{r4, lr}
	if (!attr) {
    2d1a:	460b      	mov	r3, r1
    2d1c:	b179      	cbz	r1, 2d3e <cts_sync_service_discovered+0x26>
	memset(&read_params, 0, sizeof(read_params));
    2d1e:	4909      	ldr	r1, [pc, #36]	; (2d44 <cts_sync_service_discovered+0x2c>)
	read_params.by_uuid.start_handle = attr->handle;
    2d20:	8a1b      	ldrh	r3, [r3, #16]
    2d22:	810b      	strh	r3, [r1, #8]
	read_params.by_uuid.end_handle = 0xffff;
    2d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
	read_params.func = cts_sync_read;
    2d28:	4c07      	ldr	r4, [pc, #28]	; (2d48 <cts_sync_service_discovered+0x30>)
	read_params.by_uuid.end_handle = 0xffff;
    2d2a:	814b      	strh	r3, [r1, #10]
	memset(&read_params, 0, sizeof(read_params));
    2d2c:	2200      	movs	r2, #0
	m_read_buf.offset = 0;
    2d2e:	4b07      	ldr	r3, [pc, #28]	; (2d4c <cts_sync_service_discovered+0x34>)
	read_params.func = cts_sync_read;
    2d30:	600c      	str	r4, [r1, #0]
	memset(&read_params, 0, sizeof(read_params));
    2d32:	604a      	str	r2, [r1, #4]
	read_params.by_uuid.uuid = (struct bt_uuid *) &uuid;
    2d34:	4c06      	ldr	r4, [pc, #24]	; (2d50 <cts_sync_service_discovered+0x38>)
    2d36:	60cc      	str	r4, [r1, #12]
	m_read_buf.offset = 0;
    2d38:	601a      	str	r2, [r3, #0]
	if (bt_gatt_read(conn, &read_params) < 0) {
    2d3a:	f005 ff5f 	bl	8bfc <bt_gatt_read>
}
    2d3e:	2000      	movs	r0, #0
    2d40:	bd10      	pop	{r4, pc}
    2d42:	bf00      	nop
    2d44:	20001588 	.word	0x20001588
    2d48:	00002d55 	.word	0x00002d55
    2d4c:	20001578 	.word	0x20001578
    2d50:	20002ef8 	.word	0x20002ef8

00002d54 <cts_sync_read>:
{
    2d54:	b570      	push	{r4, r5, r6, lr}
	if (!data || length <= 0) {
    2d56:	4619      	mov	r1, r3
{
    2d58:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    2d5c:	4c13      	ldr	r4, [pc, #76]	; (2dac <cts_sync_read+0x58>)
	if (!data || length <= 0) {
    2d5e:	b103      	cbz	r3, 2d62 <cts_sync_read+0xe>
    2d60:	b9b5      	cbnz	r5, 2d90 <cts_sync_read+0x3c>
	if (cts_datetime->year + cts_datetime->day + cts_datetime->hours
    2d62:	79e3      	ldrb	r3, [r4, #7]
    2d64:	88a0      	ldrh	r0, [r4, #4]
    2d66:	4418      	add	r0, r3
    2d68:	7a23      	ldrb	r3, [r4, #8]
    2d6a:	4418      	add	r0, r3
	    + cts_datetime->minutes + cts_datetime->seconds == 0) {
    2d6c:	7a63      	ldrb	r3, [r4, #9]
    2d6e:	4418      	add	r0, r3
    2d70:	7aa3      	ldrb	r3, [r4, #10]
	if (cts_datetime->year + cts_datetime->day + cts_datetime->hours
    2d72:	18c0      	adds	r0, r0, r3
    2d74:	d00b      	beq.n	2d8e <cts_sync_read+0x3a>
	memcpy(&clock_datetime, cts_datetime, sizeof(clock_datetime));
    2d76:	4b0e      	ldr	r3, [pc, #56]	; (2db0 <cts_sync_read+0x5c>)
    2d78:	4a0e      	ldr	r2, [pc, #56]	; (2db4 <cts_sync_read+0x60>)
    2d7a:	cb03      	ldmia	r3!, {r0, r1}
    2d7c:	6010      	str	r0, [r2, #0]
    2d7e:	4618      	mov	r0, r3
    2d80:	6051      	str	r1, [r2, #4]
    2d82:	f830 3908 	ldrh.w	r3, [r0], #-8
    2d86:	8113      	strh	r3, [r2, #8]
	clock_sync_time(cts_datetime);
    2d88:	f7ff ff4a 	bl	2c20 <clock_sync_time>
		return BT_GATT_ITER_STOP;
    2d8c:	2000      	movs	r0, #0
}
    2d8e:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(&m_read_buf.datetime + m_read_buf.offset, data, length);
    2d90:	4623      	mov	r3, r4
    2d92:	260a      	movs	r6, #10
    2d94:	f853 0b04 	ldr.w	r0, [r3], #4
    2d98:	462a      	mov	r2, r5
    2d9a:	fb06 3000 	mla	r0, r6, r0, r3
    2d9e:	f023 fe54 	bl	26a4a <memcpy>
	m_read_buf.offset += length;
    2da2:	6823      	ldr	r3, [r4, #0]
    2da4:	442b      	add	r3, r5
    2da6:	6023      	str	r3, [r4, #0]
    2da8:	2001      	movs	r0, #1
    2daa:	e7f0      	b.n	2d8e <cts_sync_read+0x3a>
    2dac:	20001578 	.word	0x20001578
    2db0:	2000157c 	.word	0x2000157c
    2db4:	20002eee 	.word	0x20002eee

00002db8 <cts_sync_init>:
	k_timer_init(&m_cts_sync_timer, cts_sync_timer_timeout_handler, NULL);
    2db8:	4902      	ldr	r1, [pc, #8]	; (2dc4 <cts_sync_init+0xc>)
    2dba:	4803      	ldr	r0, [pc, #12]	; (2dc8 <cts_sync_init+0x10>)
    2dbc:	2200      	movs	r2, #0
    2dbe:	f023 bc94 	b.w	266ea <k_timer_init>
    2dc2:	bf00      	nop
    2dc4:	00002cc9 	.word	0x00002cc9
    2dc8:	20000eb0 	.word	0x20000eb0

00002dcc <cts_sync_enable>:
{
    2dcc:	b507      	push	{r0, r1, r2, lr}
	if (enable) {
    2dce:	b160      	cbz	r0, 2dea <cts_sync_enable+0x1e>
	z_impl_k_timer_start(timer, duration, period);
    2dd0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    2dd4:	2300      	movs	r3, #0
    2dd6:	e9cd 2300 	strd	r2, r3, [sp]
    2dda:	4807      	ldr	r0, [pc, #28]	; (2df8 <cts_sync_enable+0x2c>)
    2ddc:	2200      	movs	r2, #0
    2dde:	2300      	movs	r3, #0
    2de0:	f018 fbf0 	bl	1b5c4 <z_impl_k_timer_start>
}
    2de4:	b003      	add	sp, #12
    2de6:	f85d fb04 	ldr.w	pc, [sp], #4
	z_impl_k_timer_stop(timer);
    2dea:	4803      	ldr	r0, [pc, #12]	; (2df8 <cts_sync_enable+0x2c>)
    2dec:	b003      	add	sp, #12
    2dee:	f85d eb04 	ldr.w	lr, [sp], #4
    2df2:	f023 bc86 	b.w	26702 <z_impl_k_timer_stop>
    2df6:	bf00      	nop
    2df8:	20000eb0 	.word	0x20000eb0

00002dfc <display_init>:
static struct device *display_dev;
/* ********** ********** ********** ********** ********** ********** */

/* ********** ********** FUNCTIONS ********** ********** */
void display_init(void)
{
    2dfc:	b510      	push	{r4, lr}
    2dfe:	4805      	ldr	r0, [pc, #20]	; (2e14 <display_init+0x18>)
    2e00:	f017 fa78 	bl	1a2f4 <z_impl_device_get_binding>
static inline int display_blanking_off(const struct device *dev)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	return api->blanking_off(dev);
    2e04:	6883      	ldr	r3, [r0, #8]
	display_dev = device_get_binding("SSD1306");
    2e06:	4a04      	ldr	r2, [pc, #16]	; (2e18 <display_init+0x1c>)
    2e08:	685b      	ldr	r3, [r3, #4]
    2e0a:	6010      	str	r0, [r2, #0]
	display_blanking_off(display_dev);
	LOG_DBG("Display init: Done");
}
    2e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2e10:	4718      	bx	r3
    2e12:	bf00      	nop
    2e14:	00028797 	.word	0x00028797
    2e18:	20001598 	.word	0x20001598

00002e1c <display_wake_up>:
				     NULL);
}

void display_wake_up(void)
{
	(void)device_set_power_state(display_dev, DEVICE_PM_ACTIVE_STATE, NULL,
    2e1c:	4b02      	ldr	r3, [pc, #8]	; (2e28 <display_wake_up+0xc>)
    2e1e:	2101      	movs	r1, #1
    2e20:	6818      	ldr	r0, [r3, #0]
    2e22:	f01a be3d 	b.w	1daa0 <device_set_power_state.constprop.0>
    2e26:	bf00      	nop
    2e28:	20001598 	.word	0x20001598

00002e2c <button_pressed_isr>:
	uint32_t res = gpio_pin_get(charging_dev, BAT_CHA);
	battery_update_charging_status(res != 1U);
}

void button_pressed_isr(struct device *gpiobtn, struct gpio_callback *cb, uint32_t pins)
{
    2e2c:	b507      	push	{r0, r1, r2, lr}
	display_wake_up();
    2e2e:	f7ff fff5 	bl	2e1c <display_wake_up>
	z_impl_k_timer_start(timer, duration, period);
    2e32:	2200      	movs	r2, #0
    2e34:	2300      	movs	r3, #0
    2e36:	e9cd 2300 	strd	r2, r3, [sp]
    2e3a:	4805      	ldr	r0, [pc, #20]	; (2e50 <button_pressed_isr+0x24>)
    2e3c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    2e40:	2300      	movs	r3, #0
    2e42:	f018 fbbf 	bl	1b5c4 <z_impl_k_timer_start>
	//backlight_enable(true);
	k_timer_start(&display_off_timer, DISPLAY_TIMEOUT, K_NO_WAIT);

	gui_handle_button_event();
}
    2e46:	b003      	add	sp, #12
    2e48:	f85d eb04 	ldr.w	lr, [sp], #4
	gui_handle_button_event();
    2e4c:	f01a be7f 	b.w	1db4e <gui_handle_button_event>
    2e50:	20000ee8 	.word	0x20000ee8

00002e54 <battery_charging_isr>:
{
    2e54:	b507      	push	{r0, r1, r2, lr}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
    2e56:	4b08      	ldr	r3, [pc, #32]	; (2e78 <battery_charging_isr+0x24>)
    2e58:	a901      	add	r1, sp, #4
    2e5a:	6818      	ldr	r0, [r3, #0]
    2e5c:	f01a fe62 	bl	1db24 <gpio_port_get>
	if (ret == 0) {
    2e60:	b910      	cbnz	r0, 2e68 <battery_charging_isr+0x14>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    2e62:	9801      	ldr	r0, [sp, #4]
    2e64:	f3c0 3000 	ubfx	r0, r0, #12, #1
	battery_update_charging_status(res != 1U);
    2e68:	3801      	subs	r0, #1
    2e6a:	bf18      	it	ne
    2e6c:	2001      	movne	r0, #1
    2e6e:	f7ff fdfb 	bl	2a68 <battery_update_charging_status>
}
    2e72:	b003      	add	sp, #12
    2e74:	f85d fb04 	ldr.w	pc, [sp], #4
    2e78:	200015b8 	.word	0x200015b8

00002e7c <event_handler_init>:
{
    2e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e7e:	4c15      	ldr	r4, [pc, #84]	; (2ed4 <event_handler_init+0x58>)
	charging_dev = device_get_binding("GPIO_0");
    2e80:	4f15      	ldr	r7, [pc, #84]	; (2ed8 <event_handler_init+0x5c>)
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    2e82:	4d16      	ldr	r5, [pc, #88]	; (2edc <event_handler_init+0x60>)
    2e84:	4620      	mov	r0, r4
    2e86:	f017 fa35 	bl	1a2f4 <z_impl_device_get_binding>
	gpio_pin_configure(charging_dev, BAT_CHA, GPIO_INPUT | GPIO_INT_EDGE_BOTH);
    2e8a:	4a15      	ldr	r2, [pc, #84]	; (2ee0 <event_handler_init+0x64>)
	charging_dev = device_get_binding("GPIO_0");
    2e8c:	6038      	str	r0, [r7, #0]
	gpio_pin_configure(charging_dev, BAT_CHA, GPIO_INPUT | GPIO_INT_EDGE_BOTH);
    2e8e:	210c      	movs	r1, #12
    2e90:	f01a fe20 	bl	1dad4 <gpio_pin_configure>
    2e94:	4b13      	ldr	r3, [pc, #76]	; (2ee4 <event_handler_init+0x68>)
    2e96:	606b      	str	r3, [r5, #4]
	callback->pin_mask = pin_mask;
    2e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2e9c:	60ab      	str	r3, [r5, #8]
    2e9e:	4620      	mov	r0, r4
    2ea0:	f017 fa28 	bl	1a2f4 <z_impl_device_get_binding>
	button_dev = device_get_binding(BTN_PORT);
    2ea4:	4e10      	ldr	r6, [pc, #64]	; (2ee8 <event_handler_init+0x6c>)
	gpio_pin_configure(button_dev, BTN_IN, GPIO_INPUT | GPIO_INT_EDGE_FALLING | PULL_UP);
    2ea6:	4a11      	ldr	r2, [pc, #68]	; (2eec <event_handler_init+0x70>)
	callback->handler = handler;
    2ea8:	4c11      	ldr	r4, [pc, #68]	; (2ef0 <event_handler_init+0x74>)
	button_dev = device_get_binding(BTN_PORT);
    2eaa:	6030      	str	r0, [r6, #0]
	gpio_pin_configure(button_dev, BTN_IN, GPIO_INPUT | GPIO_INT_EDGE_FALLING | PULL_UP);
    2eac:	211e      	movs	r1, #30
    2eae:	f01a fe11 	bl	1dad4 <gpio_pin_configure>
    2eb2:	4b10      	ldr	r3, [pc, #64]	; (2ef4 <event_handler_init+0x78>)
    2eb4:	6063      	str	r3, [r4, #4]
	gpio_add_callback(charging_dev, &charging_cb);
    2eb6:	4629      	mov	r1, r5
	callback->pin_mask = pin_mask;
    2eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ebc:	6838      	ldr	r0, [r7, #0]
    2ebe:	60a3      	str	r3, [r4, #8]
    2ec0:	f01a fe00 	bl	1dac4 <gpio_add_callback>
	gpio_add_callback(button_dev, &button_cb);
    2ec4:	6830      	ldr	r0, [r6, #0]
    2ec6:	4621      	mov	r1, r4
    2ec8:	f01a fdfc 	bl	1dac4 <gpio_add_callback>
 */
static inline int sensor_trigger_set(const struct device *dev,
				     struct sensor_trigger *trig,
				     sensor_trigger_handler_t handler)
{
	const struct sensor_driver_api *api =
    2ecc:	2300      	movs	r3, #0
    2ece:	689b      	ldr	r3, [r3, #8]
    2ed0:	deff      	udf	#255	; 0xff
    2ed2:	bf00      	nop
    2ed4:	0002879f 	.word	0x0002879f
    2ed8:	200015b8 	.word	0x200015b8
    2edc:	200015ac 	.word	0x200015ac
    2ee0:	00074100 	.word	0x00074100
    2ee4:	00002e55 	.word	0x00002e55
    2ee8:	200015a8 	.word	0x200015a8
    2eec:	00034111 	.word	0x00034111
    2ef0:	2000159c 	.word	0x2000159c
    2ef4:	00002e2d 	.word	0x00002e2d

00002ef8 <gfx_init>:
//static lv_style_t style_time;
//static lv_style_t style_date;

/* ********** Functions ********** */
void gfx_init(void)
{
    2ef8:	b513      	push	{r0, r1, r4, lr}
//	style.text.color = LV_COLOR_WHITE;
//	style.text.font = &lv_font_roboto_22;
//	lv_obj_set_style(lv_scr_act(), &style);

	/* Battery label */
	battery_label = lv_label_create(lv_scr_act(), NULL);
    2efa:	f01a fe1f 	bl	1db3c <lv_scr_act>
    2efe:	2100      	movs	r1, #0
    2f00:	f017 f890 	bl	1a024 <lv_label_create>
    2f04:	4b29      	ldr	r3, [pc, #164]	; (2fac <gfx_init+0xb4>)
//	lv_label_set_style(battery_label, LV_LABEL_STYLE_MAIN, &style);
	lv_label_set_text(battery_label, "");
    2f06:	492a      	ldr	r1, [pc, #168]	; (2fb0 <gfx_init+0xb8>)
	battery_label = lv_label_create(lv_scr_act(), NULL);
    2f08:	6018      	str	r0, [r3, #0]
	lv_label_set_text(battery_label, "");
    2f0a:	f022 ffd1 	bl	25eb0 <lv_label_set_text>

	/* Bluetooth label */
	bt_label = lv_label_create(lv_scr_act(), NULL);
    2f0e:	f01a fe15 	bl	1db3c <lv_scr_act>
    2f12:	2100      	movs	r1, #0
    2f14:	f017 f886 	bl	1a024 <lv_label_create>
    2f18:	4c26      	ldr	r4, [pc, #152]	; (2fb4 <gfx_init+0xbc>)
	lv_obj_align(bt_label, NULL, LV_ALIGN_IN_TOP_LEFT, 6, 4);
    2f1a:	2304      	movs	r3, #4
    2f1c:	2201      	movs	r2, #1
	bt_label = lv_label_create(lv_scr_act(), NULL);
    2f1e:	6020      	str	r0, [r4, #0]
	lv_obj_align(bt_label, NULL, LV_ALIGN_IN_TOP_LEFT, 6, 4);
    2f20:	2100      	movs	r1, #0
    2f22:	9300      	str	r3, [sp, #0]
    2f24:	2306      	movs	r3, #6
    2f26:	f01e faac 	bl	21482 <lv_obj_align>
//	lv_label_set_style(bt_label, LV_LABEL_STYLE_MAIN, &style);
	lv_label_set_text(bt_label, LV_SYMBOL_WIFI);
    2f2a:	4923      	ldr	r1, [pc, #140]	; (2fb8 <gfx_init+0xc0>)
    2f2c:	6820      	ldr	r0, [r4, #0]
//	style_time.text.font = &rubik_regular_68;

//	style_time.text.color = LV_COLOR_WHITE;
//	style_time.text.color = LV_COLOR_WHITE;
//	lv_obj_set_style(lv_scr_act(), &style_time);
	time_label = lv_label_create(lv_scr_act(), NULL);
    2f2e:	4c23      	ldr	r4, [pc, #140]	; (2fbc <gfx_init+0xc4>)
	lv_label_set_text(bt_label, LV_SYMBOL_WIFI);
    2f30:	f022 ffbe 	bl	25eb0 <lv_label_set_text>
	time_label = lv_label_create(lv_scr_act(), NULL);
    2f34:	f01a fe02 	bl	1db3c <lv_scr_act>
    2f38:	2100      	movs	r1, #0
    2f3a:	f017 f873 	bl	1a024 <lv_label_create>
//	lv_label_set_style(time_label, LV_LABEL_STYLE_MAIN, &style_time);
	lv_label_set_text(time_label, "00:00");
    2f3e:	4920      	ldr	r1, [pc, #128]	; (2fc0 <gfx_init+0xc8>)
	time_label = lv_label_create(lv_scr_act(), NULL);
    2f40:	6020      	str	r0, [r4, #0]
	lv_label_set_text(time_label, "00:00");
    2f42:	f022 ffb5 	bl	25eb0 <lv_label_set_text>
	lv_obj_align(time_label, NULL, LV_ALIGN_CENTER, 0, -25);
    2f46:	f06f 0318 	mvn.w	r3, #24
    2f4a:	9300      	str	r3, [sp, #0]
    2f4c:	2300      	movs	r3, #0
    2f4e:	461a      	mov	r2, r3
    2f50:	4619      	mov	r1, r3
    2f52:	6820      	ldr	r0, [r4, #0]

	info_label = lv_label_create(lv_scr_act(), NULL);
    2f54:	4c1b      	ldr	r4, [pc, #108]	; (2fc4 <gfx_init+0xcc>)
	lv_obj_align(time_label, NULL, LV_ALIGN_CENTER, 0, -25);
    2f56:	f01e fa94 	bl	21482 <lv_obj_align>
	info_label = lv_label_create(lv_scr_act(), NULL);
    2f5a:	f01a fdef 	bl	1db3c <lv_scr_act>
    2f5e:	2100      	movs	r1, #0
    2f60:	f017 f860 	bl	1a024 <lv_label_create>
    2f64:	6020      	str	r0, [r4, #0]
//	lv_label_set_style(info_label, LV_LABEL_STYLE_MAIN, &style);
	if (strlen(FW_VERSION) < 10) {
    2f66:	4818      	ldr	r0, [pc, #96]	; (2fc8 <gfx_init+0xd0>)
    2f68:	f7fd fa90 	bl	48c <strlen>
    2f6c:	2809      	cmp	r0, #9
		lv_label_set_text(info_label, "Hypnos " FW_VERSION "\n\n"
    2f6e:	bf94      	ite	ls
    2f70:	4916      	ldrls	r1, [pc, #88]	; (2fcc <gfx_init+0xd4>)
				  "without any warranty." "\n\n"
				  "https://github.com/"   "\n"
				  "endian-albin/"         "\n"
				  "pinetime-hypnos");
	} else {
		lv_label_set_text(info_label, "Hypnos"    "\n"
    2f72:	4917      	ldrhi	r1, [pc, #92]	; (2fd0 <gfx_init+0xd8>)
    2f74:	6820      	ldr	r0, [r4, #0]
    2f76:	f022 ff9b 	bl	25eb0 <lv_label_set_text>
				  "without any warranty." "\n"
				  "https://github.com/"   "\n"
				  "endian-albin/"         "\n"
				  "pinetime-hypnos");
	}
	lv_obj_set_hidden(info_label, true);
    2f7a:	6820      	ldr	r0, [r4, #0]
//	style_date.body.main_color = LV_COLOR_BLACK;
//	style_date.body.grad_color = LV_COLOR_BLACK;
//	style_date.text.font = &rubik_regular_34;
//	style_date.text.color = LV_COLOR_YELLOW;
//	lv_obj_set_style(lv_scr_act(), &style_date);
	date_label = lv_label_create(lv_scr_act(), NULL);
    2f7c:	4c15      	ldr	r4, [pc, #84]	; (2fd4 <gfx_init+0xdc>)
	lv_obj_set_hidden(info_label, true);
    2f7e:	2101      	movs	r1, #1
    2f80:	f01e faa4 	bl	214cc <lv_obj_set_hidden>
	date_label = lv_label_create(lv_scr_act(), NULL);
    2f84:	f01a fdda 	bl	1db3c <lv_scr_act>
    2f88:	2100      	movs	r1, #0
    2f8a:	f017 f84b 	bl	1a024 <lv_label_create>
//	lv_label_set_style(date_label, LV_LABEL_STYLE_MAIN, &style_date);
	lv_label_set_text(date_label, "Mon 10 Jan");
    2f8e:	4912      	ldr	r1, [pc, #72]	; (2fd8 <gfx_init+0xe0>)
	date_label = lv_label_create(lv_scr_act(), NULL);
    2f90:	6020      	str	r0, [r4, #0]
	lv_label_set_text(date_label, "Mon 10 Jan");
    2f92:	f022 ff8d 	bl	25eb0 <lv_label_set_text>
	lv_obj_align(date_label, NULL, LV_ALIGN_CENTER, 0, 30);
    2f96:	231e      	movs	r3, #30
    2f98:	9300      	str	r3, [sp, #0]
    2f9a:	2300      	movs	r3, #0
    2f9c:	6820      	ldr	r0, [r4, #0]
    2f9e:	461a      	mov	r2, r3
    2fa0:	4619      	mov	r1, r3
    2fa2:	f01e fa6e 	bl	21482 <lv_obj_align>
	LOG_DBG("Graphics init: Done");
}
    2fa6:	b002      	add	sp, #8
    2fa8:	bd10      	pop	{r4, pc}
    2faa:	bf00      	nop
    2fac:	200015bc 	.word	0x200015bc
    2fb0:	00028e22 	.word	0x00028e22
    2fb4:	200015c0 	.word	0x200015c0
    2fb8:	000287a6 	.word	0x000287a6
    2fbc:	200015cc 	.word	0x200015cc
    2fc0:	000287aa 	.word	0x000287aa
    2fc4:	200015c8 	.word	0x200015c8
    2fc8:	00028751 	.word	0x00028751
    2fcc:	000287b0 	.word	0x000287b0
    2fd0:	0002881e 	.word	0x0002881e
    2fd4:	200015c4 	.word	0x200015c4
    2fd8:	0002888b 	.word	0x0002888b

00002fdc <gfx_time_set_label>:
{
	lv_task_handler();
}

void gfx_time_set_label(char *str)
{
    2fdc:	b513      	push	{r0, r1, r4, lr}
	lv_label_set_text(time_label, str);
    2fde:	4c08      	ldr	r4, [pc, #32]	; (3000 <gfx_time_set_label+0x24>)
{
    2fe0:	4601      	mov	r1, r0
	lv_label_set_text(time_label, str);
    2fe2:	6820      	ldr	r0, [r4, #0]
    2fe4:	f022 ff64 	bl	25eb0 <lv_label_set_text>
	lv_obj_align(time_label, NULL, LV_ALIGN_CENTER, 0, -25);
    2fe8:	f06f 0318 	mvn.w	r3, #24
    2fec:	9300      	str	r3, [sp, #0]
    2fee:	2300      	movs	r3, #0
    2ff0:	6820      	ldr	r0, [r4, #0]
    2ff2:	461a      	mov	r2, r3
    2ff4:	4619      	mov	r1, r3
    2ff6:	f01e fa44 	bl	21482 <lv_obj_align>
}
    2ffa:	b002      	add	sp, #8
    2ffc:	bd10      	pop	{r4, pc}
    2ffe:	bf00      	nop
    3000:	200015cc 	.word	0x200015cc

00003004 <gfx_date_set_label>:

void gfx_date_set_label(char *str)
{
    3004:	b513      	push	{r0, r1, r4, lr}
	lv_label_set_text(date_label, str);
    3006:	4c07      	ldr	r4, [pc, #28]	; (3024 <gfx_date_set_label+0x20>)
{
    3008:	4601      	mov	r1, r0
	lv_label_set_text(date_label, str);
    300a:	6820      	ldr	r0, [r4, #0]
    300c:	f022 ff50 	bl	25eb0 <lv_label_set_text>
	lv_obj_align(date_label, NULL, LV_ALIGN_CENTER, 0, 30);
    3010:	231e      	movs	r3, #30
    3012:	9300      	str	r3, [sp, #0]
    3014:	2300      	movs	r3, #0
    3016:	6820      	ldr	r0, [r4, #0]
    3018:	461a      	mov	r2, r3
    301a:	4619      	mov	r1, r3
    301c:	f01e fa31 	bl	21482 <lv_obj_align>
}
    3020:	b002      	add	sp, #8
    3022:	bd10      	pop	{r4, pc}
    3024:	200015c4 	.word	0x200015c4

00003028 <gfx_bt_set_label>:

void gfx_bt_set_label(enum bt_symbol s)
{
	switch (s) {
    3028:	4a06      	ldr	r2, [pc, #24]	; (3044 <gfx_bt_set_label+0x1c>)
{
    302a:	4603      	mov	r3, r0
    302c:	6810      	ldr	r0, [r2, #0]
	switch (s) {
    302e:	b123      	cbz	r3, 303a <gfx_bt_set_label+0x12>
    3030:	2b01      	cmp	r3, #1
    3032:	d104      	bne.n	303e <gfx_bt_set_label+0x16>
	case BT_ADVERTISING_ON:
		lv_label_set_text(bt_label, LV_SYMBOL_WIFI);
    3034:	4904      	ldr	r1, [pc, #16]	; (3048 <gfx_bt_set_label+0x20>)
		break;
	case BT_CONNECTED:
		lv_label_set_text(bt_label, LV_SYMBOL_BLUETOOTH);
		break;
	default:
		lv_label_set_text(bt_label, "");
    3036:	f022 bf3b 	b.w	25eb0 <lv_label_set_text>
		lv_label_set_text(bt_label, LV_SYMBOL_BLUETOOTH);
    303a:	4904      	ldr	r1, [pc, #16]	; (304c <gfx_bt_set_label+0x24>)
    303c:	e7fb      	b.n	3036 <gfx_bt_set_label+0xe>
		lv_label_set_text(bt_label, "");
    303e:	4904      	ldr	r1, [pc, #16]	; (3050 <gfx_bt_set_label+0x28>)
    3040:	e7f9      	b.n	3036 <gfx_bt_set_label+0xe>
    3042:	bf00      	nop
    3044:	200015c0 	.word	0x200015c0
    3048:	000287a6 	.word	0x000287a6
    304c:	00028896 	.word	0x00028896
    3050:	00028e22 	.word	0x00028e22

00003054 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    3054:	680b      	ldr	r3, [r1, #0]
    3056:	3301      	adds	r3, #1
    3058:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    305a:	4b01      	ldr	r3, [pc, #4]	; (3060 <char_out+0xc>)
    305c:	681b      	ldr	r3, [r3, #0]
    305e:	4718      	bx	r3
    3060:	200001f8 	.word	0x200001f8

00003064 <__printk_hook_install>:
	_char_out = fn;
    3064:	4b01      	ldr	r3, [pc, #4]	; (306c <__printk_hook_install+0x8>)
    3066:	6018      	str	r0, [r3, #0]
}
    3068:	4770      	bx	lr
    306a:	bf00      	nop
    306c:	200001f8 	.word	0x200001f8

00003070 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    3070:	b507      	push	{r0, r1, r2, lr}
    3072:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    3074:	2100      	movs	r1, #0
{
    3076:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    3078:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    307a:	4803      	ldr	r0, [pc, #12]	; (3088 <vprintk+0x18>)
    307c:	a901      	add	r1, sp, #4
    307e:	f000 faaf 	bl	35e0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    3082:	b003      	add	sp, #12
    3084:	f85d fb04 	ldr.w	pc, [sp], #4
    3088:	00003055 	.word	0x00003055

0000308c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    308c:	b530      	push	{r4, r5, lr}
    308e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    3090:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3094:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3096:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    3098:	a901      	add	r1, sp, #4
    309a:	4805      	ldr	r0, [pc, #20]	; (30b0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    309c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    309e:	f000 fa9f 	bl	35e0 <cbvprintf>

	if (ctx.count < ctx.max) {
    30a2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    30a6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    30a8:	bfb8      	it	lt
    30aa:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    30ac:	b005      	add	sp, #20
    30ae:	bd30      	pop	{r4, r5, pc}
    30b0:	0001dcc9 	.word	0x0001dcc9

000030b4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    30b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    30b8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    30bc:	f019 0808 	ands.w	r8, r9, #8
{
    30c0:	4604      	mov	r4, r0
    30c2:	4693      	mov	fp, r2
	if (processing) {
    30c4:	d00d      	beq.n	30e2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    30c6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    30c8:	bf0c      	ite	eq
    30ca:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    30ce:	f049 0920 	orrne.w	r9, r9, #32
    30d2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    30d6:	f38b 8811 	msr	BASEPRI, fp
    30da:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    30de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    30e2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    30e6:	2902      	cmp	r1, #2
    30e8:	d107      	bne.n	30fa <process_event+0x46>
			evt = process_recheck(mgr);
    30ea:	4620      	mov	r0, r4
    30ec:	f01a fe19 	bl	1dd22 <process_recheck>
		if (evt == EVT_NOP) {
    30f0:	2800      	cmp	r0, #0
    30f2:	d0f0      	beq.n	30d6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    30f4:	2801      	cmp	r0, #1
    30f6:	8b23      	ldrh	r3, [r4, #24]
    30f8:	d150      	bne.n	319c <process_event+0xe8>
			res = mgr->last_res;
    30fa:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    30fc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    30fe:	2f00      	cmp	r7, #0
    3100:	da15      	bge.n	312e <process_event+0x7a>
		*clients = mgr->clients;
    3102:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3104:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    3108:	e9c4 8800 	strd	r8, r8, [r4]
    310c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3110:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    3112:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3114:	8b21      	ldrh	r1, [r4, #24]
    3116:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    311a:	45ca      	cmp	sl, r9
    311c:	d002      	beq.n	3124 <process_event+0x70>
		if (do_monitors
    311e:	68a3      	ldr	r3, [r4, #8]
    3120:	2b00      	cmp	r3, #0
    3122:	d15c      	bne.n	31de <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    3124:	b90d      	cbnz	r5, 312a <process_event+0x76>
		    || (transit != NULL)) {
    3126:	2e00      	cmp	r6, #0
    3128:	d074      	beq.n	3214 <process_event+0x160>
    312a:	2300      	movs	r3, #0
    312c:	e058      	b.n	31e0 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    312e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    3132:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3134:	2a01      	cmp	r2, #1
    3136:	d820      	bhi.n	317a <process_event+0xc6>
		*clients = mgr->clients;
    3138:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    313c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    313e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    3140:	b289      	uxth	r1, r1
	list->tail = NULL;
    3142:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    3146:	d10c      	bne.n	3162 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3148:	2d00      	cmp	r5, #0
    314a:	462b      	mov	r3, r5
    314c:	bf38      	it	cc
    314e:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3150:	b12b      	cbz	r3, 315e <process_event+0xaa>
				mgr->refs += 1U;
    3152:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3154:	681b      	ldr	r3, [r3, #0]
    3156:	3201      	adds	r2, #1
    3158:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    315a:	2b00      	cmp	r3, #0
    315c:	d1f8      	bne.n	3150 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    315e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    3162:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3164:	4620      	mov	r0, r4
    3166:	f01a fddc 	bl	1dd22 <process_recheck>
    316a:	4606      	mov	r6, r0
    316c:	2800      	cmp	r0, #0
    316e:	d0d1      	beq.n	3114 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3170:	8b23      	ldrh	r3, [r4, #24]
    3172:	f043 0320 	orr.w	r3, r3, #32
    3176:	8323      	strh	r3, [r4, #24]
    3178:	e7cb      	b.n	3112 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    317a:	2b04      	cmp	r3, #4
    317c:	d10c      	bne.n	3198 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    317e:	f021 0107 	bic.w	r1, r1, #7
    3182:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3184:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3186:	4620      	mov	r0, r4
    3188:	f01a fdcb 	bl	1dd22 <process_recheck>
    318c:	4605      	mov	r5, r0
    318e:	2800      	cmp	r0, #0
    3190:	d0bf      	beq.n	3112 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3192:	f041 0120 	orr.w	r1, r1, #32
    3196:	8321      	strh	r1, [r4, #24]
    3198:	2500      	movs	r5, #0
    319a:	e7ba      	b.n	3112 <process_event+0x5e>
		} else if (evt == EVT_START) {
    319c:	2803      	cmp	r0, #3
    319e:	d109      	bne.n	31b4 <process_event+0x100>
			transit = mgr->transitions->start;
    31a0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31a2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    31a6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31a8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    31ac:	8323      	strh	r3, [r4, #24]
}
    31ae:	2500      	movs	r5, #0
		res = 0;
    31b0:	462f      	mov	r7, r5
    31b2:	e7af      	b.n	3114 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    31b4:	2804      	cmp	r0, #4
    31b6:	d106      	bne.n	31c6 <process_event+0x112>
			transit = mgr->transitions->stop;
    31b8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31ba:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    31be:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31c0:	f043 0304 	orr.w	r3, r3, #4
    31c4:	e7f2      	b.n	31ac <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    31c6:	2805      	cmp	r0, #5
    31c8:	d106      	bne.n	31d8 <process_event+0x124>
			transit = mgr->transitions->reset;
    31ca:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31cc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    31d0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31d2:	f043 0305 	orr.w	r3, r3, #5
    31d6:	e7e9      	b.n	31ac <process_event+0xf8>
    31d8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    31da:	462e      	mov	r6, r5
    31dc:	e7e8      	b.n	31b0 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    31de:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    31e0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    31e4:	8321      	strh	r1, [r4, #24]
    31e6:	f38b 8811 	msr	BASEPRI, fp
    31ea:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    31ee:	bb03      	cbnz	r3, 3232 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    31f0:	2d00      	cmp	r5, #0
    31f2:	d133      	bne.n	325c <process_event+0x1a8>
			if (transit != NULL) {
    31f4:	b116      	cbz	r6, 31fc <process_event+0x148>
				transit(mgr, transition_complete);
    31f6:	4921      	ldr	r1, [pc, #132]	; (327c <process_event+0x1c8>)
    31f8:	4620      	mov	r0, r4
    31fa:	47b0      	blx	r6
	__asm__ volatile(
    31fc:	f04f 0320 	mov.w	r3, #32
    3200:	f3ef 8b11 	mrs	fp, BASEPRI
    3204:	f383 8811 	msr	BASEPRI, r3
    3208:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    320c:	8b23      	ldrh	r3, [r4, #24]
    320e:	f023 0308 	bic.w	r3, r3, #8
    3212:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3214:	8b23      	ldrh	r3, [r4, #24]
    3216:	06da      	lsls	r2, r3, #27
    3218:	d528      	bpl.n	326c <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    321a:	f023 0310 	bic.w	r3, r3, #16
    321e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    3220:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3222:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    3226:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    322a:	2900      	cmp	r1, #0
    322c:	f47f af5b 	bne.w	30e6 <process_event+0x32>
out:
    3230:	e751      	b.n	30d6 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3232:	68a1      	ldr	r1, [r4, #8]
    3234:	2900      	cmp	r1, #0
    3236:	d0db      	beq.n	31f0 <process_event+0x13c>
	return node->next;
    3238:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    323a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    323e:	2b00      	cmp	r3, #0
    3240:	bf38      	it	cc
    3242:	2300      	movcc	r3, #0
    3244:	4699      	mov	r9, r3
    3246:	4652      	mov	r2, sl
    3248:	463b      	mov	r3, r7
    324a:	4620      	mov	r0, r4
    324c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    324e:	f1b9 0f00 	cmp.w	r9, #0
    3252:	d0cd      	beq.n	31f0 <process_event+0x13c>
    3254:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3258:	4649      	mov	r1, r9
    325a:	e7ee      	b.n	323a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    325c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    325e:	463b      	mov	r3, r7
    3260:	4652      	mov	r2, sl
    3262:	4620      	mov	r0, r4
    3264:	682d      	ldr	r5, [r5, #0]
    3266:	f01a fd78 	bl	1dd5a <notify_one>
    326a:	e7c1      	b.n	31f0 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    326c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3270:	bf1e      	ittt	ne
    3272:	f023 0320 	bicne.w	r3, r3, #32
    3276:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    3278:	2102      	movne	r1, #2
    327a:	e7d2      	b.n	3222 <process_event+0x16e>
    327c:	0001dd87 	.word	0x0001dd87

00003280 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    3280:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    3282:	4e09      	ldr	r6, [pc, #36]	; (32a8 <extract_decimal+0x28>)
    3284:	6801      	ldr	r1, [r0, #0]
{
    3286:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    3288:	270a      	movs	r7, #10
	size_t val = 0;
    328a:	2000      	movs	r0, #0
    328c:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    328e:	3101      	adds	r1, #1
    3290:	7823      	ldrb	r3, [r4, #0]
    3292:	5d9d      	ldrb	r5, [r3, r6]
    3294:	076d      	lsls	r5, r5, #29
    3296:	d401      	bmi.n	329c <extract_decimal+0x1c>
	}
	*str = sp;
    3298:	6014      	str	r4, [r2, #0]
	return val;
}
    329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    329c:	fb07 3300 	mla	r3, r7, r0, r3
    32a0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    32a4:	e7f2      	b.n	328c <extract_decimal+0xc>
    32a6:	bf00      	nop
    32a8:	00028e3c 	.word	0x00028e3c

000032ac <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    32ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	*conv = (struct conversion) {
    32ae:	2300      	movs	r3, #0
    32b0:	e9c0 3300 	strd	r3, r3, [r0]
    32b4:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    32b6:	784b      	ldrb	r3, [r1, #1]
    32b8:	2b25      	cmp	r3, #37	; 0x25
{
    32ba:	4604      	mov	r4, r0
	if (*sp == '%') {
    32bc:	d03d      	beq.n	333a <extract_conversion+0x8e>
	++sp;
    32be:	3101      	adds	r1, #1
    32c0:	460d      	mov	r5, r1
		switch (*sp) {
    32c2:	f811 3b01 	ldrb.w	r3, [r1], #1
    32c6:	2b2b      	cmp	r3, #43	; 0x2b
    32c8:	d048      	beq.n	335c <extract_conversion+0xb0>
    32ca:	d83a      	bhi.n	3342 <extract_conversion+0x96>
    32cc:	2b20      	cmp	r3, #32
    32ce:	d049      	beq.n	3364 <extract_conversion+0xb8>
    32d0:	2b23      	cmp	r3, #35	; 0x23
    32d2:	d04b      	beq.n	336c <extract_conversion+0xc0>
	if (conv->flag_zero && conv->flag_dash) {
    32d4:	7823      	ldrb	r3, [r4, #0]
    32d6:	f003 0244 	and.w	r2, r3, #68	; 0x44
    32da:	2a44      	cmp	r2, #68	; 0x44
    32dc:	d102      	bne.n	32e4 <extract_conversion+0x38>
		conv->flag_zero = false;
    32de:	f36f 1386 	bfc	r3, #6, #1
    32e2:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    32e4:	782b      	ldrb	r3, [r5, #0]
    32e6:	9501      	str	r5, [sp, #4]
    32e8:	2b2a      	cmp	r3, #42	; 0x2a
    32ea:	d143      	bne.n	3374 <extract_conversion+0xc8>
		conv->width_present = true;
    32ec:	8823      	ldrh	r3, [r4, #0]
    32ee:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
    32f2:	8023      	strh	r3, [r4, #0]
		return ++sp;
    32f4:	1c6b      	adds	r3, r5, #1
		return sp;
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
	sp = extract_prec(conv, sp);
    32f6:	9301      	str	r3, [sp, #4]
	if (*sp != '.') {
    32f8:	781a      	ldrb	r2, [r3, #0]
    32fa:	2a2e      	cmp	r2, #46	; 0x2e
    32fc:	d10b      	bne.n	3316 <extract_conversion+0x6a>
    32fe:	1c5d      	adds	r5, r3, #1
	++sp;
    3300:	9501      	str	r5, [sp, #4]
	if (*sp == '*') {
    3302:	785a      	ldrb	r2, [r3, #1]
    3304:	2a2a      	cmp	r2, #42	; 0x2a
    3306:	d141      	bne.n	338c <extract_conversion+0xe0>
		conv->prec_present = true;
    3308:	7862      	ldrb	r2, [r4, #1]
    330a:	f022 0206 	bic.w	r2, r2, #6
    330e:	f042 0206 	orr.w	r2, r2, #6
    3312:	7062      	strb	r2, [r4, #1]
		return ++sp;
    3314:	3302      	adds	r3, #2
	switch (*sp) {
    3316:	4619      	mov	r1, r3
    3318:	f811 0b01 	ldrb.w	r0, [r1], #1
    331c:	286c      	cmp	r0, #108	; 0x6c
    331e:	d06e      	beq.n	33fe <extract_conversion+0x152>
    3320:	d840      	bhi.n	33a4 <extract_conversion+0xf8>
    3322:	2868      	cmp	r0, #104	; 0x68
    3324:	d046      	beq.n	33b4 <extract_conversion+0x108>
    3326:	286a      	cmp	r0, #106	; 0x6a
    3328:	d072      	beq.n	3410 <extract_conversion+0x164>
    332a:	284c      	cmp	r0, #76	; 0x4c
    332c:	d076      	beq.n	341c <extract_conversion+0x170>
		conv->length_mod = LENGTH_NONE;
    332e:	7862      	ldrb	r2, [r4, #1]
    3330:	f36f 02c6 	bfc	r2, #3, #4
    3334:	7062      	strb	r2, [r4, #1]
		break;
    3336:	4619      	mov	r1, r3
    3338:	e045      	b.n	33c6 <extract_conversion+0x11a>
		conv->specifier = *sp++;
    333a:	1c88      	adds	r0, r1, #2
    333c:	70e3      	strb	r3, [r4, #3]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    333e:	b003      	add	sp, #12
    3340:	bd30      	pop	{r4, r5, pc}
		switch (*sp) {
    3342:	2b2d      	cmp	r3, #45	; 0x2d
    3344:	d005      	beq.n	3352 <extract_conversion+0xa6>
    3346:	2b30      	cmp	r3, #48	; 0x30
    3348:	d1c4      	bne.n	32d4 <extract_conversion+0x28>
			conv->flag_zero = true;
    334a:	7823      	ldrb	r3, [r4, #0]
    334c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3350:	e002      	b.n	3358 <extract_conversion+0xac>
			conv->flag_dash = true;
    3352:	7823      	ldrb	r3, [r4, #0]
    3354:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    3358:	7023      	strb	r3, [r4, #0]
			break;
    335a:	e7b1      	b.n	32c0 <extract_conversion+0x14>
			conv->flag_plus = true;
    335c:	7823      	ldrb	r3, [r4, #0]
    335e:	f043 0308 	orr.w	r3, r3, #8
    3362:	e7f9      	b.n	3358 <extract_conversion+0xac>
			conv->flag_space = true;
    3364:	7823      	ldrb	r3, [r4, #0]
    3366:	f043 0310 	orr.w	r3, r3, #16
    336a:	e7f5      	b.n	3358 <extract_conversion+0xac>
			conv->flag_hash = true;
    336c:	7823      	ldrb	r3, [r4, #0]
    336e:	f043 0320 	orr.w	r3, r3, #32
    3372:	e7f1      	b.n	3358 <extract_conversion+0xac>
	size_t width = extract_decimal(&sp);
    3374:	a801      	add	r0, sp, #4
    3376:	f7ff ff83 	bl	3280 <extract_decimal>
	if (sp != wp) {
    337a:	9b01      	ldr	r3, [sp, #4]
    337c:	42ab      	cmp	r3, r5
		conv->width_present = true;
    337e:	bf1f      	itttt	ne
    3380:	7822      	ldrbne	r2, [r4, #0]
		conv->width_value = width;
    3382:	6060      	strne	r0, [r4, #4]
		conv->width_present = true;
    3384:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    3388:	7022      	strbne	r2, [r4, #0]
		if (width != conv->width_value) {
    338a:	e7b4      	b.n	32f6 <extract_conversion+0x4a>
	size_t prec = extract_decimal(&sp);
    338c:	a801      	add	r0, sp, #4
    338e:	f7ff ff77 	bl	3280 <extract_decimal>
	if (sp != wp) {
    3392:	9b01      	ldr	r3, [sp, #4]
    3394:	429d      	cmp	r5, r3
		conv->prec_present = true;
    3396:	bf1f      	itttt	ne
    3398:	7862      	ldrbne	r2, [r4, #1]
		conv->prec_value = prec;
    339a:	60a0      	strne	r0, [r4, #8]
		conv->prec_present = true;
    339c:	f042 0202 	orrne.w	r2, r2, #2
    33a0:	7062      	strbne	r2, [r4, #1]
		if (prec != conv->prec_value) {
    33a2:	e7b8      	b.n	3316 <extract_conversion+0x6a>
	switch (*sp) {
    33a4:	2874      	cmp	r0, #116	; 0x74
    33a6:	7862      	ldrb	r2, [r4, #1]
    33a8:	d035      	beq.n	3416 <extract_conversion+0x16a>
    33aa:	287a      	cmp	r0, #122	; 0x7a
    33ac:	d1bf      	bne.n	332e <extract_conversion+0x82>
		conv->length_mod = LENGTH_Z;
    33ae:	4613      	mov	r3, r2
    33b0:	2206      	movs	r2, #6
    33b2:	e020      	b.n	33f6 <extract_conversion+0x14a>
		if (*++sp == 'h') {
    33b4:	785a      	ldrb	r2, [r3, #1]
    33b6:	2a68      	cmp	r2, #104	; 0x68
    33b8:	7862      	ldrb	r2, [r4, #1]
    33ba:	d11a      	bne.n	33f2 <extract_conversion+0x146>
			conv->length_mod = LENGTH_HH;
    33bc:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    33be:	f361 02c6 	bfi	r2, r1, #3, #4
    33c2:	7062      	strb	r2, [r4, #1]
			++sp;
    33c4:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    33c6:	4608      	mov	r0, r1
    33c8:	f810 2b01 	ldrb.w	r2, [r0], #1
    33cc:	70e2      	strb	r2, [r4, #3]
	switch (conv->specifier) {
    33ce:	2a78      	cmp	r2, #120	; 0x78
    33d0:	f200 80af 	bhi.w	3532 <extract_conversion+0x286>
    33d4:	2a57      	cmp	r2, #87	; 0x57
    33d6:	d82c      	bhi.n	3432 <extract_conversion+0x186>
    33d8:	2a41      	cmp	r2, #65	; 0x41
    33da:	d003      	beq.n	33e4 <extract_conversion+0x138>
    33dc:	3a45      	subs	r2, #69	; 0x45
    33de:	2a02      	cmp	r2, #2
    33e0:	f200 80a7 	bhi.w	3532 <extract_conversion+0x286>
		conv->specifier_cat = SPECIFIER_FP;
    33e4:	78a3      	ldrb	r3, [r4, #2]
    33e6:	2204      	movs	r2, #4
    33e8:	f362 0302 	bfi	r3, r2, #0, #3
    33ec:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    33ee:	2301      	movs	r3, #1
			break;
    33f0:	e07b      	b.n	34ea <extract_conversion+0x23e>
			conv->length_mod = LENGTH_H;
    33f2:	4613      	mov	r3, r2
    33f4:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    33f6:	f362 03c6 	bfi	r3, r2, #3, #4
    33fa:	7063      	strb	r3, [r4, #1]
    33fc:	e7e3      	b.n	33c6 <extract_conversion+0x11a>
		if (*++sp == 'l') {
    33fe:	785a      	ldrb	r2, [r3, #1]
    3400:	2a6c      	cmp	r2, #108	; 0x6c
    3402:	7862      	ldrb	r2, [r4, #1]
    3404:	d101      	bne.n	340a <extract_conversion+0x15e>
			conv->length_mod = LENGTH_LL;
    3406:	2104      	movs	r1, #4
    3408:	e7d9      	b.n	33be <extract_conversion+0x112>
			conv->length_mod = LENGTH_L;
    340a:	4613      	mov	r3, r2
    340c:	2203      	movs	r2, #3
    340e:	e7f2      	b.n	33f6 <extract_conversion+0x14a>
		conv->length_mod = LENGTH_J;
    3410:	7863      	ldrb	r3, [r4, #1]
    3412:	2205      	movs	r2, #5
    3414:	e7ef      	b.n	33f6 <extract_conversion+0x14a>
		conv->length_mod = LENGTH_T;
    3416:	4613      	mov	r3, r2
    3418:	2207      	movs	r2, #7
    341a:	e7ec      	b.n	33f6 <extract_conversion+0x14a>
		conv->unsupported = true;
    341c:	8823      	ldrh	r3, [r4, #0]
    341e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    3422:	f023 0302 	bic.w	r3, r3, #2
    3426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    342a:	f043 0302 	orr.w	r3, r3, #2
    342e:	8023      	strh	r3, [r4, #0]
		break;
    3430:	e7c9      	b.n	33c6 <extract_conversion+0x11a>
    3432:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    3436:	2b20      	cmp	r3, #32
    3438:	d87b      	bhi.n	3532 <extract_conversion+0x286>
    343a:	a101      	add	r1, pc, #4	; (adr r1, 3440 <extract_conversion+0x194>)
    343c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    3440:	000034fb 	.word	0x000034fb
    3444:	00003533 	.word	0x00003533
    3448:	00003533 	.word	0x00003533
    344c:	00003533 	.word	0x00003533
    3450:	00003533 	.word	0x00003533
    3454:	00003533 	.word	0x00003533
    3458:	00003533 	.word	0x00003533
    345c:	00003533 	.word	0x00003533
    3460:	00003533 	.word	0x00003533
    3464:	000033e5 	.word	0x000033e5
    3468:	00003533 	.word	0x00003533
    346c:	000034fb 	.word	0x000034fb
    3470:	000034c5 	.word	0x000034c5
    3474:	000033e5 	.word	0x000033e5
    3478:	000033e5 	.word	0x000033e5
    347c:	000033e5 	.word	0x000033e5
    3480:	00003533 	.word	0x00003533
    3484:	000034c5 	.word	0x000034c5
    3488:	00003533 	.word	0x00003533
    348c:	00003533 	.word	0x00003533
    3490:	00003533 	.word	0x00003533
    3494:	00003533 	.word	0x00003533
    3498:	00003501 	.word	0x00003501
    349c:	000034fb 	.word	0x000034fb
    34a0:	0000351b 	.word	0x0000351b
    34a4:	00003533 	.word	0x00003533
    34a8:	00003533 	.word	0x00003533
    34ac:	0000351b 	.word	0x0000351b
    34b0:	00003533 	.word	0x00003533
    34b4:	000034fb 	.word	0x000034fb
    34b8:	00003533 	.word	0x00003533
    34bc:	00003533 	.word	0x00003533
    34c0:	000034fb 	.word	0x000034fb
		conv->specifier_cat = SPECIFIER_SINT;
    34c4:	78a3      	ldrb	r3, [r4, #2]
    34c6:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    34c8:	f361 0302 	bfi	r3, r1, #0, #3
    34cc:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    34ce:	7863      	ldrb	r3, [r4, #1]
    34d0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    34d4:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    34d6:	bf02      	ittt	eq
    34d8:	7821      	ldrbeq	r1, [r4, #0]
    34da:	f041 0101 	orreq.w	r1, r1, #1
    34de:	7021      	strbeq	r1, [r4, #0]
		if (conv->specifier == 'c') {
    34e0:	2a63      	cmp	r2, #99	; 0x63
    34e2:	d12a      	bne.n	353a <extract_conversion+0x28e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    34e4:	3b00      	subs	r3, #0
    34e6:	bf18      	it	ne
    34e8:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    34ea:	7822      	ldrb	r2, [r4, #0]
    34ec:	f3c2 0140 	ubfx	r1, r2, #1, #1
    34f0:	430b      	orrs	r3, r1
    34f2:	f363 0241 	bfi	r2, r3, #1, #1
    34f6:	7022      	strb	r2, [r4, #0]
	return sp;
    34f8:	e721      	b.n	333e <extract_conversion+0x92>
		conv->specifier_cat = SPECIFIER_UINT;
    34fa:	78a3      	ldrb	r3, [r4, #2]
    34fc:	2102      	movs	r1, #2
    34fe:	e7e3      	b.n	34c8 <extract_conversion+0x21c>
		conv->specifier_cat = SPECIFIER_PTR;
    3500:	78a3      	ldrb	r3, [r4, #2]
    3502:	2203      	movs	r2, #3
    3504:	f362 0302 	bfi	r3, r2, #0, #3
    3508:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    350a:	7863      	ldrb	r3, [r4, #1]
    350c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3510:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    3514:	4253      	negs	r3, r2
    3516:	4153      	adcs	r3, r2
    3518:	e7e7      	b.n	34ea <extract_conversion+0x23e>
		conv->specifier_cat = SPECIFIER_PTR;
    351a:	78a3      	ldrb	r3, [r4, #2]
    351c:	2203      	movs	r2, #3
    351e:	f362 0302 	bfi	r3, r2, #0, #3
    3522:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    3524:	7863      	ldrb	r3, [r4, #1]
    3526:	f013 0f78 	tst.w	r3, #120	; 0x78
    352a:	bf14      	ite	ne
    352c:	2301      	movne	r3, #1
    352e:	2300      	moveq	r3, #0
    3530:	e7db      	b.n	34ea <extract_conversion+0x23e>
		conv->invalid = true;
    3532:	7823      	ldrb	r3, [r4, #0]
    3534:	f043 0301 	orr.w	r3, r3, #1
    3538:	7023      	strb	r3, [r4, #0]
	bool unsupported = false;
    353a:	2300      	movs	r3, #0
    353c:	e7d5      	b.n	34ea <extract_conversion+0x23e>
    353e:	bf00      	nop

00003540 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    3540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3544:	4614      	mov	r4, r2
    3546:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    3548:	78d3      	ldrb	r3, [r2, #3]
    354a:	4a24      	ldr	r2, [pc, #144]	; (35dc <encode_uint+0x9c>)
    354c:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    3550:	2b6f      	cmp	r3, #111	; 0x6f
    3552:	f00a 0203 	and.w	r2, sl, #3
{
    3556:	4606      	mov	r6, r0
    3558:	460f      	mov	r7, r1
    355a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    355c:	d02d      	beq.n	35ba <encode_uint+0x7a>
    355e:	d828      	bhi.n	35b2 <encode_uint+0x72>
		return 16;
    3560:	2b58      	cmp	r3, #88	; 0x58
    3562:	bf14      	ite	ne
    3564:	250a      	movne	r5, #10
    3566:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    3568:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    356c:	46aa      	mov	sl, r5
    356e:	f04f 0b00 	mov.w	fp, #0
    3572:	4652      	mov	r2, sl
    3574:	465b      	mov	r3, fp
    3576:	4630      	mov	r0, r6
    3578:	4639      	mov	r1, r7
    357a:	f7fc fe01 	bl	180 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    357e:	2a09      	cmp	r2, #9
    3580:	b2d3      	uxtb	r3, r2
    3582:	d81f      	bhi.n	35c4 <encode_uint+0x84>
    3584:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    3586:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3588:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    358a:	bf08      	it	eq
    358c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    358e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    3592:	d301      	bcc.n	3598 <encode_uint+0x58>
    3594:	45c8      	cmp	r8, r9
    3596:	d812      	bhi.n	35be <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    3598:	7823      	ldrb	r3, [r4, #0]
    359a:	069b      	lsls	r3, r3, #26
    359c:	d505      	bpl.n	35aa <encode_uint+0x6a>
		if (radix == 8) {
    359e:	2d08      	cmp	r5, #8
    35a0:	d116      	bne.n	35d0 <encode_uint+0x90>
			conv->altform_0 = true;
    35a2:	78a3      	ldrb	r3, [r4, #2]
    35a4:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    35a8:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
    35aa:	4640      	mov	r0, r8
    35ac:	b003      	add	sp, #12
    35ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    35b2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    35b6:	2b70      	cmp	r3, #112	; 0x70
    35b8:	e7d3      	b.n	3562 <encode_uint+0x22>
	switch (specifier) {
    35ba:	2508      	movs	r5, #8
    35bc:	e7d4      	b.n	3568 <encode_uint+0x28>
		value /= radix;
    35be:	4606      	mov	r6, r0
    35c0:	460f      	mov	r7, r1
    35c2:	e7d6      	b.n	3572 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    35c4:	9a01      	ldr	r2, [sp, #4]
    35c6:	2a01      	cmp	r2, #1
    35c8:	bf0c      	ite	eq
    35ca:	3337      	addeq	r3, #55	; 0x37
    35cc:	3357      	addne	r3, #87	; 0x57
    35ce:	e7da      	b.n	3586 <encode_uint+0x46>
		} else if (radix == 16) {
    35d0:	2d10      	cmp	r5, #16
    35d2:	d1ea      	bne.n	35aa <encode_uint+0x6a>
			conv->altform_0c = true;
    35d4:	78a3      	ldrb	r3, [r4, #2]
    35d6:	f043 0310 	orr.w	r3, r3, #16
    35da:	e7e5      	b.n	35a8 <encode_uint+0x68>
    35dc:	00028e3c 	.word	0x00028e3c

000035e0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    35e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35e4:	4682      	mov	sl, r0
    35e6:	b091      	sub	sp, #68	; 0x44
    35e8:	468b      	mov	fp, r1
    35ea:	4691      	mov	r9, r2
    35ec:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    35ee:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    35f0:	f899 0000 	ldrb.w	r0, [r9]
    35f4:	b908      	cbnz	r0, 35fa <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    35f6:	4628      	mov	r0, r5
    35f8:	e10d      	b.n	3816 <cbvprintf+0x236>
		if (*fp != '%') {
    35fa:	2825      	cmp	r0, #37	; 0x25
    35fc:	d009      	beq.n	3612 <cbvprintf+0x32>
			OUTC(*fp++);
    35fe:	4659      	mov	r1, fp
    3600:	47d0      	blx	sl
    3602:	2800      	cmp	r0, #0
    3604:	f2c0 8107 	blt.w	3816 <cbvprintf+0x236>
    3608:	f109 0301 	add.w	r3, r9, #1
    360c:	9302      	str	r3, [sp, #8]
			OUTC('%');
    360e:	3501      	adds	r5, #1
			break;
    3610:	e05e      	b.n	36d0 <cbvprintf+0xf0>
		} state = {
    3612:	2218      	movs	r2, #24
    3614:	2100      	movs	r1, #0
    3616:	a80a      	add	r0, sp, #40	; 0x28
    3618:	f023 fa38 	bl	26a8c <memset>
		fp = extract_conversion(conv, sp);
    361c:	4649      	mov	r1, r9
    361e:	a80c      	add	r0, sp, #48	; 0x30
    3620:	f7ff fe44 	bl	32ac <extract_conversion>
		if (conv->width_star) {
    3624:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
		fp = extract_conversion(conv, sp);
    3628:	9002      	str	r0, [sp, #8]
		if (conv->width_star) {
    362a:	07d9      	lsls	r1, r3, #31
    362c:	d51b      	bpl.n	3666 <cbvprintf+0x86>
			width = va_arg(ap, int);
    362e:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    3632:	f1b8 0f00 	cmp.w	r8, #0
    3636:	da07      	bge.n	3648 <cbvprintf+0x68>
				conv->flag_dash = true;
    3638:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    363c:	f042 0204 	orr.w	r2, r2, #4
    3640:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    3644:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    3648:	075a      	lsls	r2, r3, #29
    364a:	d515      	bpl.n	3678 <cbvprintf+0x98>
			int arg = va_arg(ap, int);
    364c:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    3650:	2f00      	cmp	r7, #0
    3652:	da14      	bge.n	367e <cbvprintf+0x9e>
				conv->prec_present = false;
    3654:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3658:	f36f 0341 	bfc	r3, #1, #1
    365c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    3660:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    3664:	e00b      	b.n	367e <cbvprintf+0x9e>
		} else if (conv->width_present) {
    3666:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    366a:	2a00      	cmp	r2, #0
			width = conv->width_value;
    366c:	bfb4      	ite	lt
    366e:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
		int width = -1;
    3672:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    3676:	e7e7      	b.n	3648 <cbvprintf+0x68>
		} else if (conv->prec_present) {
    3678:	079f      	lsls	r7, r3, #30
    367a:	d5f1      	bpl.n	3660 <cbvprintf+0x80>
			precision = conv->prec_value;
    367c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    367e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    3682:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    3684:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    3688:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    368c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    3690:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3692:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    3696:	d12e      	bne.n	36f6 <cbvprintf+0x116>
			switch (length_mod) {
    3698:	1ecb      	subs	r3, r1, #3
    369a:	2b04      	cmp	r3, #4
    369c:	d81b      	bhi.n	36d6 <cbvprintf+0xf6>
    369e:	e8df f003 	tbb	[pc, r3]
    36a2:	3a03      	.short	0x3a03
    36a4:	1a3a      	.short	0x1a3a
    36a6:	1a          	.byte	0x1a
    36a7:	00          	.byte	0x00
				value->sint = va_arg(ap, long);
    36a8:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    36ac:	17d3      	asrs	r3, r2, #31
				value->uint =
    36ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    36b2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    36b6:	f013 0603 	ands.w	r6, r3, #3
    36ba:	d04f      	beq.n	375c <cbvprintf+0x17c>
			OUTS(sp, fp);
    36bc:	9b02      	ldr	r3, [sp, #8]
    36be:	464a      	mov	r2, r9
    36c0:	4659      	mov	r1, fp
    36c2:	4650      	mov	r0, sl
    36c4:	f01a fe6b 	bl	1e39e <outs>
    36c8:	2800      	cmp	r0, #0
    36ca:	f2c0 80a4 	blt.w	3816 <cbvprintf+0x236>
    36ce:	4405      	add	r5, r0
			OUTS(bps, bpe);
    36d0:	f8dd 9008 	ldr.w	r9, [sp, #8]
    36d4:	e78c      	b.n	35f0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    36d6:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    36da:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    36dc:	ea4f 73e2 	mov.w	r3, r2, asr #31
    36e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    36e4:	d102      	bne.n	36ec <cbvprintf+0x10c>
				value->uint = (unsigned char)value->uint;
    36e6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    36ea:	e010      	b.n	370e <cbvprintf+0x12e>
			} else if (length_mod == LENGTH_H) {
    36ec:	2902      	cmp	r1, #2
    36ee:	d1e0      	bne.n	36b2 <cbvprintf+0xd2>
				value->sint = (short)value->sint;
    36f0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
    36f4:	e7da      	b.n	36ac <cbvprintf+0xcc>
		} else if (specifier_cat == SPECIFIER_UINT) {
    36f6:	2b02      	cmp	r3, #2
    36f8:	d120      	bne.n	373c <cbvprintf+0x15c>
			switch (length_mod) {
    36fa:	1ecb      	subs	r3, r1, #3
    36fc:	2b04      	cmp	r3, #4
    36fe:	d810      	bhi.n	3722 <cbvprintf+0x142>
    3700:	e8df f003 	tbb	[pc, r3]
    3704:	0f090903 	.word	0x0f090903
    3708:	0f          	.byte	0x0f
    3709:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned long);
    370a:	f854 3b04 	ldr.w	r3, [r4], #4
				value->uint = (unsigned char)value->uint;
    370e:	930a      	str	r3, [sp, #40]	; 0x28
    3710:	2300      	movs	r3, #0
    3712:	930b      	str	r3, [sp, #44]	; 0x2c
    3714:	e7cd      	b.n	36b2 <cbvprintf+0xd2>
					(uint_value_type)va_arg(ap,
    3716:	3407      	adds	r4, #7
    3718:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    371c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    3720:	e7c5      	b.n	36ae <cbvprintf+0xce>
					(uint_value_type)va_arg(ap, size_t);
    3722:	f854 3b04 	ldr.w	r3, [r4], #4
    3726:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    3728:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    372a:	f04f 0300 	mov.w	r3, #0
    372e:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    3730:	d0d9      	beq.n	36e6 <cbvprintf+0x106>
			} else if (length_mod == LENGTH_H) {
    3732:	2902      	cmp	r1, #2
    3734:	d1bd      	bne.n	36b2 <cbvprintf+0xd2>
				value->uint = (unsigned short)value->uint;
    3736:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    373a:	e7e8      	b.n	370e <cbvprintf+0x12e>
		} else if (specifier_cat == SPECIFIER_FP) {
    373c:	2b04      	cmp	r3, #4
    373e:	d107      	bne.n	3750 <cbvprintf+0x170>
			if (length_mod == LENGTH_UPPER_L) {
    3740:	3407      	adds	r4, #7
    3742:	f024 0407 	bic.w	r4, r4, #7
    3746:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    374a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    374e:	e7b0      	b.n	36b2 <cbvprintf+0xd2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    3750:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    3752:	bf04      	itt	eq
    3754:	f854 3b04 	ldreq.w	r3, [r4], #4
    3758:	930a      	streq	r3, [sp, #40]	; 0x28
    375a:	e7aa      	b.n	36b2 <cbvprintf+0xd2>
		switch (conv->specifier) {
    375c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    3760:	2878      	cmp	r0, #120	; 0x78
    3762:	d8b5      	bhi.n	36d0 <cbvprintf+0xf0>
    3764:	2862      	cmp	r0, #98	; 0x62
    3766:	d81f      	bhi.n	37a8 <cbvprintf+0x1c8>
    3768:	2825      	cmp	r0, #37	; 0x25
    376a:	d04f      	beq.n	380c <cbvprintf+0x22c>
    376c:	2858      	cmp	r0, #88	; 0x58
    376e:	d1af      	bne.n	36d0 <cbvprintf+0xf0>
			bps = encode_uint(value->uint, conv, buf, bpe);
    3770:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    3774:	9300      	str	r3, [sp, #0]
    3776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    377a:	ab04      	add	r3, sp, #16
    377c:	aa0c      	add	r2, sp, #48	; 0x30
    377e:	f7ff fedf 	bl	3540 <encode_uint>
    3782:	4681      	mov	r9, r0
			if (precision >= 0) {
    3784:	2f00      	cmp	r7, #0
    3786:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    378a:	db0b      	blt.n	37a4 <cbvprintf+0x1c4>
				conv->flag_zero = false;
    378c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    3790:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    3794:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    3798:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    379a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    379e:	d901      	bls.n	37a4 <cbvprintf+0x1c4>
					conv->pad0_value = precision - (int)len;
    37a0:	1aff      	subs	r7, r7, r3
    37a2:	970d      	str	r7, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    37a4:	4607      	mov	r7, r0
    37a6:	e046      	b.n	3836 <cbvprintf+0x256>
    37a8:	3863      	subs	r0, #99	; 0x63
    37aa:	2815      	cmp	r0, #21
    37ac:	d890      	bhi.n	36d0 <cbvprintf+0xf0>
    37ae:	a201      	add	r2, pc, #4	; (adr r2, 37b4 <cbvprintf+0x1d4>)
    37b0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    37b4:	0000383f 	.word	0x0000383f
    37b8:	000038a3 	.word	0x000038a3
    37bc:	000036d1 	.word	0x000036d1
    37c0:	000036d1 	.word	0x000036d1
    37c4:	000036d1 	.word	0x000036d1
    37c8:	000036d1 	.word	0x000036d1
    37cc:	000038a3 	.word	0x000038a3
    37d0:	000036d1 	.word	0x000036d1
    37d4:	000036d1 	.word	0x000036d1
    37d8:	000036d1 	.word	0x000036d1
    37dc:	000036d1 	.word	0x000036d1
    37e0:	00003901 	.word	0x00003901
    37e4:	000038cf 	.word	0x000038cf
    37e8:	000038d3 	.word	0x000038d3
    37ec:	000036d1 	.word	0x000036d1
    37f0:	000036d1 	.word	0x000036d1
    37f4:	0000381d 	.word	0x0000381d
    37f8:	000036d1 	.word	0x000036d1
    37fc:	000038cf 	.word	0x000038cf
    3800:	000036d1 	.word	0x000036d1
    3804:	000036d1 	.word	0x000036d1
    3808:	000038cf 	.word	0x000038cf
			OUTC('%');
    380c:	4659      	mov	r1, fp
    380e:	47d0      	blx	sl
    3810:	2800      	cmp	r0, #0
    3812:	f6bf aefc 	bge.w	360e <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
    3816:	b011      	add	sp, #68	; 0x44
    3818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bps = (const char *)value->ptr;
    381c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
			size_t len = strlen(bps);
    3820:	4648      	mov	r0, r9
    3822:	f7fc fe33 	bl	48c <strlen>
			if ((precision >= 0)
    3826:	2f00      	cmp	r7, #0
    3828:	db02      	blt.n	3830 <cbvprintf+0x250>
    382a:	42b8      	cmp	r0, r7
    382c:	bf28      	it	cs
    382e:	4638      	movcs	r0, r7
			bpe = bps + len;
    3830:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    3834:	2600      	movs	r6, #0
		if (bps == NULL) {
    3836:	f1b9 0f00 	cmp.w	r9, #0
    383a:	d108      	bne.n	384e <cbvprintf+0x26e>
    383c:	e748      	b.n	36d0 <cbvprintf+0xf0>
			buf[0] = value->uint;
    383e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3840:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    3844:	2600      	movs	r6, #0
			bpe = buf + 1;
    3846:	f10d 0711 	add.w	r7, sp, #17
			bps = buf;
    384a:	f10d 0910 	add.w	r9, sp, #16
		size_t nj_len = (bpe - bps);
    384e:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    3852:	b106      	cbz	r6, 3856 <cbvprintf+0x276>
			nj_len += 1U;
    3854:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    3856:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    385a:	06d0      	lsls	r0, r2, #27
    385c:	d56a      	bpl.n	3934 <cbvprintf+0x354>
			nj_len += 2U;
    385e:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    3860:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    3862:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    3864:	bf48      	it	mi
    3866:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    3868:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    386a:	bf48      	it	mi
    386c:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    386e:	f1b8 0f00 	cmp.w	r8, #0
    3872:	dd73      	ble.n	395c <cbvprintf+0x37c>
			if (!conv->flag_dash) {
    3874:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    3878:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    387c:	f3c2 0380 	ubfx	r3, r2, #2, #1
    3880:	9303      	str	r3, [sp, #12]
    3882:	0753      	lsls	r3, r2, #29
    3884:	d46a      	bmi.n	395c <cbvprintf+0x37c>
				if (conv->flag_zero) {
    3886:	0650      	lsls	r0, r2, #25
    3888:	f140 80a6 	bpl.w	39d8 <cbvprintf+0x3f8>
					if (sign != 0) {
    388c:	b13e      	cbz	r6, 389e <cbvprintf+0x2be>
						OUTC(sign);
    388e:	4659      	mov	r1, fp
    3890:	4630      	mov	r0, r6
    3892:	47d0      	blx	sl
    3894:	2800      	cmp	r0, #0
    3896:	dbbe      	blt.n	3816 <cbvprintf+0x236>
						sign = 0;
    3898:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    389a:	3501      	adds	r5, #1
						sign = 0;
    389c:	461e      	mov	r6, r3
					pad = '0';
    389e:	2330      	movs	r3, #48	; 0x30
    38a0:	e09b      	b.n	39da <cbvprintf+0x3fa>
			if (conv->flag_plus) {
    38a2:	071e      	lsls	r6, r3, #28
    38a4:	d411      	bmi.n	38ca <cbvprintf+0x2ea>
				sign = ' ';
    38a6:	f013 0610 	ands.w	r6, r3, #16
    38aa:	bf18      	it	ne
    38ac:	2620      	movne	r6, #32
			if (value->sint < 0) {
    38ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    38b2:	2a00      	cmp	r2, #0
    38b4:	f173 0100 	sbcs.w	r1, r3, #0
    38b8:	f6bf af5a 	bge.w	3770 <cbvprintf+0x190>
				value->uint = (uint_value_type)-value->sint;
    38bc:	4252      	negs	r2, r2
    38be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    38c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    38c6:	262d      	movs	r6, #45	; 0x2d
    38c8:	e752      	b.n	3770 <cbvprintf+0x190>
				sign = '+';
    38ca:	262b      	movs	r6, #43	; 0x2b
    38cc:	e7ef      	b.n	38ae <cbvprintf+0x2ce>
		switch (conv->specifier) {
    38ce:	2600      	movs	r6, #0
    38d0:	e74e      	b.n	3770 <cbvprintf+0x190>
			if (value->ptr != NULL) {
    38d2:	980a      	ldr	r0, [sp, #40]	; 0x28
    38d4:	b348      	cbz	r0, 392a <cbvprintf+0x34a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    38d6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    38da:	9300      	str	r3, [sp, #0]
    38dc:	aa0c      	add	r2, sp, #48	; 0x30
    38de:	ab04      	add	r3, sp, #16
    38e0:	2100      	movs	r1, #0
    38e2:	f7ff fe2d 	bl	3540 <encode_uint>
				conv->altform_0c = true;
    38e6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    38ea:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    38ee:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    38f2:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    38f6:	4681      	mov	r9, r0
				conv->altform_0c = true;
    38f8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    38fc:	2600      	movs	r6, #0
				goto prec_int_pad0;
    38fe:	e741      	b.n	3784 <cbvprintf+0x1a4>
				store_count(conv, value->ptr, count);
    3900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    3902:	2907      	cmp	r1, #7
    3904:	f63f aee4 	bhi.w	36d0 <cbvprintf+0xf0>
    3908:	e8df f001 	tbb	[pc, r1]
    390c:	0d06040d 	.word	0x0d06040d
    3910:	0d0d0808 	.word	0x0d0d0808
		*(signed char *)dp = (signed char)count;
    3914:	701d      	strb	r5, [r3, #0]
		break;
    3916:	e6db      	b.n	36d0 <cbvprintf+0xf0>
		*(short *)dp = (short)count;
    3918:	801d      	strh	r5, [r3, #0]
		break;
    391a:	e6d9      	b.n	36d0 <cbvprintf+0xf0>
		*(intmax_t *)dp = (intmax_t)count;
    391c:	4628      	mov	r0, r5
    391e:	17e9      	asrs	r1, r5, #31
    3920:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    3924:	e6d4      	b.n	36d0 <cbvprintf+0xf0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3926:	601d      	str	r5, [r3, #0]
		break;
    3928:	e6d2      	b.n	36d0 <cbvprintf+0xf0>
			bpe = bps + 5;
    392a:	4f31      	ldr	r7, [pc, #196]	; (39f0 <cbvprintf+0x410>)
    392c:	4606      	mov	r6, r0
			bps = "(nil)";
    392e:	f1a7 0905 	sub.w	r9, r7, #5
    3932:	e78c      	b.n	384e <cbvprintf+0x26e>
		} else if (conv->altform_0) {
    3934:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    3936:	bf48      	it	mi
    3938:	3301      	addmi	r3, #1
    393a:	e791      	b.n	3860 <cbvprintf+0x280>
					OUTC(pad);
    393c:	4618      	mov	r0, r3
    393e:	4659      	mov	r1, fp
    3940:	9303      	str	r3, [sp, #12]
    3942:	47d0      	blx	sl
    3944:	2800      	cmp	r0, #0
    3946:	9b03      	ldr	r3, [sp, #12]
    3948:	f6ff af65 	blt.w	3816 <cbvprintf+0x236>
    394c:	4642      	mov	r2, r8
				while (width-- > 0) {
    394e:	2a00      	cmp	r2, #0
    3950:	eba5 0108 	sub.w	r1, r5, r8
    3954:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3958:	dcf0      	bgt.n	393c <cbvprintf+0x35c>
    395a:	460d      	mov	r5, r1
		if (sign != 0) {
    395c:	b136      	cbz	r6, 396c <cbvprintf+0x38c>
			OUTC(sign);
    395e:	4659      	mov	r1, fp
    3960:	4630      	mov	r0, r6
    3962:	47d0      	blx	sl
    3964:	2800      	cmp	r0, #0
    3966:	f6ff af56 	blt.w	3816 <cbvprintf+0x236>
    396a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    396c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3970:	06d9      	lsls	r1, r3, #27
    3972:	d401      	bmi.n	3978 <cbvprintf+0x398>
    3974:	071a      	lsls	r2, r3, #28
    3976:	d506      	bpl.n	3986 <cbvprintf+0x3a6>
				OUTC('0');
    3978:	4659      	mov	r1, fp
    397a:	2030      	movs	r0, #48	; 0x30
    397c:	47d0      	blx	sl
    397e:	2800      	cmp	r0, #0
    3980:	f6ff af49 	blt.w	3816 <cbvprintf+0x236>
    3984:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3986:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    398a:	06db      	lsls	r3, r3, #27
    398c:	d507      	bpl.n	399e <cbvprintf+0x3be>
				OUTC(conv->specifier);
    398e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    3992:	4659      	mov	r1, fp
    3994:	47d0      	blx	sl
    3996:	2800      	cmp	r0, #0
    3998:	f6ff af3d 	blt.w	3816 <cbvprintf+0x236>
    399c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    399e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    39a0:	442e      	add	r6, r5
    39a2:	1b73      	subs	r3, r6, r5
    39a4:	2b00      	cmp	r3, #0
    39a6:	dc1a      	bgt.n	39de <cbvprintf+0x3fe>
			OUTS(bps, bpe);
    39a8:	463b      	mov	r3, r7
    39aa:	464a      	mov	r2, r9
    39ac:	4659      	mov	r1, fp
    39ae:	4650      	mov	r0, sl
    39b0:	f01a fcf5 	bl	1e39e <outs>
    39b4:	2800      	cmp	r0, #0
    39b6:	f6ff af2e 	blt.w	3816 <cbvprintf+0x236>
    39ba:	4405      	add	r5, r0
		while (width > 0) {
    39bc:	44a8      	add	r8, r5
    39be:	eba8 0305 	sub.w	r3, r8, r5
    39c2:	2b00      	cmp	r3, #0
    39c4:	f77f ae84 	ble.w	36d0 <cbvprintf+0xf0>
			OUTC(' ');
    39c8:	4659      	mov	r1, fp
    39ca:	2020      	movs	r0, #32
    39cc:	47d0      	blx	sl
    39ce:	2800      	cmp	r0, #0
    39d0:	f6ff af21 	blt.w	3816 <cbvprintf+0x236>
    39d4:	3501      	adds	r5, #1
			--width;
    39d6:	e7f2      	b.n	39be <cbvprintf+0x3de>
				char pad = ' ';
    39d8:	2320      	movs	r3, #32
    39da:	4445      	add	r5, r8
    39dc:	e7b6      	b.n	394c <cbvprintf+0x36c>
				OUTC('0');
    39de:	4659      	mov	r1, fp
    39e0:	2030      	movs	r0, #48	; 0x30
    39e2:	47d0      	blx	sl
    39e4:	2800      	cmp	r0, #0
    39e6:	f6ff af16 	blt.w	3816 <cbvprintf+0x236>
    39ea:	3501      	adds	r5, #1
    39ec:	e7d9      	b.n	39a2 <cbvprintf+0x3c2>
    39ee:	bf00      	nop
    39f0:	0002889f 	.word	0x0002889f

000039f4 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    39f4:	4b10      	ldr	r3, [pc, #64]	; (3a38 <settings_save_one+0x44>)
{
    39f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    39fa:	681c      	ldr	r4, [r3, #0]
{
    39fc:	4605      	mov	r5, r0
    39fe:	460e      	mov	r6, r1
    3a00:	4617      	mov	r7, r2
	if (!cs) {
    3a02:	b1ac      	cbz	r4, 3a30 <settings_save_one+0x3c>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    3a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a0c:	480b      	ldr	r0, [pc, #44]	; (3a3c <settings_save_one+0x48>)
    3a0e:	f016 fe35 	bl	1a67c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    3a12:	6863      	ldr	r3, [r4, #4]
    3a14:	4632      	mov	r2, r6
    3a16:	f8d3 8008 	ldr.w	r8, [r3, #8]
    3a1a:	4629      	mov	r1, r5
    3a1c:	463b      	mov	r3, r7
    3a1e:	4620      	mov	r0, r4
    3a20:	47c0      	blx	r8
    3a22:	4604      	mov	r4, r0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    3a24:	4805      	ldr	r0, [pc, #20]	; (3a3c <settings_save_one+0x48>)
    3a26:	f016 fea1 	bl	1a76c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    3a2a:	4620      	mov	r0, r4
    3a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    3a30:	f06f 0401 	mvn.w	r4, #1
    3a34:	e7f9      	b.n	3a2a <settings_save_one+0x36>
    3a36:	bf00      	nop
    3a38:	200015d8 	.word	0x200015d8
    3a3c:	20000d14 	.word	0x20000d14

00003a40 <settings_load_subtree>:
{
    3a40:	b530      	push	{r4, r5, lr}
    3a42:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    3a44:	2300      	movs	r3, #0
{
    3a46:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    3a48:	e9cd 3302 	strd	r3, r3, [sp, #8]
    3a4c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    3a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a52:	480e      	ldr	r0, [pc, #56]	; (3a8c <settings_load_subtree+0x4c>)
    3a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a58:	f016 fe10 	bl	1a67c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3a5c:	4b0c      	ldr	r3, [pc, #48]	; (3a90 <settings_load_subtree+0x50>)
    3a5e:	681c      	ldr	r4, [r3, #0]
    3a60:	2c00      	cmp	r4, #0
    3a62:	bf38      	it	cc
    3a64:	2400      	movcc	r4, #0
    3a66:	b13c      	cbz	r4, 3a78 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
    3a68:	6863      	ldr	r3, [r4, #4]
    3a6a:	4620      	mov	r0, r4
    3a6c:	681b      	ldr	r3, [r3, #0]
    3a6e:	a901      	add	r1, sp, #4
    3a70:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3a72:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3a74:	2c00      	cmp	r4, #0
    3a76:	d1f6      	bne.n	3a66 <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
    3a78:	4628      	mov	r0, r5
    3a7a:	f000 f889 	bl	3b90 <settings_commit_subtree>
    3a7e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    3a80:	4802      	ldr	r0, [pc, #8]	; (3a8c <settings_load_subtree+0x4c>)
    3a82:	f016 fe73 	bl	1a76c <z_impl_k_mutex_unlock>
}
    3a86:	4620      	mov	r0, r4
    3a88:	b005      	add	sp, #20
    3a8a:	bd30      	pop	{r4, r5, pc}
    3a8c:	20000d14 	.word	0x20000d14
    3a90:	200015d0 	.word	0x200015d0

00003a94 <settings_load_subtree_direct>:
{
    3a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    3a96:	e9cd 0101 	strd	r0, r1, [sp, #4]
    3a9a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    3a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3aa0:	480c      	ldr	r0, [pc, #48]	; (3ad4 <settings_load_subtree_direct+0x40>)
    3aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3aa6:	f016 fde9 	bl	1a67c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3aaa:	4b0b      	ldr	r3, [pc, #44]	; (3ad8 <settings_load_subtree_direct+0x44>)
    3aac:	681c      	ldr	r4, [r3, #0]
    3aae:	2c00      	cmp	r4, #0
    3ab0:	bf38      	it	cc
    3ab2:	2400      	movcc	r4, #0
    3ab4:	b13c      	cbz	r4, 3ac6 <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
    3ab6:	6863      	ldr	r3, [r4, #4]
    3ab8:	4620      	mov	r0, r4
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	a901      	add	r1, sp, #4
    3abe:	4798      	blx	r3
    3ac0:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3ac2:	2c00      	cmp	r4, #0
    3ac4:	d1f6      	bne.n	3ab4 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
    3ac6:	4803      	ldr	r0, [pc, #12]	; (3ad4 <settings_load_subtree_direct+0x40>)
    3ac8:	f016 fe50 	bl	1a76c <z_impl_k_mutex_unlock>
}
    3acc:	2000      	movs	r0, #0
    3ace:	b004      	add	sp, #16
    3ad0:	bd10      	pop	{r4, pc}
    3ad2:	bf00      	nop
    3ad4:	20000d14 	.word	0x20000d14
    3ad8:	200015d0 	.word	0x200015d0

00003adc <settings_store_init>:
	list->head = NULL;
    3adc:	4b02      	ldr	r3, [pc, #8]	; (3ae8 <settings_store_init+0xc>)
    3ade:	2200      	movs	r2, #0
	list->tail = NULL;
    3ae0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    3ae4:	4770      	bx	lr
    3ae6:	bf00      	nop
    3ae8:	200015d0 	.word	0x200015d0

00003aec <settings_init>:
	list->head = NULL;
    3aec:	4b02      	ldr	r3, [pc, #8]	; (3af8 <settings_init+0xc>)
    3aee:	2200      	movs	r2, #0
	list->tail = NULL;
    3af0:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    3af4:	f7ff bff2 	b.w	3adc <settings_store_init>
    3af8:	200015dc 	.word	0x200015dc

00003afc <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    3afc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3b00:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    3b02:	460e      	mov	r6, r1
    3b04:	b109      	cbz	r1, 3b0a <settings_parse_and_lookup+0xe>
		*next = NULL;
    3b06:	2300      	movs	r3, #0
    3b08:	600b      	str	r3, [r1, #0]
    3b0a:	4c1e      	ldr	r4, [pc, #120]	; (3b84 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3b0c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3b8c <settings_parse_and_lookup+0x90>
    3b10:	2500      	movs	r5, #0
    3b12:	4544      	cmp	r4, r8
    3b14:	d308      	bcc.n	3b28 <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    3b16:	4b1c      	ldr	r3, [pc, #112]	; (3b88 <settings_parse_and_lookup+0x8c>)
    3b18:	681c      	ldr	r4, [r3, #0]
    3b1a:	b10c      	cbz	r4, 3b20 <settings_parse_and_lookup+0x24>
    3b1c:	3c14      	subs	r4, #20
    3b1e:	b9c4      	cbnz	r4, 3b52 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    3b20:	4628      	mov	r0, r5
    3b22:	b002      	add	sp, #8
    3b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    3b28:	6821      	ldr	r1, [r4, #0]
    3b2a:	aa01      	add	r2, sp, #4
    3b2c:	4638      	mov	r0, r7
    3b2e:	f01a fc54 	bl	1e3da <settings_name_steq>
    3b32:	b160      	cbz	r0, 3b4e <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    3b34:	b925      	cbnz	r5, 3b40 <settings_parse_and_lookup+0x44>
			if (next) {
    3b36:	b10e      	cbz	r6, 3b3c <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    3b38:	9b01      	ldr	r3, [sp, #4]
    3b3a:	6033      	str	r3, [r6, #0]
    3b3c:	4625      	mov	r5, r4
    3b3e:	e006      	b.n	3b4e <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3b40:	6829      	ldr	r1, [r5, #0]
    3b42:	6820      	ldr	r0, [r4, #0]
    3b44:	2200      	movs	r2, #0
    3b46:	f01a fc48 	bl	1e3da <settings_name_steq>
    3b4a:	2800      	cmp	r0, #0
    3b4c:	d1f3      	bne.n	3b36 <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3b4e:	3414      	adds	r4, #20
    3b50:	e7df      	b.n	3b12 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    3b52:	6821      	ldr	r1, [r4, #0]
    3b54:	aa01      	add	r2, sp, #4
    3b56:	4638      	mov	r0, r7
    3b58:	f01a fc3f 	bl	1e3da <settings_name_steq>
    3b5c:	b160      	cbz	r0, 3b78 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    3b5e:	b925      	cbnz	r5, 3b6a <settings_parse_and_lookup+0x6e>
			if (next) {
    3b60:	b10e      	cbz	r6, 3b66 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    3b62:	9b01      	ldr	r3, [sp, #4]
    3b64:	6033      	str	r3, [r6, #0]
    3b66:	4625      	mov	r5, r4
    3b68:	e006      	b.n	3b78 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3b6a:	6829      	ldr	r1, [r5, #0]
    3b6c:	6820      	ldr	r0, [r4, #0]
    3b6e:	2200      	movs	r2, #0
    3b70:	f01a fc33 	bl	1e3da <settings_name_steq>
    3b74:	2800      	cmp	r0, #0
    3b76:	d1f3      	bne.n	3b60 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3b78:	f114 0f14 	cmn.w	r4, #20
    3b7c:	d0d0      	beq.n	3b20 <settings_parse_and_lookup+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3b7e:	6964      	ldr	r4, [r4, #20]
    3b80:	e7cb      	b.n	3b1a <settings_parse_and_lookup+0x1e>
    3b82:	bf00      	nop
    3b84:	00027170 	.word	0x00027170
    3b88:	200015dc 	.word	0x200015dc
    3b8c:	000271ac 	.word	0x000271ac

00003b90 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    3b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3b92:	4c1a      	ldr	r4, [pc, #104]	; (3bfc <settings_commit_subtree+0x6c>)
    3b94:	4f1a      	ldr	r7, [pc, #104]	; (3c00 <settings_commit_subtree+0x70>)
{
    3b96:	4606      	mov	r6, r0
	rc = 0;
    3b98:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3b9a:	42bc      	cmp	r4, r7
    3b9c:	d306      	bcc.n	3bac <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    3b9e:	4b19      	ldr	r3, [pc, #100]	; (3c04 <settings_commit_subtree+0x74>)
    3ba0:	681c      	ldr	r4, [r3, #0]
    3ba2:	b10c      	cbz	r4, 3ba8 <settings_commit_subtree+0x18>
    3ba4:	3c14      	subs	r4, #20
    3ba6:	b99c      	cbnz	r4, 3bd0 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    3ba8:	4628      	mov	r0, r5
    3baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3bac:	b91e      	cbnz	r6, 3bb6 <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    3bae:	68e3      	ldr	r3, [r4, #12]
    3bb0:	b94b      	cbnz	r3, 3bc6 <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3bb2:	3414      	adds	r4, #20
    3bb4:	e7f1      	b.n	3b9a <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3bb6:	6820      	ldr	r0, [r4, #0]
    3bb8:	2200      	movs	r2, #0
    3bba:	4631      	mov	r1, r6
    3bbc:	f01a fc0d 	bl	1e3da <settings_name_steq>
    3bc0:	2800      	cmp	r0, #0
    3bc2:	d1f4      	bne.n	3bae <settings_commit_subtree+0x1e>
    3bc4:	e7f5      	b.n	3bb2 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    3bc6:	4798      	blx	r3
				rc = rc2;
    3bc8:	2d00      	cmp	r5, #0
    3bca:	bf08      	it	eq
    3bcc:	4605      	moveq	r5, r0
    3bce:	e7f0      	b.n	3bb2 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3bd0:	b936      	cbnz	r6, 3be0 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    3bd2:	68e3      	ldr	r3, [r4, #12]
    3bd4:	b963      	cbnz	r3, 3bf0 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3bd6:	f114 0f14 	cmn.w	r4, #20
    3bda:	d0e5      	beq.n	3ba8 <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3bdc:	6964      	ldr	r4, [r4, #20]
    3bde:	e7e0      	b.n	3ba2 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3be0:	6820      	ldr	r0, [r4, #0]
    3be2:	2200      	movs	r2, #0
    3be4:	4631      	mov	r1, r6
    3be6:	f01a fbf8 	bl	1e3da <settings_name_steq>
    3bea:	2800      	cmp	r0, #0
    3bec:	d1f1      	bne.n	3bd2 <settings_commit_subtree+0x42>
    3bee:	e7f2      	b.n	3bd6 <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    3bf0:	4798      	blx	r3
				rc = rc2;
    3bf2:	2d00      	cmp	r5, #0
    3bf4:	bf08      	it	eq
    3bf6:	4605      	moveq	r5, r0
    3bf8:	e7ed      	b.n	3bd6 <settings_commit_subtree+0x46>
    3bfa:	bf00      	nop
    3bfc:	00027170 	.word	0x00027170
    3c00:	000271ac 	.word	0x000271ac
    3c04:	200015dc 	.word	0x200015dc

00003c08 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    3c08:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    3c0a:	4c06      	ldr	r4, [pc, #24]	; (3c24 <settings_subsys_init+0x1c>)
    3c0c:	7823      	ldrb	r3, [r4, #0]
    3c0e:	b93b      	cbnz	r3, 3c20 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    3c10:	f7ff ff6c 	bl	3aec <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    3c14:	f01a fc2a 	bl	1e46c <settings_backend_init>

	if (!err) {
    3c18:	b908      	cbnz	r0, 3c1e <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    3c1a:	2301      	movs	r3, #1
    3c1c:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    3c1e:	bd10      	pop	{r4, pc}
		return 0;
    3c20:	2000      	movs	r0, #0
    3c22:	e7fc      	b.n	3c1e <settings_subsys_init+0x16>
    3c24:	20002f77 	.word	0x20002f77

00003c28 <settings_runtime_set>:
	memcpy(data, arg->data, MIN(arg->len, len));
	return MIN(arg->len, len);
}

int settings_runtime_set(const char *name, const void *data, size_t len)
{
    3c28:	b530      	push	{r4, r5, lr}
    3c2a:	b085      	sub	sp, #20
    3c2c:	460d      	mov	r5, r1
	struct settings_handler_static *ch;
	const char *name_key;
	struct read_cb_arg arg;

	ch = settings_parse_and_lookup(name, &name_key);
    3c2e:	a901      	add	r1, sp, #4
{
    3c30:	4614      	mov	r4, r2
	ch = settings_parse_and_lookup(name, &name_key);
    3c32:	f7ff ff63 	bl	3afc <settings_parse_and_lookup>
	if (!ch) {
    3c36:	b148      	cbz	r0, 3c4c <settings_runtime_set+0x24>
		return -EINVAL;
	}

	arg.data = data;
	arg.len = len;
    3c38:	e9cd 5402 	strd	r5, r4, [sp, #8]
	return ch->h_set(name_key, len, settings_runtime_read_cb, (void *)&arg);
    3c3c:	4a05      	ldr	r2, [pc, #20]	; (3c54 <settings_runtime_set+0x2c>)
    3c3e:	6885      	ldr	r5, [r0, #8]
    3c40:	9801      	ldr	r0, [sp, #4]
    3c42:	ab02      	add	r3, sp, #8
    3c44:	4621      	mov	r1, r4
    3c46:	47a8      	blx	r5
}
    3c48:	b005      	add	sp, #20
    3c4a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    3c4c:	f06f 0015 	mvn.w	r0, #21
    3c50:	e7fa      	b.n	3c48 <settings_runtime_set+0x20>
    3c52:	bf00      	nop
    3c54:	0001e44d 	.word	0x0001e44d

00003c58 <sys_pm_create_device_list>:
		++pmi;
	}
}

void sys_pm_create_device_list(void)
{
    3c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t count = z_device_get_all_static(&all_devices);
    3c5c:	481f      	ldr	r0, [pc, #124]	; (3cdc <sys_pm_create_device_list+0x84>)
    3c5e:	f016 fb21 	bl	1a2a4 <z_device_get_all_static>

	__ASSERT_NO_MSG(count <= DEVICE_IDX_MAX);

	/* Reserve initial slots for core devices. */
	core_dev = 0;
	while (z_pm_core_devices[core_dev]) {
    3c62:	4a1f      	ldr	r2, [pc, #124]	; (3ce0 <sys_pm_create_device_list+0x88>)
	size_t count = z_device_get_all_static(&all_devices);
    3c64:	9000      	str	r0, [sp, #0]
	while (z_pm_core_devices[core_dev]) {
    3c66:	2300      	movs	r3, #0
    3c68:	fa1f f983 	uxth.w	r9, r3
    3c6c:	3301      	adds	r3, #1
    3c6e:	f852 4029 	ldr.w	r4, [r2, r9, lsl #2]
    3c72:	2c00      	cmp	r4, #0
    3c74:	d1f8      	bne.n	3c68 <sys_pm_create_device_list+0x10>
		core_dev++;
	}

	num_pm = core_dev;
    3c76:	4e1b      	ldr	r6, [pc, #108]	; (3ce4 <sys_pm_create_device_list+0x8c>)
	__ASSERT_NO_MSG(num_pm <= CONFIG_PM_MAX_DEVICES);

	for (pmi = 0; pmi < count; pmi++) {
		device_idx_t cdi = 0;
		const struct device *dev = &all_devices[pmi];
    3c78:	4b18      	ldr	r3, [pc, #96]	; (3cdc <sys_pm_create_device_list+0x84>)
			++cdi;
		}

		/* Append the device if it doesn't have a reserved slot. */
		if (cdi == core_dev) {
			pm_devices[num_pm++] = pmi;
    3c7a:	f8df a070 	ldr.w	sl, [pc, #112]	; 3cec <sys_pm_create_device_list+0x94>
	num_pm = core_dev;
    3c7e:	f8a6 9000 	strh.w	r9, [r6]
	for (pmi = 0; pmi < count; pmi++) {
    3c82:	9a00      	ldr	r2, [sp, #0]
    3c84:	fa1f f884 	uxth.w	r8, r4
    3c88:	4542      	cmp	r2, r8
    3c8a:	4645      	mov	r5, r8
    3c8c:	d802      	bhi.n	3c94 <sys_pm_create_device_list+0x3c>
		}
	}
}
    3c8e:	b003      	add	sp, #12
    3c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct device *dev = &all_devices[pmi];
    3c94:	681a      	ldr	r2, [r3, #0]
    3c96:	2118      	movs	r1, #24
    3c98:	fb01 2505 	mla	r5, r1, r5, r2
		if ((dev->device_pm_control == NULL) ||
    3c9c:	692a      	ldr	r2, [r5, #16]
    3c9e:	b1da      	cbz	r2, 3cd8 <sys_pm_create_device_list+0x80>
    3ca0:	4911      	ldr	r1, [pc, #68]	; (3ce8 <sys_pm_create_device_list+0x90>)
    3ca2:	428a      	cmp	r2, r1
    3ca4:	d018      	beq.n	3cd8 <sys_pm_create_device_list+0x80>
    3ca6:	2700      	movs	r7, #0
    3ca8:	b2ba      	uxth	r2, r7
		while (z_pm_core_devices[cdi]) {
    3caa:	490d      	ldr	r1, [pc, #52]	; (3ce0 <sys_pm_create_device_list+0x88>)
    3cac:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    3cb0:	4693      	mov	fp, r2
    3cb2:	b151      	cbz	r1, 3cca <sys_pm_create_device_list+0x72>
			if (strcmp(dev->name, z_pm_core_devices[cdi]) == 0) {
    3cb4:	6828      	ldr	r0, [r5, #0]
    3cb6:	9201      	str	r2, [sp, #4]
    3cb8:	f7fc fbde 	bl	478 <strcmp>
    3cbc:	3701      	adds	r7, #1
    3cbe:	9a01      	ldr	r2, [sp, #4]
    3cc0:	4b06      	ldr	r3, [pc, #24]	; (3cdc <sys_pm_create_device_list+0x84>)
    3cc2:	2800      	cmp	r0, #0
    3cc4:	d1f0      	bne.n	3ca8 <sys_pm_create_device_list+0x50>
				pm_devices[cdi] = pmi;
    3cc6:	f82a 801b 	strh.w	r8, [sl, fp, lsl #1]
		if (cdi == core_dev) {
    3cca:	454a      	cmp	r2, r9
			pm_devices[num_pm++] = pmi;
    3ccc:	bf01      	itttt	eq
    3cce:	8832      	ldrheq	r2, [r6, #0]
    3cd0:	1c51      	addeq	r1, r2, #1
    3cd2:	f82a 8012 	strheq.w	r8, [sl, r2, lsl #1]
    3cd6:	8031      	strheq	r1, [r6, #0]
	for (pmi = 0; pmi < count; pmi++) {
    3cd8:	3401      	adds	r4, #1
    3cda:	e7d2      	b.n	3c82 <sys_pm_create_device_list+0x2a>
    3cdc:	200015e4 	.word	0x200015e4
    3ce0:	00027244 	.word	0x00027244
    3ce4:	20002efc 	.word	0x20002efc
    3ce8:	00025fd1 	.word	0x00025fd1
    3cec:	20002efe 	.word	0x20002efe

00003cf0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3cf0:	b510      	push	{r4, lr}
    3cf2:	4807      	ldr	r0, [pc, #28]	; (3d10 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    3cf4:	4c07      	ldr	r4, [pc, #28]	; (3d14 <uart_console_init+0x24>)
    3cf6:	f016 fafd 	bl	1a2f4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    3cfa:	4b07      	ldr	r3, [pc, #28]	; (3d18 <uart_console_init+0x28>)
    3cfc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    3cfe:	4620      	mov	r0, r4
    3d00:	f000 ff36 	bl	4b70 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3d04:	4620      	mov	r0, r4
    3d06:	f7ff f9ad 	bl	3064 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    3d0a:	2000      	movs	r0, #0
    3d0c:	bd10      	pop	{r4, pc}
    3d0e:	bf00      	nop
    3d10:	000288d3 	.word	0x000288d3
    3d14:	00003d1d 	.word	0x00003d1d
    3d18:	200015e8 	.word	0x200015e8

00003d1c <console_out>:
	if ('\n' == c) {
    3d1c:	280a      	cmp	r0, #10
{
    3d1e:	b538      	push	{r3, r4, r5, lr}
    3d20:	4d07      	ldr	r5, [pc, #28]	; (3d40 <console_out+0x24>)
    3d22:	4604      	mov	r4, r0
	if ('\n' == c) {
    3d24:	d104      	bne.n	3d30 <console_out+0x14>
    3d26:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    3d28:	6883      	ldr	r3, [r0, #8]
    3d2a:	210d      	movs	r1, #13
    3d2c:	685b      	ldr	r3, [r3, #4]
    3d2e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3d30:	6828      	ldr	r0, [r5, #0]
    3d32:	6883      	ldr	r3, [r0, #8]
    3d34:	b2e1      	uxtb	r1, r4
    3d36:	685b      	ldr	r3, [r3, #4]
    3d38:	4798      	blx	r3
}
    3d3a:	4620      	mov	r0, r4
    3d3c:	bd38      	pop	{r3, r4, r5, pc}
    3d3e:	bf00      	nop
    3d40:	200015e8 	.word	0x200015e8

00003d44 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3d44:	4a0e      	ldr	r2, [pc, #56]	; (3d80 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3d46:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3d48:	1a84      	subs	r4, r0, r2
    3d4a:	10a3      	asrs	r3, r4, #2
    3d4c:	4c0d      	ldr	r4, [pc, #52]	; (3d84 <onoff_stop+0x40>)
    3d4e:	435c      	muls	r4, r3
{
    3d50:	4605      	mov	r5, r0
    3d52:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    3d54:	200c      	movs	r0, #12
    3d56:	fb00 2004 	mla	r0, r0, r4, r2
{
    3d5a:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    3d5c:	2140      	movs	r1, #64	; 0x40
    3d5e:	4408      	add	r0, r1
    3d60:	f01a fb94 	bl	1e48c <set_off_state>
	if (err < 0) {
    3d64:	1e01      	subs	r1, r0, #0
    3d66:	db05      	blt.n	3d74 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    3d68:	4b07      	ldr	r3, [pc, #28]	; (3d88 <onoff_stop+0x44>)
    3d6a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    3d6e:	6863      	ldr	r3, [r4, #4]
    3d70:	4798      	blx	r3
	return 0;
    3d72:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    3d74:	4628      	mov	r0, r5
    3d76:	4633      	mov	r3, r6
}
    3d78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3d7c:	4718      	bx	r3
    3d7e:	bf00      	nop
    3d80:	200015fc 	.word	0x200015fc
    3d84:	b6db6db7 	.word	0xb6db6db7
    3d88:	00027268 	.word	0x00027268

00003d8c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3d90:	4e10      	ldr	r6, [pc, #64]	; (3dd4 <onoff_start+0x48>)
    3d92:	1b84      	subs	r4, r0, r6
    3d94:	10a3      	asrs	r3, r4, #2
    3d96:	4c10      	ldr	r4, [pc, #64]	; (3dd8 <onoff_start+0x4c>)
    3d98:	435c      	muls	r4, r3
    3d9a:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    3d9c:	250c      	movs	r5, #12
    3d9e:	4365      	muls	r5, r4
{
    3da0:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    3da2:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    3da6:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    3da8:	4430      	add	r0, r6
    3daa:	2140      	movs	r1, #64	; 0x40
    3dac:	f01a fb87 	bl	1e4be <set_starting_state>
	if (err < 0) {
    3db0:	1e01      	subs	r1, r0, #0
    3db2:	db09      	blt.n	3dc8 <onoff_start+0x3c>
	subdata->cb = cb;
    3db4:	4a09      	ldr	r2, [pc, #36]	; (3ddc <onoff_start+0x50>)
    3db6:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    3db8:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    3dbc:	4b08      	ldr	r3, [pc, #32]	; (3de0 <onoff_start+0x54>)
    3dbe:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    3dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    3dc6:	4718      	bx	r3
		notify(mgr, err);
    3dc8:	4640      	mov	r0, r8
    3dca:	463b      	mov	r3, r7
}
    3dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    3dd0:	4718      	bx	r3
    3dd2:	bf00      	nop
    3dd4:	200015fc 	.word	0x200015fc
    3dd8:	b6db6db7 	.word	0xb6db6db7
    3ddc:	0001e521 	.word	0x0001e521
    3de0:	00027268 	.word	0x00027268

00003de4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3de4:	2200      	movs	r2, #0
{
    3de6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3de8:	2101      	movs	r1, #1
{
    3dea:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3dec:	4610      	mov	r0, r2
    3dee:	f000 fc3d 	bl	466c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    3df2:	2000      	movs	r0, #0
    3df4:	f000 fc08 	bl	4608 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3df8:	4810      	ldr	r0, [pc, #64]	; (3e3c <clk_init+0x58>)
    3dfa:	f011 fcd1 	bl	157a0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3dfe:	4b10      	ldr	r3, [pc, #64]	; (3e40 <clk_init+0x5c>)
    3e00:	4298      	cmp	r0, r3
    3e02:	d118      	bne.n	3e36 <clk_init+0x52>
	}

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    3e04:	68e0      	ldr	r0, [r4, #12]
    3e06:	f000 fa1b 	bl	4240 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    3e0a:	f01d f9bb 	bl	21184 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3e0e:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3e10:	490c      	ldr	r1, [pc, #48]	; (3e44 <clk_init+0x60>)
    3e12:	4630      	mov	r0, r6
    3e14:	f019 ffd4 	bl	1ddc0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3e18:	2800      	cmp	r0, #0
    3e1a:	db0b      	blt.n	3e34 <clk_init+0x50>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3e1c:	2501      	movs	r5, #1
    3e1e:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    3e20:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3e22:	4908      	ldr	r1, [pc, #32]	; (3e44 <clk_init+0x60>)
    3e24:	f104 001c 	add.w	r0, r4, #28
    3e28:	f019 ffca 	bl	1ddc0 <onoff_manager_init>
		if (err < 0) {
    3e2c:	2800      	cmp	r0, #0
    3e2e:	db01      	blt.n	3e34 <clk_init+0x50>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3e30:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    3e32:	2000      	movs	r0, #0
}
    3e34:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3e36:	f06f 0004 	mvn.w	r0, #4
    3e3a:	e7fb      	b.n	3e34 <clk_init+0x50>
    3e3c:	00003e7d 	.word	0x00003e7d
    3e40:	0bad0000 	.word	0x0bad0000
    3e44:	00027278 	.word	0x00027278

00003e48 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3e48:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3e4a:	230c      	movs	r3, #12
    3e4c:	4809      	ldr	r0, [pc, #36]	; (3e74 <clkstarted_handle.constprop.0+0x2c>)
    3e4e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3e50:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3e52:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3e54:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    3e58:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3e5a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    3e5c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3e5e:	4418      	add	r0, r3
    3e60:	f01a fb4b 	bl	1e4fa <set_on_state>
	if (callback) {
    3e64:	b12d      	cbz	r5, 3e72 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3e66:	4632      	mov	r2, r6
    3e68:	462b      	mov	r3, r5
    3e6a:	4803      	ldr	r0, [pc, #12]	; (3e78 <clkstarted_handle.constprop.0+0x30>)
}
    3e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3e70:	4718      	bx	r3
}
    3e72:	bd70      	pop	{r4, r5, r6, pc}
    3e74:	200015fc 	.word	0x200015fc
    3e78:	20000bbc 	.word	0x20000bbc

00003e7c <clock_event_handler>:
	switch (event) {
    3e7c:	2801      	cmp	r0, #1
{
    3e7e:	b510      	push	{r4, lr}
    3e80:	4604      	mov	r4, r0
	switch (event) {
    3e82:	d00a      	beq.n	3e9a <clock_event_handler+0x1e>
    3e84:	2803      	cmp	r0, #3
    3e86:	d00c      	beq.n	3ea2 <clock_event_handler+0x26>
    3e88:	b978      	cbnz	r0, 3eaa <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3e8a:	4b08      	ldr	r3, [pc, #32]	; (3eac <clock_event_handler+0x30>)
    3e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e8e:	075b      	lsls	r3, r3, #29
    3e90:	d10b      	bne.n	3eaa <clock_event_handler+0x2e>
}
    3e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3e96:	f7ff bfd7 	b.w	3e48 <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    3e9a:	f000 f9df 	bl	425c <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3e9e:	4620      	mov	r0, r4
    3ea0:	e7f7      	b.n	3e92 <clock_event_handler+0x16>
}
    3ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    3ea6:	f000 b9f9 	b.w	429c <z_nrf_clock_calibration_done_handler>
}
    3eaa:	bd10      	pop	{r4, pc}
    3eac:	200015fc 	.word	0x200015fc

00003eb0 <generic_hfclk_start>:
{
    3eb0:	b508      	push	{r3, lr}
    3eb2:	f04f 0320 	mov.w	r3, #32
    3eb6:	f3ef 8111 	mrs	r1, BASEPRI
    3eba:	f383 8811 	msr	BASEPRI, r3
    3ebe:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3ec2:	4a12      	ldr	r2, [pc, #72]	; (3f0c <generic_hfclk_start+0x5c>)
    3ec4:	6813      	ldr	r3, [r2, #0]
    3ec6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3eca:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3ece:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3ed0:	d00c      	beq.n	3eec <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3ed6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3eda:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3ede:	f013 0301 	ands.w	r3, r3, #1
    3ee2:	d003      	beq.n	3eec <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3ee4:	480a      	ldr	r0, [pc, #40]	; (3f10 <generic_hfclk_start+0x60>)
    3ee6:	f01a fb08 	bl	1e4fa <set_on_state>
			already_started = true;
    3eea:	2301      	movs	r3, #1
	__asm__ volatile(
    3eec:	f381 8811 	msr	BASEPRI, r1
    3ef0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3ef4:	b123      	cbz	r3, 3f00 <generic_hfclk_start+0x50>
}
    3ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    3efa:	2000      	movs	r0, #0
    3efc:	f7ff bfa4 	b.w	3e48 <clkstarted_handle.constprop.0>
}
    3f00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3f04:	2001      	movs	r0, #1
    3f06:	f011 bc5d 	b.w	157c4 <nrfx_clock_start>
    3f0a:	bf00      	nop
    3f0c:	2000164c 	.word	0x2000164c
    3f10:	2000163c 	.word	0x2000163c

00003f14 <lfclk_start>:
{
    3f14:	b510      	push	{r4, lr}
	if (!once) {
    3f16:	4c07      	ldr	r4, [pc, #28]	; (3f34 <lfclk_start+0x20>)
    3f18:	7823      	ldrb	r3, [r4, #0]
    3f1a:	b92b      	cbnz	r3, 3f28 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    3f1c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    3f20:	f022 faed 	bl	264fe <z_impl_k_busy_wait>
		once = true;
    3f24:	2301      	movs	r3, #1
    3f26:	7023      	strb	r3, [r4, #0]
}
    3f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    3f2c:	2000      	movs	r0, #0
    3f2e:	f011 bc49 	b.w	157c4 <nrfx_clock_start>
    3f32:	bf00      	nop
    3f34:	20002f78 	.word	0x20002f78

00003f38 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3f38:	4b09      	ldr	r3, [pc, #36]	; (3f60 <generic_hfclk_stop+0x28>)
    3f3a:	f3bf 8f5b 	dmb	ish
    3f3e:	e853 2f00 	ldrex	r2, [r3]
    3f42:	f022 0102 	bic.w	r1, r2, #2
    3f46:	e843 1000 	strex	r0, r1, [r3]
    3f4a:	2800      	cmp	r0, #0
    3f4c:	d1f7      	bne.n	3f3e <generic_hfclk_stop+0x6>
    3f4e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3f52:	07d3      	lsls	r3, r2, #31
    3f54:	d402      	bmi.n	3f5c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3f56:	2001      	movs	r0, #1
    3f58:	f011 bc6c 	b.w	15834 <nrfx_clock_stop>
}
    3f5c:	4770      	bx	lr
    3f5e:	bf00      	nop
    3f60:	2000164c 	.word	0x2000164c

00003f64 <api_blocking_start>:
{
    3f64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3f66:	2200      	movs	r2, #0
    3f68:	2301      	movs	r3, #1
    3f6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    3f6e:	ab04      	add	r3, sp, #16
    3f70:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3f74:	4a09      	ldr	r2, [pc, #36]	; (3f9c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3f76:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3f7a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3f7c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3f80:	f01a faf6 	bl	1e570 <api_start>
	if (err < 0) {
    3f84:	2800      	cmp	r0, #0
    3f86:	db05      	blt.n	3f94 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3f88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3f8c:	2300      	movs	r3, #0
    3f8e:	4668      	mov	r0, sp
    3f90:	f017 f81e 	bl	1afd0 <z_impl_k_sem_take>
}
    3f94:	b007      	add	sp, #28
    3f96:	f85d fb04 	ldr.w	pc, [sp], #4
    3f9a:	bf00      	nop
    3f9c:	0001e533 	.word	0x0001e533

00003fa0 <z_nrf_clock_control_get_onoff>:
}
    3fa0:	4a02      	ldr	r2, [pc, #8]	; (3fac <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    3fa2:	b2c3      	uxtb	r3, r0
}
    3fa4:	201c      	movs	r0, #28
    3fa6:	fb03 2000 	mla	r0, r3, r0, r2
    3faa:	4770      	bx	lr
    3fac:	200015fc 	.word	0x200015fc

00003fb0 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3fb0:	4b09      	ldr	r3, [pc, #36]	; (3fd8 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    3fb2:	f3bf 8f5b 	dmb	ish
    3fb6:	e853 2f00 	ldrex	r2, [r3]
    3fba:	f042 0101 	orr.w	r1, r2, #1
    3fbe:	e843 1000 	strex	r0, r1, [r3]
    3fc2:	2800      	cmp	r0, #0
    3fc4:	d1f7      	bne.n	3fb6 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    3fc6:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    3fca:	0793      	lsls	r3, r2, #30
    3fcc:	d402      	bmi.n	3fd4 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3fce:	2001      	movs	r0, #1
    3fd0:	f011 bbf8 	b.w	157c4 <nrfx_clock_start>
}
    3fd4:	4770      	bx	lr
    3fd6:	bf00      	nop
    3fd8:	2000164c 	.word	0x2000164c

00003fdc <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3fdc:	4b09      	ldr	r3, [pc, #36]	; (4004 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    3fde:	f3bf 8f5b 	dmb	ish
    3fe2:	e853 2f00 	ldrex	r2, [r3]
    3fe6:	f022 0101 	bic.w	r1, r2, #1
    3fea:	e843 1000 	strex	r0, r1, [r3]
    3fee:	2800      	cmp	r0, #0
    3ff0:	d1f7      	bne.n	3fe2 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    3ff2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    3ff6:	0793      	lsls	r3, r2, #30
    3ff8:	d402      	bmi.n	4000 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3ffa:	2001      	movs	r0, #1
    3ffc:	f011 bc1a 	b.w	15834 <nrfx_clock_stop>
}
    4000:	4770      	bx	lr
    4002:	bf00      	nop
    4004:	2000164c 	.word	0x2000164c

00004008 <z_nrf_clock_control_lf_on>:
{
    4008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    400a:	4928      	ldr	r1, [pc, #160]	; (40ac <z_nrf_clock_control_lf_on+0xa4>)
    400c:	f3bf 8f5b 	dmb	ish
    4010:	4606      	mov	r6, r0
    4012:	2201      	movs	r2, #1
    4014:	e851 3f00 	ldrex	r3, [r1]
    4018:	e841 2000 	strex	r0, r2, [r1]
    401c:	2800      	cmp	r0, #0
    401e:	d1f9      	bne.n	4014 <z_nrf_clock_control_lf_on+0xc>
    4020:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4024:	b933      	cbnz	r3, 4034 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4026:	4922      	ldr	r1, [pc, #136]	; (40b0 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    4028:	4822      	ldr	r0, [pc, #136]	; (40b4 <z_nrf_clock_control_lf_on+0xac>)
    402a:	604b      	str	r3, [r1, #4]
    402c:	60cb      	str	r3, [r1, #12]
    402e:	608a      	str	r2, [r1, #8]
    4030:	f019 fed9 	bl	1dde6 <onoff_request>
	switch (start_mode) {
    4034:	1e73      	subs	r3, r6, #1
    4036:	2b01      	cmp	r3, #1
    4038:	d820      	bhi.n	407c <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    403a:	f022 fa5a 	bl	264f2 <k_is_in_isr>
    403e:	4604      	mov	r4, r0
    4040:	b910      	cbnz	r0, 4048 <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
    4042:	4b1d      	ldr	r3, [pc, #116]	; (40b8 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
    4044:	781b      	ldrb	r3, [r3, #0]
    4046:	bb53      	cbnz	r3, 409e <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
    4048:	f04f 0320 	mov.w	r3, #32
    404c:	f3ef 8511 	mrs	r5, BASEPRI
    4050:	f383 8811 	msr	BASEPRI, r3
    4054:	f3bf 8f6f 	isb	sy
    4058:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    405a:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    405e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4062:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    4066:	03d2      	lsls	r2, r2, #15
    4068:	d509      	bpl.n	407e <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    406a:	079b      	lsls	r3, r3, #30
    406c:	d001      	beq.n	4072 <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    406e:	2e01      	cmp	r6, #1
    4070:	d105      	bne.n	407e <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
    4072:	b174      	cbz	r4, 4092 <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
    4074:	f385 8811 	msr	BASEPRI, r5
    4078:	f3bf 8f6f 	isb	sy
}
    407c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode) {
    407e:	b11c      	cbz	r4, 4088 <z_nrf_clock_control_lf_on+0x80>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4080:	4628      	mov	r0, r5
    4082:	f000 fb61 	bl	4748 <arch_cpu_atomic_idle>
}
    4086:	e7ea      	b.n	405e <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
    4088:	2100      	movs	r1, #0
    408a:	2021      	movs	r0, #33	; 0x21
    408c:	f016 ff54 	bl	1af38 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4090:	e7e5      	b.n	405e <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
    4092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4096:	2202      	movs	r2, #2
    4098:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    409c:	e7ee      	b.n	407c <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
    409e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40a2:	2202      	movs	r2, #2
    40a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    40a8:	4605      	mov	r5, r0
}
    40aa:	e7d6      	b.n	405a <z_nrf_clock_control_lf_on+0x52>
    40ac:	20001650 	.word	0x20001650
    40b0:	200015ec 	.word	0x200015ec
    40b4:	20001618 	.word	0x20001618
    40b8:	200030af 	.word	0x200030af

000040bc <hf_request>:
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    40bc:	4905      	ldr	r1, [pc, #20]	; (40d4 <hf_request+0x18>)
    40be:	2300      	movs	r3, #0
    40c0:	60cb      	str	r3, [r1, #12]
    40c2:	4b05      	ldr	r3, [pc, #20]	; (40d8 <hf_request+0x1c>)
    40c4:	604b      	str	r3, [r1, #4]
    40c6:	2303      	movs	r3, #3
    40c8:	608b      	str	r3, [r1, #8]
			onoff_client_callback callback)
{
	int err;

	sys_notify_init_callback(&cli->notify, callback);
	err = onoff_request(mgr, cli);
    40ca:	4b04      	ldr	r3, [pc, #16]	; (40dc <hf_request+0x20>)
    40cc:	6818      	ldr	r0, [r3, #0]
    40ce:	f019 be8a 	b.w	1dde6 <onoff_request>
    40d2:	bf00      	nop
    40d4:	20001658 	.word	0x20001658
    40d8:	000041e9 	.word	0x000041e9
    40dc:	20001668 	.word	0x20001668

000040e0 <temp_sensor_init>:
	total_skips_cnt = 0;
}

#if CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP
static int temp_sensor_init(const struct device *arg)
{
    40e0:	b508      	push	{r3, lr}
    40e2:	4803      	ldr	r0, [pc, #12]	; (40f0 <temp_sensor_init+0x10>)
    40e4:	f016 f906 	bl	1a2f4 <z_impl_device_get_binding>
	temp_sensor = temp_device();
    40e8:	4b02      	ldr	r3, [pc, #8]	; (40f4 <temp_sensor_init+0x14>)
    40ea:	6018      	str	r0, [r3, #0]

	return 0;
}
    40ec:	2000      	movs	r0, #0
    40ee:	bd08      	pop	{r3, pc}
    40f0:	000288da 	.word	0x000288da
    40f4:	2000166c 	.word	0x2000166c

000040f8 <start_cycle>:
{
    40f8:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    40fa:	2200      	movs	r2, #0
    40fc:	2300      	movs	r3, #0
    40fe:	e9cd 2300 	strd	r2, r3, [sp]
    4102:	4808      	ldr	r0, [pc, #32]	; (4124 <start_cycle+0x2c>)
    4104:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4108:	2300      	movs	r3, #0
    410a:	f017 fa5b 	bl	1b5c4 <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    410e:	4b06      	ldr	r3, [pc, #24]	; (4128 <start_cycle+0x30>)
	err = onoff_release(mgr);
    4110:	6818      	ldr	r0, [r3, #0]
    4112:	f019 feb1 	bl	1de78 <onoff_release>
	cal_process_in_progress = 0;
    4116:	4b05      	ldr	r3, [pc, #20]	; (412c <start_cycle+0x34>)
    4118:	2200      	movs	r2, #0
    411a:	601a      	str	r2, [r3, #0]
}
    411c:	b003      	add	sp, #12
    411e:	f85d fb04 	ldr.w	pc, [sp], #4
    4122:	bf00      	nop
    4124:	20000c88 	.word	0x20000c88
    4128:	20001668 	.word	0x20001668
    412c:	20001654 	.word	0x20001654

00004130 <measure_temperature>:
{
    4130:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int rc = sensor_sample_fetch(temp_sensor);
    4132:	4c1d      	ldr	r4, [pc, #116]	; (41a8 <measure_temperature+0x78>)
    4134:	6820      	ldr	r0, [r4, #0]
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    4136:	6883      	ldr	r3, [r0, #8]
    4138:	4d1c      	ldr	r5, [pc, #112]	; (41ac <measure_temperature+0x7c>)
    413a:	68db      	ldr	r3, [r3, #12]
    413c:	2138      	movs	r1, #56	; 0x38
    413e:	4798      	blx	r3
	if (rc == 0) {
    4140:	b188      	cbz	r0, 4166 <measure_temperature+0x36>
		calib_skip_cnt = 0;
    4142:	2400      	movs	r4, #0
    4144:	702c      	strb	r4, [r5, #0]
	int16_t diff = 0;
    4146:	4620      	mov	r0, r4
	if ((calib_skip_cnt == 0) ||
    4148:	782b      	ldrb	r3, [r5, #0]
    414a:	b10b      	cbz	r3, 4150 <measure_temperature+0x20>
    414c:	2801      	cmp	r0, #1
    414e:	dd22      	ble.n	4196 <measure_temperature+0x66>
		prev_temperature = temperature;
    4150:	4b17      	ldr	r3, [pc, #92]	; (41b0 <measure_temperature+0x80>)
    4152:	801c      	strh	r4, [r3, #0]
		*(volatile uint32_t *)0x40000C34 = 0x00000002;
    4154:	4b17      	ldr	r3, [pc, #92]	; (41b4 <measure_temperature+0x84>)
    4156:	2202      	movs	r2, #2
    4158:	601a      	str	r2, [r3, #0]
	nrfx_clock_calibration_start();
    415a:	f011 fbb1 	bl	158c0 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    415e:	2301      	movs	r3, #1
    4160:	702b      	strb	r3, [r5, #0]
}
    4162:	b003      	add	sp, #12
    4164:	bd30      	pop	{r4, r5, pc}
		rc = sensor_channel_get(temp_sensor, SENSOR_CHAN_DIE_TEMP,
    4166:	6820      	ldr	r0, [r4, #0]
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    4168:	6883      	ldr	r3, [r0, #8]
    416a:	466a      	mov	r2, sp
    416c:	691b      	ldr	r3, [r3, #16]
    416e:	210c      	movs	r1, #12
    4170:	4798      	blx	r3
	if (rc == 0) {
    4172:	2800      	cmp	r0, #0
    4174:	d1e5      	bne.n	4142 <measure_temperature+0x12>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    4176:	9c01      	ldr	r4, [sp, #4]
    4178:	4b0f      	ldr	r3, [pc, #60]	; (41b8 <measure_temperature+0x88>)
    417a:	fb94 f4f3 	sdiv	r4, r4, r3
    417e:	9b00      	ldr	r3, [sp, #0]
    4180:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		diff = abs(temperature - prev_temperature);
    4184:	4b0a      	ldr	r3, [pc, #40]	; (41b0 <measure_temperature+0x80>)
    4186:	f9b3 0000 	ldrsh.w	r0, [r3]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    418a:	b224      	sxth	r4, r4
		diff = abs(temperature - prev_temperature);
    418c:	1a20      	subs	r0, r4, r0
    418e:	f022 fc4a 	bl	26a26 <abs>
    4192:	b200      	sxth	r0, r0
    4194:	e7d8      	b.n	4148 <measure_temperature+0x18>
		total_skips_cnt++;
    4196:	4a09      	ldr	r2, [pc, #36]	; (41bc <measure_temperature+0x8c>)
		calib_skip_cnt--;
    4198:	3b01      	subs	r3, #1
    419a:	702b      	strb	r3, [r5, #0]
		total_skips_cnt++;
    419c:	6813      	ldr	r3, [r2, #0]
    419e:	3301      	adds	r3, #1
    41a0:	6013      	str	r3, [r2, #0]
		start_cycle();
    41a2:	f7ff ffa9 	bl	40f8 <start_cycle>
}
    41a6:	e7dc      	b.n	4162 <measure_temperature+0x32>
    41a8:	2000166c 	.word	0x2000166c
    41ac:	20002f79 	.word	0x20002f79
    41b0:	20002f1c 	.word	0x20002f1c
    41b4:	40000c34 	.word	0x40000c34
    41b8:	0003d090 	.word	0x0003d090
    41bc:	20001674 	.word	0x20001674

000041c0 <timeout_handler>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    41c0:	4b08      	ldr	r3, [pc, #32]	; (41e4 <timeout_handler+0x24>)
    41c2:	f3bf 8f5b 	dmb	ish
    41c6:	2201      	movs	r2, #1
    41c8:	e853 1f00 	ldrex	r1, [r3]
    41cc:	2900      	cmp	r1, #0
    41ce:	d103      	bne.n	41d8 <timeout_handler+0x18>
    41d0:	e843 2000 	strex	r0, r2, [r3]
    41d4:	2800      	cmp	r0, #0
    41d6:	d1f7      	bne.n	41c8 <timeout_handler+0x8>
    41d8:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    41dc:	d101      	bne.n	41e2 <timeout_handler+0x22>
		hf_request();
    41de:	f7ff bf6d 	b.w	40bc <hf_request>
}
    41e2:	4770      	bx	lr
    41e4:	20001654 	.word	0x20001654

000041e8 <cal_hf_callback>:
{
    41e8:	b508      	push	{r3, lr}
	if ((temp_sensor == NULL) || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    41ea:	4b10      	ldr	r3, [pc, #64]	; (422c <cal_hf_callback+0x44>)
    41ec:	681b      	ldr	r3, [r3, #0]
    41ee:	b943      	cbnz	r3, 4202 <cal_hf_callback+0x1a>
		*(volatile uint32_t *)0x40000C34 = 0x00000002;
    41f0:	4b0f      	ldr	r3, [pc, #60]	; (4230 <cal_hf_callback+0x48>)
    41f2:	2202      	movs	r2, #2
    41f4:	601a      	str	r2, [r3, #0]
	nrfx_clock_calibration_start();
    41f6:	f011 fb63 	bl	158c0 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    41fa:	4b0e      	ldr	r3, [pc, #56]	; (4234 <cal_hf_callback+0x4c>)
    41fc:	2201      	movs	r2, #1
    41fe:	701a      	strb	r2, [r3, #0]
}
    4200:	bd08      	pop	{r3, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4202:	490d      	ldr	r1, [pc, #52]	; (4238 <cal_hf_callback+0x50>)
    4204:	f3bf 8f5b 	dmb	ish
    4208:	e851 3f00 	ldrex	r3, [r1]
    420c:	f043 0201 	orr.w	r2, r3, #1
    4210:	e841 2000 	strex	r0, r2, [r1]
    4214:	2800      	cmp	r0, #0
    4216:	d1f7      	bne.n	4208 <cal_hf_callback+0x20>
    4218:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    421c:	07db      	lsls	r3, r3, #31
    421e:	d4ef      	bmi.n	4200 <cal_hf_callback+0x18>
    4220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_queue_append(&work_q->queue, work);
    4224:	4805      	ldr	r0, [pc, #20]	; (423c <cal_hf_callback+0x54>)
    4226:	3908      	subs	r1, #8
    4228:	f022 b807 	b.w	2623a <k_queue_append>
    422c:	2000166c 	.word	0x2000166c
    4230:	40000c34 	.word	0x40000c34
    4234:	20002f79 	.word	0x20002f79
    4238:	2000025c 	.word	0x2000025c
    423c:	20001488 	.word	0x20001488

00004240 <z_nrf_clock_calibration_init>:
	mgrs = onoff_mgrs;
    4240:	4b03      	ldr	r3, [pc, #12]	; (4250 <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    4242:	4a04      	ldr	r2, [pc, #16]	; (4254 <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    4244:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    4246:	2300      	movs	r3, #0
    4248:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    424a:	4a03      	ldr	r2, [pc, #12]	; (4258 <z_nrf_clock_calibration_init+0x18>)
    424c:	6013      	str	r3, [r2, #0]
}
    424e:	4770      	bx	lr
    4250:	20001668 	.word	0x20001668
    4254:	20001670 	.word	0x20001670
    4258:	20001674 	.word	0x20001674

0000425c <z_nrf_clock_calibration_lfclk_started>:
SYS_INIT(temp_sensor_init, APPLICATION, 0);
#endif /* CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP */

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    425c:	4b0a      	ldr	r3, [pc, #40]	; (4288 <z_nrf_clock_calibration_lfclk_started+0x2c>)
    425e:	2200      	movs	r2, #0
    4260:	701a      	strb	r2, [r3, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4262:	4b0a      	ldr	r3, [pc, #40]	; (428c <z_nrf_clock_calibration_lfclk_started+0x30>)
    4264:	f3bf 8f5b 	dmb	ish
    4268:	2201      	movs	r2, #1
    426a:	e853 1f00 	ldrex	r1, [r3]
    426e:	2900      	cmp	r1, #0
    4270:	d103      	bne.n	427a <z_nrf_clock_calibration_lfclk_started+0x1e>
    4272:	e843 2000 	strex	r0, r2, [r3]
    4276:	2800      	cmp	r0, #0
    4278:	d1f7      	bne.n	426a <z_nrf_clock_calibration_lfclk_started+0xe>
    427a:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    427e:	d101      	bne.n	4284 <z_nrf_clock_calibration_lfclk_started+0x28>
		hf_request();
    4280:	f7ff bf1c 	b.w	40bc <hf_request>
}

void z_nrf_clock_calibration_lfclk_started(void)
{
	start_unconditional_cal_process();
}
    4284:	4770      	bx	lr
    4286:	bf00      	nop
    4288:	20002f79 	.word	0x20002f79
    428c:	20001654 	.word	0x20001654

00004290 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    4290:	4801      	ldr	r0, [pc, #4]	; (4298 <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    4292:	f022 ba36 	b.w	26702 <z_impl_k_timer_stop>
    4296:	bf00      	nop
    4298:	20000c88 	.word	0x20000c88

0000429c <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    429c:	4a02      	ldr	r2, [pc, #8]	; (42a8 <z_nrf_clock_calibration_done_handler+0xc>)
    429e:	6813      	ldr	r3, [r2, #0]
    42a0:	3301      	adds	r3, #1
    42a2:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    42a4:	f7ff bf28 	b.w	40f8 <start_cycle>
    42a8:	20001670 	.word	0x20001670

000042ac <ssd1306_get_capabilities>:
__ssp_bos_icheck3(memset, void *, int)
    42ac:	2300      	movs	r3, #0
				     struct display_capabilities *caps)
{
	memset(caps, 0, sizeof(struct display_capabilities));
	caps->x_resolution = DT_INST_PROP(0, width);
	caps->y_resolution = DT_INST_PROP(0, height);
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
    42ae:	4a05      	ldr	r2, [pc, #20]	; (42c4 <ssd1306_get_capabilities+0x18>)
    42b0:	f8a1 300d 	strh.w	r3, [r1, #13]
    42b4:	73cb      	strb	r3, [r1, #15]
    42b6:	2304      	movs	r3, #4
    42b8:	e9c1 2300 	strd	r2, r3, [r1]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
	caps->screen_info = SCREEN_INFO_MONO_VTILED;
    42bc:	2201      	movs	r2, #1
    42be:	608a      	str	r2, [r1, #8]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
    42c0:	730b      	strb	r3, [r1, #12]
}
    42c2:	4770      	bx	lr
    42c4:	00200080 	.word	0x00200080

000042c8 <ssd1306_init>:

	return 0;
}

static int ssd1306_init(const struct device *dev)
{
    42c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ssd1306_data *driver = dev->data;
    42ca:	68c4      	ldr	r4, [r0, #12]
{
    42cc:	b089      	sub	sp, #36	; 0x24
    42ce:	4605      	mov	r5, r0
    42d0:	4837      	ldr	r0, [pc, #220]	; (43b0 <ssd1306_init+0xe8>)
    42d2:	f016 f80f 	bl	1a2f4 <z_impl_device_get_binding>

	LOG_DBG("ssd1306_init");

	driver->bus = device_get_binding(DT_INST_BUS_LABEL(0));
    42d6:	6060      	str	r0, [r4, #4]
	if (driver->bus == NULL) {
    42d8:	b920      	cbnz	r0, 42e4 <ssd1306_init+0x1c>
		LOG_ERR("Failed to get pointer to %s device!",
			    DT_INST_BUS_LABEL(0));
		return -EINVAL;
    42da:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("Failed to initialize device!");
		return -EIO;
	}

	return 0;
}
    42de:	4620      	mov	r0, r4
    42e0:	b009      	add	sp, #36	; 0x24
    42e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42e4:	4833      	ldr	r0, [pc, #204]	; (43b4 <ssd1306_init+0xec>)
    42e6:	f016 f805 	bl	1a2f4 <z_impl_device_get_binding>
	driver->reset = device_get_binding(
    42ea:	6020      	str	r0, [r4, #0]
	if (driver->reset == NULL) {
    42ec:	2800      	cmp	r0, #0
    42ee:	d0f4      	beq.n	42da <ssd1306_init+0x12>
	gpio_pin_configure(driver->reset,
    42f0:	2104      	movs	r1, #4
    42f2:	f01a fa07 	bl	1e704 <gpio_pin_configure.constprop.0>
	driver->spi_config.operation = SPI_OP_MODE_MASTER | SPI_TRANSFER_MSB |
    42f6:	4a30      	ldr	r2, [pc, #192]	; (43b8 <ssd1306_init+0xf0>)
    42f8:	f44f 7380 	mov.w	r3, #256	; 0x100
    42fc:	e9c4 2305 	strd	r2, r3, [r4, #20]
    4300:	482c      	ldr	r0, [pc, #176]	; (43b4 <ssd1306_init+0xec>)
    4302:	f015 fff7 	bl	1a2f4 <z_impl_device_get_binding>
	driver->cs_ctrl.gpio_pin = DT_INST_SPI_DEV_CS_GPIOS_PIN(0);
    4306:	f240 131d 	movw	r3, #285	; 0x11d
	driver->cs_ctrl.delay = 1U; //jj was 0U
    430a:	2601      	movs	r6, #1
	driver->cs_ctrl.gpio_pin = DT_INST_SPI_DEV_CS_GPIOS_PIN(0);
    430c:	8223      	strh	r3, [r4, #16]
	driver->spi_config.cs = &driver->cs_ctrl;
    430e:	f104 0308 	add.w	r3, r4, #8
	driver->cs_ctrl.gpio_dev = device_get_binding(
    4312:	60a0      	str	r0, [r4, #8]
	driver->cs_ctrl.delay = 1U; //jj was 0U
    4314:	60e6      	str	r6, [r4, #12]
	driver->spi_config.cs = &driver->cs_ctrl;
    4316:	61e3      	str	r3, [r4, #28]
    4318:	4826      	ldr	r0, [pc, #152]	; (43b4 <ssd1306_init+0xec>)
    431a:	f015 ffeb 	bl	1a2f4 <z_impl_device_get_binding>
	driver->data_cmd = device_get_binding(
    431e:	6220      	str	r0, [r4, #32]
	if (driver->data_cmd == NULL) {
    4320:	2800      	cmp	r0, #0
    4322:	d0da      	beq.n	42da <ssd1306_init+0x12>
	gpio_pin_configure(driver->data_cmd,
    4324:	211c      	movs	r1, #28
    4326:	f01a f9ed 	bl	1e704 <gpio_pin_configure.constprop.0>
	uint8_t cmd_buf[] = {
    432a:	f24a 63a4 	movw	r3, #42660	; 0xa6a4
    432e:	f8ad 3000 	strh.w	r3, [sp]
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
    4332:	68e8      	ldr	r0, [r5, #12]
    4334:	4633      	mov	r3, r6
    4336:	2202      	movs	r2, #2
    4338:	4669      	mov	r1, sp
    433a:	f01a f952 	bl	1e5e2 <ssd1306_write_bus.isra.0>
    433e:	4604      	mov	r4, r0
    4340:	b110      	cbz	r0, 4348 <ssd1306_init+0x80>
		return -EIO;
    4342:	f06f 0404 	mvn.w	r4, #4
    4346:	e7ca      	b.n	42de <ssd1306_init+0x16>
	struct ssd1306_data *driver = dev->data;
    4348:	68ef      	ldr	r7, [r5, #12]
	return z_impl_k_sleep(timeout);
    434a:	2100      	movs	r1, #0
    434c:	2021      	movs	r0, #33	; 0x21
    434e:	f016 fdf3 	bl	1af38 <z_impl_k_sleep>
	gpio_pin_set(driver->reset,
    4352:	6838      	ldr	r0, [r7, #0]
    4354:	4622      	mov	r2, r4
    4356:	2104      	movs	r1, #4
    4358:	f01a f925 	bl	1e5a6 <gpio_pin_set>
    435c:	2100      	movs	r1, #0
    435e:	2021      	movs	r0, #33	; 0x21
    4360:	f016 fdea 	bl	1af38 <z_impl_k_sleep>
	gpio_pin_set(driver->reset,
    4364:	6838      	ldr	r0, [r7, #0]
    4366:	4632      	mov	r2, r6
    4368:	2104      	movs	r1, #4
    436a:	f01a f91c 	bl	1e5a6 <gpio_pin_set>
	if (ssd1306_suspend(dev)){
    436e:	4628      	mov	r0, r5
    4370:	f01a f9bb 	bl	1e6ea <ssd1306_suspend>
    4374:	2800      	cmp	r0, #0
    4376:	d1e4      	bne.n	4342 <ssd1306_init+0x7a>
	uint8_t cmd_buf[] = {
    4378:	4b10      	ldr	r3, [pc, #64]	; (43bc <ssd1306_init+0xf4>)
    437a:	aa01      	add	r2, sp, #4
    437c:	f103 0718 	add.w	r7, r3, #24
    4380:	4616      	mov	r6, r2
    4382:	6818      	ldr	r0, [r3, #0]
    4384:	6859      	ldr	r1, [r3, #4]
    4386:	4614      	mov	r4, r2
    4388:	c403      	stmia	r4!, {r0, r1}
    438a:	3308      	adds	r3, #8
    438c:	42bb      	cmp	r3, r7
    438e:	4622      	mov	r2, r4
    4390:	d1f7      	bne.n	4382 <ssd1306_init+0xba>
    4392:	781b      	ldrb	r3, [r3, #0]
    4394:	7023      	strb	r3, [r4, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
    4396:	68e8      	ldr	r0, [r5, #12]
    4398:	2301      	movs	r3, #1
    439a:	2219      	movs	r2, #25
    439c:	4631      	mov	r1, r6
    439e:	f01a f920 	bl	1e5e2 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_everything(dev)) { 
    43a2:	4604      	mov	r4, r0
    43a4:	2800      	cmp	r0, #0
    43a6:	d1cc      	bne.n	4342 <ssd1306_init+0x7a>
	ssd1306_resume(dev);
    43a8:	4628      	mov	r0, r5
    43aa:	f01a f991 	bl	1e6d0 <ssd1306_resume>
	return 0;
    43ae:	e796      	b.n	42de <ssd1306_init+0x16>
    43b0:	000288e1 	.word	0x000288e1
    43b4:	0002879f 	.word	0x0002879f
    43b8:	04c4b400 	.word	0x04c4b400
    43bc:	000271cc 	.word	0x000271cc

000043c0 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    43c0:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    43c2:	4b08      	ldr	r3, [pc, #32]	; (43e4 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    43c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    43c8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    43cc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    43d0:	4290      	cmp	r0, r2
    43d2:	d100      	bne.n	43d6 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    43d4:	4770      	bx	lr
    43d6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    43da:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    43dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    43e0:	e7f2      	b.n	43c8 <handle_next_cycle_case+0x8>
    43e2:	bf00      	nop
    43e4:	40011000 	.word	0x40011000

000043e8 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    43e8:	4b07      	ldr	r3, [pc, #28]	; (4408 <rtc_nrf_isr+0x20>)
    43ea:	2200      	movs	r2, #0
    43ec:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    43ee:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    43f0:	4a06      	ldr	r2, [pc, #24]	; (440c <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    43f2:	4b07      	ldr	r3, [pc, #28]	; (4410 <rtc_nrf_isr+0x28>)
    43f4:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    43f8:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    43fa:	1ac0      	subs	r0, r0, r3
    43fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    4400:	4403      	add	r3, r0
    4402:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    4404:	f017 b832 	b.w	1b46c <z_clock_announce>
    4408:	40011140 	.word	0x40011140
    440c:	200016a0 	.word	0x200016a0
    4410:	40011000 	.word	0x40011000

00004414 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    4414:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    4416:	4d10      	ldr	r5, [pc, #64]	; (4458 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4418:	4b10      	ldr	r3, [pc, #64]	; (445c <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    441a:	2400      	movs	r4, #0
    441c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4420:	601c      	str	r4, [r3, #0]
    4422:	681b      	ldr	r3, [r3, #0]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4424:	4b0e      	ldr	r3, [pc, #56]	; (4460 <z_clock_driver_init+0x4c>)
    4426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    442a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    442e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4432:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4436:	4622      	mov	r2, r4
    4438:	2101      	movs	r1, #1
    443a:	2011      	movs	r0, #17
    443c:	f000 f916 	bl	466c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4440:	2011      	movs	r0, #17
    4442:	f000 f8e1 	bl	4608 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4446:	4a07      	ldr	r2, [pc, #28]	; (4464 <z_clock_driver_init+0x50>)
    4448:	2301      	movs	r3, #1
    444a:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    444c:	2002      	movs	r0, #2
    444e:	602b      	str	r3, [r5, #0]
    4450:	f7ff fdda 	bl	4008 <z_nrf_clock_control_lf_on>

	return 0;
}
    4454:	4620      	mov	r0, r4
    4456:	bd38      	pop	{r3, r4, r5, pc}
    4458:	40011000 	.word	0x40011000
    445c:	40011140 	.word	0x40011140
    4460:	e000e100 	.word	0xe000e100
    4464:	40011008 	.word	0x40011008

00004468 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    4468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    446a:	4b2d      	ldr	r3, [pc, #180]	; (4520 <z_clock_set_timeout+0xb8>)
    446c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4470:	bf08      	it	eq
    4472:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4474:	3801      	subs	r0, #1
    4476:	2800      	cmp	r0, #0
    4478:	dd40      	ble.n	44fc <z_clock_set_timeout+0x94>
    447a:	4298      	cmp	r0, r3
    447c:	bfa8      	it	ge
    447e:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    4480:	4c28      	ldr	r4, [pc, #160]	; (4524 <z_clock_set_timeout+0xbc>)

	uint32_t unannounced = counter_sub(counter(), last_count);
    4482:	4a29      	ldr	r2, [pc, #164]	; (4528 <z_clock_set_timeout+0xc0>)
    4484:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    4488:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    448a:	4e28      	ldr	r6, [pc, #160]	; (452c <z_clock_set_timeout+0xc4>)
	return (a - b) & COUNTER_MAX;
    448c:	1a9b      	subs	r3, r3, r2
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    448e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    4492:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
		ticks = 0;
    4496:	bf18      	it	ne
    4498:	2000      	movne	r0, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    449a:	3501      	adds	r5, #1
    449c:	4428      	add	r0, r5
    p_reg->INTENCLR = mask;
    449e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    44a2:	4d1f      	ldr	r5, [pc, #124]	; (4520 <z_clock_set_timeout+0xb8>)
    44a4:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
    44a8:	42a8      	cmp	r0, r5
    44aa:	bf94      	ite	ls
    44ac:	1815      	addls	r5, r2, r0
    44ae:	1955      	addhi	r5, r2, r5
     return p_reg->COUNTER;
    44b0:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    44b4:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    44b8:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
    44ba:	1a9b      	subs	r3, r3, r2
    44bc:	6037      	str	r7, [r6, #0]
    44be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    44c2:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
    44c4:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    44c6:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    44ca:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    44ce:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    44d2:	d104      	bne.n	44de <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
    44d4:	200f      	movs	r0, #15
    44d6:	f022 f812 	bl	264fe <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    44da:	6037      	str	r7, [r6, #0]
    44dc:	6833      	ldr	r3, [r6, #0]
    44de:	4b14      	ldr	r3, [pc, #80]	; (4530 <z_clock_set_timeout+0xc8>)
    44e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    44e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    44e8:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    44ec:	1a2b      	subs	r3, r5, r0
    44ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    44f2:	2b01      	cmp	r3, #1
    44f4:	d104      	bne.n	4500 <z_clock_set_timeout+0x98>
		handle_next_cycle_case(t);
    44f6:	f7ff ff63 	bl	43c0 <handle_next_cycle_case>
    44fa:	e00b      	b.n	4514 <z_clock_set_timeout+0xac>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    44fc:	2000      	movs	r0, #0
    44fe:	e7bf      	b.n	4480 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    4500:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4504:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    4508:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    450c:	1a2d      	subs	r5, r5, r0
    450e:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
    4510:	022b      	lsls	r3, r5, #8
    4512:	d4f0      	bmi.n	44f6 <z_clock_set_timeout+0x8e>
    p_reg->INTENSET = mask;
    4514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4518:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    451c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    451e:	bf00      	nop
    4520:	007fffff 	.word	0x007fffff
    4524:	40011000 	.word	0x40011000
    4528:	200016a0 	.word	0x200016a0
    452c:	40011140 	.word	0x40011140
    4530:	e000e100 	.word	0xe000e100

00004534 <z_clock_elapsed>:
	__asm__ volatile(
    4534:	f04f 0220 	mov.w	r2, #32
    4538:	f3ef 8311 	mrs	r3, BASEPRI
    453c:	f382 8811 	msr	BASEPRI, r2
    4540:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    4544:	4a06      	ldr	r2, [pc, #24]	; (4560 <z_clock_elapsed+0x2c>)
    4546:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    454a:	4a06      	ldr	r2, [pc, #24]	; (4564 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    454c:	6812      	ldr	r2, [r2, #0]
    454e:	1a80      	subs	r0, r0, r2
    4550:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    4554:	f383 8811 	msr	BASEPRI, r3
    4558:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    455c:	4770      	bx	lr
    455e:	bf00      	nop
    4560:	40011000 	.word	0x40011000
    4564:	200016a0 	.word	0x200016a0

00004568 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4568:	4a0a      	ldr	r2, [pc, #40]	; (4594 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    456a:	490b      	ldr	r1, [pc, #44]	; (4598 <arch_swap+0x30>)
	_current->arch.basepri = key;
    456c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    456e:	6809      	ldr	r1, [r1, #0]
    4570:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4574:	4909      	ldr	r1, [pc, #36]	; (459c <arch_swap+0x34>)
	_current->arch.basepri = key;
    4576:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4578:	684b      	ldr	r3, [r1, #4]
    457a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    457e:	604b      	str	r3, [r1, #4]
    4580:	2300      	movs	r3, #0
    4582:	f383 8811 	msr	BASEPRI, r3
    4586:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    458a:	6893      	ldr	r3, [r2, #8]
}
    458c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    4590:	4770      	bx	lr
    4592:	bf00      	nop
    4594:	20002e90 	.word	0x20002e90
    4598:	00028500 	.word	0x00028500
    459c:	e000ed00 	.word	0xe000ed00

000045a0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    45a0:	490f      	ldr	r1, [pc, #60]	; (45e0 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    45a2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    45a4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    45a8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    45aa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    45ae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    45b2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    45b4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    45b8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    45bc:	4f09      	ldr	r7, [pc, #36]	; (45e4 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    45be:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    45c2:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    45c4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    45c6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    45c8:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    45ca:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    45cc:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    45ce:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    45d2:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    45d6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    45da:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    45de:	4770      	bx	lr
    ldr r1, =_kernel
    45e0:	20002e90 	.word	0x20002e90
    ldr v4, =_SCS_ICSR
    45e4:	e000ed04 	.word	0xe000ed04

000045e8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    45e8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    45ec:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    45ee:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    45f2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    45f6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    45f8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    45fc:	2902      	cmp	r1, #2
    beq _oops
    45fe:	d0ff      	beq.n	4600 <_oops>

00004600 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4600:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    4602:	f01a f89e 	bl	1e742 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    4606:	bd01      	pop	{r0, pc}

00004608 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4608:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    460a:	2b00      	cmp	r3, #0
    460c:	db08      	blt.n	4620 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    460e:	2201      	movs	r2, #1
    4610:	f000 001f 	and.w	r0, r0, #31
    4614:	fa02 f000 	lsl.w	r0, r2, r0
    4618:	095b      	lsrs	r3, r3, #5
    461a:	4a02      	ldr	r2, [pc, #8]	; (4624 <arch_irq_enable+0x1c>)
    461c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    4620:	4770      	bx	lr
    4622:	bf00      	nop
    4624:	e000e100 	.word	0xe000e100

00004628 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    4628:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    462a:	2b00      	cmp	r3, #0
    462c:	db0d      	blt.n	464a <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    462e:	2201      	movs	r2, #1
    4630:	095b      	lsrs	r3, r3, #5
    4632:	f000 001f 	and.w	r0, r0, #31
    4636:	fa02 f000 	lsl.w	r0, r2, r0
    463a:	3320      	adds	r3, #32
    463c:	4a03      	ldr	r2, [pc, #12]	; (464c <arch_irq_disable+0x24>)
    463e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4642:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4646:	f3bf 8f6f 	isb	sy
}
    464a:	4770      	bx	lr
    464c:	e000e100 	.word	0xe000e100

00004650 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4650:	4b05      	ldr	r3, [pc, #20]	; (4668 <arch_irq_is_enabled+0x18>)
    4652:	0942      	lsrs	r2, r0, #5
    4654:	f000 001f 	and.w	r0, r0, #31
    4658:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    465c:	2301      	movs	r3, #1
    465e:	fa03 f000 	lsl.w	r0, r3, r0
}
    4662:	4010      	ands	r0, r2
    4664:	4770      	bx	lr
    4666:	bf00      	nop
    4668:	e000e100 	.word	0xe000e100

0000466c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    466c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    466e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4670:	bfa8      	it	ge
    4672:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    4676:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    467a:	bfb8      	it	lt
    467c:	4b06      	ldrlt	r3, [pc, #24]	; (4698 <z_arm_irq_priority_set+0x2c>)
    467e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4682:	bfac      	ite	ge
    4684:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4688:	f000 000f 	andlt.w	r0, r0, #15
    468c:	b2c9      	uxtb	r1, r1
    468e:	bfb4      	ite	lt
    4690:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4692:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    4696:	4770      	bx	lr
    4698:	e000ed14 	.word	0xe000ed14

0000469c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    469c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    469e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    46a0:	4b04      	ldr	r3, [pc, #16]	; (46b4 <_arch_isr_direct_pm+0x18>)
    46a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    46a4:	b118      	cbz	r0, 46ae <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    46a6:	2200      	movs	r2, #0
    46a8:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
    46aa:	f021 fcbb 	bl	26024 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    46ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    46b0:	bd08      	pop	{r3, pc}
    46b2:	bf00      	nop
    46b4:	20002e90 	.word	0x20002e90

000046b8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    46b8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    46bc:	9b00      	ldr	r3, [sp, #0]
    46be:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    46c2:	490a      	ldr	r1, [pc, #40]	; (46ec <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    46c4:	9b01      	ldr	r3, [sp, #4]
    46c6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    46ca:	9b02      	ldr	r3, [sp, #8]
    46cc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    46d0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    46d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    46d8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    46dc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    46e0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    46e2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    46e4:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    46e6:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    46e8:	4770      	bx	lr
    46ea:	bf00      	nop
    46ec:	0001deeb 	.word	0x0001deeb

000046f0 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    46f0:	b508      	push	{r3, lr}
    46f2:	4606      	mov	r6, r0
    46f4:	460d      	mov	r5, r1
    46f6:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    46f8:	f000 f9a4 	bl	4a44 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    46fc:	4b07      	ldr	r3, [pc, #28]	; (471c <arch_switch_to_main_thread+0x2c>)
    46fe:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4700:	4620      	mov	r0, r4
    4702:	f385 8809 	msr	PSP, r5
    4706:	2100      	movs	r1, #0
    4708:	b663      	cpsie	if
    470a:	f381 8811 	msr	BASEPRI, r1
    470e:	f3bf 8f6f 	isb	sy
    4712:	2200      	movs	r2, #0
    4714:	2300      	movs	r3, #0
    4716:	f019 fbe8 	bl	1deea <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    471a:	bf00      	nop
    471c:	20002e90 	.word	0x20002e90

00004720 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4720:	4901      	ldr	r1, [pc, #4]	; (4728 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4722:	2210      	movs	r2, #16
	str	r2, [r1]
    4724:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4726:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4728:	e000ed10 	.word	0xe000ed10

0000472c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    472c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    472e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4730:	f380 8811 	msr	BASEPRI, r0
	isb
    4734:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4738:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    473c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    473e:	b662      	cpsie	i
	isb
    4740:	f3bf 8f6f 	isb	sy

	bx	lr
    4744:	4770      	bx	lr
    4746:	bf00      	nop

00004748 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4748:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    474a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    474c:	f381 8811 	msr	BASEPRI, r1

	wfe
    4750:	bf20      	wfe

	msr	BASEPRI, r0
    4752:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4756:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4758:	4770      	bx	lr
    475a:	bf00      	nop

0000475c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    475c:	bf30      	wfi
    b z_SysNmiOnReset
    475e:	f7ff bffd 	b.w	475c <z_SysNmiOnReset>
    4762:	bf00      	nop

00004764 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4764:	4a0e      	ldr	r2, [pc, #56]	; (47a0 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4766:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4768:	4b0e      	ldr	r3, [pc, #56]	; (47a4 <z_arm_prep_c+0x40>)
    476a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    476e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4770:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4774:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4778:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    477c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    4784:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    4788:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    478c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4790:	f015 fe1a 	bl	1a3c8 <z_bss_zero>
	z_data_copy();
    4794:	f015 fe22 	bl	1a3dc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4798:	f000 f926 	bl	49e8 <z_arm_interrupt_init>
	z_cstart();
    479c:	f015 fe5c 	bl	1a458 <z_cstart>
    47a0:	00000000 	.word	0x00000000
    47a4:	e000ed00 	.word	0xe000ed00

000047a8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    47a8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    47aa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    47ac:	4a0b      	ldr	r2, [pc, #44]	; (47dc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    47ae:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    47b0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    47b2:	bf1e      	ittt	ne
	movne	r1, #0
    47b4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    47b6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
    47b8:	f021 fc34 	blne	26024 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    47bc:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    47be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    47c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    47c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    47ca:	4905      	ldr	r1, [pc, #20]	; (47e0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    47cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    47ce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    47d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    47d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    47d6:	4903      	ldr	r1, [pc, #12]	; (47e4 <_isr_wrapper+0x3c>)
	bx r1
    47d8:	4708      	bx	r1
    47da:	0000      	.short	0x0000
	ldr r2, =_kernel
    47dc:	20002e90 	.word	0x20002e90
	ldr r1, =_sw_isr_table
    47e0:	00027004 	.word	0x00027004
	ldr r1, =z_arm_int_exit
    47e4:	000049cd 	.word	0x000049cd

000047e8 <__start>:
    msr CONTROL, r0
    isb
#endif

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    47e8:	f01a f90a 	bl	1ea00 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    47ec:	2020      	movs	r0, #32
    msr BASEPRI, r0
    47ee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    47f2:	4808      	ldr	r0, [pc, #32]	; (4814 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    47f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    47f8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    47fa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    47fe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4802:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4804:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4806:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    480a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    480e:	f7ff ffa9 	bl	4764 <z_arm_prep_c>
    4812:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    4814:	200044b8 	.word	0x200044b8

00004818 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4818:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    481c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4820:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4822:	4672      	mov	r2, lr
	bl z_arm_fault
    4824:	f000 f84e 	bl	48c4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4828:	bd01      	pop	{r0, pc}
    482a:	bf00      	nop

0000482c <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    482c:	4b0c      	ldr	r3, [pc, #48]	; (4860 <mem_manage_fault.isra.0+0x34>)
    482e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4834:	0792      	lsls	r2, r2, #30
    4836:	d508      	bpl.n	484a <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    4838:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    483a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    483c:	0612      	lsls	r2, r2, #24
    483e:	d504      	bpl.n	484a <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    4840:	b118      	cbz	r0, 484a <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    4848:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    484a:	4b05      	ldr	r3, [pc, #20]	; (4860 <mem_manage_fault.isra.0+0x34>)
    484c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    484e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    4850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4852:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    4854:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4856:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    485a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    485c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    485e:	4770      	bx	lr
    4860:	e000ed00 	.word	0xe000ed00

00004864 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4864:	4b0d      	ldr	r3, [pc, #52]	; (489c <bus_fault.isra.0+0x38>)
    4866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    486a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    486c:	0592      	lsls	r2, r2, #22
    486e:	d508      	bpl.n	4882 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4870:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4874:	0412      	lsls	r2, r2, #16
    4876:	d504      	bpl.n	4882 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    4878:	b118      	cbz	r0, 4882 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    487a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    487c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4880:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4882:	4b06      	ldr	r3, [pc, #24]	; (489c <bus_fault.isra.0+0x38>)
    4884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4888:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    488a:	bf58      	it	pl
    488c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    488e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    4890:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4892:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    4896:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4898:	7008      	strb	r0, [r1, #0]

	return reason;
}
    489a:	4770      	bx	lr
    489c:	e000ed00 	.word	0xe000ed00

000048a0 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    48a0:	4b07      	ldr	r3, [pc, #28]	; (48c0 <usage_fault.isra.0+0x20>)
    48a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    48a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    48a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    48a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    48aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    48ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    48ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    48b0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    48b4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    48b8:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    48ba:	2000      	movs	r0, #0
    48bc:	4770      	bx	lr
    48be:	bf00      	nop
    48c0:	e000ed00 	.word	0xe000ed00

000048c4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    48c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    48c6:	4b39      	ldr	r3, [pc, #228]	; (49ac <z_arm_fault+0xe8>)
    48c8:	685b      	ldr	r3, [r3, #4]
{
    48ca:	b08b      	sub	sp, #44	; 0x2c
    48cc:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    48ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
    48d2:	2500      	movs	r5, #0
    48d4:	f385 8811 	msr	BASEPRI, r5
    48d8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    48dc:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    48e0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    48e4:	d111      	bne.n	490a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    48e6:	f002 010c 	and.w	r1, r2, #12
    48ea:	2908      	cmp	r1, #8
    48ec:	d00d      	beq.n	490a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    48ee:	0711      	lsls	r1, r2, #28
    48f0:	d401      	bmi.n	48f6 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    48f2:	4604      	mov	r4, r0
			*nested_exc = true;
    48f4:	2501      	movs	r5, #1
	*recoverable = false;
    48f6:	2200      	movs	r2, #0
    48f8:	3b03      	subs	r3, #3
    48fa:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    48fe:	2b03      	cmp	r3, #3
    4900:	d84d      	bhi.n	499e <z_arm_fault+0xda>
    4902:	e8df f003 	tbb	[pc, r3]
    4906:	4404      	.short	0x4404
    4908:	4148      	.short	0x4148
		return NULL;
    490a:	462c      	mov	r4, r5
    490c:	e7f3      	b.n	48f6 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    490e:	4b27      	ldr	r3, [pc, #156]	; (49ac <z_arm_fault+0xe8>)
    4910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4912:	0792      	lsls	r2, r2, #30
    4914:	d443      	bmi.n	499e <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4918:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    491c:	d008      	beq.n	4930 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
    491e:	4b24      	ldr	r3, [pc, #144]	; (49b0 <z_arm_fault+0xec>)
    4920:	781b      	ldrb	r3, [r3, #0]
    4922:	b31b      	cbz	r3, 496c <z_arm_fault+0xa8>
			reason = mem_manage_fault(esf, 1, recoverable);
    4924:	f10d 0107 	add.w	r1, sp, #7
    4928:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    492a:	f7ff ff7f 	bl	482c <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    492e:	4603      	mov	r3, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4930:	f89d 2007 	ldrb.w	r2, [sp, #7]
    4934:	b9c2      	cbnz	r2, 4968 <z_arm_fault+0xa4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4936:	ae02      	add	r6, sp, #8
    4938:	f104 0720 	add.w	r7, r4, #32
    493c:	6820      	ldr	r0, [r4, #0]
    493e:	6861      	ldr	r1, [r4, #4]
    4940:	4632      	mov	r2, r6
    4942:	c203      	stmia	r2!, {r0, r1}
    4944:	3408      	adds	r4, #8
    4946:	42bc      	cmp	r4, r7
    4948:	4616      	mov	r6, r2
    494a:	d1f7      	bne.n	493c <z_arm_fault+0x78>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    494c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    494e:	b345      	cbz	r5, 49a2 <z_arm_fault+0xde>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4950:	f3c2 0108 	ubfx	r1, r2, #0, #9
    4954:	b921      	cbnz	r1, 4960 <z_arm_fault+0x9c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4956:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    495a:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    495e:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4960:	a902      	add	r1, sp, #8
    4962:	4618      	mov	r0, r3
    4964:	f019 feeb 	bl	1e73e <z_arm_fatal_error>
}
    4968:	b00b      	add	sp, #44	; 0x2c
    496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    496c:	4b11      	ldr	r3, [pc, #68]	; (49b4 <z_arm_fault+0xf0>)
    496e:	781b      	ldrb	r3, [r3, #0]
    4970:	b12b      	cbz	r3, 497e <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
    4972:	f10d 0107 	add.w	r1, sp, #7
    4976:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4978:	f7ff ff74 	bl	4864 <bus_fault.isra.0>
    497c:	e7d7      	b.n	492e <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    497e:	4b0e      	ldr	r3, [pc, #56]	; (49b8 <z_arm_fault+0xf4>)
    4980:	8818      	ldrh	r0, [r3, #0]
    4982:	b283      	uxth	r3, r0
    4984:	2b00      	cmp	r3, #0
    4986:	d0d3      	beq.n	4930 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
    4988:	f7ff ff8a 	bl	48a0 <usage_fault.isra.0>
    498c:	e7cf      	b.n	492e <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    498e:	f10d 0107 	add.w	r1, sp, #7
    4992:	2000      	movs	r0, #0
    4994:	e7c9      	b.n	492a <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    4996:	f10d 0107 	add.w	r1, sp, #7
    499a:	2000      	movs	r0, #0
    499c:	e7ec      	b.n	4978 <z_arm_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    499e:	2300      	movs	r3, #0
    49a0:	e7c6      	b.n	4930 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    49a2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    49a6:	f022 0201 	bic.w	r2, r2, #1
    49aa:	e7d8      	b.n	495e <z_arm_fault+0x9a>
    49ac:	e000ed00 	.word	0xe000ed00
    49b0:	e000ed28 	.word	0xe000ed28
    49b4:	e000ed29 	.word	0xe000ed29
    49b8:	e000ed2a 	.word	0xe000ed2a

000049bc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    49bc:	4a02      	ldr	r2, [pc, #8]	; (49c8 <z_arm_fault_init+0xc>)
    49be:	6953      	ldr	r3, [r2, #20]
    49c0:	f043 0310 	orr.w	r3, r3, #16
    49c4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    49c6:	4770      	bx	lr
    49c8:	e000ed00 	.word	0xe000ed00

000049cc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    49cc:	4b04      	ldr	r3, [pc, #16]	; (49e0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    49ce:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    49d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    49d2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    49d4:	d003      	beq.n	49de <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    49d6:	4903      	ldr	r1, [pc, #12]	; (49e4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    49d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    49dc:	600a      	str	r2, [r1, #0]

000049de <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    49de:	4770      	bx	lr
	ldr r3, =_kernel
    49e0:	20002e90 	.word	0x20002e90
	ldr r1, =_SCS_ICSR
    49e4:	e000ed04 	.word	0xe000ed04

000049e8 <z_arm_interrupt_init>:
    49e8:	4804      	ldr	r0, [pc, #16]	; (49fc <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    49ea:	2300      	movs	r3, #0
    49ec:	2120      	movs	r1, #32
    49ee:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    49f0:	3301      	adds	r3, #1
    49f2:	2b27      	cmp	r3, #39	; 0x27
    49f4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    49f8:	d1f9      	bne.n	49ee <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    49fa:	4770      	bx	lr
    49fc:	e000e100 	.word	0xe000e100

00004a00 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4a00:	b508      	push	{r3, lr}
	if (_current == thread) {
    4a02:	4b0e      	ldr	r3, [pc, #56]	; (4a3c <z_impl_k_thread_abort+0x3c>)
    4a04:	689b      	ldr	r3, [r3, #8]
    4a06:	4283      	cmp	r3, r0
    4a08:	d107      	bne.n	4a1a <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4a0a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4a0e:	b193      	cbz	r3, 4a36 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4a10:	4a0b      	ldr	r2, [pc, #44]	; (4a40 <z_impl_k_thread_abort+0x40>)
    4a12:	6853      	ldr	r3, [r2, #4]
    4a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4a18:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    4a1a:	f016 f8eb 	bl	1abf4 <z_thread_single_abort>
	__asm__ volatile(
    4a1e:	f04f 0320 	mov.w	r3, #32
    4a22:	f3ef 8011 	mrs	r0, BASEPRI
    4a26:	f383 8811 	msr	BASEPRI, r3
    4a2a:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    4a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    4a32:	f021 bc7c 	b.w	2632e <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    4a36:	f016 fbc7 	bl	1b1c8 <z_self_abort>
    4a3a:	bf00      	nop
    4a3c:	20002e90 	.word	0x20002e90
    4a40:	e000ed00 	.word	0xe000ed00

00004a44 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4a44:	4b02      	ldr	r3, [pc, #8]	; (4a50 <z_arm_configure_static_mpu_regions+0xc>)
    4a46:	4a03      	ldr	r2, [pc, #12]	; (4a54 <z_arm_configure_static_mpu_regions+0x10>)
    4a48:	4803      	ldr	r0, [pc, #12]	; (4a58 <z_arm_configure_static_mpu_regions+0x14>)
    4a4a:	2101      	movs	r1, #1
    4a4c:	f000 b886 	b.w	4b5c <arm_core_mpu_configure_static_mpu_regions>
    4a50:	20010000 	.word	0x20010000
    4a54:	20000000 	.word	0x20000000
    4a58:	00027284 	.word	0x00027284

00004a5c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    4a5e:	4f1e      	ldr	r7, [pc, #120]	; (4ad8 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4a60:	2600      	movs	r6, #0
    4a62:	428e      	cmp	r6, r1
    4a64:	db01      	blt.n	4a6a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4a66:	4610      	mov	r0, r2
    4a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    4a6a:	6844      	ldr	r4, [r0, #4]
    4a6c:	b384      	cbz	r4, 4ad0 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    4a6e:	b153      	cbz	r3, 4a86 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4a70:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4a74:	ea14 0f0c 	tst.w	r4, ip
    4a78:	d118      	bne.n	4aac <mpu_configure_regions+0x50>
		&&
    4a7a:	2c1f      	cmp	r4, #31
    4a7c:	d916      	bls.n	4aac <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    4a7e:	6805      	ldr	r5, [r0, #0]
		&&
    4a80:	ea1c 0f05 	tst.w	ip, r5
    4a84:	d112      	bne.n	4aac <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4a86:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    4a88:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    4a8a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4a8e:	b2d2      	uxtb	r2, r2
    4a90:	d90f      	bls.n	4ab2 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    4a92:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4a96:	d80e      	bhi.n	4ab6 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4a98:	3c01      	subs	r4, #1
    4a9a:	fab4 f484 	clz	r4, r4
    4a9e:	f1c4 041f 	rsb	r4, r4, #31
    4aa2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4aa4:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4aa6:	ea4c 0404 	orr.w	r4, ip, r4
    4aaa:	d906      	bls.n	4aba <mpu_configure_regions+0x5e>
			return -EINVAL;
    4aac:	f06f 0215 	mvn.w	r2, #21
    4ab0:	e7d9      	b.n	4a66 <mpu_configure_regions+0xa>
		return REGION_32B;
    4ab2:	2408      	movs	r4, #8
    4ab4:	e7f6      	b.n	4aa4 <mpu_configure_regions+0x48>
		return REGION_4G;
    4ab6:	243e      	movs	r4, #62	; 0x3e
    4ab8:	e7f4      	b.n	4aa4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4aba:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    4abe:	4315      	orrs	r5, r2
    4ac0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4ac4:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    4ac8:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4aca:	60fd      	str	r5, [r7, #12]
		reg_index++;
    4acc:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4ace:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    4ad0:	3601      	adds	r6, #1
    4ad2:	300c      	adds	r0, #12
    4ad4:	e7c5      	b.n	4a62 <mpu_configure_regions+0x6>
    4ad6:	bf00      	nop
    4ad8:	e000ed90 	.word	0xe000ed90

00004adc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4adc:	4b03      	ldr	r3, [pc, #12]	; (4aec <arm_core_mpu_enable+0x10>)
    4ade:	2205      	movs	r2, #5
    4ae0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4ae2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4ae6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4aea:	4770      	bx	lr
    4aec:	e000ed90 	.word	0xe000ed90

00004af0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4af0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4af4:	4b01      	ldr	r3, [pc, #4]	; (4afc <arm_core_mpu_disable+0xc>)
    4af6:	2200      	movs	r2, #0
    4af8:	605a      	str	r2, [r3, #4]
}
    4afa:	4770      	bx	lr
    4afc:	e000ed90 	.word	0xe000ed90

00004b00 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4b00:	4913      	ldr	r1, [pc, #76]	; (4b50 <arm_mpu_init+0x50>)
    4b02:	6808      	ldr	r0, [r1, #0]
    4b04:	2808      	cmp	r0, #8
{
    4b06:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4b08:	d81e      	bhi.n	4b48 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4b0a:	f7ff fff1 	bl	4af0 <arm_core_mpu_disable>
	MPU->RNR = index;
    4b0e:	4c11      	ldr	r4, [pc, #68]	; (4b54 <arm_mpu_init+0x54>)
    4b10:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4b12:	2200      	movs	r2, #0
    4b14:	4290      	cmp	r0, r2
    4b16:	f101 010c 	add.w	r1, r1, #12
    4b1a:	d105      	bne.n	4b28 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4b1c:	4b0e      	ldr	r3, [pc, #56]	; (4b58 <arm_mpu_init+0x58>)
    4b1e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4b20:	f7ff ffdc 	bl	4adc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    4b24:	2000      	movs	r0, #0
}
    4b26:	bd10      	pop	{r4, pc}
    4b28:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4b2a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4b2e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4b32:	4313      	orrs	r3, r2
    4b34:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4b38:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4b3e:	f043 0301 	orr.w	r3, r3, #1
    4b42:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4b44:	3201      	adds	r2, #1
    4b46:	e7e5      	b.n	4b14 <arm_mpu_init+0x14>
		return -1;
    4b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4b4c:	e7eb      	b.n	4b26 <arm_mpu_init+0x26>
    4b4e:	bf00      	nop
    4b50:	00027290 	.word	0x00027290
    4b54:	e000ed90 	.word	0xe000ed90
    4b58:	20002f7a 	.word	0x20002f7a

00004b5c <arm_core_mpu_configure_static_mpu_regions>:
{
    4b5c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4b5e:	4c03      	ldr	r4, [pc, #12]	; (4b6c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4b60:	2301      	movs	r3, #1
    4b62:	7822      	ldrb	r2, [r4, #0]
    4b64:	f7ff ff7a 	bl	4a5c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4b68:	7020      	strb	r0, [r4, #0]
}
    4b6a:	bd10      	pop	{r4, pc}
    4b6c:	20002f7a 	.word	0x20002f7a

00004b70 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4b70:	4b01      	ldr	r3, [pc, #4]	; (4b78 <__stdout_hook_install+0x8>)
    4b72:	6018      	str	r0, [r3, #0]
}
    4b74:	4770      	bx	lr
    4b76:	bf00      	nop
    4b78:	20000338 	.word	0x20000338

00004b7c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b7e:	4f0a      	ldr	r7, [pc, #40]	; (4ba8 <z_impl_zephyr_write_stdout+0x2c>)
    4b80:	460d      	mov	r5, r1
    4b82:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4b84:	f1c0 0401 	rsb	r4, r0, #1
    4b88:	19a3      	adds	r3, r4, r6
    4b8a:	429d      	cmp	r5, r3
    4b8c:	dc01      	bgt.n	4b92 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    4b8e:	4628      	mov	r0, r5
    4b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    4b92:	7873      	ldrb	r3, [r6, #1]
    4b94:	2b0a      	cmp	r3, #10
    4b96:	d102      	bne.n	4b9e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    4b98:	683b      	ldr	r3, [r7, #0]
    4b9a:	200d      	movs	r0, #13
    4b9c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    4b9e:	683b      	ldr	r3, [r7, #0]
    4ba0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4ba4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4ba6:	e7ef      	b.n	4b88 <z_impl_zephyr_write_stdout+0xc>
    4ba8:	20000338 	.word	0x20000338

00004bac <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
    4bac:	b510      	push	{r4, lr}
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
    4bae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    4bb2:	4604      	mov	r4, r0
	sys_sem_take(&heap_sem, K_FOREVER);
    4bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4bb8:	480a      	ldr	r0, [pc, #40]	; (4be4 <_sbrk+0x38>)
    4bba:	f019 f987 	bl	1decc <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4bbe:	490a      	ldr	r1, [pc, #40]	; (4be8 <_sbrk+0x3c>)
    4bc0:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4bc2:	18e0      	adds	r0, r4, r3
    4bc4:	4c09      	ldr	r4, [pc, #36]	; (4bec <_sbrk+0x40>)
    4bc6:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
    4bca:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
    4bce:	4290      	cmp	r0, r2
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4bd0:	bf3a      	itte	cc
    4bd2:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
    4bd4:	6008      	strcc	r0, [r1, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
    4bd6:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
    4bda:	4802      	ldr	r0, [pc, #8]	; (4be4 <_sbrk+0x38>)
    4bdc:	f019 f971 	bl	1dec2 <sys_sem_give>

	return ret;
}
    4be0:	4620      	mov	r0, r4
    4be2:	bd10      	pop	{r4, pc}
    4be4:	20000d28 	.word	0x20000d28
    4be8:	200016a4 	.word	0x200016a4
    4bec:	20005598 	.word	0x20005598

00004bf0 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    4bf0:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    4bf2:	211d      	movs	r1, #29
    4bf4:	4804      	ldr	r0, [pc, #16]	; (4c08 <__chk_fail+0x18>)
    4bf6:	f7ff ffc1 	bl	4b7c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    4bfa:	4040      	eors	r0, r0
    4bfc:	f380 8811 	msr	BASEPRI, r0
    4c00:	f04f 0003 	mov.w	r0, #3
    4c04:	df02      	svc	2
	CODE_UNREACHABLE;
    4c06:	bf00      	nop
    4c08:	000288e7 	.word	0x000288e7

00004c0c <lvgl_init>:
	return 0;
}
#endif /* CONFIG_LVGL_POINTER_KSCAN */

static int lvgl_init(const struct device *dev)
{
    4c0c:	b510      	push	{r4, lr}
    4c0e:	b090      	sub	sp, #64	; 0x40
    4c10:	481f      	ldr	r0, [pc, #124]	; (4c90 <lvgl_init+0x84>)
    4c12:	f015 fb6f 	bl	1a2f4 <z_impl_device_get_binding>
	const struct device *display_dev =
		device_get_binding(CONFIG_LVGL_DISPLAY_DEV_NAME);
	int err = 0;
	lv_disp_drv_t disp_drv;

	if (display_dev == NULL) {
    4c16:	4604      	mov	r4, r0
    4c18:	2800      	cmp	r0, #0
    4c1a:	d033      	beq.n	4c84 <lvgl_init+0x78>

#if CONFIG_LVGL_LOG_LEVEL != 0
	lv_log_register_print_cb(lvgl_log);
#endif

	lv_init();
    4c1c:	f011 f94e 	bl	15ebc <lv_init>

#ifdef CONFIG_LVGL_USE_FILESYSTEM
	lvgl_fs_init();
#endif

	lv_disp_drv_init(&disp_drv);
    4c20:	a804      	add	r0, sp, #16
    4c22:	f013 ff4f 	bl	18ac4 <lv_disp_drv_init>
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	api->get_capabilities(dev, capabilities);
    4c26:	68a3      	ldr	r3, [r4, #8]
	disp_drv.user_data = (void *) display_dev;
    4c28:	940f      	str	r4, [sp, #60]	; 0x3c
    4c2a:	4620      	mov	r0, r4
    4c2c:	69db      	ldr	r3, [r3, #28]
    4c2e:	4669      	mov	r1, sp
    4c30:	4798      	blx	r3
	if (cap.x_resolution <= CONFIG_LVGL_HOR_RES_MAX) {
    4c32:	f8bd 3000 	ldrh.w	r3, [sp]
	disp_drv->buffer = &disp_buf;
    4c36:	4817      	ldr	r0, [pc, #92]	; (4c94 <lvgl_init+0x88>)
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    4c38:	4917      	ldr	r1, [pc, #92]	; (4c98 <lvgl_init+0x8c>)
	disp_drv->buffer = &disp_buf;
    4c3a:	9005      	str	r0, [sp, #20]
	if (cap.x_resolution <= CONFIG_LVGL_HOR_RES_MAX) {
    4c3c:	2b80      	cmp	r3, #128	; 0x80
		disp_drv->hor_res = cap.x_resolution;
    4c3e:	bf98      	it	ls
    4c40:	f8ad 3010 	strhls.w	r3, [sp, #16]
	if (cap.y_resolution <= CONFIG_LVGL_VER_RES_MAX) {
    4c44:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = -ENOTSUP;
    4c48:	bf8c      	ite	hi
    4c4a:	f06f 0485 	mvnhi.w	r4, #133	; 0x85
	int err = 0;
    4c4e:	2400      	movls	r4, #0
	if (cap.y_resolution <= CONFIG_LVGL_VER_RES_MAX) {
    4c50:	2b20      	cmp	r3, #32
		disp_drv->ver_res = cap.y_resolution;
    4c52:	bf94      	ite	ls
    4c54:	f8ad 3012 	strhls.w	r3, [sp, #18]
		err = -ENOTSUP;
    4c58:	f06f 0485 	mvnhi.w	r4, #133	; 0x85
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    4c5c:	f640 2338 	movw	r3, #2616	; 0xa38
    4c60:	2200      	movs	r2, #0
    4c62:	f020 fa6b 	bl	2513c <lv_disp_buf_init>

	err = lvgl_allocate_rendering_buffers(&disp_drv);
	if (err != 0) {
    4c66:	b954      	cbnz	r4, 4c7e <lvgl_init+0x72>
		return err;
	}

	if (set_lvgl_rendering_cb(&disp_drv) != 0) {
    4c68:	a804      	add	r0, sp, #16
    4c6a:	f000 f817 	bl	4c9c <set_lvgl_rendering_cb>
    4c6e:	b960      	cbnz	r0, 4c8a <lvgl_init+0x7e>
		LOG_ERR("Display not supported.");
		return -ENOTSUP;
	}

	if (lv_disp_drv_register(&disp_drv) == NULL) {
    4c70:	a804      	add	r0, sp, #16
    4c72:	f013 ff71 	bl	18b58 <lv_disp_drv_register>
    4c76:	fab0 f480 	clz	r4, r0
    4c7a:	0964      	lsrs	r4, r4, #5
    4c7c:	4264      	negs	r4, r4
#ifdef CONFIG_LVGL_POINTER_KSCAN
	lvgl_pointer_kscan_init();
#endif /* CONFIG_LVGL_POINTER_KSCAN */

	return 0;
}
    4c7e:	4620      	mov	r0, r4
    4c80:	b010      	add	sp, #64	; 0x40
    4c82:	bd10      	pop	{r4, pc}
		return -ENODEV;
    4c84:	f06f 0412 	mvn.w	r4, #18
    4c88:	e7f9      	b.n	4c7e <lvgl_init+0x72>
		return -ENOTSUP;
    4c8a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4c8e:	e7f6      	b.n	4c7e <lvgl_init+0x72>
    4c90:	00028797 	.word	0x00028797
    4c94:	200017f0 	.word	0x200017f0
    4c98:	200016a8 	.word	0x200016a8

00004c9c <set_lvgl_rendering_cb>:
 */

#include "lvgl_display.h"

int set_lvgl_rendering_cb(lv_disp_drv_t *disp_drv)
{
    4c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4c9e:	4604      	mov	r4, r0
	int err = 0;
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
    4ca0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4ca2:	6883      	ldr	r3, [r0, #8]
    4ca4:	4669      	mov	r1, sp
    4ca6:	69db      	ldr	r3, [r3, #28]
    4ca8:	4798      	blx	r3
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);

	switch (cap.current_pixel_format) {
    4caa:	f89d 300c 	ldrb.w	r3, [sp, #12]
    4cae:	2b08      	cmp	r3, #8
    4cb0:	d80a      	bhi.n	4cc8 <set_lvgl_rendering_cb+0x2c>
    4cb2:	b16b      	cbz	r3, 4cd0 <set_lvgl_rendering_cb+0x34>
    4cb4:	3b01      	subs	r3, #1
    4cb6:	2200      	movs	r2, #0
    4cb8:	2b07      	cmp	r3, #7
    4cba:	d809      	bhi.n	4cd0 <set_lvgl_rendering_cb+0x34>
    4cbc:	e8df f003 	tbb	[pc, r3]
    4cc0:	23082317 	.word	0x23082317
    4cc4:	0f080808 	.word	0x0f080808
    4cc8:	2b10      	cmp	r3, #16
    4cca:	d015      	beq.n	4cf8 <set_lvgl_rendering_cb+0x5c>
    4ccc:	2b20      	cmp	r3, #32
    4cce:	d013      	beq.n	4cf8 <set_lvgl_rendering_cb+0x5c>
		disp_drv->flush_cb = lvgl_flush_cb_mono;
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
		break;
	default:
		disp_drv->flush_cb = NULL;
    4cd0:	2300      	movs	r3, #0
		disp_drv->rounder_cb = NULL;
    4cd2:	e9c4 3303 	strd	r3, r3, [r4, #12]
		disp_drv->set_px_cb = NULL;
    4cd6:	6163      	str	r3, [r4, #20]
		err = -ENOTSUP;
    4cd8:	f06f 0085 	mvn.w	r0, #133	; 0x85
		break;

	}

	return err;
    4cdc:	e005      	b.n	4cea <set_lvgl_rendering_cb+0x4e>
		disp_drv->flush_cb = lvgl_flush_cb_32bit;
    4cde:	4b0d      	ldr	r3, [pc, #52]	; (4d14 <set_lvgl_rendering_cb+0x78>)
		disp_drv->rounder_cb = NULL;
    4ce0:	e9c4 3203 	strd	r3, r2, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_32bit;
    4ce4:	4b0c      	ldr	r3, [pc, #48]	; (4d18 <set_lvgl_rendering_cb+0x7c>)
		disp_drv->set_px_cb = lvgl_set_px_cb_24bit;
    4ce6:	6163      	str	r3, [r4, #20]
	int err = 0;
    4ce8:	2000      	movs	r0, #0
}
    4cea:	b004      	add	sp, #16
    4cec:	bd10      	pop	{r4, pc}
		disp_drv->flush_cb = lvgl_flush_cb_24bit;
    4cee:	4b0b      	ldr	r3, [pc, #44]	; (4d1c <set_lvgl_rendering_cb+0x80>)
		disp_drv->rounder_cb = NULL;
    4cf0:	e9c4 3203 	strd	r3, r2, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_24bit;
    4cf4:	4b0a      	ldr	r3, [pc, #40]	; (4d20 <set_lvgl_rendering_cb+0x84>)
    4cf6:	e7f6      	b.n	4ce6 <set_lvgl_rendering_cb+0x4a>
		disp_drv->flush_cb = lvgl_flush_cb_16bit;
    4cf8:	4b0a      	ldr	r3, [pc, #40]	; (4d24 <set_lvgl_rendering_cb+0x88>)
    4cfa:	60e3      	str	r3, [r4, #12]
		disp_drv->rounder_cb = NULL;
    4cfc:	2000      	movs	r0, #0
		disp_drv->set_px_cb = lvgl_set_px_cb_16bit;
    4cfe:	4b0a      	ldr	r3, [pc, #40]	; (4d28 <set_lvgl_rendering_cb+0x8c>)
		disp_drv->rounder_cb = NULL;
    4d00:	6120      	str	r0, [r4, #16]
		disp_drv->set_px_cb = lvgl_set_px_cb_16bit;
    4d02:	6163      	str	r3, [r4, #20]
		break;
    4d04:	e7f1      	b.n	4cea <set_lvgl_rendering_cb+0x4e>
		disp_drv->flush_cb = lvgl_flush_cb_mono;
    4d06:	4b09      	ldr	r3, [pc, #36]	; (4d2c <set_lvgl_rendering_cb+0x90>)
    4d08:	60e3      	str	r3, [r4, #12]
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
    4d0a:	4b09      	ldr	r3, [pc, #36]	; (4d30 <set_lvgl_rendering_cb+0x94>)
    4d0c:	6123      	str	r3, [r4, #16]
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
    4d0e:	4b09      	ldr	r3, [pc, #36]	; (4d34 <set_lvgl_rendering_cb+0x98>)
    4d10:	e7e9      	b.n	4ce6 <set_lvgl_rendering_cb+0x4a>
    4d12:	bf00      	nop
    4d14:	0001e997 	.word	0x0001e997
    4d18:	0001e9e3 	.word	0x0001e9e3
    4d1c:	0001e919 	.word	0x0001e919
    4d20:	0001e967 	.word	0x0001e967
    4d24:	0001e8b3 	.word	0x0001e8b3
    4d28:	0001e8ff 	.word	0x0001e8ff
    4d2c:	0001e769 	.word	0x0001e769
    4d30:	0001e87b 	.word	0x0001e87b
    4d34:	0001e7e3 	.word	0x0001e7e3

00004d38 <nordicsemi_nrf52_init>:
    4d38:	f04f 0320 	mov.w	r3, #32
    4d3c:	f3ef 8211 	mrs	r2, BASEPRI
    4d40:	f383 8811 	msr	BASEPRI, r3
    4d44:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4d48:	4906      	ldr	r1, [pc, #24]	; (4d64 <nordicsemi_nrf52_init+0x2c>)
    4d4a:	2301      	movs	r3, #1
    4d4c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4d50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4d54:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4d58:	f382 8811 	msr	BASEPRI, r2
    4d5c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4d60:	2000      	movs	r0, #0
    4d62:	4770      	bx	lr
    4d64:	4001e000 	.word	0x4001e000

00004d68 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4d68:	b120      	cbz	r0, 4d74 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    4d6a:	4b03      	ldr	r3, [pc, #12]	; (4d78 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4d6c:	0180      	lsls	r0, r0, #6
    4d6e:	f043 0301 	orr.w	r3, r3, #1
    4d72:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4d74:	4770      	bx	lr
    4d76:	bf00      	nop
    4d78:	00027210 	.word	0x00027210

00004d7c <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    4d7c:	4903      	ldr	r1, [pc, #12]	; (4d8c <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    4d7e:	4804      	ldr	r0, [pc, #16]	; (4d90 <save_id+0x14>)
    4d80:	79ca      	ldrb	r2, [r1, #7]
    4d82:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    4d86:	f7fe be35 	b.w	39f4 <settings_save_one>
    4d8a:	bf00      	nop
    4d8c:	20000000 	.word	0x20000000
    4d90:	00028914 	.word	0x00028914

00004d94 <set>:
{
    4d94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4d98:	4605      	mov	r5, r0
    4d9a:	4616      	mov	r6, r2
    4d9c:	461f      	mov	r7, r3
	if (!name) {
    4d9e:	b928      	cbnz	r0, 4dac <set+0x18>
		return -ENOENT;
    4da0:	f06f 0401 	mvn.w	r4, #1
}
    4da4:	4620      	mov	r0, r4
    4da6:	b002      	add	sp, #8
    4da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = settings_name_next(name, &next);
    4dac:	a901      	add	r1, sp, #4
    4dae:	f019 fb37 	bl	1e420 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    4db2:	491d      	ldr	r1, [pc, #116]	; (4e28 <set+0x94>)
    4db4:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    4db6:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    4db8:	4628      	mov	r0, r5
    4dba:	f021 fe79 	bl	26ab0 <strncmp>
    4dbe:	4604      	mov	r4, r0
    4dc0:	b9f0      	cbnz	r0, 4e00 <set+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4dc2:	f3bf 8f5b 	dmb	ish
    4dc6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4e38 <set+0xa4>
    4dca:	f8d8 3000 	ldr.w	r3, [r8]
    4dce:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    4dd2:	075b      	lsls	r3, r3, #29
    4dd4:	d501      	bpl.n	4dda <set+0x46>
{
    4dd6:	2400      	movs	r4, #0
    4dd8:	e7e4      	b.n	4da4 <set+0x10>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    4dda:	f1a8 0598 	sub.w	r5, r8, #152	; 0x98
    4dde:	2207      	movs	r2, #7
    4de0:	4629      	mov	r1, r5
    4de2:	4638      	mov	r0, r7
    4de4:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    4de6:	2806      	cmp	r0, #6
			(void)memset(bt_dev.id_addr, 0,
    4de8:	bf95      	itete	ls
    4dea:	f848 4c98 	strls.w	r4, [r8, #-152]
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    4dee:	2307      	movhi	r3, #7
			(void)memset(bt_dev.id_addr, 0,
    4df0:	f8c5 4003 	strls.w	r4, [r5, #3]
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    4df4:	fbb0 f0f3 	udivhi	r0, r0, r3
			bt_dev.id_count = 0U;
    4df8:	bf94      	ite	ls
    4dfa:	71ec      	strbls	r4, [r5, #7]
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    4dfc:	71e8      	strbhi	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    4dfe:	e7d1      	b.n	4da4 <set+0x10>
	if (!strncmp(name, "name", len)) {
    4e00:	490a      	ldr	r1, [pc, #40]	; (4e2c <set+0x98>)
    4e02:	4642      	mov	r2, r8
    4e04:	4628      	mov	r0, r5
    4e06:	f021 fe53 	bl	26ab0 <strncmp>
    4e0a:	4604      	mov	r4, r0
    4e0c:	2800      	cmp	r0, #0
    4e0e:	d1c7      	bne.n	4da0 <set+0xc>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    4e10:	4907      	ldr	r1, [pc, #28]	; (4e30 <set+0x9c>)
    4e12:	2241      	movs	r2, #65	; 0x41
    4e14:	4638      	mov	r0, r7
    4e16:	47b0      	blx	r6
		if (len < 0) {
    4e18:	2800      	cmp	r0, #0
    4e1a:	dbdc      	blt.n	4dd6 <set+0x42>
			bt_dev.name[len] = '\0';
    4e1c:	4b05      	ldr	r3, [pc, #20]	; (4e34 <set+0xa0>)
    4e1e:	4418      	add	r0, r3
    4e20:	f880 4120 	strb.w	r4, [r0, #288]	; 0x120
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    4e24:	e7be      	b.n	4da4 <set+0x10>
    4e26:	bf00      	nop
    4e28:	00028917 	.word	0x00028917
    4e2c:	00028a7d 	.word	0x00028a7d
    4e30:	20000120 	.word	0x20000120
    4e34:	20000000 	.word	0x20000000
    4e38:	20000098 	.word	0x20000098

00004e3c <bt_settings_encode_key>:
{
    4e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e40:	b088      	sub	sp, #32
    4e42:	799c      	ldrb	r4, [r3, #6]
    4e44:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    4e48:	795d      	ldrb	r5, [r3, #5]
    4e4a:	791e      	ldrb	r6, [r3, #4]
    4e4c:	78df      	ldrb	r7, [r3, #3]
    4e4e:	f893 c002 	ldrb.w	ip, [r3, #2]
    4e52:	f893 e001 	ldrb.w	lr, [r3, #1]
    4e56:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    4e58:	f1b8 0f00 	cmp.w	r8, #0
    4e5c:	d00e      	beq.n	4e7c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    4e5e:	e9cd 3806 	strd	r3, r8, [sp, #24]
    4e62:	e9cd ce04 	strd	ip, lr, [sp, #16]
    4e66:	4613      	mov	r3, r2
    4e68:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4e6c:	e9cd 4500 	strd	r4, r5, [sp]
    4e70:	4a08      	ldr	r2, [pc, #32]	; (4e94 <bt_settings_encode_key+0x58>)
    4e72:	f018 ff49 	bl	1dd08 <snprintk>
}
    4e76:	b008      	add	sp, #32
    4e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    4e7c:	e9cd e305 	strd	lr, r3, [sp, #20]
    4e80:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    4e84:	4613      	mov	r3, r2
    4e86:	e9cd 5601 	strd	r5, r6, [sp, #4]
    4e8a:	4a03      	ldr	r2, [pc, #12]	; (4e98 <bt_settings_encode_key+0x5c>)
    4e8c:	9400      	str	r4, [sp, #0]
    4e8e:	f018 ff3b 	bl	1dd08 <snprintk>
}
    4e92:	e7f0      	b.n	4e76 <bt_settings_encode_key+0x3a>
    4e94:	0002891a 	.word	0x0002891a
    4e98:	0002893e 	.word	0x0002893e

00004e9c <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4e9c:	4909      	ldr	r1, [pc, #36]	; (4ec4 <bt_settings_save_id+0x28>)
    4e9e:	f3bf 8f5b 	dmb	ish
    4ea2:	e851 3f00 	ldrex	r3, [r1]
    4ea6:	f043 0201 	orr.w	r2, r3, #1
    4eaa:	e841 2000 	strex	r0, r2, [r1]
    4eae:	2800      	cmp	r0, #0
    4eb0:	d1f7      	bne.n	4ea2 <bt_settings_save_id+0x6>
    4eb2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    4eb6:	07db      	lsls	r3, r3, #31
    4eb8:	d403      	bmi.n	4ec2 <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    4eba:	4803      	ldr	r0, [pc, #12]	; (4ec8 <bt_settings_save_id+0x2c>)
    4ebc:	3908      	subs	r1, #8
    4ebe:	f021 b9bc 	b.w	2623a <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    4ec2:	4770      	bx	lr
    4ec4:	20000344 	.word	0x20000344
    4ec8:	20001488 	.word	0x20001488

00004ecc <commit>:

static int commit(void)
{
    4ecc:	b510      	push	{r4, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    4ece:	4c18      	ldr	r4, [pc, #96]	; (4f30 <commit+0x64>)
    4ed0:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    4ed4:	b913      	cbnz	r3, 4edc <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    4ed6:	4817      	ldr	r0, [pc, #92]	; (4f34 <commit+0x68>)
    4ed8:	f001 f876 	bl	5fc8 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    4edc:	79e3      	ldrb	r3, [r4, #7]
    4ede:	b1e3      	cbz	r3, 4f1a <commit+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4ee0:	f3bf 8f5b 	dmb	ish
    4ee4:	4c14      	ldr	r4, [pc, #80]	; (4f38 <commit+0x6c>)
    4ee6:	6823      	ldr	r3, [r4, #0]
    4ee8:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    4eec:	079b      	lsls	r3, r3, #30
    4eee:	d401      	bmi.n	4ef4 <commit+0x28>
		bt_finalize_init();
    4ef0:	f000 fe32 	bl	5b58 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4ef4:	f3bf 8f5b 	dmb	ish
    4ef8:	e854 0f00 	ldrex	r0, [r4]
    4efc:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    4f00:	e844 3200 	strex	r2, r3, [r4]
    4f04:	2a00      	cmp	r2, #0
    4f06:	d1f7      	bne.n	4ef8 <commit+0x2c>
    4f08:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    4f0c:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
    4f10:	d00c      	beq.n	4f2c <commit+0x60>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
    4f12:	f7ff ffc3 	bl	4e9c <bt_settings_save_id>
	}

	return 0;
    4f16:	2000      	movs	r0, #0
    4f18:	e008      	b.n	4f2c <commit+0x60>
		bt_setup_public_id_addr();
    4f1a:	f001 f8cd 	bl	60b8 <bt_setup_public_id_addr>
	if (!bt_dev.id_count) {
    4f1e:	79e3      	ldrb	r3, [r4, #7]
    4f20:	2b00      	cmp	r3, #0
    4f22:	d1dd      	bne.n	4ee0 <commit+0x14>
		err = bt_setup_random_id_addr();
    4f24:	f001 f93e 	bl	61a4 <bt_setup_random_id_addr>
		if (err) {
    4f28:	2800      	cmp	r0, #0
    4f2a:	d0d9      	beq.n	4ee0 <commit+0x14>
}
    4f2c:	bd10      	pop	{r4, pc}
    4f2e:	bf00      	nop
    4f30:	20000000 	.word	0x20000000
    4f34:	00028740 	.word	0x00028740
    4f38:	20000098 	.word	0x20000098

00004f3c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f3e:	460b      	mov	r3, r1
	switch (src->type) {
    4f40:	7801      	ldrb	r1, [r0, #0]
    4f42:	2901      	cmp	r1, #1
{
    4f44:	4602      	mov	r2, r0
	switch (src->type) {
    4f46:	d015      	beq.n	4f74 <uuid_to_uuid128+0x38>
    4f48:	2902      	cmp	r1, #2
    4f4a:	d02b      	beq.n	4fa4 <uuid_to_uuid128+0x68>
    4f4c:	b989      	cbnz	r1, 4f72 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    4f4e:	4c1c      	ldr	r4, [pc, #112]	; (4fc0 <uuid_to_uuid128+0x84>)
    4f50:	461d      	mov	r5, r3
    4f52:	f104 0710 	add.w	r7, r4, #16
    4f56:	6820      	ldr	r0, [r4, #0]
    4f58:	6861      	ldr	r1, [r4, #4]
    4f5a:	462e      	mov	r6, r5
    4f5c:	c603      	stmia	r6!, {r0, r1}
    4f5e:	3408      	adds	r4, #8
    4f60:	42bc      	cmp	r4, r7
    4f62:	4635      	mov	r5, r6
    4f64:	d1f7      	bne.n	4f56 <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
    4f66:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
    4f68:	7821      	ldrb	r1, [r4, #0]
    4f6a:	7031      	strb	r1, [r6, #0]
	dst[0] = val;
    4f6c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    4f6e:	0a12      	lsrs	r2, r2, #8
    4f70:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    4f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
    4f74:	4c12      	ldr	r4, [pc, #72]	; (4fc0 <uuid_to_uuid128+0x84>)
    4f76:	461d      	mov	r5, r3
    4f78:	f104 0710 	add.w	r7, r4, #16
    4f7c:	6820      	ldr	r0, [r4, #0]
    4f7e:	6861      	ldr	r1, [r4, #4]
    4f80:	462e      	mov	r6, r5
    4f82:	c603      	stmia	r6!, {r0, r1}
    4f84:	3408      	adds	r4, #8
    4f86:	42bc      	cmp	r4, r7
    4f88:	4635      	mov	r5, r6
    4f8a:	d1f7      	bne.n	4f7c <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
    4f8c:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
    4f8e:	7821      	ldrb	r1, [r4, #0]
    4f90:	7031      	strb	r1, [r6, #0]
    4f92:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    4f96:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    4f98:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    4f9a:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    4f9c:	0a12      	lsrs	r2, r2, #8
    4f9e:	7399      	strb	r1, [r3, #14]
    4fa0:	741a      	strb	r2, [r3, #16]
}
    4fa2:	e7e6      	b.n	4f72 <uuid_to_uuid128+0x36>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4fa4:	f100 0510 	add.w	r5, r0, #16
    4fa8:	6810      	ldr	r0, [r2, #0]
    4faa:	6851      	ldr	r1, [r2, #4]
    4fac:	461c      	mov	r4, r3
    4fae:	c403      	stmia	r4!, {r0, r1}
    4fb0:	3208      	adds	r2, #8
    4fb2:	42aa      	cmp	r2, r5
    4fb4:	4623      	mov	r3, r4
    4fb6:	d1f7      	bne.n	4fa8 <uuid_to_uuid128+0x6c>
    4fb8:	7812      	ldrb	r2, [r2, #0]
    4fba:	7022      	strb	r2, [r4, #0]
    4fbc:	e7d9      	b.n	4f72 <uuid_to_uuid128+0x36>
    4fbe:	bf00      	nop
    4fc0:	00028962 	.word	0x00028962

00004fc4 <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_cis_req)),
#endif /* (CONFIG_BT_ISO) */
};

static void hci_le_meta_event(struct net_buf *buf)
{
    4fc4:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_meta_event *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4fc6:	2101      	movs	r1, #1
{
    4fc8:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4fca:	3008      	adds	r0, #8
    4fcc:	f01b ff7c 	bl	20ec8 <net_buf_simple_pull_mem>

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4fd0:	4621      	mov	r1, r4
    4fd2:	4a03      	ldr	r2, [pc, #12]	; (4fe0 <hci_le_meta_event+0x1c>)
    4fd4:	7800      	ldrb	r0, [r0, #0]
}
    4fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4fda:	2307      	movs	r3, #7
    4fdc:	f019 bdd6 	b.w	1eb8c <handle_event>
    4fe0:	000272b0 	.word	0x000272b0

00004fe4 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    4fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    4fe6:	4f0a      	ldr	r7, [pc, #40]	; (5010 <id_find+0x2c>)
{
    4fe8:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    4fea:	2500      	movs	r5, #0
    4fec:	79fb      	ldrb	r3, [r7, #7]
    4fee:	b2ec      	uxtb	r4, r5
    4ff0:	42a3      	cmp	r3, r4
    4ff2:	d802      	bhi.n	4ffa <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    4ff4:	f06f 0401 	mvn.w	r4, #1
    4ff8:	e008      	b.n	500c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    4ffa:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    4ffe:	4439      	add	r1, r7
    5000:	4630      	mov	r0, r6
    5002:	f019 fe8e 	bl	1ed22 <bt_addr_le_cmp>
    5006:	3501      	adds	r5, #1
    5008:	2800      	cmp	r0, #0
    500a:	d1ef      	bne.n	4fec <id_find+0x8>
}
    500c:	4620      	mov	r0, r4
    500e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5010:	20000000 	.word	0x20000000

00005014 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    5014:	6843      	ldr	r3, [r0, #4]
{
    5016:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5018:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    501a:	0558      	lsls	r0, r3, #21
    501c:	d502      	bpl.n	5024 <valid_adv_param+0x10>
		return false;
    501e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    5020:	b003      	add	sp, #12
    5022:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5024:	6922      	ldr	r2, [r4, #16]
    5026:	b10a      	cbz	r2, 502c <valid_adv_param+0x18>
    5028:	07d9      	lsls	r1, r3, #31
    502a:	d5f8      	bpl.n	501e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    502c:	4d17      	ldr	r5, [pc, #92]	; (508c <valid_adv_param+0x78>)
    502e:	7820      	ldrb	r0, [r4, #0]
    5030:	79eb      	ldrb	r3, [r5, #7]
    5032:	4283      	cmp	r3, r0
    5034:	d9f3      	bls.n	501e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    5036:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    503a:	2300      	movs	r3, #0
    503c:	4669      	mov	r1, sp
    503e:	4428      	add	r0, r5
    5040:	9300      	str	r3, [sp, #0]
    5042:	f8cd 3003 	str.w	r3, [sp, #3]
    5046:	f019 fe6c 	bl	1ed22 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    504a:	2800      	cmp	r0, #0
    504c:	d0e7      	beq.n	501e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    504e:	6860      	ldr	r0, [r4, #4]
    5050:	07c2      	lsls	r2, r0, #31
    5052:	d406      	bmi.n	5062 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    5054:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    5058:	2b08      	cmp	r3, #8
    505a:	d802      	bhi.n	5062 <valid_adv_param+0x4e>
    505c:	68a3      	ldr	r3, [r4, #8]
    505e:	2b9f      	cmp	r3, #159	; 0x9f
    5060:	d9dd      	bls.n	501e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    5062:	06c3      	lsls	r3, r0, #27
    5064:	d401      	bmi.n	506a <valid_adv_param+0x56>
    5066:	6923      	ldr	r3, [r4, #16]
    5068:	b943      	cbnz	r3, 507c <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
    506a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    506e:	429a      	cmp	r2, r3
    5070:	d8d5      	bhi.n	501e <valid_adv_param+0xa>
    5072:	2a1f      	cmp	r2, #31
    5074:	d9d3      	bls.n	501e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    5076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    507a:	d8d0      	bhi.n	501e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    507c:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    5080:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    5084:	bf18      	it	ne
    5086:	2001      	movne	r0, #1
    5088:	e7ca      	b.n	5020 <valid_adv_param+0xc>
    508a:	bf00      	nop
    508c:	20000000 	.word	0x20000000

00005090 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    5090:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    5092:	4c0c      	ldr	r4, [pc, #48]	; (50c4 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    5094:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    5096:	2205      	movs	r2, #5
    5098:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    509c:	f001 fd36 	bl	6b0c <bt_conn_lookup_state_le>
		if (!conn) {
    50a0:	b970      	cbnz	r0, 50c0 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    50a2:	4b09      	ldr	r3, [pc, #36]	; (50c8 <find_pending_connect.part.0+0x38>)
    50a4:	6818      	ldr	r0, [r3, #0]
    50a6:	889a      	ldrh	r2, [r3, #4]
    50a8:	9000      	str	r0, [sp, #0]
    50aa:	799b      	ldrb	r3, [r3, #6]
    50ac:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    50b0:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
						       BT_ADDR_LE_NONE,
    50b4:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    50b8:	2204      	movs	r2, #4
    50ba:	4669      	mov	r1, sp
    50bc:	f001 fd26 	bl	6b0c <bt_conn_lookup_state_le>
}
    50c0:	b002      	add	sp, #8
    50c2:	bd10      	pop	{r4, pc}
    50c4:	20000000 	.word	0x20000000
    50c8:	000271e5 	.word	0x000271e5

000050cc <hci_num_completed_packets>:
{
    50cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    50d0:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    50d2:	6887      	ldr	r7, [r0, #8]
    50d4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 51c0 <hci_num_completed_packets+0xf4>
			tx->pending_no_cb = 0U;
    50d8:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
    50da:	783b      	ldrb	r3, [r7, #0]
    50dc:	429d      	cmp	r5, r3
    50de:	db01      	blt.n	50e4 <hci_num_completed_packets+0x18>
}
    50e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    50e4:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    50e8:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    50ec:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
    50f0:	f04f 0320 	mov.w	r3, #32
    50f4:	f3ef 8a11 	mrs	sl, BASEPRI
    50f8:	f383 8811 	msr	BASEPRI, r3
    50fc:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    5100:	f001 fcdc 	bl	6abc <bt_conn_lookup_handle>
		if (!conn) {
    5104:	4604      	mov	r4, r0
    5106:	b928      	cbnz	r0, 5114 <hci_num_completed_packets+0x48>
	__asm__ volatile(
    5108:	f38a 8811 	msr	BASEPRI, sl
    510c:	f3bf 8f6f 	isb	sy
	for (i = 0; i < evt->num_handles; i++) {
    5110:	3501      	adds	r5, #1
    5112:	e7e2      	b.n	50da <hci_num_completed_packets+0xe>
    5114:	f38a 8811 	msr	BASEPRI, sl
    5118:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    511c:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    5120:	b326      	cbz	r6, 516c <hci_num_completed_packets+0xa0>
	__asm__ volatile(
    5122:	f04f 0320 	mov.w	r3, #32
    5126:	f3ef 8211 	mrs	r2, BASEPRI
    512a:	f383 8811 	msr	BASEPRI, r3
    512e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    5132:	69e3      	ldr	r3, [r4, #28]
    5134:	b16b      	cbz	r3, 5152 <hci_num_completed_packets+0x86>
				conn->pending_no_cb--;
    5136:	3b01      	subs	r3, #1
    5138:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    513a:	f382 8811 	msr	BASEPRI, r2
    513e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    5142:	4620      	mov	r0, r4
    5144:	f001 fb8a 	bl	685c <bt_conn_get_pkts>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5148:	3e01      	subs	r6, #1
    514a:	f015 ff1b 	bl	1af84 <z_impl_k_sem_give>
    514e:	b2b6      	uxth	r6, r6
    5150:	e7e6      	b.n	5120 <hci_num_completed_packets+0x54>
Z_GENLIST_IS_EMPTY(slist)
    5152:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    5154:	b12b      	cbz	r3, 5162 <hci_num_completed_packets+0x96>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5156:	69a1      	ldr	r1, [r4, #24]
    5158:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    515a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    515c:	428b      	cmp	r3, r1
	list->tail = node;
    515e:	bf08      	it	eq
    5160:	61a0      	streq	r0, [r4, #24]
    5162:	f382 8811 	msr	BASEPRI, r2
    5166:	f3bf 8f6f 	isb	sy
			if (!node) {
    516a:	b91b      	cbnz	r3, 5174 <hci_num_completed_packets+0xa8>
		bt_conn_unref(conn);
    516c:	4620      	mov	r0, r4
    516e:	f01a f8fe 	bl	1f36e <bt_conn_unref>
    5172:	e7cd      	b.n	5110 <hci_num_completed_packets+0x44>
	__asm__ volatile(
    5174:	f04f 0220 	mov.w	r2, #32
    5178:	f3ef 8111 	mrs	r1, BASEPRI
    517c:	f382 8811 	msr	BASEPRI, r2
    5180:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    5184:	68da      	ldr	r2, [r3, #12]
    5186:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    5188:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    518c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    518e:	f8c3 800c 	str.w	r8, [r3, #12]
    5192:	b98a      	cbnz	r2, 51b8 <hci_num_completed_packets+0xec>
	list->head = node;
    5194:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    5198:	f381 8811 	msr	BASEPRI, r1
    519c:	f3bf 8f6f 	isb	sy
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    51a0:	2101      	movs	r1, #1
    51a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    51a6:	f019 fd1b 	bl	1ebe0 <atomic_or>
    51aa:	07c3      	lsls	r3, r0, #31
    51ac:	d4c9      	bmi.n	5142 <hci_num_completed_packets+0x76>
		k_queue_append(&work_q->queue, work);
    51ae:	4651      	mov	r1, sl
    51b0:	4648      	mov	r0, r9
    51b2:	f021 f842 	bl	2623a <k_queue_append>
    51b6:	e7c4      	b.n	5142 <hci_num_completed_packets+0x76>
	parent->next = child;
    51b8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    51ba:	6263      	str	r3, [r4, #36]	; 0x24
}
    51bc:	e7ec      	b.n	5198 <hci_num_completed_packets+0xcc>
    51be:	bf00      	nop
    51c0:	20001488 	.word	0x20001488

000051c4 <hci_cmd_done.isra.0>:
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
    51c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51c6:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    51c8:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
    51ca:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    51cc:	f00f fa10 	bl	145f0 <net_buf_pool_get>
    51d0:	4b19      	ldr	r3, [pc, #100]	; (5238 <hci_cmd_done.isra.0+0x74>)
    51d2:	4283      	cmp	r3, r0
    51d4:	d12e      	bne.n	5234 <hci_cmd_done.isra.0+0x70>
	if (cmd(buf)->opcode != opcode) {
    51d6:	4620      	mov	r0, r4
    51d8:	f00f fa12 	bl	14600 <net_buf_id>
	if (cmd(buf)->state && !status) {
    51dc:	4620      	mov	r0, r4
    51de:	f00f fa0f 	bl	14600 <net_buf_id>
    51e2:	4d16      	ldr	r5, [pc, #88]	; (523c <hci_cmd_done.isra.0+0x78>)
    51e4:	270c      	movs	r7, #12
    51e6:	fb07 5300 	mla	r3, r7, r0, r5
    51ea:	685b      	ldr	r3, [r3, #4]
    51ec:	b15b      	cbz	r3, 5206 <hci_cmd_done.isra.0+0x42>
    51ee:	b956      	cbnz	r6, 5206 <hci_cmd_done.isra.0+0x42>
		struct cmd_state_set *update = cmd(buf)->state;
    51f0:	4620      	mov	r0, r4
    51f2:	f00f fa05 	bl	14600 <net_buf_id>
    51f6:	fb07 5000 	mla	r0, r7, r0, r5
    51fa:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    51fc:	e9d3 0100 	ldrd	r0, r1, [r3]
    5200:	7a1a      	ldrb	r2, [r3, #8]
    5202:	f019 fd43 	bl	1ec8c <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    5206:	4620      	mov	r0, r4
    5208:	f00f f9fa 	bl	14600 <net_buf_id>
    520c:	270c      	movs	r7, #12
    520e:	fb07 5000 	mla	r0, r7, r0, r5
    5212:	6883      	ldr	r3, [r0, #8]
    5214:	b173      	cbz	r3, 5234 <hci_cmd_done.isra.0+0x70>
		cmd(buf)->status = status;
    5216:	4620      	mov	r0, r4
    5218:	f00f f9f2 	bl	14600 <net_buf_id>
    521c:	4378      	muls	r0, r7
    521e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    5220:	4620      	mov	r0, r4
    5222:	f00f f9ed 	bl	14600 <net_buf_id>
    5226:	fb07 5500 	mla	r5, r7, r0, r5
    522a:	68a8      	ldr	r0, [r5, #8]
}
    522c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5230:	f015 bea8 	b.w	1af84 <z_impl_k_sem_give>
    5234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5236:	bf00      	nop
    5238:	20000e00 	.word	0x20000e00
    523c:	20001814 	.word	0x20001814

00005240 <hci_cmd_complete>:
{
    5240:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5242:	2103      	movs	r1, #3
{
    5244:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5246:	3008      	adds	r0, #8
    5248:	f01b fe3e 	bl	20ec8 <net_buf_simple_pull_mem>
	status = buf->data[0];
    524c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    524e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    5250:	7818      	ldrb	r0, [r3, #0]
    5252:	4621      	mov	r1, r4
    5254:	f7ff ffb6 	bl	51c4 <hci_cmd_done.isra.0>
	if (ncmd) {
    5258:	b125      	cbz	r5, 5264 <hci_cmd_complete+0x24>
    525a:	4803      	ldr	r0, [pc, #12]	; (5268 <hci_cmd_complete+0x28>)
}
    525c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5260:	f015 be90 	b.w	1af84 <z_impl_k_sem_give>
    5264:	bd38      	pop	{r3, r4, r5, pc}
    5266:	bf00      	nop
    5268:	200000e8 	.word	0x200000e8

0000526c <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    526c:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    526e:	4b28      	ldr	r3, [pc, #160]	; (5310 <le_adv_start_add_conn+0xa4>)
    5270:	b085      	sub	sp, #20
    5272:	4605      	mov	r5, r0
    5274:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
    5276:	7801      	ldrb	r1, [r0, #0]
    5278:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    527c:	f019 fcaa 	bl	1ebd4 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    5280:	f010 0f40 	tst.w	r0, #64	; 0x40
    5284:	461a      	mov	r2, r3
    5286:	d008      	beq.n	529a <le_adv_start_add_conn+0x2e>
    5288:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    528c:	f019 fca2 	bl	1ebd4 <atomic_get>
    5290:	05c0      	lsls	r0, r0, #23
    5292:	d502      	bpl.n	529a <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    5294:	7e1b      	ldrb	r3, [r3, #24]
    5296:	428b      	cmp	r3, r1
    5298:	d131      	bne.n	52fe <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    529a:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    529c:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    529e:	f816 3b0b 	ldrb.w	r3, [r6], #11
    52a2:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    52a6:	4630      	mov	r0, r6
    52a8:	2300      	movs	r3, #0
    52aa:	9300      	str	r3, [sp, #0]
    52ac:	f8cd 3003 	str.w	r3, [sp, #3]
    52b0:	f019 fd37 	bl	1ed22 <bt_addr_le_cmp>
    52b4:	4604      	mov	r4, r0
    52b6:	7828      	ldrb	r0, [r5, #0]
    52b8:	b164      	cbz	r4, 52d4 <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    52ba:	4631      	mov	r1, r6
    52bc:	f01a f86c 	bl	1f398 <bt_conn_exists_le>
    52c0:	4604      	mov	r4, r0
    52c2:	b9f8      	cbnz	r0, 5304 <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    52c4:	7828      	ldrb	r0, [r5, #0]
    52c6:	4631      	mov	r1, r6
    52c8:	f001 fbcc 	bl	6a64 <bt_conn_add_le>
	if (!conn) {
    52cc:	4605      	mov	r5, r0
    52ce:	b1e0      	cbz	r0, 530a <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    52d0:	2105      	movs	r1, #5
    52d2:	e00e      	b.n	52f2 <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    52d4:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    52d8:	9302      	str	r3, [sp, #8]
    52da:	a902      	add	r1, sp, #8
    52dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    52e0:	f8ad 300c 	strh.w	r3, [sp, #12]
    52e4:	f88d 300e 	strb.w	r3, [sp, #14]
    52e8:	f001 fbbc 	bl	6a64 <bt_conn_add_le>
		if (!conn) {
    52ec:	4605      	mov	r5, r0
    52ee:	b160      	cbz	r0, 530a <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    52f0:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    52f2:	f001 fc45 	bl	6b80 <bt_conn_set_state>
	*out_conn = conn;
    52f6:	603d      	str	r5, [r7, #0]
	return 0;
}
    52f8:	4620      	mov	r0, r4
    52fa:	b005      	add	sp, #20
    52fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    52fe:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5302:	e7f9      	b.n	52f8 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
    5304:	f06f 0415 	mvn.w	r4, #21
    5308:	e7f6      	b.n	52f8 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
    530a:	f06f 040b 	mvn.w	r4, #11
    530e:	e7f3      	b.n	52f8 <le_adv_start_add_conn+0x8c>
    5310:	20000000 	.word	0x20000000

00005314 <hci_cmd_status>:
{
    5314:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5316:	2104      	movs	r1, #4
{
    5318:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    531a:	3008      	adds	r0, #8
    531c:	f01b fdd4 	bl	20ec8 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    5320:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    5322:	7800      	ldrb	r0, [r0, #0]
    5324:	4621      	mov	r1, r4
    5326:	f7ff ff4d 	bl	51c4 <hci_cmd_done.isra.0>
	if (ncmd) {
    532a:	b125      	cbz	r5, 5336 <hci_cmd_status+0x22>
    532c:	4802      	ldr	r0, [pc, #8]	; (5338 <hci_cmd_status+0x24>)
}
    532e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5332:	f015 be27 	b.w	1af84 <z_impl_k_sem_give>
    5336:	bd38      	pop	{r3, r4, r5, pc}
    5338:	200000e8 	.word	0x200000e8

0000533c <bt_hci_cmd_create>:
{
    533c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    5340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    5348:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    534a:	4816      	ldr	r0, [pc, #88]	; (53a4 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    534c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 53a8 <bt_hci_cmd_create+0x6c>
{
    5350:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    5352:	f01b fd2b 	bl	20dac <net_buf_alloc_fixed>
    5356:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    5358:	f100 0b08 	add.w	fp, r0, #8
    535c:	2100      	movs	r1, #0
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(uint8_t *)net_buf_user_data(buf) = type;
    535e:	2700      	movs	r7, #0
    5360:	4658      	mov	r0, fp
    5362:	f01b fd48 	bl	20df6 <net_buf_simple_reserve>
    5366:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    5368:	4620      	mov	r0, r4
    536a:	f00f f949 	bl	14600 <net_buf_id>
    536e:	f04f 0a0c 	mov.w	sl, #12
    5372:	fb0a 8000 	mla	r0, sl, r0, r8
    5376:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    5378:	4620      	mov	r0, r4
    537a:	f00f f941 	bl	14600 <net_buf_id>
    537e:	fb0a 8000 	mla	r0, sl, r0, r8
    5382:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    5384:	4620      	mov	r0, r4
    5386:	f00f f93b 	bl	14600 <net_buf_id>
    538a:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    538e:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    5390:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    5392:	4658      	mov	r0, fp
    5394:	f01b fd66 	bl	20e64 <net_buf_simple_add>
	hdr->param_len = param_len;
    5398:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    539a:	8005      	strh	r5, [r0, #0]
}
    539c:	4620      	mov	r0, r4
    539e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53a2:	bf00      	nop
    53a4:	20000e00 	.word	0x20000e00
    53a8:	20001814 	.word	0x20001814

000053ac <bt_hci_cmd_send_sync>:
{
    53ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    53ae:	4615      	mov	r5, r2
    53b0:	b087      	sub	sp, #28
	if (!buf) {
    53b2:	460c      	mov	r4, r1
    53b4:	b921      	cbnz	r1, 53c0 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    53b6:	f7ff ffc1 	bl	533c <bt_hci_cmd_create>
		if (!buf) {
    53ba:	4604      	mov	r4, r0
    53bc:	2800      	cmp	r0, #0
    53be:	d048      	beq.n	5452 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    53c0:	2201      	movs	r2, #1
    53c2:	2100      	movs	r1, #0
    53c4:	4668      	mov	r0, sp
    53c6:	f021 f884 	bl	264d2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    53ca:	4620      	mov	r0, r4
    53cc:	f00f f918 	bl	14600 <net_buf_id>
    53d0:	4e21      	ldr	r6, [pc, #132]	; (5458 <bt_hci_cmd_send_sync+0xac>)
    53d2:	230c      	movs	r3, #12
    53d4:	fb03 6000 	mla	r0, r3, r0, r6
    53d8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    53dc:	4620      	mov	r0, r4
    53de:	f01b fd1b 	bl	20e18 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    53e2:	481e      	ldr	r0, [pc, #120]	; (545c <bt_hci_cmd_send_sync+0xb0>)
    53e4:	4621      	mov	r1, r4
    53e6:	f01b fd0a 	bl	20dfe <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    53ea:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    53ee:	2300      	movs	r3, #0
    53f0:	4668      	mov	r0, sp
    53f2:	f015 fded 	bl	1afd0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    53f6:	4607      	mov	r7, r0
    53f8:	b180      	cbz	r0, 541c <bt_hci_cmd_send_sync+0x70>
    53fa:	4a19      	ldr	r2, [pc, #100]	; (5460 <bt_hci_cmd_send_sync+0xb4>)
    53fc:	4919      	ldr	r1, [pc, #100]	; (5464 <bt_hci_cmd_send_sync+0xb8>)
    53fe:	481a      	ldr	r0, [pc, #104]	; (5468 <bt_hci_cmd_send_sync+0xbc>)
    5400:	f44f 73bb 	mov.w	r3, #374	; 0x176
    5404:	f018 fc73 	bl	1dcee <printk>
    5408:	4818      	ldr	r0, [pc, #96]	; (546c <bt_hci_cmd_send_sync+0xc0>)
    540a:	4639      	mov	r1, r7
    540c:	f018 fc6f 	bl	1dcee <printk>
    5410:	4040      	eors	r0, r0
    5412:	f380 8811 	msr	BASEPRI, r0
    5416:	f04f 0003 	mov.w	r0, #3
    541a:	df02      	svc	2
	status = cmd(buf)->status;
    541c:	4620      	mov	r0, r4
    541e:	f00f f8ef 	bl	14600 <net_buf_id>
    5422:	230c      	movs	r3, #12
    5424:	4343      	muls	r3, r0
    5426:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    5428:	b156      	cbz	r6, 5440 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    542a:	4620      	mov	r0, r4
    542c:	f00f f99c 	bl	14768 <net_buf_unref>
			return -EIO;
    5430:	2e09      	cmp	r6, #9
    5432:	bf0c      	ite	eq
    5434:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    5438:	f06f 0004 	mvnne.w	r0, #4
}
    543c:	b007      	add	sp, #28
    543e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    5440:	b115      	cbz	r5, 5448 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    5442:	602c      	str	r4, [r5, #0]
	return 0;
    5444:	4630      	mov	r0, r6
    5446:	e7f9      	b.n	543c <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    5448:	4620      	mov	r0, r4
    544a:	f00f f98d 	bl	14768 <net_buf_unref>
	return 0;
    544e:	4628      	mov	r0, r5
    5450:	e7f4      	b.n	543c <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    5452:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5456:	e7f1      	b.n	543c <bt_hci_cmd_send_sync+0x90>
    5458:	20001814 	.word	0x20001814
    545c:	20000104 	.word	0x20000104
    5460:	00028973 	.word	0x00028973
    5464:	000289a7 	.word	0x000289a7
    5468:	000289b0 	.word	0x000289b0
    546c:	000289cd 	.word	0x000289cd

00005470 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    5470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5474:	b087      	sub	sp, #28
    5476:	4606      	mov	r6, r0
    5478:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    547c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    5480:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    5484:	460c      	mov	r4, r1
    5486:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    5488:	2100      	movs	r1, #0
    548a:	2210      	movs	r2, #16
    548c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    548e:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
    5490:	f021 fafc 	bl	26a8c <memset>
	if (use_name) {
    5494:	f1b8 0f00 	cmp.w	r8, #0
    5498:	d00e      	beq.n	54b8 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    549a:	bbb4      	cbnz	r4, 550a <le_adv_update.constprop.0+0x9a>
    549c:	2d00      	cmp	r5, #0
    549e:	d13f      	bne.n	5520 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    54a0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 5554 <le_adv_update.constprop.0+0xe4>
    54a4:	4658      	mov	r0, fp
    54a6:	f7fa fff1 	bl	48c <strlen>
    54aa:	2309      	movs	r3, #9
    54ac:	f88d 3000 	strb.w	r3, [sp]
    54b0:	f88d 0001 	strb.w	r0, [sp, #1]
    54b4:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    54b8:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    54bc:	f1b8 0f00 	cmp.w	r8, #0
    54c0:	d030      	beq.n	5524 <le_adv_update.constprop.0+0xb4>
    54c2:	f1ba 0f00 	cmp.w	sl, #0
    54c6:	d12d      	bne.n	5524 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    54c8:	2301      	movs	r3, #1
			d[1].data = &data;
    54ca:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    54ce:	9305      	str	r3, [sp, #20]
			d_len = 2;
    54d0:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    54d2:	a902      	add	r1, sp, #8
    54d4:	f242 0008 	movw	r0, #8200	; 0x2008
    54d8:	f019 fc4b 	bl	1ed72 <hci_set_ad>
		if (err) {
    54dc:	4604      	mov	r4, r0
    54de:	b938      	cbnz	r0, 54f0 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    54e0:	f1ba 0f00 	cmp.w	sl, #0
    54e4:	d120      	bne.n	5528 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    54e6:	2104      	movs	r1, #4
    54e8:	f106 0014 	add.w	r0, r6, #20
    54ec:	f019 fb78 	bl	1ebe0 <atomic_or>
}
    54f0:	4620      	mov	r0, r4
    54f2:	b007      	add	sp, #28
    54f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    54f8:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    54fc:	3a08      	subs	r2, #8
    54fe:	2a01      	cmp	r2, #1
    5500:	d925      	bls.n	554e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    5502:	3301      	adds	r3, #1
    5504:	429f      	cmp	r7, r3
    5506:	d1f7      	bne.n	54f8 <le_adv_update.constprop.0+0x88>
    5508:	e7c8      	b.n	549c <le_adv_update.constprop.0+0x2c>
    550a:	2300      	movs	r3, #0
    550c:	e7fa      	b.n	5504 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    550e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    5512:	3a08      	subs	r2, #8
    5514:	2a01      	cmp	r2, #1
    5516:	d91a      	bls.n	554e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    5518:	3301      	adds	r3, #1
    551a:	4599      	cmp	r9, r3
    551c:	d1f7      	bne.n	550e <le_adv_update.constprop.0+0x9e>
    551e:	e7bf      	b.n	54a0 <le_adv_update.constprop.0+0x30>
    5520:	2300      	movs	r3, #0
    5522:	e7fa      	b.n	551a <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    5524:	2201      	movs	r2, #1
    5526:	e7d4      	b.n	54d2 <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
    5528:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    552c:	2201      	movs	r2, #1
    552e:	f1b8 0f00 	cmp.w	r8, #0
    5532:	d003      	beq.n	553c <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    5534:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    5536:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    553a:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    553c:	a902      	add	r1, sp, #8
    553e:	f242 0009 	movw	r0, #8201	; 0x2009
    5542:	f019 fc16 	bl	1ed72 <hci_set_ad>
		if (err) {
    5546:	2800      	cmp	r0, #0
    5548:	d0cd      	beq.n	54e6 <le_adv_update.constprop.0+0x76>
    554a:	4604      	mov	r4, r0
    554c:	e7d0      	b.n	54f0 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    554e:	f06f 0415 	mvn.w	r4, #21
    5552:	e7cd      	b.n	54f0 <le_adv_update.constprop.0+0x80>
    5554:	20000120 	.word	0x20000120

00005558 <set_random_address>:
{
    5558:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE ((bt_addr_le_t[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    555a:	4e15      	ldr	r6, [pc, #84]	; (55b0 <set_random_address+0x58>)
    555c:	2206      	movs	r2, #6
    555e:	f106 0131 	add.w	r1, r6, #49	; 0x31
    5562:	4605      	mov	r5, r0
    5564:	f021 fa63 	bl	26a2e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5568:	4602      	mov	r2, r0
    556a:	b1d8      	cbz	r0, 55a4 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    556c:	2106      	movs	r1, #6
    556e:	f242 0005 	movw	r0, #8197	; 0x2005
    5572:	f7ff fee3 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
    5576:	4604      	mov	r4, r0
    5578:	b1b0      	cbz	r0, 55a8 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    557a:	2206      	movs	r2, #6
    557c:	4629      	mov	r1, r5
    557e:	3008      	adds	r0, #8
    5580:	f01b fc76 	bl	20e70 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5584:	2200      	movs	r2, #0
    5586:	4621      	mov	r1, r4
    5588:	f242 0005 	movw	r0, #8197	; 0x2005
    558c:	f7ff ff0e 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    5590:	4602      	mov	r2, r0
    5592:	b938      	cbnz	r0, 55a4 <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    5594:	4629      	mov	r1, r5
    5596:	f106 0031 	add.w	r0, r6, #49	; 0x31
    559a:	f019 fbc5 	bl	1ed28 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    559e:	2301      	movs	r3, #1
    55a0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    55a4:	4610      	mov	r0, r2
    55a6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    55a8:	f06f 0268 	mvn.w	r2, #104	; 0x68
    55ac:	e7fa      	b.n	55a4 <set_random_address+0x4c>
    55ae:	bf00      	nop
    55b0:	20000000 	.word	0x20000000

000055b4 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    55b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    55b8:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    55ba:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    55be:	460e      	mov	r6, r1
    55c0:	4690      	mov	r8, r2
    55c2:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    55c4:	d027      	beq.n	5616 <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    55c6:	4f27      	ldr	r7, [pc, #156]	; (5664 <le_adv_set_random_addr.isra.0+0xb0>)
    55c8:	b12a      	cbz	r2, 55d6 <le_adv_set_random_addr.isra.0+0x22>
    55ca:	0688      	lsls	r0, r1, #26
    55cc:	d503      	bpl.n	55d6 <le_adv_set_random_addr.isra.0+0x22>
    55ce:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
    55d2:	0659      	lsls	r1, r3, #25
    55d4:	d542      	bpl.n	565c <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    55d6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    55da:	ea4f 09c4 	mov.w	r9, r4, lsl #3
    55de:	5cfb      	ldrb	r3, [r7, r3]
    55e0:	2b01      	cmp	r3, #1
    55e2:	d008      	beq.n	55f6 <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
    55e4:	eba9 0404 	sub.w	r4, r9, r4
    55e8:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    55ea:	f1b8 0f00 	cmp.w	r8, #0
    55ee:	d10d      	bne.n	560c <le_adv_set_random_addr.isra.0+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    55f0:	702b      	strb	r3, [r5, #0]
	return 0;
    55f2:	2000      	movs	r0, #0
    55f4:	e007      	b.n	5606 <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
    55f6:	2007      	movs	r0, #7
    55f8:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    55fc:	4438      	add	r0, r7
    55fe:	f7ff ffab 	bl	5558 <set_random_address>
				if (err) {
    5602:	2800      	cmp	r0, #0
    5604:	d0ee      	beq.n	55e4 <le_adv_set_random_addr.isra.0+0x30>
}
    5606:	b003      	add	sp, #12
    5608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    560c:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    560e:	bf48      	it	mi
    5610:	f043 0302 	orrmi.w	r3, r3, #2
    5614:	e7ec      	b.n	55f0 <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    5616:	074b      	lsls	r3, r1, #29
    5618:	d510      	bpl.n	563c <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    561a:	4e12      	ldr	r6, [pc, #72]	; (5664 <le_adv_set_random_addr.isra.0+0xb0>)
    561c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    5620:	00e7      	lsls	r7, r4, #3
    5622:	5cf3      	ldrb	r3, [r6, r3]
    5624:	2b01      	cmp	r3, #1
    5626:	d105      	bne.n	5634 <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
    5628:	2007      	movs	r0, #7
    562a:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    562e:	4430      	add	r0, r6
    5630:	f7ff ff92 	bl	5558 <set_random_address>
			*own_addr_type = id_addr->type;
    5634:	1b3c      	subs	r4, r7, r4
    5636:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    5638:	702b      	strb	r3, [r5, #0]
		if (err) {
    563a:	e7e4      	b.n	5606 <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    563c:	2106      	movs	r1, #6
    563e:	4668      	mov	r0, sp
    5640:	f006 fa2a 	bl	ba98 <bt_rand>
	if (err) {
    5644:	b940      	cbnz	r0, 5658 <le_adv_set_random_addr.isra.0+0xa4>
	nrpa.val[5] &= 0x3f;
    5646:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    564a:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    564c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5650:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    5654:	f7ff ff80 	bl	5558 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    5658:	2301      	movs	r3, #1
    565a:	e7ed      	b.n	5638 <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
    565c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5660:	e7d1      	b.n	5606 <le_adv_set_random_addr.isra.0+0x52>
    5662:	bf00      	nop
    5664:	20000000 	.word	0x20000000

00005668 <set_le_adv_enable_legacy>:
{
    5668:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    566a:	4606      	mov	r6, r0
    566c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    566e:	f242 000a 	movw	r0, #8202	; 0x200a
    5672:	2101      	movs	r1, #1
    5674:	f7ff fe62 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
    5678:	4604      	mov	r4, r0
    567a:	b1e8      	cbz	r0, 56b8 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    567c:	3008      	adds	r0, #8
    567e:	b1cd      	cbz	r5, 56b4 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    5680:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5682:	f01b fbff 	bl	20e84 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    5686:	3614      	adds	r6, #20
	state->bit = bit;
    5688:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    568a:	4620      	mov	r0, r4
	state->bit = bit;
    568c:	9302      	str	r3, [sp, #8]
	state->target = target;
    568e:	9601      	str	r6, [sp, #4]
	state->val = val;
    5690:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    5694:	f00e ffb4 	bl	14600 <net_buf_id>
    5698:	4b09      	ldr	r3, [pc, #36]	; (56c0 <set_le_adv_enable_legacy+0x58>)
    569a:	220c      	movs	r2, #12
    569c:	fb02 3000 	mla	r0, r2, r0, r3
    56a0:	ab01      	add	r3, sp, #4
    56a2:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    56a4:	2200      	movs	r2, #0
    56a6:	4621      	mov	r1, r4
    56a8:	f242 000a 	movw	r0, #8202	; 0x200a
    56ac:	f7ff fe7e 	bl	53ac <bt_hci_cmd_send_sync>
}
    56b0:	b004      	add	sp, #16
    56b2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    56b4:	4629      	mov	r1, r5
    56b6:	e7e4      	b.n	5682 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    56b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
    56bc:	e7f8      	b.n	56b0 <set_le_adv_enable_legacy+0x48>
    56be:	bf00      	nop
    56c0:	20001814 	.word	0x20001814

000056c4 <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    56c4:	b530      	push	{r4, r5, lr}
    56c6:	4d17      	ldr	r5, [pc, #92]	; (5724 <id_create.isra.0+0x60>)
    56c8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    56cc:	b085      	sub	sp, #20
    56ce:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    56d0:	460c      	mov	r4, r1
    56d2:	b1a9      	cbz	r1, 5700 <id_create.isra.0+0x3c>
    56d4:	2300      	movs	r3, #0
    56d6:	a902      	add	r1, sp, #8
    56d8:	4620      	mov	r0, r4
    56da:	9302      	str	r3, [sp, #8]
    56dc:	f8cd 300b 	str.w	r3, [sp, #11]
    56e0:	f019 fb1f 	bl	1ed22 <bt_addr_le_cmp>
    56e4:	b160      	cbz	r0, 5700 <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    56e6:	4621      	mov	r1, r4
    56e8:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    56ea:	f019 fb22 	bl	1ed32 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    56ee:	480e      	ldr	r0, [pc, #56]	; (5728 <id_create.isra.0+0x64>)
    56f0:	f019 fa70 	bl	1ebd4 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    56f4:	0783      	lsls	r3, r0, #30
    56f6:	d501      	bpl.n	56fc <id_create.isra.0+0x38>
		bt_settings_save_id();
    56f8:	f7ff fbd0 	bl	4e9c <bt_settings_save_id>
}
    56fc:	b005      	add	sp, #20
    56fe:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    5700:	4668      	mov	r0, sp
    5702:	f019 fbb7 	bl	1ee74 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    5706:	4668      	mov	r0, sp
    5708:	f7ff fc6c 	bl	4fe4 <id_find>
    570c:	2800      	cmp	r0, #0
    570e:	daf7      	bge.n	5700 <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5710:	4669      	mov	r1, sp
    5712:	4628      	mov	r0, r5
    5714:	f019 fb0d 	bl	1ed32 <bt_addr_le_copy>
		if (addr) {
    5718:	2c00      	cmp	r4, #0
    571a:	d0e8      	beq.n	56ee <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    571c:	4629      	mov	r1, r5
    571e:	4620      	mov	r0, r4
    5720:	e7e3      	b.n	56ea <id_create.isra.0+0x26>
    5722:	bf00      	nop
    5724:	20000000 	.word	0x20000000
    5728:	20000098 	.word	0x20000098

0000572c <bt_send>:
	return bt_dev.drv->send(buf);
    572c:	4b02      	ldr	r3, [pc, #8]	; (5738 <bt_send+0xc>)
    572e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    5732:	691b      	ldr	r3, [r3, #16]
    5734:	4718      	bx	r3
    5736:	bf00      	nop
    5738:	20000000 	.word	0x20000000

0000573c <bt_hci_cmd_send>:
{
    573c:	b538      	push	{r3, r4, r5, lr}
    573e:	4605      	mov	r5, r0
	if (!buf) {
    5740:	460c      	mov	r4, r1
    5742:	b919      	cbnz	r1, 574c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    5744:	f7ff fdfa 	bl	533c <bt_hci_cmd_create>
		if (!buf) {
    5748:	4604      	mov	r4, r0
    574a:	b198      	cbz	r0, 5774 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    574c:	f640 4335 	movw	r3, #3125	; 0xc35
    5750:	429d      	cmp	r5, r3
    5752:	d109      	bne.n	5768 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    5754:	4620      	mov	r0, r4
    5756:	f7ff ffe9 	bl	572c <bt_send>
		if (err) {
    575a:	4605      	mov	r5, r0
    575c:	b110      	cbz	r0, 5764 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    575e:	4620      	mov	r0, r4
    5760:	f00f f802 	bl	14768 <net_buf_unref>
}
    5764:	4628      	mov	r0, r5
    5766:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5768:	4804      	ldr	r0, [pc, #16]	; (577c <bt_hci_cmd_send+0x40>)
    576a:	4621      	mov	r1, r4
    576c:	f01b fb47 	bl	20dfe <net_buf_put>
	return 0;
    5770:	2500      	movs	r5, #0
    5772:	e7f7      	b.n	5764 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    5774:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5778:	e7f4      	b.n	5764 <bt_hci_cmd_send+0x28>
    577a:	bf00      	nop
    577c:	20000104 	.word	0x20000104

00005780 <conn_auto_initiate>:
{
    5780:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5782:	7a83      	ldrb	r3, [r0, #10]
    5784:	2b07      	cmp	r3, #7
{
    5786:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5788:	d11e      	bne.n	57c8 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    578a:	1d06      	adds	r6, r0, #4
    578c:	4630      	mov	r0, r6
    578e:	f019 fa21 	bl	1ebd4 <atomic_get>
    5792:	0483      	lsls	r3, r0, #18
    5794:	d41a      	bmi.n	57cc <conn_auto_initiate+0x4c>
    5796:	78e3      	ldrb	r3, [r4, #3]
    5798:	b123      	cbz	r3, 57a4 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    579a:	4b25      	ldr	r3, [pc, #148]	; (5830 <conn_auto_initiate+0xb0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    579c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    57a0:	071d      	lsls	r5, r3, #28
    57a2:	d513      	bpl.n	57cc <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    57a4:	2102      	movs	r1, #2
    57a6:	f242 0016 	movw	r0, #8214	; 0x2016
    57aa:	f7ff fdc7 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
    57ae:	4605      	mov	r5, r0
    57b0:	b160      	cbz	r0, 57cc <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    57b2:	2102      	movs	r1, #2
    57b4:	3008      	adds	r0, #8
    57b6:	f01b fb55 	bl	20e64 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    57ba:	8823      	ldrh	r3, [r4, #0]
    57bc:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    57be:	4629      	mov	r1, r5
    57c0:	f242 0016 	movw	r0, #8214	; 0x2016
    57c4:	f7ff ffba 	bl	573c <bt_hci_cmd_send>
}
    57c8:	b004      	add	sp, #16
    57ca:	bd70      	pop	{r4, r5, r6, pc}
    57cc:	4630      	mov	r0, r6
    57ce:	f019 fa01 	bl	1ebd4 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    57d2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    57d6:	4d16      	ldr	r5, [pc, #88]	; (5830 <conn_auto_initiate+0xb0>)
    57d8:	f3c0 3100 	ubfx	r1, r0, #12, #1
    57dc:	d10f      	bne.n	57fe <conn_auto_initiate+0x7e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    57de:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    57e2:	07d8      	lsls	r0, r3, #31
    57e4:	d50b      	bpl.n	57fe <conn_auto_initiate+0x7e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    57e6:	2302      	movs	r3, #2
    57e8:	9100      	str	r1, [sp, #0]
    57ea:	461a      	mov	r2, r3
    57ec:	4620      	mov	r0, r4
    57ee:	f019 fb86 	bl	1eefe <bt_le_set_phy>
		if (!err) {
    57f2:	b920      	cbnz	r0, 57fe <conn_auto_initiate+0x7e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    57f4:	2180      	movs	r1, #128	; 0x80
    57f6:	4630      	mov	r0, r6
    57f8:	f019 f9f2 	bl	1ebe0 <atomic_or>
			return;
    57fc:	e7e4      	b.n	57c8 <conn_auto_initiate+0x48>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    57fe:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    5802:	069a      	lsls	r2, r3, #26
    5804:	d5e0      	bpl.n	57c8 <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    5806:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    580a:	689b      	ldr	r3, [r3, #8]
    580c:	079b      	lsls	r3, r3, #30
    580e:	d5db      	bpl.n	57c8 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    5810:	f10d 010e 	add.w	r1, sp, #14
    5814:	a803      	add	r0, sp, #12
    5816:	f019 fa94 	bl	1ed42 <hci_le_read_max_data_len>
			if (!err) {
    581a:	2800      	cmp	r0, #0
    581c:	d1d4      	bne.n	57c8 <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
    581e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5822:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    5826:	4620      	mov	r0, r4
    5828:	f019 fb4c 	bl	1eec4 <bt_le_set_data_len>
		}
    582c:	e7cc      	b.n	57c8 <conn_auto_initiate+0x48>
    582e:	bf00      	nop
    5830:	20000000 	.word	0x20000000

00005834 <hci_tx_thread>:
{
    5834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    5838:	f8df 8104 	ldr.w	r8, [pc, #260]	; 5940 <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
    583c:	f8df a114 	ldr.w	sl, [pc, #276]	; 5954 <hci_tx_thread+0x120>
		events[0].state = K_POLL_STATE_NOT_READY;
    5840:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5844:	483d      	ldr	r0, [pc, #244]	; (593c <hci_tx_thread+0x108>)
		events[0].state = K_POLL_STATE_NOT_READY;
    5846:	f36f 3310 	bfc	r3, #12, #5
    584a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    584e:	f001 f8cb 	bl	69e8 <bt_conn_prepare_events>
    5852:	1c45      	adds	r5, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    5854:	483a      	ldr	r0, [pc, #232]	; (5940 <hci_tx_thread+0x10c>)
    5856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    585a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    585e:	4629      	mov	r1, r5
    5860:	f015 ff0c 	bl	1b67c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    5864:	b160      	cbz	r0, 5880 <hci_tx_thread+0x4c>
    5866:	4937      	ldr	r1, [pc, #220]	; (5944 <hci_tx_thread+0x110>)
    5868:	4837      	ldr	r0, [pc, #220]	; (5948 <hci_tx_thread+0x114>)
    586a:	f241 43cf 	movw	r3, #5327	; 0x14cf
    586e:	4652      	mov	r2, sl
    5870:	f018 fa3d 	bl	1dcee <printk>
    5874:	4040      	eors	r0, r0
    5876:	f380 8811 	msr	BASEPRI, r0
    587a:	f04f 0003 	mov.w	r0, #3
    587e:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    5880:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 5958 <hci_tx_thread+0x124>
{
    5884:	4e2e      	ldr	r6, [pc, #184]	; (5940 <hci_tx_thread+0x10c>)
	return z_impl_k_sem_take(sem, timeout);
    5886:	f5a9 7782 	sub.w	r7, r9, #260	; 0x104
    588a:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    588e:	b915      	cbnz	r5, 5896 <hci_tx_thread+0x62>
	z_impl_k_yield();
    5890:	f015 fb04 	bl	1ae9c <z_impl_k_yield>
	while (1) {
    5894:	e7d4      	b.n	5840 <hci_tx_thread+0xc>
		switch (ev->state) {
    5896:	68f3      	ldr	r3, [r6, #12]
    5898:	f3c3 3304 	ubfx	r3, r3, #12, #5
    589c:	2b04      	cmp	r3, #4
    589e:	d142      	bne.n	5926 <hci_tx_thread+0xf2>
			if (ev->tag == BT_EVENT_CMD_TX) {
    58a0:	7b33      	ldrb	r3, [r6, #12]
    58a2:	2b00      	cmp	r3, #0
    58a4:	d142      	bne.n	592c <hci_tx_thread+0xf8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    58a6:	2200      	movs	r2, #0
    58a8:	2300      	movs	r3, #0
    58aa:	4648      	mov	r0, r9
    58ac:	f01b fa83 	bl	20db6 <net_buf_get>
	BT_ASSERT(buf);
    58b0:	4604      	mov	r4, r0
    58b2:	b960      	cbnz	r0, 58ce <hci_tx_thread+0x9a>
    58b4:	4925      	ldr	r1, [pc, #148]	; (594c <hci_tx_thread+0x118>)
    58b6:	4824      	ldr	r0, [pc, #144]	; (5948 <hci_tx_thread+0x114>)
    58b8:	f241 436c 	movw	r3, #5228	; 0x146c
    58bc:	4652      	mov	r2, sl
    58be:	f018 fa16 	bl	1dcee <printk>
    58c2:	4040      	eors	r0, r0
    58c4:	f380 8811 	msr	BASEPRI, r0
    58c8:	f04f 0003 	mov.w	r0, #3
    58cc:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    58ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    58d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    58d6:	4658      	mov	r0, fp
    58d8:	f015 fb7a 	bl	1afd0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    58dc:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
    58e0:	b120      	cbz	r0, 58ec <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    58e2:	f00e ff41 	bl	14768 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    58e6:	2300      	movs	r3, #0
    58e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    58ec:	4620      	mov	r0, r4
    58ee:	f01b fa93 	bl	20e18 <net_buf_ref>
    58f2:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
	err = bt_send(buf);
    58f6:	4620      	mov	r0, r4
    58f8:	f7ff ff18 	bl	572c <bt_send>
	if (err) {
    58fc:	b198      	cbz	r0, 5926 <hci_tx_thread+0xf2>
	z_impl_k_sem_give(sem);
    58fe:	4814      	ldr	r0, [pc, #80]	; (5950 <hci_tx_thread+0x11c>)
    5900:	f015 fb40 	bl	1af84 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    5904:	4620      	mov	r0, r4
    5906:	f00e fe7b 	bl	14600 <net_buf_id>
    590a:	4621      	mov	r1, r4
    590c:	201f      	movs	r0, #31
    590e:	f7ff fc59 	bl	51c4 <hci_cmd_done.isra.0>
		net_buf_unref(bt_dev.sent_cmd);
    5912:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
    5916:	f00e ff27 	bl	14768 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    591a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    591c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    591e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		net_buf_unref(buf);
    5922:	f00e ff21 	bl	14768 <net_buf_unref>
	for (; count; ev++, count--) {
    5926:	3614      	adds	r6, #20
    5928:	3d01      	subs	r5, #1
    592a:	e7b0      	b.n	588e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    592c:	2b01      	cmp	r3, #1
    592e:	d1fa      	bne.n	5926 <hci_tx_thread+0xf2>
					conn = CONTAINER_OF(ev->fifo,
    5930:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    5932:	3834      	subs	r0, #52	; 0x34
    5934:	f001 fa9c 	bl	6e70 <bt_conn_process_tx>
    5938:	e7f5      	b.n	5926 <hci_tx_thread+0xf2>
    593a:	bf00      	nop
    593c:	2000035c 	.word	0x2000035c
    5940:	20000348 	.word	0x20000348
    5944:	000289a7 	.word	0x000289a7
    5948:	000289b0 	.word	0x000289b0
    594c:	000289ed 	.word	0x000289ed
    5950:	200000e8 	.word	0x200000e8
    5954:	00028973 	.word	0x00028973
    5958:	20000104 	.word	0x20000104

0000595c <hci_event_prio>:
{
    595c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5960:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    5962:	f100 0608 	add.w	r6, r0, #8
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    5966:	4630      	mov	r0, r6
    5968:	f01b fabe 	bl	20ee8 <net_buf_simple_headroom>
	state->len = buf->len;
    596c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5970:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    5974:	4605      	mov	r5, r0
    5976:	d80c      	bhi.n	5992 <hci_event_prio+0x36>
    5978:	4a1c      	ldr	r2, [pc, #112]	; (59ec <hci_event_prio+0x90>)
    597a:	491d      	ldr	r1, [pc, #116]	; (59f0 <hci_event_prio+0x94>)
    597c:	481d      	ldr	r0, [pc, #116]	; (59f4 <hci_event_prio+0x98>)
    597e:	f641 1326 	movw	r3, #6438	; 0x1926
    5982:	f018 f9b4 	bl	1dcee <printk>
    5986:	4040      	eors	r0, r0
    5988:	f380 8811 	msr	BASEPRI, r0
    598c:	f04f 0003 	mov.w	r0, #3
    5990:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    5992:	2102      	movs	r1, #2
    5994:	4630      	mov	r0, r6
    5996:	f01b fa97 	bl	20ec8 <net_buf_simple_pull_mem>
    599a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    599c:	7800      	ldrb	r0, [r0, #0]
    599e:	f019 f8e3 	bl	1eb68 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    59a2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    59a4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    59a6:	d40c      	bmi.n	59c2 <hci_event_prio+0x66>
    59a8:	4a10      	ldr	r2, [pc, #64]	; (59ec <hci_event_prio+0x90>)
    59aa:	4913      	ldr	r1, [pc, #76]	; (59f8 <hci_event_prio+0x9c>)
    59ac:	4811      	ldr	r0, [pc, #68]	; (59f4 <hci_event_prio+0x98>)
    59ae:	f641 132a 	movw	r3, #6442	; 0x192a
    59b2:	f018 f99c 	bl	1dcee <printk>
    59b6:	4040      	eors	r0, r0
    59b8:	f380 8811 	msr	BASEPRI, r0
    59bc:	f04f 0003 	mov.w	r0, #3
    59c0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    59c2:	2305      	movs	r3, #5
    59c4:	4a0d      	ldr	r2, [pc, #52]	; (59fc <hci_event_prio+0xa0>)
    59c6:	7838      	ldrb	r0, [r7, #0]
    59c8:	4621      	mov	r1, r4
    59ca:	f019 f8df 	bl	1eb8c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    59ce:	07b3      	lsls	r3, r6, #30
    59d0:	d507      	bpl.n	59e2 <hci_event_prio+0x86>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    59d2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    59d4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    59d8:	fa10 f585 	uxtah	r5, r0, r5
    59dc:	60a5      	str	r5, [r4, #8]
}
    59de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    59e2:	4620      	mov	r0, r4
}
    59e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    59e8:	f00e bebe 	b.w	14768 <net_buf_unref>
    59ec:	00028973 	.word	0x00028973
    59f0:	000289f1 	.word	0x000289f1
    59f4:	000289b0 	.word	0x000289b0
    59f8:	00028a0a 	.word	0x00028a0a
    59fc:	00027348 	.word	0x00027348

00005a00 <bt_recv>:
{
    5a00:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    5a02:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    5a04:	2b01      	cmp	r3, #1
{
    5a06:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    5a08:	d036      	beq.n	5a78 <bt_recv+0x78>
    5a0a:	2b03      	cmp	r3, #3
    5a0c:	d163      	bne.n	5ad6 <bt_recv+0xd6>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5a0e:	8983      	ldrh	r3, [r0, #12]
    5a10:	2b03      	cmp	r3, #3
    5a12:	d80c      	bhi.n	5a2e <bt_recv+0x2e>
    5a14:	4a32      	ldr	r2, [pc, #200]	; (5ae0 <bt_recv+0xe0>)
    5a16:	4933      	ldr	r1, [pc, #204]	; (5ae4 <bt_recv+0xe4>)
    5a18:	4833      	ldr	r0, [pc, #204]	; (5ae8 <bt_recv+0xe8>)
    5a1a:	f240 530a 	movw	r3, #1290	; 0x50a
    5a1e:	f018 f966 	bl	1dcee <printk>
    5a22:	4040      	eors	r0, r0
    5a24:	f380 8811 	msr	BASEPRI, r0
    5a28:	f04f 0003 	mov.w	r0, #3
    5a2c:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    5a2e:	2104      	movs	r1, #4
    5a30:	f104 0008 	add.w	r0, r4, #8
    5a34:	f01b fa48 	bl	20ec8 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    5a38:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    5a3a:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    5a3c:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    5a3e:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    5a40:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    5a42:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    5a46:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    5a48:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    5a4a:	d003      	beq.n	5a54 <bt_recv+0x54>
	net_buf_unref(buf);
    5a4c:	4620      	mov	r0, r4
    5a4e:	f00e fe8b 	bl	14768 <net_buf_unref>
    5a52:	e00f      	b.n	5a74 <bt_recv+0x74>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    5a54:	f001 f832 	bl	6abc <bt_conn_lookup_handle>
	if (!conn) {
    5a58:	4605      	mov	r5, r0
    5a5a:	2800      	cmp	r0, #0
    5a5c:	d0f6      	beq.n	5a4c <bt_recv+0x4c>
	acl(buf)->index = bt_conn_index(conn);
    5a5e:	f001 fa6f 	bl	6f40 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    5a62:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    5a64:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    5a66:	4621      	mov	r1, r4
    5a68:	4628      	mov	r0, r5
    5a6a:	f019 fbf8 	bl	1f25e <bt_conn_recv>
	bt_conn_unref(conn);
    5a6e:	4628      	mov	r0, r5
    5a70:	f019 fc7d 	bl	1f36e <bt_conn_unref>
		return 0;
    5a74:	2000      	movs	r0, #0
}
    5a76:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5a78:	8983      	ldrh	r3, [r0, #12]
    5a7a:	2b01      	cmp	r3, #1
    5a7c:	d80c      	bhi.n	5a98 <bt_recv+0x98>
    5a7e:	4a18      	ldr	r2, [pc, #96]	; (5ae0 <bt_recv+0xe0>)
    5a80:	4918      	ldr	r1, [pc, #96]	; (5ae4 <bt_recv+0xe4>)
    5a82:	4819      	ldr	r0, [pc, #100]	; (5ae8 <bt_recv+0xe8>)
    5a84:	f241 4359 	movw	r3, #5209	; 0x1459
    5a88:	f018 f931 	bl	1dcee <printk>
    5a8c:	4040      	eors	r0, r0
    5a8e:	f380 8811 	msr	BASEPRI, r0
    5a92:	f04f 0003 	mov.w	r0, #3
    5a96:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    5a98:	2102      	movs	r1, #2
    5a9a:	f104 0008 	add.w	r0, r4, #8
    5a9e:	f01b fa13 	bl	20ec8 <net_buf_simple_pull_mem>
    5aa2:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    5aa4:	7800      	ldrb	r0, [r0, #0]
    5aa6:	f019 f85f 	bl	1eb68 <bt_hci_evt_get_flags>
    5aaa:	0783      	lsls	r3, r0, #30
    5aac:	d40c      	bmi.n	5ac8 <bt_recv+0xc8>
    5aae:	4a0c      	ldr	r2, [pc, #48]	; (5ae0 <bt_recv+0xe0>)
    5ab0:	490e      	ldr	r1, [pc, #56]	; (5aec <bt_recv+0xec>)
    5ab2:	480d      	ldr	r0, [pc, #52]	; (5ae8 <bt_recv+0xe8>)
    5ab4:	f241 435d 	movw	r3, #5213	; 0x145d
    5ab8:	f018 f919 	bl	1dcee <printk>
    5abc:	4040      	eors	r0, r0
    5abe:	f380 8811 	msr	BASEPRI, r0
    5ac2:	f04f 0003 	mov.w	r0, #3
    5ac6:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    5ac8:	4a09      	ldr	r2, [pc, #36]	; (5af0 <bt_recv+0xf0>)
    5aca:	7828      	ldrb	r0, [r5, #0]
    5acc:	2304      	movs	r3, #4
    5ace:	4621      	mov	r1, r4
    5ad0:	f019 f85c 	bl	1eb8c <handle_event>
    5ad4:	e7ba      	b.n	5a4c <bt_recv+0x4c>
		net_buf_unref(buf);
    5ad6:	f00e fe47 	bl	14768 <net_buf_unref>
		return -EINVAL;
    5ada:	f06f 0015 	mvn.w	r0, #21
    5ade:	e7ca      	b.n	5a76 <bt_recv+0x76>
    5ae0:	00028973 	.word	0x00028973
    5ae4:	000289f1 	.word	0x000289f1
    5ae8:	000289b0 	.word	0x000289b0
    5aec:	00028a23 	.word	0x00028a23
    5af0:	00027328 	.word	0x00027328

00005af4 <bt_recv_prio>:
{
    5af4:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5af6:	7d03      	ldrb	r3, [r0, #20]
    5af8:	2b01      	cmp	r3, #1
{
    5afa:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5afc:	d00c      	beq.n	5b18 <bt_recv_prio+0x24>
    5afe:	4a09      	ldr	r2, [pc, #36]	; (5b24 <bt_recv_prio+0x30>)
    5b00:	4909      	ldr	r1, [pc, #36]	; (5b28 <bt_recv_prio+0x34>)
    5b02:	480a      	ldr	r0, [pc, #40]	; (5b2c <bt_recv_prio+0x38>)
    5b04:	f641 136d 	movw	r3, #6509	; 0x196d
    5b08:	f018 f8f1 	bl	1dcee <printk>
    5b0c:	4040      	eors	r0, r0
    5b0e:	f380 8811 	msr	BASEPRI, r0
    5b12:	f04f 0003 	mov.w	r0, #3
    5b16:	df02      	svc	2
	hci_event_prio(buf);
    5b18:	4620      	mov	r0, r4
    5b1a:	f7ff ff1f 	bl	595c <hci_event_prio>
}
    5b1e:	2000      	movs	r0, #0
    5b20:	bd10      	pop	{r4, pc}
    5b22:	bf00      	nop
    5b24:	00028973 	.word	0x00028973
    5b28:	00028a51 	.word	0x00028a51
    5b2c:	000289b0 	.word	0x000289b0

00005b30 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    5b30:	4a08      	ldr	r2, [pc, #32]	; (5b54 <bt_hci_driver_register+0x24>)
{
    5b32:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    5b34:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
    5b38:	b930      	cbnz	r0, 5b48 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    5b3a:	68d9      	ldr	r1, [r3, #12]
    5b3c:	b139      	cbz	r1, 5b4e <bt_hci_driver_register+0x1e>
    5b3e:	6919      	ldr	r1, [r3, #16]
    5b40:	b129      	cbz	r1, 5b4e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    5b42:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	return 0;
    5b46:	4770      	bx	lr
		return -EALREADY;
    5b48:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5b4c:	4770      	bx	lr
		return -EINVAL;
    5b4e:	f06f 0015 	mvn.w	r0, #21
}
    5b52:	4770      	bx	lr
    5b54:	20000000 	.word	0x20000000

00005b58 <bt_finalize_init>:
    5b58:	4801      	ldr	r0, [pc, #4]	; (5b60 <bt_finalize_init+0x8>)
    5b5a:	2102      	movs	r1, #2
    5b5c:	f019 b840 	b.w	1ebe0 <atomic_or>
    5b60:	20000098 	.word	0x20000098

00005b64 <bt_init>:
{
    5b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    5b66:	4d3e      	ldr	r5, [pc, #248]	; (5c60 <bt_init+0xfc>)
    5b68:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    5b6c:	6899      	ldr	r1, [r3, #8]
    5b6e:	f011 0101 	ands.w	r1, r1, #1
    5b72:	d11f      	bne.n	5bb4 <bt_init+0x50>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    5b74:	aa01      	add	r2, sp, #4
    5b76:	f640 4003 	movw	r0, #3075	; 0xc03
    5b7a:	f7ff fc17 	bl	53ac <bt_hci_cmd_send_sync>
		if (err) {
    5b7e:	4604      	mov	r4, r0
    5b80:	2800      	cmp	r0, #0
    5b82:	d169      	bne.n	5c58 <bt_init+0xf4>
		hci_reset_complete(rsp);
    5b84:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
    5b86:	689b      	ldr	r3, [r3, #8]
	if (status) {
    5b88:	781b      	ldrb	r3, [r3, #0]
    5b8a:	b983      	cbnz	r3, 5bae <bt_init+0x4a>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    5b8c:	f105 0398 	add.w	r3, r5, #152	; 0x98
    5b90:	4618      	mov	r0, r3
    5b92:	f019 f81f 	bl	1ebd4 <atomic_get>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5b96:	f3bf 8f5b 	dmb	ish
    5b9a:	f000 0005 	and.w	r0, r0, #5
    5b9e:	e853 2f00 	ldrex	r2, [r3]
    5ba2:	e843 0100 	strex	r1, r0, [r3]
    5ba6:	2900      	cmp	r1, #0
    5ba8:	d1f9      	bne.n	5b9e <bt_init+0x3a>
    5baa:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    5bae:	9801      	ldr	r0, [sp, #4]
    5bb0:	f00e fdda 	bl	14768 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    5bb4:	aa01      	add	r2, sp, #4
    5bb6:	2100      	movs	r1, #0
    5bb8:	f241 0003 	movw	r0, #4099	; 0x1003
    5bbc:	f7ff fbf6 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    5bc0:	4604      	mov	r4, r0
    5bc2:	2800      	cmp	r0, #0
    5bc4:	d148      	bne.n	5c58 <bt_init+0xf4>
	read_local_features_complete(rsp);
    5bc6:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    5bc8:	4e26      	ldr	r6, [pc, #152]	; (5c64 <bt_init+0x100>)
    5bca:	6893      	ldr	r3, [r2, #8]
    5bcc:	f853 0f01 	ldr.w	r0, [r3, #1]!
    5bd0:	6859      	ldr	r1, [r3, #4]
    5bd2:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    5bd4:	4610      	mov	r0, r2
    5bd6:	f00e fdc7 	bl	14768 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    5bda:	4621      	mov	r1, r4
    5bdc:	aa01      	add	r2, sp, #4
    5bde:	f241 0001 	movw	r0, #4097	; 0x1001
    5be2:	f7ff fbe3 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    5be6:	4604      	mov	r4, r0
    5be8:	2800      	cmp	r0, #0
    5bea:	d135      	bne.n	5c58 <bt_init+0xf4>
	read_local_ver_complete(rsp);
    5bec:	9801      	ldr	r0, [sp, #4]
    5bee:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    5bf0:	785a      	ldrb	r2, [r3, #1]
    5bf2:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    5bf6:	78d9      	ldrb	r1, [r3, #3]
    5bf8:	789a      	ldrb	r2, [r3, #2]
    5bfa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5bfe:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
    5c00:	791a      	ldrb	r2, [r3, #4]
    5c02:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    5c06:	7a19      	ldrb	r1, [r3, #8]
    5c08:	79da      	ldrb	r2, [r3, #7]
    5c0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5c0e:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    5c10:	795a      	ldrb	r2, [r3, #5]
    5c12:	799b      	ldrb	r3, [r3, #6]
    5c14:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    5c18:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
    5c1a:	f00e fda5 	bl	14768 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    5c1e:	4621      	mov	r1, r4
    5c20:	aa01      	add	r2, sp, #4
    5c22:	f241 0002 	movw	r0, #4098	; 0x1002
    5c26:	f7ff fbc1 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    5c2a:	4604      	mov	r4, r0
    5c2c:	b9a0      	cbnz	r0, 5c58 <bt_init+0xf4>
	read_supported_commands_complete(rsp);
    5c2e:	9f01      	ldr	r7, [sp, #4]
    5c30:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    5c32:	1c53      	adds	r3, r2, #1
    5c34:	3241      	adds	r2, #65	; 0x41
    5c36:	6818      	ldr	r0, [r3, #0]
    5c38:	6859      	ldr	r1, [r3, #4]
    5c3a:	4634      	mov	r4, r6
    5c3c:	c403      	stmia	r4!, {r0, r1}
    5c3e:	3308      	adds	r3, #8
    5c40:	4293      	cmp	r3, r2
    5c42:	4626      	mov	r6, r4
    5c44:	d1f7      	bne.n	5c36 <bt_init+0xd2>
	net_buf_unref(rsp);
    5c46:	4638      	mov	r0, r7
    5c48:	f00e fd8e 	bl	14768 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    5c4c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    5c50:	065e      	lsls	r6, r3, #25
    5c52:	d409      	bmi.n	5c68 <bt_init+0x104>
		return -ENODEV;
    5c54:	f06f 0412 	mvn.w	r4, #18
}
    5c58:	4620      	mov	r0, r4
    5c5a:	b003      	add	sp, #12
    5c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c5e:	bf00      	nop
    5c60:	20000000 	.word	0x20000000
    5c64:	20000040 	.word	0x20000040
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    5c68:	aa01      	add	r2, sp, #4
    5c6a:	2100      	movs	r1, #0
    5c6c:	f242 0003 	movw	r0, #8195	; 0x2003
    5c70:	f7ff fb9c 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    5c74:	4604      	mov	r4, r0
    5c76:	2800      	cmp	r0, #0
    5c78:	d1ee      	bne.n	5c58 <bt_init+0xf4>
	read_le_features_complete(rsp);
    5c7a:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    5c7c:	4e9c      	ldr	r6, [pc, #624]	; (5ef0 <bt_init+0x38c>)
    5c7e:	6893      	ldr	r3, [r2, #8]
    5c80:	f853 0f01 	ldr.w	r0, [r3, #1]!
    5c84:	6859      	ldr	r1, [r3, #4]
    5c86:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    5c88:	4610      	mov	r0, r2
    5c8a:	f00e fd6d 	bl	14768 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    5c8e:	4621      	mov	r1, r4
    5c90:	aa01      	add	r2, sp, #4
    5c92:	f242 0002 	movw	r0, #8194	; 0x2002
    5c96:	f7ff fb89 	bl	53ac <bt_hci_cmd_send_sync>
		if (err) {
    5c9a:	4604      	mov	r4, r0
    5c9c:	2800      	cmp	r0, #0
    5c9e:	d1db      	bne.n	5c58 <bt_init+0xf4>
		le_read_buffer_size_complete(rsp);
    5ca0:	9b01      	ldr	r3, [sp, #4]
    5ca2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    5ca4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    5ca8:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
    5cac:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    5cae:	b129      	cbz	r1, 5cbc <bt_init+0x158>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    5cb0:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    5cb2:	4611      	mov	r1, r2
    5cb4:	f106 0028 	add.w	r0, r6, #40	; 0x28
    5cb8:	f020 fc0b 	bl	264d2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    5cbc:	9801      	ldr	r0, [sp, #4]
    5cbe:	f00e fd53 	bl	14768 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5cc2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
    5cc6:	f016 0620 	ands.w	r6, r6, #32
    5cca:	f000 80f4 	beq.w	5eb6 <bt_init+0x352>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    5cce:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    5cd2:	071c      	lsls	r4, r3, #28
    5cd4:	d511      	bpl.n	5cfa <bt_init+0x196>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    5cd6:	aa01      	add	r2, sp, #4
    5cd8:	2100      	movs	r1, #0
    5cda:	f242 001c 	movw	r0, #8220	; 0x201c
    5cde:	f7ff fb65 	bl	53ac <bt_hci_cmd_send_sync>
		if (err) {
    5ce2:	4604      	mov	r4, r0
    5ce4:	2800      	cmp	r0, #0
    5ce6:	d1b7      	bne.n	5c58 <bt_init+0xf4>
		le_read_supp_states_complete(rsp);
    5ce8:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5cea:	6883      	ldr	r3, [r0, #8]
    5cec:	f853 2f01 	ldr.w	r2, [r3, #1]!
    5cf0:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    5cf2:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    5cf6:	f00e fd37 	bl	14768 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    5cfa:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    5cfe:	0698      	lsls	r0, r3, #26
    5d00:	d523      	bpl.n	5d4a <bt_init+0x1e6>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    5d02:	f10d 0102 	add.w	r1, sp, #2
    5d06:	4668      	mov	r0, sp
    5d08:	f019 f81b 	bl	1ed42 <hci_le_read_max_data_len>
		if (err) {
    5d0c:	4604      	mov	r4, r0
    5d0e:	2800      	cmp	r0, #0
    5d10:	d1a2      	bne.n	5c58 <bt_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    5d12:	2104      	movs	r1, #4
    5d14:	f242 0024 	movw	r0, #8228	; 0x2024
    5d18:	f7ff fb10 	bl	533c <bt_hci_cmd_create>
		if (!buf) {
    5d1c:	4606      	mov	r6, r0
    5d1e:	2800      	cmp	r0, #0
    5d20:	f000 80d0 	beq.w	5ec4 <bt_init+0x360>
		cp = net_buf_add(buf, sizeof(*cp));
    5d24:	2104      	movs	r1, #4
    5d26:	3008      	adds	r0, #8
    5d28:	f01b f89c 	bl	20e64 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    5d2c:	f8bd 3000 	ldrh.w	r3, [sp]
    5d30:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    5d32:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    5d36:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    5d38:	4622      	mov	r2, r4
    5d3a:	4631      	mov	r1, r6
    5d3c:	f242 0024 	movw	r0, #8228	; 0x2024
    5d40:	f7ff fb34 	bl	53ac <bt_hci_cmd_send_sync>
		if (err) {
    5d44:	4604      	mov	r4, r0
    5d46:	2800      	cmp	r0, #0
    5d48:	d186      	bne.n	5c58 <bt_init+0xf4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    5d4a:	2108      	movs	r1, #8
    5d4c:	f242 0001 	movw	r0, #8193	; 0x2001
    5d50:	f7ff faf4 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
    5d54:	4604      	mov	r4, r0
    5d56:	2800      	cmp	r0, #0
    5d58:	f000 80b4 	beq.w	5ec4 <bt_init+0x360>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    5d5c:	2108      	movs	r1, #8
    5d5e:	4408      	add	r0, r1
    5d60:	f01b f880 	bl	20e64 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    5d64:	f895 20a0 	ldrb.w	r2, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    5d68:	f012 0f02 	tst.w	r2, #2
    5d6c:	bf14      	ite	ne
    5d6e:	232f      	movne	r3, #47	; 0x2f
    5d70:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    5d72:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    5d74:	f895 20a1 	ldrb.w	r2, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    5d78:	bf48      	it	mi
    5d7a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    5d7e:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    5d82:	bf18      	it	ne
    5d84:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    5d88:	2200      	movs	r2, #0
    5d8a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    5d8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5d90:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    5d92:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    5d94:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    5d96:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    5d98:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    5d9a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    5d9c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    5d9e:	4621      	mov	r1, r4
    5da0:	f242 0001 	movw	r0, #8193	; 0x2001
    5da4:	f7ff fb02 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    5da8:	4604      	mov	r4, r0
    5daa:	2800      	cmp	r0, #0
    5dac:	f47f af54 	bne.w	5c58 <bt_init+0xf4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5db0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    5db4:	069a      	lsls	r2, r3, #26
    5db6:	d41e      	bmi.n	5df6 <bt_init+0x292>
	if (bt_dev.le.acl_mtu) {
    5db8:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    5dbc:	b9d9      	cbnz	r1, 5df6 <bt_init+0x292>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    5dbe:	aa01      	add	r2, sp, #4
    5dc0:	f241 0005 	movw	r0, #4101	; 0x1005
    5dc4:	f7ff faf2 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    5dc8:	4604      	mov	r4, r0
    5dca:	2800      	cmp	r0, #0
    5dcc:	f47f af44 	bne.w	5c58 <bt_init+0xf4>
	if (bt_dev.le.acl_mtu) {
    5dd0:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    5dd4:	b963      	cbnz	r3, 5df0 <bt_init+0x28c>
	read_buffer_size_complete(rsp);
    5dd6:	9b01      	ldr	r3, [sp, #4]
    5dd8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    5dda:	785a      	ldrb	r2, [r3, #1]
    5ddc:	7899      	ldrb	r1, [r3, #2]
    5dde:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5de2:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    5de6:	889a      	ldrh	r2, [r3, #4]
    5de8:	4842      	ldr	r0, [pc, #264]	; (5ef4 <bt_init+0x390>)
    5dea:	4611      	mov	r1, r2
    5dec:	f020 fb71 	bl	264d2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    5df0:	9801      	ldr	r0, [sp, #4]
    5df2:	f00e fcb9 	bl	14768 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    5df6:	2108      	movs	r1, #8
    5df8:	f640 4001 	movw	r0, #3073	; 0xc01
    5dfc:	f7ff fa9e 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
    5e00:	4604      	mov	r4, r0
    5e02:	2800      	cmp	r0, #0
    5e04:	d05e      	beq.n	5ec4 <bt_init+0x360>
	ev = net_buf_add(buf, sizeof(*ev));
    5e06:	2108      	movs	r1, #8
    5e08:	4408      	add	r0, r1
    5e0a:	f01b f82b 	bl	20e64 <net_buf_simple_add>
	dst[0] = val;
    5e0e:	2310      	movs	r3, #16
    5e10:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    5e12:	2388      	movs	r3, #136	; 0x88
    5e14:	7043      	strb	r3, [r0, #1]
    5e16:	2302      	movs	r3, #2
	dst[0] = val;
    5e18:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    5e1a:	70c3      	strb	r3, [r0, #3]
    5e1c:	2320      	movs	r3, #32
	dst[0] = val;
    5e1e:	7082      	strb	r2, [r0, #2]
    5e20:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    5e22:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    5e24:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    5e26:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    5e28:	4621      	mov	r1, r4
    5e2a:	f640 4001 	movw	r0, #3073	; 0xc01
    5e2e:	f7ff fabd 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    5e32:	4604      	mov	r4, r0
    5e34:	2800      	cmp	r0, #0
    5e36:	f47f af0f 	bne.w	5c58 <bt_init+0xf4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    5e3a:	4601      	mov	r1, r0
    5e3c:	aa01      	add	r2, sp, #4
    5e3e:	f64f 4001 	movw	r0, #64513	; 0xfc01
    5e42:	f7ff fab3 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    5e46:	4604      	mov	r4, r0
    5e48:	bb20      	cbnz	r0, 5e94 <bt_init+0x330>
	net_buf_unref(rsp);
    5e4a:	9801      	ldr	r0, [sp, #4]
    5e4c:	f00e fc8c 	bl	14768 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    5e50:	4621      	mov	r1, r4
    5e52:	aa01      	add	r2, sp, #4
    5e54:	f64f 4002 	movw	r0, #64514	; 0xfc02
    5e58:	f7ff faa8 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    5e5c:	4604      	mov	r4, r0
    5e5e:	b9c8      	cbnz	r0, 5e94 <bt_init+0x330>
	rp.cmds = (void *)rsp->data;
    5e60:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    5e62:	6883      	ldr	r3, [r0, #8]
    5e64:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    5e68:	f8a5 3089 	strh.w	r3, [r5, #137]	; 0x89
	net_buf_unref(rsp);
    5e6c:	f00e fc7c 	bl	14768 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    5e70:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
    5e74:	075b      	lsls	r3, r3, #29
    5e76:	d50d      	bpl.n	5e94 <bt_init+0x330>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    5e78:	aa01      	add	r2, sp, #4
    5e7a:	4621      	mov	r1, r4
    5e7c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    5e80:	f7ff fa94 	bl	53ac <bt_hci_cmd_send_sync>
		if (err) {
    5e84:	b930      	cbnz	r0, 5e94 <bt_init+0x330>
		rp.feat = (void *)rsp->data;
    5e86:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    5e88:	6883      	ldr	r3, [r0, #8]
    5e8a:	785b      	ldrb	r3, [r3, #1]
    5e8c:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
		net_buf_unref(rsp);
    5e90:	f00e fc6a 	bl	14768 <net_buf_unref>
		err = bt_conn_init();
    5e94:	f001 f860 	bl	6f58 <bt_conn_init>
		if (err) {
    5e98:	4604      	mov	r4, r0
    5e9a:	2800      	cmp	r0, #0
    5e9c:	f47f aedc 	bne.w	5c58 <bt_init+0xf4>
		if (!bt_dev.id_count) {
    5ea0:	79eb      	ldrb	r3, [r5, #7]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	f43f aed8 	beq.w	5c58 <bt_init+0xf4>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5ea8:	2104      	movs	r1, #4
    5eaa:	4813      	ldr	r0, [pc, #76]	; (5ef8 <bt_init+0x394>)
    5eac:	f018 fe98 	bl	1ebe0 <atomic_or>
	bt_finalize_init();
    5eb0:	f7ff fe52 	bl	5b58 <bt_finalize_init>
	return 0;
    5eb4:	e6d0      	b.n	5c58 <bt_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    5eb6:	2102      	movs	r1, #2
    5eb8:	f640 406d 	movw	r0, #3181	; 0xc6d
    5ebc:	f7ff fa3e 	bl	533c <bt_hci_cmd_create>
		if (!buf) {
    5ec0:	4604      	mov	r4, r0
    5ec2:	b910      	cbnz	r0, 5eca <bt_init+0x366>
		return -ENOBUFS;
    5ec4:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5ec8:	e6c6      	b.n	5c58 <bt_init+0xf4>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    5eca:	2102      	movs	r1, #2
    5ecc:	3008      	adds	r0, #8
    5ece:	f01a ffc9 	bl	20e64 <net_buf_simple_add>
		cp_le->le = 0x01;
    5ed2:	2301      	movs	r3, #1
    5ed4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    5ed6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    5ed8:	4621      	mov	r1, r4
    5eda:	4632      	mov	r2, r6
    5edc:	f640 406d 	movw	r0, #3181	; 0xc6d
    5ee0:	f7ff fa64 	bl	53ac <bt_hci_cmd_send_sync>
		if (err) {
    5ee4:	4604      	mov	r4, r0
    5ee6:	2800      	cmp	r0, #0
    5ee8:	f43f aef1 	beq.w	5cce <bt_init+0x16a>
    5eec:	e6b4      	b.n	5c58 <bt_init+0xf4>
    5eee:	bf00      	nop
    5ef0:	200000a0 	.word	0x200000a0
    5ef4:	200000d0 	.word	0x200000d0
    5ef8:	20000098 	.word	0x20000098

00005efc <init_work>:
{
    5efc:	b510      	push	{r4, lr}
	err = bt_init();
    5efe:	f7ff fe31 	bl	5b64 <bt_init>
	if (ready_cb) {
    5f02:	4b03      	ldr	r3, [pc, #12]	; (5f10 <init_work+0x14>)
    5f04:	681b      	ldr	r3, [r3, #0]
    5f06:	b113      	cbz	r3, 5f0e <init_work+0x12>
}
    5f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    5f0c:	4718      	bx	r3
}
    5f0e:	bd10      	pop	{r4, pc}
    5f10:	2000182c 	.word	0x2000182c

00005f14 <bt_enable>:
{
    5f14:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    5f16:	4d25      	ldr	r5, [pc, #148]	; (5fac <bt_enable+0x98>)
    5f18:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
    5f1c:	b088      	sub	sp, #32
    5f1e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    5f20:	2b00      	cmp	r3, #0
    5f22:	d03d      	beq.n	5fa0 <bt_enable+0x8c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    5f24:	2101      	movs	r1, #1
    5f26:	f105 0098 	add.w	r0, r5, #152	; 0x98
    5f2a:	f018 fe59 	bl	1ebe0 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5f2e:	07c2      	lsls	r2, r0, #31
    5f30:	d439      	bmi.n	5fa6 <bt_enable+0x92>
		err = bt_settings_init();
    5f32:	f018 fdc0 	bl	1eab6 <bt_settings_init>
		if (err) {
    5f36:	4604      	mov	r4, r0
    5f38:	bb78      	cbnz	r0, 5f9a <bt_enable+0x86>
	ready_cb = cb;
    5f3a:	4b1d      	ldr	r3, [pc, #116]	; (5fb0 <bt_enable+0x9c>)
    5f3c:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5f3e:	2200      	movs	r2, #0
    5f40:	2300      	movs	r3, #0
    5f42:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5f46:	f06f 0308 	mvn.w	r3, #8
    5f4a:	e9cd 0302 	strd	r0, r3, [sp, #8]
    5f4e:	e9cd 0000 	strd	r0, r0, [sp]
    5f52:	9004      	str	r0, [sp, #16]
    5f54:	4b17      	ldr	r3, [pc, #92]	; (5fb4 <bt_enable+0xa0>)
    5f56:	4918      	ldr	r1, [pc, #96]	; (5fb8 <bt_enable+0xa4>)
    5f58:	4818      	ldr	r0, [pc, #96]	; (5fbc <bt_enable+0xa8>)
    5f5a:	f44f 7220 	mov.w	r2, #640	; 0x280
    5f5e:	f015 f8a9 	bl	1b0b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5f62:	4917      	ldr	r1, [pc, #92]	; (5fc0 <bt_enable+0xac>)
    5f64:	4815      	ldr	r0, [pc, #84]	; (5fbc <bt_enable+0xa8>)
    5f66:	f020 face 	bl	26506 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    5f6a:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    5f6e:	68db      	ldr	r3, [r3, #12]
    5f70:	4798      	blx	r3
	if (err) {
    5f72:	4604      	mov	r4, r0
    5f74:	b988      	cbnz	r0, 5f9a <bt_enable+0x86>
	if (!cb) {
    5f76:	b926      	cbnz	r6, 5f82 <bt_enable+0x6e>
}
    5f78:	b008      	add	sp, #32
    5f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    5f7e:	f7ff bdf1 	b.w	5b64 <bt_init>
    5f82:	2101      	movs	r1, #1
    5f84:	f105 0094 	add.w	r0, r5, #148	; 0x94
    5f88:	f018 fe2a 	bl	1ebe0 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5f8c:	07c3      	lsls	r3, r0, #31
    5f8e:	d404      	bmi.n	5f9a <bt_enable+0x86>
		k_queue_append(&work_q->queue, work);
    5f90:	480c      	ldr	r0, [pc, #48]	; (5fc4 <bt_enable+0xb0>)
    5f92:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    5f96:	f020 f950 	bl	2623a <k_queue_append>
}
    5f9a:	4620      	mov	r0, r4
    5f9c:	b008      	add	sp, #32
    5f9e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    5fa0:	f06f 0412 	mvn.w	r4, #18
    5fa4:	e7f9      	b.n	5f9a <bt_enable+0x86>
		return -EALREADY;
    5fa6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5faa:	e7f6      	b.n	5f9a <bt_enable+0x86>
    5fac:	20000000 	.word	0x20000000
    5fb0:	2000182c 	.word	0x2000182c
    5fb4:	00005835 	.word	0x00005835
    5fb8:	200032a0 	.word	0x200032a0
    5fbc:	20000f20 	.word	0x20000f20
    5fc0:	00028a74 	.word	0x00028a74
    5fc4:	20001488 	.word	0x20001488

00005fc8 <bt_set_name>:
{
    5fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5fca:	4605      	mov	r5, r0
	size_t len = strlen(name);
    5fcc:	f7fa fa5e 	bl	48c <strlen>
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    5fd0:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    5fd2:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    5fd4:	d82e      	bhi.n	6034 <bt_set_name+0x6c>
	if (!strcmp(bt_dev.name, name)) {
    5fd6:	4e19      	ldr	r6, [pc, #100]	; (603c <bt_set_name+0x74>)
    5fd8:	4629      	mov	r1, r5
    5fda:	f506 7090 	add.w	r0, r6, #288	; 0x120
    5fde:	f7fa fa4b 	bl	478 <strcmp>
    5fe2:	b328      	cbz	r0, 6030 <bt_set_name+0x68>
	strncpy(bt_dev.name, name, len);
    5fe4:	2348      	movs	r3, #72	; 0x48
    5fe6:	4622      	mov	r2, r4
    5fe8:	4629      	mov	r1, r5
    5fea:	f506 7090 	add.w	r0, r6, #288	; 0x120
    5fee:	f020 fd71 	bl	26ad4 <__strncpy_chk>
	bt_dev.name[len] = '\0';
    5ff2:	1933      	adds	r3, r6, r4
    5ff4:	2200      	movs	r2, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5ff6:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    5ffa:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    5ffe:	f018 fde9 	bl	1ebd4 <atomic_get>
	if (adv && atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME)) {
    6002:	0603      	lsls	r3, r0, #24
    6004:	d50e      	bpl.n	6024 <bt_set_name+0x5c>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    6006:	2309      	movs	r3, #9
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    6008:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    600a:	a902      	add	r1, sp, #8
    600c:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    6010:	f88d 3000 	strb.w	r3, [sp]
    6014:	f88d 4001 	strb.w	r4, [sp, #1]
    6018:	9501      	str	r5, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    601a:	f8cd d008 	str.w	sp, [sp, #8]
    601e:	9203      	str	r2, [sp, #12]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    6020:	f018 fea7 	bl	1ed72 <hci_set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    6024:	4906      	ldr	r1, [pc, #24]	; (6040 <bt_set_name+0x78>)
    6026:	4807      	ldr	r0, [pc, #28]	; (6044 <bt_set_name+0x7c>)
    6028:	4622      	mov	r2, r4
    602a:	f7fd fce3 	bl	39f4 <settings_save_one>
	return 0;
    602e:	2000      	movs	r0, #0
}
    6030:	b004      	add	sp, #16
    6032:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    6034:	f06f 000b 	mvn.w	r0, #11
    6038:	e7fa      	b.n	6030 <bt_set_name+0x68>
    603a:	bf00      	nop
    603c:	20000000 	.word	0x20000000
    6040:	20000120 	.word	0x20000120
    6044:	00028a7a 	.word	0x00028a7a

00006048 <bt_get_name>:
}
    6048:	4800      	ldr	r0, [pc, #0]	; (604c <bt_get_name+0x4>)
    604a:	4770      	bx	lr
    604c:	20000120 	.word	0x20000120

00006050 <bt_id_create>:
{
    6050:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6052:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6054:	4605      	mov	r5, r0
    6056:	b918      	cbnz	r0, 6060 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    6058:	b1ec      	cbz	r4, 6096 <bt_id_create+0x46>
		return -EINVAL;
    605a:	f06f 0415 	mvn.w	r4, #21
    605e:	e017      	b.n	6090 <bt_id_create+0x40>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6060:	2300      	movs	r3, #0
    6062:	4669      	mov	r1, sp
    6064:	9300      	str	r3, [sp, #0]
    6066:	f8cd 3003 	str.w	r3, [sp, #3]
    606a:	f018 fe5a 	bl	1ed22 <bt_addr_le_cmp>
    606e:	2800      	cmp	r0, #0
    6070:	d0f2      	beq.n	6058 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    6072:	782b      	ldrb	r3, [r5, #0]
    6074:	2b01      	cmp	r3, #1
    6076:	d1f0      	bne.n	605a <bt_id_create+0xa>
    6078:	79ab      	ldrb	r3, [r5, #6]
    607a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    607e:	2bc0      	cmp	r3, #192	; 0xc0
    6080:	d1eb      	bne.n	605a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    6082:	4628      	mov	r0, r5
    6084:	f7fe ffae 	bl	4fe4 <id_find>
    6088:	2800      	cmp	r0, #0
    608a:	dbe5      	blt.n	6058 <bt_id_create+0x8>
			return -EALREADY;
    608c:	f06f 0477 	mvn.w	r4, #119	; 0x77
}
    6090:	4620      	mov	r0, r4
    6092:	b003      	add	sp, #12
    6094:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    6096:	4b07      	ldr	r3, [pc, #28]	; (60b4 <bt_id_create+0x64>)
    6098:	79dc      	ldrb	r4, [r3, #7]
    609a:	2c01      	cmp	r4, #1
    609c:	d006      	beq.n	60ac <bt_id_create+0x5c>
	new_id = bt_dev.id_count++;
    609e:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    60a0:	4629      	mov	r1, r5
    60a2:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    60a4:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    60a6:	f7ff fb0d 	bl	56c4 <id_create.isra.0>
	return new_id;
    60aa:	e7f1      	b.n	6090 <bt_id_create+0x40>
		return -ENOMEM;
    60ac:	f06f 040b 	mvn.w	r4, #11
    60b0:	e7ee      	b.n	6090 <bt_id_create+0x40>
    60b2:	bf00      	nop
    60b4:	20000000 	.word	0x20000000

000060b8 <bt_setup_public_id_addr>:
{
    60b8:	b570      	push	{r4, r5, r6, lr}
    60ba:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    60bc:	aa01      	add	r2, sp, #4
    60be:	2100      	movs	r1, #0
    60c0:	f241 0009 	movw	r0, #4105	; 0x1009
    60c4:	f7ff f972 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    60c8:	4e1a      	ldr	r6, [pc, #104]	; (6134 <bt_setup_public_id_addr+0x7c>)
    60ca:	4604      	mov	r4, r0
    60cc:	b118      	cbz	r0, 60d6 <bt_setup_public_id_addr+0x1e>
	bt_dev.id_count = bt_read_public_addr(&addr);
    60ce:	2300      	movs	r3, #0
    60d0:	71f3      	strb	r3, [r6, #7]
}
    60d2:	b006      	add	sp, #24
    60d4:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    60d6:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    60d8:	689d      	ldr	r5, [r3, #8]
    60da:	9004      	str	r0, [sp, #16]
    60dc:	3501      	adds	r5, #1
    60de:	f8ad 0014 	strh.w	r0, [sp, #20]
    60e2:	2206      	movs	r2, #6
    60e4:	a904      	add	r1, sp, #16
    60e6:	4628      	mov	r0, r5
    60e8:	f020 fca1 	bl	26a2e <memcmp>
    60ec:	b918      	cbnz	r0, 60f6 <bt_setup_public_id_addr+0x3e>
		net_buf_unref(rsp);
    60ee:	9801      	ldr	r0, [sp, #4]
    60f0:	f00e fb3a 	bl	14768 <net_buf_unref>
    60f4:	e7eb      	b.n	60ce <bt_setup_public_id_addr+0x16>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    60f6:	4b10      	ldr	r3, [pc, #64]	; (6138 <bt_setup_public_id_addr+0x80>)
    60f8:	6818      	ldr	r0, [r3, #0]
    60fa:	9002      	str	r0, [sp, #8]
    60fc:	889b      	ldrh	r3, [r3, #4]
    60fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    6102:	2206      	movs	r2, #6
    6104:	a902      	add	r1, sp, #8
    6106:	4628      	mov	r0, r5
    6108:	f020 fc91 	bl	26a2e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    610c:	2800      	cmp	r0, #0
    610e:	d0ee      	beq.n	60ee <bt_setup_public_id_addr+0x36>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    6110:	4629      	mov	r1, r5
    6112:	f10d 0011 	add.w	r0, sp, #17
    6116:	f018 fe07 	bl	1ed28 <bt_addr_copy>
	net_buf_unref(rsp);
    611a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    611c:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    6120:	f00e fb22 	bl	14768 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    6124:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    6126:	a904      	add	r1, sp, #16
    6128:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    612a:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    612c:	f7ff faca 	bl	56c4 <id_create.isra.0>
    6130:	e7cf      	b.n	60d2 <bt_setup_public_id_addr+0x1a>
    6132:	bf00      	nop
    6134:	20000000 	.word	0x20000000
    6138:	000271ec 	.word	0x000271ec

0000613c <bt_read_static_addr>:
{
    613c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    613e:	4b18      	ldr	r3, [pc, #96]	; (61a0 <bt_read_static_addr+0x64>)
    6140:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
    6144:	f014 0401 	ands.w	r4, r4, #1
{
    6148:	4605      	mov	r5, r0
    614a:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    614c:	d015      	beq.n	617a <bt_read_static_addr+0x3e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    614e:	aa01      	add	r2, sp, #4
    6150:	2100      	movs	r1, #0
    6152:	f64f 4009 	movw	r0, #64521	; 0xfc09
    6156:	f7ff f929 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    615a:	4603      	mov	r3, r0
    615c:	b9e8      	cbnz	r0, 619a <bt_read_static_addr+0x5e>
	rp = (void *)rsp->data;
    615e:	9801      	ldr	r0, [sp, #4]
    6160:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    6162:	7854      	ldrb	r4, [r2, #1]
    6164:	f04f 0c16 	mov.w	ip, #22
    6168:	42b4      	cmp	r4, r6
    616a:	bf28      	it	cs
    616c:	4634      	movcs	r4, r6
    616e:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
    6172:	42a3      	cmp	r3, r4
    6174:	db04      	blt.n	6180 <bt_read_static_addr+0x44>
	net_buf_unref(rsp);
    6176:	f00e faf7 	bl	14768 <net_buf_unref>
}
    617a:	4620      	mov	r0, r4
    617c:	b003      	add	sp, #12
    617e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6180:	1c96      	adds	r6, r2, #2
    6182:	fb0c 5103 	mla	r1, ip, r3, r5
    6186:	f856 eb04 	ldr.w	lr, [r6], #4
    618a:	f841 eb04 	str.w	lr, [r1], #4
    618e:	42be      	cmp	r6, r7
    6190:	d1f9      	bne.n	6186 <bt_read_static_addr+0x4a>
    6192:	883e      	ldrh	r6, [r7, #0]
    6194:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
    6196:	3301      	adds	r3, #1
    6198:	e7eb      	b.n	6172 <bt_read_static_addr+0x36>
		return 0;
    619a:	2400      	movs	r4, #0
    619c:	e7ed      	b.n	617a <bt_read_static_addr+0x3e>
    619e:	bf00      	nop
    61a0:	20000000 	.word	0x20000000

000061a4 <bt_setup_random_id_addr>:
{
    61a4:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.id_count) {
    61a6:	4d13      	ldr	r5, [pc, #76]	; (61f4 <bt_setup_random_id_addr+0x50>)
    61a8:	79ec      	ldrb	r4, [r5, #7]
{
    61aa:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    61ac:	b9ec      	cbnz	r4, 61ea <bt_setup_random_id_addr+0x46>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    61ae:	2101      	movs	r1, #1
    61b0:	a802      	add	r0, sp, #8
    61b2:	f7ff ffc3 	bl	613c <bt_read_static_addr>
    61b6:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    61b8:	b1b8      	cbz	r0, 61ea <bt_setup_random_id_addr+0x46>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    61ba:	2616      	movs	r6, #22
    61bc:	e00e      	b.n	61dc <bt_setup_random_id_addr+0x38>
    61be:	ab02      	add	r3, sp, #8
    61c0:	fb06 3102 	mla	r1, r6, r2, r3
    61c4:	f10d 0001 	add.w	r0, sp, #1
    61c8:	f018 fdae 	bl	1ed28 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    61cc:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    61ce:	4669      	mov	r1, sp
    61d0:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    61d2:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    61d6:	f7ff fa75 	bl	56c4 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    61da:	3401      	adds	r4, #1
    61dc:	79eb      	ldrb	r3, [r5, #7]
    61de:	b2e2      	uxtb	r2, r4
    61e0:	4293      	cmp	r3, r2
    61e2:	d8ec      	bhi.n	61be <bt_setup_random_id_addr+0x1a>
			return 0;
    61e4:	2000      	movs	r0, #0
}
    61e6:	b008      	add	sp, #32
    61e8:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
    61ea:	2100      	movs	r1, #0
    61ec:	4608      	mov	r0, r1
    61ee:	f7ff ff2f 	bl	6050 <bt_id_create>
    61f2:	e7f8      	b.n	61e6 <bt_setup_random_id_addr+0x42>
    61f4:	20000000 	.word	0x20000000

000061f8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    61f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    61fc:	690d      	ldr	r5, [r1, #16]
{
    61fe:	b08d      	sub	sp, #52	; 0x34
    6200:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    6202:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    6204:	ebb5 0b03 	subs.w	fp, r5, r3
{
    6208:	4606      	mov	r6, r0
    620a:	487c      	ldr	r0, [pc, #496]	; (63fc <bt_le_adv_start_legacy+0x204>)
	struct bt_conn *conn = NULL;
    620c:	9305      	str	r3, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable;
    620e:	bf18      	it	ne
    6210:	f04f 0b01 	movne.w	fp, #1
{
    6214:	460c      	mov	r4, r1
    6216:	4691      	mov	r9, r2
    6218:	f018 fcdc 	bl	1ebd4 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    621c:	0787      	lsls	r7, r0, #30
    621e:	f140 80df 	bpl.w	63e0 <bt_le_adv_start_legacy+0x1e8>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    6222:	4608      	mov	r0, r1
    6224:	f7fe fef6 	bl	5014 <valid_adv_param>
    6228:	4607      	mov	r7, r0
    622a:	2800      	cmp	r0, #0
    622c:	f000 80db 	beq.w	63e6 <bt_le_adv_start_legacy+0x1ee>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    6230:	f106 0814 	add.w	r8, r6, #20
    6234:	4640      	mov	r0, r8
    6236:	f018 fccd 	bl	1ebd4 <atomic_get>
    623a:	f3c0 1380 	ubfx	r3, r0, #6, #1
    623e:	0640      	lsls	r0, r0, #25
    6240:	f100 80d4 	bmi.w	63ec <bt_le_adv_start_legacy+0x1f4>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    6244:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    6248:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    624c:	68a3      	ldr	r3, [r4, #8]
    624e:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    6252:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    6254:	68e3      	ldr	r3, [r4, #12]
    6256:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    625a:	f018 fcac 	bl	1ebb6 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    625e:	7832      	ldrb	r2, [r6, #0]
    6260:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    6262:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    6266:	429a      	cmp	r2, r3
    6268:	d004      	beq.n	6274 <bt_le_adv_start_legacy+0x7c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    626a:	4864      	ldr	r0, [pc, #400]	; (63fc <bt_le_adv_start_legacy+0x204>)
    626c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    6270:	f018 fcfd 	bl	1ec6e <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    6274:	4b62      	ldr	r3, [pc, #392]	; (6400 <bt_le_adv_start_legacy+0x208>)
	adv->id = param->id;
    6276:	7820      	ldrb	r0, [r4, #0]
    6278:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    627a:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    627e:	465a      	mov	r2, fp
    6280:	6861      	ldr	r1, [r4, #4]
    6282:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    6286:	f7ff f995 	bl	55b4 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    628a:	4683      	mov	fp, r0
    628c:	2800      	cmp	r0, #0
    628e:	d166      	bne.n	635e <bt_le_adv_start_legacy+0x166>
		return err;
	}

	if (dir_adv) {
    6290:	f106 000b 	add.w	r0, r6, #11
    6294:	2d00      	cmp	r5, #0
    6296:	d03f      	beq.n	6318 <bt_le_adv_start_legacy+0x120>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    6298:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    629a:	f018 fd4a 	bl	1ed32 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    629e:	6860      	ldr	r0, [r4, #4]
    62a0:	07c1      	lsls	r1, r0, #31
    62a2:	d541      	bpl.n	6328 <bt_le_adv_start_legacy+0x130>
		scannable = true;

		if (dir_adv) {
    62a4:	2d00      	cmp	r5, #0
    62a6:	d03c      	beq.n	6322 <bt_le_adv_start_legacy+0x12a>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    62a8:	f010 0f10 	tst.w	r0, #16
    62ac:	bf14      	ite	ne
    62ae:	2304      	movne	r3, #4
    62b0:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    62b2:	6921      	ldr	r1, [r4, #16]
    62b4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    62b8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    62bc:	f018 fd39 	bl	1ed32 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    62c0:	210f      	movs	r1, #15
    62c2:	f242 0006 	movw	r0, #8198	; 0x2006
    62c6:	f7ff f839 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
    62ca:	4683      	mov	fp, r0
    62cc:	2800      	cmp	r0, #0
    62ce:	f000 8090 	beq.w	63f2 <bt_le_adv_start_legacy+0x1fa>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    62d2:	220f      	movs	r2, #15
    62d4:	a908      	add	r1, sp, #32
    62d6:	3008      	adds	r0, #8
    62d8:	f01a fdca 	bl	20e70 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    62dc:	2200      	movs	r2, #0
    62de:	4659      	mov	r1, fp
    62e0:	f242 0006 	movw	r0, #8198	; 0x2006
    62e4:	f7ff f862 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
    62e8:	2800      	cmp	r0, #0
    62ea:	f040 8085 	bne.w	63f8 <bt_le_adv_start_legacy+0x200>
		return err;
	}

	if (!dir_adv) {
    62ee:	b335      	cbz	r5, 633e <bt_le_adv_start_legacy+0x146>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    62f0:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    62f2:	07da      	lsls	r2, r3, #31
    62f4:	d437      	bmi.n	6366 <bt_le_adv_start_legacy+0x16e>
	return set_le_adv_enable_legacy(adv, enable);
    62f6:	2101      	movs	r1, #1
    62f8:	4630      	mov	r0, r6
    62fa:	f7ff f9b5 	bl	5668 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    62fe:	4683      	mov	fp, r0
    6300:	9805      	ldr	r0, [sp, #20]
    6302:	f1bb 0f00 	cmp.w	fp, #0
    6306:	d065      	beq.n	63d4 <bt_le_adv_start_legacy+0x1dc>
		BT_ERR("Failed to start advertiser");
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    6308:	b348      	cbz	r0, 635e <bt_le_adv_start_legacy+0x166>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    630a:	2100      	movs	r1, #0
    630c:	f000 fc38 	bl	6b80 <bt_conn_set_state>
			bt_conn_unref(conn);
    6310:	9805      	ldr	r0, [sp, #20]
    6312:	f019 f82c 	bl	1f36e <bt_conn_unref>
    6316:	e022      	b.n	635e <bt_le_adv_start_legacy+0x166>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    6318:	9506      	str	r5, [sp, #24]
    631a:	a906      	add	r1, sp, #24
    631c:	f8cd 501b 	str.w	r5, [sp, #27]
    6320:	e7bb      	b.n	629a <bt_le_adv_start_legacy+0xa2>
			set_param.type = BT_HCI_ADV_IND;
    6322:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    6326:	e7cb      	b.n	62c0 <bt_le_adv_start_legacy+0xc8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    6328:	9b16      	ldr	r3, [sp, #88]	; 0x58
    632a:	b933      	cbnz	r3, 633a <bt_le_adv_start_legacy+0x142>
    632c:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    6330:	f1c7 0303 	rsb	r3, r7, #3
    6334:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    6338:	e7c2      	b.n	62c0 <bt_le_adv_start_legacy+0xc8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    633a:	2701      	movs	r7, #1
    633c:	e7f8      	b.n	6330 <bt_le_adv_start_legacy+0x138>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    633e:	6863      	ldr	r3, [r4, #4]
    6340:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    6344:	e9cd 7301 	strd	r7, r3, [sp, #4]
    6348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    634a:	9300      	str	r3, [sp, #0]
    634c:	4652      	mov	r2, sl
    634e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6350:	4649      	mov	r1, r9
    6352:	4630      	mov	r0, r6
    6354:	f7ff f88c 	bl	5470 <le_adv_update.constprop.0>
		if (err) {
    6358:	4683      	mov	fp, r0
    635a:	2800      	cmp	r0, #0
    635c:	d0c8      	beq.n	62f0 <bt_le_adv_start_legacy+0xf8>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    635e:	4658      	mov	r0, fp
    6360:	b00d      	add	sp, #52	; 0x34
    6362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    6366:	a905      	add	r1, sp, #20
    6368:	4630      	mov	r0, r6
    636a:	f7fe ff7f 	bl	526c <le_adv_start_add_conn>
		if (err) {
    636e:	4683      	mov	fp, r0
    6370:	2800      	cmp	r0, #0
    6372:	d0c0      	beq.n	62f6 <bt_le_adv_start_legacy+0xfe>
			if (err == -ENOMEM && !dir_adv &&
    6374:	f110 0f0c 	cmn.w	r0, #12
    6378:	d1f1      	bne.n	635e <bt_le_adv_start_legacy+0x166>
    637a:	2d00      	cmp	r5, #0
    637c:	d1ef      	bne.n	635e <bt_le_adv_start_legacy+0x166>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    637e:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    6380:	079b      	lsls	r3, r3, #30
    6382:	d4ec      	bmi.n	635e <bt_le_adv_start_legacy+0x166>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    6384:	6860      	ldr	r0, [r4, #4]
    6386:	f080 0002 	eor.w	r0, r0, #2
    638a:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    638e:	f00b 0201 	and.w	r2, fp, #1
    6392:	210c      	movs	r1, #12
    6394:	4640      	mov	r0, r8
    6396:	f018 fc79 	bl	1ec8c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    639a:	6862      	ldr	r2, [r4, #4]
    639c:	2107      	movs	r1, #7
    639e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    63a2:	4640      	mov	r0, r8
    63a4:	f018 fc72 	bl	1ec8c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    63a8:	6862      	ldr	r2, [r4, #4]
    63aa:	2108      	movs	r1, #8
    63ac:	f002 0201 	and.w	r2, r2, #1
    63b0:	4640      	mov	r0, r8
    63b2:	f018 fc6b 	bl	1ec8c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    63b6:	463a      	mov	r2, r7
    63b8:	2109      	movs	r1, #9
    63ba:	4640      	mov	r0, r8
    63bc:	f018 fc66 	bl	1ec8c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    63c0:	6862      	ldr	r2, [r4, #4]
    63c2:	210b      	movs	r1, #11
    63c4:	f3c2 0280 	ubfx	r2, r2, #2, #1
    63c8:	4640      	mov	r0, r8
    63ca:	f018 fc5f 	bl	1ec8c <atomic_set_bit_to>
	return 0;
    63ce:	f04f 0b00 	mov.w	fp, #0
    63d2:	e7c4      	b.n	635e <bt_le_adv_start_legacy+0x166>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    63d4:	b108      	cbz	r0, 63da <bt_le_adv_start_legacy+0x1e2>
		bt_conn_unref(conn);
    63d6:	f018 ffca 	bl	1f36e <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    63da:	2d00      	cmp	r5, #0
    63dc:	d1d7      	bne.n	638e <bt_le_adv_start_legacy+0x196>
    63de:	e7d1      	b.n	6384 <bt_le_adv_start_legacy+0x18c>
		return -EAGAIN;
    63e0:	f06f 0b0a 	mvn.w	fp, #10
    63e4:	e7bb      	b.n	635e <bt_le_adv_start_legacy+0x166>
		return -EINVAL;
    63e6:	f06f 0b15 	mvn.w	fp, #21
    63ea:	e7b8      	b.n	635e <bt_le_adv_start_legacy+0x166>
		return -EALREADY;
    63ec:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    63f0:	e7b5      	b.n	635e <bt_le_adv_start_legacy+0x166>
		return -ENOBUFS;
    63f2:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    63f6:	e7b2      	b.n	635e <bt_le_adv_start_legacy+0x166>
    63f8:	4683      	mov	fp, r0
    63fa:	e7b0      	b.n	635e <bt_le_adv_start_legacy+0x166>
    63fc:	20000098 	.word	0x20000098
    6400:	20000000 	.word	0x20000000

00006404 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    6404:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    6406:	9c04      	ldr	r4, [sp, #16]
    6408:	e9cd 3400 	strd	r3, r4, [sp]
    640c:	4613      	mov	r3, r2
    640e:	460a      	mov	r2, r1
    6410:	4601      	mov	r1, r0
    6412:	4802      	ldr	r0, [pc, #8]	; (641c <bt_le_adv_start+0x18>)
    6414:	f7ff fef0 	bl	61f8 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    6418:	b002      	add	sp, #8
    641a:	bd10      	pop	{r4, pc}
    641c:	20000018 	.word	0x20000018

00006420 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    6420:	b530      	push	{r4, r5, lr}
    6422:	4c22      	ldr	r4, [pc, #136]	; (64ac <bt_le_adv_stop+0x8c>)
    6424:	b085      	sub	sp, #20
    6426:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    642a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    642e:	f018 fc1e 	bl	1ec6e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6432:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6436:	f018 fbcd 	bl	1ebd4 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    643a:	0642      	lsls	r2, r0, #25
    643c:	f3c0 1380 	ubfx	r3, r0, #6, #1
    6440:	d531      	bpl.n	64a6 <bt_le_adv_stop+0x86>
    6442:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6446:	f018 fbc5 	bl	1ebd4 <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    644a:	05c3      	lsls	r3, r0, #23
    644c:	d521      	bpl.n	6492 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    644e:	2300      	movs	r3, #0
    6450:	4669      	mov	r1, sp
    6452:	f104 0023 	add.w	r0, r4, #35	; 0x23
    6456:	9300      	str	r3, [sp, #0]
    6458:	f8cd 3003 	str.w	r3, [sp, #3]
    645c:	f018 fc61 	bl	1ed22 <bt_addr_le_cmp>
    6460:	7e25      	ldrb	r5, [r4, #24]
    6462:	b9e0      	cbnz	r0, 649e <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    6464:	4b12      	ldr	r3, [pc, #72]	; (64b0 <bt_le_adv_stop+0x90>)
    6466:	889a      	ldrh	r2, [r3, #4]
    6468:	6818      	ldr	r0, [r3, #0]
    646a:	799b      	ldrb	r3, [r3, #6]
    646c:	f8ad 200c 	strh.w	r2, [sp, #12]
    6470:	9002      	str	r0, [sp, #8]
    6472:	f88d 300e 	strb.w	r3, [sp, #14]
    6476:	2204      	movs	r2, #4
    6478:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    647a:	4628      	mov	r0, r5
    647c:	f000 fb46 	bl	6b0c <bt_conn_lookup_state_le>
    6480:	4604      	mov	r4, r0
	if (conn) {
    6482:	b130      	cbz	r0, 6492 <bt_le_adv_stop+0x72>
		conn->err = status;
    6484:	2100      	movs	r1, #0
    6486:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6488:	f000 fb7a 	bl	6b80 <bt_conn_set_state>
		bt_conn_unref(conn);
    648c:	4620      	mov	r0, r4
    648e:	f018 ff6e 	bl	1f36e <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
    6492:	4808      	ldr	r0, [pc, #32]	; (64b4 <bt_le_adv_stop+0x94>)
    6494:	2100      	movs	r1, #0
    6496:	f7ff f8e7 	bl	5668 <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    649a:	b005      	add	sp, #20
    649c:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    649e:	2205      	movs	r2, #5
    64a0:	f104 0123 	add.w	r1, r4, #35	; 0x23
    64a4:	e7e9      	b.n	647a <bt_le_adv_stop+0x5a>
		return 0;
    64a6:	4618      	mov	r0, r3
    64a8:	e7f7      	b.n	649a <bt_le_adv_stop+0x7a>
    64aa:	bf00      	nop
    64ac:	20000000 	.word	0x20000000
    64b0:	000271e5 	.word	0x000271e5
    64b4:	20000018 	.word	0x20000018

000064b8 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    64b8:	b513      	push	{r0, r1, r4, lr}
    64ba:	4818      	ldr	r0, [pc, #96]	; (651c <bt_le_adv_resume+0x64>)
    64bc:	f018 fb8a 	bl	1ebd4 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    64c0:	04c1      	lsls	r1, r0, #19
    64c2:	d529      	bpl.n	6518 <bt_le_adv_resume+0x60>
    64c4:	4815      	ldr	r0, [pc, #84]	; (651c <bt_le_adv_resume+0x64>)
    64c6:	f018 fb85 	bl	1ebd4 <atomic_get>
    64ca:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    64cc:	f3c0 1480 	ubfx	r4, r0, #6, #1
    64d0:	d422      	bmi.n	6518 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    64d2:	4812      	ldr	r0, [pc, #72]	; (651c <bt_le_adv_resume+0x64>)
    64d4:	f018 fb7e 	bl	1ebd4 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    64d8:	05c3      	lsls	r3, r0, #23
    64da:	d51d      	bpl.n	6518 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    64dc:	4810      	ldr	r0, [pc, #64]	; (6520 <bt_le_adv_resume+0x68>)
    64de:	a901      	add	r1, sp, #4
    64e0:	f7fe fec4 	bl	526c <le_adv_start_add_conn>
	if (err) {
    64e4:	b9c0      	cbnz	r0, 6518 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    64e6:	480e      	ldr	r0, [pc, #56]	; (6520 <bt_le_adv_resume+0x68>)
    64e8:	2101      	movs	r1, #1
    64ea:	f7ff f8bd 	bl	5668 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    64ee:	b150      	cbz	r0, 6506 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    64f0:	4621      	mov	r1, r4
    64f2:	9801      	ldr	r0, [sp, #4]
    64f4:	f000 fb44 	bl	6b80 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    64f8:	4808      	ldr	r0, [pc, #32]	; (651c <bt_le_adv_resume+0x64>)
    64fa:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    64fe:	f018 fbb6 	bl	1ec6e <atomic_and>
	return (old & mask) != 0;
    6502:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    6506:	9801      	ldr	r0, [sp, #4]
    6508:	f018 ff31 	bl	1f36e <bt_conn_unref>
	if (persist_paused) {
    650c:	b124      	cbz	r4, 6518 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    650e:	4803      	ldr	r0, [pc, #12]	; (651c <bt_le_adv_resume+0x64>)
    6510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    6514:	f018 fb64 	bl	1ebe0 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    6518:	b002      	add	sp, #8
    651a:	bd10      	pop	{r4, pc}
    651c:	2000002c 	.word	0x2000002c
    6520:	20000018 	.word	0x20000018

00006524 <enh_conn_complete>:
{
    6524:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    6526:	7805      	ldrb	r5, [r0, #0]
{
    6528:	b085      	sub	sp, #20
    652a:	4604      	mov	r4, r0
	if (evt->status) {
    652c:	b19d      	cbz	r5, 6556 <enh_conn_complete+0x32>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    652e:	2d3c      	cmp	r5, #60	; 0x3c
    6530:	d13f      	bne.n	65b2 <enh_conn_complete+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6532:	f06f 0140 	mvn.w	r1, #64	; 0x40
    6536:	4842      	ldr	r0, [pc, #264]	; (6640 <enh_conn_complete+0x11c>)
    6538:	f018 fb99 	bl	1ec6e <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    653c:	2000      	movs	r0, #0
    653e:	f7fe fda7 	bl	5090 <find_pending_connect.part.0>
		if (!conn) {
    6542:	4604      	mov	r4, r0
    6544:	b3a8      	cbz	r0, 65b2 <enh_conn_complete+0x8e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    6546:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6548:	2100      	movs	r1, #0
    654a:	f000 fb19 	bl	6b80 <bt_conn_set_state>
		bt_conn_unref(conn);
    654e:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    6550:	f018 ff0d 	bl	1f36e <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6554:	e02d      	b.n	65b2 <enh_conn_complete+0x8e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6556:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6558:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    655c:	3b02      	subs	r3, #2
    655e:	2b01      	cmp	r3, #1
    6560:	f100 0104 	add.w	r1, r0, #4
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6564:	b2b7      	uxth	r7, r6
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    6566:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6568:	d825      	bhi.n	65b6 <enh_conn_complete+0x92>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    656a:	f018 fbe2 	bl	1ed32 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    656e:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    6572:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6576:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    6578:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    657c:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    6580:	f018 fbd2 	bl	1ed28 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    6584:	2301      	movs	r3, #1
    6586:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    658a:	78e3      	ldrb	r3, [r4, #3]
    658c:	2b01      	cmp	r3, #1
    658e:	d10c      	bne.n	65aa <enh_conn_complete+0x86>
    6590:	a802      	add	r0, sp, #8
    6592:	f7fe fd7d 	bl	5090 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6596:	78e3      	ldrb	r3, [r4, #3]
    6598:	2b01      	cmp	r3, #1
    659a:	4605      	mov	r5, r0
    659c:	d104      	bne.n	65a8 <enh_conn_complete+0x84>
    659e:	4828      	ldr	r0, [pc, #160]	; (6640 <enh_conn_complete+0x11c>)
    65a0:	f06f 0140 	mvn.w	r1, #64	; 0x40
    65a4:	f018 fb63 	bl	1ec6e <atomic_and>
	if (!conn) {
    65a8:	b95d      	cbnz	r5, 65c2 <enh_conn_complete+0x9e>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    65aa:	211f      	movs	r1, #31
    65ac:	4638      	mov	r0, r7
    65ae:	f018 fc6f 	bl	1ee90 <bt_hci_disconnect>
}
    65b2:	b005      	add	sp, #20
    65b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&id_addr,
    65b6:	f018 fbbc 	bl	1ed32 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    65ba:	4668      	mov	r0, sp
    65bc:	f018 fbb9 	bl	1ed32 <bt_addr_le_copy>
    65c0:	e7e3      	b.n	658a <enh_conn_complete+0x66>
	conn->handle = handle;
    65c2:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    65c4:	a902      	add	r1, sp, #8
	conn->handle = handle;
    65c6:	f820 6b88 	strh.w	r6, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    65ca:	f018 fbb2 	bl	1ed32 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    65ce:	7e22      	ldrb	r2, [r4, #24]
    65d0:	7de3      	ldrb	r3, [r4, #23]
    65d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    65d6:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    65da:	7ea2      	ldrb	r2, [r4, #26]
    65dc:	7e63      	ldrb	r3, [r4, #25]
    65de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    65e2:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    65e6:	7ee3      	ldrb	r3, [r4, #27]
    65e8:	7f22      	ldrb	r2, [r4, #28]
    65ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    65ee:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    65f2:	78e3      	ldrb	r3, [r4, #3]
    65f4:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    65f6:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    65f8:	2b01      	cmp	r3, #1
	conn->err = 0U;
    65fa:	726c      	strb	r4, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    65fc:	d116      	bne.n	662c <enh_conn_complete+0x108>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    65fe:	4669      	mov	r1, sp
    6600:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    6604:	f018 fb95 	bl	1ed32 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    6608:	7a29      	ldrb	r1, [r5, #8]
    660a:	4a0e      	ldr	r2, [pc, #56]	; (6644 <enh_conn_complete+0x120>)
    660c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    6610:	4411      	add	r1, r2
    6612:	f105 0096 	add.w	r0, r5, #150	; 0x96
    6616:	f018 fb8c 	bl	1ed32 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    661a:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    661e:	4622      	mov	r2, r4
    6620:	f001 0340 	and.w	r3, r1, #64	; 0x40
    6624:	4313      	orrs	r3, r2
    6626:	d001      	beq.n	662c <enh_conn_complete+0x108>
			bt_le_adv_resume();
    6628:	f7ff ff46 	bl	64b8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    662c:	2107      	movs	r1, #7
    662e:	4628      	mov	r0, r5
    6630:	f000 faa6 	bl	6b80 <bt_conn_set_state>
	conn_auto_initiate(conn);
    6634:	4628      	mov	r0, r5
    6636:	f7ff f8a3 	bl	5780 <conn_auto_initiate>
	bt_conn_unref(conn);
    663a:	4628      	mov	r0, r5
    663c:	e788      	b.n	6550 <enh_conn_complete+0x2c>
    663e:	bf00      	nop
    6640:	2000002c 	.word	0x2000002c
    6644:	20000000 	.word	0x20000000

00006648 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    6648:	b538      	push	{r3, r4, r5, lr}
    664a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    664c:	4805      	ldr	r0, [pc, #20]	; (6664 <bt_buf_get_rx+0x1c>)
    664e:	f01a fbad 	bl	20dac <net_buf_alloc_fixed>
#endif

	if (buf) {
    6652:	4604      	mov	r4, r0
    6654:	b120      	cbz	r0, 6660 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    6656:	2100      	movs	r1, #0
    6658:	3008      	adds	r0, #8
    665a:	f01a fbcc 	bl	20df6 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
    665e:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    6660:	4620      	mov	r0, r4
    6662:	bd38      	pop	{r3, r4, r5, pc}
    6664:	20000e28 	.word	0x20000e28

00006668 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    6668:	b570      	push	{r4, r5, r6, lr}
    666a:	4602      	mov	r2, r0
    666c:	460b      	mov	r3, r1
	__asm__ volatile(
    666e:	f04f 0120 	mov.w	r1, #32
    6672:	f3ef 8511 	mrs	r5, BASEPRI
    6676:	f381 8811 	msr	BASEPRI, r1
    667a:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    667e:	480c      	ldr	r0, [pc, #48]	; (66b0 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    6680:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    6682:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    6686:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
    668a:	f385 8811 	msr	BASEPRI, r5
    668e:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    6692:	b924      	cbnz	r4, 669e <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    6694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6698:	2001      	movs	r0, #1
    669a:	f7ff bfd5 	b.w	6648 <bt_buf_get_rx>
    669e:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    66a0:	f104 0008 	add.w	r0, r4, #8
    66a4:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    66a6:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    66a8:	f01a fba5 	bl	20df6 <net_buf_simple_reserve>
}
    66ac:	4620      	mov	r0, r4
    66ae:	bd70      	pop	{r4, r5, r6, pc}
    66b0:	20000000 	.word	0x20000000

000066b4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
    66b4:	b570      	push	{r4, r5, r6, lr}
    66b6:	4604      	mov	r4, r0
	switch (evt) {
    66b8:	2c0f      	cmp	r4, #15
{
    66ba:	460d      	mov	r5, r1
    66bc:	4610      	mov	r0, r2
    66be:	4619      	mov	r1, r3
	switch (evt) {
    66c0:	d805      	bhi.n	66ce <bt_buf_get_evt+0x1a>
    66c2:	2c0d      	cmp	r4, #13
    66c4:	d912      	bls.n	66ec <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    66c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    66ca:	f7ff bfcd 	b.w	6668 <bt_buf_get_cmd_complete>
	switch (evt) {
    66ce:	2c13      	cmp	r4, #19
    66d0:	d10c      	bne.n	66ec <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    66d2:	480b      	ldr	r0, [pc, #44]	; (6700 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    66d4:	f01a fb6a 	bl	20dac <net_buf_alloc_fixed>
			if (buf) {
    66d8:	4604      	mov	r4, r0
    66da:	b128      	cbz	r0, 66e8 <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    66dc:	2100      	movs	r1, #0
    66de:	3008      	adds	r0, #8
    66e0:	f01a fb89 	bl	20df6 <net_buf_simple_reserve>
    66e4:	2301      	movs	r3, #1
    66e6:	7523      	strb	r3, [r4, #20]
}
    66e8:	4620      	mov	r0, r4
    66ea:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    66ec:	4602      	mov	r2, r0
    66ee:	460b      	mov	r3, r1
		if (discardable) {
    66f0:	b10d      	cbz	r5, 66f6 <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    66f2:	4804      	ldr	r0, [pc, #16]	; (6704 <bt_buf_get_evt+0x50>)
    66f4:	e7ee      	b.n	66d4 <bt_buf_get_evt+0x20>
}
    66f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    66fa:	2001      	movs	r0, #1
    66fc:	f7ff bfa4 	b.w	6648 <bt_buf_get_rx>
    6700:	20000e50 	.word	0x20000e50
    6704:	20000db0 	.word	0x20000db0

00006708 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6708:	2300      	movs	r3, #0
	tx->user_data = NULL;
    670a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    670e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    6710:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    6712:	4801      	ldr	r0, [pc, #4]	; (6718 <tx_free+0x10>)
    6714:	f01f bd91 	b.w	2623a <k_queue_append>
    6718:	20000d58 	.word	0x20000d58

0000671c <notify_connected>:
{
    671c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    671e:	4b09      	ldr	r3, [pc, #36]	; (6744 <notify_connected+0x28>)
    6720:	681d      	ldr	r5, [r3, #0]
{
    6722:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6724:	7a61      	ldrb	r1, [r4, #9]
    6726:	b92d      	cbnz	r5, 6734 <notify_connected+0x18>
	if (!conn->err) {
    6728:	b951      	cbnz	r1, 6740 <notify_connected+0x24>
		bt_gatt_connected(conn);
    672a:	4620      	mov	r0, r4
}
    672c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    6730:	f002 bada 	b.w	8ce8 <bt_gatt_connected>
		if (cb->connected) {
    6734:	682b      	ldr	r3, [r5, #0]
    6736:	b10b      	cbz	r3, 673c <notify_connected+0x20>
			cb->connected(conn, conn->err);
    6738:	4620      	mov	r0, r4
    673a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    673c:	692d      	ldr	r5, [r5, #16]
    673e:	e7f1      	b.n	6724 <notify_connected+0x8>
}
    6740:	bd38      	pop	{r3, r4, r5, pc}
    6742:	bf00      	nop
    6744:	20001830 	.word	0x20001830

00006748 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    6748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    674c:	694d      	ldr	r5, [r1, #20]
{
    674e:	4604      	mov	r4, r0
    6750:	460e      	mov	r6, r1
    6752:	4690      	mov	r8, r2
    6754:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    6756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    675a:	483f      	ldr	r0, [pc, #252]	; (6858 <send_frag+0x110>)
    675c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6760:	f014 fc36 	bl	1afd0 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    6764:	7aa3      	ldrb	r3, [r4, #10]
    6766:	2b07      	cmp	r3, #7
    6768:	d146      	bne.n	67f8 <send_frag+0xb0>
	__asm__ volatile(
    676a:	f04f 0320 	mov.w	r3, #32
    676e:	f3ef 8211 	mrs	r2, BASEPRI
    6772:	f383 8811 	msr	BASEPRI, r3
    6776:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    677a:	2d00      	cmp	r5, #0
    677c:	d04e      	beq.n	681c <send_frag+0xd4>
	parent->next = child;
    677e:	2300      	movs	r3, #0
    6780:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    6782:	69a3      	ldr	r3, [r4, #24]
    6784:	2b00      	cmp	r3, #0
    6786:	d146      	bne.n	6816 <send_frag+0xce>
	list->head = node;
    6788:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    678c:	f382 8811 	msr	BASEPRI, r2
    6790:	f3bf 8f6f 	isb	sy
	hdr = net_buf_push(buf, sizeof(*hdr));
    6794:	2104      	movs	r1, #4
    6796:	f106 0008 	add.w	r0, r6, #8
    679a:	f01a fb85 	bl	20ea8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    679e:	8823      	ldrh	r3, [r4, #0]
    67a0:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    67a4:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    67a8:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    67aa:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    67ae:	3b04      	subs	r3, #4
    67b0:	8043      	strh	r3, [r0, #2]
    67b2:	2302      	movs	r3, #2
    67b4:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    67b6:	4630      	mov	r0, r6
    67b8:	f7fe ffb8 	bl	572c <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    67bc:	2800      	cmp	r0, #0
    67be:	d049      	beq.n	6854 <send_frag+0x10c>
	__asm__ volatile(
    67c0:	f04f 0320 	mov.w	r3, #32
    67c4:	f3ef 8111 	mrs	r1, BASEPRI
    67c8:	f383 8811 	msr	BASEPRI, r3
    67cc:	f3bf 8f6f 	isb	sy
		BT_ERR("Unable to send to driver (err %d)", err);
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    67d0:	2d00      	cmp	r5, #0
    67d2:	d039      	beq.n	6848 <send_frag+0x100>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    67d4:	6963      	ldr	r3, [r4, #20]
    67d6:	2200      	movs	r2, #0
    67d8:	b153      	cbz	r3, 67f0 <send_frag+0xa8>
    67da:	429d      	cmp	r5, r3
    67dc:	d131      	bne.n	6842 <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
    67de:	682b      	ldr	r3, [r5, #0]
    67e0:	bb4a      	cbnz	r2, 6836 <send_frag+0xee>
    67e2:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    67e4:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    67e6:	4295      	cmp	r5, r2
    67e8:	d100      	bne.n	67ec <send_frag+0xa4>
	list->tail = node;
    67ea:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    67ec:	2300      	movs	r3, #0
    67ee:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    67f0:	f381 8811 	msr	BASEPRI, r1
    67f4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    67f8:	4817      	ldr	r0, [pc, #92]	; (6858 <send_frag+0x110>)
    67fa:	f014 fbc3 	bl	1af84 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    67fe:	b115      	cbz	r5, 6806 <send_frag+0xbe>
		tx_free(tx);
    6800:	4628      	mov	r0, r5
    6802:	f7ff ff81 	bl	6708 <tx_free>
	}

	if (always_consume) {
    6806:	b11f      	cbz	r7, 6810 <send_frag+0xc8>
		net_buf_unref(buf);
    6808:	4630      	mov	r0, r6
    680a:	f00d ffad 	bl	14768 <net_buf_unref>
	}
	return false;
    680e:	2700      	movs	r7, #0
}
    6810:	4638      	mov	r0, r7
    6812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6816:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6818:	61a5      	str	r5, [r4, #24]
}
    681a:	e7b7      	b.n	678c <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    681c:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    681e:	b133      	cbz	r3, 682e <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
    6820:	f103 090c 	add.w	r9, r3, #12
    6824:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    6826:	3301      	adds	r3, #1
    6828:	f8c9 3000 	str.w	r3, [r9]
    682c:	e7ae      	b.n	678c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    682e:	69e3      	ldr	r3, [r4, #28]
    6830:	f104 091c 	add.w	r9, r4, #28
    6834:	e7f7      	b.n	6826 <send_frag+0xde>
	parent->next = child;
    6836:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    6838:	69a3      	ldr	r3, [r4, #24]
    683a:	429d      	cmp	r5, r3
	list->tail = node;
    683c:	bf08      	it	eq
    683e:	61a2      	streq	r2, [r4, #24]
}
    6840:	e7d4      	b.n	67ec <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6842:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6844:	681b      	ldr	r3, [r3, #0]
    6846:	e7c7      	b.n	67d8 <send_frag+0x90>
			(*pending_no_cb)--;
    6848:	f8d9 3000 	ldr.w	r3, [r9]
    684c:	3b01      	subs	r3, #1
    684e:	f8c9 3000 	str.w	r3, [r9]
    6852:	e7cd      	b.n	67f0 <send_frag+0xa8>
	return true;
    6854:	2701      	movs	r7, #1
    6856:	e7db      	b.n	6810 <send_frag+0xc8>
    6858:	200000d0 	.word	0x200000d0

0000685c <bt_conn_get_pkts>:
}
    685c:	4800      	ldr	r0, [pc, #0]	; (6860 <bt_conn_get_pkts+0x4>)
    685e:	4770      	bx	lr
    6860:	200000d0 	.word	0x200000d0

00006864 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6864:	1d03      	adds	r3, r0, #4
{
    6866:	b570      	push	{r4, r5, r6, lr}
    6868:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    686a:	4618      	mov	r0, r3
    686c:	f018 fc8c 	bl	1f188 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6870:	0582      	lsls	r2, r0, #22
    6872:	d519      	bpl.n	68a8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    6874:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6878:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    687c:	4291      	cmp	r1, r2
    687e:	d813      	bhi.n	68a8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    6880:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    6884:	4291      	cmp	r1, r2
    6886:	d30f      	bcc.n	68a8 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    6888:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    688c:	4291      	cmp	r1, r2
    688e:	d10b      	bne.n	68a8 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6890:	f3bf 8f5b 	dmb	ish
    6894:	e853 2f00 	ldrex	r2, [r3]
    6898:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    689c:	e843 2100 	strex	r1, r2, [r3]
    68a0:	2900      	cmp	r1, #0
    68a2:	d1f7      	bne.n	6894 <notify_le_param_updated+0x30>
    68a4:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    68a8:	4b07      	ldr	r3, [pc, #28]	; (68c8 <notify_le_param_updated+0x64>)
    68aa:	681d      	ldr	r5, [r3, #0]
    68ac:	b905      	cbnz	r5, 68b0 <notify_le_param_updated+0x4c>
}
    68ae:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    68b0:	68ee      	ldr	r6, [r5, #12]
    68b2:	b13e      	cbz	r6, 68c4 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    68b4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    68b8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    68bc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    68c0:	4620      	mov	r0, r4
    68c2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    68c4:	692d      	ldr	r5, [r5, #16]
    68c6:	e7f1      	b.n	68ac <notify_le_param_updated+0x48>
    68c8:	20001830 	.word	0x20001830

000068cc <le_param_req>:
{
    68cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68ce:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    68d0:	4608      	mov	r0, r1
{
    68d2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    68d4:	f018 faae 	bl	1ee34 <bt_le_conn_params_valid>
    68d8:	4604      	mov	r4, r0
    68da:	b910      	cbnz	r0, 68e2 <le_param_req+0x16>
		return false;
    68dc:	2400      	movs	r4, #0
}
    68de:	4620      	mov	r0, r4
    68e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    68e2:	4b09      	ldr	r3, [pc, #36]	; (6908 <le_param_req+0x3c>)
    68e4:	681e      	ldr	r6, [r3, #0]
    68e6:	2e00      	cmp	r6, #0
    68e8:	d0f9      	beq.n	68de <le_param_req+0x12>
		if (!cb->le_param_req) {
    68ea:	68b3      	ldr	r3, [r6, #8]
    68ec:	b90b      	cbnz	r3, 68f2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    68ee:	6936      	ldr	r6, [r6, #16]
    68f0:	e7f9      	b.n	68e6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    68f2:	4629      	mov	r1, r5
    68f4:	4638      	mov	r0, r7
    68f6:	4798      	blx	r3
    68f8:	2800      	cmp	r0, #0
    68fa:	d0ef      	beq.n	68dc <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    68fc:	4628      	mov	r0, r5
    68fe:	f018 fa99 	bl	1ee34 <bt_le_conn_params_valid>
    6902:	2800      	cmp	r0, #0
    6904:	d1f3      	bne.n	68ee <le_param_req+0x22>
    6906:	e7e9      	b.n	68dc <le_param_req+0x10>
    6908:	20001830 	.word	0x20001830

0000690c <bt_conn_cb_register>:
	cb->_next = callback_list;
    690c:	4b02      	ldr	r3, [pc, #8]	; (6918 <bt_conn_cb_register+0xc>)
    690e:	681a      	ldr	r2, [r3, #0]
    6910:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    6912:	6018      	str	r0, [r3, #0]
}
    6914:	4770      	bx	lr
    6916:	bf00      	nop
    6918:	20001830 	.word	0x20001830

0000691c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    691c:	b570      	push	{r4, r5, r6, lr}
    691e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    6920:	f100 0634 	add.w	r6, r0, #52	; 0x34
    6924:	2200      	movs	r2, #0
    6926:	2300      	movs	r3, #0
    6928:	4630      	mov	r0, r6
    692a:	f01a fa44 	bl	20db6 <net_buf_get>
    692e:	4605      	mov	r5, r0
    6930:	b958      	cbnz	r0, 694a <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    6932:	4620      	mov	r0, r4
    6934:	f018 fc8a 	bl	1f24c <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6938:	f104 0158 	add.w	r1, r4, #88	; 0x58
    693c:	4807      	ldr	r0, [pc, #28]	; (695c <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    693e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6942:	2200      	movs	r2, #0
    6944:	2300      	movs	r3, #0
    6946:	f014 bc79 	b.w	1b23c <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    694a:	6968      	ldr	r0, [r5, #20]
    694c:	b108      	cbz	r0, 6952 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    694e:	f7ff fedb 	bl	6708 <tx_free>
		net_buf_unref(buf);
    6952:	4628      	mov	r0, r5
    6954:	f00d ff08 	bl	14768 <net_buf_unref>
    6958:	e7e4      	b.n	6924 <conn_cleanup+0x8>
    695a:	bf00      	nop
    695c:	20001488 	.word	0x20001488

00006960 <bt_conn_send_cb>:
{
    6960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6964:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    6966:	7a83      	ldrb	r3, [r0, #10]
    6968:	2b07      	cmp	r3, #7
{
    696a:	4606      	mov	r6, r0
    696c:	460d      	mov	r5, r1
    696e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    6970:	d005      	beq.n	697e <bt_conn_send_cb+0x1e>
		net_buf_unref(buf);
    6972:	4608      	mov	r0, r1
    6974:	f00d fef8 	bl	14768 <net_buf_unref>
			return -ENOTCONN;
    6978:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    697c:	e015      	b.n	69aa <bt_conn_send_cb+0x4a>
	if (cb) {
    697e:	b362      	cbz	r2, 69da <bt_conn_send_cb+0x7a>
	return z_impl_k_current_get();
    6980:	f014 fafa 	bl	1af78 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    6984:	4b16      	ldr	r3, [pc, #88]	; (69e0 <bt_conn_send_cb+0x80>)
    6986:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    6988:	4816      	ldr	r0, [pc, #88]	; (69e4 <bt_conn_send_cb+0x84>)
    698a:	bf07      	ittee	eq
    698c:	2200      	moveq	r2, #0
    698e:	2300      	moveq	r3, #0
    6990:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    6994:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    6998:	f013 ff30 	bl	1a7fc <z_impl_k_queue_get>
    699c:	4604      	mov	r4, r0
		if (!tx) {
    699e:	b930      	cbnz	r0, 69ae <bt_conn_send_cb+0x4e>
			net_buf_unref(buf);
    69a0:	4628      	mov	r0, r5
    69a2:	f00d fee1 	bl	14768 <net_buf_unref>
			return -ENOBUFS;
    69a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    69aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    69ae:	7ab3      	ldrb	r3, [r6, #10]
    69b0:	2b07      	cmp	r3, #7
    69b2:	d006      	beq.n	69c2 <bt_conn_send_cb+0x62>
			net_buf_unref(buf);
    69b4:	4628      	mov	r0, r5
    69b6:	f00d fed7 	bl	14768 <net_buf_unref>
			tx_free(tx);
    69ba:	4620      	mov	r0, r4
    69bc:	f7ff fea4 	bl	6708 <tx_free>
    69c0:	e7da      	b.n	6978 <bt_conn_send_cb+0x18>
		tx->pending_no_cb = 0U;
    69c2:	2300      	movs	r3, #0
		tx->user_data = user_data;
    69c4:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    69c8:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    69ca:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    69cc:	f106 0034 	add.w	r0, r6, #52	; 0x34
    69d0:	4629      	mov	r1, r5
    69d2:	f01a fa14 	bl	20dfe <net_buf_put>
	return 0;
    69d6:	2000      	movs	r0, #0
    69d8:	e7e7      	b.n	69aa <bt_conn_send_cb+0x4a>
		tx_data(buf)->tx = NULL;
    69da:	614a      	str	r2, [r1, #20]
    69dc:	e7f6      	b.n	69cc <bt_conn_send_cb+0x6c>
    69de:	bf00      	nop
    69e0:	200014a0 	.word	0x200014a0
    69e4:	20000d58 	.word	0x20000d58

000069e8 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    69e8:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    69ea:	4b1b      	ldr	r3, [pc, #108]	; (6a58 <bt_conn_prepare_events+0x70>)
    69ec:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    69ee:	2101      	movs	r1, #1
{
    69f0:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    69f2:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    69f4:	f01f ffdc 	bl	269b0 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    69f8:	4b18      	ldr	r3, [pc, #96]	; (6a5c <bt_conn_prepare_events+0x74>)
    69fa:	f103 0054 	add.w	r0, r3, #84	; 0x54
    69fe:	f018 fbc3 	bl	1f188 <atomic_get>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    6a02:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    6a06:	4619      	mov	r1, r3
    6a08:	b908      	cbnz	r0, 6a0e <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
    6a0a:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    6a0c:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    6a0e:	7a9a      	ldrb	r2, [r3, #10]
    6a10:	b99a      	cbnz	r2, 6a3a <bt_conn_prepare_events+0x52>
    6a12:	f3bf 8f5b 	dmb	ish
    6a16:	1d1a      	adds	r2, r3, #4
    6a18:	e852 0f00 	ldrex	r0, [r2]
    6a1c:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    6a20:	e842 ce00 	strex	lr, ip, [r2]
    6a24:	f1be 0f00 	cmp.w	lr, #0
    6a28:	d1f6      	bne.n	6a18 <bt_conn_prepare_events+0x30>
    6a2a:	f3bf 8f5b 	dmb	ish
    6a2e:	0642      	lsls	r2, r0, #25
    6a30:	d503      	bpl.n	6a3a <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
    6a32:	4618      	mov	r0, r3
    6a34:	f7ff ff72 	bl	691c <conn_cleanup>
    6a38:	e7e7      	b.n	6a0a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    6a3a:	7a8b      	ldrb	r3, [r1, #10]
    6a3c:	2b07      	cmp	r3, #7
    6a3e:	d1e4      	bne.n	6a0a <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
    6a40:	4b07      	ldr	r3, [pc, #28]	; (6a60 <bt_conn_prepare_events+0x78>)
    6a42:	4628      	mov	r0, r5
    6a44:	2200      	movs	r2, #0
    6a46:	2104      	movs	r1, #4
    6a48:	f01f ffb2 	bl	269b0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    6a4c:	2301      	movs	r3, #1
    6a4e:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    6a52:	2002      	movs	r0, #2
	return ev_count;
    6a54:	e7da      	b.n	6a0c <bt_conn_prepare_events+0x24>
    6a56:	bf00      	nop
    6a58:	20000384 	.word	0x20000384
    6a5c:	20000fa8 	.word	0x20000fa8
    6a60:	20000fdc 	.word	0x20000fdc

00006a64 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    6a64:	b570      	push	{r4, r5, r6, lr}
    6a66:	4606      	mov	r6, r0
    6a68:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    6a6a:	4810      	ldr	r0, [pc, #64]	; (6aac <bt_conn_add_le+0x48>)
    6a6c:	2101      	movs	r1, #1
    6a6e:	f018 fbc4 	bl	1f1fa <bt_conn_new>
	if (!conn) {
    6a72:	4604      	mov	r4, r0
    6a74:	b1b8      	cbz	r0, 6aa6 <bt_conn_add_le+0x42>
	k_delayed_work_init(&conn->deferred_work, deferred_work);
    6a76:	490e      	ldr	r1, [pc, #56]	; (6ab0 <bt_conn_add_le+0x4c>)
    6a78:	3058      	adds	r0, #88	; 0x58
    6a7a:	f01f fdaa 	bl	265d2 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    6a7e:	4a0d      	ldr	r2, [pc, #52]	; (6ab4 <bt_conn_add_le+0x50>)

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    6a80:	7226      	strb	r6, [r4, #8]
    6a82:	2300      	movs	r3, #0
    6a84:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    6a88:	62a3      	str	r3, [r4, #40]	; 0x28
    6a8a:	682b      	ldr	r3, [r5, #0]
    6a8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    6a90:	88ab      	ldrh	r3, [r5, #4]
    6a92:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    6a96:	79ab      	ldrb	r3, [r5, #6]
    6a98:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    6a9c:	2301      	movs	r3, #1
    6a9e:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    6aa0:	4b05      	ldr	r3, [pc, #20]	; (6ab8 <bt_conn_add_le+0x54>)
    6aa2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    6aa6:	4620      	mov	r0, r4
    6aa8:	bd70      	pop	{r4, r5, r6, pc}
    6aaa:	bf00      	nop
    6aac:	20000fa8 	.word	0x20000fa8
    6ab0:	00006d39 	.word	0x00006d39
    6ab4:	0001f1f5 	.word	0x0001f1f5
    6ab8:	00280018 	.word	0x00280018

00006abc <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    6abc:	4602      	mov	r2, r0
    6abe:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    6ac0:	2101      	movs	r1, #1
    6ac2:	4803      	ldr	r0, [pc, #12]	; (6ad0 <bt_conn_lookup_handle+0x14>)
    6ac4:	f018 fc12 	bl	1f2ec <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    6ac8:	2800      	cmp	r0, #0
    6aca:	bf38      	it	cc
    6acc:	2000      	movcc	r0, #0
    6ace:	bd08      	pop	{r3, pc}
    6ad0:	20000fa8 	.word	0x20000fa8

00006ad4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    6ad4:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		if (!atomic_get(&acl_conns[i].ref)) {
    6ad6:	4c0c      	ldr	r4, [pc, #48]	; (6b08 <bt_conn_lookup_addr_le+0x34>)
{
    6ad8:	4603      	mov	r3, r0
		if (!atomic_get(&acl_conns[i].ref)) {
    6ada:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    6ade:	460a      	mov	r2, r1
		if (!atomic_get(&acl_conns[i].ref)) {
    6ae0:	f018 fb52 	bl	1f188 <atomic_get>
    6ae4:	b908      	cbnz	r0, 6aea <bt_conn_lookup_addr_le+0x16>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
			return bt_conn_ref(&acl_conns[i]);
		}
	}

	return NULL;
    6ae6:	2000      	movs	r0, #0
}
    6ae8:	bd10      	pop	{r4, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
    6aea:	78a1      	ldrb	r1, [r4, #2]
    6aec:	2901      	cmp	r1, #1
    6aee:	d1fa      	bne.n	6ae6 <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    6af0:	4619      	mov	r1, r3
    6af2:	4620      	mov	r0, r4
    6af4:	f018 fc1b 	bl	1f32e <bt_conn_is_peer_addr_le>
    6af8:	2800      	cmp	r0, #0
    6afa:	d0f4      	beq.n	6ae6 <bt_conn_lookup_addr_le+0x12>
#endif /* defined(CONFIG_BT_ISO) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
    6afc:	f104 0054 	add.w	r0, r4, #84	; 0x54
    6b00:	f018 fb48 	bl	1f194 <atomic_inc>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    6b04:	4620      	mov	r0, r4
			return bt_conn_ref(&acl_conns[i]);
    6b06:	e7ef      	b.n	6ae8 <bt_conn_lookup_addr_le+0x14>
    6b08:	20000fa8 	.word	0x20000fa8

00006b0c <bt_conn_lookup_state_le>:
{
    6b0c:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&acl_conns[i].ref)) {
    6b0e:	4c10      	ldr	r4, [pc, #64]	; (6b50 <bt_conn_lookup_state_le+0x44>)
{
    6b10:	4605      	mov	r5, r0
		if (!atomic_get(&acl_conns[i].ref)) {
    6b12:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    6b16:	4616      	mov	r6, r2
		if (!atomic_get(&acl_conns[i].ref)) {
    6b18:	f018 fb36 	bl	1f188 <atomic_get>
    6b1c:	b908      	cbnz	r0, 6b22 <bt_conn_lookup_state_le+0x16>
	return NULL;
    6b1e:	2000      	movs	r0, #0
}
    6b20:	bd70      	pop	{r4, r5, r6, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
    6b22:	78a3      	ldrb	r3, [r4, #2]
    6b24:	2b01      	cmp	r3, #1
    6b26:	d1fa      	bne.n	6b1e <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    6b28:	b951      	cbnz	r1, 6b40 <bt_conn_lookup_state_le+0x34>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
    6b2a:	7aa3      	ldrb	r3, [r4, #10]
    6b2c:	42b3      	cmp	r3, r6
    6b2e:	d1f6      	bne.n	6b1e <bt_conn_lookup_state_le+0x12>
    6b30:	7a23      	ldrb	r3, [r4, #8]
    6b32:	42ab      	cmp	r3, r5
    6b34:	d1f3      	bne.n	6b1e <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    6b36:	4807      	ldr	r0, [pc, #28]	; (6b54 <bt_conn_lookup_state_le+0x48>)
    6b38:	f018 fb2c 	bl	1f194 <atomic_inc>
			return bt_conn_ref(&acl_conns[i]);
    6b3c:	4804      	ldr	r0, [pc, #16]	; (6b50 <bt_conn_lookup_state_le+0x44>)
    6b3e:	e7ef      	b.n	6b20 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    6b40:	460a      	mov	r2, r1
    6b42:	4620      	mov	r0, r4
    6b44:	4629      	mov	r1, r5
    6b46:	f018 fbf2 	bl	1f32e <bt_conn_is_peer_addr_le>
    6b4a:	2800      	cmp	r0, #0
    6b4c:	d1ed      	bne.n	6b2a <bt_conn_lookup_state_le+0x1e>
    6b4e:	e7e6      	b.n	6b1e <bt_conn_lookup_state_le+0x12>
    6b50:	20000fa8 	.word	0x20000fa8
    6b54:	20000ffc 	.word	0x20000ffc

00006b58 <bt_conn_foreach>:
{
    6b58:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&acl_conns[i].ref)) {
    6b5a:	4c08      	ldr	r4, [pc, #32]	; (6b7c <bt_conn_foreach+0x24>)
{
    6b5c:	4605      	mov	r5, r0
		if (!atomic_get(&acl_conns[i].ref)) {
    6b5e:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    6b62:	460b      	mov	r3, r1
    6b64:	4611      	mov	r1, r2
		if (!atomic_get(&acl_conns[i].ref)) {
    6b66:	f018 fb0f 	bl	1f188 <atomic_get>
    6b6a:	b130      	cbz	r0, 6b7a <bt_conn_foreach+0x22>
		if (!(acl_conns[i].type & type)) {
    6b6c:	78a2      	ldrb	r2, [r4, #2]
    6b6e:	422a      	tst	r2, r5
    6b70:	d003      	beq.n	6b7a <bt_conn_foreach+0x22>
		func(&acl_conns[i], data);
    6b72:	4620      	mov	r0, r4
}
    6b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		func(&acl_conns[i], data);
    6b78:	4718      	bx	r3
}
    6b7a:	bd70      	pop	{r4, r5, r6, pc}
    6b7c:	20000fa8 	.word	0x20000fa8

00006b80 <bt_conn_set_state>:
{
    6b80:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    6b82:	7a85      	ldrb	r5, [r0, #10]
    6b84:	428d      	cmp	r5, r1
{
    6b86:	4604      	mov	r4, r0
	if (conn->state == state) {
    6b88:	f000 80a1 	beq.w	6cce <bt_conn_set_state+0x14e>
	conn->state = state;
    6b8c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    6b8e:	b915      	cbnz	r5, 6b96 <bt_conn_set_state+0x16>
	atomic_val_t old = atomic_inc(&conn->ref);
    6b90:	3054      	adds	r0, #84	; 0x54
    6b92:	f018 faff 	bl	1f194 <atomic_inc>
	switch (conn->state) {
    6b96:	7aa3      	ldrb	r3, [r4, #10]
    6b98:	2b01      	cmp	r3, #1
    6b9a:	d116      	bne.n	6bca <bt_conn_set_state+0x4a>
	z_impl_k_sem_give(sem);
    6b9c:	4d4c      	ldr	r5, [pc, #304]	; (6cd0 <bt_conn_set_state+0x150>)
		tx->pending_no_cb = 0U;
    6b9e:	2600      	movs	r6, #0
	__asm__ volatile(
    6ba0:	f04f 0320 	mov.w	r3, #32
    6ba4:	f3ef 8211 	mrs	r2, BASEPRI
    6ba8:	f383 8811 	msr	BASEPRI, r3
    6bac:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    6bb0:	69e3      	ldr	r3, [r4, #28]
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	d06c      	beq.n	6c90 <bt_conn_set_state+0x110>
			conn->pending_no_cb--;
    6bb6:	3b01      	subs	r3, #1
    6bb8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    6bba:	f382 8811 	msr	BASEPRI, r2
    6bbe:	f3bf 8f6f 	isb	sy
    6bc2:	4628      	mov	r0, r5
    6bc4:	f014 f9de 	bl	1af84 <z_impl_k_sem_give>
}
    6bc8:	e7ea      	b.n	6ba0 <bt_conn_set_state+0x20>
	switch (conn->state) {
    6bca:	2b07      	cmp	r3, #7
    6bcc:	d009      	beq.n	6be2 <bt_conn_set_state+0x62>
    6bce:	2b00      	cmp	r3, #0
    6bd0:	d17d      	bne.n	6cce <bt_conn_set_state+0x14e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    6bd2:	78a3      	ldrb	r3, [r4, #2]
    6bd4:	2b04      	cmp	r3, #4
    6bd6:	d125      	bne.n	6c24 <bt_conn_set_state+0xa4>
			bt_conn_unref(conn);
    6bd8:	4620      	mov	r0, r4
}
    6bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    6bde:	f018 bbc6 	b.w	1f36e <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
    6be2:	78a3      	ldrb	r3, [r4, #2]
    6be4:	2b04      	cmp	r3, #4
    6be6:	d072      	beq.n	6cce <bt_conn_set_state+0x14e>
	z_impl_k_queue_init(queue);
    6be8:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6bec:	f01f fb19 	bl	26222 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    6bf0:	2100      	movs	r1, #0
    6bf2:	4838      	ldr	r0, [pc, #224]	; (6cd4 <bt_conn_set_state+0x154>)
    6bf4:	f014 fd9e 	bl	1b734 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    6bf8:	2300      	movs	r3, #0
	list->tail = NULL;
    6bfa:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
    6bfe:	4620      	mov	r0, r4
    6c00:	f000 f9d8 	bl	6fb4 <bt_l2cap_connected>
		notify_connected(conn);
    6c04:	4620      	mov	r0, r4
    6c06:	f7ff fd89 	bl	671c <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6c0a:	78e3      	ldrb	r3, [r4, #3]
    6c0c:	2b01      	cmp	r3, #1
    6c0e:	d15e      	bne.n	6cce <bt_conn_set_state+0x14e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6c10:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6c14:	4830      	ldr	r0, [pc, #192]	; (6cd8 <bt_conn_set_state+0x158>)
}
    6c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c1a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    6c1e:	2300      	movs	r3, #0
    6c20:	f014 bb0c 	b.w	1b23c <k_delayed_work_submit_to_queue>
		switch (old_state) {
    6c24:	3d01      	subs	r5, #1
    6c26:	2d05      	cmp	r5, #5
    6c28:	d851      	bhi.n	6cce <bt_conn_set_state+0x14e>
    6c2a:	a301      	add	r3, pc, #4	; (adr r3, 6c30 <bt_conn_set_state+0xb0>)
    6c2c:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    6c30:	00006c49 	.word	0x00006c49
    6c34:	00006c83 	.word	0x00006c83
    6c38:	00006bd9 	.word	0x00006bd9
    6c3c:	00006bd9 	.word	0x00006bd9
    6c40:	00006c83 	.word	0x00006c83
    6c44:	00006c83 	.word	0x00006c83
			tx_notify(conn);
    6c48:	4620      	mov	r0, r4
    6c4a:	f018 fab0 	bl	1f1ae <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    6c4e:	78a3      	ldrb	r3, [r4, #2]
    6c50:	2b01      	cmp	r3, #1
    6c52:	d103      	bne.n	6c5c <bt_conn_set_state+0xdc>
				k_delayed_work_cancel(&conn->deferred_work);
    6c54:	f104 0058 	add.w	r0, r4, #88	; 0x58
    6c58:	f01f fcc3 	bl	265e2 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6c5c:	f3bf 8f5b 	dmb	ish
    6c60:	3404      	adds	r4, #4
    6c62:	e854 3f00 	ldrex	r3, [r4]
    6c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6c6a:	e844 3200 	strex	r2, r3, [r4]
    6c6e:	2a00      	cmp	r2, #0
    6c70:	d1f7      	bne.n	6c62 <bt_conn_set_state+0xe2>
    6c72:	f3bf 8f5b 	dmb	ish
    6c76:	4817      	ldr	r0, [pc, #92]	; (6cd4 <bt_conn_set_state+0x154>)
}
    6c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c7c:	2100      	movs	r1, #0
    6c7e:	f014 bd59 	b.w	1b734 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    6c82:	7a63      	ldrb	r3, [r4, #9]
    6c84:	2b00      	cmp	r3, #0
    6c86:	d0a7      	beq.n	6bd8 <bt_conn_set_state+0x58>
				notify_connected(conn);
    6c88:	4620      	mov	r0, r4
    6c8a:	f7ff fd47 	bl	671c <notify_connected>
    6c8e:	e7a3      	b.n	6bd8 <bt_conn_set_state+0x58>
Z_GENLIST_IS_EMPTY(slist)
    6c90:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    6c92:	b128      	cbz	r0, 6ca0 <bt_conn_set_state+0x120>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6c94:	69a1      	ldr	r1, [r4, #24]
    6c96:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    6c98:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6c9a:	4288      	cmp	r0, r1
	list->tail = node;
    6c9c:	bf08      	it	eq
    6c9e:	61a3      	streq	r3, [r4, #24]
    6ca0:	f382 8811 	msr	BASEPRI, r2
    6ca4:	f3bf 8f6f 	isb	sy
		if (!node) {
    6ca8:	b188      	cbz	r0, 6cce <bt_conn_set_state+0x14e>
	__asm__ volatile(
    6caa:	f04f 0220 	mov.w	r2, #32
    6cae:	f3ef 8311 	mrs	r3, BASEPRI
    6cb2:	f382 8811 	msr	BASEPRI, r2
    6cb6:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    6cba:	68c2      	ldr	r2, [r0, #12]
    6cbc:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    6cbe:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    6cc0:	f383 8811 	msr	BASEPRI, r3
    6cc4:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    6cc8:	f7ff fd1e 	bl	6708 <tx_free>
    6ccc:	e779      	b.n	6bc2 <bt_conn_set_state+0x42>
}
    6cce:	bd70      	pop	{r4, r5, r6, pc}
    6cd0:	200000d0 	.word	0x200000d0
    6cd4:	20000384 	.word	0x20000384
    6cd8:	20001488 	.word	0x20001488

00006cdc <send_conn_le_param_update>:
{
    6cdc:	b538      	push	{r3, r4, r5, lr}
    6cde:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    6ce0:	4608      	mov	r0, r1
{
    6ce2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6ce4:	f018 f8a6 	bl	1ee34 <bt_le_conn_params_valid>
    6ce8:	b308      	cbz	r0, 6d2e <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6cea:	4b12      	ldr	r3, [pc, #72]	; (6d34 <send_conn_le_param_update+0x58>)
    6cec:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    6cf0:	0799      	lsls	r1, r3, #30
    6cf2:	d407      	bmi.n	6d04 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    6cf4:	78e3      	ldrb	r3, [r4, #3]
    6cf6:	b173      	cbz	r3, 6d16 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    6cf8:	4629      	mov	r1, r5
    6cfa:	4620      	mov	r0, r4
}
    6cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    6d00:	f000 b9b4 	b.w	706c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6d04:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    6d08:	079a      	lsls	r2, r3, #30
    6d0a:	d5f3      	bpl.n	6cf4 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6d0c:	1d20      	adds	r0, r4, #4
    6d0e:	f018 fa3b 	bl	1f188 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    6d12:	0543      	lsls	r3, r0, #21
    6d14:	d4ee      	bmi.n	6cf4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    6d16:	4629      	mov	r1, r5
    6d18:	4620      	mov	r0, r4
    6d1a:	f018 fb45 	bl	1f3a8 <bt_conn_le_conn_update>
		if (rc == 0) {
    6d1e:	b928      	cbnz	r0, 6d2c <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    6d20:	88ab      	ldrh	r3, [r5, #4]
    6d22:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    6d26:	88eb      	ldrh	r3, [r5, #6]
    6d28:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    6d2c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6d2e:	f06f 0015 	mvn.w	r0, #21
    6d32:	e7fb      	b.n	6d2c <send_conn_le_param_update+0x50>
    6d34:	20000000 	.word	0x20000000

00006d38 <deferred_work>:
{
    6d38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    6d3a:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    6d3e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    6d40:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    6d44:	b993      	cbnz	r3, 6d6c <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    6d46:	4630      	mov	r0, r6
    6d48:	f018 fbb1 	bl	1f4ae <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    6d4c:	4b1f      	ldr	r3, [pc, #124]	; (6dcc <deferred_work+0x94>)
    6d4e:	681d      	ldr	r5, [r3, #0]
    6d50:	b925      	cbnz	r5, 6d5c <deferred_work+0x24>
		bt_conn_unref(conn);
    6d52:	4630      	mov	r0, r6
    6d54:	f018 fb0b 	bl	1f36e <bt_conn_unref>
}
    6d58:	b002      	add	sp, #8
    6d5a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    6d5c:	686b      	ldr	r3, [r5, #4]
    6d5e:	b11b      	cbz	r3, 6d68 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    6d60:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    6d64:	4630      	mov	r0, r6
    6d66:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6d68:	692d      	ldr	r5, [r5, #16]
    6d6a:	e7f1      	b.n	6d50 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    6d6c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    6d70:	2b01      	cmp	r3, #1
    6d72:	d1f1      	bne.n	6d58 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6d74:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    6d78:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    6d7c:	e855 3f00 	ldrex	r3, [r5]
    6d80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    6d84:	e845 2100 	strex	r1, r2, [r5]
    6d88:	2900      	cmp	r1, #0
    6d8a:	d1f7      	bne.n	6d7c <deferred_work+0x44>
    6d8c:	f3bf 8f5b 	dmb	ish
    6d90:	059b      	lsls	r3, r3, #22
    6d92:	d514      	bpl.n	6dbe <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6d94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6d96:	9300      	str	r3, [sp, #0]
    6d98:	6d23      	ldr	r3, [r4, #80]	; 0x50
    6d9a:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    6d9c:	4669      	mov	r1, sp
    6d9e:	4630      	mov	r0, r6
    6da0:	f7ff ff9c 	bl	6cdc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6da4:	f3bf 8f5b 	dmb	ish
    6da8:	e855 3f00 	ldrex	r3, [r5]
    6dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6db0:	e845 3200 	strex	r2, r3, [r5]
    6db4:	2a00      	cmp	r2, #0
    6db6:	d1f7      	bne.n	6da8 <deferred_work+0x70>
    6db8:	f3bf 8f5b 	dmb	ish
    6dbc:	e7cc      	b.n	6d58 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    6dbe:	4a04      	ldr	r2, [pc, #16]	; (6dd0 <deferred_work+0x98>)
    6dc0:	6810      	ldr	r0, [r2, #0]
    6dc2:	6851      	ldr	r1, [r2, #4]
    6dc4:	466b      	mov	r3, sp
    6dc6:	c303      	stmia	r3!, {r0, r1}
    6dc8:	e7e8      	b.n	6d9c <deferred_work+0x64>
    6dca:	bf00      	nop
    6dcc:	20001830 	.word	0x20001830
    6dd0:	000271c4 	.word	0x000271c4

00006dd4 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    6dd4:	b538      	push	{r3, r4, r5, lr}
    6dd6:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    6dd8:	4906      	ldr	r1, [pc, #24]	; (6df4 <bt_conn_create_pdu_timeout+0x20>)
    6dda:	2800      	cmp	r0, #0
    6ddc:	bf08      	it	eq
    6dde:	4608      	moveq	r0, r1
    6de0:	f019 ffe4 	bl	20dac <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    6de4:	4604      	mov	r4, r0
    6de6:	b118      	cbz	r0, 6df0 <bt_conn_create_pdu_timeout+0x1c>
		BT_WARN("Unable to allocate buffer within timeout");
		return NULL;
	}

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);
    6de8:	1d29      	adds	r1, r5, #4
    6dea:	3008      	adds	r0, #8
    6dec:	f01a f803 	bl	20df6 <net_buf_simple_reserve>

	return buf;
}
    6df0:	4620      	mov	r0, r4
    6df2:	bd38      	pop	{r3, r4, r5, pc}
    6df4:	20000d88 	.word	0x20000d88

00006df8 <bt_conn_create_frag_timeout>:
{
    6df8:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    6dfa:	4801      	ldr	r0, [pc, #4]	; (6e00 <bt_conn_create_frag_timeout+0x8>)
    6dfc:	f7ff bfea 	b.w	6dd4 <bt_conn_create_pdu_timeout>
    6e00:	20000dd8 	.word	0x20000dd8

00006e04 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    6e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e08:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    6e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6e12:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    6e14:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    6e16:	f7ff ffef 	bl	6df8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    6e1a:	7833      	ldrb	r3, [r6, #0]
    6e1c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    6e1e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6e20:	f04f 0600 	mov.w	r6, #0
    6e24:	d005      	beq.n	6e32 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    6e26:	f00d fc9f 	bl	14768 <net_buf_unref>
		return NULL;
    6e2a:	4635      	mov	r5, r6
}
    6e2c:	4628      	mov	r0, r5
    6e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    6e32:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6e34:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    6e38:	4e0c      	ldr	r6, [pc, #48]	; (6e6c <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6e3a:	4638      	mov	r0, r7
    6e3c:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
    6e40:	f01a f856 	bl	20ef0 <net_buf_simple_tailroom>
    6e44:	4580      	cmp	r8, r0
    6e46:	d20c      	bcs.n	6e62 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    6e48:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	net_buf_add_mem(frag, buf->data, frag_len);
    6e4c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    6e50:	4632      	mov	r2, r6
    6e52:	4638      	mov	r0, r7
    6e54:	f01a f80c 	bl	20e70 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    6e58:	4631      	mov	r1, r6
    6e5a:	4620      	mov	r0, r4
    6e5c:	f01a f82c 	bl	20eb8 <net_buf_simple_pull>
	return frag;
    6e60:	e7e4      	b.n	6e2c <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6e62:	4638      	mov	r0, r7
    6e64:	f01a f844 	bl	20ef0 <net_buf_simple_tailroom>
    6e68:	b286      	uxth	r6, r0
    6e6a:	e7ef      	b.n	6e4c <create_frag.isra.0+0x48>
    6e6c:	20000000 	.word	0x20000000

00006e70 <bt_conn_process_tx>:
{
    6e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    6e72:	7a83      	ldrb	r3, [r0, #10]
{
    6e74:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    6e76:	b993      	cbnz	r3, 6e9e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6e78:	f3bf 8f5b 	dmb	ish
    6e7c:	1d03      	adds	r3, r0, #4
    6e7e:	e853 2f00 	ldrex	r2, [r3]
    6e82:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    6e86:	e843 1400 	strex	r4, r1, [r3]
    6e8a:	2c00      	cmp	r4, #0
    6e8c:	d1f7      	bne.n	6e7e <bt_conn_process_tx+0xe>
    6e8e:	f3bf 8f5b 	dmb	ish
    6e92:	0653      	lsls	r3, r2, #25
    6e94:	d503      	bpl.n	6e9e <bt_conn_process_tx+0x2e>
}
    6e96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    6e9a:	f7ff bd3f 	b.w	691c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    6e9e:	2200      	movs	r2, #0
    6ea0:	2300      	movs	r3, #0
    6ea2:	f105 0034 	add.w	r0, r5, #52	; 0x34
    6ea6:	f019 ff86 	bl	20db6 <net_buf_get>
	BT_ASSERT(buf);
    6eaa:	4604      	mov	r4, r0
    6eac:	b960      	cbnz	r0, 6ec8 <bt_conn_process_tx+0x58>
    6eae:	4a20      	ldr	r2, [pc, #128]	; (6f30 <bt_conn_process_tx+0xc0>)
    6eb0:	4920      	ldr	r1, [pc, #128]	; (6f34 <bt_conn_process_tx+0xc4>)
    6eb2:	4821      	ldr	r0, [pc, #132]	; (6f38 <bt_conn_process_tx+0xc8>)
    6eb4:	f240 5355 	movw	r3, #1365	; 0x555
    6eb8:	f016 ff19 	bl	1dcee <printk>
    6ebc:	4040      	eors	r0, r0
    6ebe:	f380 8811 	msr	BASEPRI, r0
    6ec2:	f04f 0003 	mov.w	r0, #3
    6ec6:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    6ec8:	4f1c      	ldr	r7, [pc, #112]	; (6f3c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    6eca:	89a1      	ldrh	r1, [r4, #12]
    6ecc:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
    6ed0:	4291      	cmp	r1, r2
    6ed2:	d807      	bhi.n	6ee4 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    6ed4:	2300      	movs	r3, #0
    6ed6:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    6ed8:	4621      	mov	r1, r4
    6eda:	4628      	mov	r0, r5
    6edc:	f7ff fc34 	bl	6748 <send_frag>
	if (!send_buf(conn, buf)) {
    6ee0:	b140      	cbz	r0, 6ef4 <bt_conn_process_tx+0x84>
}
    6ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    6ee4:	f105 060a 	add.w	r6, r5, #10
    6ee8:	4621      	mov	r1, r4
    6eea:	4630      	mov	r0, r6
    6eec:	f7ff ff8a 	bl	6e04 <create_frag.isra.0>
	if (!frag) {
    6ef0:	4601      	mov	r1, r0
    6ef2:	b920      	cbnz	r0, 6efe <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    6ef4:	4620      	mov	r0, r4
}
    6ef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    6efa:	f00d bc35 	b.w	14768 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    6efe:	2301      	movs	r3, #1
    6f00:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    6f02:	4628      	mov	r0, r5
    6f04:	f7ff fc20 	bl	6748 <send_frag>
    6f08:	2800      	cmp	r0, #0
    6f0a:	d0f3      	beq.n	6ef4 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    6f0c:	89a2      	ldrh	r2, [r4, #12]
    6f0e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
    6f12:	429a      	cmp	r2, r3
    6f14:	d802      	bhi.n	6f1c <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
    6f16:	2300      	movs	r3, #0
    6f18:	2203      	movs	r2, #3
    6f1a:	e7dd      	b.n	6ed8 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    6f1c:	4621      	mov	r1, r4
    6f1e:	4630      	mov	r0, r6
    6f20:	f7ff ff70 	bl	6e04 <create_frag.isra.0>
		if (!frag) {
    6f24:	4601      	mov	r1, r0
    6f26:	2800      	cmp	r0, #0
    6f28:	d0e4      	beq.n	6ef4 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    6f2a:	2301      	movs	r3, #1
    6f2c:	461a      	mov	r2, r3
    6f2e:	e7e8      	b.n	6f02 <bt_conn_process_tx+0x92>
    6f30:	00028a82 	.word	0x00028a82
    6f34:	000289ed 	.word	0x000289ed
    6f38:	000289b0 	.word	0x000289b0
    6f3c:	20000000 	.word	0x20000000

00006f40 <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    6f40:	4b03      	ldr	r3, [pc, #12]	; (6f50 <bt_conn_index+0x10>)
    6f42:	1ac0      	subs	r0, r0, r3
    6f44:	4b03      	ldr	r3, [pc, #12]	; (6f54 <bt_conn_index+0x14>)
    6f46:	10c0      	asrs	r0, r0, #3
    6f48:	4358      	muls	r0, r3
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
		break;
	}

	return index;
}
    6f4a:	b2c0      	uxtb	r0, r0
    6f4c:	4770      	bx	lr
    6f4e:	bf00      	nop
    6f50:	20000fa8 	.word	0x20000fa8
    6f54:	e9bd37a7 	.word	0xe9bd37a7

00006f58 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    6f58:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    6f5a:	490b      	ldr	r1, [pc, #44]	; (6f88 <bt_conn_init+0x30>)
    6f5c:	480b      	ldr	r0, [pc, #44]	; (6f8c <bt_conn_init+0x34>)
    6f5e:	f01f f96c 	bl	2623a <k_queue_append>
    6f62:	490b      	ldr	r1, [pc, #44]	; (6f90 <bt_conn_init+0x38>)
    6f64:	4809      	ldr	r0, [pc, #36]	; (6f8c <bt_conn_init+0x34>)
    6f66:	f01f f968 	bl	2623a <k_queue_append>
    6f6a:	490a      	ldr	r1, [pc, #40]	; (6f94 <bt_conn_init+0x3c>)
    6f6c:	4807      	ldr	r0, [pc, #28]	; (6f8c <bt_conn_init+0x34>)
    6f6e:	f01f f964 	bl	2623a <k_queue_append>
	}

	bt_att_init();
    6f72:	f018 ff48 	bl	1fe06 <bt_att_init>

	err = bt_smp_init();
    6f76:	f019 ff16 	bl	20da6 <bt_smp_init>
	if (err) {
    6f7a:	4604      	mov	r4, r0
    6f7c:	b908      	cbnz	r0, 6f82 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    6f7e:	f018 fb30 	bl	1f5e2 <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    6f82:	4620      	mov	r0, r4
    6f84:	bd10      	pop	{r4, pc}
    6f86:	bf00      	nop
    6f88:	20001834 	.word	0x20001834
    6f8c:	20000d58 	.word	0x20000d58
    6f90:	20001844 	.word	0x20001844
    6f94:	20001854 	.word	0x20001854

00006f98 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    6f98:	4b04      	ldr	r3, [pc, #16]	; (6fac <l2cap_accept+0x14>)
    6f9a:	6818      	ldr	r0, [r3, #0]
    6f9c:	b918      	cbnz	r0, 6fa6 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    6f9e:	4a04      	ldr	r2, [pc, #16]	; (6fb0 <l2cap_accept+0x18>)
    6fa0:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    6fa2:	600b      	str	r3, [r1, #0]

		return 0;
    6fa4:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    6fa6:	f06f 000b 	mvn.w	r0, #11
}
    6faa:	4770      	bx	lr
    6fac:	20001060 	.word	0x20001060
    6fb0:	00027390 	.word	0x00027390

00006fb4 <bt_l2cap_connected>:
{
    6fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6fb8:	4e29      	ldr	r6, [pc, #164]	; (7060 <bt_l2cap_connected+0xac>)
    6fba:	4f2a      	ldr	r7, [pc, #168]	; (7064 <bt_l2cap_connected+0xb0>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    6fbc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 7068 <bt_l2cap_connected+0xb4>
{
    6fc0:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6fc2:	42be      	cmp	r6, r7
    6fc4:	d302      	bcc.n	6fcc <bt_l2cap_connected+0x18>
}
    6fc6:	b003      	add	sp, #12
    6fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    6fcc:	6873      	ldr	r3, [r6, #4]
    6fce:	a901      	add	r1, sp, #4
    6fd0:	4620      	mov	r0, r4
    6fd2:	4798      	blx	r3
    6fd4:	2800      	cmp	r0, #0
    6fd6:	db3d      	blt.n	7054 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    6fd8:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    6fda:	8833      	ldrh	r3, [r6, #0]
    6fdc:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    6fe0:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    6fe4:	4641      	mov	r1, r8
    6fe6:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    6fea:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    6fee:	f01f faf0 	bl	265d2 <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6ff2:	f3bf 8f5b 	dmb	ish
    6ff6:	f105 0340 	add.w	r3, r5, #64	; 0x40
    6ffa:	2200      	movs	r2, #0
    6ffc:	e853 1f00 	ldrex	r1, [r3]
    7000:	e843 2000 	strex	r0, r2, [r3]
    7004:	2800      	cmp	r0, #0
    7006:	d1f9      	bne.n	6ffc <bt_l2cap_connected+0x48>
    7008:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    700c:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    700e:	6d22      	ldr	r2, [r4, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    7010:	f105 0308 	add.w	r3, r5, #8
    7014:	bb02      	cbnz	r2, 7058 <bt_l2cap_connected+0xa4>
	list->head = node;
    7016:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		if (chan->ops->connected) {
    701a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    701c:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    701e:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    7020:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    7024:	681b      	ldr	r3, [r3, #0]
    7026:	b103      	cbz	r3, 702a <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    7028:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    702a:	9b01      	ldr	r3, [sp, #4]
    702c:	f3bf 8f5b 	dmb	ish
    7030:	3340      	adds	r3, #64	; 0x40
    7032:	e853 2f00 	ldrex	r2, [r3]
    7036:	f042 0201 	orr.w	r2, r2, #1
    703a:	e843 2100 	strex	r1, r2, [r3]
    703e:	2900      	cmp	r1, #0
    7040:	d1f7      	bne.n	7032 <bt_l2cap_connected+0x7e>
    7042:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    7046:	9801      	ldr	r0, [sp, #4]
    7048:	6843      	ldr	r3, [r0, #4]
    704a:	699b      	ldr	r3, [r3, #24]
    704c:	b113      	cbz	r3, 7054 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    704e:	f100 0140 	add.w	r1, r0, #64	; 0x40
    7052:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    7054:	360c      	adds	r6, #12
    7056:	e7b4      	b.n	6fc2 <bt_l2cap_connected+0xe>
	parent->next = child;
    7058:	6013      	str	r3, [r2, #0]
	list->tail = node;
    705a:	6523      	str	r3, [r4, #80]	; 0x50
}
    705c:	e7dd      	b.n	701a <bt_l2cap_connected+0x66>
    705e:	bf00      	nop
    7060:	0002713c 	.word	0x0002713c
    7064:	00027160 	.word	0x00027160
    7068:	0001f497 	.word	0x0001f497

0000706c <bt_l2cap_update_conn_param>:
{
    706c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    706e:	4b15      	ldr	r3, [pc, #84]	; (70c4 <bt_l2cap_update_conn_param+0x58>)
    7070:	781a      	ldrb	r2, [r3, #0]
    7072:	3201      	adds	r2, #1
	if (!ident) {
    7074:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    7078:	bf08      	it	eq
    707a:	2201      	moveq	r2, #1
    707c:	701a      	strb	r2, [r3, #0]
{
    707e:	4605      	mov	r5, r0
    7080:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    7082:	2208      	movs	r2, #8
    7084:	7819      	ldrb	r1, [r3, #0]
    7086:	2012      	movs	r0, #18
    7088:	f018 f9b7 	bl	1f3fa <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    708c:	4606      	mov	r6, r0
    708e:	b1b0      	cbz	r0, 70be <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    7090:	2108      	movs	r1, #8
    7092:	4408      	add	r0, r1
    7094:	f019 fee6 	bl	20e64 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    7098:	8822      	ldrh	r2, [r4, #0]
    709a:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    709c:	8862      	ldrh	r2, [r4, #2]
    709e:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    70a0:	88a2      	ldrh	r2, [r4, #4]
    70a2:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    70a4:	88e2      	ldrh	r2, [r4, #6]
    70a6:	80c2      	strh	r2, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    70a8:	2400      	movs	r4, #0
    70aa:	9400      	str	r4, [sp, #0]
    70ac:	4623      	mov	r3, r4
    70ae:	4632      	mov	r2, r6
    70b0:	2105      	movs	r1, #5
    70b2:	4628      	mov	r0, r5
    70b4:	f018 fa14 	bl	1f4e0 <bt_l2cap_send_cb>
	return 0;
    70b8:	4620      	mov	r0, r4
}
    70ba:	b002      	add	sp, #8
    70bc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    70be:	f06f 000b 	mvn.w	r0, #11
    70c2:	e7fa      	b.n	70ba <bt_l2cap_update_conn_param+0x4e>
    70c4:	20002f7b 	.word	0x20002f7b

000070c8 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    70c8:	4b02      	ldr	r3, [pc, #8]	; (70d4 <att_cfm_sent+0xc>)
    70ca:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    70ce:	f018 bab6 	b.w	1f63e <att_sent>
    70d2:	bf00      	nop
    70d4:	0001faa7 	.word	0x0001faa7

000070d8 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    70d8:	4b02      	ldr	r3, [pc, #8]	; (70e4 <att_rsp_sent+0xc>)
    70da:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    70de:	f018 baae 	b.w	1f63e <att_sent>
    70e2:	bf00      	nop
    70e4:	0001fa8b 	.word	0x0001fa8b

000070e8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    70e8:	4b02      	ldr	r3, [pc, #8]	; (70f4 <att_req_sent+0xc>)
    70ea:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    70ee:	f018 baa6 	b.w	1f63e <att_sent>
    70f2:	bf00      	nop
    70f4:	00007331 	.word	0x00007331

000070f8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    70f8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    70fa:	3808      	subs	r0, #8
    70fc:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    70fe:	a901      	add	r1, sp, #4
    7100:	4802      	ldr	r0, [pc, #8]	; (710c <bt_att_released+0x14>)
    7102:	f013 fa91 	bl	1a628 <k_mem_slab_free>
}
    7106:	b003      	add	sp, #12
    7108:	f85d fb04 	ldr.w	pc, [sp], #4
    710c:	20000cdc 	.word	0x20000cdc

00007110 <read_group_cb>:
{
    7110:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7114:	4606      	mov	r6, r0
    7116:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7118:	f04f 0800 	mov.w	r8, #0
    711c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7120:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    7122:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7124:	f88d 8008 	strb.w	r8, [sp, #8]
    7128:	a902      	add	r1, sp, #8
{
    712a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    712c:	f8ad 300a 	strh.w	r3, [sp, #10]
    7130:	f017 fcc3 	bl	1eaba <bt_uuid_cmp>
    7134:	b1a0      	cbz	r0, 7160 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7136:	f642 0301 	movw	r3, #10241	; 0x2801
    713a:	6830      	ldr	r0, [r6, #0]
    713c:	f88d 800c 	strb.w	r8, [sp, #12]
    7140:	a903      	add	r1, sp, #12
    7142:	f8ad 300e 	strh.w	r3, [sp, #14]
    7146:	f017 fcb8 	bl	1eaba <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    714a:	b148      	cbz	r0, 7160 <read_group_cb+0x50>
		if (data->group &&
    714c:	6923      	ldr	r3, [r4, #16]
    714e:	b11b      	cbz	r3, 7158 <read_group_cb+0x48>
    7150:	885a      	ldrh	r2, [r3, #2]
    7152:	42aa      	cmp	r2, r5
    7154:	d200      	bcs.n	7158 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    7156:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    7158:	2001      	movs	r0, #1
}
    715a:	b004      	add	sp, #16
    715c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    7160:	6861      	ldr	r1, [r4, #4]
    7162:	6830      	ldr	r0, [r6, #0]
    7164:	f017 fca9 	bl	1eaba <bt_uuid_cmp>
    7168:	b110      	cbz	r0, 7170 <read_group_cb+0x60>
		data->group = NULL;
    716a:	2300      	movs	r3, #0
    716c:	6123      	str	r3, [r4, #16]
    716e:	e7f3      	b.n	7158 <read_group_cb+0x48>
	if (data->rsp->len &&
    7170:	68e3      	ldr	r3, [r4, #12]
    7172:	68a0      	ldr	r0, [r4, #8]
    7174:	781a      	ldrb	r2, [r3, #0]
    7176:	b13a      	cbz	r2, 7188 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    7178:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    717c:	8981      	ldrh	r1, [r0, #12]
    717e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    7180:	4293      	cmp	r3, r2
    7182:	da01      	bge.n	7188 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    7184:	2000      	movs	r0, #0
    7186:	e7e8      	b.n	715a <read_group_cb+0x4a>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7188:	2104      	movs	r1, #4
    718a:	3008      	adds	r0, #8
    718c:	f019 fe6a 	bl	20e64 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    7190:	4b09      	ldr	r3, [pc, #36]	; (71b8 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7192:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    7194:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    7196:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    7198:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    719a:	4631      	mov	r1, r6
    719c:	9300      	str	r3, [sp, #0]
    719e:	9401      	str	r4, [sp, #4]
    71a0:	2300      	movs	r3, #0
    71a2:	4638      	mov	r0, r7
    71a4:	f018 fab2 	bl	1f70c <att_chan_read>
	if (read < 0) {
    71a8:	2800      	cmp	r0, #0
    71aa:	dbeb      	blt.n	7184 <read_group_cb+0x74>
	if (!data->group) {
    71ac:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    71ae:	3800      	subs	r0, #0
    71b0:	bf18      	it	ne
    71b2:	2001      	movne	r0, #1
    71b4:	e7d1      	b.n	715a <read_group_cb+0x4a>
    71b6:	bf00      	nop
    71b8:	0001f94b 	.word	0x0001f94b

000071bc <read_type_cb>:
{
    71bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    71c0:	f8d2 8000 	ldr.w	r8, [r2]
{
    71c4:	4606      	mov	r6, r0
    71c6:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    71c8:	6800      	ldr	r0, [r0, #0]
    71ca:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    71cc:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    71d0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    71d2:	f017 fc72 	bl	1eaba <bt_uuid_cmp>
    71d6:	4607      	mov	r7, r0
    71d8:	2800      	cmp	r0, #0
    71da:	d13e      	bne.n	725a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    71dc:	4628      	mov	r0, r5
    71de:	2215      	movs	r2, #21
    71e0:	4631      	mov	r1, r6
    71e2:	f019 fa5e 	bl	206a2 <bt_gatt_check_perm>
    71e6:	4605      	mov	r5, r0
    71e8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    71ea:	b148      	cbz	r0, 7200 <read_type_cb+0x44>
		if (data->rsp->len) {
    71ec:	68e3      	ldr	r3, [r4, #12]
    71ee:	781b      	ldrb	r3, [r3, #0]
    71f0:	b923      	cbnz	r3, 71fc <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    71f2:	2500      	movs	r5, #0
}
    71f4:	4628      	mov	r0, r5
    71f6:	b003      	add	sp, #12
    71f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    71fc:	7527      	strb	r7, [r4, #20]
    71fe:	e7f8      	b.n	71f2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    7200:	68a0      	ldr	r0, [r4, #8]
    7202:	f019 fe0d 	bl	20e20 <net_buf_frag_last>
    7206:	2102      	movs	r1, #2
    7208:	3008      	adds	r0, #8
    720a:	f019 fe2b 	bl	20e64 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    720e:	4b14      	ldr	r3, [pc, #80]	; (7260 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    7210:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    7212:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    7214:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    7218:	4631      	mov	r1, r6
    721a:	9300      	str	r3, [sp, #0]
    721c:	9401      	str	r4, [sp, #4]
    721e:	462b      	mov	r3, r5
    7220:	4640      	mov	r0, r8
    7222:	f018 fa73 	bl	1f70c <att_chan_read>
	if (read < 0) {
    7226:	2800      	cmp	r0, #0
    7228:	da07      	bge.n	723a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    722a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    722e:	bf26      	itte	cs
    7230:	4240      	negcs	r0, r0
    7232:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    7234:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    7236:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    7238:	e7dc      	b.n	71f4 <read_type_cb+0x38>
	if (!data->item) {
    723a:	6923      	ldr	r3, [r4, #16]
    723c:	2b00      	cmp	r3, #0
    723e:	d0d8      	beq.n	71f2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    7240:	68a0      	ldr	r0, [r4, #8]
    7242:	f018 f9f4 	bl	1f62e <net_buf_frags_len>
    7246:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    724a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    724c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    724e:	7818      	ldrb	r0, [r3, #0]
    7250:	4285      	cmp	r5, r0
    7252:	bf94      	ite	ls
    7254:	2500      	movls	r5, #0
    7256:	2501      	movhi	r5, #1
    7258:	e7cc      	b.n	71f4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    725a:	2501      	movs	r5, #1
    725c:	e7ca      	b.n	71f4 <read_type_cb+0x38>
    725e:	bf00      	nop
    7260:	0001f64b 	.word	0x0001f64b

00007264 <chan_send>:
{
    7264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7268:	688b      	ldr	r3, [r1, #8]
    726a:	781b      	ldrb	r3, [r3, #0]
    726c:	2bd2      	cmp	r3, #210	; 0xd2
{
    726e:	4605      	mov	r5, r0
    7270:	460c      	mov	r4, r1
    7272:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7274:	d10c      	bne.n	7290 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
    7276:	6803      	ldr	r3, [r0, #0]
    7278:	6818      	ldr	r0, [r3, #0]
    727a:	f019 fd91 	bl	20da0 <bt_smp_sign>
		if (err) {
    727e:	4606      	mov	r6, r0
    7280:	b130      	cbz	r0, 7290 <chan_send+0x2c>
		net_buf_unref(buf);
    7282:	4620      	mov	r0, r4
    7284:	f00d fa70 	bl	14768 <net_buf_unref>
}
    7288:	4630      	mov	r0, r6
    728a:	b003      	add	sp, #12
    728c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    7290:	f104 0008 	add.w	r0, r4, #8
    7294:	f019 fe28 	bl	20ee8 <net_buf_simple_headroom>
	state->len = buf->len;
    7298:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    729c:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    729e:	f1b9 0f00 	cmp.w	r9, #0
    72a2:	d10a      	bne.n	72ba <chan_send+0x56>
	switch (att_op_get_type(buf->data[0])) {
    72a4:	68a3      	ldr	r3, [r4, #8]
    72a6:	7818      	ldrb	r0, [r3, #0]
    72a8:	f018 f9df 	bl	1f66a <att_op_get_type>
    72ac:	1e43      	subs	r3, r0, #1
    72ae:	b2db      	uxtb	r3, r3
    72b0:	2b04      	cmp	r3, #4
    72b2:	bf9c      	itt	ls
    72b4:	4a16      	ldrls	r2, [pc, #88]	; (7310 <chan_send+0xac>)
    72b6:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    72ba:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    72bc:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    72c0:	4620      	mov	r0, r4
    72c2:	681e      	ldr	r6, [r3, #0]
    72c4:	f019 fda8 	bl	20e18 <net_buf_ref>
    72c8:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
    72cc:	4b11      	ldr	r3, [pc, #68]	; (7314 <chan_send+0xb0>)
    72ce:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    72d0:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    72d2:	d019      	beq.n	7308 <chan_send+0xa4>
	} else if (cb == chan_cfm_sent) {
    72d4:	4b10      	ldr	r3, [pc, #64]	; (7318 <chan_send+0xb4>)
    72d6:	4299      	cmp	r1, r3
    72d8:	d018      	beq.n	730c <chan_send+0xa8>
		return att_sent;
    72da:	f8df c050 	ldr.w	ip, [pc, #80]	; 732c <chan_send+0xc8>
    72de:	4b0f      	ldr	r3, [pc, #60]	; (731c <chan_send+0xb8>)
    72e0:	480f      	ldr	r0, [pc, #60]	; (7320 <chan_send+0xbc>)
    72e2:	4561      	cmp	r1, ip
    72e4:	bf18      	it	ne
    72e6:	4603      	movne	r3, r0
				&chan->chan.chan);
    72e8:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    72ea:	4630      	mov	r0, r6
    72ec:	9500      	str	r5, [sp, #0]
    72ee:	2104      	movs	r1, #4
    72f0:	f018 f8f6 	bl	1f4e0 <bt_l2cap_send_cb>
	if (!err) {
    72f4:	4606      	mov	r6, r0
    72f6:	2800      	cmp	r0, #0
    72f8:	d0c3      	beq.n	7282 <chan_send+0x1e>
	buf->data = buf->__buf + state->offset;
    72fa:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    72fc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    7300:	fa10 f787 	uxtah	r7, r0, r7
    7304:	60a7      	str	r7, [r4, #8]
}
    7306:	e7bf      	b.n	7288 <chan_send+0x24>
		return att_rsp_sent;
    7308:	4b06      	ldr	r3, [pc, #24]	; (7324 <chan_send+0xc0>)
    730a:	e7ed      	b.n	72e8 <chan_send+0x84>
		return att_cfm_sent;
    730c:	4b06      	ldr	r3, [pc, #24]	; (7328 <chan_send+0xc4>)
    730e:	e7eb      	b.n	72e8 <chan_send+0x84>
    7310:	000273b0 	.word	0x000273b0
    7314:	0001fa8b 	.word	0x0001fa8b
    7318:	0001faa7 	.word	0x0001faa7
    731c:	000070e9 	.word	0x000070e9
    7320:	0001f63f 	.word	0x0001f63f
    7324:	000070d9 	.word	0x000070d9
    7328:	000070c9 	.word	0x000070c9
    732c:	00007331 	.word	0x00007331

00007330 <chan_req_sent>:
	if (chan->req) {
    7330:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    7334:	b13b      	cbz	r3, 7346 <chan_req_sent+0x16>
    7336:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    733a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    733e:	4802      	ldr	r0, [pc, #8]	; (7348 <chan_req_sent+0x18>)
    7340:	2300      	movs	r3, #0
    7342:	f013 bf7b 	b.w	1b23c <k_delayed_work_submit_to_queue>
}
    7346:	4770      	bx	lr
    7348:	20001488 	.word	0x20001488

0000734c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    734c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    734e:	2300      	movs	r3, #0
{
    7350:	4607      	mov	r7, r0
    7352:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    7354:	4822      	ldr	r0, [pc, #136]	; (73e0 <bt_att_accept+0x94>)
    7356:	2200      	movs	r2, #0
    7358:	4669      	mov	r1, sp
    735a:	f013 f933 	bl	1a5c4 <k_mem_slab_alloc>
    735e:	4604      	mov	r4, r0
    7360:	b120      	cbz	r0, 736c <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    7362:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    7366:	4620      	mov	r0, r4
    7368:	b003      	add	sp, #12
    736a:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
    736c:	4601      	mov	r1, r0
    736e:	2244      	movs	r2, #68	; 0x44
    7370:	9800      	ldr	r0, [sp, #0]
    7372:	f01f fb8b 	bl	26a8c <memset>
	att->conn = conn;
    7376:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    7378:	481a      	ldr	r0, [pc, #104]	; (73e4 <bt_att_accept+0x98>)
	list->tail = NULL;
    737a:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    737c:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    7380:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    7384:	2200      	movs	r2, #0
    7386:	2300      	movs	r3, #0
    7388:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    738a:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    738c:	f013 f91a 	bl	1a5c4 <k_mem_slab_alloc>
    7390:	4604      	mov	r4, r0
    7392:	2800      	cmp	r0, #0
    7394:	d1e5      	bne.n	7362 <bt_att_accept+0x16>
    7396:	4601      	mov	r1, r0
    7398:	f44f 7298 	mov.w	r2, #304	; 0x130
    739c:	9801      	ldr	r0, [sp, #4]
    739e:	f01f fb75 	bl	26a8c <memset>
	chan->chan.chan.ops = &ops;
    73a2:	9801      	ldr	r0, [sp, #4]
    73a4:	4b10      	ldr	r3, [pc, #64]	; (73e8 <bt_att_accept+0x9c>)
    73a6:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    73a8:	30c8      	adds	r0, #200	; 0xc8
    73aa:	f01e ff3a 	bl	26222 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    73ae:	9801      	ldr	r0, [sp, #4]
    73b0:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    73b4:	2203      	movs	r2, #3
    73b6:	4611      	mov	r1, r2
    73b8:	f01f f88b 	bl	264d2 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    73bc:	9b01      	ldr	r3, [sp, #4]
    73be:	f3bf 8f5b 	dmb	ish
    73c2:	33c0      	adds	r3, #192	; 0xc0
    73c4:	e853 2f00 	ldrex	r2, [r3]
    73c8:	e843 4100 	strex	r1, r4, [r3]
    73cc:	2900      	cmp	r1, #0
    73ce:	d1f9      	bne.n	73c4 <bt_att_accept+0x78>
    73d0:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    73d4:	9b01      	ldr	r3, [sp, #4]
    73d6:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    73da:	6033      	str	r3, [r6, #0]
	return 0;
    73dc:	e7c3      	b.n	7366 <bt_att_accept+0x1a>
    73de:	bf00      	nop
    73e0:	20000cc0 	.word	0x20000cc0
    73e4:	20000cdc 	.word	0x20000cdc
    73e8:	20000394 	.word	0x20000394

000073ec <bt_att_connected>:
{
    73ec:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    73ee:	2104      	movs	r1, #4
{
    73f0:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    73f2:	6800      	ldr	r0, [r0, #0]
    73f4:	f018 f8ba 	bl	1f56c <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    73f8:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    73fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    73fe:	b93b      	cbnz	r3, 7410 <bt_att_connected+0x24>
	z_impl_k_queue_init(queue);
    7400:	f105 000c 	add.w	r0, r5, #12
    7404:	f01e ff0d 	bl	26222 <z_impl_k_queue_init>
    7408:	f105 0024 	add.w	r0, r5, #36	; 0x24
    740c:	f01e ff09 	bl	26222 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    7410:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	parent->next = child;
    7412:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    7416:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    7418:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
    741c:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    741e:	b902      	cbnz	r2, 7422 <bt_att_connected+0x36>
	list->tail = node;
    7420:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7422:	f3bf 8f5b 	dmb	ish
    7426:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    742a:	4908      	ldr	r1, [pc, #32]	; (744c <bt_att_connected+0x60>)
    742c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    7430:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7432:	bf5e      	ittt	pl
    7434:	2317      	movpl	r3, #23
    7436:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    743a:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    743e:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
}
    7442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    7446:	f01f b8c4 	b.w	265d2 <k_delayed_work_init>
    744a:	bf00      	nop
    744c:	0001ff3f 	.word	0x0001ff3f

00007450 <prep_write_cb>:
{
    7450:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7454:	4614      	mov	r4, r2
    7456:	4606      	mov	r6, r0
    7458:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    745a:	222a      	movs	r2, #42	; 0x2a
    745c:	4601      	mov	r1, r0
    745e:	6820      	ldr	r0, [r4, #0]
    7460:	f019 f91f 	bl	206a2 <bt_gatt_check_perm>
    7464:	4605      	mov	r5, r0
    7466:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    7468:	2800      	cmp	r0, #0
    746a:	d12e      	bne.n	74ca <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    746c:	7cb3      	ldrb	r3, [r6, #18]
    746e:	065b      	lsls	r3, r3, #25
    7470:	d516      	bpl.n	74a0 <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    7472:	2301      	movs	r3, #1
    7474:	9301      	str	r3, [sp, #4]
    7476:	89e3      	ldrh	r3, [r4, #14]
    7478:	9300      	str	r3, [sp, #0]
    747a:	f8d6 8008 	ldr.w	r8, [r6, #8]
    747e:	89a3      	ldrh	r3, [r4, #12]
    7480:	68a2      	ldr	r2, [r4, #8]
    7482:	6820      	ldr	r0, [r4, #0]
    7484:	4631      	mov	r1, r6
    7486:	47c0      	blx	r8
	if (write != 0) {
    7488:	b150      	cbz	r0, 74a0 <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    748a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    748e:	bf26      	itte	cs
    7490:	4243      	negcs	r3, r0
    7492:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    7494:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    7496:	7423      	strb	r3, [r4, #16]
}
    7498:	4628      	mov	r0, r5
    749a:	b002      	add	sp, #8
    749c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    74a0:	480b      	ldr	r0, [pc, #44]	; (74d0 <prep_write_cb+0x80>)
    74a2:	2200      	movs	r2, #0
    74a4:	2300      	movs	r3, #0
    74a6:	f019 fc81 	bl	20dac <net_buf_alloc_fixed>
    74aa:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    74ac:	b908      	cbnz	r0, 74b2 <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    74ae:	2309      	movs	r3, #9
    74b0:	e7f1      	b.n	7496 <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    74b2:	89e3      	ldrh	r3, [r4, #14]
    74b4:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    74b6:	8287      	strh	r7, [r0, #20]
	net_buf_add_mem(data->buf, data->value, data->len);
    74b8:	89a2      	ldrh	r2, [r4, #12]
    74ba:	68a1      	ldr	r1, [r4, #8]
    74bc:	3008      	adds	r0, #8
    74be:	f019 fcd7 	bl	20e70 <net_buf_simple_add_mem>
	data->err = 0U;
    74c2:	2300      	movs	r3, #0
    74c4:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    74c6:	2501      	movs	r5, #1
    74c8:	e7e6      	b.n	7498 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    74ca:	2500      	movs	r5, #0
    74cc:	e7e4      	b.n	7498 <prep_write_cb+0x48>
    74ce:	bf00      	nop
    74d0:	20000e78 	.word	0x20000e78

000074d4 <att_indicate>:
{
    74d4:	b570      	push	{r4, r5, r6, lr}
    74d6:	4604      	mov	r4, r0
	handle = net_buf_pull_le16(buf);
    74d8:	f101 0008 	add.w	r0, r1, #8
{
    74dc:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    74de:	f019 fcfb 	bl	20ed8 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    74e2:	6826      	ldr	r6, [r4, #0]
    74e4:	89ab      	ldrh	r3, [r5, #12]
    74e6:	68aa      	ldr	r2, [r5, #8]
	handle = net_buf_pull_le16(buf);
    74e8:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    74ea:	6830      	ldr	r0, [r6, #0]
    74ec:	f019 fbbe 	bl	20c6c <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    74f0:	211e      	movs	r1, #30
    74f2:	2200      	movs	r2, #0
    74f4:	4620      	mov	r0, r4
    74f6:	f018 fbf6 	bl	1fce6 <bt_att_chan_create_pdu>
	if (!buf) {
    74fa:	4601      	mov	r1, r0
    74fc:	b118      	cbz	r0, 7506 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    74fe:	4a03      	ldr	r2, [pc, #12]	; (750c <att_indicate+0x38>)
    7500:	4620      	mov	r0, r4
    7502:	f018 fa49 	bl	1f998 <bt_att_chan_send_rsp>
}
    7506:	2000      	movs	r0, #0
    7508:	bd70      	pop	{r4, r5, r6, pc}
    750a:	bf00      	nop
    750c:	0001faa7 	.word	0x0001faa7

00007510 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    7510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7514:	4688      	mov	r8, r1
    7516:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7518:	2101      	movs	r1, #1
    751a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    751c:	4605      	mov	r5, r0
    751e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7520:	f018 fbe1 	bl	1fce6 <bt_att_chan_create_pdu>
	if (!buf) {
    7524:	4604      	mov	r4, r0
    7526:	b178      	cbz	r0, 7548 <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    7528:	2104      	movs	r1, #4
    752a:	3008      	adds	r0, #8
    752c:	f019 fc9a 	bl	20e64 <net_buf_simple_add>
	rsp->request = req;
    7530:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    7534:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    7536:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    753a:	4621      	mov	r1, r4
    753c:	4628      	mov	r0, r5
    753e:	4a03      	ldr	r2, [pc, #12]	; (754c <send_err_rsp.part.0+0x3c>)
}
    7540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    7544:	f018 ba28 	b.w	1f998 <bt_att_chan_send_rsp>
}
    7548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    754c:	0001fa8b 	.word	0x0001fa8b

00007550 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    7550:	898b      	ldrh	r3, [r1, #12]
{
    7552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7556:	4604      	mov	r4, r0
    7558:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    755a:	2b00      	cmp	r3, #0
    755c:	d05a      	beq.n	7614 <bt_att_recv+0xc4>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    755e:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    7560:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7564:	f105 0008 	add.w	r0, r5, #8
    7568:	f019 fcae 	bl	20ec8 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    756c:	4a2d      	ldr	r2, [pc, #180]	; (7624 <bt_att_recv+0xd4>)
    756e:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7570:	4607      	mov	r7, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7572:	2300      	movs	r3, #0
    7574:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    7576:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    757a:	4288      	cmp	r0, r1
    757c:	d11a      	bne.n	75b4 <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
    757e:	00d9      	lsls	r1, r3, #3
    7580:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7584:	f893 8002 	ldrb.w	r8, [r3, #2]
    7588:	f1b8 0f01 	cmp.w	r8, #1
    758c:	d020      	beq.n	75d0 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
    758e:	f1b8 0f05 	cmp.w	r8, #5
    7592:	d12d      	bne.n	75f0 <bt_att_recv+0xa0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7594:	f3bf 8f5b 	dmb	ish
    7598:	34b8      	adds	r4, #184	; 0xb8
    759a:	e854 2f00 	ldrex	r2, [r4]
    759e:	f042 0302 	orr.w	r3, r2, #2
    75a2:	e844 3000 	strex	r0, r3, [r4]
    75a6:	2800      	cmp	r0, #0
    75a8:	d1f7      	bne.n	759a <bt_att_recv+0x4a>
    75aa:	f3bf 8f5b 	dmb	ish
    75ae:	f012 0f02 	tst.w	r2, #2
    75b2:	e01c      	b.n	75ee <bt_att_recv+0x9e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    75b4:	3301      	adds	r3, #1
    75b6:	2b1c      	cmp	r3, #28
    75b8:	d1dd      	bne.n	7576 <bt_att_recv+0x26>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    75ba:	4608      	mov	r0, r1
    75bc:	f018 f855 	bl	1f66a <att_op_get_type>
    75c0:	b340      	cbz	r0, 7614 <bt_att_recv+0xc4>
	if (!req) {
    75c2:	b339      	cbz	r1, 7614 <bt_att_recv+0xc4>
    75c4:	2306      	movs	r3, #6
    75c6:	2200      	movs	r2, #0
    75c8:	4630      	mov	r0, r6
    75ca:	f7ff ffa1 	bl	7510 <send_err_rsp.part.0>
    75ce:	e021      	b.n	7614 <bt_att_recv+0xc4>
    75d0:	34b8      	adds	r4, #184	; 0xb8
    75d2:	f3bf 8f5b 	dmb	ish
    75d6:	e854 3f00 	ldrex	r3, [r4]
    75da:	f043 0201 	orr.w	r2, r3, #1
    75de:	e844 2000 	strex	r0, r2, [r4]
    75e2:	2800      	cmp	r0, #0
    75e4:	d1f7      	bne.n	75d6 <bt_att_recv+0x86>
    75e6:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    75ea:	f013 0f01 	tst.w	r3, #1
    75ee:	d111      	bne.n	7614 <bt_att_recv+0xc4>
	if (buf->len < handler->expect_len) {
    75f0:	eb0c 0301 	add.w	r3, ip, r1
    75f4:	89a9      	ldrh	r1, [r5, #12]
    75f6:	785a      	ldrb	r2, [r3, #1]
    75f8:	4291      	cmp	r1, r2
    75fa:	d30e      	bcc.n	761a <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
    75fc:	685b      	ldr	r3, [r3, #4]
    75fe:	4629      	mov	r1, r5
    7600:	4630      	mov	r0, r6
    7602:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    7604:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    7608:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    760a:	d103      	bne.n	7614 <bt_att_recv+0xc4>
    760c:	b110      	cbz	r0, 7614 <bt_att_recv+0xc4>
		send_err_rsp(att_chan, hdr->code, 0, err);
    760e:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    7610:	2900      	cmp	r1, #0
    7612:	d1d8      	bne.n	75c6 <bt_att_recv+0x76>
}
    7614:	2000      	movs	r0, #0
    7616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
    761a:	f1b8 0f01 	cmp.w	r8, #1
    761e:	d1f9      	bne.n	7614 <bt_att_recv+0xc4>
		err = BT_ATT_ERR_INVALID_PDU;
    7620:	2304      	movs	r3, #4
    7622:	e7f4      	b.n	760e <bt_att_recv+0xbe>
    7624:	000273c4 	.word	0x000273c4

00007628 <att_write_rsp>:
{
    7628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    762c:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    762e:	6803      	ldr	r3, [r0, #0]
    7630:	460e      	mov	r6, r1
    7632:	3900      	subs	r1, #0
{
    7634:	b086      	sub	sp, #24
    7636:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    7638:	bf18      	it	ne
    763a:	2101      	movne	r1, #1
    763c:	6818      	ldr	r0, [r3, #0]
{
    763e:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    7640:	f019 fb89 	bl	20d56 <bt_gatt_change_aware>
    7644:	2800      	cmp	r0, #0
    7646:	d04e      	beq.n	76e6 <att_write_rsp+0xbe>
	if (!handle) {
    7648:	2f00      	cmp	r7, #0
    764a:	d04e      	beq.n	76ea <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
    764c:	2218      	movs	r2, #24
    764e:	2100      	movs	r1, #0
    7650:	4668      	mov	r0, sp
    7652:	f01f fa1b 	bl	26a8c <memset>
	if (rsp) {
    7656:	f1b8 0f00 	cmp.w	r8, #0
    765a:	d126      	bne.n	76aa <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    765c:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    765e:	4a24      	ldr	r2, [pc, #144]	; (76f0 <att_write_rsp+0xc8>)
	data.conn = chan->att->conn;
    7660:	681b      	ldr	r3, [r3, #0]
    7662:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    7664:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    7668:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    766c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    766e:	9303      	str	r3, [sp, #12]
	data.len = len;
    7670:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    7674:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7678:	2301      	movs	r3, #1
    767a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    767e:	4639      	mov	r1, r7
    7680:	466b      	mov	r3, sp
    7682:	4638      	mov	r0, r7
	data.req = req;
    7684:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7688:	f018 f835 	bl	1f6f6 <bt_gatt_foreach_attr>
	if (data.err) {
    768c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    7690:	b30c      	cbz	r4, 76d6 <att_write_rsp+0xae>
		if (rsp) {
    7692:	f1b8 0f00 	cmp.w	r8, #0
    7696:	d019      	beq.n	76cc <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    7698:	9801      	ldr	r0, [sp, #4]
    769a:	f00d f865 	bl	14768 <net_buf_unref>
	if (!req) {
    769e:	b976      	cbnz	r6, 76be <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    76a0:	2400      	movs	r4, #0
}
    76a2:	4620      	mov	r0, r4
    76a4:	b006      	add	sp, #24
    76a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    76aa:	2200      	movs	r2, #0
    76ac:	4641      	mov	r1, r8
    76ae:	4628      	mov	r0, r5
    76b0:	f018 fb19 	bl	1fce6 <bt_att_chan_create_pdu>
    76b4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    76b6:	2800      	cmp	r0, #0
    76b8:	d1d0      	bne.n	765c <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    76ba:	240e      	movs	r4, #14
    76bc:	e7f1      	b.n	76a2 <att_write_rsp+0x7a>
    76be:	f89d 3014 	ldrb.w	r3, [sp, #20]
    76c2:	463a      	mov	r2, r7
    76c4:	4631      	mov	r1, r6
    76c6:	4628      	mov	r0, r5
    76c8:	f7ff ff22 	bl	7510 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    76cc:	2e18      	cmp	r6, #24
    76ce:	d1e7      	bne.n	76a0 <att_write_rsp+0x78>
    76d0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    76d4:	e7e5      	b.n	76a2 <att_write_rsp+0x7a>
	if (data.buf) {
    76d6:	9901      	ldr	r1, [sp, #4]
    76d8:	2900      	cmp	r1, #0
    76da:	d0e1      	beq.n	76a0 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    76dc:	4a05      	ldr	r2, [pc, #20]	; (76f4 <att_write_rsp+0xcc>)
    76de:	4628      	mov	r0, r5
    76e0:	f018 f95a 	bl	1f998 <bt_att_chan_send_rsp>
    76e4:	e7dd      	b.n	76a2 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    76e6:	2412      	movs	r4, #18
    76e8:	e7db      	b.n	76a2 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    76ea:	2401      	movs	r4, #1
    76ec:	e7d9      	b.n	76a2 <att_write_rsp+0x7a>
    76ee:	bf00      	nop
    76f0:	0001fbb5 	.word	0x0001fbb5
    76f4:	0001fa8b 	.word	0x0001fa8b

000076f8 <att_exec_write_req>:
{
    76f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
    76fc:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
    76fe:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
    7700:	f893 8000 	ldrb.w	r8, [r3]
{
    7704:	4606      	mov	r6, r0
	uint8_t err = 0U;
    7706:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
    7708:	6830      	ldr	r0, [r6, #0]
    770a:	2200      	movs	r2, #0
    770c:	2300      	movs	r3, #0
    770e:	3024      	adds	r0, #36	; 0x24
    7710:	f019 fb51 	bl	20db6 <net_buf_get>
    7714:	4605      	mov	r5, r0
    7716:	b978      	cbnz	r0, 7738 <att_exec_write_req+0x40>
	if (err) {
    7718:	bb54      	cbnz	r4, 7770 <att_exec_write_req+0x78>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    771a:	2119      	movs	r1, #25
    771c:	4622      	mov	r2, r4
    771e:	4638      	mov	r0, r7
    7720:	f018 fb31 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    7724:	4601      	mov	r1, r0
    7726:	b328      	cbz	r0, 7774 <att_exec_write_req+0x7c>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    7728:	4a13      	ldr	r2, [pc, #76]	; (7778 <att_exec_write_req+0x80>)
    772a:	4630      	mov	r0, r6
    772c:	f018 f934 	bl	1f998 <bt_att_chan_send_rsp>
}
    7730:	4620      	mov	r0, r4
    7732:	b004      	add	sp, #16
    7734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    7738:	b9b4      	cbnz	r4, 7768 <att_exec_write_req+0x70>
    773a:	f1b8 0f01 	cmp.w	r8, #1
    773e:	d113      	bne.n	7768 <att_exec_write_req+0x70>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    7740:	89aa      	ldrh	r2, [r5, #12]
    7742:	8aab      	ldrh	r3, [r5, #20]
    7744:	9202      	str	r2, [sp, #8]
    7746:	68aa      	ldr	r2, [r5, #8]
    7748:	9201      	str	r2, [sp, #4]
    774a:	8aea      	ldrh	r2, [r5, #22]
    774c:	9200      	str	r2, [sp, #0]
    774e:	2118      	movs	r1, #24
    7750:	4622      	mov	r2, r4
    7752:	4630      	mov	r0, r6
    7754:	f7ff ff68 	bl	7628 <att_write_rsp>
			if (err) {
    7758:	4604      	mov	r4, r0
    775a:	b128      	cbz	r0, 7768 <att_exec_write_req+0x70>
	if (!req) {
    775c:	4603      	mov	r3, r0
    775e:	8aaa      	ldrh	r2, [r5, #20]
    7760:	2118      	movs	r1, #24
    7762:	4630      	mov	r0, r6
    7764:	f7ff fed4 	bl	7510 <send_err_rsp.part.0>
		net_buf_unref(buf);
    7768:	4628      	mov	r0, r5
    776a:	f00c fffd 	bl	14768 <net_buf_unref>
    776e:	e7cb      	b.n	7708 <att_exec_write_req+0x10>
		return 0;
    7770:	4604      	mov	r4, r0
    7772:	e7dd      	b.n	7730 <att_exec_write_req+0x38>
		return BT_ATT_ERR_UNLIKELY;
    7774:	240e      	movs	r4, #14
    7776:	e7db      	b.n	7730 <att_exec_write_req+0x38>
    7778:	0001fa8b 	.word	0x0001fa8b

0000777c <att_prepare_write_req>:
{
    777c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7780:	460c      	mov	r4, r1
    7782:	b087      	sub	sp, #28
    7784:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    7786:	2104      	movs	r1, #4
    7788:	f104 0008 	add.w	r0, r4, #8
    778c:	f019 fb9c 	bl	20ec8 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    7790:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    7794:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    7798:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    779c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    77a0:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    77a2:	2101      	movs	r1, #1
    77a4:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    77a6:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    77aa:	f019 fad4 	bl	20d56 <bt_gatt_change_aware>
    77ae:	2800      	cmp	r0, #0
    77b0:	d04b      	beq.n	784a <att_prepare_write_req+0xce>
	if (!handle) {
    77b2:	2e00      	cmp	r6, #0
    77b4:	d04b      	beq.n	784e <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    77b6:	2210      	movs	r2, #16
    77b8:	2100      	movs	r1, #0
    77ba:	a802      	add	r0, sp, #8
    77bc:	f01f f966 	bl	26a8c <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    77c0:	2301      	movs	r3, #1
    77c2:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    77c6:	4a24      	ldr	r2, [pc, #144]	; (7858 <att_prepare_write_req+0xdc>)
	data.conn = conn;
    77c8:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    77cc:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    77ce:	ab01      	add	r3, sp, #4
    77d0:	4631      	mov	r1, r6
    77d2:	4630      	mov	r0, r6
	data.offset = offset;
    77d4:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    77d8:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    77dc:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    77e0:	f017 ff89 	bl	1f6f6 <bt_gatt_foreach_attr>
	if (data.err) {
    77e4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    77e8:	b154      	cbz	r4, 7800 <att_prepare_write_req+0x84>
	if (!req) {
    77ea:	4623      	mov	r3, r4
    77ec:	4632      	mov	r2, r6
    77ee:	2116      	movs	r1, #22
    77f0:	4628      	mov	r0, r5
    77f2:	f7ff fe8d 	bl	7510 <send_err_rsp.part.0>
		return 0;
    77f6:	2400      	movs	r4, #0
}
    77f8:	4620      	mov	r0, r4
    77fa:	b007      	add	sp, #28
    77fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    7800:	6828      	ldr	r0, [r5, #0]
    7802:	9902      	ldr	r1, [sp, #8]
    7804:	3024      	adds	r0, #36	; 0x24
    7806:	f019 fafa 	bl	20dfe <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    780a:	4622      	mov	r2, r4
    780c:	2117      	movs	r1, #23
    780e:	4658      	mov	r0, fp
    7810:	f018 fab9 	bl	1fd86 <bt_att_create_pdu>
    7814:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7816:	b1e0      	cbz	r0, 7852 <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    7818:	2104      	movs	r1, #4
    781a:	3008      	adds	r0, #8
    781c:	f019 fb22 	bl	20e64 <net_buf_simple_add>
    7820:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    7822:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    7826:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    782a:	9802      	ldr	r0, [sp, #8]
    782c:	4639      	mov	r1, r7
    782e:	3008      	adds	r0, #8
    7830:	f019 fb18 	bl	20e64 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7834:	463a      	mov	r2, r7
    7836:	4641      	mov	r1, r8
    7838:	1d30      	adds	r0, r6, #4
    783a:	f01f f906 	bl	26a4a <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    783e:	4a07      	ldr	r2, [pc, #28]	; (785c <att_prepare_write_req+0xe0>)
    7840:	9902      	ldr	r1, [sp, #8]
    7842:	4628      	mov	r0, r5
    7844:	f018 f8a8 	bl	1f998 <bt_att_chan_send_rsp>
	return 0;
    7848:	e7d6      	b.n	77f8 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    784a:	2412      	movs	r4, #18
    784c:	e7d4      	b.n	77f8 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    784e:	2401      	movs	r4, #1
    7850:	e7d2      	b.n	77f8 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    7852:	240e      	movs	r4, #14
    7854:	e7d0      	b.n	77f8 <att_prepare_write_req+0x7c>
    7856:	bf00      	nop
    7858:	00007451 	.word	0x00007451
    785c:	0001fa8b 	.word	0x0001fa8b

00007860 <att_read_group_req>:
{
    7860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    7864:	7b0c      	ldrb	r4, [r1, #12]
    7866:	3c04      	subs	r4, #4
    7868:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    786a:	2c02      	cmp	r4, #2
{
    786c:	4605      	mov	r5, r0
    786e:	b08c      	sub	sp, #48	; 0x30
    7870:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    7872:	d001      	beq.n	7878 <att_read_group_req+0x18>
    7874:	2c10      	cmp	r4, #16
    7876:	d16f      	bne.n	7958 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    7878:	2104      	movs	r1, #4
    787a:	3008      	adds	r0, #8
    787c:	f019 fb24 	bl	20ec8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7880:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    7884:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7886:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7888:	1d01      	adds	r1, r0, #4
    788a:	4622      	mov	r2, r4
    788c:	4640      	mov	r0, r8
    788e:	f017 f93e 	bl	1eb0e <bt_uuid_create>
    7892:	2800      	cmp	r0, #0
    7894:	d062      	beq.n	795c <att_read_group_req+0xfc>
	if (!start || !end) {
    7896:	2e00      	cmp	r6, #0
    7898:	d03a      	beq.n	7910 <att_read_group_req+0xb0>
    789a:	2400      	movs	r4, #0
    789c:	2f00      	cmp	r7, #0
    789e:	d036      	beq.n	790e <att_read_group_req+0xae>
	if (start > end) {
    78a0:	42be      	cmp	r6, r7
    78a2:	d835      	bhi.n	7910 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    78a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    78a8:	a901      	add	r1, sp, #4
    78aa:	4640      	mov	r0, r8
    78ac:	f88d 4004 	strb.w	r4, [sp, #4]
    78b0:	f8ad 3006 	strh.w	r3, [sp, #6]
    78b4:	f017 f901 	bl	1eaba <bt_uuid_cmp>
    78b8:	2800      	cmp	r0, #0
    78ba:	d134      	bne.n	7926 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    78bc:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    78be:	2214      	movs	r2, #20
    78c0:	2100      	movs	r1, #0
    78c2:	a807      	add	r0, sp, #28
    78c4:	f01f f8e2 	bl	26a8c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    78c8:	2201      	movs	r2, #1
    78ca:	2111      	movs	r1, #17
    78cc:	4620      	mov	r0, r4
    78ce:	f018 fa5a 	bl	1fd86 <bt_att_create_pdu>
    78d2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    78d4:	2800      	cmp	r0, #0
    78d6:	d041      	beq.n	795c <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    78d8:	2101      	movs	r1, #1
    78da:	3008      	adds	r0, #8
	data.uuid = uuid;
    78dc:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    78e0:	f019 fac0 	bl	20e64 <net_buf_simple_add>
	data.rsp->len = 0U;
    78e4:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    78e8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    78ea:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    78ec:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    78f0:	4a1b      	ldr	r2, [pc, #108]	; (7960 <att_read_group_req+0x100>)
	data.group = NULL;
    78f2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    78f6:	4639      	mov	r1, r7
    78f8:	4630      	mov	r0, r6
    78fa:	f017 fefc 	bl	1f6f6 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    78fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7900:	781c      	ldrb	r4, [r3, #0]
    7902:	bb1c      	cbnz	r4, 794c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    7904:	9809      	ldr	r0, [sp, #36]	; 0x24
    7906:	f00c ff2f 	bl	14768 <net_buf_unref>
	if (!req) {
    790a:	230a      	movs	r3, #10
    790c:	e018      	b.n	7940 <att_read_group_req+0xe0>
			*err = 0U;
    790e:	463e      	mov	r6, r7
	if (!req) {
    7910:	2301      	movs	r3, #1
    7912:	4632      	mov	r2, r6
    7914:	2110      	movs	r1, #16
    7916:	4628      	mov	r0, r5
    7918:	f7ff fdfa 	bl	7510 <send_err_rsp.part.0>
		return 0;
    791c:	2400      	movs	r4, #0
}
    791e:	4620      	mov	r0, r4
    7920:	b00c      	add	sp, #48	; 0x30
    7922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    7926:	f642 0301 	movw	r3, #10241	; 0x2801
    792a:	a907      	add	r1, sp, #28
    792c:	4640      	mov	r0, r8
    792e:	f88d 401c 	strb.w	r4, [sp, #28]
    7932:	f8ad 301e 	strh.w	r3, [sp, #30]
    7936:	f017 f8c0 	bl	1eaba <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    793a:	2800      	cmp	r0, #0
    793c:	d0be      	beq.n	78bc <att_read_group_req+0x5c>
	if (!req) {
    793e:	2310      	movs	r3, #16
    7940:	4632      	mov	r2, r6
    7942:	2110      	movs	r1, #16
    7944:	4628      	mov	r0, r5
    7946:	f7ff fde3 	bl	7510 <send_err_rsp.part.0>
		return 0;
    794a:	e7e8      	b.n	791e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    794c:	4a05      	ldr	r2, [pc, #20]	; (7964 <att_read_group_req+0x104>)
    794e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7950:	4628      	mov	r0, r5
    7952:	f018 f821 	bl	1f998 <bt_att_chan_send_rsp>
	return 0;
    7956:	e7e1      	b.n	791c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    7958:	2404      	movs	r4, #4
    795a:	e7e0      	b.n	791e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    795c:	240e      	movs	r4, #14
    795e:	e7de      	b.n	791e <att_read_group_req+0xbe>
    7960:	00007111 	.word	0x00007111
    7964:	0001fa8b 	.word	0x0001fa8b

00007968 <att_read_mult_req>:
{
    7968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    796c:	6886      	ldr	r6, [r0, #8]
{
    796e:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    7970:	2210      	movs	r2, #16
{
    7972:	4604      	mov	r4, r0
    7974:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    7976:	4668      	mov	r0, sp
    7978:	2100      	movs	r1, #0
    797a:	f01f f887 	bl	26a8c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    797e:	2200      	movs	r2, #0
    7980:	210f      	movs	r1, #15
    7982:	4630      	mov	r0, r6
    7984:	f018 f9ff 	bl	1fd86 <bt_att_create_pdu>
    7988:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    798a:	b360      	cbz	r0, 79e6 <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    798c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 79f0 <att_read_mult_req+0x88>
	data.chan = chan;
    7990:	9400      	str	r4, [sp, #0]
		handle = net_buf_pull_le16(buf);
    7992:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7996:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    799a:	89ab      	ldrh	r3, [r5, #12]
    799c:	2b01      	cmp	r3, #1
    799e:	d805      	bhi.n	79ac <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    79a0:	4a12      	ldr	r2, [pc, #72]	; (79ec <att_read_mult_req+0x84>)
    79a2:	9902      	ldr	r1, [sp, #8]
    79a4:	4620      	mov	r0, r4
    79a6:	f017 fff7 	bl	1f998 <bt_att_chan_send_rsp>
    79aa:	e018      	b.n	79de <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
    79ac:	4638      	mov	r0, r7
    79ae:	f019 fa93 	bl	20ed8 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    79b2:	466b      	mov	r3, sp
    79b4:	464a      	mov	r2, r9
    79b6:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    79b8:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    79ba:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    79be:	f017 fe9a 	bl	1f6f6 <bt_gatt_foreach_attr>
		if (data.err) {
    79c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79c6:	2b00      	cmp	r3, #0
    79c8:	d0e7      	beq.n	799a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    79ca:	9802      	ldr	r0, [sp, #8]
    79cc:	f00c fecc 	bl	14768 <net_buf_unref>
	if (!req) {
    79d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79d4:	4632      	mov	r2, r6
    79d6:	210e      	movs	r1, #14
    79d8:	4620      	mov	r0, r4
    79da:	f7ff fd99 	bl	7510 <send_err_rsp.part.0>
	return 0;
    79de:	2000      	movs	r0, #0
}
    79e0:	b005      	add	sp, #20
    79e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    79e6:	200e      	movs	r0, #14
    79e8:	e7fa      	b.n	79e0 <att_read_mult_req+0x78>
    79ea:	bf00      	nop
    79ec:	0001fa8b 	.word	0x0001fa8b
    79f0:	0001fc93 	.word	0x0001fc93

000079f4 <att_read_rsp>:
{
    79f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    79f8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    79fc:	4605      	mov	r5, r0
    79fe:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    7a00:	4640      	mov	r0, r8
    7a02:	2101      	movs	r1, #1
{
    7a04:	4614      	mov	r4, r2
    7a06:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    7a08:	f019 f9a5 	bl	20d56 <bt_gatt_change_aware>
    7a0c:	b390      	cbz	r0, 7a74 <att_read_rsp+0x80>
	if (!handle) {
    7a0e:	b39e      	cbz	r6, 7a78 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    7a10:	2210      	movs	r2, #16
    7a12:	2100      	movs	r1, #0
    7a14:	4668      	mov	r0, sp
    7a16:	f01f f839 	bl	26a8c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    7a1a:	2200      	movs	r2, #0
    7a1c:	4621      	mov	r1, r4
    7a1e:	4640      	mov	r0, r8
    7a20:	f018 f9b1 	bl	1fd86 <bt_att_create_pdu>
    7a24:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7a26:	b348      	cbz	r0, 7a7c <att_read_rsp+0x88>
	data.offset = offset;
    7a28:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7a2c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7a30:	2301      	movs	r3, #1
    7a32:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7a36:	4a12      	ldr	r2, [pc, #72]	; (7a80 <att_read_rsp+0x8c>)
	data.chan = chan;
    7a38:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7a3a:	466b      	mov	r3, sp
    7a3c:	4631      	mov	r1, r6
    7a3e:	4630      	mov	r0, r6
    7a40:	f017 fe59 	bl	1f6f6 <bt_gatt_foreach_attr>
	if (data.err) {
    7a44:	f89d 400c 	ldrb.w	r4, [sp, #12]
    7a48:	b174      	cbz	r4, 7a68 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    7a4a:	9802      	ldr	r0, [sp, #8]
    7a4c:	f00c fe8c 	bl	14768 <net_buf_unref>
	if (!req) {
    7a50:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7a54:	4632      	mov	r2, r6
    7a56:	4639      	mov	r1, r7
    7a58:	4628      	mov	r0, r5
    7a5a:	f7ff fd59 	bl	7510 <send_err_rsp.part.0>
		return 0;
    7a5e:	2400      	movs	r4, #0
}
    7a60:	4620      	mov	r0, r4
    7a62:	b004      	add	sp, #16
    7a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7a68:	4a06      	ldr	r2, [pc, #24]	; (7a84 <att_read_rsp+0x90>)
    7a6a:	9902      	ldr	r1, [sp, #8]
    7a6c:	4628      	mov	r0, r5
    7a6e:	f017 ff93 	bl	1f998 <bt_att_chan_send_rsp>
	return 0;
    7a72:	e7f5      	b.n	7a60 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7a74:	2412      	movs	r4, #18
    7a76:	e7f3      	b.n	7a60 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    7a78:	2401      	movs	r4, #1
    7a7a:	e7f1      	b.n	7a60 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    7a7c:	240e      	movs	r4, #14
    7a7e:	e7ef      	b.n	7a60 <att_read_rsp+0x6c>
    7a80:	0001fc93 	.word	0x0001fc93
    7a84:	0001fa8b 	.word	0x0001fa8b

00007a88 <att_read_type_req>:
{
    7a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    7a8c:	7b0c      	ldrb	r4, [r1, #12]
    7a8e:	3c04      	subs	r4, #4
    7a90:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    7a92:	2c02      	cmp	r4, #2
{
    7a94:	4605      	mov	r5, r0
    7a96:	b08c      	sub	sp, #48	; 0x30
    7a98:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    7a9a:	d001      	beq.n	7aa0 <att_read_type_req+0x18>
    7a9c:	2c10      	cmp	r4, #16
    7a9e:	d150      	bne.n	7b42 <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
    7aa0:	2104      	movs	r1, #4
    7aa2:	3008      	adds	r0, #8
    7aa4:	f019 fa10 	bl	20ec8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7aa8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    7aac:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7aae:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7ab0:	1d01      	adds	r1, r0, #4
    7ab2:	4622      	mov	r2, r4
    7ab4:	4640      	mov	r0, r8
    7ab6:	f017 f82a 	bl	1eb0e <bt_uuid_create>
    7aba:	b188      	cbz	r0, 7ae0 <att_read_type_req+0x58>
	if (!start || !end) {
    7abc:	b19e      	cbz	r6, 7ae6 <att_read_type_req+0x5e>
    7abe:	b18f      	cbz	r7, 7ae4 <att_read_type_req+0x5c>
	if (start > end) {
    7ac0:	42b7      	cmp	r7, r6
    7ac2:	d310      	bcc.n	7ae6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    7ac4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    7ac6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    7ac8:	2100      	movs	r1, #0
    7aca:	eb0d 0002 	add.w	r0, sp, r2
    7ace:	f01e ffdd 	bl	26a8c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    7ad2:	2201      	movs	r2, #1
    7ad4:	2109      	movs	r1, #9
    7ad6:	4620      	mov	r0, r4
    7ad8:	f018 f955 	bl	1fd86 <bt_att_create_pdu>
    7adc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    7ade:	b968      	cbnz	r0, 7afc <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    7ae0:	240e      	movs	r4, #14
    7ae2:	e007      	b.n	7af4 <att_read_type_req+0x6c>
			*err = 0U;
    7ae4:	463e      	mov	r6, r7
	if (!req) {
    7ae6:	2301      	movs	r3, #1
    7ae8:	4632      	mov	r2, r6
    7aea:	2108      	movs	r1, #8
    7aec:	4628      	mov	r0, r5
    7aee:	f7ff fd0f 	bl	7510 <send_err_rsp.part.0>
		return 0;
    7af2:	2400      	movs	r4, #0
}
    7af4:	4620      	mov	r0, r4
    7af6:	b00c      	add	sp, #48	; 0x30
    7af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7afc:	2101      	movs	r1, #1
    7afe:	3008      	adds	r0, #8
	data.uuid = uuid;
    7b00:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7b04:	f019 f9ae 	bl	20e64 <net_buf_simple_add>
	data.rsp->len = 0U;
    7b08:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7b0c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7b0e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7b10:	4a0d      	ldr	r2, [pc, #52]	; (7b48 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    7b12:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7b16:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7b18:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7b1c:	4630      	mov	r0, r6
    7b1e:	ab06      	add	r3, sp, #24
    7b20:	f017 fde9 	bl	1f6f6 <bt_gatt_foreach_attr>
	if (data.err) {
    7b24:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    7b28:	b12c      	cbz	r4, 7b36 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    7b2a:	9808      	ldr	r0, [sp, #32]
    7b2c:	f00c fe1c 	bl	14768 <net_buf_unref>
	if (!req) {
    7b30:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    7b34:	e7d8      	b.n	7ae8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7b36:	4a05      	ldr	r2, [pc, #20]	; (7b4c <att_read_type_req+0xc4>)
    7b38:	9908      	ldr	r1, [sp, #32]
    7b3a:	4628      	mov	r0, r5
    7b3c:	f017 ff2c 	bl	1f998 <bt_att_chan_send_rsp>
	return 0;
    7b40:	e7d8      	b.n	7af4 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    7b42:	2404      	movs	r4, #4
    7b44:	e7d6      	b.n	7af4 <att_read_type_req+0x6c>
    7b46:	bf00      	nop
    7b48:	000071bd 	.word	0x000071bd
    7b4c:	0001fa8b 	.word	0x0001fa8b

00007b50 <att_find_type_req>:
{
    7b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b54:	4688      	mov	r8, r1
    7b56:	b086      	sub	sp, #24
    7b58:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    7b5a:	2106      	movs	r1, #6
    7b5c:	f108 0008 	add.w	r0, r8, #8
    7b60:	f019 f9b2 	bl	20ec8 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    7b64:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    7b66:	b317      	cbz	r7, 7bae <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7b68:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    7b6c:	f1b9 0f00 	cmp.w	r9, #0
    7b70:	d01c      	beq.n	7bac <att_find_type_req+0x5c>
	if (start > end) {
    7b72:	454f      	cmp	r7, r9
    7b74:	d81b      	bhi.n	7bae <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    7b76:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7b78:	f8ad 3002 	strh.w	r3, [sp, #2]
    7b7c:	2400      	movs	r4, #0
    7b7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7b82:	a901      	add	r1, sp, #4
    7b84:	4668      	mov	r0, sp
	value = buf->data;
    7b86:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7b8a:	f88d 4000 	strb.w	r4, [sp]
    7b8e:	f88d 4004 	strb.w	r4, [sp, #4]
    7b92:	f8ad 3006 	strh.w	r3, [sp, #6]
    7b96:	f016 ff90 	bl	1eaba <bt_uuid_cmp>
    7b9a:	4606      	mov	r6, r0
    7b9c:	b190      	cbz	r0, 7bc4 <att_find_type_req+0x74>
	if (!req) {
    7b9e:	230a      	movs	r3, #10
    7ba0:	463a      	mov	r2, r7
    7ba2:	2106      	movs	r1, #6
    7ba4:	4628      	mov	r0, r5
    7ba6:	f7ff fcb3 	bl	7510 <send_err_rsp.part.0>
		return 0;
    7baa:	e007      	b.n	7bbc <att_find_type_req+0x6c>
			*err = 0U;
    7bac:	464f      	mov	r7, r9
	if (!req) {
    7bae:	2301      	movs	r3, #1
    7bb0:	463a      	mov	r2, r7
    7bb2:	2106      	movs	r1, #6
    7bb4:	4628      	mov	r0, r5
    7bb6:	f7ff fcab 	bl	7510 <send_err_rsp.part.0>
		return 0;
    7bba:	2400      	movs	r4, #0
}
    7bbc:	4620      	mov	r0, r4
    7bbe:	b006      	add	sp, #24
    7bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    7bc4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    7bc8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    7bcc:	4601      	mov	r1, r0
    7bce:	2214      	movs	r2, #20
    7bd0:	a801      	add	r0, sp, #4
    7bd2:	f01e ff5b 	bl	26a8c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    7bd6:	4632      	mov	r2, r6
    7bd8:	2107      	movs	r1, #7
    7bda:	4640      	mov	r0, r8
    7bdc:	f018 f8d3 	bl	1fd86 <bt_att_create_pdu>
    7be0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7be2:	b1e0      	cbz	r0, 7c1e <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7be4:	230a      	movs	r3, #10
    7be6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7bea:	4a0e      	ldr	r2, [pc, #56]	; (7c24 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    7bec:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7bf0:	ab01      	add	r3, sp, #4
    7bf2:	4649      	mov	r1, r9
    7bf4:	4638      	mov	r0, r7
	data.value = value;
    7bf6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    7bfa:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7bfc:	f017 fd7b 	bl	1f6f6 <bt_gatt_foreach_attr>
	if (data.err) {
    7c00:	f89d 4015 	ldrb.w	r4, [sp, #21]
    7c04:	b12c      	cbz	r4, 7c12 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    7c06:	9802      	ldr	r0, [sp, #8]
    7c08:	f00c fdae 	bl	14768 <net_buf_unref>
	if (!req) {
    7c0c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    7c10:	e7ce      	b.n	7bb0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7c12:	4a05      	ldr	r2, [pc, #20]	; (7c28 <att_find_type_req+0xd8>)
    7c14:	9902      	ldr	r1, [sp, #8]
    7c16:	4628      	mov	r0, r5
    7c18:	f017 febe 	bl	1f998 <bt_att_chan_send_rsp>
	return 0;
    7c1c:	e7ce      	b.n	7bbc <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    7c1e:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    7c20:	e7cc      	b.n	7bbc <att_find_type_req+0x6c>
    7c22:	bf00      	nop
    7c24:	0001f823 	.word	0x0001f823
    7c28:	0001fa8b 	.word	0x0001fa8b

00007c2c <att_find_info_req>:
{
    7c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    7c2e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    7c30:	881e      	ldrh	r6, [r3, #0]
{
    7c32:	b085      	sub	sp, #20
    7c34:	4605      	mov	r5, r0
	if (!start || !end) {
    7c36:	b19e      	cbz	r6, 7c60 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7c38:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    7c3a:	b184      	cbz	r4, 7c5e <att_find_info_req+0x32>
	if (start > end) {
    7c3c:	42b4      	cmp	r4, r6
    7c3e:	d30f      	bcc.n	7c60 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    7c40:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    7c42:	2210      	movs	r2, #16
    7c44:	2100      	movs	r1, #0
    7c46:	4668      	mov	r0, sp
    7c48:	f01e ff20 	bl	26a8c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    7c4c:	2200      	movs	r2, #0
    7c4e:	2105      	movs	r1, #5
    7c50:	4638      	mov	r0, r7
    7c52:	f018 f898 	bl	1fd86 <bt_att_create_pdu>
    7c56:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    7c58:	b958      	cbnz	r0, 7c72 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    7c5a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    7c5c:	e007      	b.n	7c6e <att_find_info_req+0x42>
			*err = 0U;
    7c5e:	4626      	mov	r6, r4
	if (!req) {
    7c60:	2301      	movs	r3, #1
    7c62:	4632      	mov	r2, r6
    7c64:	2104      	movs	r1, #4
    7c66:	4628      	mov	r0, r5
    7c68:	f7ff fc52 	bl	7510 <send_err_rsp.part.0>
	return 0;
    7c6c:	2000      	movs	r0, #0
}
    7c6e:	b005      	add	sp, #20
    7c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7c72:	4621      	mov	r1, r4
    7c74:	4a09      	ldr	r2, [pc, #36]	; (7c9c <att_find_info_req+0x70>)
	data.chan = chan;
    7c76:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7c78:	466b      	mov	r3, sp
    7c7a:	4630      	mov	r0, r6
    7c7c:	f017 fd3b 	bl	1f6f6 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    7c80:	9c02      	ldr	r4, [sp, #8]
    7c82:	b924      	cbnz	r4, 7c8e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    7c84:	9801      	ldr	r0, [sp, #4]
    7c86:	f00c fd6f 	bl	14768 <net_buf_unref>
	if (!req) {
    7c8a:	230a      	movs	r3, #10
    7c8c:	e7e9      	b.n	7c62 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7c8e:	4a04      	ldr	r2, [pc, #16]	; (7ca0 <att_find_info_req+0x74>)
    7c90:	9901      	ldr	r1, [sp, #4]
    7c92:	4628      	mov	r0, r5
    7c94:	f017 fe80 	bl	1f998 <bt_att_chan_send_rsp>
    7c98:	e7e8      	b.n	7c6c <att_find_info_req+0x40>
    7c9a:	bf00      	nop
    7c9c:	0001f9e9 	.word	0x0001f9e9
    7ca0:	0001fa8b 	.word	0x0001fa8b

00007ca4 <att_mtu_req>:
{
    7ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    7ca6:	6803      	ldr	r3, [r0, #0]
{
    7ca8:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    7caa:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7cac:	f3bf 8f5b 	dmb	ish
    7cb0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    7cb4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    7cb8:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    7cbc:	071b      	lsls	r3, r3, #28
    7cbe:	d41b      	bmi.n	7cf8 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
    7cc0:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    7cc2:	881b      	ldrh	r3, [r3, #0]
    7cc4:	2b16      	cmp	r3, #22
    7cc6:	d919      	bls.n	7cfc <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    7cc8:	2202      	movs	r2, #2
    7cca:	2103      	movs	r1, #3
    7ccc:	f018 f85b 	bl	1fd86 <bt_att_create_pdu>
	if (!pdu) {
    7cd0:	4606      	mov	r6, r0
    7cd2:	b1a8      	cbz	r0, 7d00 <att_mtu_req+0x5c>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    7cd4:	2102      	movs	r1, #2
    7cd6:	3008      	adds	r0, #8
    7cd8:	f019 f8c4 	bl	20e64 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    7cdc:	2717      	movs	r7, #23
    7cde:	7007      	strb	r7, [r0, #0]
    7ce0:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    7ce2:	4a08      	ldr	r2, [pc, #32]	; (7d04 <att_mtu_req+0x60>)
    7ce4:	4628      	mov	r0, r5
    7ce6:	4631      	mov	r1, r6
    7ce8:	f017 fe56 	bl	1f998 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    7cec:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    7cf0:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
	return 0;
    7cf4:	4620      	mov	r0, r4
}
    7cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    7cf8:	2006      	movs	r0, #6
    7cfa:	e7fc      	b.n	7cf6 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
    7cfc:	2004      	movs	r0, #4
    7cfe:	e7fa      	b.n	7cf6 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
    7d00:	200e      	movs	r0, #14
    7d02:	e7f8      	b.n	7cf6 <att_mtu_req+0x52>
    7d04:	0001fa8b 	.word	0x0001fa8b

00007d08 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    7d08:	b513      	push	{r0, r1, r4, lr}
    7d0a:	4602      	mov	r2, r0
    7d0c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    7d0e:	4808      	ldr	r0, [pc, #32]	; (7d30 <bt_att_req_alloc+0x28>)
    7d10:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    7d12:	2400      	movs	r4, #0
    7d14:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    7d16:	f012 fc55 	bl	1a5c4 <k_mem_slab_alloc>
    7d1a:	4601      	mov	r1, r0
    7d1c:	b930      	cbnz	r0, 7d2c <bt_att_req_alloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
    7d1e:	9801      	ldr	r0, [sp, #4]
    7d20:	2218      	movs	r2, #24
    7d22:	f01e feb3 	bl	26a8c <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
    7d26:	9801      	ldr	r0, [sp, #4]
}
    7d28:	b002      	add	sp, #8
    7d2a:	bd10      	pop	{r4, pc}
		return NULL;
    7d2c:	4620      	mov	r0, r4
    7d2e:	e7fb      	b.n	7d28 <bt_att_req_alloc+0x20>
    7d30:	20000cf8 	.word	0x20000cf8

00007d34 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    7d34:	b507      	push	{r0, r1, r2, lr}
    7d36:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    7d38:	a901      	add	r1, sp, #4
    7d3a:	4803      	ldr	r0, [pc, #12]	; (7d48 <bt_att_req_free+0x14>)
    7d3c:	f012 fc74 	bl	1a628 <k_mem_slab_free>
}
    7d40:	b003      	add	sp, #12
    7d42:	f85d fb04 	ldr.w	pc, [sp], #4
    7d46:	bf00      	nop
    7d48:	20000cf8 	.word	0x20000cf8

00007d4c <att_handle_rsp>:
{
    7d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d50:	4604      	mov	r4, r0
    7d52:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    7d54:	30e0      	adds	r0, #224	; 0xe0
{
    7d56:	4689      	mov	r9, r1
    7d58:	4692      	mov	sl, r2
    7d5a:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    7d5c:	f01e fc41 	bl	265e2 <k_delayed_work_cancel>
	if (!chan->req) {
    7d60:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
    7d64:	2600      	movs	r6, #0
    7d66:	b12d      	cbz	r5, 7d74 <att_handle_rsp+0x28>
	if (chan->req == &cancel) {
    7d68:	4b2b      	ldr	r3, [pc, #172]	; (7e18 <att_handle_rsp+0xcc>)
    7d6a:	429d      	cmp	r5, r3
    7d6c:	d123      	bne.n	7db6 <att_handle_rsp+0x6a>
		chan->req = NULL;
    7d6e:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
	bt_att_func_t func = NULL;
    7d72:	4635      	mov	r5, r6
	att_process(chan->att);
    7d74:	f8d4 b000 	ldr.w	fp, [r4]
	node = sys_slist_get(&att->reqs);
    7d78:	f10b 0004 	add.w	r0, fp, #4
    7d7c:	f017 fc32 	bl	1f5e4 <sys_slist_get>
	if (!node) {
    7d80:	4607      	mov	r7, r0
    7d82:	b380      	cbz	r0, 7de6 <att_handle_rsp+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7d84:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    7d88:	b152      	cbz	r2, 7da0 <att_handle_rsp+0x54>
    7d8a:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
    7d8e:	d007      	beq.n	7da0 <att_handle_rsp+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7d90:	6816      	ldr	r6, [r2, #0]
    7d92:	b10e      	cbz	r6, 7d98 <att_handle_rsp+0x4c>
    7d94:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
    7d98:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    7d9c:	b1f2      	cbz	r2, 7ddc <att_handle_rsp+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7d9e:	bb7e      	cbnz	r6, 7e00 <att_handle_rsp+0xb4>
Z_GENLIST_PREPEND(slist, snode)
    7da0:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    7da4:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    7da6:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    7daa:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    7dae:	b9d2      	cbnz	r2, 7de6 <att_handle_rsp+0x9a>
	list->tail = node;
    7db0:	f8cb 7008 	str.w	r7, [fp, #8]
}
    7db4:	e017      	b.n	7de6 <att_handle_rsp+0x9a>
	if (chan->req->buf) {
    7db6:	6928      	ldr	r0, [r5, #16]
    7db8:	b120      	cbz	r0, 7dc4 <att_handle_rsp+0x78>
		net_buf_unref(chan->req->buf);
    7dba:	f00c fcd5 	bl	14768 <net_buf_unref>
		chan->req->buf = NULL;
    7dbe:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    7dc2:	611e      	str	r6, [r3, #16]
	func = chan->req->func;
    7dc4:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
	chan->req->func = NULL;
    7dc8:	2600      	movs	r6, #0
	func = chan->req->func;
    7dca:	6845      	ldr	r5, [r0, #4]
	params = chan->req->user_data;
    7dcc:	6943      	ldr	r3, [r0, #20]
	chan->req->func = NULL;
    7dce:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    7dd0:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    7dd2:	f018 f83b 	bl	1fe4c <att_req_destroy>
	chan->req = NULL;
    7dd6:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
    7dda:	e7cb      	b.n	7d74 <att_handle_rsp+0x28>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    7ddc:	4639      	mov	r1, r7
    7dde:	f017 feac 	bl	1fb3a <bt_att_chan_req_send>
    7de2:	2800      	cmp	r0, #0
    7de4:	dbdb      	blt.n	7d9e <att_handle_rsp+0x52>
	if (func) {
    7de6:	b13d      	cbz	r5, 7df8 <att_handle_rsp+0xac>
		func(chan->att->conn, err, pdu, len, params);
    7de8:	9b03      	ldr	r3, [sp, #12]
    7dea:	6820      	ldr	r0, [r4, #0]
    7dec:	9300      	str	r3, [sp, #0]
    7dee:	6800      	ldr	r0, [r0, #0]
    7df0:	4653      	mov	r3, sl
    7df2:	464a      	mov	r2, r9
    7df4:	4641      	mov	r1, r8
    7df6:	47a8      	blx	r5
}
    7df8:	2000      	movs	r0, #0
    7dfa:	b005      	add	sp, #20
    7dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    7e00:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
    7e04:	d004      	beq.n	7e10 <att_handle_rsp+0xc4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7e06:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7e0a:	b10a      	cbz	r2, 7e10 <att_handle_rsp+0xc4>
    7e0c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
    7e10:	4630      	mov	r0, r6
    7e12:	4616      	mov	r6, r2
    7e14:	e7c0      	b.n	7d98 <att_handle_rsp+0x4c>
    7e16:	bf00      	nop
    7e18:	20001864 	.word	0x20001864

00007e1c <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    7e1c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
{
    7e20:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
    7e22:	b18b      	cbz	r3, 7e48 <att_error_rsp+0x2c>
    7e24:	4a09      	ldr	r2, [pc, #36]	; (7e4c <att_error_rsp+0x30>)
    7e26:	4293      	cmp	r3, r2
    7e28:	d00e      	beq.n	7e48 <att_error_rsp+0x2c>
	if (chan->req->buf) {
    7e2a:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
    7e2c:	688c      	ldr	r4, [r1, #8]
	if (chan->req->buf) {
    7e2e:	b12a      	cbz	r2, 7e3c <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
    7e30:	899d      	ldrh	r5, [r3, #12]
    7e32:	6911      	ldr	r1, [r2, #16]
	buf->len = state->len;
    7e34:	89db      	ldrh	r3, [r3, #14]
    7e36:	8193      	strh	r3, [r2, #12]
	buf->data = buf->__buf + state->offset;
    7e38:	4429      	add	r1, r5
    7e3a:	6091      	str	r1, [r2, #8]
	err = rsp->error;
    7e3c:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(chan, NULL, 0, err);
    7e3e:	2200      	movs	r2, #0
}
    7e40:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
    7e42:	4611      	mov	r1, r2
    7e44:	f7ff bf82 	b.w	7d4c <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    7e48:	230e      	movs	r3, #14
    7e4a:	e7f8      	b.n	7e3e <att_error_rsp+0x22>
    7e4c:	20001864 	.word	0x20001864

00007e50 <att_reset>:
{
    7e50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7e52:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    7e54:	9803      	ldr	r0, [sp, #12]
    7e56:	2200      	movs	r2, #0
    7e58:	2300      	movs	r3, #0
    7e5a:	3024      	adds	r0, #36	; 0x24
    7e5c:	f018 ffab 	bl	20db6 <net_buf_get>
    7e60:	b980      	cbnz	r0, 7e84 <att_reset+0x34>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    7e62:	9803      	ldr	r0, [sp, #12]
    7e64:	2200      	movs	r2, #0
    7e66:	2300      	movs	r3, #0
    7e68:	300c      	adds	r0, #12
    7e6a:	f018 ffa4 	bl	20db6 <net_buf_get>
    7e6e:	b960      	cbnz	r0, 7e8a <att_reset+0x3a>
	att->conn = NULL;
    7e70:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7e72:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
    7e74:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7e76:	b95d      	cbnz	r5, 7e90 <att_reset+0x40>
	k_mem_slab_free(&att_slab, (void **)&att);
    7e78:	4812      	ldr	r0, [pc, #72]	; (7ec4 <att_reset+0x74>)
    7e7a:	a903      	add	r1, sp, #12
    7e7c:	f012 fbd4 	bl	1a628 <k_mem_slab_free>
}
    7e80:	b004      	add	sp, #16
    7e82:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    7e84:	f00c fc70 	bl	14768 <net_buf_unref>
    7e88:	e7e4      	b.n	7e54 <att_reset+0x4>
		net_buf_unref(buf);
    7e8a:	f00c fc6d 	bl	14768 <net_buf_unref>
    7e8e:	e7e8      	b.n	7e62 <att_reset+0x12>
	return node->next;
    7e90:	682c      	ldr	r4, [r5, #0]
    7e92:	2c00      	cmp	r4, #0
    7e94:	bf38      	it	cc
    7e96:	2400      	movcc	r4, #0
		if (req->func) {
    7e98:	686e      	ldr	r6, [r5, #4]
    7e9a:	b136      	cbz	r6, 7eaa <att_reset+0x5a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    7e9c:	696b      	ldr	r3, [r5, #20]
    7e9e:	9300      	str	r3, [sp, #0]
    7ea0:	2300      	movs	r3, #0
    7ea2:	461a      	mov	r2, r3
    7ea4:	210e      	movs	r1, #14
    7ea6:	4618      	mov	r0, r3
    7ea8:	47b0      	blx	r6
		att_req_destroy(req);
    7eaa:	4628      	mov	r0, r5
    7eac:	f017 ffce 	bl	1fe4c <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7eb0:	2c00      	cmp	r4, #0
    7eb2:	d0e1      	beq.n	7e78 <att_reset+0x28>
    7eb4:	6823      	ldr	r3, [r4, #0]
    7eb6:	2b00      	cmp	r3, #0
    7eb8:	bf38      	it	cc
    7eba:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7ebc:	4625      	mov	r5, r4
    7ebe:	461c      	mov	r4, r3
    7ec0:	e7ea      	b.n	7e98 <att_reset+0x48>
    7ec2:	bf00      	nop
    7ec4:	20000cc0 	.word	0x20000cc0

00007ec8 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    7ec8:	b510      	push	{r4, lr}
    7eca:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    7ecc:	b348      	cbz	r0, 7f22 <bt_att_req_cancel+0x5a>
    7ece:	b341      	cbz	r1, 7f22 <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
    7ed0:	f017 fdf7 	bl	1fac2 <att_get>
	if (!att) {
    7ed4:	b328      	cbz	r0, 7f22 <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7ed6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    7ed8:	b15b      	cbz	r3, 7ef2 <bt_att_req_cancel+0x2a>
    7eda:	f5b3 7196 	subs.w	r1, r3, #300	; 0x12c
    7ede:	d008      	beq.n	7ef2 <bt_att_req_cancel+0x2a>
    7ee0:	681b      	ldr	r3, [r3, #0]
    7ee2:	b10b      	cbz	r3, 7ee8 <bt_att_req_cancel+0x20>
    7ee4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
	if (chan->req != req) {
    7ee8:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
    7eec:	4294      	cmp	r4, r2
    7eee:	d005      	beq.n	7efc <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7ef0:	b963      	cbnz	r3, 7f0c <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    7ef2:	4621      	mov	r1, r4
    7ef4:	3004      	adds	r0, #4
    7ef6:	f017 fb7f 	bl	1f5f8 <sys_slist_find_and_remove>
    7efa:	e002      	b.n	7f02 <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
    7efc:	4b09      	ldr	r3, [pc, #36]	; (7f24 <bt_att_req_cancel+0x5c>)
    7efe:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4

	att_req_destroy(req);
    7f02:	4620      	mov	r0, r4
}
    7f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    7f08:	f017 bfa0 	b.w	1fe4c <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7f0c:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
    7f10:	d004      	beq.n	7f1c <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7f12:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7f16:	b10a      	cbz	r2, 7f1c <bt_att_req_cancel+0x54>
    7f18:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
    7f1c:	4619      	mov	r1, r3
    7f1e:	4613      	mov	r3, r2
    7f20:	e7e2      	b.n	7ee8 <bt_att_req_cancel+0x20>
}
    7f22:	bd10      	pop	{r4, pc}
    7f24:	20001864 	.word	0x20001864

00007f28 <sc_store>:

	return NULL;
}

static void sc_store(struct gatt_sc_cfg *cfg)
{
    7f28:	b570      	push	{r4, r5, r6, lr}
	char key[BT_SETTINGS_KEY_MAX];
	int err;

	if (cfg->id) {
    7f2a:	4605      	mov	r5, r0
{
    7f2c:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    7f2e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    7f32:	4604      	mov	r4, r0
	if (cfg->id) {
    7f34:	b19a      	cbz	r2, 7f5e <sc_store+0x36>
		char id_str[4];

		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    7f36:	ae02      	add	r6, sp, #8
    7f38:	2104      	movs	r1, #4
    7f3a:	4630      	mov	r0, r6
    7f3c:	f015 fe22 	bl	1db84 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    7f40:	9600      	str	r6, [sp, #0]
				       &cfg->peer, id_str);
	} else {
		bt_settings_encode_key(key, sizeof(key), "sc",
    7f42:	462b      	mov	r3, r5
    7f44:	a803      	add	r0, sp, #12
    7f46:	4a07      	ldr	r2, [pc, #28]	; (7f64 <sc_store+0x3c>)
    7f48:	2124      	movs	r1, #36	; 0x24
    7f4a:	f7fc ff77 	bl	4e3c <bt_settings_encode_key>
				       &cfg->peer, NULL);
	}

	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    7f4e:	2204      	movs	r2, #4
    7f50:	f104 0108 	add.w	r1, r4, #8
    7f54:	a803      	add	r0, sp, #12
    7f56:	f7fb fd4d 	bl	39f4 <settings_save_one>
	}

	BT_DBG("stored SC for %s (%s, 0x%04x-0x%04x)",
	       bt_addr_le_str(&cfg->peer), log_strdup(key), cfg->data.start,
	       cfg->data.end);
}
    7f5a:	b00c      	add	sp, #48	; 0x30
    7f5c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    7f5e:	9200      	str	r2, [sp, #0]
    7f60:	e7ef      	b.n	7f42 <sc_store+0x1a>
    7f62:	bf00      	nop
    7f64:	00028abc 	.word	0x00028abc

00007f68 <find_sc_cfg>:
{
    7f68:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    7f6a:	4c06      	ldr	r4, [pc, #24]	; (7f84 <find_sc_cfg+0x1c>)
    7f6c:	7823      	ldrb	r3, [r4, #0]
    7f6e:	4283      	cmp	r3, r0
    7f70:	d104      	bne.n	7f7c <find_sc_cfg+0x14>
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    7f72:	2207      	movs	r2, #7
    7f74:	1c60      	adds	r0, r4, #1
    7f76:	f01e fd5a 	bl	26a2e <memcmp>
    7f7a:	b108      	cbz	r0, 7f80 <find_sc_cfg+0x18>
	return NULL;
    7f7c:	2000      	movs	r0, #0
}
    7f7e:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    7f80:	4620      	mov	r0, r4
    7f82:	e7fc      	b.n	7f7e <find_sc_cfg+0x16>
    7f84:	20002f20 	.word	0x20002f20

00007f88 <bt_gatt_clear_sc>:
{
	memset(cfg, 0, sizeof(*cfg));
}

static int bt_gatt_clear_sc(uint8_t id, const bt_addr_le_t *addr)
{
    7f88:	b570      	push	{r4, r5, r6, lr}
    7f8a:	b08c      	sub	sp, #48	; 0x30

	struct gatt_sc_cfg *cfg;

	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    7f8c:	f7ff ffec 	bl	7f68 <find_sc_cfg>
	if (!cfg) {
    7f90:	4604      	mov	r4, r0
    7f92:	b1a8      	cbz	r0, 7fc0 <bt_gatt_clear_sc+0x38>

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		char key[BT_SETTINGS_KEY_MAX];
		int err;

		if (cfg->id) {
    7f94:	4605      	mov	r5, r0
    7f96:	f815 2b01 	ldrb.w	r2, [r5], #1
    7f9a:	b1a2      	cbz	r2, 7fc6 <bt_gatt_clear_sc+0x3e>
			char id_str[4];

			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    7f9c:	ae02      	add	r6, sp, #8
    7f9e:	2104      	movs	r1, #4
    7fa0:	4630      	mov	r0, r6
    7fa2:	f015 fdef 	bl	1db84 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    7fa6:	9600      	str	r6, [sp, #0]
					       &cfg->peer, id_str);
		} else {
			bt_settings_encode_key(key, sizeof(key), "sc",
    7fa8:	4a08      	ldr	r2, [pc, #32]	; (7fcc <bt_gatt_clear_sc+0x44>)
    7faa:	462b      	mov	r3, r5
    7fac:	2124      	movs	r1, #36	; 0x24
    7fae:	a803      	add	r0, sp, #12
    7fb0:	f7fc ff44 	bl	4e3c <bt_settings_encode_key>
					       &cfg->peer, NULL);
		}

		err = settings_delete(key);
    7fb4:	a803      	add	r0, sp, #12
    7fb6:	f016 fa0c 	bl	1e3d2 <settings_delete>
			       bt_addr_le_str(&cfg->peer),
			       log_strdup(key));
		}
	}

	clear_sc_cfg(cfg);
    7fba:	4620      	mov	r0, r4
    7fbc:	f018 f8fb 	bl	201b6 <clear_sc_cfg>

	return 0;
}
    7fc0:	2000      	movs	r0, #0
    7fc2:	b00c      	add	sp, #48	; 0x30
    7fc4:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    7fc6:	9200      	str	r2, [sp, #0]
    7fc8:	e7ee      	b.n	7fa8 <bt_gatt_clear_sc+0x20>
    7fca:	bf00      	nop
    7fcc:	00028abc 	.word	0x00028abc

00007fd0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    7fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7fd4:	4b1f      	ldr	r3, [pc, #124]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
{
    7fd6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7fd8:	6882      	ldr	r2, [r0, #8]
    7fda:	429a      	cmp	r2, r3
{
    7fdc:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    7fde:	d102      	bne.n	7fe6 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    7fe0:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    7fe2:	8963      	ldrh	r3, [r4, #10]
    7fe4:	b9c3      	cbnz	r3, 8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    7fe6:	2001      	movs	r0, #1
    7fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    7fec:	f105 0888 	add.w	r8, r5, #136	; 0x88
    7ff0:	7a28      	ldrb	r0, [r5, #8]
    7ff2:	4641      	mov	r1, r8
    7ff4:	f017 f855 	bl	1f0a2 <bt_addr_le_is_bonded>
    7ff8:	b948      	cbnz	r0, 800e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe>
				if (ccc == &sc_ccc) {
    7ffa:	4b17      	ldr	r3, [pc, #92]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
    7ffc:	429c      	cmp	r4, r3
    7ffe:	d102      	bne.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
					sc_clear(conn);
    8000:	4628      	mov	r0, r5
    8002:	f018 f90f 	bl	20224 <sc_clear>
				clear_ccc_cfg(cfg);
    8006:	4620      	mov	r0, r4
    8008:	f018 f891 	bl	2012e <clear_ccc_cfg>
	if (!value_used) {
    800c:	e019      	b.n	8042 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    800e:	4641      	mov	r1, r8
    8010:	4638      	mov	r0, r7
    8012:	f018 f885 	bl	20120 <bt_addr_le_copy>
	if (!value_used) {
    8016:	e014      	b.n	8042 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42>
		if (!cfg->value) {
    8018:	8923      	ldrh	r3, [r4, #8]
    801a:	b193      	cbz	r3, 8042 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    801c:	4627      	mov	r7, r4
    801e:	4628      	mov	r0, r5
    8020:	f817 1b01 	ldrb.w	r1, [r7], #1
    8024:	463a      	mov	r2, r7
    8026:	f017 f982 	bl	1f32e <bt_conn_is_peer_addr_le>
    802a:	2800      	cmp	r0, #0
    802c:	d1de      	bne.n	7fec <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    802e:	7820      	ldrb	r0, [r4, #0]
    8030:	4639      	mov	r1, r7
    8032:	f7fe fd4f 	bl	6ad4 <bt_conn_lookup_addr_le>
			if (tmp) {
    8036:	b120      	cbz	r0, 8042 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42>
				if (tmp->state == BT_CONN_CONNECTED) {
    8038:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    803a:	f017 f998 	bl	1f36e <bt_conn_unref>
	if (!value_used) {
    803e:	2d07      	cmp	r5, #7
    8040:	d0d1      	beq.n	7fe6 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    8042:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    8044:	2100      	movs	r1, #0
    8046:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    8048:	2b00      	cmp	r3, #0
    804a:	d0cc      	beq.n	7fe6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    804c:	4630      	mov	r0, r6
    804e:	4798      	blx	r3
    8050:	e7c9      	b.n	7fe6 <disconnected_cb+0x16>
    8052:	bf00      	nop
    8054:	00020353 	.word	0x00020353
    8058:	200003d4 	.word	0x200003d4

0000805c <ccc_save>:
	size_t count;
};

static uint8_t ccc_save(const struct bt_gatt_attr *attr, uint16_t handle,
			void *user_data)
{
    805c:	b538      	push	{r3, r4, r5, lr}
	struct ccc_save *save = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    805e:	4b0c      	ldr	r3, [pc, #48]	; (8090 <ccc_save+0x34>)
{
    8060:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    8062:	6882      	ldr	r2, [r0, #8]
    8064:	429a      	cmp	r2, r3
{
    8066:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    8068:	d10f      	bne.n	808a <ccc_save+0x2e>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    806a:	7922      	ldrb	r2, [r4, #4]
    806c:	6821      	ldr	r1, [r4, #0]
    806e:	68c0      	ldr	r0, [r0, #12]
    8070:	f018 f946 	bl	20300 <ccc_find_cfg>
	if (!cfg) {
    8074:	b148      	cbz	r0, 808a <ccc_save+0x2e>
		return BT_GATT_ITER_CONTINUE;
	}

	BT_DBG("Storing CCCs handle 0x%04x value 0x%04x", handle, cfg->value);

	save->store[save->count].handle = handle;
    8076:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    807a:	8901      	ldrh	r1, [r0, #8]
    807c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    8080:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    8082:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    8084:	8151      	strh	r1, [r2, #10]
	save->count++;
    8086:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

	return BT_GATT_ITER_CONTINUE;
}
    808a:	2001      	movs	r0, #1
    808c:	bd38      	pop	{r3, r4, r5, pc}
    808e:	bf00      	nop
    8090:	00020353 	.word	0x00020353

00008094 <ccc_load>:
{
    8094:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8096:	4b20      	ldr	r3, [pc, #128]	; (8118 <ccc_load+0x84>)
{
    8098:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    809a:	6882      	ldr	r2, [r0, #8]
    809c:	429a      	cmp	r2, r3
    809e:	d002      	beq.n	80a6 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    80a0:	2001      	movs	r0, #1
}
    80a2:	b003      	add	sp, #12
    80a4:	bd30      	pop	{r4, r5, pc}
	if (!load->entry) {
    80a6:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
    80a8:	68c5      	ldr	r5, [r0, #12]
	if (!load->entry) {
    80aa:	b94b      	cbnz	r3, 80c0 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    80ac:	7922      	ldrb	r2, [r4, #4]
    80ae:	6821      	ldr	r1, [r4, #0]
    80b0:	4628      	mov	r0, r5
    80b2:	f018 f925 	bl	20300 <ccc_find_cfg>
	if (!cfg) {
    80b6:	2800      	cmp	r0, #0
    80b8:	d0f2      	beq.n	80a0 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    80ba:	f018 f838 	bl	2012e <clear_ccc_cfg>
    80be:	e7ef      	b.n	80a0 <ccc_load+0xc>
	} else if (!load->count) {
    80c0:	68e0      	ldr	r0, [r4, #12]
    80c2:	2800      	cmp	r0, #0
    80c4:	d0ed      	beq.n	80a2 <ccc_load+0xe>
	if (load->entry->handle != handle) {
    80c6:	881b      	ldrh	r3, [r3, #0]
    80c8:	4299      	cmp	r1, r3
    80ca:	d00a      	beq.n	80e2 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    80cc:	d9e8      	bls.n	80a0 <ccc_load+0xc>
	load->count--;
    80ce:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    80d0:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    80d2:	3801      	subs	r0, #1
	load->entry++;
    80d4:	3304      	adds	r3, #4
	load->count--;
    80d6:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    80d8:	3800      	subs	r0, #0
	load->entry++;
    80da:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    80dc:	bf18      	it	ne
    80de:	2001      	movne	r0, #1
    80e0:	e7df      	b.n	80a2 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    80e2:	7922      	ldrb	r2, [r4, #4]
    80e4:	6821      	ldr	r1, [r4, #0]
    80e6:	4628      	mov	r0, r5
    80e8:	f018 f90a 	bl	20300 <ccc_find_cfg>
	if (!cfg) {
    80ec:	4602      	mov	r2, r0
    80ee:	b978      	cbnz	r0, 8110 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    80f0:	9000      	str	r0, [sp, #0]
    80f2:	4669      	mov	r1, sp
    80f4:	f8cd 0003 	str.w	r0, [sp, #3]
    80f8:	4628      	mov	r0, r5
    80fa:	f018 f901 	bl	20300 <ccc_find_cfg>
		if (!cfg) {
    80fe:	4602      	mov	r2, r0
    8100:	2800      	cmp	r0, #0
    8102:	d0e4      	beq.n	80ce <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    8104:	6821      	ldr	r1, [r4, #0]
    8106:	3001      	adds	r0, #1
    8108:	f018 f80a 	bl	20120 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    810c:	7923      	ldrb	r3, [r4, #4]
    810e:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
    8110:	68a3      	ldr	r3, [r4, #8]
    8112:	885b      	ldrh	r3, [r3, #2]
    8114:	8113      	strh	r3, [r2, #8]
    8116:	e7da      	b.n	80ce <ccc_load+0x3a>
    8118:	00020353 	.word	0x00020353

0000811c <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    811c:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    811e:	6881      	ldr	r1, [r0, #8]
{
    8120:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    8122:	4a07      	ldr	r2, [pc, #28]	; (8140 <remove_peer_from_attr+0x24>)
    8124:	4291      	cmp	r1, r2
    8126:	d109      	bne.n	813c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    8128:	791a      	ldrb	r2, [r3, #4]
    812a:	6819      	ldr	r1, [r3, #0]
    812c:	68c0      	ldr	r0, [r0, #12]
    812e:	f018 f8e7 	bl	20300 <ccc_find_cfg>
	if (cfg) {
    8132:	b118      	cbz	r0, 813c <remove_peer_from_attr+0x20>
    8134:	2300      	movs	r3, #0
    8136:	6003      	str	r3, [r0, #0]
    8138:	6043      	str	r3, [r0, #4]
    813a:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
    813c:	2001      	movs	r0, #1
    813e:	bd08      	pop	{r3, pc}
    8140:	00020353 	.word	0x00020353

00008144 <gatt_sub_find>:
{
    8144:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8146:	4d0d      	ldr	r5, [pc, #52]	; (817c <gatt_sub_find+0x38>)
		if (!conn) {
    8148:	4604      	mov	r4, r0
    814a:	b968      	cbnz	r0, 8168 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    814c:	9000      	str	r0, [sp, #0]
    814e:	2207      	movs	r2, #7
    8150:	f8cd 0003 	str.w	r0, [sp, #3]
    8154:	4669      	mov	r1, sp
    8156:	1c68      	adds	r0, r5, #1
    8158:	f01e fc69 	bl	26a2e <memcmp>
		struct gatt_sub *sub = &subscriptions[i];
    815c:	2800      	cmp	r0, #0
    815e:	bf08      	it	eq
    8160:	462c      	moveq	r4, r5
}
    8162:	4620      	mov	r0, r4
    8164:	b003      	add	sp, #12
    8166:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    8168:	462a      	mov	r2, r5
    816a:	f812 1b01 	ldrb.w	r1, [r2], #1
    816e:	f017 f8de 	bl	1f32e <bt_conn_is_peer_addr_le>
    8172:	2800      	cmp	r0, #0
	return NULL;
    8174:	bf14      	ite	ne
    8176:	462c      	movne	r4, r5
    8178:	2400      	moveq	r4, #0
    817a:	e7f2      	b.n	8162 <gatt_sub_find+0x1e>
    817c:	2000189c 	.word	0x2000189c

00008180 <sc_commit>:
{
    8180:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8182:	490f      	ldr	r1, [pc, #60]	; (81c0 <sc_commit+0x40>)
    8184:	f3bf 8f5b 	dmb	ish
    8188:	f101 0350 	add.w	r3, r1, #80	; 0x50
    818c:	e853 2f00 	ldrex	r2, [r3]
    8190:	f022 0202 	bic.w	r2, r2, #2
    8194:	e843 2000 	strex	r0, r2, [r3]
    8198:	2800      	cmp	r0, #0
    819a:	d1f7      	bne.n	818c <sc_commit+0xc>
    819c:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    81a0:	f3bf 8f5b 	dmb	ish
    81a4:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    81a6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    81aa:	07db      	lsls	r3, r3, #31
    81ac:	d506      	bpl.n	81bc <sc_commit+0x3c>
    81ae:	4805      	ldr	r0, [pc, #20]	; (81c4 <sc_commit+0x44>)
    81b0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    81b4:	2300      	movs	r3, #0
    81b6:	3120      	adds	r1, #32
    81b8:	f013 f840 	bl	1b23c <k_delayed_work_submit_to_queue>
}
    81bc:	2000      	movs	r0, #0
    81be:	bd08      	pop	{r3, pc}
    81c0:	20001118 	.word	0x20001118
    81c4:	20001488 	.word	0x20001488

000081c8 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    81c8:	490e      	ldr	r1, [pc, #56]	; (8204 <sc_indicate_rsp+0x3c>)
    81ca:	f3bf 8f5b 	dmb	ish
    81ce:	f101 0350 	add.w	r3, r1, #80	; 0x50
    81d2:	e853 2f00 	ldrex	r2, [r3]
    81d6:	f022 0202 	bic.w	r2, r2, #2
    81da:	e843 2000 	strex	r0, r2, [r3]
    81de:	2800      	cmp	r0, #0
    81e0:	d1f7      	bne.n	81d2 <sc_indicate_rsp+0xa>
    81e2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    81e6:	f3bf 8f5b 	dmb	ish
    81ea:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    81ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    81f0:	07db      	lsls	r3, r3, #31
    81f2:	d505      	bpl.n	8200 <sc_indicate_rsp+0x38>
    81f4:	4804      	ldr	r0, [pc, #16]	; (8208 <sc_indicate_rsp+0x40>)
    81f6:	2200      	movs	r2, #0
    81f8:	2300      	movs	r3, #0
    81fa:	3120      	adds	r1, #32
    81fc:	f013 b81e 	b.w	1b23c <k_delayed_work_submit_to_queue>
}
    8200:	4770      	bx	lr
    8202:	bf00      	nop
    8204:	20001118 	.word	0x20001118
    8208:	20001488 	.word	0x20001488

0000820c <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    820c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8210:	4688      	mov	r8, r1
    8212:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    8214:	2112      	movs	r1, #18
    8216:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    8218:	4606      	mov	r6, r0
    821a:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    821c:	f017 fdb3 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    8220:	4604      	mov	r4, r0
    8222:	b308      	cbz	r0, 8268 <gatt_write_ccc.constprop.0+0x5c>
	req = net_buf_add(buf, sizeof(*req));
    8224:	f100 0908 	add.w	r9, r0, #8
    8228:	2102      	movs	r1, #2
    822a:	4648      	mov	r0, r9
    822c:	f018 fe1a 	bl	20e64 <net_buf_simple_add>
	net_buf_add_le16(buf, value);
    8230:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    8232:	f8a0 8000 	strh.w	r8, [r0]
	net_buf_add_le16(buf, value);
    8236:	4648      	mov	r0, r9
    8238:	f018 fe2c 	bl	20e94 <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    823c:	f3bf 8f5b 	dmb	ish
    8240:	f105 0310 	add.w	r3, r5, #16
    8244:	e853 2f00 	ldrex	r2, [r3]
    8248:	f042 0204 	orr.w	r2, r2, #4
    824c:	e843 2100 	strex	r1, r2, [r3]
    8250:	2900      	cmp	r1, #0
    8252:	d1f7      	bne.n	8244 <gatt_write_ccc.constprop.0+0x38>
    8254:	f3bf 8f5b 	dmb	ish
	return gatt_send(conn, buf, func, params, NULL);
    8258:	462b      	mov	r3, r5
    825a:	4621      	mov	r1, r4
    825c:	4630      	mov	r0, r6
    825e:	4a04      	ldr	r2, [pc, #16]	; (8270 <gatt_write_ccc.constprop.0+0x64>)
}
    8260:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    8264:	f018 b922 	b.w	204ac <gatt_send.constprop.0>
}
    8268:	f06f 000b 	mvn.w	r0, #11
    826c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8270:	00020437 	.word	0x00020437

00008274 <gatt_indicate>:
{
    8274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8278:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    827a:	8a92      	ldrh	r2, [r2, #20]
{
    827c:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    827e:	3202      	adds	r2, #2
    8280:	211d      	movs	r1, #29
{
    8282:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    8284:	f017 fd7f 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    8288:	4605      	mov	r5, r0
    828a:	b310      	cbz	r0, 82d2 <gatt_indicate+0x5e>
	ind = net_buf_add(buf, sizeof(*ind));
    828c:	f100 0808 	add.w	r8, r0, #8
    8290:	2102      	movs	r1, #2
    8292:	4640      	mov	r0, r8
    8294:	f018 fde6 	bl	20e64 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    8298:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    829a:	8aa1      	ldrh	r1, [r4, #20]
	ind->handle = sys_cpu_to_le16(handle);
    829c:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    82a0:	4640      	mov	r0, r8
    82a2:	f018 fddf 	bl	20e64 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    82a6:	8aa2      	ldrh	r2, [r4, #20]
    82a8:	6921      	ldr	r1, [r4, #16]
    82aa:	4630      	mov	r0, r6
    82ac:	f01e fbcd 	bl	26a4a <memcpy>
	if (!params->func) {
    82b0:	68a3      	ldr	r3, [r4, #8]
    82b2:	b933      	cbnz	r3, 82c2 <gatt_indicate+0x4e>
		err = bt_att_send(conn, buf, NULL, NULL);
    82b4:	4629      	mov	r1, r5
    82b6:	4638      	mov	r0, r7
    82b8:	461a      	mov	r2, r3
}
    82ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		err = bt_att_send(conn, buf, NULL, NULL);
    82be:	f017 be50 	b.w	1ff62 <bt_att_send>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    82c2:	4623      	mov	r3, r4
    82c4:	4629      	mov	r1, r5
    82c6:	4638      	mov	r0, r7
    82c8:	4a04      	ldr	r2, [pc, #16]	; (82dc <gatt_indicate+0x68>)
}
    82ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    82ce:	f018 b8ed 	b.w	204ac <gatt_send.constprop.0>
}
    82d2:	f06f 000b 	mvn.w	r0, #11
    82d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    82da:	bf00      	nop
    82dc:	00020077 	.word	0x00020077

000082e0 <notify_cb>:
{
    82e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    82e2:	4b2e      	ldr	r3, [pc, #184]	; (839c <notify_cb+0xbc>)
{
    82e4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    82e6:	6882      	ldr	r2, [r0, #8]
    82e8:	429a      	cmp	r2, r3
{
    82ea:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    82ec:	d12e      	bne.n	834c <notify_cb+0x6c>
	ccc = attr->user_data;
    82ee:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    82f0:	4b2b      	ldr	r3, [pc, #172]	; (83a0 <notify_cb+0xc0>)
    82f2:	429f      	cmp	r7, r3
    82f4:	d11a      	bne.n	832c <notify_cb+0x4c>
    82f6:	4d2b      	ldr	r5, [pc, #172]	; (83a4 <notify_cb+0xc4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    82f8:	2300      	movs	r3, #0
    82fa:	2207      	movs	r2, #7
    82fc:	4669      	mov	r1, sp
    82fe:	1c68      	adds	r0, r5, #1
    8300:	9300      	str	r3, [sp, #0]
    8302:	f8cd 3003 	str.w	r3, [sp, #3]
    8306:	f01e fb92 	bl	26a2e <memcmp>
    830a:	b178      	cbz	r0, 832c <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    830c:	4629      	mov	r1, r5
    830e:	2207      	movs	r2, #7
    8310:	f811 0b01 	ldrb.w	r0, [r1], #1
    8314:	f7fe fbfa 	bl	6b0c <bt_conn_lookup_state_le>
			if (!conn) {
    8318:	b9d8      	cbnz	r0, 8352 <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
    831a:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    831c:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    831e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    8320:	f811 0b01 	ldrb.w	r0, [r1], #1
    8324:	8853      	ldrh	r3, [r2, #2]
    8326:	8812      	ldrh	r2, [r2, #0]
    8328:	f017 ff4a 	bl	201c0 <sc_save>
		if (cfg->value != data->type) {
    832c:	893a      	ldrh	r2, [r7, #8]
    832e:	89a3      	ldrh	r3, [r4, #12]
    8330:	429a      	cmp	r2, r3
    8332:	d10b      	bne.n	834c <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8334:	4639      	mov	r1, r7
    8336:	f811 0b01 	ldrb.w	r0, [r1], #1
    833a:	f7fe fbcb 	bl	6ad4 <bt_conn_lookup_addr_le>
		if (!conn) {
    833e:	4605      	mov	r5, r0
    8340:	b120      	cbz	r0, 834c <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
    8342:	7a83      	ldrb	r3, [r0, #10]
    8344:	2b07      	cmp	r3, #7
    8346:	d007      	beq.n	8358 <notify_cb+0x78>
			bt_conn_unref(conn);
    8348:	f017 f811 	bl	1f36e <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    834c:	2001      	movs	r0, #1
}
    834e:	b003      	add	sp, #12
    8350:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    8352:	f017 f80c 	bl	1f36e <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    8356:	e7e9      	b.n	832c <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    8358:	697b      	ldr	r3, [r7, #20]
    835a:	b123      	cbz	r3, 8366 <notify_cb+0x86>
    835c:	4631      	mov	r1, r6
    835e:	4798      	blx	r3
    8360:	b908      	cbnz	r0, 8366 <notify_cb+0x86>
			bt_conn_unref(conn);
    8362:	4628      	mov	r0, r5
    8364:	e7f0      	b.n	8348 <notify_cb+0x68>
		if (data->type == BT_GATT_CCC_INDICATE) {
    8366:	89a3      	ldrh	r3, [r4, #12]
    8368:	88a1      	ldrh	r1, [r4, #4]
    836a:	6922      	ldr	r2, [r4, #16]
    836c:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    836e:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    8370:	d110      	bne.n	8394 <notify_cb+0xb4>
			err = gatt_indicate(conn, data->handle,
    8372:	f7ff ff7f 	bl	8274 <gatt_indicate>
			if (err == 0) {
    8376:	4606      	mov	r6, r0
    8378:	b918      	cbnz	r0, 8382 <notify_cb+0xa2>
				data->ind_params->_ref++;
    837a:	6922      	ldr	r2, [r4, #16]
    837c:	7d93      	ldrb	r3, [r2, #22]
    837e:	3301      	adds	r3, #1
    8380:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    8382:	4628      	mov	r0, r5
    8384:	f016 fff3 	bl	1f36e <bt_conn_unref>
		if (err < 0) {
    8388:	2e00      	cmp	r6, #0
    838a:	f04f 0000 	mov.w	r0, #0
    838e:	dbde      	blt.n	834e <notify_cb+0x6e>
		data->err = 0;
    8390:	60a0      	str	r0, [r4, #8]
    8392:	e7db      	b.n	834c <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    8394:	f017 fed9 	bl	2014a <gatt_notify>
    8398:	4606      	mov	r6, r0
    839a:	e7f2      	b.n	8382 <notify_cb+0xa2>
    839c:	00020353 	.word	0x00020353
    83a0:	200003d4 	.word	0x200003d4
    83a4:	20002f20 	.word	0x20002f20

000083a8 <bt_gatt_init>:
{
    83a8:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    83aa:	4b1f      	ldr	r3, [pc, #124]	; (8428 <bt_gatt_init+0x80>)
    83ac:	f3bf 8f5b 	dmb	ish
    83b0:	2201      	movs	r2, #1
    83b2:	e853 1f00 	ldrex	r1, [r3]
    83b6:	2900      	cmp	r1, #0
    83b8:	d103      	bne.n	83c2 <bt_gatt_init+0x1a>
    83ba:	e843 2000 	strex	r0, r2, [r3]
    83be:	2800      	cmp	r0, #0
    83c0:	d1f7      	bne.n	83b2 <bt_gatt_init+0xa>
    83c2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    83c6:	d127      	bne.n	8418 <bt_gatt_init+0x70>
    83c8:	f3bf 8f5b 	dmb	ish
    83cc:	4b17      	ldr	r3, [pc, #92]	; (842c <bt_gatt_init+0x84>)
    83ce:	e853 1f00 	ldrex	r1, [r3]
    83d2:	2900      	cmp	r1, #0
    83d4:	d103      	bne.n	83de <bt_gatt_init+0x36>
    83d6:	e843 2000 	strex	r0, r2, [r3]
    83da:	2800      	cmp	r0, #0
    83dc:	d1f7      	bne.n	83ce <bt_gatt_init+0x26>
    83de:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    83e2:	d108      	bne.n	83f6 <bt_gatt_init+0x4e>
    83e4:	4a12      	ldr	r2, [pc, #72]	; (8430 <bt_gatt_init+0x88>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    83e6:	4913      	ldr	r1, [pc, #76]	; (8434 <bt_gatt_init+0x8c>)
    83e8:	8813      	ldrh	r3, [r2, #0]
    83ea:	4c13      	ldr	r4, [pc, #76]	; (8438 <bt_gatt_init+0x90>)
	if (!atomic_cas(&service_init, 0, 1)) {
    83ec:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    83ee:	42a1      	cmp	r1, r4
    83f0:	d313      	bcc.n	841a <bt_gatt_init+0x72>
    83f2:	b100      	cbz	r0, 83f6 <bt_gatt_init+0x4e>
    83f4:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&gatt_sc.work, sc_process);
    83f6:	4911      	ldr	r1, [pc, #68]	; (843c <bt_gatt_init+0x94>)
    83f8:	4811      	ldr	r0, [pc, #68]	; (8440 <bt_gatt_init+0x98>)
    83fa:	f01e f8ea 	bl	265d2 <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    83fe:	f3bf 8f5b 	dmb	ish
    8402:	4b10      	ldr	r3, [pc, #64]	; (8444 <bt_gatt_init+0x9c>)
    8404:	e853 2f00 	ldrex	r2, [r3]
    8408:	f042 0202 	orr.w	r2, r2, #2
    840c:	e843 2100 	strex	r1, r2, [r3]
    8410:	2900      	cmp	r1, #0
    8412:	d1f7      	bne.n	8404 <bt_gatt_init+0x5c>
    8414:	f3bf 8f5b 	dmb	ish
}
    8418:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    841a:	6848      	ldr	r0, [r1, #4]
    841c:	4403      	add	r3, r0
    841e:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    8420:	3108      	adds	r1, #8
    8422:	2001      	movs	r0, #1
    8424:	e7e3      	b.n	83ee <bt_gatt_init+0x46>
    8426:	bf00      	nop
    8428:	2000187c 	.word	0x2000187c
    842c:	20001898 	.word	0x20001898
    8430:	20002f1e 	.word	0x20002f1e
    8434:	00027160 	.word	0x00027160
    8438:	00027170 	.word	0x00027170
    843c:	00008711 	.word	0x00008711
    8440:	20001138 	.word	0x20001138
    8444:	20001168 	.word	0x20001168

00008448 <read_ppcp>:
{
    8448:	b510      	push	{r4, lr}
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    844a:	f8df c024 	ldr.w	ip, [pc, #36]	; 8470 <read_ppcp+0x28>
{
    844e:	b086      	sub	sp, #24
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    8450:	f44f 1428 	mov.w	r4, #2752512	; 0x2a0000
    8454:	e9cd c404 	strd	ip, r4, [sp, #16]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    8458:	2408      	movs	r4, #8
    845a:	9402      	str	r4, [sp, #8]
    845c:	ac04      	add	r4, sp, #16
    845e:	9401      	str	r4, [sp, #4]
    8460:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    8464:	9400      	str	r4, [sp, #0]
    8466:	f018 f84a 	bl	204fe <bt_gatt_attr_read>
}
    846a:	b006      	add	sp, #24
    846c:	bd10      	pop	{r4, pc}
    846e:	bf00      	nop
    8470:	00280018 	.word	0x00280018

00008474 <bt_gatt_attr_get_handle>:
{
    8474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    8478:	4603      	mov	r3, r0
    847a:	b148      	cbz	r0, 8490 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    847c:	8a00      	ldrh	r0, [r0, #16]
    847e:	b938      	cbnz	r0, 8490 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8480:	4912      	ldr	r1, [pc, #72]	; (84cc <bt_gatt_attr_get_handle+0x58>)
    8482:	f8df e04c 	ldr.w	lr, [pc, #76]	; 84d0 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    8486:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    8488:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    848c:	4571      	cmp	r1, lr
    848e:	d301      	bcc.n	8494 <bt_gatt_attr_get_handle+0x20>
}
    8490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    8494:	e9d1 7600 	ldrd	r7, r6, [r1]
    8498:	42bb      	cmp	r3, r7
    849a:	d304      	bcc.n	84a6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    849c:	fb0c 7206 	mla	r2, ip, r6, r7
    84a0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    84a2:	4293      	cmp	r3, r2
    84a4:	d90e      	bls.n	84c4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    84a6:	19a2      	adds	r2, r4, r6
    84a8:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    84aa:	3108      	adds	r1, #8
    84ac:	4614      	mov	r4, r2
    84ae:	e7ed      	b.n	848c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    84b0:	fb0c 7805 	mla	r8, ip, r5, r7
    84b4:	4543      	cmp	r3, r8
    84b6:	d007      	beq.n	84c8 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    84b8:	3501      	adds	r5, #1
    84ba:	1962      	adds	r2, r4, r5
    84bc:	42b5      	cmp	r5, r6
    84be:	b292      	uxth	r2, r2
    84c0:	d1f6      	bne.n	84b0 <bt_gatt_attr_get_handle+0x3c>
    84c2:	e7f2      	b.n	84aa <bt_gatt_attr_get_handle+0x36>
    84c4:	2500      	movs	r5, #0
    84c6:	e7f8      	b.n	84ba <bt_gatt_attr_get_handle+0x46>
    84c8:	4610      	mov	r0, r2
    84ca:	e7e1      	b.n	8490 <bt_gatt_attr_get_handle+0x1c>
    84cc:	00027160 	.word	0x00027160
    84d0:	00027170 	.word	0x00027170

000084d4 <bt_gatt_foreach_attr_type>:
{
    84d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84d8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    84dc:	9100      	str	r1, [sp, #0]
    84de:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    84e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    84e4:	2d00      	cmp	r5, #0
    84e6:	bf08      	it	eq
    84e8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    84ea:	4b24      	ldr	r3, [pc, #144]	; (857c <bt_gatt_foreach_attr_type+0xa8>)
    84ec:	881b      	ldrh	r3, [r3, #0]
    84ee:	4283      	cmp	r3, r0
{
    84f0:	4607      	mov	r7, r0
    84f2:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    84f4:	d23c      	bcs.n	8570 <bt_gatt_foreach_attr_type+0x9c>
}
    84f6:	b003      	add	sp, #12
    84f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    84fc:	6873      	ldr	r3, [r6, #4]
    84fe:	4423      	add	r3, r4
    8500:	42bb      	cmp	r3, r7
    8502:	d232      	bcs.n	856a <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    8504:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8506:	3608      	adds	r6, #8
    8508:	4b1d      	ldr	r3, [pc, #116]	; (8580 <bt_gatt_foreach_attr_type+0xac>)
    850a:	429e      	cmp	r6, r3
    850c:	d3f6      	bcc.n	84fc <bt_gatt_foreach_attr_type+0x28>
    850e:	e7f2      	b.n	84f6 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    8510:	5889      	ldr	r1, [r1, r2]
    8512:	9301      	str	r3, [sp, #4]
    8514:	4640      	mov	r0, r8
    8516:	f016 fad0 	bl	1eaba <bt_uuid_cmp>
    851a:	9b01      	ldr	r3, [sp, #4]
    851c:	b190      	cbz	r0, 8544 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    851e:	3401      	adds	r4, #1
    8520:	f10a 0a01 	add.w	sl, sl, #1
    8524:	b2a4      	uxth	r4, r4
    8526:	6873      	ldr	r3, [r6, #4]
    8528:	4553      	cmp	r3, sl
    852a:	d9ec      	bls.n	8506 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    852c:	9b00      	ldr	r3, [sp, #0]
    852e:	429c      	cmp	r4, r3
    8530:	d8e1      	bhi.n	84f6 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    8532:	42bc      	cmp	r4, r7
    8534:	d3f3      	bcc.n	851e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    8536:	6831      	ldr	r1, [r6, #0]
    8538:	fb0b f20a 	mul.w	r2, fp, sl
    853c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    853e:	f1b8 0f00 	cmp.w	r8, #0
    8542:	d1e5      	bne.n	8510 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    8544:	f1b9 0f00 	cmp.w	r9, #0
    8548:	d10b      	bne.n	8562 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    854a:	3d01      	subs	r5, #1
    854c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    854e:	4618      	mov	r0, r3
    8550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8554:	4621      	mov	r1, r4
    8556:	4798      	blx	r3
	if (!*num_matches) {
    8558:	2d00      	cmp	r5, #0
    855a:	d0cc      	beq.n	84f6 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    855c:	2800      	cmp	r0, #0
    855e:	d1de      	bne.n	851e <bt_gatt_foreach_attr_type+0x4a>
    8560:	e7c9      	b.n	84f6 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    8562:	68da      	ldr	r2, [r3, #12]
    8564:	4591      	cmp	r9, r2
    8566:	d1da      	bne.n	851e <bt_gatt_foreach_attr_type+0x4a>
    8568:	e7ef      	b.n	854a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    856a:	f04f 0a00 	mov.w	sl, #0
    856e:	e7da      	b.n	8526 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8570:	4e04      	ldr	r6, [pc, #16]	; (8584 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    8572:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    8574:	f04f 0b14 	mov.w	fp, #20
    8578:	e7c6      	b.n	8508 <bt_gatt_foreach_attr_type+0x34>
    857a:	bf00      	nop
    857c:	20002f1e 	.word	0x20002f1e
    8580:	00027170 	.word	0x00027170
    8584:	00027160 	.word	0x00027160

00008588 <ccc_set_direct>:
{
    8588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    858c:	b0b8      	sub	sp, #224	; 0xe0
    858e:	460f      	mov	r7, r1
    8590:	4615      	mov	r5, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    8592:	4920      	ldr	r1, [pc, #128]	; (8614 <ccc_set_direct+0x8c>)
    8594:	983e      	ldr	r0, [sp, #248]	; 0xf8
    8596:	466a      	mov	r2, sp
{
    8598:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    859a:	f015 ff1e 	bl	1e3da <settings_name_steq>
    859e:	2800      	cmp	r0, #0
    85a0:	d035      	beq.n	860e <ccc_set_direct+0x86>
		return ccc_set(name, len, read_cb, cb_arg);
    85a2:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
    85a4:	a901      	add	r1, sp, #4
    85a6:	4620      	mov	r0, r4
    85a8:	f015 ff3a 	bl	1e420 <settings_name_next>
		if (!name) {
    85ac:	b35c      	cbz	r4, 8606 <ccc_set_direct+0x7e>
		} else if (!next) {
    85ae:	9801      	ldr	r0, [sp, #4]
    85b0:	bb08      	cbnz	r0, 85f6 <ccc_set_direct+0x6e>
		err = bt_settings_decode_key(name, &addr);
    85b2:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    85b6:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    85ba:	4641      	mov	r1, r8
    85bc:	4620      	mov	r0, r4
    85be:	f016 fa56 	bl	1ea6e <bt_settings_decode_key>
		if (err) {
    85c2:	4604      	mov	r4, r0
    85c4:	b9f8      	cbnz	r0, 8606 <ccc_set_direct+0x7e>
		load.addr_with_id.addr = &addr;
    85c6:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
    85ca:	b1cf      	cbz	r7, 8600 <ccc_set_direct+0x78>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    85cc:	af08      	add	r7, sp, #32
    85ce:	22c0      	movs	r2, #192	; 0xc0
    85d0:	4639      	mov	r1, r7
    85d2:	4630      	mov	r0, r6
    85d4:	47a8      	blx	r5
			if (len < 0) {
    85d6:	2800      	cmp	r0, #0
    85d8:	db17      	blt.n	860a <ccc_set_direct+0x82>
			load.count = len / sizeof(*ccc_store);
    85da:	0880      	lsrs	r0, r0, #2
			load.entry = ccc_store;
    85dc:	9706      	str	r7, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    85de:	9007      	str	r0, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    85e0:	4a0d      	ldr	r2, [pc, #52]	; (8618 <ccc_set_direct+0x90>)
    85e2:	ab04      	add	r3, sp, #16
    85e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    85e8:	2001      	movs	r0, #1
    85ea:	f018 f84f 	bl	2068c <bt_gatt_foreach_attr>
}
    85ee:	4620      	mov	r0, r4
    85f0:	b038      	add	sp, #224	; 0xe0
    85f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			load.addr_with_id.id = strtol(next, NULL, 10);
    85f6:	220a      	movs	r2, #10
    85f8:	2100      	movs	r1, #0
    85fa:	f014 fa11 	bl	1ca20 <strtol>
    85fe:	e7d8      	b.n	85b2 <ccc_set_direct+0x2a>
			load.count = 0;
    8600:	e9cd 0006 	strd	r0, r0, [sp, #24]
    8604:	e7ec      	b.n	85e0 <ccc_set_direct+0x58>
			return -EINVAL;
    8606:	f06f 0015 	mvn.w	r0, #21
    860a:	4604      	mov	r4, r0
    860c:	e7ef      	b.n	85ee <ccc_set_direct+0x66>
			return -EINVAL;
    860e:	f06f 0415 	mvn.w	r4, #21
    8612:	e7ec      	b.n	85ee <ccc_set_direct+0x66>
    8614:	00028ab2 	.word	0x00028ab2
    8618:	00008095 	.word	0x00008095

0000861c <bt_gatt_indicate>:
{
    861c:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    861e:	4b39      	ldr	r3, [pc, #228]	; (8704 <bt_gatt_indicate+0xe8>)
    8620:	f3bf 8f5b 	dmb	ish
    8624:	681b      	ldr	r3, [r3, #0]
    8626:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    862a:	079a      	lsls	r2, r3, #30
{
    862c:	b08b      	sub	sp, #44	; 0x2c
    862e:	4604      	mov	r4, r0
    8630:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8632:	d561      	bpl.n	86f8 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    8634:	6848      	ldr	r0, [r1, #4]
    8636:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    8638:	b114      	cbz	r4, 8640 <bt_gatt_indicate+0x24>
    863a:	7aa3      	ldrb	r3, [r4, #10]
    863c:	2b07      	cmp	r3, #7
    863e:	d15e      	bne.n	86fe <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    8640:	f7ff ff18 	bl	8474 <bt_gatt_attr_get_handle>
    8644:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    8648:	b918      	cbnz	r0, 8652 <bt_gatt_indicate+0x36>
		return -ENOENT;
    864a:	f06f 0001 	mvn.w	r0, #1
}
    864e:	b00b      	add	sp, #44	; 0x2c
    8650:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    8652:	682a      	ldr	r2, [r5, #0]
    8654:	b9ba      	cbnz	r2, 8686 <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    8656:	9b05      	ldr	r3, [sp, #20]
    8658:	6818      	ldr	r0, [r3, #0]
    865a:	2300      	movs	r3, #0
    865c:	f88d 3010 	strb.w	r3, [sp, #16]
    8660:	a904      	add	r1, sp, #16
    8662:	f642 0303 	movw	r3, #10243	; 0x2803
    8666:	f8ad 3012 	strh.w	r3, [sp, #18]
    866a:	f016 fa26 	bl	1eaba <bt_uuid_cmp>
    866e:	b1d0      	cbz	r0, 86a6 <bt_gatt_indicate+0x8a>
	if (conn) {
    8670:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    8674:	b324      	cbz	r4, 86c0 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    8676:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    8678:	4601      	mov	r1, r0
		params->_ref = 1;
    867a:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    867c:	462a      	mov	r2, r5
    867e:	4620      	mov	r0, r4
    8680:	f7ff fdf8 	bl	8274 <gatt_indicate>
    8684:	e7e3      	b.n	864e <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8686:	a905      	add	r1, sp, #20
    8688:	9102      	str	r1, [sp, #8]
    868a:	491f      	ldr	r1, [pc, #124]	; (8708 <bt_gatt_indicate+0xec>)
    868c:	9101      	str	r1, [sp, #4]
    868e:	2101      	movs	r1, #1
	found->attr = NULL;
    8690:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8692:	9100      	str	r1, [sp, #0]
    8694:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    8698:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    869a:	f7ff ff1b 	bl	84d4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    869e:	9b05      	ldr	r3, [sp, #20]
    86a0:	2b00      	cmp	r3, #0
    86a2:	d1d8      	bne.n	8656 <bt_gatt_indicate+0x3a>
    86a4:	e7d1      	b.n	864a <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    86a6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    86a8:	68c3      	ldr	r3, [r0, #12]
    86aa:	799b      	ldrb	r3, [r3, #6]
    86ac:	069b      	lsls	r3, r3, #26
    86ae:	d402      	bmi.n	86b6 <bt_gatt_indicate+0x9a>
			return -EINVAL;
    86b0:	f06f 0015 	mvn.w	r0, #21
    86b4:	e7cb      	b.n	864e <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    86b6:	f017 ff9a 	bl	205ee <bt_gatt_attr_value_handle>
    86ba:	f8ad 0018 	strh.w	r0, [sp, #24]
    86be:	e7d7      	b.n	8670 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    86c0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    86c4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    86c6:	2302      	movs	r3, #2
    86c8:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    86cc:	f642 1302 	movw	r3, #10498	; 0x2902
    86d0:	f8ad 3012 	strh.w	r3, [sp, #18]
    86d4:	ab05      	add	r3, sp, #20
    86d6:	9302      	str	r3, [sp, #8]
    86d8:	4b0c      	ldr	r3, [pc, #48]	; (870c <bt_gatt_indicate+0xf0>)
    86da:	9301      	str	r3, [sp, #4]
    86dc:	2301      	movs	r3, #1
    86de:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    86e0:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    86e2:	4623      	mov	r3, r4
    86e4:	aa04      	add	r2, sp, #16
    86e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    86ea:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    86ec:	f88d 4010 	strb.w	r4, [sp, #16]
    86f0:	f7ff fef0 	bl	84d4 <bt_gatt_foreach_attr_type>
	return data.err;
    86f4:	9807      	ldr	r0, [sp, #28]
    86f6:	e7aa      	b.n	864e <bt_gatt_indicate+0x32>
		return -EAGAIN;
    86f8:	f06f 000a 	mvn.w	r0, #10
    86fc:	e7a7      	b.n	864e <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    86fe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8702:	e7a4      	b.n	864e <bt_gatt_indicate+0x32>
    8704:	20000098 	.word	0x20000098
    8708:	0002009b 	.word	0x0002009b
    870c:	000082e1 	.word	0x000082e1

00008710 <sc_process>:
{
    8710:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    8712:	f850 2c08 	ldr.w	r2, [r0, #-8]
    8716:	9201      	str	r2, [sp, #4]
{
    8718:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    871a:	f1a0 0120 	sub.w	r1, r0, #32
    871e:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8722:	f3bf 8f5b 	dmb	ish
    8726:	e854 2f00 	ldrex	r2, [r4]
    872a:	f022 0201 	bic.w	r2, r2, #1
    872e:	e844 2000 	strex	r0, r2, [r4]
    8732:	2800      	cmp	r0, #0
    8734:	d1f7      	bne.n	8726 <sc_process+0x16>
    8736:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    873a:	4a11      	ldr	r2, [pc, #68]	; (8780 <sc_process+0x70>)
    873c:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    8740:	4a10      	ldr	r2, [pc, #64]	; (8784 <sc_process+0x74>)
    8742:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    8746:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    8748:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    874a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    874e:	2204      	movs	r2, #4
	sc->start = 0U;
    8750:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    8754:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    8758:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    875c:	f7ff ff5e 	bl	861c <bt_gatt_indicate>
    8760:	b958      	cbnz	r0, 877a <sc_process+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8762:	f3bf 8f5b 	dmb	ish
    8766:	e854 3f00 	ldrex	r3, [r4]
    876a:	f043 0302 	orr.w	r3, r3, #2
    876e:	e844 3200 	strex	r2, r3, [r4]
    8772:	2a00      	cmp	r2, #0
    8774:	d1f7      	bne.n	8766 <sc_process+0x56>
    8776:	f3bf 8f5b 	dmb	ish
}
    877a:	b002      	add	sp, #8
    877c:	bd10      	pop	{r4, pc}
    877e:	bf00      	nop
    8780:	000274dc 	.word	0x000274dc
    8784:	000081c9 	.word	0x000081c9

00008788 <update_ccc>:
{
    8788:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    878a:	4b27      	ldr	r3, [pc, #156]	; (8828 <update_ccc+0xa0>)
	struct bt_conn *conn = data->conn;
    878c:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    878e:	6882      	ldr	r2, [r0, #8]
    8790:	429a      	cmp	r2, r3
{
    8792:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    8794:	d145      	bne.n	8822 <update_ccc+0x9a>
	ccc = attr->user_data;
    8796:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    8798:	8933      	ldrh	r3, [r6, #8]
    879a:	2b00      	cmp	r3, #0
    879c:	d041      	beq.n	8822 <update_ccc+0x9a>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    879e:	4632      	mov	r2, r6
    87a0:	4628      	mov	r0, r5
    87a2:	f812 1b01 	ldrb.w	r1, [r2], #1
    87a6:	f016 fdc2 	bl	1f32e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    87aa:	2800      	cmp	r0, #0
    87ac:	d039      	beq.n	8822 <update_ccc+0x9a>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    87ae:	222a      	movs	r2, #42	; 0x2a
    87b0:	4621      	mov	r1, r4
    87b2:	4628      	mov	r0, r5
    87b4:	f017 ff75 	bl	206a2 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    87b8:	2803      	cmp	r0, #3
    87ba:	d032      	beq.n	8822 <update_ccc+0x9a>
		gatt_ccc_changed(attr, ccc);
    87bc:	4631      	mov	r1, r6
    87be:	4620      	mov	r0, r4
    87c0:	f017 fc4f 	bl	20062 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    87c4:	4b19      	ldr	r3, [pc, #100]	; (882c <update_ccc+0xa4>)
    87c6:	429e      	cmp	r6, r3
    87c8:	d12b      	bne.n	8822 <update_ccc+0x9a>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    87ca:	7a28      	ldrb	r0, [r5, #8]
    87cc:	f105 0188 	add.w	r1, r5, #136	; 0x88
    87d0:	f7ff fbca 	bl	7f68 <find_sc_cfg>
	if (!cfg) {
    87d4:	4604      	mov	r4, r0
    87d6:	b320      	cbz	r0, 8822 <update_ccc+0x9a>
	if (!(cfg->data.start || cfg->data.end)) {
    87d8:	8902      	ldrh	r2, [r0, #8]
    87da:	8943      	ldrh	r3, [r0, #10]
    87dc:	ea53 0102 	orrs.w	r1, r3, r2
    87e0:	d01f      	beq.n	8822 <update_ccc+0x9a>
	index = bt_conn_index(conn);
    87e2:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    87e4:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    87e8:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    87ec:	f7fe fba8 	bl	6f40 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    87f0:	490f      	ldr	r1, [pc, #60]	; (8830 <update_ccc+0xa8>)
    87f2:	4a10      	ldr	r2, [pc, #64]	; (8834 <update_ccc+0xac>)
    87f4:	2318      	movs	r3, #24
    87f6:	fb03 1300 	mla	r3, r3, r0, r1
    87fa:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    87fc:	4a0e      	ldr	r2, [pc, #56]	; (8838 <update_ccc+0xb0>)
    87fe:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    8800:	aa01      	add	r2, sp, #4
    8802:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    8804:	2204      	movs	r2, #4
    8806:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    8808:	b203      	sxth	r3, r0
    880a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    880e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    8812:	4628      	mov	r0, r5
    8814:	f7ff ff02 	bl	861c <bt_gatt_indicate>
__ssp_bos_icheck3(memset, void *, int)
    8818:	2300      	movs	r3, #0
    881a:	60a3      	str	r3, [r4, #8]
		sc_store(cfg);
    881c:	4620      	mov	r0, r4
    881e:	f7ff fb83 	bl	7f28 <sc_store>
}
    8822:	2001      	movs	r0, #1
    8824:	b002      	add	sp, #8
    8826:	bd70      	pop	{r4, r5, r6, pc}
    8828:	00020353 	.word	0x00020353
    882c:	200003d4 	.word	0x200003d4
    8830:	20001880 	.word	0x20001880
    8834:	000274dc 	.word	0x000274dc
    8838:	000200a3 	.word	0x000200a3

0000883c <bt_gatt_discover>:
{
    883c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    883e:	7a83      	ldrb	r3, [r0, #10]
    8840:	2b07      	cmp	r3, #7
{
    8842:	b085      	sub	sp, #20
    8844:	4605      	mov	r5, r0
    8846:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    8848:	f040 80c5 	bne.w	89d6 <bt_gatt_discover+0x19a>
	switch (params->type) {
    884c:	7c0b      	ldrb	r3, [r1, #16]
    884e:	2b05      	cmp	r3, #5
    8850:	d82a      	bhi.n	88a8 <bt_gatt_discover+0x6c>
    8852:	e8df f003 	tbb	[pc, r3]
    8856:	0303      	.short	0x0303
    8858:	ac795b5b 	.word	0xac795b5b
		if (params->uuid) {
    885c:	680b      	ldr	r3, [r1, #0]
    885e:	b3bb      	cbz	r3, 88d0 <bt_gatt_discover+0x94>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    8860:	2206      	movs	r2, #6
    8862:	4611      	mov	r1, r2
    8864:	f017 fa8f 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    8868:	4606      	mov	r6, r0
    886a:	b918      	cbnz	r0, 8874 <bt_gatt_discover+0x38>
		return -ENOMEM;
    886c:	f06f 000b 	mvn.w	r0, #11
}
    8870:	b005      	add	sp, #20
    8872:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req = net_buf_add(buf, sizeof(*req));
    8874:	f100 0708 	add.w	r7, r0, #8
    8878:	2106      	movs	r1, #6
    887a:	4638      	mov	r0, r7
    887c:	f018 faf2 	bl	20e64 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    8880:	8923      	ldrh	r3, [r4, #8]
    8882:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    8884:	89e3      	ldrh	r3, [r4, #14]
    8886:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    8888:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
    888a:	6821      	ldr	r1, [r4, #0]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
    888c:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
    888e:	f642 0301 	movw	r3, #10241	; 0x2801
    8892:	bf08      	it	eq
    8894:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    8898:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    889a:	780b      	ldrb	r3, [r1, #0]
    889c:	b13b      	cbz	r3, 88ae <bt_gatt_discover+0x72>
    889e:	2b02      	cmp	r3, #2
    88a0:	d010      	beq.n	88c4 <bt_gatt_discover+0x88>
		net_buf_unref(buf);
    88a2:	4630      	mov	r0, r6
    88a4:	f00b ff60 	bl	14768 <net_buf_unref>
	switch (params->type) {
    88a8:	f06f 0015 	mvn.w	r0, #21
    88ac:	e7e0      	b.n	8870 <bt_gatt_discover+0x34>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
    88ae:	8849      	ldrh	r1, [r1, #2]
    88b0:	4638      	mov	r0, r7
    88b2:	f018 faef 	bl	20e94 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    88b6:	4a49      	ldr	r2, [pc, #292]	; (89dc <bt_gatt_discover+0x1a0>)
    88b8:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    88ba:	4631      	mov	r1, r6
    88bc:	4628      	mov	r0, r5
    88be:	f017 fdf5 	bl	204ac <gatt_send.constprop.0>
    88c2:	e7d5      	b.n	8870 <bt_gatt_discover+0x34>
		net_buf_add_mem(buf, BT_UUID_128(params->uuid)->val, 16);
    88c4:	2210      	movs	r2, #16
    88c6:	3101      	adds	r1, #1
    88c8:	4638      	mov	r0, r7
    88ca:	f018 fad1 	bl	20e70 <net_buf_simple_add_mem>
		break;
    88ce:	e7f2      	b.n	88b6 <bt_gatt_discover+0x7a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    88d0:	2204      	movs	r2, #4
    88d2:	2110      	movs	r1, #16
    88d4:	f017 fa57 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    88d8:	4606      	mov	r6, r0
    88da:	2800      	cmp	r0, #0
    88dc:	d0c6      	beq.n	886c <bt_gatt_discover+0x30>
	req = net_buf_add(buf, sizeof(*req));
    88de:	f100 0708 	add.w	r7, r0, #8
    88e2:	2104      	movs	r1, #4
    88e4:	4638      	mov	r0, r7
    88e6:	f018 fabd 	bl	20e64 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    88ea:	8923      	ldrh	r3, [r4, #8]
    88ec:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    88ee:	89e3      	ldrh	r3, [r4, #14]
    88f0:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    88f2:	7c23      	ldrb	r3, [r4, #16]
    88f4:	b93b      	cbnz	r3, 8906 <bt_gatt_discover+0xca>
		net_buf_add_le16(buf, BT_UUID_GATT_PRIMARY_VAL);
    88f6:	f44f 5120 	mov.w	r1, #10240	; 0x2800
		net_buf_add_le16(buf, BT_UUID_GATT_SECONDARY_VAL);
    88fa:	4638      	mov	r0, r7
    88fc:	f018 faca 	bl	20e94 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    8900:	4a37      	ldr	r2, [pc, #220]	; (89e0 <bt_gatt_discover+0x1a4>)
    8902:	4623      	mov	r3, r4
    8904:	e7d9      	b.n	88ba <bt_gatt_discover+0x7e>
		net_buf_add_le16(buf, BT_UUID_GATT_SECONDARY_VAL);
    8906:	f642 0101 	movw	r1, #10241	; 0x2801
    890a:	e7f6      	b.n	88fa <bt_gatt_discover+0xbe>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    890c:	2204      	movs	r2, #4
    890e:	2108      	movs	r1, #8
    8910:	f017 fa39 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    8914:	4606      	mov	r6, r0
    8916:	2800      	cmp	r0, #0
    8918:	d0a8      	beq.n	886c <bt_gatt_discover+0x30>
	req = net_buf_add(buf, sizeof(*req));
    891a:	f100 0708 	add.w	r7, r0, #8
    891e:	2104      	movs	r1, #4
    8920:	4638      	mov	r0, r7
    8922:	f018 fa9f 	bl	20e64 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    8926:	8923      	ldrh	r3, [r4, #8]
    8928:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    892a:	89e3      	ldrh	r3, [r4, #14]
    892c:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    892e:	7c23      	ldrb	r3, [r4, #16]
    8930:	2b02      	cmp	r3, #2
		net_buf_add_le16(buf, BT_UUID_GATT_INCLUDE_VAL);
    8932:	bf0c      	ite	eq
    8934:	f642 0102 	movweq	r1, #10242	; 0x2802
		net_buf_add_le16(buf, BT_UUID_GATT_CHRC_VAL);
    8938:	f642 0103 	movwne	r1, #10243	; 0x2803
    893c:	4638      	mov	r0, r7
    893e:	f018 faa9 	bl	20e94 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    8942:	4a28      	ldr	r2, [pc, #160]	; (89e4 <bt_gatt_discover+0x1a8>)
    8944:	4623      	mov	r3, r4
    8946:	e7b8      	b.n	88ba <bt_gatt_discover+0x7e>
		if (params->uuid &&
    8948:	6808      	ldr	r0, [r1, #0]
    894a:	b380      	cbz	r0, 89ae <bt_gatt_discover+0x172>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    894c:	2600      	movs	r6, #0
    894e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8952:	4669      	mov	r1, sp
    8954:	f88d 6000 	strb.w	r6, [sp]
    8958:	f8ad 3002 	strh.w	r3, [sp, #2]
    895c:	f016 f8ad 	bl	1eaba <bt_uuid_cmp>
		if (params->uuid &&
    8960:	2800      	cmp	r0, #0
    8962:	d0a1      	beq.n	88a8 <bt_gatt_discover+0x6c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    8964:	f642 0301 	movw	r3, #10241	; 0x2801
    8968:	6820      	ldr	r0, [r4, #0]
    896a:	f88d 6004 	strb.w	r6, [sp, #4]
    896e:	a901      	add	r1, sp, #4
    8970:	f8ad 3006 	strh.w	r3, [sp, #6]
    8974:	f016 f8a1 	bl	1eaba <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    8978:	2800      	cmp	r0, #0
    897a:	d095      	beq.n	88a8 <bt_gatt_discover+0x6c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    897c:	f642 0302 	movw	r3, #10242	; 0x2802
    8980:	6820      	ldr	r0, [r4, #0]
    8982:	f88d 6008 	strb.w	r6, [sp, #8]
    8986:	a902      	add	r1, sp, #8
    8988:	f8ad 300a 	strh.w	r3, [sp, #10]
    898c:	f016 f895 	bl	1eaba <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    8990:	2800      	cmp	r0, #0
    8992:	d089      	beq.n	88a8 <bt_gatt_discover+0x6c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    8994:	f642 0303 	movw	r3, #10243	; 0x2803
    8998:	6820      	ldr	r0, [r4, #0]
    899a:	f88d 600c 	strb.w	r6, [sp, #12]
    899e:	a903      	add	r1, sp, #12
    89a0:	f8ad 300e 	strh.w	r3, [sp, #14]
    89a4:	f016 f889 	bl	1eaba <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    89a8:	2800      	cmp	r0, #0
    89aa:	f43f af7d 	beq.w	88a8 <bt_gatt_discover+0x6c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    89ae:	2204      	movs	r2, #4
    89b0:	4611      	mov	r1, r2
    89b2:	4628      	mov	r0, r5
    89b4:	f017 f9e7 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    89b8:	4606      	mov	r6, r0
    89ba:	2800      	cmp	r0, #0
    89bc:	f43f af56 	beq.w	886c <bt_gatt_discover+0x30>
	req = net_buf_add(buf, sizeof(*req));
    89c0:	2104      	movs	r1, #4
    89c2:	3008      	adds	r0, #8
    89c4:	f018 fa4e 	bl	20e64 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    89c8:	8923      	ldrh	r3, [r4, #8]
    89ca:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    89cc:	89e3      	ldrh	r3, [r4, #14]
    89ce:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    89d0:	4a05      	ldr	r2, [pc, #20]	; (89e8 <bt_gatt_discover+0x1ac>)
    89d2:	4623      	mov	r3, r4
    89d4:	e771      	b.n	88ba <bt_gatt_discover+0x7e>
		return -ENOTCONN;
    89d6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    89da:	e749      	b.n	8870 <bt_gatt_discover+0x34>
    89dc:	00020723 	.word	0x00020723
    89e0:	000207b9 	.word	0x000207b9
    89e4:	000089ed 	.word	0x000089ed
    89e8:	00020945 	.word	0x00020945

000089ec <gatt_read_type_rsp>:
{
    89ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89f0:	b091      	sub	sp, #68	; 0x44
    89f2:	4607      	mov	r7, r0
    89f4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    89f6:	4690      	mov	r8, r2
	if (err) {
    89f8:	b121      	cbz	r1, 8a04 <gatt_read_type_rsp+0x18>
		params->func(conn, NULL, params);
    89fa:	686b      	ldr	r3, [r5, #4]
    89fc:	462a      	mov	r2, r5
    89fe:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    8a00:	4798      	blx	r3
	if (!handle) {
    8a02:	e06b      	b.n	8adc <gatt_read_type_rsp+0xf0>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    8a04:	7c28      	ldrb	r0, [r5, #16]
    8a06:	7812      	ldrb	r2, [r2, #0]
    8a08:	2802      	cmp	r0, #2
    8a0a:	f040 8086 	bne.w	8b1a <gatt_read_type_rsp+0x12e>
	switch (rsp->len) {
    8a0e:	2a06      	cmp	r2, #6
    8a10:	d018      	beq.n	8a44 <gatt_read_type_rsp+0x58>
    8a12:	2a08      	cmp	r2, #8
    8a14:	d111      	bne.n	8a3a <gatt_read_type_rsp+0x4e>
		u.uuid.type = BT_UUID_TYPE_16;
    8a16:	f88d 1018 	strb.w	r1, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    8a1a:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    8a1c:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    8a1e:	b2a4      	uxth	r4, r4
    8a20:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
    8a24:	f10d 0a18 	add.w	sl, sp, #24
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    8a28:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    8a2a:	f898 3000 	ldrb.w	r3, [r8]
    8a2e:	42a3      	cmp	r3, r4
    8a30:	d90b      	bls.n	8a4a <gatt_read_type_rsp+0x5e>
	if (length == 0U && handle) {
    8a32:	b914      	cbnz	r4, 8a3a <gatt_read_type_rsp+0x4e>
    8a34:	2e00      	cmp	r6, #0
    8a36:	f040 80d9 	bne.w	8bec <gatt_read_type_rsp+0x200>
	params->func(conn, NULL, params);
    8a3a:	686b      	ldr	r3, [r5, #4]
    8a3c:	462a      	mov	r2, r5
    8a3e:	2100      	movs	r1, #0
    8a40:	4638      	mov	r0, r7
    8a42:	e7dd      	b.n	8a00 <gatt_read_type_rsp+0x14>
		u.uuid.type = BT_UUID_TYPE_128;
    8a44:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
    8a48:	e7e7      	b.n	8a1a <gatt_read_type_rsp+0x2e>
		handle = sys_le16_to_cpu(data->handle);
    8a4a:	f8b9 3000 	ldrh.w	r3, [r9]
    8a4e:	b29e      	uxth	r6, r3
		if (!handle) {
    8a50:	2e00      	cmp	r6, #0
    8a52:	d0f2      	beq.n	8a3a <gatt_read_type_rsp+0x4e>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    8a54:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    8a58:	f8ad 2014 	strh.w	r2, [sp, #20]
    8a5c:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    8a5e:	f8b9 2004 	ldrh.w	r2, [r9, #4]
    8a62:	f8ad 2016 	strh.w	r2, [sp, #22]
    8a66:	b291      	uxth	r1, r2
		switch (u.uuid.type) {
    8a68:	f89d 2018 	ldrb.w	r2, [sp, #24]
    8a6c:	b182      	cbz	r2, 8a90 <gatt_read_type_rsp+0xa4>
    8a6e:	2a02      	cmp	r2, #2
    8a70:	d019      	beq.n	8aa6 <gatt_read_type_rsp+0xba>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    8a72:	6829      	ldr	r1, [r5, #0]
    8a74:	2900      	cmp	r1, #0
    8a76:	d037      	beq.n	8ae8 <gatt_read_type_rsp+0xfc>
    8a78:	4650      	mov	r0, sl
    8a7a:	9301      	str	r3, [sp, #4]
    8a7c:	f016 f81d 	bl	1eaba <bt_uuid_cmp>
    8a80:	9b01      	ldr	r3, [sp, #4]
    8a82:	b388      	cbz	r0, 8ae8 <gatt_read_type_rsp+0xfc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    8a84:	f898 2000 	ldrb.w	r2, [r8]
    8a88:	1aa4      	subs	r4, r4, r2
    8a8a:	b2a4      	uxth	r4, r4
    8a8c:	4491      	add	r9, r2
    8a8e:	e7cc      	b.n	8a2a <gatt_read_type_rsp+0x3e>
			value.uuid = &u.uuid;
    8a90:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    8a94:	f899 2006 	ldrb.w	r2, [r9, #6]
    8a98:	f899 1007 	ldrb.w	r1, [r9, #7]
    8a9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8aa0:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
    8aa4:	e7e5      	b.n	8a72 <gatt_read_type_rsp+0x86>
			params->_included.start_handle = value.start_handle;
    8aa6:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
    8aa8:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
    8aaa:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    8aac:	210a      	movs	r1, #10
    8aae:	4638      	mov	r0, r7
    8ab0:	9201      	str	r2, [sp, #4]
    8ab2:	f017 f968 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    8ab6:	4604      	mov	r4, r0
    8ab8:	b198      	cbz	r0, 8ae2 <gatt_read_type_rsp+0xf6>
	req = net_buf_add(buf, sizeof(*req));
    8aba:	9a01      	ldr	r2, [sp, #4]
    8abc:	3008      	adds	r0, #8
    8abe:	4611      	mov	r1, r2
    8ac0:	f018 f9d0 	bl	20e64 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    8ac4:	896b      	ldrh	r3, [r5, #10]
    8ac6:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    8ac8:	4a4b      	ldr	r2, [pc, #300]	; (8bf8 <gatt_read_type_rsp+0x20c>)
    8aca:	462b      	mov	r3, r5
    8acc:	4621      	mov	r1, r4
    8ace:	4638      	mov	r0, r7
    8ad0:	f017 fcec 	bl	204ac <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
    8ad4:	b286      	uxth	r6, r0
	if (!handle) {
    8ad6:	2e00      	cmp	r6, #0
    8ad8:	f040 8088 	bne.w	8bec <gatt_read_type_rsp+0x200>
}
    8adc:	b011      	add	sp, #68	; 0x44
    8ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    8ae2:	f06f 000b 	mvn.w	r0, #11
    8ae6:	e7f5      	b.n	8ad4 <gatt_read_type_rsp+0xe8>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    8ae8:	f642 0202 	movw	r2, #10242	; 0x2802
    8aec:	f8ad 200e 	strh.w	r2, [sp, #14]
    8af0:	aa03      	add	r2, sp, #12
    8af2:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
    8af6:	aa04      	add	r2, sp, #16
    8af8:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
    8afa:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    8afe:	f88d b00c 	strb.w	fp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    8b02:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    8b04:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    8b08:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    8b0c:	462a      	mov	r2, r5
    8b0e:	a90b      	add	r1, sp, #44	; 0x2c
    8b10:	4638      	mov	r0, r7
    8b12:	4798      	blx	r3
    8b14:	2800      	cmp	r0, #0
    8b16:	d1b5      	bne.n	8a84 <gatt_read_type_rsp+0x98>
    8b18:	e7e0      	b.n	8adc <gatt_read_type_rsp+0xf0>
	switch (rsp->len) {
    8b1a:	2a07      	cmp	r2, #7
    8b1c:	d005      	beq.n	8b2a <gatt_read_type_rsp+0x13e>
    8b1e:	2a15      	cmp	r2, #21
    8b20:	d18b      	bne.n	8a3a <gatt_read_type_rsp+0x4e>
		u.uuid.type = BT_UUID_TYPE_128;
    8b22:	2202      	movs	r2, #2
    8b24:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
    8b28:	e001      	b.n	8b2e <gatt_read_type_rsp+0x142>
		u.uuid.type = BT_UUID_TYPE_16;
    8b2a:	f88d 1018 	strb.w	r1, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    8b2e:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    8b30:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    8b32:	b2a4      	uxth	r4, r4
    8b34:	f108 0901 	add.w	r9, r8, #1
    8b38:	f10d 0a18 	add.w	sl, sp, #24
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    8b3c:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    8b3e:	f898 3000 	ldrb.w	r3, [r8]
    8b42:	42a3      	cmp	r3, r4
    8b44:	f63f af75 	bhi.w	8a32 <gatt_read_type_rsp+0x46>
		handle = sys_le16_to_cpu(data->handle);
    8b48:	f8b9 3000 	ldrh.w	r3, [r9]
    8b4c:	b29e      	uxth	r6, r3
		if (!handle) {
    8b4e:	2e00      	cmp	r6, #0
    8b50:	f43f af73 	beq.w	8a3a <gatt_read_type_rsp+0x4e>
		switch (u.uuid.type) {
    8b54:	f89d 2018 	ldrb.w	r2, [sp, #24]
    8b58:	b17a      	cbz	r2, 8b7a <gatt_read_type_rsp+0x18e>
    8b5a:	2a02      	cmp	r2, #2
    8b5c:	d016      	beq.n	8b8c <gatt_read_type_rsp+0x1a0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    8b5e:	6829      	ldr	r1, [r5, #0]
    8b60:	b309      	cbz	r1, 8ba6 <gatt_read_type_rsp+0x1ba>
    8b62:	4650      	mov	r0, sl
    8b64:	9301      	str	r3, [sp, #4]
    8b66:	f015 ffa8 	bl	1eaba <bt_uuid_cmp>
    8b6a:	9b01      	ldr	r3, [sp, #4]
    8b6c:	b1d8      	cbz	r0, 8ba6 <gatt_read_type_rsp+0x1ba>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    8b6e:	f898 2000 	ldrb.w	r2, [r8]
    8b72:	1aa4      	subs	r4, r4, r2
    8b74:	b2a4      	uxth	r4, r4
    8b76:	4491      	add	r9, r2
    8b78:	e7e1      	b.n	8b3e <gatt_read_type_rsp+0x152>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    8b7a:	f899 2005 	ldrb.w	r2, [r9, #5]
    8b7e:	f899 1006 	ldrb.w	r1, [r9, #6]
    8b82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8b86:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
    8b8a:	e7e8      	b.n	8b5e <gatt_read_type_rsp+0x172>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    8b8c:	f109 0205 	add.w	r2, r9, #5
    8b90:	f10d 0119 	add.w	r1, sp, #25
    8b94:	f109 0015 	add.w	r0, r9, #21
    8b98:	f852 cb04 	ldr.w	ip, [r2], #4
    8b9c:	f841 cb04 	str.w	ip, [r1], #4
    8ba0:	4282      	cmp	r2, r0
    8ba2:	d1f9      	bne.n	8b98 <gatt_read_type_rsp+0x1ac>
    8ba4:	e7db      	b.n	8b5e <gatt_read_type_rsp+0x172>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    8ba6:	f899 2002 	ldrb.w	r2, [r9, #2]
    8baa:	f88d 2016 	strb.w	r2, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    8bae:	f642 0203 	movw	r2, #10243	; 0x2803
    8bb2:	f8ad 200e 	strh.w	r2, [sp, #14]
    8bb6:	aa03      	add	r2, sp, #12
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    8bb8:	f8b9 1003 	ldrh.w	r1, [r9, #3]
    8bbc:	f8ad 1014 	strh.w	r1, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    8bc0:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
    8bc4:	aa04      	add	r2, sp, #16
    8bc6:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
    8bc8:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    8bcc:	f8cd a010 	str.w	sl, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    8bd0:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    8bd2:	f88d b00c 	strb.w	fp, [sp, #12]
    8bd6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    8bda:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    8bde:	462a      	mov	r2, r5
    8be0:	a90b      	add	r1, sp, #44	; 0x2c
    8be2:	4638      	mov	r0, r7
    8be4:	4798      	blx	r3
    8be6:	2800      	cmp	r0, #0
    8be8:	d1c1      	bne.n	8b6e <gatt_read_type_rsp+0x182>
    8bea:	e777      	b.n	8adc <gatt_read_type_rsp+0xf0>
	gatt_discover_next(conn, handle, params);
    8bec:	462a      	mov	r2, r5
    8bee:	4631      	mov	r1, r6
    8bf0:	4638      	mov	r0, r7
    8bf2:	f017 fd79 	bl	206e8 <gatt_discover_next>
    8bf6:	e771      	b.n	8adc <gatt_read_type_rsp+0xf0>
    8bf8:	000208b7 	.word	0x000208b7

00008bfc <bt_gatt_read>:
{
    8bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8c00:	7a83      	ldrb	r3, [r0, #10]
    8c02:	2b07      	cmp	r3, #7
{
    8c04:	4605      	mov	r5, r0
    8c06:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    8c08:	d166      	bne.n	8cd8 <bt_gatt_read+0xdc>
	if (params->handle_count == 0) {
    8c0a:	684a      	ldr	r2, [r1, #4]
    8c0c:	bb1a      	cbnz	r2, 8c56 <bt_gatt_read+0x5a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    8c0e:	2204      	movs	r2, #4
    8c10:	2108      	movs	r1, #8
    8c12:	f017 f8b8 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    8c16:	4606      	mov	r6, r0
    8c18:	b918      	cbnz	r0, 8c22 <bt_gatt_read+0x26>
		return -ENOMEM;
    8c1a:	f06f 000b 	mvn.w	r0, #11
}
    8c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req = net_buf_add(buf, sizeof(*req));
    8c22:	f100 0708 	add.w	r7, r0, #8
    8c26:	2104      	movs	r1, #4
    8c28:	4638      	mov	r0, r7
    8c2a:	f018 f91b 	bl	20e64 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
    8c2e:	8923      	ldrh	r3, [r4, #8]
    8c30:	8003      	strh	r3, [r0, #0]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    8c32:	68e1      	ldr	r1, [r4, #12]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
    8c34:	8963      	ldrh	r3, [r4, #10]
    8c36:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    8c38:	780b      	ldrb	r3, [r1, #0]
    8c3a:	b933      	cbnz	r3, 8c4a <bt_gatt_read+0x4e>
		net_buf_add_le16(buf, BT_UUID_16(params->by_uuid.uuid)->val);
    8c3c:	8849      	ldrh	r1, [r1, #2]
    8c3e:	4638      	mov	r0, r7
    8c40:	f018 f928 	bl	20e94 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    8c44:	4a26      	ldr	r2, [pc, #152]	; (8ce0 <bt_gatt_read+0xe4>)
    8c46:	4623      	mov	r3, r4
    8c48:	e019      	b.n	8c7e <bt_gatt_read+0x82>
		net_buf_add_mem(buf, BT_UUID_128(params->by_uuid.uuid)->val, 16);
    8c4a:	2210      	movs	r2, #16
    8c4c:	3101      	adds	r1, #1
    8c4e:	4638      	mov	r0, r7
    8c50:	f018 f90e 	bl	20e70 <net_buf_simple_add_mem>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    8c54:	e7f6      	b.n	8c44 <bt_gatt_read+0x48>
	if (params->handle_count > 1) {
    8c56:	2a01      	cmp	r2, #1
    8c58:	d91e      	bls.n	8c98 <bt_gatt_read+0x9c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
    8c5a:	0052      	lsls	r2, r2, #1
    8c5c:	210e      	movs	r1, #14
    8c5e:	f017 f892 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    8c62:	4606      	mov	r6, r0
    8c64:	2800      	cmp	r0, #0
    8c66:	d0d8      	beq.n	8c1a <bt_gatt_read+0x1e>
    8c68:	2700      	movs	r7, #0
		net_buf_add_le16(buf, params->handles[i]);
    8c6a:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
    8c6e:	6862      	ldr	r2, [r4, #4]
    8c70:	b2fb      	uxtb	r3, r7
    8c72:	4293      	cmp	r3, r2
    8c74:	f107 0701 	add.w	r7, r7, #1
    8c78:	d307      	bcc.n	8c8a <bt_gatt_read+0x8e>
	return gatt_send(conn, buf, gatt_read_mult_rsp, params, NULL);
    8c7a:	4a1a      	ldr	r2, [pc, #104]	; (8ce4 <bt_gatt_read+0xe8>)
    8c7c:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    8c7e:	4631      	mov	r1, r6
    8c80:	4628      	mov	r0, r5
}
    8c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    8c86:	f017 bc11 	b.w	204ac <gatt_send.constprop.0>
		net_buf_add_le16(buf, params->handles[i]);
    8c8a:	68a2      	ldr	r2, [r4, #8]
    8c8c:	4640      	mov	r0, r8
    8c8e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    8c92:	f018 f8ff 	bl	20e94 <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
    8c96:	e7ea      	b.n	8c6e <bt_gatt_read+0x72>
	if (params->single.offset) {
    8c98:	894b      	ldrh	r3, [r1, #10]
    8c9a:	b17b      	cbz	r3, 8cbc <bt_gatt_read+0xc0>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
    8c9c:	2204      	movs	r2, #4
    8c9e:	210c      	movs	r1, #12
    8ca0:	f017 f871 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    8ca4:	4606      	mov	r6, r0
    8ca6:	2800      	cmp	r0, #0
    8ca8:	d0b7      	beq.n	8c1a <bt_gatt_read+0x1e>
	req = net_buf_add(buf, sizeof(*req));
    8caa:	2104      	movs	r1, #4
    8cac:	3008      	adds	r0, #8
    8cae:	f018 f8d9 	bl	20e64 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    8cb2:	8923      	ldrh	r3, [r4, #8]
    8cb4:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
    8cb6:	8963      	ldrh	r3, [r4, #10]
    8cb8:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    8cba:	e7c3      	b.n	8c44 <bt_gatt_read+0x48>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    8cbc:	2202      	movs	r2, #2
    8cbe:	210a      	movs	r1, #10
    8cc0:	f017 f861 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
    8cc4:	4606      	mov	r6, r0
    8cc6:	2800      	cmp	r0, #0
    8cc8:	d0a7      	beq.n	8c1a <bt_gatt_read+0x1e>
	req = net_buf_add(buf, sizeof(*req));
    8cca:	2102      	movs	r1, #2
    8ccc:	3008      	adds	r0, #8
    8cce:	f018 f8c9 	bl	20e64 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    8cd2:	8923      	ldrh	r3, [r4, #8]
    8cd4:	8003      	strh	r3, [r0, #0]
    8cd6:	e7b5      	b.n	8c44 <bt_gatt_read+0x48>
		return -ENOTCONN;
    8cd8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8cdc:	e79f      	b.n	8c1e <bt_gatt_read+0x22>
    8cde:	bf00      	nop
    8ce0:	00020a8f 	.word	0x00020a8f
    8ce4:	000200eb 	.word	0x000200eb

00008ce8 <bt_gatt_connected>:
{
    8ce8:	b570      	push	{r4, r5, r6, lr}
    8cea:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8cec:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    8cf0:	4605      	mov	r5, r0
	data.conn = conn;
    8cf2:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    8cf4:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8cf6:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    8cf8:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8cfc:	4631      	mov	r1, r6
    8cfe:	f016 f9d0 	bl	1f0a2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    8d02:	b190      	cbz	r0, 8d2a <bt_gatt_connected+0x42>
		if (conn->id) {
    8d04:	7a2a      	ldrb	r2, [r5, #8]
    8d06:	b30a      	cbz	r2, 8d4c <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    8d08:	ac02      	add	r4, sp, #8
    8d0a:	2104      	movs	r1, #4
    8d0c:	4620      	mov	r0, r4
    8d0e:	f014 ff39 	bl	1db84 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    8d12:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    8d14:	4a1a      	ldr	r2, [pc, #104]	; (8d80 <bt_gatt_connected+0x98>)
    8d16:	2124      	movs	r1, #36	; 0x24
    8d18:	a805      	add	r0, sp, #20
    8d1a:	4633      	mov	r3, r6
    8d1c:	f7fc f88e 	bl	4e3c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    8d20:	aa05      	add	r2, sp, #20
    8d22:	4918      	ldr	r1, [pc, #96]	; (8d84 <bt_gatt_connected+0x9c>)
    8d24:	4610      	mov	r0, r2
    8d26:	f7fa feb5 	bl	3a94 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    8d2a:	2001      	movs	r0, #1
    8d2c:	4a16      	ldr	r2, [pc, #88]	; (8d88 <bt_gatt_connected+0xa0>)
    8d2e:	ab03      	add	r3, sp, #12
    8d30:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8d34:	f017 fcaa 	bl	2068c <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    8d38:	4628      	mov	r0, r5
    8d3a:	f7ff fa03 	bl	8144 <gatt_sub_find>
	if (!sub) {
    8d3e:	b118      	cbz	r0, 8d48 <bt_gatt_connected+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    8d40:	6884      	ldr	r4, [r0, #8]
    8d42:	b10c      	cbz	r4, 8d48 <bt_gatt_connected+0x60>
    8d44:	3c14      	subs	r4, #20
    8d46:	b91c      	cbnz	r4, 8d50 <bt_gatt_connected+0x68>
}
    8d48:	b00e      	add	sp, #56	; 0x38
    8d4a:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    8d4c:	9200      	str	r2, [sp, #0]
    8d4e:	e7e1      	b.n	8d14 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    8d50:	7a28      	ldrb	r0, [r5, #8]
    8d52:	4631      	mov	r1, r6
    8d54:	f016 f9a5 	bl	1f0a2 <bt_addr_le_is_bonded>
    8d58:	b160      	cbz	r0, 8d74 <bt_gatt_connected+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8d5a:	f3bf 8f5b 	dmb	ish
    8d5e:	6923      	ldr	r3, [r4, #16]
    8d60:	f3bf 8f5b 	dmb	ish
    8d64:	079b      	lsls	r3, r3, #30
    8d66:	d405      	bmi.n	8d74 <bt_gatt_connected+0x8c>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    8d68:	89a2      	ldrh	r2, [r4, #12]
    8d6a:	8961      	ldrh	r1, [r4, #10]
    8d6c:	4623      	mov	r3, r4
    8d6e:	4628      	mov	r0, r5
    8d70:	f7ff fa4c 	bl	820c <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8d74:	f114 0f14 	cmn.w	r4, #20
    8d78:	d0e6      	beq.n	8d48 <bt_gatt_connected+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8d7a:	6964      	ldr	r4, [r4, #20]
    8d7c:	e7e1      	b.n	8d42 <bt_gatt_connected+0x5a>
    8d7e:	bf00      	nop
    8d80:	00028ab5 	.word	0x00028ab5
    8d84:	00008589 	.word	0x00008589
    8d88:	00008789 	.word	0x00008789

00008d8c <bt_gatt_store_ccc>:
{
    8d8c:	b570      	push	{r4, r5, r6, lr}
    8d8e:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    8d90:	2300      	movs	r3, #0
{
    8d92:	4604      	mov	r4, r0
    8d94:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    8d96:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    8d98:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    8d9c:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    8d9e:	4a11      	ldr	r2, [pc, #68]	; (8de4 <bt_gatt_store_ccc+0x58>)
    8da0:	ab0d      	add	r3, sp, #52	; 0x34
    8da2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8da6:	2001      	movs	r0, #1
    8da8:	f017 fc70 	bl	2068c <bt_gatt_foreach_attr>
	if (id) {
    8dac:	b1ac      	cbz	r4, 8dda <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
    8dae:	ae03      	add	r6, sp, #12
    8db0:	4622      	mov	r2, r4
    8db2:	2104      	movs	r1, #4
    8db4:	4630      	mov	r0, r6
    8db6:	f014 fee5 	bl	1db84 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    8dba:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    8dbc:	4a0a      	ldr	r2, [pc, #40]	; (8de8 <bt_gatt_store_ccc+0x5c>)
    8dbe:	462b      	mov	r3, r5
    8dc0:	2124      	movs	r1, #36	; 0x24
    8dc2:	a804      	add	r0, sp, #16
    8dc4:	f7fc f83a 	bl	4e3c <bt_settings_encode_key>
	if (save.count) {
    8dc8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    8dca:	b142      	cbz	r2, 8dde <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
    8dcc:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    8dce:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    8dd0:	a804      	add	r0, sp, #16
    8dd2:	f7fa fe0f 	bl	39f4 <settings_save_one>
}
    8dd6:	b040      	add	sp, #256	; 0x100
    8dd8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    8dda:	9400      	str	r4, [sp, #0]
    8ddc:	e7ee      	b.n	8dbc <bt_gatt_store_ccc+0x30>
		str = NULL;
    8dde:	4611      	mov	r1, r2
    8de0:	e7f6      	b.n	8dd0 <bt_gatt_store_ccc+0x44>
    8de2:	bf00      	nop
    8de4:	0000805d 	.word	0x0000805d
    8de8:	00028ab5 	.word	0x00028ab5

00008dec <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    8dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8df0:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    8df2:	4603      	mov	r3, r0
    8df4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8df8:	2001      	movs	r0, #1
    8dfa:	4a2d      	ldr	r2, [pc, #180]	; (8eb0 <bt_gatt_disconnected+0xc4>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8dfc:	f104 0788 	add.w	r7, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    8e00:	f017 fc44 	bl	2068c <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8e04:	7a20      	ldrb	r0, [r4, #8]
    8e06:	4639      	mov	r1, r7
    8e08:	f016 f94b 	bl	1f0a2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    8e0c:	b118      	cbz	r0, 8e16 <bt_gatt_disconnected+0x2a>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    8e0e:	7a20      	ldrb	r0, [r4, #8]
    8e10:	4639      	mov	r1, r7
    8e12:	f7ff ffbb 	bl	8d8c <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8e16:	7a20      	ldrb	r0, [r4, #8]
    8e18:	4639      	mov	r1, r7
    8e1a:	f016 f942 	bl	1f0a2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    8e1e:	b150      	cbz	r0, 8e36 <bt_gatt_disconnected+0x4a>
		struct addr_with_id addr_with_id = {
    8e20:	7a23      	ldrb	r3, [r4, #8]
    8e22:	f88d 3004 	strb.w	r3, [sp, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    8e26:	4a23      	ldr	r2, [pc, #140]	; (8eb4 <bt_gatt_disconnected+0xc8>)
		struct addr_with_id addr_with_id = {
    8e28:	9700      	str	r7, [sp, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    8e2a:	466b      	mov	r3, sp
    8e2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8e30:	2001      	movs	r0, #1
    8e32:	f017 fc2b 	bl	2068c <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    8e36:	4620      	mov	r0, r4
    8e38:	f7ff f984 	bl	8144 <gatt_sub_find>
	if (!sub) {
    8e3c:	4606      	mov	r6, r0
    8e3e:	b3a0      	cbz	r0, 8eaa <bt_gatt_disconnected+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    8e40:	6883      	ldr	r3, [r0, #8]
    8e42:	b393      	cbz	r3, 8eaa <bt_gatt_disconnected+0xbe>
    8e44:	f1b3 0814 	subs.w	r8, r3, #20
    8e48:	d02f      	beq.n	8eaa <bt_gatt_disconnected+0xbe>
    8e4a:	681d      	ldr	r5, [r3, #0]
    8e4c:	b105      	cbz	r5, 8e50 <bt_gatt_disconnected+0x64>
    8e4e:	3d14      	subs	r5, #20
{
    8e50:	f04f 0b00 	mov.w	fp, #0
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    8e54:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
    8e58:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    8e5a:	7a20      	ldrb	r0, [r4, #8]
    8e5c:	4639      	mov	r1, r7
    8e5e:	f016 f920 	bl	1f0a2 <bt_addr_le_is_bonded>
    8e62:	b988      	cbnz	r0, 8e88 <bt_gatt_disconnected+0x9c>
			params->value = 0U;
    8e64:	f8a8 a00c 	strh.w	sl, [r8, #12]
			gatt_sub_remove(conn, sub, prev, params);
    8e68:	4643      	mov	r3, r8
    8e6a:	465a      	mov	r2, fp
    8e6c:	4631      	mov	r1, r6
    8e6e:	4620      	mov	r0, r4
    8e70:	f017 fac1 	bl	203f6 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    8e74:	b1cd      	cbz	r5, 8eaa <bt_gatt_disconnected+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8e76:	f115 0114 	adds.w	r1, r5, #20
    8e7a:	d002      	beq.n	8e82 <bt_gatt_disconnected+0x96>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8e7c:	6969      	ldr	r1, [r5, #20]
    8e7e:	b101      	cbz	r1, 8e82 <bt_gatt_disconnected+0x96>
    8e80:	3914      	subs	r1, #20
{
    8e82:	46a8      	mov	r8, r5
    8e84:	460d      	mov	r5, r1
    8e86:	e7e8      	b.n	8e5a <bt_gatt_disconnected+0x6e>
    8e88:	f3bf 8f5b 	dmb	ish
    8e8c:	f8d8 3010 	ldr.w	r3, [r8, #16]
    8e90:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    8e94:	07db      	lsls	r3, r3, #31
    8e96:	d4e5      	bmi.n	8e64 <bt_gatt_disconnected+0x78>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    8e98:	7873      	ldrb	r3, [r6, #1]
    8e9a:	b11b      	cbz	r3, 8ea4 <bt_gatt_disconnected+0xb8>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    8e9c:	4639      	mov	r1, r7
    8e9e:	4648      	mov	r0, r9
    8ea0:	f017 f93e 	bl	20120 <bt_addr_le_copy>
			prev = &params->node;
    8ea4:	f108 0b14 	add.w	fp, r8, #20
    8ea8:	e7e4      	b.n	8e74 <bt_gatt_disconnected+0x88>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    8eaa:	b003      	add	sp, #12
    8eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8eb0:	00007fd1 	.word	0x00007fd1
    8eb4:	0000811d 	.word	0x0000811d

00008eb8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    8eb8:	4b04      	ldr	r3, [pc, #16]	; (8ecc <bt_smp_accept+0x14>)
    8eba:	6818      	ldr	r0, [r3, #0]
    8ebc:	b918      	cbnz	r0, 8ec6 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    8ebe:	4a04      	ldr	r2, [pc, #16]	; (8ed0 <bt_smp_accept+0x18>)
    8ec0:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    8ec2:	600b      	str	r3, [r1, #0]

		return 0;
    8ec4:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    8ec6:	f06f 000b 	mvn.w	r0, #11
}
    8eca:	4770      	bx	lr
    8ecc:	20001170 	.word	0x20001170
    8ed0:	00027590 	.word	0x00027590

00008ed4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    8ed4:	b470      	push	{r4, r5, r6}
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    8ed6:	1e54      	subs	r4, r2, #1
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    8ed8:	1dc5      	adds	r5, r0, #7
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    8eda:	b2a4      	uxth	r4, r4
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    8edc:	f025 0503 	bic.w	r5, r5, #3
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    8ee0:	fb01 f604 	mul.w	r6, r1, r4
	*mem_head = mem_pool;
    8ee4:	6018      	str	r0, [r3, #0]
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    8ee6:	802a      	strh	r2, [r5, #0]
		     sizeof(mem_pool));
	while (mem_count--) {
    8ee8:	1e93      	subs	r3, r2, #2
    8eea:	2200      	movs	r2, #0
    8eec:	5182      	str	r2, [r0, r6]
    8eee:	b17c      	cbz	r4, 8f10 <mem_init+0x3c>
    8ef0:	b29b      	uxth	r3, r3
    8ef2:	fb03 1401 	mla	r4, r3, r1, r1
    8ef6:	fb03 f201 	mul.w	r2, r3, r1
    8efa:	4420      	add	r0, r4
    8efc:	1b12      	subs	r2, r2, r4
    8efe:	f64f 74ff 	movw	r4, #65535	; 0xffff
    8f02:	3b01      	subs	r3, #1
    8f04:	b29b      	uxth	r3, r3
    8f06:	42a3      	cmp	r3, r4
    8f08:	5080      	str	r0, [r0, r2]
    8f0a:	eba0 0001 	sub.w	r0, r0, r1
    8f0e:	d1f8      	bne.n	8f02 <mem_init+0x2e>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    8f10:	bc70      	pop	{r4, r5, r6}
    8f12:	4770      	bx	lr

00008f14 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    8f14:	4603      	mov	r3, r0
	if (*mem_head) {
    8f16:	6800      	ldr	r0, [r0, #0]
    8f18:	b180      	cbz	r0, 8f3c <mem_acquire+0x28>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    8f1a:	6802      	ldr	r2, [r0, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
    8f1c:	b162      	cbz	r2, 8f38 <mem_acquire+0x24>
{
    8f1e:	b410      	push	{r4}
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    8f20:	1dc4      	adds	r4, r0, #7
    8f22:	f024 0403 	bic.w	r4, r4, #3
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    8f26:	1dd1      	adds	r1, r2, #7
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    8f28:	8824      	ldrh	r4, [r4, #0]
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    8f2a:	f021 0103 	bic.w	r1, r1, #3
		free_count--;
    8f2e:	3c01      	subs	r4, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    8f30:	800c      	strh	r4, [r1, #0]
		*mem_head = head;
		return mem;
	}

	return NULL;
}
    8f32:	bc10      	pop	{r4}
		*mem_head = head;
    8f34:	601a      	str	r2, [r3, #0]
}
    8f36:	4770      	bx	lr
		*mem_head = head;
    8f38:	601a      	str	r2, [r3, #0]
		return mem;
    8f3a:	4770      	bx	lr
}
    8f3c:	4770      	bx	lr
    8f3e:	bf00      	nop

00008f40 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    8f40:	b410      	push	{r4}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    8f42:	680b      	ldr	r3, [r1, #0]
{
    8f44:	b083      	sub	sp, #12
    8f46:	4602      	mov	r2, r0
    8f48:	9001      	str	r0, [sp, #4]
	if (*mem_head) {
    8f4a:	b183      	cbz	r3, 8f6e <mem_release+0x2e>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    8f4c:	3307      	adds	r3, #7
    8f4e:	f023 0303 	bic.w	r3, r3, #3
    8f52:	8818      	ldrh	r0, [r3, #0]
    8f54:	3001      	adds	r0, #1
    8f56:	b280      	uxth	r0, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8f58:	4613      	mov	r3, r2
    8f5a:	680c      	ldr	r4, [r1, #0]
    8f5c:	f843 4b07 	str.w	r4, [r3], #7
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    8f60:	f023 0303 	bic.w	r3, r3, #3
    8f64:	8018      	strh	r0, [r3, #0]

	*mem_head = mem;
    8f66:	600a      	str	r2, [r1, #0]
}
    8f68:	b003      	add	sp, #12
    8f6a:	bc10      	pop	{r4}
    8f6c:	4770      	bx	lr
    8f6e:	2001      	movs	r0, #1
    8f70:	e7f2      	b.n	8f58 <mem_release+0x18>
    8f72:	bf00      	nop

00008f74 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    8f74:	fb02 0001 	mla	r0, r2, r1, r0
    8f78:	4770      	bx	lr
    8f7a:	bf00      	nop

00008f7c <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    8f7c:	1a40      	subs	r0, r0, r1
    8f7e:	b280      	uxth	r0, r0
}
    8f80:	fbb0 f0f2 	udiv	r0, r0, r2
    8f84:	4770      	bx	lr
    8f86:	bf00      	nop

00008f88 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    8f88:	1e53      	subs	r3, r2, #1
	src += len;
    8f8a:	4411      	add	r1, r2
	while (len--) {
    8f8c:	b29b      	uxth	r3, r3
    8f8e:	b142      	cbz	r2, 8fa2 <mem_rcopy+0x1a>
    8f90:	43db      	mvns	r3, r3
    8f92:	18ca      	adds	r2, r1, r3
    8f94:	3801      	subs	r0, #1
		*dst++ = *--src;
    8f96:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    8f9a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    8f9e:	4291      	cmp	r1, r2
    8fa0:	d1f9      	bne.n	8f96 <mem_rcopy+0xe>
	}
}
    8fa2:	4770      	bx	lr

00008fa4 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    8fa4:	4401      	add	r1, r0
    8fa6:	e002      	b.n	8fae <mem_nz+0xa>
		if (*src++) {
    8fa8:	f810 3b01 	ldrb.w	r3, [r0], #1
    8fac:	b91b      	cbnz	r3, 8fb6 <mem_nz+0x12>
	while (len--) {
    8fae:	4288      	cmp	r0, r1
    8fb0:	d1fa      	bne.n	8fa8 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    8fb2:	2000      	movs	r0, #0
    8fb4:	4770      	bx	lr
			return 1;
    8fb6:	2001      	movs	r0, #1
}
    8fb8:	4770      	bx	lr
    8fba:	bf00      	nop

00008fbc <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    8fbc:	6010      	str	r0, [r2, #0]
    8fbe:	6008      	str	r0, [r1, #0]

	return link;
}
    8fc0:	4770      	bx	lr
    8fc2:	bf00      	nop

00008fc4 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    8fc4:	680a      	ldr	r2, [r1, #0]
{
    8fc6:	4603      	mov	r3, r0
	if (*head != *tail) {
    8fc8:	6800      	ldr	r0, [r0, #0]
    8fca:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    8fcc:	bf05      	ittet	eq
    8fce:	2200      	moveq	r2, #0
    8fd0:	600a      	streq	r2, [r1, #0]
		return NULL;
    8fd2:	2000      	movne	r0, #0
	*head = *tail = NULL;
    8fd4:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    8fd6:	4770      	bx	lr

00008fd8 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    8fd8:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    8fda:	6814      	ldr	r4, [r2, #0]
    8fdc:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    8fde:	6814      	ldr	r4, [r2, #0]
    8fe0:	6061      	str	r1, [r4, #4]
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;

	return link;
}
    8fe2:	bc10      	pop	{r4}
	*tail = link;
    8fe4:	6010      	str	r0, [r2, #0]
}
    8fe6:	4770      	bx	lr

00008fe8 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    8fe8:	4288      	cmp	r0, r1
    8fea:	d003      	beq.n	8ff4 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    8fec:	b11a      	cbz	r2, 8ff6 <memq_peek+0xe>
		*mem = head->mem;
    8fee:	6843      	ldr	r3, [r0, #4]
    8ff0:	6013      	str	r3, [r2, #0]
    8ff2:	4770      	bx	lr
		return NULL;
    8ff4:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    8ff6:	4770      	bx	lr

00008ff8 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    8ff8:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    8ffa:	4283      	cmp	r3, r0
    8ffc:	d009      	beq.n	9012 <memq_dequeue+0x1a>
	if (mem) {
    8ffe:	b12a      	cbz	r2, 900c <memq_dequeue+0x14>
		*mem = head->mem;
    9000:	6858      	ldr	r0, [r3, #4]
    9002:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    9004:	681a      	ldr	r2, [r3, #0]
    9006:	600a      	str	r2, [r1, #0]

	return old_head;
}
    9008:	4618      	mov	r0, r3
    900a:	4770      	bx	lr
	if (old_head == NULL) {
    900c:	2b00      	cmp	r3, #0
    900e:	d1f9      	bne.n	9004 <memq_dequeue+0xc>
    9010:	e7fa      	b.n	9008 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    9012:	2300      	movs	r3, #0
    9014:	e7f8      	b.n	9008 <memq_dequeue+0x10>
    9016:	bf00      	nop

00009018 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    9018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    901c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 9054 <mayfly_init+0x3c>
    9020:	4e0b      	ldr	r6, [pc, #44]	; (9050 <mayfly_init+0x38>)
    9022:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    9024:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    9028:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    902a:	1d22      	adds	r2, r4, #4
    902c:	4621      	mov	r1, r4
    902e:	4628      	mov	r0, r5
    9030:	3c0c      	subs	r4, #12
    9032:	f7ff ffc3 	bl	8fbc <memq_init>
		while (caller_id--) {
    9036:	42b4      	cmp	r4, r6
    9038:	f1a5 0508 	sub.w	r5, r5, #8
    903c:	d1f5      	bne.n	902a <mayfly_init+0x12>
	while (callee_id--) {
    903e:	3f04      	subs	r7, #4
    9040:	1d3b      	adds	r3, r7, #4
    9042:	f1a8 0820 	sub.w	r8, r8, #32
    9046:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    904a:	d1eb      	bne.n	9024 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    904c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9050:	200019b4 	.word	0x200019b4
    9054:	20001924 	.word	0x20001924

00009058 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    9058:	b430      	push	{r4, r5}
    905a:	4603      	mov	r3, r0
    905c:	460c      	mov	r4, r1
	if (enable) {
    905e:	b19a      	cbz	r2, 9088 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    9060:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9064:	0108      	lsls	r0, r1, #4
    9066:	4d14      	ldr	r5, [pc, #80]	; (90b8 <mayfly_enable+0x60>)
    9068:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    906c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    9070:	4429      	add	r1, r5
    9072:	7a48      	ldrb	r0, [r1, #9]
    9074:	7a0d      	ldrb	r5, [r1, #8]
    9076:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    9078:	bf04      	itt	eq
    907a:	3001      	addeq	r0, #1
    907c:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    907e:	4621      	mov	r1, r4
    9080:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    9082:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    9084:	f00b b8ca 	b.w	1421c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    9088:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    908c:	4d0a      	ldr	r5, [pc, #40]	; (90b8 <mayfly_enable+0x60>)
    908e:	0112      	lsls	r2, r2, #4
    9090:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    9094:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9098:	442b      	add	r3, r5
    909a:	7a9d      	ldrb	r5, [r3, #10]
    909c:	7ada      	ldrb	r2, [r3, #11]
    909e:	42aa      	cmp	r2, r5
    90a0:	d001      	beq.n	90a6 <mayfly_enable+0x4e>
}
    90a2:	bc30      	pop	{r4, r5}
    90a4:	4770      	bx	lr
			mfp[callee_id] = 1U;
    90a6:	4d05      	ldr	r5, [pc, #20]	; (90bc <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    90a8:	3201      	adds	r2, #1
    90aa:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    90ac:	2301      	movs	r3, #1
    90ae:	546b      	strb	r3, [r5, r1]
}
    90b0:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    90b2:	f00b b911 	b.w	142d8 <mayfly_pend>
    90b6:	bf00      	nop
    90b8:	20001930 	.word	0x20001930
    90bc:	2000192c 	.word	0x2000192c

000090c0 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    90c0:	b570      	push	{r4, r5, r6, lr}
    90c2:	461c      	mov	r4, r3
    90c4:	4606      	mov	r6, r0
    90c6:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    90c8:	b322      	cbz	r2, 9114 <mayfly_enqueue+0x54>
    90ca:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    90cc:	7822      	ldrb	r2, [r4, #0]
    90ce:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    90d0:	f012 0203 	ands.w	r2, r2, #3
    90d4:	d005      	beq.n	90e2 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    90d6:	2a01      	cmp	r2, #1
    90d8:	d040      	beq.n	915c <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    90da:	3301      	adds	r3, #1
    90dc:	b2db      	uxtb	r3, r3
    90de:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    90e0:	e00f      	b.n	9102 <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    90e2:	2230      	movs	r2, #48	; 0x30
    90e4:	2104      	movs	r1, #4
    90e6:	fb12 1105 	smlabb	r1, r2, r5, r1
    90ea:	220c      	movs	r2, #12
    90ec:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    90f0:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    90f2:	491b      	ldr	r1, [pc, #108]	; (9160 <mayfly_enqueue+0xa0>)
    90f4:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    90f6:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    90f8:	440a      	add	r2, r1
	m->_req = ack + 1;
    90fa:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    90fc:	4621      	mov	r1, r4
    90fe:	f7ff ff6b 	bl	8fd8 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    9102:	4b18      	ldr	r3, [pc, #96]	; (9164 <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    9104:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    9106:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    9108:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    910a:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    910c:	f00b f8e4 	bl	142d8 <mayfly_pend>

	return 0;
    9110:	2000      	movs	r0, #0
}
    9112:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    9114:	f00b f8c2 	bl	1429c <mayfly_prio_is_equal>
    9118:	2800      	cmp	r0, #0
    911a:	d0d6      	beq.n	90ca <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    911c:	4629      	mov	r1, r5
    911e:	4630      	mov	r0, r6
    9120:	f00b f89c 	bl	1425c <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    9124:	2800      	cmp	r0, #0
    9126:	d0d0      	beq.n	90ca <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    9128:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    912c:	0111      	lsls	r1, r2, #4
    912e:	480c      	ldr	r0, [pc, #48]	; (9160 <mayfly_enqueue+0xa0>)
    9130:	7863      	ldrb	r3, [r4, #1]
    9132:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    9136:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    913a:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    913c:	7a91      	ldrb	r1, [r2, #10]
    913e:	7ad2      	ldrb	r2, [r2, #11]
    9140:	4291      	cmp	r1, r2
    9142:	d1c3      	bne.n	90cc <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
    9144:	7822      	ldrb	r2, [r4, #0]
    9146:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    9148:	0792      	lsls	r2, r2, #30
    914a:	d002      	beq.n	9152 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    914c:	3302      	adds	r3, #2
    914e:	b2db      	uxtb	r3, r3
    9150:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    9152:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    9156:	4798      	blx	r3
		return 0;
    9158:	2000      	movs	r0, #0
}
    915a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    915c:	4610      	mov	r0, r2
}
    915e:	bd70      	pop	{r4, r5, r6, pc}
    9160:	20001930 	.word	0x20001930
    9164:	2000192c 	.word	0x2000192c

00009168 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    9168:	494e      	ldr	r1, [pc, #312]	; (92a4 <mayfly_run+0x13c>)
    916a:	5c0b      	ldrb	r3, [r1, r0]
    916c:	2b00      	cmp	r3, #0
    916e:	f000 8098 	beq.w	92a2 <mayfly_run+0x13a>
{
    9172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    9176:	4b4c      	ldr	r3, [pc, #304]	; (92a8 <mayfly_run+0x140>)
    9178:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    917c:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    917e:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    9180:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    9184:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    9186:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    918a:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
    918e:	9203      	str	r2, [sp, #12]
    9190:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
    9194:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    9196:	f04f 0903 	mov.w	r9, #3
    919a:	4688      	mov	r8, r1
    919c:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    919e:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    91a0:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    91a4:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    91a6:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    91a8:	f7ff ff1e 	bl	8fe8 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    91ac:	f107 0624 	add.w	r6, r7, #36	; 0x24
    91b0:	4683      	mov	fp, r0
    91b2:	2800      	cmp	r0, #0
    91b4:	d034      	beq.n	9220 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    91b6:	9c05      	ldr	r4, [sp, #20]
    91b8:	7825      	ldrb	r5, [r4, #0]
    91ba:	7863      	ldrb	r3, [r4, #1]
    91bc:	1aed      	subs	r5, r5, r3
    91be:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    91c2:	2d01      	cmp	r5, #1
    91c4:	d106      	bne.n	91d4 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    91c6:	3b01      	subs	r3, #1
    91c8:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    91ca:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    91ce:	4798      	blx	r3
    91d0:	9c05      	ldr	r4, [sp, #20]
    91d2:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    91d4:	f894 c000 	ldrb.w	ip, [r4]
    91d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    91da:	ebac 0303 	sub.w	r3, ip, r3
    91de:	f003 0303 	and.w	r3, r3, #3
    91e2:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    91e4:	f04f 0200 	mov.w	r2, #0
    91e8:	4631      	mov	r1, r6
	req = m->_req;
    91ea:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    91ee:	d00d      	beq.n	920c <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    91f0:	f7ff ff02 	bl	8ff8 <memq_dequeue>
		ack = m->_ack;
    91f4:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    91f6:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    91f8:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    91fc:	1a9b      	subs	r3, r3, r2
    91fe:	f003 0303 	and.w	r3, r3, #3
    9202:	2b01      	cmp	r3, #1
		m->_ack = req;
    9204:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    9208:	d044      	beq.n	9294 <mayfly_run+0x12c>
    920a:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    920c:	4601      	mov	r1, r0
    920e:	aa05      	add	r2, sp, #20
    9210:	6a78      	ldr	r0, [r7, #36]	; 0x24
    9212:	f7ff fee9 	bl	8fe8 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    9216:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    9218:	4683      	mov	fp, r0
			if (state == 1U) {
    921a:	d029      	beq.n	9270 <mayfly_run+0x108>
		while (link) {
    921c:	2800      	cmp	r0, #0
    921e:	d1ca      	bne.n	91b6 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    9220:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    9224:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    9228:	429a      	cmp	r2, r3
    922a:	d003      	beq.n	9234 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    922c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    9230:	2301      	movs	r3, #1
    9232:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    9234:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    9238:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    923c:	429a      	cmp	r2, r3
    923e:	d003      	beq.n	9248 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    9240:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    9244:	2301      	movs	r3, #1
    9246:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    9248:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    924c:	fa5f f989 	uxtb.w	r9, r9
    9250:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    9254:	f1a7 070c 	sub.w	r7, r7, #12
    9258:	d1a1      	bne.n	919e <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    925a:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    925e:	b1b3      	cbz	r3, 928e <mayfly_run+0x126>
    9260:	9b03      	ldr	r3, [sp, #12]
    9262:	b9a3      	cbnz	r3, 928e <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    9264:	461a      	mov	r2, r3
    9266:	4651      	mov	r1, sl
    9268:	4650      	mov	r0, sl
    926a:	f00a ffd7 	bl	1421c <mayfly_enable_cb>
    926e:	e00e      	b.n	928e <mayfly_run+0x126>
				if (caller_id || link) {
    9270:	f1b9 0f00 	cmp.w	r9, #0
    9274:	d101      	bne.n	927a <mayfly_run+0x112>
    9276:	2800      	cmp	r0, #0
    9278:	d0d2      	beq.n	9220 <mayfly_run+0xb8>
    927a:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    927e:	4a09      	ldr	r2, [pc, #36]	; (92a4 <mayfly_run+0x13c>)
    9280:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    9282:	4651      	mov	r1, sl
    9284:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    9286:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    928a:	f00b f825 	bl	142d8 <mayfly_pend>
	}
}
    928e:	b007      	add	sp, #28
    9290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    9294:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    9296:	4621      	mov	r1, r4
    9298:	4658      	mov	r0, fp
    929a:	4642      	mov	r2, r8
    929c:	f7ff fe9c 	bl	8fd8 <memq_enqueue>
    92a0:	e7b3      	b.n	920a <mayfly_run+0xa2>
    92a2:	4770      	bx	lr
    92a4:	2000192c 	.word	0x2000192c
    92a8:	20001930 	.word	0x20001930

000092ac <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    92ac:	b1a1      	cbz	r1, 92d8 <util_ones_count_get+0x2c>
    92ae:	1e4b      	subs	r3, r1, #1
    92b0:	b2db      	uxtb	r3, r3
{
    92b2:	b410      	push	{r4}
    92b4:	1e41      	subs	r1, r0, #1
    92b6:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
    92b8:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    92ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    92be:	b13b      	cbz	r3, 92d0 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    92c0:	b25b      	sxtb	r3, r3
    92c2:	1e5a      	subs	r2, r3, #1
    92c4:	4013      	ands	r3, r2
			one_count++;
    92c6:	3001      	adds	r0, #1
		while (bite) {
    92c8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    92cc:	b2c0      	uxtb	r0, r0
		while (bite) {
    92ce:	d1f7      	bne.n	92c0 <util_ones_count_get+0x14>
	while (octets_len--) {
    92d0:	42a1      	cmp	r1, r4
    92d2:	d1f2      	bne.n	92ba <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    92d4:	bc10      	pop	{r4}
    92d6:	4770      	bx	lr
	uint8_t one_count = 0U;
    92d8:	4608      	mov	r0, r1
}
    92da:	4770      	bx	lr

000092dc <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    92dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    92e0:	7f82      	ldrb	r2, [r0, #30]
{
    92e2:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
    92e4:	2301      	movs	r3, #1
	if (instance->job_guard) {
    92e6:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
    92e8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    92ea:	2a00      	cmp	r2, #0
    92ec:	d15b      	bne.n	93a6 <ticker_worker+0xca>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    92ee:	7f43      	ldrb	r3, [r0, #29]
    92f0:	2bff      	cmp	r3, #255	; 0xff
    92f2:	4681      	mov	r9, r0
    92f4:	d056      	beq.n	93a4 <ticker_worker+0xc8>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    92f6:	f00a fb1f 	bl	13938 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    92fa:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    92fe:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    9302:	f899 601d 	ldrb.w	r6, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9306:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    9308:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    930a:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    930e:	f000 813a 	beq.w	9586 <ticker_worker+0x2aa>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    9312:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    9316:	455b      	cmp	r3, fp
    9318:	bf94      	ite	ls
    931a:	2300      	movls	r3, #0
    931c:	2301      	movhi	r3, #1
    931e:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    9320:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    9322:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
    9326:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    932a:	d066      	beq.n	93fa <ticker_worker+0x11e>
			must_expire_skip = 1U;
    932c:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
    9330:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    9334:	eb07 1406 	add.w	r4, r7, r6, lsl #4
    9338:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
    933a:	68a2      	ldr	r2, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    933c:	455a      	cmp	r2, fp
    933e:	d85a      	bhi.n	93f6 <ticker_worker+0x11a>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    9340:	f894 a002 	ldrb.w	sl, [r4, #2]
    9344:	7863      	ldrb	r3, [r4, #1]
		ticker_id_head = ticker->next;
    9346:	5dbe      	ldrb	r6, [r7, r6]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    9348:	eba3 030a 	sub.w	r3, r3, sl
    934c:	b2db      	uxtb	r3, r3
    934e:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
    9350:	ebab 0b02 	sub.w	fp, fp, r2
		ticks_expired += ticks_to_expire;
    9354:	4490      	add	r8, r2
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    9356:	d14c      	bne.n	93f2 <ticker_worker+0x116>
		if (ticker->ticks_slot != 0U &&
    9358:	69a0      	ldr	r0, [r4, #24]
    935a:	b368      	cbz	r0, 93b8 <ticker_worker+0xdc>
    935c:	9b01      	ldr	r3, [sp, #4]
    935e:	2b00      	cmp	r3, #0
    9360:	f000 808d 	beq.w	947e <ticker_worker+0x1a2>
    9364:	8be3      	ldrh	r3, [r4, #30]
    9366:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
    9368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    936a:	b13b      	cbz	r3, 937c <ticker_worker+0xa0>
    936c:	681a      	ldr	r2, [r3, #0]
    936e:	b11a      	cbz	r2, 9378 <ticker_worker+0x9c>
			    ext_data->ticks_slot_window != 0U &&
    9370:	7a1a      	ldrb	r2, [r3, #8]
    9372:	2a00      	cmp	r2, #0
    9374:	f000 80f4 	beq.w	9560 <ticker_worker+0x284>
				ext_data->reschedule_state =
    9378:	2200      	movs	r2, #0
    937a:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    937c:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
    937e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    9382:	3201      	adds	r2, #1
    9384:	b292      	uxth	r2, r2
    9386:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    9388:	2900      	cmp	r1, #0
    938a:	d032      	beq.n	93f2 <ticker_worker+0x116>
    938c:	8ba1      	ldrh	r1, [r4, #28]
    938e:	4291      	cmp	r1, r2
    9390:	d22f      	bcs.n	93f2 <ticker_worker+0x116>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    9392:	2b00      	cmp	r3, #0
    9394:	f000 80fa 	beq.w	958c <ticker_worker+0x2b0>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    9398:	7a1a      	ldrb	r2, [r3, #8]
    939a:	2a01      	cmp	r2, #1
    939c:	d029      	beq.n	93f2 <ticker_worker+0x116>
			must_expire_skip = 1U;
    939e:	f04f 0c01 	mov.w	ip, #1
    93a2:	e00e      	b.n	93c2 <ticker_worker+0xe6>
		instance->worker_trigger = 0U;
    93a4:	77c2      	strb	r2, [r0, #31]
}
    93a6:	b00d      	add	sp, #52	; 0x34
    93a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93ac:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
    93b0:	f8dd a020 	ldr.w	sl, [sp, #32]
    93b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    93b6:	464c      	mov	r4, r9
		if (ticker->ext_data) {
    93b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    93ba:	2b00      	cmp	r3, #0
    93bc:	d040      	beq.n	9440 <ticker_worker+0x164>
    93be:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
    93c2:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
    93c4:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
    93c6:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    93c8:	605a      	str	r2, [r3, #4]
		ticker->ack--;
    93ca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    93ce:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    93d0:	b17d      	cbz	r5, 93f2 <ticker_worker+0x116>
					   ticks_expired -
    93d2:	9b02      	ldr	r3, [sp, #8]
    93d4:	6962      	ldr	r2, [r4, #20]
    93d6:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    93d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    93da:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    93dc:	eba8 0202 	sub.w	r2, r8, r2
    93e0:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    93e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    93e6:	f1bc 0f00 	cmp.w	ip, #0
    93ea:	d039      	beq.n	9460 <ticker_worker+0x184>
    93ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
    93f0:	47a8      	blx	r5
	while (ticker_id_head != TICKER_NULL) {
    93f2:	2eff      	cmp	r6, #255	; 0xff
    93f4:	d19c      	bne.n	9330 <ticker_worker+0x54>
    93f6:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    93fa:	f899 300b 	ldrb.w	r3, [r9, #11]
    93fe:	f899 200a 	ldrb.w	r2, [r9, #10]
    9402:	429a      	cmp	r2, r3
    9404:	d10a      	bne.n	941c <ticker_worker+0x140>
	uint8_t idx = *ticks_elapsed_index + 1;
    9406:	3201      	adds	r2, #1
    9408:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    940a:	2a02      	cmp	r2, #2
    940c:	bf1c      	itt	ne
    940e:	4613      	movne	r3, r2
    9410:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
    9412:	9a04      	ldr	r2, [sp, #16]
    9414:	f889 200b 	strb.w	r2, [r9, #11]
    9418:	bf08      	it	eq
    941a:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    941c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    9420:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    9424:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    9428:	2200      	movs	r2, #0
    942a:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    942e:	464b      	mov	r3, r9
    9430:	2201      	movs	r2, #1
    9432:	2104      	movs	r1, #4
    9434:	2003      	movs	r0, #3
    9436:	46a4      	mov	ip, r4
}
    9438:	b00d      	add	sp, #52	; 0x34
    943a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    943e:	4760      	bx	ip
		if (ticker->timeout_func) {
    9440:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    9442:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    9446:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    9448:	2d00      	cmp	r5, #0
    944a:	d0d2      	beq.n	93f2 <ticker_worker+0x116>
					   ticks_expired -
    944c:	9b02      	ldr	r3, [sp, #8]
    944e:	6962      	ldr	r2, [r4, #20]
    9450:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    9452:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9454:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    9456:	eba8 0202 	sub.w	r2, r8, r2
    945a:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    945c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    9460:	8be2      	ldrh	r2, [r4, #30]
    9462:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    9464:	69a2      	ldr	r2, [r4, #24]
				ticker->lazy_current = 0U;
    9466:	2300      	movs	r3, #0
					slot_reserved = 1U;
    9468:	429a      	cmp	r2, r3
    946a:	9a01      	ldr	r2, [sp, #4]
				ticker->lazy_current = 0U;
    946c:	83e3      	strh	r3, [r4, #30]
					slot_reserved = 1U;
    946e:	bf18      	it	ne
    9470:	2201      	movne	r2, #1
	while (ticker_id_head != TICKER_NULL) {
    9472:	2eff      	cmp	r6, #255	; 0xff
					slot_reserved = 1U;
    9474:	9201      	str	r2, [sp, #4]
				ticker->force = 0U;
    9476:	70e3      	strb	r3, [r4, #3]
	while (ticker_id_head != TICKER_NULL) {
    9478:	f47f af5a 	bne.w	9330 <ticker_worker+0x54>
    947c:	e7bb      	b.n	93f6 <ticker_worker+0x11a>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    947e:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    9482:	9305      	str	r3, [sp, #20]
    9484:	3380      	adds	r3, #128	; 0x80
    9486:	d097      	beq.n	93b8 <ticker_worker+0xdc>
    9488:	2eff      	cmp	r6, #255	; 0xff
    948a:	d095      	beq.n	93b8 <ticker_worker+0xdc>
		int32_t lazy_current = ticker->lazy_current;
    948c:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    948e:	8ba2      	ldrh	r2, [r4, #28]
		int32_t lazy_current = ticker->lazy_current;
    9490:	9303      	str	r3, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
    9492:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
    9494:	bf28      	it	cs
    9496:	1a9b      	subcs	r3, r3, r2
				(lazy_current - ticker->priority);
    9498:	9905      	ldr	r1, [sp, #20]
		uint32_t current_age = ticker->ticks_periodic +
    949a:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
    949c:	f8cd a020 	str.w	sl, [sp, #32]
				(lazy_current - ticker->priority);
    94a0:	1a59      	subs	r1, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
    94a2:	fb03 2302 	mla	r3, r3, r2, r2
    94a6:	9306      	str	r3, [sp, #24]
		uint32_t acc_ticks_to_expire = 0U;
    94a8:	e9cd b809 	strd	fp, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
    94ac:	9107      	str	r1, [sp, #28]
		uint32_t current_age = ticker->ticks_periodic +
    94ae:	4633      	mov	r3, r6
		uint32_t acc_ticks_to_expire = 0U;
    94b0:	2500      	movs	r5, #0
    94b2:	46a1      	mov	r9, r4
    94b4:	960b      	str	r6, [sp, #44]	; 0x2c
    94b6:	9200      	str	r2, [sp, #0]
    94b8:	e02c      	b.n	9514 <ticker_worker+0x238>
				(ticker->ticks_periodic == 0U) ||
    94ba:	9c00      	ldr	r4, [sp, #0]
					  0U :
    94bc:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
    94c0:	2c00      	cmp	r4, #0
    94c2:	d048      	beq.n	9556 <ticker_worker+0x27a>
    94c4:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    94c6:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
    94ca:	4544      	cmp	r4, r8
    94cc:	bf8c      	ite	hi
    94ce:	f04f 0801 	movhi.w	r8, #1
    94d2:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
    94d6:	bf34      	ite	cc
    94d8:	f04f 0a01 	movcc.w	sl, #1
    94dc:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    94e0:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
    94e2:	f892 b003 	ldrb.w	fp, [r2, #3]
    94e6:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    94ea:	d30f      	bcc.n	950c <ticker_worker+0x230>
    94ec:	4593      	cmp	fp, r2
    94ee:	d843      	bhi.n	9578 <ticker_worker+0x29c>
			    (next_force ||
    94f0:	f11e 0f80 	cmn.w	lr, #128	; 0x80
    94f4:	d040      	beq.n	9578 <ticker_worker+0x29c>
			     next_is_critical ||
    94f6:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
    94f8:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
    94fc:	4594      	cmp	ip, r2
    94fe:	dd02      	ble.n	9506 <ticker_worker+0x22a>
			     (next_has_priority && !current_is_older) ||
    9500:	f1b8 0f00 	cmp.w	r8, #0
    9504:	d038      	beq.n	9578 <ticker_worker+0x29c>
    9506:	9a05      	ldr	r2, [sp, #20]
    9508:	4572      	cmp	r2, lr
    950a:	d032      	beq.n	9572 <ticker_worker+0x296>
			id_head = ticker_next->next;
    950c:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
    950e:	2bff      	cmp	r3, #255	; 0xff
    9510:	f43f af4c 	beq.w	93ac <ticker_worker+0xd0>
			struct ticker_node *ticker_next = &nodes[id_head];
    9514:	b21b      	sxth	r3, r3
    9516:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    951a:	eb07 1203 	add.w	r2, r7, r3, lsl #4
    951e:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    9520:	f8d2 8008 	ldr.w	r8, [r2, #8]
    9524:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    9526:	42a8      	cmp	r0, r5
    9528:	f4ff af40 	bcc.w	93ac <ticker_worker+0xd0>
			if (ticker_next->ticks_slot == 0U) {
    952c:	6991      	ldr	r1, [r2, #24]
    952e:	2900      	cmp	r1, #0
    9530:	d0ec      	beq.n	950c <ticker_worker+0x230>
			int32_t lazy_next = ticker_next->lazy_current;
    9532:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    9534:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    9536:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    953a:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    953e:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
    9540:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
    9542:	bf28      	it	cs
    9544:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
    9548:	f1ba 0f00 	cmp.w	sl, #0
    954c:	d1b5      	bne.n	94ba <ticker_worker+0x1de>
				(ticker->ticks_periodic == 0U) ||
    954e:	9c00      	ldr	r4, [sp, #0]
					  0U :
    9550:	46d0      	mov	r8, sl
				(ticker->ticks_periodic == 0U) ||
    9552:	2c00      	cmp	r4, #0
    9554:	d1b6      	bne.n	94c4 <ticker_worker+0x1e8>
					(ticker->ticks_periodic != 0U) &&
    9556:	f8dd a000 	ldr.w	sl, [sp]
				(ticker->ticks_periodic == 0U) ||
    955a:	f04f 0801 	mov.w	r8, #1
    955e:	e7bf      	b.n	94e0 <ticker_worker+0x204>
			    TICKER_RESCHEDULE_STATE_NONE &&
    9560:	8ba2      	ldrh	r2, [r4, #28]
    9562:	9903      	ldr	r1, [sp, #12]
    9564:	428a      	cmp	r2, r1
    9566:	f63f af07 	bhi.w	9378 <ticker_worker+0x9c>
				ext_data->reschedule_state =
    956a:	f04f 0201 	mov.w	r2, #1
    956e:	721a      	strb	r2, [r3, #8]
    9570:	e704      	b.n	937c <ticker_worker+0xa0>
			     (equal_priority && next_is_older))) {
    9572:	f1ba 0f00 	cmp.w	sl, #0
    9576:	d0c9      	beq.n	950c <ticker_worker+0x230>
    9578:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
    957c:	f8dd a020 	ldr.w	sl, [sp, #32]
    9580:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9582:	464c      	mov	r4, r9
    9584:	e6f0      	b.n	9368 <ticker_worker+0x8c>
	uint8_t slot_reserved = 0;
    9586:	9b04      	ldr	r3, [sp, #16]
    9588:	9301      	str	r3, [sp, #4]
    958a:	e6c9      	b.n	9320 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    958c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    958e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    9592:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    9594:	2d00      	cmp	r5, #0
    9596:	f43f af2c 	beq.w	93f2 <ticker_worker+0x116>
					   ticks_expired -
    959a:	9b02      	ldr	r3, [sp, #8]
    959c:	6960      	ldr	r0, [r4, #20]
    959e:	695a      	ldr	r2, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    95a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    95a2:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    95a4:	eba8 0000 	sub.w	r0, r8, r0
    95a8:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    95aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    95ae:	e71d      	b.n	93ec <ticker_worker+0x110>

000095b0 <ticker_job>:
	if (instance->worker_trigger) {
    95b0:	7fc2      	ldrb	r2, [r0, #31]
    95b2:	2a00      	cmp	r2, #0
    95b4:	f040 862f 	bne.w	a216 <ticker_job+0xc66>
{
    95b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    95bc:	7a83      	ldrb	r3, [r0, #10]
    95be:	7ac1      	ldrb	r1, [r0, #11]
{
    95c0:	b08f      	sub	sp, #60	; 0x3c
    95c2:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
    95c4:	6940      	ldr	r0, [r0, #20]
    95c6:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    95c8:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
    95ca:	f04f 0001 	mov.w	r0, #1
    95ce:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    95d2:	f000 8096 	beq.w	9702 <ticker_job+0x152>
	uint8_t idx = *ticks_elapsed_index + 1;
    95d6:	4403      	add	r3, r0
    95d8:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    95da:	2b02      	cmp	r3, #2
		idx = 0U;
    95dc:	bf08      	it	eq
    95de:	4613      	moveq	r3, r2
		ticks_elapsed =
    95e0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    95e4:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    95e8:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
    95ea:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
    95ec:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    95ee:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    95f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    95f4:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
    95f8:	2301      	movs	r3, #1
    95fa:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
    95fc:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    9600:	f89b 201d 	ldrb.w	r2, [fp, #29]
    9604:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    9606:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
    960a:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
    960e:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
    9610:	9204      	str	r2, [sp, #16]
	while (count_user--) {
    9612:	461a      	mov	r2, r3
    9614:	3b01      	subs	r3, #1
	users = &instance->users[0];
    9616:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
    9618:	b2db      	uxtb	r3, r3
    961a:	2a00      	cmp	r2, #0
    961c:	f000 8321 	beq.w	9c62 <ticker_job+0x6b2>
    9620:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
	pending = 0U;
    9624:	2300      	movs	r3, #0
    9626:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    9628:	23ff      	movs	r3, #255	; 0xff
    962a:	9301      	str	r3, [sp, #4]
    962c:	4637      	mov	r7, r6
    962e:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
    9630:	687b      	ldr	r3, [r7, #4]
    9632:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
    9634:	f897 c003 	ldrb.w	ip, [r7, #3]
    9638:	78bb      	ldrb	r3, [r7, #2]
    963a:	46ba      	mov	sl, r7
    963c:	9907      	ldr	r1, [sp, #28]
					ticks_used = 0;
    963e:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
    9640:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    9644:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    9648:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
    964a:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
    964c:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
    9650:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
    9652:	f000 8182 	beq.w	995a <ticker_job+0x3aa>
			if (middle == user->count_user_op) {
    9656:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
    965a:	4298      	cmp	r0, r3
    965c:	bf08      	it	eq
    965e:	2300      	moveq	r3, #0
			user->middle = middle;
    9660:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    9664:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
    9668:	2a04      	cmp	r2, #4
    966a:	f240 8174 	bls.w	9956 <ticker_job+0x3a6>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    966e:	2a07      	cmp	r2, #7
    9670:	f200 8086 	bhi.w	9780 <ticker_job+0x1d0>
			ticker = &node[user_op->id];
    9674:	7869      	ldrb	r1, [r5, #1]
    9676:	9c04      	ldr	r4, [sp, #16]
    9678:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    967c:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    9680:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    9682:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    9684:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
    9686:	7860      	ldrb	r0, [r4, #1]
    9688:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    968a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    968e:	d077      	beq.n	9780 <ticker_job+0x1d0>
			    (state == 0U) ||
    9690:	2a05      	cmp	r2, #5
    9692:	d065      	beq.n	9760 <ticker_job+0x1b0>
			if (state == 1U) {
    9694:	2801      	cmp	r0, #1
    9696:	d137      	bne.n	9708 <ticker_job+0x158>
	previous = instance->ticker_id_head;
    9698:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    969c:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
    96a0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    96a4:	d017      	beq.n	96d6 <ticker_job+0x126>
		ticker_current = &node[current];
    96a6:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
    96aa:	4561      	cmp	r1, ip
		ticker_current = &node[current];
    96ac:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
    96b0:	f000 8090 	beq.w	97d4 <ticker_job+0x224>
	total = 0U;
    96b4:	2300      	movs	r3, #0
    96b6:	e001      	b.n	96bc <ticker_job+0x10c>
		if (current == id) {
    96b8:	4561      	cmp	r1, ip
    96ba:	d070      	beq.n	979e <ticker_job+0x1ee>
		total += ticker_current->ticks_to_expire;
    96bc:	46e6      	mov	lr, ip
		current = ticker_current->next;
    96be:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
    96c2:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
    96c6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
    96ca:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
    96ce:	4443      	add	r3, r8
		ticker_current = &node[current];
    96d0:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
    96d4:	d1f0      	bne.n	96b8 <ticker_job+0x108>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    96d6:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    96d8:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    96da:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    96dc:	f000 8126 	beq.w	992c <ticker_job+0x37c>
		ticker->req = ticker->ack;
    96e0:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    96e2:	f899 301c 	ldrb.w	r3, [r9, #28]
    96e6:	428b      	cmp	r3, r1
    96e8:	d022      	beq.n	9730 <ticker_job+0x180>
	if (user_op->fp_op_func) {
    96ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    96ec:	2000      	movs	r0, #0
    96ee:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
    96f0:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    96f2:	b10b      	cbz	r3, 96f8 <ticker_job+0x148>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    96f4:	6b29      	ldr	r1, [r5, #48]	; 0x30
    96f6:	4798      	blx	r3
    96f8:	f89a c003 	ldrb.w	ip, [sl, #3]
    96fc:	f89a 3002 	ldrb.w	r3, [sl, #2]
    9700:	e79c      	b.n	963c <ticker_job+0x8c>
		flag_elapsed = 0U;
    9702:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
    9704:	9202      	str	r2, [sp, #8]
    9706:	e779      	b.n	95fc <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    9708:	2104      	movs	r1, #4
    970a:	464b      	mov	r3, r9
    970c:	2201      	movs	r2, #1
    970e:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
    9712:	4608      	mov	r0, r1
    9714:	47a0      	blx	r4
	while (count_user--) {
    9716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
    9718:	f88a 8002 	strb.w	r8, [sl, #2]
    971c:	4657      	mov	r7, sl
				pending = 1U;
    971e:	2301      	movs	r3, #1
	while (count_user--) {
    9720:	42ba      	cmp	r2, r7
				pending = 1U;
    9722:	9308      	str	r3, [sp, #32]
    9724:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
    9728:	f000 811e 	beq.w	9968 <ticker_job+0x3b8>
    972c:	461f      	mov	r7, r3
    972e:	e77f      	b.n	9630 <ticker_job+0x80>
			instance->ticker_id_slot_previous = TICKER_NULL;
    9730:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    9732:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    9734:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    9738:	f040 81dd 	bne.w	9af6 <ticker_job+0x546>
				ticks_at_stop =
    973c:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
    973e:	f8d9 3014 	ldr.w	r3, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
    9742:	1ac2      	subs	r2, r0, r3
    9744:	0214      	lsls	r4, r2, #8
    9746:	f100 81cd 	bmi.w	9ae4 <ticker_job+0x534>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    974a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    974e:	9a02      	ldr	r2, [sp, #8]
    9750:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    9752:	f8d9 2018 	ldr.w	r2, [r9, #24]
    9756:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    9758:	bf88      	it	hi
    975a:	f8c9 3018 	strhi.w	r3, [r9, #24]
    975e:	e7c4      	b.n	96ea <ticker_job+0x13a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    9760:	686e      	ldr	r6, [r5, #4]
    9762:	2e00      	cmp	r6, #0
    9764:	d196      	bne.n	9694 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    9766:	68ae      	ldr	r6, [r5, #8]
    9768:	2e00      	cmp	r6, #0
    976a:	d193      	bne.n	9694 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    976c:	68ee      	ldr	r6, [r5, #12]
    976e:	2e00      	cmp	r6, #0
    9770:	d190      	bne.n	9694 <ticker_job+0xe4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    9772:	692e      	ldr	r6, [r5, #16]
    9774:	2e00      	cmp	r6, #0
    9776:	d18d      	bne.n	9694 <ticker_job+0xe4>
			     (user_op->params.update.lazy == 0U) &&
    9778:	696e      	ldr	r6, [r5, #20]
    977a:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
    977e:	d189      	bne.n	9694 <ticker_job+0xe4>
	if (user_op->fp_op_func) {
    9780:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9782:	2100      	movs	r1, #0
	user_op->status = status;
    9784:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9786:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    9788:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    978a:	2a00      	cmp	r2, #0
    978c:	f43f af56 	beq.w	963c <ticker_job+0x8c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9790:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9792:	4790      	blx	r2
    9794:	f89a c003 	ldrb.w	ip, [sl, #3]
    9798:	f89a 3002 	ldrb.w	r3, [sl, #2]
    979c:	e74e      	b.n	963c <ticker_job+0x8c>
	if (previous == current) {
    979e:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
    97a2:	4571      	cmp	r1, lr
    97a4:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    97a8:	d016      	beq.n	97d8 <ticker_job+0x228>
	node[previous].next = ticker_current->next;
    97aa:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
    97ac:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
    97b0:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
    97b2:	29ff      	cmp	r1, #255	; 0xff
    97b4:	d006      	beq.n	97c4 <ticker_job+0x214>
		node[ticker_current->next].ticks_to_expire += timeout;
    97b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    97ba:	eb06 1101 	add.w	r1, r6, r1, lsl #4
    97be:	6888      	ldr	r0, [r1, #8]
    97c0:	4460      	add	r0, ip
    97c2:	6088      	str	r0, [r1, #8]
	return (total + timeout);
    97c4:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    97c8:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    97ca:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    97cc:	d009      	beq.n	97e2 <ticker_job+0x232>
    97ce:	78a7      	ldrb	r7, [r4, #2]
    97d0:	7869      	ldrb	r1, [r5, #1]
    97d2:	e785      	b.n	96e0 <ticker_job+0x130>
		if (current == id) {
    97d4:	4607      	mov	r7, r0
	total = 0U;
    97d6:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
    97d8:	7802      	ldrb	r2, [r0, #0]
    97da:	f889 201d 	strb.w	r2, [r9, #29]
    97de:	782a      	ldrb	r2, [r5, #0]
    97e0:	e7e3      	b.n	97aa <ticker_job+0x1fa>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    97e2:	f8d9 7014 	ldr.w	r7, [r9, #20]
    97e6:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    97e8:	f00a f8a6 	bl	13938 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    97ec:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    97ee:	eba0 0c07 	sub.w	ip, r0, r7
    97f2:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    97f6:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
    97f8:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
    97fa:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
    97fc:	f240 80a2 	bls.w	9944 <ticker_job+0x394>
		ticks_to_expire -= ticks_elapsed;
    9800:	6962      	ldr	r2, [r4, #20]
    9802:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
    9804:	6866      	ldr	r6, [r4, #4]
    9806:	2e00      	cmp	r6, #0
    9808:	d053      	beq.n	98b2 <ticker_job+0x302>
	    (user_op->params.update.lazy != 0U)) {
    980a:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    980c:	2800      	cmp	r0, #0
    980e:	d050      	beq.n	98b2 <ticker_job+0x302>
		user_op->params.update.lazy--;
    9810:	3801      	subs	r0, #1
    9812:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    9814:	429e      	cmp	r6, r3
    9816:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
    9818:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    981a:	d225      	bcs.n	9868 <ticker_job+0x2b8>
    981c:	f106 0b01 	add.w	fp, r6, #1
    9820:	920b      	str	r2, [sp, #44]	; 0x2c
    9822:	e011      	b.n	9848 <ticker_job+0x298>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    9824:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
    9828:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
    982c:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    9830:	46de      	mov	lr, fp
	ticker->remainder_current -= ticker->remainder_periodic;
    9832:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
    9834:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
    9836:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
    983a:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    983c:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    983e:	429e      	cmp	r6, r3
			ticker->lazy_current--;
    9840:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
    9842:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    9844:	d20e      	bcs.n	9864 <ticker_job+0x2b4>
    9846:	8aa8      	ldrh	r0, [r5, #20]
    9848:	4288      	cmp	r0, r1
    984a:	f080 81b2 	bcs.w	9bb2 <ticker_job+0x602>
					   ticker_remainder_dec(ticker);
    984e:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
    9852:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 9b24 <ticker_job+0x574>
					   ticker_remainder_dec(ticker);
    9856:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
    9858:	4ab1      	ldr	r2, [pc, #708]	; (9b20 <ticker_job+0x570>)
    985a:	4486      	add	lr, r0
    985c:	4596      	cmp	lr, r2
    985e:	d8e1      	bhi.n	9824 <ticker_job+0x274>
    9860:	46b6      	mov	lr, r6
    9862:	e7e6      	b.n	9832 <ticker_job+0x282>
    9864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9866:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    9868:	4288      	cmp	r0, r1
    986a:	d921      	bls.n	98b0 <ticker_job+0x300>
					   ticker_remainder_inc(ticker);
    986c:	6a20      	ldr	r0, [r4, #32]
    986e:	9009      	str	r0, [sp, #36]	; 0x24
    9870:	f106 0e01 	add.w	lr, r6, #1
    9874:	920b      	str	r2, [sp, #44]	; 0x2c
    9876:	e007      	b.n	9888 <ticker_job+0x2d8>
	ticker->remainder_current += ticker->remainder_periodic;
    9878:	6260      	str	r0, [r4, #36]	; 0x24
    987a:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
    987c:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
    987e:	3101      	adds	r1, #1
    9880:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    9882:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
    9884:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
    9886:	d211      	bcs.n	98ac <ticker_job+0x2fc>
	ticker->remainder_current += ticker->remainder_periodic;
    9888:	9a09      	ldr	r2, [sp, #36]	; 0x24
    988a:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    988c:	f8df b294 	ldr.w	fp, [pc, #660]	; 9b24 <ticker_job+0x574>
	ticker->remainder_current += ticker->remainder_periodic;
    9890:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
    9892:	4aa3      	ldr	r2, [pc, #652]	; (9b20 <ticker_job+0x570>)
    9894:	4483      	add	fp, r0
    9896:	4593      	cmp	fp, r2
    9898:	d8ee      	bhi.n	9878 <ticker_job+0x2c8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    989a:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
    989e:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
    98a2:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
    98a6:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
    98a8:	46f3      	mov	fp, lr
    98aa:	e7e7      	b.n	987c <ticker_job+0x2cc>
    98ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    98ae:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    98b0:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
    98b2:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    98b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    98b8:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
    98ba:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
    98bc:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    98be:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    98c0:	b136      	cbz	r6, 98d0 <ticker_job+0x320>
    98c2:	6831      	ldr	r1, [r6, #0]
    98c4:	b121      	cbz	r1, 98d0 <ticker_job+0x320>
			user_op->params.update.ticks_drift_plus -
    98c6:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
    98ca:	6070      	str	r0, [r6, #4]
    98cc:	68a3      	ldr	r3, [r4, #8]
    98ce:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    98d0:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
    98d4:	d121      	bne.n	991a <ticker_job+0x36a>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    98d6:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    98d8:	4293      	cmp	r3, r2
    98da:	d91b      	bls.n	9914 <ticker_job+0x364>
		ticks_to_expire -= ticks_to_expire_minus;
    98dc:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
    98de:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
    98e0:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    98e2:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    98e4:	68e9      	ldr	r1, [r5, #12]
    98e6:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    98e8:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    98ea:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    98ec:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    98ee:	bf88      	it	hi
    98f0:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
    98f2:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
    98f4:	bf98      	it	ls
    98f6:	2300      	movls	r3, #0
    98f8:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    98fa:	b102      	cbz	r2, 98fe <ticker_job+0x34e>
		ticker->force = user_op->params.update.force;
    98fc:	70e2      	strb	r2, [r4, #3]
	ticker->next = *insert_head;
    98fe:	9b04      	ldr	r3, [sp, #16]
    9900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9902:	4619      	mov	r1, r3
    9904:	9b01      	ldr	r3, [sp, #4]
    9906:	548b      	strb	r3, [r1, r2]
		ticker->req++;
    9908:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    990a:	786a      	ldrb	r2, [r5, #1]
    990c:	9201      	str	r2, [sp, #4]
		ticker->req++;
    990e:	3301      	adds	r3, #1
    9910:	7063      	strb	r3, [r4, #1]
    9912:	e6ea      	b.n	96ea <ticker_job+0x13a>
    9914:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
    9916:	2300      	movs	r3, #0
    9918:	e7e2      	b.n	98e0 <ticker_job+0x330>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    991a:	9903      	ldr	r1, [sp, #12]
    991c:	eba1 0708 	sub.w	r7, r1, r8
    9920:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    9924:	429f      	cmp	r7, r3
    9926:	d213      	bcs.n	9950 <ticker_job+0x3a0>
			ticks_to_expire -= delta_current_start;
    9928:	1bdb      	subs	r3, r3, r7
    992a:	e7d5      	b.n	98d8 <ticker_job+0x328>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    992c:	f8d9 7014 	ldr.w	r7, [r9, #20]
    9930:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    9932:	f00a f801 	bl	13938 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    9936:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9938:	eba0 0c07 	sub.w	ip, r0, r7
    993c:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    9940:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    9942:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
    9944:	6961      	ldr	r1, [r4, #20]
    9946:	440b      	add	r3, r1
    9948:	1b9a      	subs	r2, r3, r6
    994a:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
    994c:	2300      	movs	r3, #0
    994e:	e759      	b.n	9804 <ticker_job+0x254>
			ticks_to_expire_minus +=
    9950:	443a      	add	r2, r7
    9952:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    9954:	e7df      	b.n	9916 <ticker_job+0x366>
    9956:	4698      	mov	r8, r3
    9958:	e672      	b.n	9640 <ticker_job+0x90>
	while (count_user--) {
    995a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    995c:	4657      	mov	r7, sl
    995e:	42ba      	cmp	r2, r7
    9960:	f1a7 0308 	sub.w	r3, r7, #8
    9964:	f47f aee2 	bne.w	972c <ticker_job+0x17c>
    9968:	f899 701d 	ldrb.w	r7, [r9, #29]
    996c:	9b06      	ldr	r3, [sp, #24]
    996e:	1bdb      	subs	r3, r3, r7
    9970:	bf18      	it	ne
    9972:	2301      	movne	r3, #1
    9974:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
    9976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9978:	46cb      	mov	fp, r9
    997a:	2b00      	cmp	r3, #0
    997c:	f040 8179 	bne.w	9c72 <ticker_job+0x6c2>
	count_user = instance->count_user;
    9980:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
    9984:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
    9988:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
    998c:	9304      	str	r3, [sp, #16]
	while (count_user--) {
    998e:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    9990:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    9992:	b2db      	uxtb	r3, r3
    9994:	2a00      	cmp	r2, #0
    9996:	f000 8110 	beq.w	9bba <ticker_job+0x60a>
    999a:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    999e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    99a0:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    99a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    99a6:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    99aa:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    99ac:	9b01      	ldr	r3, [sp, #4]
    99ae:	2bff      	cmp	r3, #255	; 0xff
    99b0:	d05e      	beq.n	9a70 <ticker_job+0x4c0>
				ticker = &node[id_insert];
    99b2:	f8dd a004 	ldr.w	sl, [sp, #4]
    99b6:	9b04      	ldr	r3, [sp, #16]
    99b8:	fa0f f48a 	sxth.w	r4, sl
    99bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    99c0:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    99c4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    99c8:	f813 300c 	ldrb.w	r3, [r3, ip]
    99cc:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    99ce:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    99d0:	22ff      	movs	r2, #255	; 0xff
    99d2:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    99d4:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    99d8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    99dc:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    99e0:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    99e2:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    99e4:	bf18      	it	ne
    99e6:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    99e8:	d111      	bne.n	9a0e <ticker_job+0x45e>
    99ea:	e093      	b.n	9b14 <ticker_job+0x564>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    99ec:	ebb1 010c 	subs.w	r1, r1, ip
    99f0:	d106      	bne.n	9a00 <ticker_job+0x450>
    99f2:	f8be e01e 	ldrh.w	lr, [lr, #30]
    99f6:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    99fa:	45f1      	cmp	r9, lr
    99fc:	f200 80d6 	bhi.w	9bac <ticker_job+0x5fc>
		current = ticker_current->next;
    9a00:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9a04:	9302      	str	r3, [sp, #8]
    9a06:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    9a0a:	d077      	beq.n	9afc <ticker_job+0x54c>
    9a0c:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    9a0e:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    9a12:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    9a16:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    9a1a:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9a1e:	458c      	cmp	ip, r1
    9a20:	d9e4      	bls.n	99ec <ticker_job+0x43c>
    9a22:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    9a24:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    9a26:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    9a28:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    9a2a:	d16c      	bne.n	9b06 <ticker_job+0x556>
		instance->ticker_id_head = id;
    9a2c:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    9a30:	2bff      	cmp	r3, #255	; 0xff
    9a32:	d006      	beq.n	9a42 <ticker_job+0x492>
		node[current].ticks_to_expire -= ticks_to_expire;
    9a34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9a38:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    9a3c:	68bb      	ldr	r3, [r7, #8]
    9a3e:	1a59      	subs	r1, r3, r1
    9a40:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    9a42:	78a3      	ldrb	r3, [r4, #2]
    9a44:	3301      	adds	r3, #1
    9a46:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    9a48:	2d00      	cmp	r5, #0
    9a4a:	d0af      	beq.n	99ac <ticker_job+0x3fc>
	if (user_op->fp_op_func) {
    9a4c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9a4e:	9a03      	ldr	r2, [sp, #12]
    9a50:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    9a52:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    9a54:	b113      	cbz	r3, 9a5c <ticker_job+0x4ac>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9a56:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9a58:	2000      	movs	r0, #0
    9a5a:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    9a5c:	6863      	ldr	r3, [r4, #4]
    9a5e:	2b00      	cmp	r3, #0
    9a60:	d1a4      	bne.n	99ac <ticker_job+0x3fc>
					ticker->op_context =
    9a62:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    9a66:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    9a6a:	9b01      	ldr	r3, [sp, #4]
    9a6c:	2bff      	cmp	r3, #255	; 0xff
    9a6e:	d1a0      	bne.n	99b2 <ticker_job+0x402>
    9a70:	f898 3002 	ldrb.w	r3, [r8, #2]
    9a74:	42b3      	cmp	r3, r6
    9a76:	d02e      	beq.n	9ad6 <ticker_job+0x526>
    9a78:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    9a7a:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    9a7e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    9a82:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    9a86:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    9a88:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    9a8c:	b2f6      	uxtb	r6, r6
					first = 0U;
    9a8e:	42b0      	cmp	r0, r6
    9a90:	bf08      	it	eq
    9a92:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    9a94:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    9a96:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    9a9a:	d11a      	bne.n	9ad2 <ticker_job+0x522>
				id_insert = user_op->id;
    9a9c:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    9aa0:	9b04      	ldr	r3, [sp, #16]
    9aa2:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    9aa6:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    9aaa:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    9aae:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    9ab0:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    9ab2:	1ac9      	subs	r1, r1, r3
    9ab4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    9ab8:	d036      	beq.n	9b28 <ticker_job+0x578>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9aba:	9b03      	ldr	r3, [sp, #12]
    9abc:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    9ac0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    9ac2:	2201      	movs	r2, #1
    9ac4:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9ac6:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    9ac8:	b10b      	cbz	r3, 9ace <ticker_job+0x51e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9aca:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9acc:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    9ace:	f898 3002 	ldrb.w	r3, [r8, #2]
    9ad2:	42b3      	cmp	r3, r6
    9ad4:	d1d1      	bne.n	9a7a <ticker_job+0x4ca>
	while (count_user--) {
    9ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9ad8:	4542      	cmp	r2, r8
    9ada:	f1a8 0308 	sub.w	r3, r8, #8
    9ade:	d06a      	beq.n	9bb6 <ticker_job+0x606>
    9ae0:	4698      	mov	r8, r3
    9ae2:	e75e      	b.n	99a2 <ticker_job+0x3f2>
				if (ticks_elapsed > ticks_used) {
    9ae4:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9ae6:	1a1b      	subs	r3, r3, r0
    9ae8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    9aec:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    9aee:	bf8c      	ite	hi
    9af0:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    9af2:	2300      	movls	r3, #0
    9af4:	e62d      	b.n	9752 <ticker_job+0x1a2>
				ticks_at_stop = cntr_cnt_get();
    9af6:	f009 ff1f 	bl	13938 <cntr_cnt_get>
    9afa:	e620      	b.n	973e <ticker_job+0x18e>
	ticker_new->next = current;
    9afc:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    9afe:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    9b00:	f880 c000 	strb.w	ip, [r0]
    9b04:	4663      	mov	r3, ip
		node[previous].next = id;
    9b06:	b212      	sxth	r2, r2
    9b08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9b0c:	0112      	lsls	r2, r2, #4
    9b0e:	f807 a002 	strb.w	sl, [r7, r2]
    9b12:	e78d      	b.n	9a30 <ticker_job+0x480>
	ticker_new->next = current;
    9b14:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    9b18:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    9b1c:	e791      	b.n	9a42 <ticker_job+0x492>
    9b1e:	bf00      	nop
    9b20:	7f172b59 	.word	0x7f172b59
    9b24:	ff172b5a 	.word	0xff172b5a
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    9b28:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    9b2a:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    9b2e:	6a68      	ldr	r0, [r5, #36]	; 0x24
    9b30:	f64f 79ff 	movw	r9, #65535	; 0xffff
    9b34:	454f      	cmp	r7, r9
    9b36:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
    9b3a:	d02e      	beq.n	9b9a <ticker_job+0x5ea>
    9b3c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    9b40:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    9b42:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    9b44:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
    9b46:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    9b4a:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    9b4c:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    9b4e:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    9b50:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    9b52:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    9b56:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    9b5a:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    9b5c:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    9b5e:	d40c      	bmi.n	9b7a <ticker_job+0x5ca>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9b60:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    9b64:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    9b66:	b18b      	cbz	r3, 9b8c <ticker_job+0x5dc>
	ticker->ticks_to_expire = ticks_to_expire;
    9b68:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    9b6a:	9b03      	ldr	r3, [sp, #12]
    9b6c:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    9b6e:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    9b70:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    9b74:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    9b76:	70e3      	strb	r3, [r4, #3]
}
    9b78:	e72a      	b.n	99d0 <ticker_job+0x420>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9b7a:	ebae 0200 	sub.w	r2, lr, r0
    9b7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    9b82:	4293      	cmp	r3, r2
    9b84:	d905      	bls.n	9b92 <ticker_job+0x5e2>
			ticks_to_expire -= delta_current_start;
    9b86:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    9b88:	2b00      	cmp	r3, #0
    9b8a:	d1ed      	bne.n	9b68 <ticker_job+0x5b8>
		ticks_to_expire_minus -= ticks_to_expire;
    9b8c:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    9b8e:	2300      	movs	r3, #0
    9b90:	e7ea      	b.n	9b68 <ticker_job+0x5b8>
			    (delta_current_start - ticks_to_expire);
    9b92:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    9b94:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    9b96:	2300      	movs	r3, #0
    9b98:	e7e6      	b.n	9b68 <ticker_job+0x5b8>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    9b9a:	f04f 0701 	mov.w	r7, #1
    9b9e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    9ba2:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    9ba4:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    9ba6:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    9ba8:	460f      	mov	r7, r1
    9baa:	e7cc      	b.n	9b46 <ticker_job+0x596>
    9bac:	9a02      	ldr	r2, [sp, #8]
    9bae:	4661      	mov	r1, ip
    9bb0:	e738      	b.n	9a24 <ticker_job+0x474>
    9bb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9bb4:	e658      	b.n	9868 <ticker_job+0x2b8>
    9bb6:	f89b 701d 	ldrb.w	r7, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
    9bba:	9b06      	ldr	r3, [sp, #24]
    9bbc:	42bb      	cmp	r3, r7
    9bbe:	f000 8334 	beq.w	a22a <ticker_job+0xc7a>
	if (!pending) {
    9bc2:	9b08      	ldr	r3, [sp, #32]
    9bc4:	2b00      	cmp	r3, #0
    9bc6:	f000 8356 	beq.w	a276 <ticker_job+0xcc6>
	instance->job_guard = 0U;
    9bca:	2300      	movs	r3, #0
    9bcc:	f89b 701d 	ldrb.w	r7, [fp, #29]
    9bd0:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
    9bd4:	2fff      	cmp	r7, #255	; 0xff
    9bd6:	f000 83dc 	beq.w	a392 <ticker_job+0xde2>
	if (ticker_id_old_head == TICKER_NULL) {
    9bda:	9b06      	ldr	r3, [sp, #24]
    9bdc:	2bff      	cmp	r3, #255	; 0xff
    9bde:	f000 83f6 	beq.w	a3ce <ticker_job+0xe1e>
	ticks_to_expire = ticker->ticks_to_expire;
    9be2:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    9be6:	f8df 9300 	ldr.w	r9, [pc, #768]	; 9ee8 <ticker_job+0x938>
    9bea:	f8df 8300 	ldr.w	r8, [pc, #768]	; 9eec <ticker_job+0x93c>
    9bee:	4ebd      	ldr	r6, [pc, #756]	; (9ee4 <ticker_job+0x934>)
	ticker = &instance->nodes[instance->ticker_id_head];
    9bf0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    9bf4:	eb03 1307 	add.w	r3, r3, r7, lsl #4
	i = 10U;
    9bf8:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    9bfa:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
    9bfc:	f009 fe9c 	bl	13938 <cntr_cnt_get>
		cc = instance->ticks_current;
    9c00:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
    9c04:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9c08:	1ac4      	subs	r4, r0, r3
    9c0a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    9c0e:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    9c10:	42bc      	cmp	r4, r7
    9c12:	bf2c      	ite	cs
    9c14:	191b      	addcs	r3, r3, r4
    9c16:	19db      	addcc	r3, r3, r7
		cc &= HAL_TICKER_CNTR_MASK;
    9c18:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    9c1c:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    9c1e:	4620      	mov	r0, r4
    9c20:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
    9c22:	f009 fe89 	bl	13938 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9c26:	eba0 000a 	sub.w	r0, r0, sl
    9c2a:	eba4 040a 	sub.w	r4, r4, sl
    9c2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9c32:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    9c36:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    9c38:	42a0      	cmp	r0, r4
		i--;
    9c3a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    9c3e:	f240 82ff 	bls.w	a240 <ticker_job+0xc90>
		LL_ASSERT(i);
    9c42:	2d00      	cmp	r5, #0
    9c44:	d1da      	bne.n	9bfc <ticker_job+0x64c>
    9c46:	f640 039a 	movw	r3, #2202	; 0x89a
    9c4a:	464a      	mov	r2, r9
    9c4c:	4641      	mov	r1, r8
    9c4e:	4630      	mov	r0, r6
    9c50:	f014 f84d 	bl	1dcee <printk>
    9c54:	4040      	eors	r0, r0
    9c56:	f380 8811 	msr	BASEPRI, r0
    9c5a:	f04f 0003 	mov.w	r0, #3
    9c5e:	df02      	svc	2
    9c60:	e7cc      	b.n	9bfc <ticker_job+0x64c>
	if (flag_elapsed) {
    9c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9c64:	2b00      	cmp	r3, #0
    9c66:	f000 82f9 	beq.w	a25c <ticker_job+0xcac>
	pending = 0U;
    9c6a:	9b07      	ldr	r3, [sp, #28]
    9c6c:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    9c6e:	23ff      	movs	r3, #255	; 0xff
    9c70:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    9c72:	f009 fe61 	bl	13938 <cntr_cnt_get>
	node = &instance->nodes[0];
    9c76:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
    9c7a:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
    9c7e:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9c80:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
    9c82:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9c84:	eba0 0003 	sub.w	r0, r0, r3
    9c88:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    9c8c:	d054      	beq.n	9d38 <ticker_job+0x788>
    9c8e:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
    9c92:	f04f 0900 	mov.w	r9, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
    9c96:	464b      	mov	r3, r9
    9c98:	46d1      	mov	r9, sl
    9c9a:	46c2      	mov	sl, r8
    9c9c:	4698      	mov	r8, r3
		ticker = &node[id_expired];
    9c9e:	9b03      	ldr	r3, [sp, #12]
    9ca0:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    9ca4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    9ca8:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    9caa:	454b      	cmp	r3, r9
    9cac:	f200 82dc 	bhi.w	a268 <ticker_job+0xcb8>
		is_must_expire_skip = (ticker->must_expire &&
    9cb0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
		ticks_elapsed -= ticks_to_expire;
    9cb4:	eba9 0903 	sub.w	r9, r9, r3
		ticks_expired += ticks_to_expire;
    9cb8:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
    9cba:	ebaa 0a03 	sub.w	sl, sl, r3
		is_must_expire_skip = (ticker->must_expire &&
    9cbe:	2900      	cmp	r1, #0
    9cc0:	f000 8138 	beq.w	9f34 <ticker_job+0x984>
    9cc4:	8be6      	ldrh	r6, [r4, #30]
    9cc6:	3e00      	subs	r6, #0
    9cc8:	bf18      	it	ne
    9cca:	2601      	movne	r6, #1
		if (instance->ticks_slot_previous > ticks_to_expire) {
    9ccc:	f8db 2018 	ldr.w	r2, [fp, #24]
    9cd0:	4293      	cmp	r3, r2
			instance->ticker_id_slot_previous = TICKER_NULL;
    9cd2:	bf25      	ittet	cs
    9cd4:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    9cd8:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    9cdc:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    9cde:	2300      	movcs	r3, #0
		if ((ticker->ticks_slot != 0U) &&
    9ce0:	69a7      	ldr	r7, [r4, #24]
			instance->ticks_slot_previous = 0U;
    9ce2:	f8cb 3018 	str.w	r3, [fp, #24]
    9ce6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9ce8:	6860      	ldr	r0, [r4, #4]
    9cea:	f894 c000 	ldrb.w	ip, [r4]
		if ((ticker->ticks_slot != 0U) &&
    9cee:	b147      	cbz	r7, 9d02 <ticker_job+0x752>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
    9cf0:	7863      	ldrb	r3, [r4, #1]
    9cf2:	f894 e002 	ldrb.w	lr, [r4, #2]
    9cf6:	eba3 030e 	sub.w	r3, r3, lr
    9cfa:	b2db      	uxtb	r3, r3
		if ((ticker->ticks_slot != 0U) &&
    9cfc:	2b02      	cmp	r3, #2
    9cfe:	f000 8147 	beq.w	9f90 <ticker_job+0x9e0>
		ticker->ticks_to_expire = 0U;
    9d02:	2300      	movs	r3, #0
    9d04:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
    9d06:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    9d0a:	2800      	cmp	r0, #0
    9d0c:	f040 80d6 	bne.w	9ebc <ticker_job+0x90c>
    9d10:	b11a      	cbz	r2, 9d1a <ticker_job+0x76a>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    9d12:	7a13      	ldrb	r3, [r2, #8]
    9d14:	2b01      	cmp	r3, #1
    9d16:	f000 8115 	beq.w	9f44 <ticker_job+0x994>
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
    9d1a:	78a2      	ldrb	r2, [r4, #2]
    9d1c:	7860      	ldrb	r0, [r4, #1]
    9d1e:	1a80      	subs	r0, r0, r2
    9d20:	b2c0      	uxtb	r0, r0
    9d22:	2801      	cmp	r0, #1
    9d24:	f000 80c2 	beq.w	9eac <ticker_job+0x8fc>
			ticker->req = ticker->ack;
    9d28:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    9d2a:	f89b 501d 	ldrb.w	r5, [fp, #29]
    9d2e:	2dff      	cmp	r5, #255	; 0xff
    9d30:	d1b5      	bne.n	9c9e <ticker_job+0x6ee>
    9d32:	f8db 3000 	ldr.w	r3, [fp]
    9d36:	9303      	str	r3, [sp, #12]
			flag_compare_update = 1U;
    9d38:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
	count_user = instance->count_user;
    9d3c:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    9d40:	f8db 1004 	ldr.w	r1, [fp, #4]
    9d44:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    9d46:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
    9d48:	42ac      	cmp	r4, r5
    9d4a:	bf18      	it	ne
    9d4c:	2001      	movne	r0, #1
    9d4e:	9007      	str	r0, [sp, #28]
	while (count_user--) {
    9d50:	b2db      	uxtb	r3, r3
    9d52:	2a00      	cmp	r2, #0
    9d54:	f000 818a 	beq.w	a06c <ticker_job+0xabc>
    9d58:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
    9d5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    9d60:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    9d64:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    9d66:	9b01      	ldr	r3, [sp, #4]
    9d68:	2bff      	cmp	r3, #255	; 0xff
    9d6a:	d062      	beq.n	9e32 <ticker_job+0x882>
				ticker = &node[id_insert];
    9d6c:	f8dd a004 	ldr.w	sl, [sp, #4]
    9d70:	9b03      	ldr	r3, [sp, #12]
    9d72:	fa0f f48a 	sxth.w	r4, sl
    9d76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    9d7a:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    9d7e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    9d82:	f813 300c 	ldrb.w	r3, [r3, ip]
    9d86:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    9d88:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    9d8a:	22ff      	movs	r2, #255	; 0xff
    9d8c:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    9d8e:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    9d92:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    9d96:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9d9a:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    9d9c:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    9d9e:	bf18      	it	ne
    9da0:	9204      	strne	r2, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9da2:	d112      	bne.n	9dca <ticker_job+0x81a>
    9da4:	e15a      	b.n	a05c <ticker_job+0xaac>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    9da6:	ebb1 010c 	subs.w	r1, r1, ip
    9daa:	d106      	bne.n	9dba <ticker_job+0x80a>
    9dac:	f8be e01e 	ldrh.w	lr, [lr, #30]
    9db0:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    9db4:	45f1      	cmp	r9, lr
    9db6:	f200 810c 	bhi.w	9fd2 <ticker_job+0xa22>
		current = ticker_current->next;
    9dba:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9dbe:	9304      	str	r3, [sp, #16]
    9dc0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    9dc4:	f000 80f9 	beq.w	9fba <ticker_job+0xa0a>
    9dc8:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    9dca:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    9dce:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    9dd2:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    9dd6:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9dda:	458c      	cmp	ip, r1
    9ddc:	d9e3      	bls.n	9da6 <ticker_job+0x7f6>
    9dde:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
    9de0:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    9de2:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    9de4:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    9de6:	f040 80ed 	bne.w	9fc4 <ticker_job+0xa14>
		instance->ticker_id_head = id;
    9dea:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    9dee:	2bff      	cmp	r3, #255	; 0xff
    9df0:	d006      	beq.n	9e00 <ticker_job+0x850>
		node[current].ticks_to_expire -= ticks_to_expire;
    9df2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9df6:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    9dfa:	68bb      	ldr	r3, [r7, #8]
    9dfc:	1a59      	subs	r1, r3, r1
    9dfe:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    9e00:	78a3      	ldrb	r3, [r4, #2]
    9e02:	3301      	adds	r3, #1
    9e04:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    9e06:	2d00      	cmp	r5, #0
    9e08:	d0ad      	beq.n	9d66 <ticker_job+0x7b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9e0a:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    9e0e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9e10:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    9e12:	2200      	movs	r2, #0
    9e14:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    9e16:	b113      	cbz	r3, 9e1e <ticker_job+0x86e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9e18:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9e1a:	4610      	mov	r0, r2
    9e1c:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    9e1e:	6863      	ldr	r3, [r4, #4]
    9e20:	2b00      	cmp	r3, #0
    9e22:	d1a0      	bne.n	9d66 <ticker_job+0x7b6>
					ticker->op_context =
    9e24:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    9e28:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    9e2c:	9b01      	ldr	r3, [sp, #4]
    9e2e:	2bff      	cmp	r3, #255	; 0xff
    9e30:	d19c      	bne.n	9d6c <ticker_job+0x7bc>
    9e32:	f898 3002 	ldrb.w	r3, [r8, #2]
    9e36:	42b3      	cmp	r3, r6
    9e38:	d030      	beq.n	9e9c <ticker_job+0x8ec>
    9e3a:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    9e3c:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    9e40:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    9e44:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    9e48:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    9e4a:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    9e4e:	b2f6      	uxtb	r6, r6
					first = 0U;
    9e50:	42b0      	cmp	r0, r6
    9e52:	bf08      	it	eq
    9e54:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    9e56:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    9e58:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    9e5c:	d11c      	bne.n	9e98 <ticker_job+0x8e8>
				id_insert = user_op->id;
    9e5e:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    9e62:	9b03      	ldr	r3, [sp, #12]
    9e64:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    9e68:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    9e6c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    9e70:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    9e72:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    9e74:	1ac9      	subs	r1, r1, r3
    9e76:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    9e7a:	f000 80ad 	beq.w	9fd8 <ticker_job+0xa28>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9e7e:	f04f 0300 	mov.w	r3, #0
    9e82:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    9e86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    9e88:	2201      	movs	r2, #1
    9e8a:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9e8c:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    9e8e:	b10b      	cbz	r3, 9e94 <ticker_job+0x8e4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9e90:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9e92:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    9e94:	f898 3002 	ldrb.w	r3, [r8, #2]
    9e98:	42b3      	cmp	r3, r6
    9e9a:	d1cf      	bne.n	9e3c <ticker_job+0x88c>
	while (count_user--) {
    9e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9e9e:	4542      	cmp	r2, r8
    9ea0:	f1a8 0308 	sub.w	r3, r8, #8
    9ea4:	f000 80df 	beq.w	a066 <ticker_job+0xab6>
    9ea8:	4698      	mov	r8, r3
    9eaa:	e757      	b.n	9d5c <ticker_job+0x7ac>
			    ticker->fp_op_func) {
    9eac:	6a23      	ldr	r3, [r4, #32]
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
    9eae:	2b00      	cmp	r3, #0
    9eb0:	f43f af3a 	beq.w	9d28 <ticker_job+0x778>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    9eb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9eb6:	4798      	blx	r3
    9eb8:	78a2      	ldrb	r2, [r4, #2]
    9eba:	e735      	b.n	9d28 <ticker_job+0x778>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    9ebc:	b112      	cbz	r2, 9ec4 <ticker_job+0x914>
    9ebe:	7a13      	ldrb	r3, [r2, #8]
    9ec0:	2b01      	cmp	r3, #1
    9ec2:	d03f      	beq.n	9f44 <ticker_job+0x994>
				if (!ticker->lazy_current) {
    9ec4:	8be3      	ldrh	r3, [r4, #30]
    9ec6:	930a      	str	r3, [sp, #40]	; 0x28
    9ec8:	2b00      	cmp	r3, #0
    9eca:	d170      	bne.n	9fae <ticker_job+0x9fe>
					lazy_periodic = ticker->lazy_periodic;
    9ecc:	8ba3      	ldrh	r3, [r4, #28]
    9ece:	7866      	ldrb	r6, [r4, #1]
    9ed0:	9304      	str	r3, [sp, #16]
    9ed2:	469e      	mov	lr, r3
				while (count--) {
    9ed4:	1c47      	adds	r7, r0, #1
    9ed6:	9709      	str	r7, [sp, #36]	; 0x24
    9ed8:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
				ticks_to_expire = 0U;
    9edc:	2300      	movs	r3, #0
    9ede:	910b      	str	r1, [sp, #44]	; 0x2c
    9ee0:	4677      	mov	r7, lr
    9ee2:	e00a      	b.n	9efa <ticker_job+0x94a>
    9ee4:	000275f0 	.word	0x000275f0
    9ee8:	000275b0 	.word	0x000275b0
    9eec:	0002765c 	.word	0x0002765c
				while (count--) {
    9ef0:	3f01      	subs	r7, #1
    9ef2:	4686      	mov	lr, r0
    9ef4:	1c79      	adds	r1, r7, #1
					ticks_to_expire +=
    9ef6:	4473      	add	r3, lr
				while (count--) {
    9ef8:	d012      	beq.n	9f20 <ticker_job+0x970>
	if ((ticker->remainder_current < BIT(31)) &&
    9efa:	f8df e2d8 	ldr.w	lr, [pc, #728]	; a1d4 <ticker_job+0xc24>
    9efe:	49b4      	ldr	r1, [pc, #720]	; (a1d0 <ticker_job+0xc20>)
	ticker->remainder_current += ticker->remainder_periodic;
    9f00:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
    9f02:	4496      	add	lr, r2
    9f04:	458e      	cmp	lr, r1
    9f06:	d8f3      	bhi.n	9ef0 <ticker_job+0x940>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9f08:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    9f0c:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
    9f10:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9f12:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
				while (count--) {
    9f16:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9f18:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
    9f1c:	4473      	add	r3, lr
				while (count--) {
    9f1e:	d1ec      	bne.n	9efa <ticker_job+0x94a>
    9f20:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9f22:	6262      	str	r2, [r4, #36]	; 0x24
				if (!ticker->must_expire) {
    9f24:	2900      	cmp	r1, #0
    9f26:	f000 814b 	beq.w	a1c0 <ticker_job+0xc10>
				ticker->lazy_current += (lazy_periodic + lazy);
    9f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9f2c:	9904      	ldr	r1, [sp, #16]
    9f2e:	440a      	add	r2, r1
    9f30:	83e2      	strh	r2, [r4, #30]
    9f32:	e009      	b.n	9f48 <ticker_job+0x998>
		is_must_expire_skip = (ticker->must_expire &&
    9f34:	460e      	mov	r6, r1
    9f36:	e6c9      	b.n	9ccc <ticker_job+0x71c>
		ticker->ticks_to_expire = 0U;
    9f38:	60a6      	str	r6, [r4, #8]
		instance->ticker_id_head = ticker->next;
    9f3a:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    9f3e:	2800      	cmp	r0, #0
    9f40:	f43f aee7 	beq.w	9d12 <ticker_job+0x762>
				ticker->req = ticker->ack;
    9f44:	78a6      	ldrb	r6, [r4, #2]
    9f46:	464b      	mov	r3, r9
			ticks_to_expire_prep(ticker, instance->ticks_current,
    9f48:	9805      	ldr	r0, [sp, #20]
    9f4a:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    9f4e:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    9f50:	eb00 0708 	add.w	r7, r0, r8
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    9f54:	1ab8      	subs	r0, r7, r2
    9f56:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    9f5a:	d10e      	bne.n	9f7a <ticker_job+0x9ca>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9f5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    9f60:	4403      	add	r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
    9f62:	4299      	cmp	r1, r3
    9f64:	d211      	bcs.n	9f8a <ticker_job+0x9da>
		ticks_to_expire -= ticks_to_expire_minus;
    9f66:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
    9f68:	2100      	movs	r1, #0
			ticker->next = *insert_head;
    9f6a:	9a01      	ldr	r2, [sp, #4]
    9f6c:	7022      	strb	r2, [r4, #0]
			ticker->req++;
    9f6e:	3601      	adds	r6, #1
    9f70:	7066      	strb	r6, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
    9f72:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    9f74:	6161      	str	r1, [r4, #20]
			ticker->req++;
    9f76:	9501      	str	r5, [sp, #4]
    9f78:	e6d7      	b.n	9d2a <ticker_job+0x77a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9f7a:	1bd2      	subs	r2, r2, r7
    9f7c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    9f80:	429a      	cmp	r2, r3
    9f82:	d211      	bcs.n	9fa8 <ticker_job+0x9f8>
			ticks_to_expire -= delta_current_start;
    9f84:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    9f86:	4299      	cmp	r1, r3
    9f88:	d3ed      	bcc.n	9f66 <ticker_job+0x9b6>
    9f8a:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    9f8c:	2300      	movs	r3, #0
    9f8e:	e7ec      	b.n	9f6a <ticker_job+0x9ba>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
    9f90:	2e00      	cmp	r6, #0
    9f92:	f47f aeb6 	bne.w	9d02 <ticker_job+0x752>
		    !is_must_expire_skip &&
    9f96:	b112      	cbz	r2, 9f9e <ticker_job+0x9ee>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    9f98:	7a13      	ldrb	r3, [r2, #8]
    9f9a:	2b01      	cmp	r3, #1
    9f9c:	d0cc      	beq.n	9f38 <ticker_job+0x988>
			instance->ticker_id_slot_previous = id_expired;
    9f9e:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    9fa2:	f8cb 7018 	str.w	r7, [fp, #24]
    9fa6:	e6ac      	b.n	9d02 <ticker_job+0x752>
			ticks_to_expire_minus +=
    9fa8:	4411      	add	r1, r2
    9faa:	1ac9      	subs	r1, r1, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    9fac:	e7ee      	b.n	9f8c <ticker_job+0x9dc>
					ticker->req = ticker->ack;
    9fae:	f04f 0e00 	mov.w	lr, #0
    9fb2:	78a6      	ldrb	r6, [r4, #2]
					lazy_periodic = 0U;
    9fb4:	f8cd e010 	str.w	lr, [sp, #16]
    9fb8:	e78c      	b.n	9ed4 <ticker_job+0x924>
	ticker_new->next = current;
    9fba:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    9fbc:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    9fbe:	f880 c000 	strb.w	ip, [r0]
    9fc2:	4663      	mov	r3, ip
		node[previous].next = id;
    9fc4:	b212      	sxth	r2, r2
    9fc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9fca:	0112      	lsls	r2, r2, #4
    9fcc:	f807 a002 	strb.w	sl, [r7, r2]
    9fd0:	e70d      	b.n	9dee <ticker_job+0x83e>
    9fd2:	9a04      	ldr	r2, [sp, #16]
    9fd4:	4661      	mov	r1, ip
    9fd6:	e703      	b.n	9de0 <ticker_job+0x830>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    9fd8:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    9fda:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    9fde:	6a68      	ldr	r0, [r5, #36]	; 0x24
    9fe0:	f64f 79ff 	movw	r9, #65535	; 0xffff
    9fe4:	454f      	cmp	r7, r9
    9fe6:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
    9fea:	d02e      	beq.n	a04a <ticker_job+0xa9a>
    9fec:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    9ff0:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    9ff2:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    9ff4:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
    9ff6:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    9ffa:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    9ffc:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    9ffe:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    a000:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    a002:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    a006:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    a00a:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    a00c:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    a00e:	d40c      	bmi.n	a02a <ticker_job+0xa7a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a010:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    a014:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    a016:	b18b      	cbz	r3, a03c <ticker_job+0xa8c>
	ticker->ticks_to_expire = ticks_to_expire;
    a018:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    a01a:	2300      	movs	r3, #0
    a01c:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    a01e:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    a020:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    a024:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    a026:	70e3      	strb	r3, [r4, #3]
}
    a028:	e6af      	b.n	9d8a <ticker_job+0x7da>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a02a:	ebae 0200 	sub.w	r2, lr, r0
    a02e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    a032:	4293      	cmp	r3, r2
    a034:	d905      	bls.n	a042 <ticker_job+0xa92>
			ticks_to_expire -= delta_current_start;
    a036:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    a038:	2b00      	cmp	r3, #0
    a03a:	d1ed      	bne.n	a018 <ticker_job+0xa68>
		ticks_to_expire_minus -= ticks_to_expire;
    a03c:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    a03e:	2300      	movs	r3, #0
    a040:	e7ea      	b.n	a018 <ticker_job+0xa68>
			    (delta_current_start - ticks_to_expire);
    a042:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    a044:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    a046:	2300      	movs	r3, #0
    a048:	e7e6      	b.n	a018 <ticker_job+0xa68>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    a04a:	f04f 0701 	mov.w	r7, #1
    a04e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    a052:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    a054:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    a056:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    a058:	460f      	mov	r7, r1
    a05a:	e7cc      	b.n	9ff6 <ticker_job+0xa46>
	ticker_new->next = current;
    a05c:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    a060:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    a064:	e6cc      	b.n	9e00 <ticker_job+0x850>
    a066:	f8db 3000 	ldr.w	r3, [fp]
    a06a:	9303      	str	r3, [sp, #12]
	while (rescheduling) {
    a06c:	f89b 701d 	ldrb.w	r7, [fp, #29]
    a070:	9e03      	ldr	r6, [sp, #12]
	uint8_t  rescheduled = 0U;
    a072:	2300      	movs	r3, #0
    a074:	46ba      	mov	sl, r7
		while (ticker_id_head != TICKER_NULL) {
    a076:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    a07a:	d010      	beq.n	a09e <ticker_job+0xaee>
    a07c:	46d1      	mov	r9, sl
			ticker = &nodes[ticker_id_head];
    a07e:	fa0f f289 	sxth.w	r2, r9
    a082:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a086:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
    a08a:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    a08c:	b117      	cbz	r7, a094 <ticker_job+0xae4>
    a08e:	7a39      	ldrb	r1, [r7, #8]
    a090:	2901      	cmp	r1, #1
    a092:	d014      	beq.n	a0be <ticker_job+0xb0e>
			ticker_id_head = ticker->next;
    a094:	f892 9000 	ldrb.w	r9, [r2]
		while (ticker_id_head != TICKER_NULL) {
    a098:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    a09c:	d1ef      	bne.n	a07e <ticker_job+0xace>
	return rescheduled;
    a09e:	4657      	mov	r7, sl
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	f43f ad8a 	beq.w	9bba <ticker_job+0x60a>
	if (instance->ticker_id_head != ticker_id_old_head) {
    a0a6:	9a06      	ldr	r2, [sp, #24]
    a0a8:	42ba      	cmp	r2, r7
    a0aa:	f47f ad8a 	bne.w	9bc2 <ticker_job+0x612>
	if (!pending) {
    a0ae:	9a08      	ldr	r2, [sp, #32]
    a0b0:	2a00      	cmp	r2, #0
    a0b2:	f000 817c 	beq.w	a3ae <ticker_job+0xdfe>
	instance->job_guard = 0U;
    a0b6:	2300      	movs	r3, #0
    a0b8:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    a0bc:	e58a      	b.n	9bd4 <ticker_job+0x624>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    a0be:	f89b 301c 	ldrb.w	r3, [fp, #28]
    a0c2:	2bff      	cmp	r3, #255	; 0xff
    a0c4:	d071      	beq.n	a1aa <ticker_job+0xbfa>
			instance->ticks_slot_previous > ticks_elapsed) {
    a0c6:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    a0ca:	9b02      	ldr	r3, [sp, #8]
    a0cc:	4283      	cmp	r3, r0
    a0ce:	d26c      	bcs.n	a1aa <ticker_job+0xbfa>
			window_start_ticks = instance->ticks_slot_previous -
    a0d0:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    a0d2:	e9d7 4300 	ldrd	r4, r3, [r7]
    a0d6:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    a0d8:	f892 c000 	ldrb.w	ip, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    a0dc:	d26d      	bcs.n	a1ba <ticker_job+0xc0a>
		while (ticker_id_iter != TICKER_NULL &&
    a0de:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    a0e2:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
    a0e6:	d068      	beq.n	a1ba <ticker_job+0xc0a>
		       ticks_start_offset + ticker->ticks_slot <=
    a0e8:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
    a0ea:	42ac      	cmp	r4, r5
    a0ec:	f04f 0300 	mov.w	r3, #0
    a0f0:	d333      	bcc.n	a15a <ticker_job+0xbaa>
    a0f2:	469e      	mov	lr, r3
    a0f4:	9501      	str	r5, [sp, #4]
    a0f6:	4661      	mov	r1, ip
    a0f8:	9203      	str	r2, [sp, #12]
    a0fa:	e01d      	b.n	a138 <ticker_job+0xb88>
			if (node->ticks_to_expire >
    a0fc:	f8d1 8008 	ldr.w	r8, [r1, #8]
					MIN(ticks_slot_window,
    a100:	f1a8 0304 	sub.w	r3, r8, #4
			if (node->ticks_to_expire >
    a104:	f1b8 0f04 	cmp.w	r8, #4
					MIN(ticks_slot_window,
    a108:	4473      	add	r3, lr
			if (node->ticks_to_expire >
    a10a:	d909      	bls.n	a120 <ticker_job+0xb70>
				window_end_ticks =
    a10c:	42a3      	cmp	r3, r4
			if (window_end_ticks > ticks_start_offset +
    a10e:	9a01      	ldr	r2, [sp, #4]
				window_end_ticks =
    a110:	bf28      	it	cs
    a112:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
    a114:	4293      	cmp	r3, r2
    a116:	d903      	bls.n	a120 <ticker_job+0xb70>
			if (ticks_to_expire != 0U &&
    a118:	1b5b      	subs	r3, r3, r5
    a11a:	d001      	beq.n	a120 <ticker_job+0xb70>
    a11c:	4283      	cmp	r3, r0
    a11e:	d21b      	bcs.n	a158 <ticker_job+0xba8>
			window_start_ticks  = node->ticks_to_expire +
    a120:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
    a122:	7809      	ldrb	r1, [r1, #0]
			ticks_start_offset += node->ticks_to_expire;
    a124:	44c6      	add	lr, r8
			window_start_ticks  = node->ticks_to_expire +
    a126:	4440      	add	r0, r8
			ticks_to_expire     = ticks_slot_window -
    a128:	1b63      	subs	r3, r4, r5
		       ticks_start_offset + ticker->ticks_slot <=
    a12a:	eb0e 0205 	add.w	r2, lr, r5
		while (ticker_id_iter != TICKER_NULL &&
    a12e:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    a130:	9201      	str	r2, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
    a132:	d011      	beq.n	a158 <ticker_job+0xba8>
    a134:	4294      	cmp	r4, r2
    a136:	d30f      	bcc.n	a158 <ticker_job+0xba8>
			node = &nodes[ticker_id_iter];
    a138:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a13c:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
    a140:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
    a144:	f1b8 0f00 	cmp.w	r8, #0
    a148:	d0d8      	beq.n	a0fc <ticker_job+0xb4c>
    a14a:	f898 8008 	ldrb.w	r8, [r8, #8]
    a14e:	f1b8 0f01 	cmp.w	r8, #1
    a152:	d1d3      	bne.n	a0fc <ticker_job+0xb4c>
				ticker_id_iter = node->next;
    a154:	7809      	ldrb	r1, [r1, #0]
				continue;
    a156:	e7e8      	b.n	a12a <ticker_job+0xb7a>
    a158:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
    a15a:	6093      	str	r3, [r2, #8]
    a15c:	4664      	mov	r4, ip
    a15e:	f04f 0eff 	mov.w	lr, #255	; 0xff
    a162:	e000      	b.n	a166 <ticker_job+0xbb6>
    a164:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
    a166:	b221      	sxth	r1, r4
    a168:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    a16c:	eb06 1800 	add.w	r8, r6, r0, lsl #4
    a170:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    a172:	f8d8 5008 	ldr.w	r5, [r8, #8]
    a176:	429d      	cmp	r5, r3
    a178:	d24e      	bcs.n	a218 <ticker_job+0xc68>
				ticker->ticks_to_expire -=
    a17a:	1b5b      	subs	r3, r3, r5
    a17c:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
    a17e:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
    a180:	28ff      	cmp	r0, #255	; 0xff
    a182:	46a6      	mov	lr, r4
    a184:	d1ee      	bne.n	a164 <ticker_job+0xbb4>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    a186:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a18a:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    a18c:	f88b c01d 	strb.w	ip, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    a190:	5c73      	ldrb	r3, [r6, r1]
    a192:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    a194:	f806 9001 	strb.w	r9, [r6, r1]
    a198:	46e2      	mov	sl, ip
		ticker->lazy_current--;
    a19a:	8bd3      	ldrh	r3, [r2, #30]
    a19c:	3b01      	subs	r3, #1
    a19e:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
    a1a0:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
    a1a4:	2301      	movs	r3, #1
		ext_data->reschedule_state =
    a1a6:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
    a1a8:	e765      	b.n	a076 <ticker_job+0xac6>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    a1aa:	e9d7 4300 	ldrd	r4, r3, [r7]
    a1ae:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    a1b0:	f892 c000 	ldrb.w	ip, [r2]
		window_start_ticks = 0U;
    a1b4:	f04f 0000 	mov.w	r0, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    a1b8:	d391      	bcc.n	a0de <ticker_job+0xb2e>
		ticker->ticks_to_expire = ticks_to_expire;
    a1ba:	2300      	movs	r3, #0
    a1bc:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
    a1be:	e7ec      	b.n	a19a <ticker_job+0xbea>
					while (ticks_to_expire <
    a1c0:	459a      	cmp	sl, r3
    a1c2:	f67f aeb2 	bls.w	9f2a <ticker_job+0x97a>
    a1c6:	f100 0e01 	add.w	lr, r0, #1
    a1ca:	9409      	str	r4, [sp, #36]	; 0x24
    a1cc:	e00a      	b.n	a1e4 <ticker_job+0xc34>
    a1ce:	bf00      	nop
    a1d0:	7f172b59 	.word	0x7f172b59
    a1d4:	ff172b5a 	.word	0xff172b5a
    a1d8:	4607      	mov	r7, r0
						ticks_to_expire +=
    a1da:	443b      	add	r3, r7
						lazy++;
    a1dc:	3101      	adds	r1, #1
					while (ticks_to_expire <
    a1de:	459a      	cmp	sl, r3
						lazy++;
    a1e0:	b289      	uxth	r1, r1
					while (ticks_to_expire <
    a1e2:	d911      	bls.n	a208 <ticker_job+0xc58>
	if ((ticker->remainder_current < BIT(31)) &&
    a1e4:	4f81      	ldr	r7, [pc, #516]	; (a3ec <ticker_job+0xe3c>)
    a1e6:	4c82      	ldr	r4, [pc, #520]	; (a3f0 <ticker_job+0xe40>)
	ticker->remainder_current += ticker->remainder_periodic;
    a1e8:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
    a1ea:	19d7      	adds	r7, r2, r7
    a1ec:	42a7      	cmp	r7, r4
    a1ee:	d8f3      	bhi.n	a1d8 <ticker_job+0xc28>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    a1f0:	4677      	mov	r7, lr
    a1f2:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
    a1f6:	443b      	add	r3, r7
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    a1f8:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
    a1fc:	3101      	adds	r1, #1
					while (ticks_to_expire <
    a1fe:	459a      	cmp	sl, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    a200:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
    a204:	b289      	uxth	r1, r1
					while (ticks_to_expire <
    a206:	d8ed      	bhi.n	a1e4 <ticker_job+0xc34>
    a208:	9804      	ldr	r0, [sp, #16]
    a20a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a20c:	4408      	add	r0, r1
    a20e:	b281      	uxth	r1, r0
    a210:	9104      	str	r1, [sp, #16]
    a212:	6262      	str	r2, [r4, #36]	; 0x24
    a214:	e689      	b.n	9f2a <ticker_job+0x97a>
    a216:	4770      	bx	lr
				node->ticks_to_expire -=
    a218:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
    a21a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    a21e:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
    a222:	d0ba      	beq.n	a19a <ticker_job+0xbea>
    a224:	fa0f f18e 	sxth.w	r1, lr
    a228:	e7ad      	b.n	a186 <ticker_job+0xbd6>
	if (!pending) {
    a22a:	9b08      	ldr	r3, [sp, #32]
    a22c:	2b00      	cmp	r3, #0
    a22e:	f000 80a6 	beq.w	a37e <ticker_job+0xdce>
	instance->job_guard = 0U;
    a232:	2300      	movs	r3, #0
    a234:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    a238:	9b07      	ldr	r3, [sp, #28]
    a23a:	2b00      	cmp	r3, #0
    a23c:	f040 80c4 	bne.w	a3c8 <ticker_job+0xe18>
    a240:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
    a244:	b16a      	cbz	r2, a262 <ticker_job+0xcb2>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    a246:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    a24a:	465b      	mov	r3, fp
    a24c:	2201      	movs	r2, #1
    a24e:	2103      	movs	r1, #3
    a250:	2004      	movs	r0, #4
    a252:	46a4      	mov	ip, r4
}
    a254:	b00f      	add	sp, #60	; 0x3c
    a256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    a25a:	4760      	bx	ip
	instance->job_guard = 0U;
    a25c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a25e:	f88b 301e 	strb.w	r3, [fp, #30]
}
    a262:	b00f      	add	sp, #60	; 0x3c
    a264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
    a268:	eba3 0309 	sub.w	r3, r3, r9
    a26c:	60a3      	str	r3, [r4, #8]
			break;
    a26e:	f8db 3000 	ldr.w	r3, [fp]
    a272:	9303      	str	r3, [sp, #12]
    a274:	e560      	b.n	9d38 <ticker_job+0x788>
	count_user = instance->count_user;
    a276:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    a27a:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    a27e:	1e5c      	subs	r4, r3, #1
    a280:	b2e4      	uxtb	r4, r4
    a282:	2b00      	cmp	r3, #0
    a284:	f43f aca1 	beq.w	9bca <ticker_job+0x61a>
		flag_compare_update = 1U;
    a288:	2301      	movs	r3, #1
    a28a:	9307      	str	r3, [sp, #28]
    a28c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    a290:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
    a294:	7863      	ldrb	r3, [r4, #1]
    a296:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
    a298:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
    a29a:	4299      	cmp	r1, r3
    a29c:	d10c      	bne.n	a2b8 <ticker_job+0xd08>
    a29e:	e060      	b.n	a362 <ticker_job+0xdb2>
	switch (uop->op) {
    a2a0:	2b01      	cmp	r3, #1
    a2a2:	d05a      	beq.n	a35a <ticker_job+0xdaa>
			first = user->first + 1;
    a2a4:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    a2a6:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    a2a8:	3301      	adds	r3, #1
    a2aa:	b2db      	uxtb	r3, r3
				first = 0U;
    a2ac:	429a      	cmp	r2, r3
    a2ae:	bf08      	it	eq
    a2b0:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    a2b2:	4299      	cmp	r1, r3
			user->first = first;
    a2b4:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    a2b6:	d054      	beq.n	a362 <ticker_job+0xdb2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    a2b8:	b21b      	sxth	r3, r3
    a2ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    a2be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a2c2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
    a2c6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    a2ca:	2b02      	cmp	r3, #2
    a2cc:	d01b      	beq.n	a306 <ticker_job+0xd56>
    a2ce:	2b03      	cmp	r3, #3
    a2d0:	d1e6      	bne.n	a2a0 <ticker_job+0xcf0>
		if (uop->id < instance->count_node) {
    a2d2:	7853      	ldrb	r3, [r2, #1]
    a2d4:	f89b 1008 	ldrb.w	r1, [fp, #8]
    a2d8:	4299      	cmp	r1, r3
    a2da:	d911      	bls.n	a300 <ticker_job+0xd50>
			node[uop->id].priority =
    a2dc:	f8db 1000 	ldr.w	r1, [fp]
    a2e0:	7910      	ldrb	r0, [r2, #4]
    a2e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a2e6:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    a2ea:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    a2ee:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    a2f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
    a2f4:	b113      	cbz	r3, a2fc <ticker_job+0xd4c>
		fp_op_func(uop->status, uop->op_context);
    a2f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
    a2f8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    a2fa:	4798      	blx	r3
    a2fc:	78e1      	ldrb	r1, [r4, #3]
    a2fe:	e7d1      	b.n	a2a4 <ticker_job+0xcf4>
			uop->status = TICKER_STATUS_FAILURE;
    a300:	2301      	movs	r3, #1
    a302:	6293      	str	r3, [r2, #40]	; 0x28
    a304:	e7f5      	b.n	a2f2 <ticker_job+0xd42>
		ticker_by_next_slot_get(instance,
    a306:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
    a30a:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
    a30e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
    a312:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    a316:	f8db 8014 	ldr.w	r8, [fp, #20]
    a31a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    a31e:	d002      	beq.n	a326 <ticker_job+0xd76>
    a320:	6803      	ldr	r3, [r0, #0]
    a322:	4543      	cmp	r3, r8
    a324:	d024      	beq.n	a370 <ticker_job+0xdc0>
		_ticker_id_head = instance->ticker_id_head;
    a326:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
    a32a:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
    a32e:	f04f 0e00 	mov.w	lr, #0
    a332:	e00d      	b.n	a350 <ticker_job+0xda0>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    a334:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    a338:	eb01 1800 	add.w	r8, r1, r0, lsl #4
    a33c:	0100      	lsls	r0, r0, #4
    a33e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    a342:	f8d8 8018 	ldr.w	r8, [r8, #24]
    a346:	44d6      	add	lr, sl
    a348:	f1b8 0f00 	cmp.w	r8, #0
    a34c:	d102      	bne.n	a354 <ticker_job+0xda4>
		_ticker_id_head = ticker->next;
    a34e:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
    a350:	2bff      	cmp	r3, #255	; 0xff
    a352:	d1ef      	bne.n	a334 <ticker_job+0xd84>
	*ticker_id_head = _ticker_id_head;
    a354:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
    a356:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
    a35a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    a35c:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
    a360:	e7c8      	b.n	a2f4 <ticker_job+0xd44>
	while (count_user--) {
    a362:	42a6      	cmp	r6, r4
    a364:	f1a4 0308 	sub.w	r3, r4, #8
    a368:	f43f af63 	beq.w	a232 <ticker_job+0xc82>
    a36c:	461c      	mov	r4, r3
    a36e:	e791      	b.n	a294 <ticker_job+0xce4>
		ticker = &node[_ticker_id_head];
    a370:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
    a374:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
    a376:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
    a37a:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
    a37c:	e7e8      	b.n	a350 <ticker_job+0xda0>
	count_user = instance->count_user;
    a37e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    a382:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    a386:	1e5c      	subs	r4, r3, #1
    a388:	b2e4      	uxtb	r4, r4
    a38a:	2b00      	cmp	r3, #0
    a38c:	f47f af7e 	bne.w	a28c <ticker_job+0xcdc>
    a390:	e74f      	b.n	a232 <ticker_job+0xc82>
		if (cntr_stop() == 0) {
    a392:	f009 faab 	bl	138ec <cntr_stop>
    a396:	2800      	cmp	r0, #0
    a398:	f47f af52 	bne.w	a240 <ticker_job+0xc90>
			instance->ticks_slot_previous = 0U;
    a39c:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    a3a0:	f009 faca 	bl	13938 <cntr_cnt_get>
    a3a4:	f89b 201f 	ldrb.w	r2, [fp, #31]
    a3a8:	f8cb 0014 	str.w	r0, [fp, #20]
    a3ac:	e74a      	b.n	a244 <ticker_job+0xc94>
	count_user = instance->count_user;
    a3ae:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    a3b2:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    a3b6:	1e54      	subs	r4, r2, #1
    a3b8:	b2e4      	uxtb	r4, r4
    a3ba:	2a00      	cmp	r2, #0
    a3bc:	f47f af65 	bne.w	a28a <ticker_job+0xcda>
	instance->job_guard = 0U;
    a3c0:	9b08      	ldr	r3, [sp, #32]
    a3c2:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    a3c6:	e405      	b.n	9bd4 <ticker_job+0x624>
    a3c8:	f89b 701d 	ldrb.w	r7, [fp, #29]
    a3cc:	e402      	b.n	9bd4 <ticker_job+0x624>
		ticks_current = cntr_cnt_get();
    a3ce:	f009 fab3 	bl	13938 <cntr_cnt_get>
    a3d2:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    a3d4:	f009 fa7a 	bl	138cc <cntr_start>
    a3d8:	f89b 701d 	ldrb.w	r7, [fp, #29]
    a3dc:	2800      	cmp	r0, #0
    a3de:	f47f ac00 	bne.w	9be2 <ticker_job+0x632>
			instance->ticks_current = ticks_current;
    a3e2:	f8cb 4014 	str.w	r4, [fp, #20]
    a3e6:	f7ff bbfc 	b.w	9be2 <ticker_job+0x632>
    a3ea:	bf00      	nop
    a3ec:	ff172b5a 	.word	0xff172b5a
    a3f0:	7f172b59 	.word	0x7f172b59

0000a3f4 <ticker_init>:
{
    a3f4:	b4f0      	push	{r4, r5, r6, r7}
    a3f6:	9f04      	ldr	r7, [sp, #16]
    a3f8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    a3fc:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    a3fe:	2800      	cmp	r0, #0
    a400:	d13e      	bne.n	a480 <ticker_init+0x8c>
	instance->count_node = count_node;
    a402:	f8df c084 	ldr.w	ip, [pc, #132]	; a488 <ticker_init+0x94>
	while (count_node--) {
    a406:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
    a408:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
    a40c:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
    a410:	b2ed      	uxtb	r5, r5
    a412:	b149      	cbz	r1, a428 <ticker_init+0x34>
    a414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a418:	eb02 1105 	add.w	r1, r2, r5, lsl #4
    a41c:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    a41e:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    a422:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    a426:	d1f9      	bne.n	a41c <ticker_init+0x28>
	while (count_user--) {
    a428:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    a42a:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
    a42e:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
    a432:	b2d2      	uxtb	r2, r2
    a434:	b17b      	cbz	r3, a456 <ticker_init+0x62>
    a436:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
    a43a:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    a43c:	4611      	mov	r1, r2
    a43e:	f812 3908 	ldrb.w	r3, [r2], #-8
    a442:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    a446:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
    a448:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
    a44a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
    a44e:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
    a450:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
    a454:	d1f1      	bne.n	a43a <ticker_init+0x46>
	if (count_op) {
    a456:	b99c      	cbnz	r4, a480 <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
    a458:	9a07      	ldr	r2, [sp, #28]
    a45a:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
    a45e:	9a08      	ldr	r2, [sp, #32]
    a460:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    a464:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    a468:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
    a46a:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
    a46e:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
    a470:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
    a474:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
    a476:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    a47a:	f8ac 301c 	strh.w	r3, [ip, #28]
}
    a47e:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    a480:	2001      	movs	r0, #1
}
    a482:	bcf0      	pop	{r4, r5, r6, r7}
    a484:	4770      	bx	lr
    a486:	bf00      	nop
    a488:	200019f0 	.word	0x200019f0

0000a48c <ticker_trigger>:
	if (instance->sched_cb) {
    a48c:	4b0a      	ldr	r3, [pc, #40]	; (a4b8 <ticker_trigger+0x2c>)
    a48e:	222c      	movs	r2, #44	; 0x2c
    a490:	fb02 3200 	mla	r2, r2, r0, r3
{
    a494:	b410      	push	{r4}
	if (instance->sched_cb) {
    a496:	6a54      	ldr	r4, [r2, #36]	; 0x24
    a498:	b15c      	cbz	r4, a4b2 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    a49a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    a49e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    a4a2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a4a6:	46a4      	mov	ip, r4
    a4a8:	2201      	movs	r2, #1
}
    a4aa:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    a4ac:	2103      	movs	r1, #3
    a4ae:	2002      	movs	r0, #2
    a4b0:	4760      	bx	ip
}
    a4b2:	bc10      	pop	{r4}
    a4b4:	4770      	bx	lr
    a4b6:	bf00      	nop
    a4b8:	200019f0 	.word	0x200019f0

0000a4bc <ticker_start_ext>:
{
    a4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    a4c0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; a564 <ticker_start_ext+0xa8>
{
    a4c4:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
    a4c8:	272c      	movs	r7, #44	; 0x2c
    a4ca:	fb07 8700 	mla	r7, r7, r0, r8
{
    a4ce:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    a4d0:	687d      	ldr	r5, [r7, #4]
    a4d2:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    a4d6:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
    a4da:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
    a4de:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    a4e2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    a4e6:	1c75      	adds	r5, r6, #1
{
    a4e8:	4608      	mov	r0, r1
	last = user->last + 1;
    a4ea:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
    a4ec:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
    a4f0:	45a9      	cmp	r9, r5
    a4f2:	bf98      	it	ls
    a4f4:	2500      	movls	r5, #0
	if (last == user->first) {
    a4f6:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
    a4f8:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
    a4fc:	d02f      	beq.n	a55e <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    a4fe:	f8dc 1004 	ldr.w	r1, [ip, #4]
    a502:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    a506:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    a50a:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    a50e:	f04f 0904 	mov.w	r9, #4
    a512:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    a516:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    a518:	9b08      	ldr	r3, [sp, #32]
    a51a:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    a51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a51e:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    a520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a522:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    a524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a526:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    a528:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a52a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    a52c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a52e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    a530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a532:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    a534:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a536:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    a538:	2102      	movs	r1, #2
	user_op->op_context = op_context;
    a53a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    a53c:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    a53e:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
    a542:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    a544:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
    a546:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a54a:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    a54e:	4798      	blx	r3
    a550:	4643      	mov	r3, r8
    a552:	4649      	mov	r1, r9
    a554:	2200      	movs	r2, #0
    a556:	47a8      	blx	r5
	return user_op->status;
    a558:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    a55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    a55e:	2001      	movs	r0, #1
}
    a560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a564:	200019f0 	.word	0x200019f0

0000a568 <ticker_start>:
{
    a568:	b530      	push	{r4, r5, lr}
    a56a:	b08b      	sub	sp, #44	; 0x2c
    a56c:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a570:	9500      	str	r5, [sp, #0]
{
    a572:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a574:	9401      	str	r4, [sp, #4]
    a576:	9502      	str	r5, [sp, #8]
{
    a578:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
    a57c:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a57e:	9403      	str	r4, [sp, #12]
    a580:	9504      	str	r5, [sp, #16]
{
    a582:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    a584:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a586:	9405      	str	r4, [sp, #20]
    a588:	9506      	str	r5, [sp, #24]
{
    a58a:	9c15      	ldr	r4, [sp, #84]	; 0x54
    a58c:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a58e:	9407      	str	r4, [sp, #28]
    a590:	2400      	movs	r4, #0
    a592:	e9cd 5408 	strd	r5, r4, [sp, #32]
    a596:	f7ff ff91 	bl	a4bc <ticker_start_ext>
}
    a59a:	b00b      	add	sp, #44	; 0x2c
    a59c:	bd30      	pop	{r4, r5, pc}
    a59e:	bf00      	nop

0000a5a0 <ticker_update>:
	struct ticker_instance *instance = &_instance[instance_index];
    a5a0:	f8df c098 	ldr.w	ip, [pc, #152]	; a63c <ticker_update+0x9c>
{
    a5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->users[user_id];
    a5a8:	272c      	movs	r7, #44	; 0x2c
    a5aa:	fb07 c700 	mla	r7, r7, r0, ip
{
    a5ae:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    a5b0:	687d      	ldr	r5, [r7, #4]
{
    a5b2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    a5b6:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
    a5ba:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    a5bc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    a5c0:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
    a5c4:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    a5c6:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    a5ca:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    a5ce:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    a5d2:	1c75      	adds	r5, r6, #1
    a5d4:	b2ed      	uxtb	r5, r5
		last = 0U;
    a5d6:	45aa      	cmp	sl, r5
    a5d8:	bf98      	it	ls
    a5da:	2500      	movls	r5, #0
	if (last == user->first) {
    a5dc:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
    a5de:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
    a5e2:	d028      	beq.n	a636 <ticker_update+0x96>
	user_op = &user->user_op[user->last];
    a5e4:	f8d1 c004 	ldr.w	ip, [r1, #4]
    a5e8:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    a5ec:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    a5f0:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    a5f4:	f04f 0905 	mov.w	r9, #5
    a5f8:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    a5fc:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    a5fe:	9b08      	ldr	r3, [sp, #32]
    a600:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    a602:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a604:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    a606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a608:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    a60a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a60c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    a60e:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    a610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    a612:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
    a614:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
    a618:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
    a61a:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
    a61e:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
    a620:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a622:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    a626:	4798      	blx	r3
    a628:	4653      	mov	r3, sl
    a62a:	2200      	movs	r2, #0
    a62c:	2104      	movs	r1, #4
    a62e:	47a8      	blx	r5
	return user_op->status;
    a630:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    a632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    a636:	2001      	movs	r0, #1
}
    a638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a63c:	200019f0 	.word	0x200019f0

0000a640 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
    a640:	f8df c084 	ldr.w	ip, [pc, #132]	; a6c8 <ticker_stop+0x88>
{
    a644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
    a648:	272c      	movs	r7, #44	; 0x2c
    a64a:	fb07 c700 	mla	r7, r7, r0, ip
{
    a64e:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    a650:	687d      	ldr	r5, [r7, #4]
{
    a652:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    a654:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    a658:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
    a65c:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    a65e:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    a662:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    a666:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    a66a:	1c75      	adds	r5, r6, #1
    a66c:	b2ed      	uxtb	r5, r5
		last = 0U;
    a66e:	45a8      	cmp	r8, r5
    a670:	bf98      	it	ls
    a672:	2500      	movls	r5, #0
	if (last == user->first) {
    a674:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
    a676:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
    a67a:	d021      	beq.n	a6c0 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
    a67c:	f8d1 c004 	ldr.w	ip, [r1, #4]
    a680:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
    a684:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    a688:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    a68c:	f04f 0e06 	mov.w	lr, #6
    a690:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
    a694:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    a698:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    a69a:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
    a69c:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
    a6a0:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    a6a4:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
    a6a8:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a6aa:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    a6ae:	4798      	blx	r3
    a6b0:	4623      	mov	r3, r4
    a6b2:	2200      	movs	r2, #0
    a6b4:	2104      	movs	r1, #4
    a6b6:	47a8      	blx	r5
	return user_op->status;
    a6b8:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    a6c0:	2001      	movs	r0, #1
}
    a6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6c6:	bf00      	nop
    a6c8:	200019f0 	.word	0x200019f0

0000a6cc <ticker_ticks_now_get>:
	return cntr_cnt_get();
    a6cc:	f009 b934 	b.w	13938 <cntr_cnt_get>

0000a6d0 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a6d0:	1a40      	subs	r0, r0, r1
}
    a6d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a6d6:	4770      	bx	lr

0000a6d8 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
    a6d8:	2801      	cmp	r0, #1
    a6da:	d810      	bhi.n	a6fe <ll_addr_get+0x26>
		return NULL;
	}

	if (addr_type) {
    a6dc:	b938      	cbnz	r0, a6ee <ll_addr_get+0x16>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    a6de:	b181      	cbz	r1, a702 <ll_addr_get+0x2a>
    a6e0:	4b0a      	ldr	r3, [pc, #40]	; (a70c <ll_addr_get+0x34>)
    a6e2:	6818      	ldr	r0, [r3, #0]
    a6e4:	6008      	str	r0, [r1, #0]
    a6e6:	889a      	ldrh	r2, [r3, #4]
    a6e8:	808a      	strh	r2, [r1, #4]
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
    a6ea:	4618      	mov	r0, r3
    a6ec:	4770      	bx	lr
		if (bdaddr) {
    a6ee:	b151      	cbz	r1, a706 <ll_addr_get+0x2e>
    a6f0:	4b07      	ldr	r3, [pc, #28]	; (a710 <ll_addr_get+0x38>)
    a6f2:	6818      	ldr	r0, [r3, #0]
    a6f4:	6008      	str	r0, [r1, #0]
    a6f6:	889a      	ldrh	r2, [r3, #4]
    a6f8:	808a      	strh	r2, [r1, #4]
	return pub_addr;
    a6fa:	4618      	mov	r0, r3
    a6fc:	4770      	bx	lr
		return NULL;
    a6fe:	2000      	movs	r0, #0
    a700:	4770      	bx	lr
	return pub_addr;
    a702:	4802      	ldr	r0, [pc, #8]	; (a70c <ll_addr_get+0x34>)
}
    a704:	4770      	bx	lr
		return rnd_addr;
    a706:	4802      	ldr	r0, [pc, #8]	; (a710 <ll_addr_get+0x38>)
    a708:	4770      	bx	lr
    a70a:	bf00      	nop
    a70c:	20001a1c 	.word	0x20001a1c
    a710:	20001a24 	.word	0x20001a24

0000a714 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    a714:	b538      	push	{r3, r4, r5, lr}
    a716:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    a718:	2000      	movs	r0, #0
{
    a71a:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    a71c:	f002 ffac 	bl	d678 <ull_adv_is_enabled>
    a720:	b978      	cbnz	r0, a742 <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    a722:	b13c      	cbz	r4, a734 <ll_addr_set+0x20>
    a724:	4a08      	ldr	r2, [pc, #32]	; (a748 <ll_addr_set+0x34>)
    a726:	4603      	mov	r3, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    a728:	6828      	ldr	r0, [r5, #0]
    a72a:	6010      	str	r0, [r2, #0]
    a72c:	88a9      	ldrh	r1, [r5, #4]
    a72e:	8091      	strh	r1, [r2, #4]
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    a730:	4618      	mov	r0, r3
}
    a732:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    a734:	4b05      	ldr	r3, [pc, #20]	; (a74c <ll_addr_set+0x38>)
    a736:	6828      	ldr	r0, [r5, #0]
    a738:	6018      	str	r0, [r3, #0]
    a73a:	88aa      	ldrh	r2, [r5, #4]
    a73c:	809a      	strh	r2, [r3, #4]
	return 0;
    a73e:	4620      	mov	r0, r4
}
    a740:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    a742:	200c      	movs	r0, #12
}
    a744:	bd38      	pop	{r3, r4, r5, pc}
    a746:	bf00      	nop
    a748:	20001a24 	.word	0x20001a24
    a74c:	20001a1c 	.word	0x20001a1c

0000a750 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    a750:	2802      	cmp	r0, #2
    a752:	d001      	beq.n	a758 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    a754:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    a756:	4770      	bx	lr
{
    a758:	b538      	push	{r3, r4, r5, lr}
    a75a:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    a75c:	4608      	mov	r0, r1
    a75e:	461d      	mov	r5, r3
    a760:	f003 fbd6 	bl	df10 <ll_connected_get>
			if (!conn) {
    a764:	b110      	cbz	r0, a76c <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    a766:	2000      	movs	r0, #0
    a768:	7028      	strb	r0, [r5, #0]
}
    a76a:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    a76c:	4620      	mov	r0, r4
}
    a76e:	bd38      	pop	{r3, r4, r5, pc}

0000a770 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    a770:	2300      	movs	r3, #0
    a772:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    a774:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    a776:	4770      	bx	lr

0000a778 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    a778:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    a77a:	4802      	ldr	r0, [pc, #8]	; (a784 <hci_driver_init+0xc>)
    a77c:	f7fb f9d8 	bl	5b30 <bt_hci_driver_register>

	return 0;
}
    a780:	2000      	movs	r0, #0
    a782:	bd08      	pop	{r3, pc}
    a784:	00027674 	.word	0x00027674

0000a788 <hci_driver_send>:
{
    a788:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    a78a:	8983      	ldrh	r3, [r0, #12]
{
    a78c:	b083      	sub	sp, #12
	if (!buf->len) {
    a78e:	b123      	cbz	r3, a79a <hci_driver_send+0x12>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    a790:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    a792:	4604      	mov	r4, r0
    a794:	b1c3      	cbz	r3, a7c8 <hci_driver_send+0x40>
    a796:	2b02      	cmp	r3, #2
    a798:	d004      	beq.n	a7a4 <hci_driver_send+0x1c>
    a79a:	f06f 0515 	mvn.w	r5, #21
}
    a79e:	4628      	mov	r0, r5
    a7a0:	b003      	add	sp, #12
    a7a2:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    a7a4:	a901      	add	r1, sp, #4
    a7a6:	f000 fe31 	bl	b40c <hci_acl_handle>
	if (evt) {
    a7aa:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    a7ac:	4605      	mov	r5, r0
	if (evt) {
    a7ae:	b113      	cbz	r3, a7b6 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    a7b0:	4618      	mov	r0, r3
    a7b2:	f7fb f99f 	bl	5af4 <bt_recv_prio>
	if (!err) {
    a7b6:	2d00      	cmp	r5, #0
    a7b8:	d1f1      	bne.n	a79e <hci_driver_send+0x16>
		net_buf_unref(buf);
    a7ba:	4620      	mov	r0, r4
    a7bc:	f009 ffd4 	bl	14768 <net_buf_unref>
    a7c0:	2500      	movs	r5, #0
}
    a7c2:	4628      	mov	r0, r5
    a7c4:	b003      	add	sp, #12
    a7c6:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    a7c8:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    a7ca:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    a7cc:	f000 fa64 	bl	ac98 <hci_cmd_handle>
	if (evt) {
    a7d0:	2800      	cmp	r0, #0
    a7d2:	d0f2      	beq.n	a7ba <hci_driver_send+0x32>
		bt_recv_prio(evt);
    a7d4:	f7fb f98e 	bl	5af4 <bt_recv_prio>
		if (node_rx) {
    a7d8:	9d01      	ldr	r5, [sp, #4]
    a7da:	2d00      	cmp	r5, #0
    a7dc:	d0ed      	beq.n	a7ba <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a7de:	4628      	mov	r0, r5
    a7e0:	f001 f924 	bl	ba2c <hci_get_class>
    a7e4:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    a7e6:	9901      	ldr	r1, [sp, #4]
    a7e8:	4801      	ldr	r0, [pc, #4]	; (a7f0 <hci_driver_send+0x68>)
    a7ea:	f01b fd26 	bl	2623a <k_queue_append>
	if (!err) {
    a7ee:	e7e4      	b.n	a7ba <hci_driver_send+0x32>
    a7f0:	20000d70 	.word	0x20000d70

0000a7f4 <recv_thread>:
{
    a7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    a7f6:	4d37      	ldr	r5, [pc, #220]	; (a8d4 <recv_thread+0xe0>)
		LL_ASSERT(0);
    a7f8:	4f37      	ldr	r7, [pc, #220]	; (a8d8 <recv_thread+0xe4>)
    a7fa:	4e38      	ldr	r6, [pc, #224]	; (a8dc <recv_thread+0xe8>)
{
    a7fc:	b083      	sub	sp, #12
    a7fe:	e015      	b.n	a82c <recv_thread+0x38>
	switch (class) {
    a800:	2b00      	cmp	r3, #0
    a802:	d13c      	bne.n	a87e <recv_thread+0x8a>
		LL_ASSERT(0);
    a804:	4836      	ldr	r0, [pc, #216]	; (a8e0 <recv_thread+0xec>)
    a806:	23cf      	movs	r3, #207	; 0xcf
    a808:	463a      	mov	r2, r7
    a80a:	4631      	mov	r1, r6
    a80c:	f013 fa6f 	bl	1dcee <printk>
    a810:	4040      	eors	r0, r0
    a812:	f380 8811 	msr	BASEPRI, r0
    a816:	f04f 0003 	mov.w	r0, #3
    a81a:	df02      	svc	2
	node_rx->hdr.next = NULL;
    a81c:	9b01      	ldr	r3, [sp, #4]
    a81e:	2200      	movs	r2, #0
    a820:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a822:	a801      	add	r0, sp, #4
    a824:	f002 f836 	bl	c894 <ll_rx_mem_release>
	z_impl_k_yield();
    a828:	f010 fb38 	bl	1ae9c <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
    a82c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a834:	4628      	mov	r0, r5
    a836:	f00f ffe1 	bl	1a7fc <z_impl_k_queue_get>
		if (node_rx && !buf) {
    a83a:	2800      	cmp	r0, #0
    a83c:	d0f4      	beq.n	a828 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
    a83e:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    a840:	9001      	str	r0, [sp, #4]
	switch (class) {
    a842:	2b04      	cmp	r3, #4
    a844:	d9dc      	bls.n	a800 <recv_thread+0xc>
    a846:	2b05      	cmp	r3, #5
    a848:	d1dc      	bne.n	a804 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    a84a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a84e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a852:	2003      	movs	r0, #3
    a854:	f7fb fef8 	bl	6648 <bt_buf_get_rx>
    a858:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    a85a:	4601      	mov	r1, r0
    a85c:	9801      	ldr	r0, [sp, #4]
    a85e:	f000 fe53 	bl	b508 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    a862:	9b01      	ldr	r3, [sp, #4]
    a864:	2200      	movs	r2, #0
    a866:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a868:	a801      	add	r0, sp, #4
    a86a:	f002 f813 	bl	c894 <ll_rx_mem_release>
		if (buf) {
    a86e:	2c00      	cmp	r4, #0
    a870:	d0da      	beq.n	a828 <recv_thread+0x34>
			if (buf->len) {
    a872:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    a874:	4620      	mov	r0, r4
			if (buf->len) {
    a876:	b1db      	cbz	r3, a8b0 <recv_thread+0xbc>
				bt_recv(buf);
    a878:	f7fb f8c2 	bl	5a00 <bt_recv>
    a87c:	e7d4      	b.n	a828 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    a87e:	2b02      	cmp	r3, #2
    a880:	d019      	beq.n	a8b6 <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a88a:	2001      	movs	r0, #1
    a88c:	f7fb fedc 	bl	6648 <bt_buf_get_rx>
    a890:	4604      	mov	r4, r0
		if (buf) {
    a892:	9801      	ldr	r0, [sp, #4]
    a894:	b1cc      	cbz	r4, a8ca <recv_thread+0xd6>
			hci_evt_encode(node_rx, buf);
    a896:	4621      	mov	r1, r4
    a898:	f000 fe70 	bl	b57c <hci_evt_encode>
	node_rx->hdr.next = NULL;
    a89c:	9b01      	ldr	r3, [sp, #4]
    a89e:	2200      	movs	r2, #0
    a8a0:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a8a2:	a801      	add	r0, sp, #4
    a8a4:	f001 fff6 	bl	c894 <ll_rx_mem_release>
			if (buf->len) {
    a8a8:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    a8aa:	4620      	mov	r0, r4
			if (buf->len) {
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	d1e3      	bne.n	a878 <recv_thread+0x84>
				net_buf_unref(buf);
    a8b0:	f009 ff5a 	bl	14768 <net_buf_unref>
    a8b4:	e7b8      	b.n	a828 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    a8b6:	2200      	movs	r2, #0
    a8b8:	2300      	movs	r3, #0
    a8ba:	2101      	movs	r1, #1
    a8bc:	2000      	movs	r0, #0
    a8be:	f7fb fef9 	bl	66b4 <bt_buf_get_evt>
    a8c2:	4604      	mov	r4, r0
		if (buf) {
    a8c4:	9801      	ldr	r0, [sp, #4]
    a8c6:	2c00      	cmp	r4, #0
    a8c8:	d1e5      	bne.n	a896 <recv_thread+0xa2>
	node_rx->hdr.next = NULL;
    a8ca:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    a8cc:	a801      	add	r0, sp, #4
    a8ce:	f001 ffe1 	bl	c894 <ll_rx_mem_release>
		if (buf) {
    a8d2:	e7a9      	b.n	a828 <recv_thread+0x34>
    a8d4:	20000d70 	.word	0x20000d70
    a8d8:	00027610 	.word	0x00027610
    a8dc:	00027650 	.word	0x00027650
    a8e0:	000275f0 	.word	0x000275f0

0000a8e4 <prio_recv_thread>:
{
    a8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    a8e8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; a9a0 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
    a8ec:	4f2b      	ldr	r7, [pc, #172]	; (a99c <prio_recv_thread+0xb8>)
{
    a8ee:	b082      	sub	sp, #8
    a8f0:	e00c      	b.n	a90c <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a8f2:	f7fb fedf 	bl	66b4 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    a8f6:	4622      	mov	r2, r4
    a8f8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a8fc:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    a8fe:	f001 f87d 	bl	b9fc <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    a902:	4620      	mov	r0, r4
    a904:	f7fb f8f6 	bl	5af4 <bt_recv_prio>
	z_impl_k_yield();
    a908:	f010 fac8 	bl	1ae9c <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    a90c:	f10d 0102 	add.w	r1, sp, #2
    a910:	a801      	add	r0, sp, #4
    a912:	f001 fe17 	bl	c544 <ll_rx_get>
    a916:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a91c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a920:	2100      	movs	r1, #0
    a922:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    a924:	2c00      	cmp	r4, #0
    a926:	d1e4      	bne.n	a8f2 <prio_recv_thread+0xe>
		if (node_rx) {
    a928:	9b01      	ldr	r3, [sp, #4]
    a92a:	b193      	cbz	r3, a952 <prio_recv_thread+0x6e>
			ll_rx_dequeue();
    a92c:	f001 fee4 	bl	c6f8 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a930:	9e01      	ldr	r6, [sp, #4]
    a932:	4630      	mov	r0, r6
    a934:	f001 f87a 	bl	ba2c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    a938:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a93a:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    a93c:	796b      	ldrb	r3, [r5, #5]
    a93e:	2b03      	cmp	r3, #3
    a940:	d102      	bne.n	a948 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    a942:	792b      	ldrb	r3, [r5, #4]
    a944:	2b10      	cmp	r3, #16
    a946:	d00c      	beq.n	a962 <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
    a948:	4629      	mov	r1, r5
    a94a:	4638      	mov	r0, r7
    a94c:	f01b fc75 	bl	2623a <k_queue_append>
			continue;
    a950:	e7dc      	b.n	a90c <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
    a952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a95a:	4640      	mov	r0, r8
    a95c:	f010 fb38 	bl	1afd0 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    a960:	e7d4      	b.n	a90c <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    a962:	4621      	mov	r1, r4
    a964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a96c:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    a96e:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    a970:	f7fb fea0 	bl	66b4 <bt_buf_get_evt>
    a974:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    a976:	4622      	mov	r2, r4
    a978:	f105 001c 	add.w	r0, r5, #28
    a97c:	4631      	mov	r1, r6
    a97e:	f000 fdab 	bl	b4d8 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    a982:	4630      	mov	r0, r6
    a984:	f000 fdb8 	bl	b4f8 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    a988:	4620      	mov	r0, r4
			if (buf) {
    a98a:	b124      	cbz	r4, a996 <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
    a98c:	f7fb f8b2 	bl	5af4 <bt_recv_prio>
					net_buf_unref(buf);
    a990:	4620      	mov	r0, r4
    a992:	f009 fee9 	bl	14768 <net_buf_unref>
    a996:	9d01      	ldr	r5, [sp, #4]
    a998:	e7d6      	b.n	a948 <prio_recv_thread+0x64>
    a99a:	bf00      	nop
    a99c:	20000d70 	.word	0x20000d70
    a9a0:	20000d40 	.word	0x20000d40

0000a9a4 <hci_driver_open>:
{
    a9a4:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    a9a6:	481a      	ldr	r0, [pc, #104]	; (aa10 <hci_driver_open+0x6c>)
{
    a9a8:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    a9aa:	f001 faf5 	bl	bf98 <ll_init>
	if (err) {
    a9ae:	4604      	mov	r4, r0
    a9b0:	bb58      	cbnz	r0, aa0a <hci_driver_open+0x66>
	hci_init(NULL);
    a9b2:	f001 f851 	bl	ba58 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    a9b6:	2600      	movs	r6, #0
    a9b8:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a9ba:	f06f 0309 	mvn.w	r3, #9
    a9be:	9303      	str	r3, [sp, #12]
    a9c0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    a9c4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a9c8:	4b12      	ldr	r3, [pc, #72]	; (aa14 <hci_driver_open+0x70>)
    a9ca:	4913      	ldr	r1, [pc, #76]	; (aa18 <hci_driver_open+0x74>)
    a9cc:	9404      	str	r4, [sp, #16]
    a9ce:	9400      	str	r4, [sp, #0]
    a9d0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    a9d4:	4811      	ldr	r0, [pc, #68]	; (aa1c <hci_driver_open+0x78>)
    a9d6:	f010 fb6d 	bl	1b0b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    a9da:	4911      	ldr	r1, [pc, #68]	; (aa20 <hci_driver_open+0x7c>)
    a9dc:	480f      	ldr	r0, [pc, #60]	; (aa1c <hci_driver_open+0x78>)
    a9de:	f01b fd92 	bl	26506 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a9e2:	f06f 0307 	mvn.w	r3, #7
    a9e6:	9303      	str	r3, [sp, #12]
    a9e8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    a9ec:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a9f0:	4b0c      	ldr	r3, [pc, #48]	; (aa24 <hci_driver_open+0x80>)
    a9f2:	490d      	ldr	r1, [pc, #52]	; (aa28 <hci_driver_open+0x84>)
    a9f4:	9404      	str	r4, [sp, #16]
    a9f6:	9400      	str	r4, [sp, #0]
    a9f8:	f640 0298 	movw	r2, #2200	; 0x898
    a9fc:	480b      	ldr	r0, [pc, #44]	; (aa2c <hci_driver_open+0x88>)
    a9fe:	f010 fb59 	bl	1b0b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    aa02:	490b      	ldr	r1, [pc, #44]	; (aa30 <hci_driver_open+0x8c>)
    aa04:	4809      	ldr	r0, [pc, #36]	; (aa2c <hci_driver_open+0x88>)
    aa06:	f01b fd7e 	bl	26506 <z_impl_k_thread_name_set>
}
    aa0a:	4620      	mov	r0, r4
    aa0c:	b008      	add	sp, #32
    aa0e:	bdd0      	pop	{r4, r6, r7, pc}
    aa10:	20000d40 	.word	0x20000d40
    aa14:	0000a8e5 	.word	0x0000a8e5
    aa18:	20003520 	.word	0x20003520
    aa1c:	20001228 	.word	0x20001228
    aa20:	00027654 	.word	0x00027654
    aa24:	0000a7f5 	.word	0x0000a7f5
    aa28:	200036e0 	.word	0x200036e0
    aa2c:	200012b0 	.word	0x200012b0
    aa30:	00027660 	.word	0x00027660

0000aa34 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
    aa34:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    aa36:	4b07      	ldr	r3, [pc, #28]	; (aa54 <cmd_complete_status+0x20>)
{
    aa38:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    aa3a:	2101      	movs	r1, #1
    aa3c:	8818      	ldrh	r0, [r3, #0]
    aa3e:	f014 fb7f 	bl	1f140 <bt_hci_cmd_complete_create>
	ccst = net_buf_add(buf, sizeof(*ccst));
    aa42:	2101      	movs	r1, #1
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    aa44:	4604      	mov	r4, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
    aa46:	3008      	adds	r0, #8
    aa48:	f016 fa0c 	bl	20e64 <net_buf_simple_add>
    aa4c:	4603      	mov	r3, r0
	ccst->status = status;

	return buf;
}
    aa4e:	4620      	mov	r0, r4
	ccst->status = status;
    aa50:	701d      	strb	r5, [r3, #0]
}
    aa52:	bd38      	pop	{r3, r4, r5, pc}
    aa54:	20002f2c 	.word	0x20002f2c

0000aa58 <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
    aa58:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    aa5a:	f100 0408 	add.w	r4, r0, #8
{
    aa5e:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    aa60:	4620      	mov	r0, r4
    aa62:	2102      	movs	r1, #2
{
    aa64:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    aa66:	f016 f9fd 	bl	20e64 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    aa6a:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
    aa6c:	223e      	movs	r2, #62	; 0x3e
    aa6e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    aa70:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
    aa72:	2101      	movs	r1, #1
    aa74:	4620      	mov	r0, r4
    aa76:	f016 f9f5 	bl	20e64 <net_buf_simple_add>
	me->subevent = subevt;
    aa7a:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    aa7c:	4629      	mov	r1, r5
    aa7e:	4620      	mov	r0, r4
}
    aa80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    aa84:	f016 b9ee 	b.w	20e64 <net_buf_simple_add>

0000aa88 <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
    aa88:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    aa8a:	f102 0508 	add.w	r5, r2, #8
static void encrypt_change(uint8_t err, uint16_t handle,
    aa8e:	4604      	mov	r4, r0
    aa90:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    aa92:	4628      	mov	r0, r5
    aa94:	2102      	movs	r1, #2
    aa96:	f016 f9e5 	bl	20e64 <net_buf_simple_add>
    aa9a:	4603      	mov	r3, r0
	hdr->evt = evt;
    aa9c:	2208      	movs	r2, #8
	hdr->len = len;
    aa9e:	2104      	movs	r1, #4
	hdr->evt = evt;
    aaa0:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    aaa2:	7059      	strb	r1, [r3, #1]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
		return;
	}

	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));
    aaa4:	4628      	mov	r0, r5
    aaa6:	f016 f9dd 	bl	20e64 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    aaaa:	fab4 f384 	clz	r3, r4
    aaae:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    aab0:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
    aab2:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    aab4:	f8a0 6001 	strh.w	r6, [r0, #1]
}
    aab8:	bd70      	pop	{r4, r5, r6, pc}
    aaba:	bf00      	nop

0000aabc <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    aabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aac0:	4c17      	ldr	r4, [pc, #92]	; (ab20 <le_remote_feat_complete+0x64>)
    aac2:	6866      	ldr	r6, [r4, #4]
    aac4:	f04f 0900 	mov.w	r9, #0
    aac8:	464c      	mov	r4, r9
    aaca:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
    aace:	4690      	mov	r8, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aad0:	ea54 0205 	orrs.w	r2, r4, r5
    aad4:	d009      	beq.n	aaea <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    aad6:	4a13      	ldr	r2, [pc, #76]	; (ab24 <le_remote_feat_complete+0x68>)
    aad8:	6812      	ldr	r2, [r2, #0]
    aada:	4607      	mov	r7, r0
    aadc:	460e      	mov	r6, r1
    aade:	f002 0008 	and.w	r0, r2, #8
    aae2:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aae4:	ea50 0201 	orrs.w	r2, r0, r1
    aae8:	d101      	bne.n	aaee <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    aaee:	4618      	mov	r0, r3
    aaf0:	220b      	movs	r2, #11
    aaf2:	2104      	movs	r1, #4
    aaf4:	f7ff ffb0 	bl	aa58 <meta_evt>
	sep->status = status;
    aaf8:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    aafa:	f8a0 8001 	strh.w	r8, [r0, #1]
	if (!status) {
    aafe:	b947      	cbnz	r7, ab12 <le_remote_feat_complete+0x56>
    ab00:	f856 3f04 	ldr.w	r3, [r6, #4]!
    ab04:	6872      	ldr	r2, [r6, #4]
    ab06:	f8c0 2007 	str.w	r2, [r0, #7]
    ab0a:	f8c0 3003 	str.w	r3, [r0, #3]
}
    ab0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
__ssp_bos_icheck3(memset, void *, int)
    ab12:	f8c0 9003 	str.w	r9, [r0, #3]
    ab16:	f8c0 9007 	str.w	r9, [r0, #7]
    ab1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ab1e:	bf00      	nop
    ab20:	20000168 	.word	0x20000168
    ab24:	20000170 	.word	0x20000170

0000ab28 <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
    ab28:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    ab2a:	f102 0408 	add.w	r4, r2, #8
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
    ab2e:	4605      	mov	r5, r0
    ab30:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    ab32:	4620      	mov	r0, r4
    ab34:	2102      	movs	r1, #2
    ab36:	f016 f995 	bl	20e64 <net_buf_simple_add>
    ab3a:	4603      	mov	r3, r0
	hdr->evt = evt;
    ab3c:	2205      	movs	r2, #5
	hdr->len = len;
    ab3e:	2104      	movs	r1, #4
	hdr->evt = evt;
    ab40:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    ab42:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    ab44:	4620      	mov	r0, r4
    ab46:	f016 f98d 	bl	20e64 <net_buf_simple_add>
	ep->status = 0x00;
    ab4a:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    ab4c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
    ab50:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
    ab52:	782b      	ldrb	r3, [r5, #0]
    ab54:	70c3      	strb	r3, [r0, #3]
}
    ab56:	bd70      	pop	{r4, r5, r6, pc}

0000ab58 <hci_cmd_complete>:
{
    ab58:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ab5a:	4b06      	ldr	r3, [pc, #24]	; (ab74 <hci_cmd_complete+0x1c>)
{
    ab5c:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ab5e:	8818      	ldrh	r0, [r3, #0]
{
    ab60:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ab62:	f014 faed 	bl	1f140 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
    ab66:	4621      	mov	r1, r4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ab68:	6028      	str	r0, [r5, #0]
}
    ab6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    ab6e:	3008      	adds	r0, #8
    ab70:	f016 b978 	b.w	20e64 <net_buf_simple_add>
    ab74:	20002f2c 	.word	0x20002f2c

0000ab78 <hci_vendor_cmd_handle_common>:
{
    ab78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab7a:	1e43      	subs	r3, r0, #1
    ab7c:	b087      	sub	sp, #28
    ab7e:	4614      	mov	r4, r2
    ab80:	2b09      	cmp	r3, #9
    ab82:	d806      	bhi.n	ab92 <hci_vendor_cmd_handle_common+0x1a>
    ab84:	e8df f003 	tbb	[pc, r3]
    ab88:	05342109 	.word	0x05342109
    ab8c:	4e054305 	.word	0x4e054305
    ab90:	7869      	.short	0x7869
	return 0;
    ab92:	f06f 0015 	mvn.w	r0, #21
}
    ab96:	b007      	add	sp, #28
    ab98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ab9a:	4620      	mov	r0, r4
    ab9c:	210d      	movs	r1, #13
    ab9e:	f7ff ffdb 	bl	ab58 <hci_cmd_complete>
    aba2:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    aba4:	2202      	movs	r2, #2
	rp->status = 0x00;
    aba6:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    aba8:	2404      	movs	r4, #4
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    abaa:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    abac:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    abae:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
    abb0:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    abb2:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    abb4:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    abb6:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    abb8:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    abba:	7298      	strb	r0, [r3, #10]
    abbc:	72d8      	strb	r0, [r3, #11]
    abbe:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    abc0:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    abc2:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    abc4:	719a      	strb	r2, [r3, #6]
}
    abc6:	b007      	add	sp, #28
    abc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    abca:	4620      	mov	r0, r4
    abcc:	2141      	movs	r1, #65	; 0x41
    abce:	f7ff ffc3 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    abd2:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    abd4:	4605      	mov	r5, r0
    abd6:	4621      	mov	r1, r4
	rp->status = 0x00;
    abd8:	f800 4b01 	strb.w	r4, [r0], #1
    abdc:	2240      	movs	r2, #64	; 0x40
    abde:	f01b ff55 	bl	26a8c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    abe2:	22a7      	movs	r2, #167	; 0xa7
	rp->commands[1] |= BIT(0) | BIT(1);
    abe4:	2303      	movs	r3, #3
	return 0;
    abe6:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    abe8:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    abea:	70ab      	strb	r3, [r5, #2]
}
    abec:	b007      	add	sp, #28
    abee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    abf0:	4620      	mov	r0, r4
    abf2:	2109      	movs	r1, #9
    abf4:	f7ff ffb0 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    abf8:	4601      	mov	r1, r0
    abfa:	2300      	movs	r3, #0
    abfc:	f801 3b01 	strb.w	r3, [r1], #1
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ac00:	4602      	mov	r2, r0
	return 0;
    ac02:	4618      	mov	r0, r3
    ac04:	f8c2 3001 	str.w	r3, [r2, #1]
    ac08:	604b      	str	r3, [r1, #4]
}
    ac0a:	b007      	add	sp, #28
    ac0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    ac0e:	6889      	ldr	r1, [r1, #8]
    ac10:	2000      	movs	r0, #0
    ac12:	f7ff fd7f 	bl	a714 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
    ac16:	2000      	movs	r0, #0
    ac18:	f7ff ff0c 	bl	aa34 <cmd_complete_status>
    ac1c:	6020      	str	r0, [r4, #0]
    ac1e:	2000      	movs	r0, #0
}
    ac20:	b007      	add	sp, #28
    ac22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    ac24:	4e1b      	ldr	r6, [pc, #108]	; (ac94 <hci_vendor_cmd_handle_common+0x11c>)
    ac26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    ac28:	ad01      	add	r5, sp, #4
    ac2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ac2c:	6833      	ldr	r3, [r6, #0]
    ac2e:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    ac30:	4620      	mov	r0, r4
    ac32:	2113      	movs	r1, #19
    ac34:	f7ff ff90 	bl	ab58 <hci_cmd_complete>
    ac38:	ad01      	add	r5, sp, #4
    ac3a:	4607      	mov	r7, r0
    ac3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	rp->status = 0x00;
    ac3e:	463e      	mov	r6, r7
    ac40:	2400      	movs	r4, #0
    ac42:	f806 4b01 	strb.w	r4, [r6], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ac46:	882d      	ldrh	r5, [r5, #0]
    ac48:	f8c7 0001 	str.w	r0, [r7, #1]
	return 0;
    ac4c:	4620      	mov	r0, r4
    ac4e:	6071      	str	r1, [r6, #4]
    ac50:	60b2      	str	r2, [r6, #8]
    ac52:	60f3      	str	r3, [r6, #12]
    ac54:	8235      	strh	r5, [r6, #16]
}
    ac56:	b007      	add	sp, #28
    ac58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    ac5a:	4620      	mov	r0, r4
    ac5c:	2118      	movs	r1, #24
    ac5e:	f7ff ff7b 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    ac62:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    ac64:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    ac66:	2101      	movs	r1, #1
	rp->status = 0x00;
    ac68:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    ac6c:	f009 fc02 	bl	14474 <hci_vendor_read_static_addr>
    ac70:	7068      	strb	r0, [r5, #1]
	return 0;
    ac72:	4620      	mov	r0, r4
}
    ac74:	b007      	add	sp, #28
    ac76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ac78:	4620      	mov	r0, r4
    ac7a:	2121      	movs	r1, #33	; 0x21
    ac7c:	f7ff ff6c 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    ac80:	4601      	mov	r1, r0
    ac82:	2400      	movs	r4, #0
    ac84:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    ac88:	3001      	adds	r0, #1
    ac8a:	f009 fc69 	bl	14560 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    ac8e:	4620      	mov	r0, r4
}
    ac90:	b007      	add	sp, #28
    ac92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac94:	00027688 	.word	0x00027688

0000ac98 <hci_cmd_handle>:
{
    ac98:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    ac9a:	8983      	ldrh	r3, [r0, #12]
{
    ac9c:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    ac9e:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    aca0:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    aca2:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    aca4:	f240 808c 	bls.w	adc0 <hci_cmd_handle+0x128>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
    aca8:	4604      	mov	r4, r0
    acaa:	2103      	movs	r1, #3
    acac:	3008      	adds	r0, #8
    acae:	f016 f90b 	bl	20ec8 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    acb2:	89a2      	ldrh	r2, [r4, #12]
    acb4:	7883      	ldrb	r3, [r0, #2]
    acb6:	429a      	cmp	r2, r3
    acb8:	f0c0 8082 	bcc.w	adc0 <hci_cmd_handle+0x128>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    acbc:	8801      	ldrh	r1, [r0, #0]
    acbe:	4d9f      	ldr	r5, [pc, #636]	; (af3c <hci_cmd_handle+0x2a4>)
	switch (BT_OGF(_opcode)) {
    acc0:	f5b1 5f10 	cmp.w	r1, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
    acc4:	b288      	uxth	r0, r1
    acc6:	8029      	strh	r1, [r5, #0]
	ocf = BT_OCF(_opcode);
    acc8:	f3c1 0309 	ubfx	r3, r1, #0, #10
	switch (BT_OGF(_opcode)) {
    accc:	ea4f 2291 	mov.w	r2, r1, lsr #10
    acd0:	d267      	bcs.n	ada2 <hci_cmd_handle+0x10a>
    acd2:	2a00      	cmp	r2, #0
    acd4:	d06f      	beq.n	adb6 <hci_cmd_handle+0x11e>
    acd6:	3a01      	subs	r2, #1
    acd8:	2a07      	cmp	r2, #7
    acda:	d86c      	bhi.n	adb6 <hci_cmd_handle+0x11e>
    acdc:	e8df f002 	tbb	[pc, r2]
    ace0:	57736b8f 	.word	0x57736b8f
    ace4:	046b6b6b 	.word	0x046b6b6b
	switch (ocf) {
    ace8:	3b01      	subs	r3, #1
    acea:	2b4d      	cmp	r3, #77	; 0x4d
    acec:	d863      	bhi.n	adb6 <hci_cmd_handle+0x11e>
    acee:	e8df f013 	tbh	[pc, r3, lsl #1]
    acf2:	01f1      	.short	0x01f1
    acf4:	01d101e4 	.word	0x01d101e4
    acf8:	01ca0062 	.word	0x01ca0062
    acfc:	030601ba 	.word	0x030601ba
    ad00:	02f602fe 	.word	0x02f602fe
    ad04:	006202ef 	.word	0x006202ef
    ad08:	00620062 	.word	0x00620062
    ad0c:	02e30062 	.word	0x02e30062
    ad10:	02d802de 	.word	0x02d802de
    ad14:	031c02d2 	.word	0x031c02d2
    ad18:	032e0062 	.word	0x032e0062
    ad1c:	01680181 	.word	0x01680181
    ad20:	0062015c 	.word	0x0062015c
    ad24:	014e0156 	.word	0x014e0156
    ad28:	00620138 	.word	0x00620138
    ad2c:	00620062 	.word	0x00620062
    ad30:	01180129 	.word	0x01180129
    ad34:	019c01b2 	.word	0x019c01b2
    ad38:	00620193 	.word	0x00620193
    ad3c:	018a0062 	.word	0x018a0062
    ad40:	02c702cc 	.word	0x02c702cc
    ad44:	02a602bb 	.word	0x02a602bb
    ad48:	028a0291 	.word	0x028a0291
    ad4c:	02610282 	.word	0x02610282
    ad50:	02280239 	.word	0x02280239
    ad54:	006201fb 	.word	0x006201fb
    ad58:	00620062 	.word	0x00620062
    ad5c:	00620062 	.word	0x00620062
    ad60:	00620062 	.word	0x00620062
    ad64:	00620062 	.word	0x00620062
    ad68:	00620062 	.word	0x00620062
    ad6c:	00620062 	.word	0x00620062
    ad70:	00620062 	.word	0x00620062
    ad74:	00620062 	.word	0x00620062
    ad78:	00620062 	.word	0x00620062
    ad7c:	00620062 	.word	0x00620062
    ad80:	00620062 	.word	0x00620062
    ad84:	030f0062 	.word	0x030f0062
    ad88:	00620062 	.word	0x00620062
    ad8c:	0111      	.short	0x0111
	switch (ocf) {
    ad8e:	3b01      	subs	r3, #1
    ad90:	2b08      	cmp	r3, #8
    ad92:	d810      	bhi.n	adb6 <hci_cmd_handle+0x11e>
    ad94:	e8df f003 	tbb	[pc, r3]
    ad98:	0f6777a7 	.word	0x0f6777a7
    ad9c:	0f0f0f0f 	.word	0x0f0f0f0f
    ada0:	5b          	.byte	0x5b
    ada1:	00          	.byte	0x00
	switch (BT_OGF(_opcode)) {
    ada2:	2a3f      	cmp	r2, #63	; 0x3f
    ada4:	d107      	bne.n	adb6 <hci_cmd_handle+0x11e>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    ada6:	4621      	mov	r1, r4
    ada8:	4618      	mov	r0, r3
    adaa:	aa07      	add	r2, sp, #28
    adac:	f7ff fee4 	bl	ab78 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    adb0:	3016      	adds	r0, #22
    adb2:	d14a      	bne.n	ae4a <hci_cmd_handle+0x1b2>
    adb4:	8828      	ldrh	r0, [r5, #0]
	return bt_hci_cmd_status_create(_opcode, status);
    adb6:	2101      	movs	r1, #1
    adb8:	f014 f9d4 	bl	1f164 <bt_hci_cmd_status_create>
}
    adbc:	b00d      	add	sp, #52	; 0x34
    adbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    adc0:	2000      	movs	r0, #0
}
    adc2:	b00d      	add	sp, #52	; 0x34
    adc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    adc6:	2b63      	cmp	r3, #99	; 0x63
    adc8:	f000 8312 	beq.w	b3f0 <hci_cmd_handle+0x758>
    adcc:	d82a      	bhi.n	ae24 <hci_cmd_handle+0x18c>
    adce:	2b03      	cmp	r3, #3
    add0:	f000 82eb 	beq.w	b3aa <hci_cmd_handle+0x712>
    add4:	2b2d      	cmp	r3, #45	; 0x2d
    add6:	d120      	bne.n	ae1a <hci_cmd_handle+0x182>
		read_tx_power_level(cmd, evt);
    add8:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    adda:	2104      	movs	r1, #4
    addc:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    adde:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    ade0:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ade2:	f7ff feb9 	bl	ab58 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    ade6:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ade8:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    adea:	1cc3      	adds	r3, r0, #3
    adec:	4632      	mov	r2, r6
    adee:	2002      	movs	r0, #2
    adf0:	f7ff fcae 	bl	a750 <ll_tx_pwr_lvl_get>
	rp->status = status;
    adf4:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    adf6:	9807      	ldr	r0, [sp, #28]
    adf8:	f8a4 5001 	strh.w	r5, [r4, #1]
}
    adfc:	e7de      	b.n	adbc <hci_cmd_handle+0x124>
	switch (ocf) {
    adfe:	2b06      	cmp	r3, #6
    ae00:	f000 82b5 	beq.w	b36e <hci_cmd_handle+0x6d6>
    ae04:	2b1d      	cmp	r3, #29
    ae06:	d1d6      	bne.n	adb6 <hci_cmd_handle+0x11e>
	handle = sys_le16_to_cpu(cmd->handle);
    ae08:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    ae0a:	8818      	ldrh	r0, [r3, #0]
    ae0c:	f003 f9e4 	bl	e1d8 <ll_version_ind_send>
    ae10:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ae12:	8828      	ldrh	r0, [r5, #0]
    ae14:	f014 f9a6 	bl	1f164 <bt_hci_cmd_status_create>
}
    ae18:	e7d0      	b.n	adbc <hci_cmd_handle+0x124>
	switch (ocf) {
    ae1a:	2b01      	cmp	r3, #1
    ae1c:	d1cb      	bne.n	adb6 <hci_cmd_handle+0x11e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    ae1e:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    ae20:	4b47      	ldr	r3, [pc, #284]	; (af40 <hci_cmd_handle+0x2a8>)
    ae22:	e159      	b.n	b0d8 <hci_cmd_handle+0x440>
	switch (ocf) {
    ae24:	2b7b      	cmp	r3, #123	; 0x7b
    ae26:	f000 82ac 	beq.w	b382 <hci_cmd_handle+0x6ea>
    ae2a:	2b7c      	cmp	r3, #124	; 0x7c
    ae2c:	d1c3      	bne.n	adb6 <hci_cmd_handle+0x11e>
		write_auth_payload_timeout(cmd, evt);
    ae2e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ae30:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    ae32:	8859      	ldrh	r1, [r3, #2]
    ae34:	4628      	mov	r0, r5
    ae36:	f003 fb07 	bl	e448 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    ae3a:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae3c:	2103      	movs	r1, #3
    ae3e:	a807      	add	r0, sp, #28
    ae40:	f7ff fe8a 	bl	ab58 <hci_cmd_complete>
	rp->status = status;
    ae44:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    ae46:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    ae4a:	9807      	ldr	r0, [sp, #28]
    ae4c:	e7b6      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae4e:	2107      	movs	r1, #7
    ae50:	a807      	add	r0, sp, #28
    ae52:	f7ff fe81 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    ae56:	4601      	mov	r1, r0
    ae58:	2000      	movs	r0, #0
    ae5a:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    ae5e:	f7ff fc3b 	bl	a6d8 <ll_addr_get>
	if (err == -EINVAL) {
    ae62:	9807      	ldr	r0, [sp, #28]
    ae64:	e7aa      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae66:	2109      	movs	r1, #9
    ae68:	a807      	add	r0, sp, #28
    ae6a:	f7ff fe75 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    ae6e:	4602      	mov	r2, r0
    ae70:	2100      	movs	r1, #0
    ae72:	f802 1b01 	strb.w	r1, [r2], #1
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae76:	4603      	mov	r3, r0
__ssp_bos_icheck3(memset, void *, int)
    ae78:	f8c0 1001 	str.w	r1, [r0, #1]
	rp->features[4] = (1 << 5) | (1 << 6);
    ae7c:	2460      	movs	r4, #96	; 0x60
    ae7e:	6051      	str	r1, [r2, #4]
    ae80:	9807      	ldr	r0, [sp, #28]
    ae82:	715c      	strb	r4, [r3, #5]
	if (err == -EINVAL) {
    ae84:	e79a      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae86:	2141      	movs	r1, #65	; 0x41
    ae88:	a807      	add	r0, sp, #28
    ae8a:	f7ff fe65 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    ae8e:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae90:	4604      	mov	r4, r0
    ae92:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    ae94:	f800 1b01 	strb.w	r1, [r0], #1
    ae98:	f01b fdf8 	bl	26a8c <memset>
	rp->commands[0] |= BIT(5);
    ae9c:	2320      	movs	r3, #32
    ae9e:	7063      	strb	r3, [r4, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
    aea0:	2228      	movs	r2, #40	; 0x28
	rp->commands[5] |= BIT(6) | BIT(7);
    aea2:	23c0      	movs	r3, #192	; 0xc0
	rp->commands[15] |= BIT(1);
    aea4:	2502      	movs	r5, #2
	rp->commands[26] |= BIT(0) | BIT(1);
    aea6:	20c3      	movs	r0, #195	; 0xc3
	rp->commands[28] |= BIT(1) | BIT(2);
    aea8:	210e      	movs	r1, #14
	rp->commands[5] |= BIT(6) | BIT(7);
    aeaa:	71a3      	strb	r3, [r4, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
    aeac:	73e2      	strb	r2, [r4, #15]
	rp->commands[32] |= BIT(4) | BIT(5);
    aeae:	2330      	movs	r3, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
    aeb0:	22f0      	movs	r2, #240	; 0xf0
	rp->commands[15] |= BIT(1);
    aeb2:	7425      	strb	r5, [r4, #16]
	rp->commands[26] |= BIT(0) | BIT(1);
    aeb4:	76e0      	strb	r0, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    aeb6:	25f9      	movs	r5, #249	; 0xf9
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    aeb8:	207f      	movs	r0, #127	; 0x7f
	rp->commands[28] |= BIT(1) | BIT(2);
    aeba:	7761      	strb	r1, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    aebc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[38] |= BIT(7);
    aec0:	2180      	movs	r1, #128	; 0x80
	rp->commands[10] |= BIT(2);
    aec2:	2304      	movs	r3, #4
	rp->commands[33] |= BIT(6) | BIT(7);
    aec4:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    aec8:	22f7      	movs	r2, #247	; 0xf7
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    aeca:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    aece:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    aed2:	9807      	ldr	r0, [sp, #28]
	rp->commands[38] |= BIT(7);
    aed4:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
	rp->commands[10] |= BIT(2);
    aed8:	72e3      	strb	r3, [r4, #11]
	rp->commands[22] |= BIT(2);
    aeda:	75e3      	strb	r3, [r4, #23]
	rp->commands[39] |= BIT(2);
    aedc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    aee0:	76a2      	strb	r2, [r4, #26]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    aee2:	7722      	strb	r2, [r4, #28]
	if (err == -EINVAL) {
    aee4:	e76a      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aee6:	2109      	movs	r1, #9
    aee8:	a807      	add	r0, sp, #28
    aeea:	f7ff fe35 	bl	ab58 <hci_cmd_complete>
    aeee:	4603      	mov	r3, r0
	rp->status = 0x00;
    aef0:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
    aef2:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    aef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    aef8:	f06f 050e 	mvn.w	r5, #14
    aefc:	2405      	movs	r4, #5
	rp->status = 0x00;
    aefe:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
    af00:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    af02:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    af04:	715d      	strb	r5, [r3, #5]
    af06:	9807      	ldr	r0, [sp, #28]
    af08:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
    af0a:	709a      	strb	r2, [r3, #2]
    af0c:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    af0e:	71d9      	strb	r1, [r3, #7]
    af10:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
    af12:	e753      	b.n	adbc <hci_cmd_handle+0x124>
		le_set_privacy_mode(cmd, evt);
    af14:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    af16:	79c1      	ldrb	r1, [r0, #7]
    af18:	f006 fcae 	bl	11878 <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
    af1c:	f7ff fd8a 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    af20:	e74c      	b.n	adbc <hci_cmd_handle+0x124>
		le_conn_param_req_neg_reply(cmd, evt);
    af22:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    af24:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    af26:	789a      	ldrb	r2, [r3, #2]
    af28:	2300      	movs	r3, #0
    af2a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    af2e:	4628      	mov	r0, r5
    af30:	9300      	str	r3, [sp, #0]
    af32:	2102      	movs	r1, #2
    af34:	f003 f854 	bl	dfe0 <ll_conn_update>
    af38:	e77f      	b.n	ae3a <hci_cmd_handle+0x1a2>
    af3a:	bf00      	nop
    af3c:	20002f2c 	.word	0x20002f2c
    af40:	20000168 	.word	0x20000168
		le_conn_param_req_reply(cmd, evt);
    af44:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    af46:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    af48:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    af4a:	8853      	ldrh	r3, [r2, #2]
    af4c:	9102      	str	r1, [sp, #8]
    af4e:	88d1      	ldrh	r1, [r2, #6]
    af50:	9101      	str	r1, [sp, #4]
    af52:	8892      	ldrh	r2, [r2, #4]
    af54:	9200      	str	r2, [sp, #0]
    af56:	4628      	mov	r0, r5
    af58:	2200      	movs	r2, #0
    af5a:	2102      	movs	r1, #2
    af5c:	f003 f840 	bl	dfe0 <ll_conn_update>
    af60:	e76b      	b.n	ae3a <hci_cmd_handle+0x1a2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    af62:	2109      	movs	r1, #9
    af64:	a807      	add	r0, sp, #28
    af66:	f7ff fdf7 	bl	ab58 <hci_cmd_complete>
	dst[0] = val;
    af6a:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
    af6c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    af6e:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
    af70:	2230      	movs	r2, #48	; 0x30
    af72:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    af74:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    af76:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    af78:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
    af7a:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
    af7c:	2201      	movs	r2, #1
    af7e:	7003      	strb	r3, [r0, #0]
    af80:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    af82:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
    af84:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
    af86:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    af88:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    af8a:	9807      	ldr	r0, [sp, #28]
    af8c:	e716      	b.n	adbc <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    af8e:	68a3      	ldr	r3, [r4, #8]
    af90:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    af92:	2200      	movs	r2, #0
    af94:	4628      	mov	r0, r5
    af96:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    af98:	f005 fd96 	bl	10ac8 <ll_start_enc_req_send>
    af9c:	e74d      	b.n	ae3a <hci_cmd_handle+0x1a2>
	handle = sys_le16_to_cpu(cmd->handle);
    af9e:	68a2      	ldr	r2, [r4, #8]
    afa0:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    afa4:	2100      	movs	r1, #0
    afa6:	4628      	mov	r0, r5
    afa8:	e7f6      	b.n	af98 <hci_cmd_handle+0x300>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    afaa:	2109      	movs	r1, #9
    afac:	a807      	add	r0, sp, #28
    afae:	f7ff fdd3 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    afb2:	2300      	movs	r3, #0
    afb4:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    afb8:	2108      	movs	r1, #8
    afba:	f007 f803 	bl	11fc4 <lll_csrand_get>
	if (err == -EINVAL) {
    afbe:	9807      	ldr	r0, [sp, #28]
    afc0:	e6fc      	b.n	adbc <hci_cmd_handle+0x124>
		le_encrypt(cmd, evt);
    afc2:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    afc4:	aa08      	add	r2, sp, #32
    afc6:	f100 0110 	add.w	r1, r0, #16
    afca:	2300      	movs	r3, #0
    afcc:	f008 fcec 	bl	139a8 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    afd0:	2111      	movs	r1, #17
    afd2:	a807      	add	r0, sp, #28
    afd4:	f7ff fdc0 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    afd8:	4605      	mov	r5, r0
    afda:	2300      	movs	r3, #0
    afdc:	f805 3b01 	strb.w	r3, [r5], #1
    afe0:	ac08      	add	r4, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    afe2:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    afe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    afe6:	f8c6 0001 	str.w	r0, [r6, #1]
    afea:	9807      	ldr	r0, [sp, #28]
    afec:	6069      	str	r1, [r5, #4]
    afee:	60aa      	str	r2, [r5, #8]
    aff0:	60eb      	str	r3, [r5, #12]
	if (err == -EINVAL) {
    aff2:	e6e3      	b.n	adbc <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    aff4:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    aff6:	8818      	ldrh	r0, [r3, #0]
    aff8:	f003 f8c8 	bl	e18c <ll_feature_req_send>
    affc:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    affe:	8828      	ldrh	r0, [r5, #0]
    b000:	f014 f8b0 	bl	1f164 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    b004:	e6da      	b.n	adbc <hci_cmd_handle+0x124>
		le_add_dev_to_rl(cmd, evt);
    b006:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    b008:	f100 0217 	add.w	r2, r0, #23
    b00c:	1dc1      	adds	r1, r0, #7
    b00e:	f006 fa8d 	bl	1152c <ll_rl_add>
	*evt = cmd_complete_status(status);
    b012:	f7ff fd0f 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b016:	e6d1      	b.n	adbc <hci_cmd_handle+0x124>
		le_write_default_data_len(cmd, evt);
    b018:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    b01a:	8859      	ldrh	r1, [r3, #2]
    b01c:	8818      	ldrh	r0, [r3, #0]
    b01e:	f003 f961 	bl	e2e4 <ll_length_default_set>
	*evt = cmd_complete_status(status);
    b022:	b2c0      	uxtb	r0, r0
    b024:	f7ff fd06 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b028:	e6c8      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b02a:	2105      	movs	r1, #5
    b02c:	a807      	add	r0, sp, #28
    b02e:	f7ff fd93 	bl	ab58 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    b032:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b034:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    b036:	f10d 001a 	add.w	r0, sp, #26
    b03a:	f003 f947 	bl	e2cc <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    b03e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b042:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
    b046:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    b048:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    b04c:	7022      	strb	r2, [r4, #0]
    b04e:	9807      	ldr	r0, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    b050:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
    b054:	e6b2      	b.n	adbc <hci_cmd_handle+0x124>
		le_set_data_len(cmd, evt);
    b056:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    b058:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    b05a:	889a      	ldrh	r2, [r3, #4]
    b05c:	8859      	ldrh	r1, [r3, #2]
    b05e:	4628      	mov	r0, r5
    b060:	f003 f8e0 	bl	e224 <ll_length_req_send>
    b064:	e6e9      	b.n	ae3a <hci_cmd_handle+0x1a2>
		le_set_adv_param(cmd, evt);
    b066:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    b068:	7ba5      	ldrb	r5, [r4, #14]
    b06a:	79a3      	ldrb	r3, [r4, #6]
    b06c:	7962      	ldrb	r2, [r4, #5]
    b06e:	7921      	ldrb	r1, [r4, #4]
    b070:	8820      	ldrh	r0, [r4, #0]
    b072:	9502      	str	r5, [sp, #8]
    b074:	7b65      	ldrb	r5, [r4, #13]
    b076:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    b078:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    b07a:	9400      	str	r4, [sp, #0]
    b07c:	f002 f976 	bl	d36c <ll_adv_params_set>
	*evt = cmd_complete_status(status);
    b080:	f7ff fcd8 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b084:	e69a      	b.n	adbc <hci_cmd_handle+0x124>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    b086:	68a1      	ldr	r1, [r4, #8]
    b088:	2001      	movs	r0, #1
    b08a:	f7ff fb43 	bl	a714 <ll_addr_set>
	*evt = cmd_complete_status(status);
    b08e:	f7ff fcd1 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b092:	e693      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b094:	2109      	movs	r1, #9
    b096:	a807      	add	r0, sp, #28
    b098:	f7ff fd5e 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    b09c:	4603      	mov	r3, r0
    b09e:	2200      	movs	r2, #0
    b0a0:	f803 2b01 	strb.w	r2, [r3], #1
	dst[0] = val;
    b0a4:	257f      	movs	r5, #127	; 0x7f
	dst[1] = val >> 8;
    b0a6:	2441      	movs	r4, #65	; 0x41
	dst[2] = val >> 16;
    b0a8:	2101      	movs	r1, #1
__ssp_bos_icheck3(memset, void *, int)
    b0aa:	f8c0 2001 	str.w	r2, [r0, #1]
    b0ae:	605a      	str	r2, [r3, #4]
	dst[0] = val;
    b0b0:	7045      	strb	r5, [r0, #1]
	dst[1] = val >> 8;
    b0b2:	7084      	strb	r4, [r0, #2]
	dst[2] = val >> 16;
    b0b4:	70c1      	strb	r1, [r0, #3]
	if (err == -EINVAL) {
    b0b6:	9807      	ldr	r0, [sp, #28]
    b0b8:	e680      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b0ba:	2104      	movs	r1, #4
    b0bc:	a807      	add	r0, sp, #28
    b0be:	f7ff fd4b 	bl	ab58 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    b0c2:	2203      	movs	r2, #3
	rp->status = 0x00;
    b0c4:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    b0c6:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
    b0c8:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    b0ca:	221b      	movs	r2, #27
    b0cc:	7042      	strb	r2, [r0, #1]
    b0ce:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    b0d0:	9807      	ldr	r0, [sp, #28]
    b0d2:	e673      	b.n	adbc <hci_cmd_handle+0x124>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    b0d4:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    b0d6:	4bc2      	ldr	r3, [pc, #776]	; (b3e0 <hci_cmd_handle+0x748>)
    b0d8:	6811      	ldr	r1, [r2, #0]
    b0da:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    b0dc:	605a      	str	r2, [r3, #4]
    b0de:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
    b0e0:	2000      	movs	r0, #0
    b0e2:	f7ff fca7 	bl	aa34 <cmd_complete_status>
}
    b0e6:	e669      	b.n	adbc <hci_cmd_handle+0x124>
		le_set_phy(cmd, evt);
    b0e8:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    b0ea:	7896      	ldrb	r6, [r2, #2]
    b0ec:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    b0ee:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    b0f0:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    b0f4:	07f3      	lsls	r3, r6, #31
		cmd->tx_phys |= mask_phys;
    b0f6:	bf48      	it	mi
    b0f8:	f041 0103 	orrmi.w	r1, r1, #3
    b0fc:	7913      	ldrb	r3, [r2, #4]
    b0fe:	bf48      	it	mi
    b100:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    b102:	07b6      	lsls	r6, r6, #30
		cmd->rx_phys |= mask_phys;
    b104:	bf44      	itt	mi
    b106:	f043 0303 	orrmi.w	r3, r3, #3
    b10a:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    b10c:	ea43 0201 	orr.w	r2, r3, r1
    b110:	f032 0203 	bics.w	r2, r2, #3
    b114:	f040 8173 	bne.w	b3fe <hci_cmd_handle+0x766>
	if (!(cmd->tx_phys & 0x07) ||
    b118:	074e      	lsls	r6, r1, #29
    b11a:	f000 816c 	beq.w	b3f6 <hci_cmd_handle+0x75e>
    b11e:	075a      	lsls	r2, r3, #29
    b120:	f000 8169 	beq.w	b3f6 <hci_cmd_handle+0x75e>
	if (phy_opts & 0x03) {
    b124:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    b128:	bf1c      	itt	ne
    b12a:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    b12e:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    b132:	4638      	mov	r0, r7
    b134:	f003 f912 	bl	e35c <ll_phy_req_send>
    b138:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    b13a:	8828      	ldrh	r0, [r5, #0]
    b13c:	f014 f812 	bl	1f164 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    b140:	e63c      	b.n	adbc <hci_cmd_handle+0x124>
		le_set_default_phy(cmd, evt);
    b142:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    b144:	781a      	ldrb	r2, [r3, #0]
    b146:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    b148:	bf4a      	itet	mi
    b14a:	2007      	movmi	r0, #7
    b14c:	7858      	ldrbpl	r0, [r3, #1]
    b14e:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    b150:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    b152:	bf4a      	itet	mi
    b154:	2107      	movmi	r1, #7
    b156:	7899      	ldrbpl	r1, [r3, #2]
    b158:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    b15a:	f003 f8f5 	bl	e348 <ll_phy_default_set>
	*evt = cmd_complete_status(status);
    b15e:	f7ff fc69 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b162:	e62b      	b.n	adbc <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    b164:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b166:	2105      	movs	r1, #5
    b168:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    b16a:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b16c:	f7ff fcf4 	bl	ab58 <hci_cmd_complete>
    b170:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    b172:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
    b174:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    b176:	1ce1      	adds	r1, r4, #3
    b178:	f003 f8c8 	bl	e30c <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    b17c:	78e2      	ldrb	r2, [r4, #3]
    b17e:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
    b180:	7020      	strb	r0, [r4, #0]
    b182:	2a00      	cmp	r2, #0
    b184:	fa92 f2a2 	rbit	r2, r2
    b188:	fab2 f282 	clz	r2, r2
    b18c:	bf08      	it	eq
    b18e:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    b192:	2b00      	cmp	r3, #0
    b194:	fa93 f3a3 	rbit	r3, r3
    b198:	fab3 f383 	clz	r3, r3
    b19c:	f102 0201 	add.w	r2, r2, #1
    b1a0:	bf08      	it	eq
    b1a2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    b1a6:	70e2      	strb	r2, [r4, #3]
    b1a8:	3301      	adds	r3, #1
    b1aa:	9807      	ldr	r0, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    b1ac:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    b1b0:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
    b1b2:	e603      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b1b4:	2109      	movs	r1, #9
    b1b6:	a807      	add	r0, sp, #28
    b1b8:	f7ff fcce 	bl	ab58 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    b1bc:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b1be:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    b1c0:	f10d 021a 	add.w	r2, sp, #26
    b1c4:	f10d 0016 	add.w	r0, sp, #22
    b1c8:	a906      	add	r1, sp, #24
    b1ca:	f003 f895 	bl	e2f8 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    b1ce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    b1d2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    b1d6:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    b1da:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    b1de:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b1e2:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
    b1e6:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    b1e8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    b1ec:	7022      	strb	r2, [r4, #0]
    b1ee:	9807      	ldr	r0, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    b1f0:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
    b1f4:	e5e2      	b.n	adbc <hci_cmd_handle+0x124>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    b1f6:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    b1f8:	8818      	ldrh	r0, [r3, #0]
    b1fa:	f005 ff09 	bl	11010 <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
    b1fe:	2000      	movs	r0, #0
    b200:	f7ff fc18 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b204:	e5da      	b.n	adbc <hci_cmd_handle+0x124>
	status = ll_rl_enable(cmd->enable);
    b206:	68a3      	ldr	r3, [r4, #8]
    b208:	7818      	ldrb	r0, [r3, #0]
    b20a:	f005 feeb 	bl	10fe4 <ll_rl_enable>
	*evt = cmd_complete_status(status);
    b20e:	f7ff fc11 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b212:	e5d3      	b.n	adbc <hci_cmd_handle+0x124>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    b214:	68a3      	ldr	r3, [r4, #8]
    b216:	6818      	ldr	r0, [r3, #0]
    b218:	9008      	str	r0, [sp, #32]
    b21a:	889a      	ldrh	r2, [r3, #4]
    b21c:	799b      	ldrb	r3, [r3, #6]
    b21e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b222:	2107      	movs	r1, #7
    b224:	a807      	add	r0, sp, #28
    b226:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    b22a:	f7ff fc95 	bl	ab58 <hci_cmd_complete>
    b22e:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    b230:	1c61      	adds	r1, r4, #1
    b232:	a808      	add	r0, sp, #32
    b234:	f006 fb04 	bl	11840 <ll_rl_lrpa_get>
    b238:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    b23a:	9807      	ldr	r0, [sp, #28]
    b23c:	e5be      	b.n	adbc <hci_cmd_handle+0x124>
    b23e:	68a3      	ldr	r3, [r4, #8]
    b240:	6818      	ldr	r0, [r3, #0]
    b242:	9008      	str	r0, [sp, #32]
    b244:	889a      	ldrh	r2, [r3, #4]
    b246:	799b      	ldrb	r3, [r3, #6]
    b248:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b24c:	2107      	movs	r1, #7
    b24e:	a807      	add	r0, sp, #28
    b250:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    b254:	f7ff fc80 	bl	ab58 <hci_cmd_complete>
    b258:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    b25a:	1c61      	adds	r1, r4, #1
    b25c:	a808      	add	r0, sp, #32
    b25e:	f006 facd 	bl	117fc <ll_rl_crpa_get>
    b262:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    b264:	9807      	ldr	r0, [sp, #28]
    b266:	e5a9      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b268:	2102      	movs	r1, #2
    b26a:	a807      	add	r0, sp, #28
    b26c:	f7ff fc74 	bl	ab58 <hci_cmd_complete>
    b270:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    b272:	f005 fe75 	bl	10f60 <ll_rl_size_get>
	rp->status = 0x00;
    b276:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    b278:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    b27a:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
    b27c:	9807      	ldr	r0, [sp, #28]
    b27e:	e59d      	b.n	adbc <hci_cmd_handle+0x124>
	status = ll_rl_clear();
    b280:	f005 fe70 	bl	10f64 <ll_rl_clear>
	*evt = cmd_complete_status(status);
    b284:	f7ff fbd6 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b288:	e598      	b.n	adbc <hci_cmd_handle+0x124>
	status = ll_rl_remove(&cmd->peer_id_addr);
    b28a:	68a0      	ldr	r0, [r4, #8]
    b28c:	f006 fa14 	bl	116b8 <ll_rl_remove>
	*evt = cmd_complete_status(status);
    b290:	f7ff fbd0 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b294:	e592      	b.n	adbc <hci_cmd_handle+0x124>
	status = ll_wl_remove(&cmd->addr);
    b296:	68a0      	ldr	r0, [r4, #8]
    b298:	f005 fde6 	bl	10e68 <ll_wl_remove>
	*evt = cmd_complete_status(status);
    b29c:	f7ff fbca 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b2a0:	e58c      	b.n	adbc <hci_cmd_handle+0x124>
	status = ll_wl_add(&cmd->addr);
    b2a2:	68a0      	ldr	r0, [r4, #8]
    b2a4:	f006 f8de 	bl	11464 <ll_wl_add>
	*evt = cmd_complete_status(status);
    b2a8:	f7ff fbc4 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b2ac:	e586      	b.n	adbc <hci_cmd_handle+0x124>
	status = ll_wl_clear();
    b2ae:	f005 fdb1 	bl	10e14 <ll_wl_clear>
	*evt = cmd_complete_status(status);
    b2b2:	f7ff fbbf 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b2b6:	e581      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b2b8:	2102      	movs	r1, #2
    b2ba:	a807      	add	r0, sp, #28
    b2bc:	f7ff fc4c 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    b2c0:	2300      	movs	r3, #0
    b2c2:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b2c4:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    b2c6:	f005 fda3 	bl	10e10 <ll_wl_size_get>
    b2ca:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    b2cc:	9807      	ldr	r0, [sp, #28]
    b2ce:	e575      	b.n	adbc <hci_cmd_handle+0x124>
	status = ll_adv_enable(cmd->enable);
    b2d0:	68a3      	ldr	r3, [r4, #8]
    b2d2:	7818      	ldrb	r0, [r3, #0]
    b2d4:	f7f5 f92c 	bl	530 <ll_adv_enable>
	*evt = cmd_complete_status(status);
    b2d8:	f7ff fbac 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b2dc:	e56e      	b.n	adbc <hci_cmd_handle+0x124>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    b2de:	68a1      	ldr	r1, [r4, #8]
    b2e0:	f811 0b01 	ldrb.w	r0, [r1], #1
    b2e4:	f002 fa5c 	bl	d7a0 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
    b2e8:	f7ff fba4 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b2ec:	e566      	b.n	adbc <hci_cmd_handle+0x124>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    b2ee:	68a1      	ldr	r1, [r4, #8]
    b2f0:	f811 0b01 	ldrb.w	r0, [r1], #1
    b2f4:	f002 fa22 	bl	d73c <ll_adv_data_set>
	*evt = cmd_complete_status(status);
    b2f8:	f7ff fb9c 	bl	aa34 <cmd_complete_status>
	if (err == -EINVAL) {
    b2fc:	e55e      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b2fe:	2102      	movs	r1, #2
    b300:	a807      	add	r0, sp, #28
    b302:	f7ff fc29 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    b306:	2300      	movs	r3, #0
    b308:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    b30a:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    b30c:	9807      	ldr	r0, [sp, #28]
    b30e:	e555      	b.n	adbc <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b310:	2103      	movs	r1, #3
    b312:	a807      	add	r0, sp, #28
    b314:	f7ff fc20 	bl	ab58 <hci_cmd_complete>
	rp->status = 0x00;
    b318:	4601      	mov	r1, r0
    b31a:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    b31c:	3001      	adds	r0, #1
	rp->status = 0x00;
    b31e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    b322:	f7ff fa25 	bl	a770 <ll_tx_pwr_get>
	if (err == -EINVAL) {
    b326:	9807      	ldr	r0, [sp, #28]
    b328:	e548      	b.n	adbc <hci_cmd_handle+0x124>
		le_conn_update(cmd, evt);
    b32a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    b32c:	8911      	ldrh	r1, [r2, #8]
    b32e:	8853      	ldrh	r3, [r2, #2]
    b330:	8810      	ldrh	r0, [r2, #0]
    b332:	9102      	str	r1, [sp, #8]
    b334:	88d1      	ldrh	r1, [r2, #6]
    b336:	9101      	str	r1, [sp, #4]
    b338:	8892      	ldrh	r2, [r2, #4]
    b33a:	9200      	str	r2, [sp, #0]
    b33c:	2200      	movs	r2, #0
    b33e:	4611      	mov	r1, r2
    b340:	f002 fe4e 	bl	dfe0 <ll_conn_update>
    b344:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    b346:	8828      	ldrh	r0, [r5, #0]
    b348:	f013 ff0c 	bl	1f164 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    b34c:	e536      	b.n	adbc <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    b34e:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b350:	2108      	movs	r1, #8
    b352:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    b354:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b356:	f7ff fbff 	bl	ab58 <hci_cmd_complete>
    b35a:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    b35c:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
    b35e:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
    b360:	f002 fed0 	bl	e104 <ll_chm_get>
	rp->status = status;
    b364:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    b366:	9807      	ldr	r0, [sp, #28]
    b368:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    b36c:	e526      	b.n	adbc <hci_cmd_handle+0x124>
		disconnect(cmd, evt);
    b36e:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    b370:	7899      	ldrb	r1, [r3, #2]
    b372:	8818      	ldrh	r0, [r3, #0]
    b374:	f002 fee6 	bl	e144 <ll_terminate_ind_send>
    b378:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    b37a:	8828      	ldrh	r0, [r5, #0]
    b37c:	f013 fef2 	bl	1f164 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    b380:	e51c      	b.n	adbc <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    b382:	68a3      	ldr	r3, [r4, #8]
    b384:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    b386:	a908      	add	r1, sp, #32
    b388:	4628      	mov	r0, r5
    b38a:	f003 f839 	bl	e400 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b38e:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    b390:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b392:	a807      	add	r0, sp, #28
    b394:	f7ff fbe0 	bl	ab58 <hci_cmd_complete>
	rp->status = status;
    b398:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    b39a:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    b39e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b3a2:	f8a0 3003 	strh.w	r3, [r0, #3]
    b3a6:	9807      	ldr	r0, [sp, #28]
}
    b3a8:	e508      	b.n	adbc <hci_cmd_handle+0x124>
	event_mask = DEFAULT_EVENT_MASK;
    b3aa:	490e      	ldr	r1, [pc, #56]	; (b3e4 <hci_cmd_handle+0x74c>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    b3ac:	4a0e      	ldr	r2, [pc, #56]	; (b3e8 <hci_cmd_handle+0x750>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    b3ae:	4b0c      	ldr	r3, [pc, #48]	; (b3e0 <hci_cmd_handle+0x748>)
	event_mask = DEFAULT_EVENT_MASK;
    b3b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    b3b4:	f641 75ff 	movw	r5, #8191	; 0x1fff
    b3b8:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    b3bc:	201f      	movs	r0, #31
    b3be:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    b3c0:	2400      	movs	r4, #0
    b3c2:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    b3c4:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    b3c8:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
    b3cc:	f000 ff48 	bl	c260 <ll_reset>
		*evt = cmd_complete_status(0x00);
    b3d0:	2000      	movs	r0, #0
    b3d2:	f7ff fb2f 	bl	aa34 <cmd_complete_status>
	conn_count = 0U;
    b3d6:	4b05      	ldr	r3, [pc, #20]	; (b3ec <hci_cmd_handle+0x754>)
    b3d8:	2200      	movs	r2, #0
    b3da:	601a      	str	r2, [r3, #0]
}
    b3dc:	e4ee      	b.n	adbc <hci_cmd_handle+0x124>
    b3de:	bf00      	nop
    b3e0:	20000170 	.word	0x20000170
    b3e4:	20000168 	.word	0x20000168
    b3e8:	20001338 	.word	0x20001338
    b3ec:	20001a2c 	.word	0x20001a2c
    b3f0:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    b3f2:	4b05      	ldr	r3, [pc, #20]	; (b408 <hci_cmd_handle+0x770>)
    b3f4:	e670      	b.n	b0d8 <hci_cmd_handle+0x440>
	return bt_hci_cmd_status_create(_opcode, status);
    b3f6:	2112      	movs	r1, #18
    b3f8:	f013 feb4 	bl	1f164 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    b3fc:	e4de      	b.n	adbc <hci_cmd_handle+0x124>
	return bt_hci_cmd_status_create(_opcode, status);
    b3fe:	2111      	movs	r1, #17
    b400:	f013 feb0 	bl	1f164 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    b404:	e4da      	b.n	adbc <hci_cmd_handle+0x124>
    b406:	bf00      	nop
    b408:	20001338 	.word	0x20001338

0000b40c <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
    b40c:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    b40e:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    b410:	2b03      	cmp	r3, #3
	*evt = NULL;
    b412:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    b414:	d941      	bls.n	b49a <hci_acl_handle+0x8e>
{
    b416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b41a:	4605      	mov	r5, r0
    b41c:	460e      	mov	r6, r1
	acl = net_buf_pull_mem(buf, sizeof(*acl));
    b41e:	3008      	adds	r0, #8
    b420:	2104      	movs	r1, #4
    b422:	f015 fd51 	bl	20ec8 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    b426:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    b428:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    b42a:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
    b42e:	42bb      	cmp	r3, r7
    b430:	d30a      	bcc.n	b448 <hci_acl_handle+0x3c>
	node_tx = ll_tx_mem_acquire();
    b432:	f002 fd7f 	bl	df34 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    b436:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
    b43a:	4604      	mov	r4, r0
    b43c:	b318      	cbz	r0, b486 <hci_acl_handle+0x7a>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    b43e:	089a      	lsrs	r2, r3, #2
    b440:	d102      	bne.n	b448 <hci_acl_handle+0x3c>
	switch (bt_acl_flags_pb(flags)) {
    b442:	b1d3      	cbz	r3, b47a <hci_acl_handle+0x6e>
    b444:	2b01      	cmp	r3, #1
    b446:	d003      	beq.n	b450 <hci_acl_handle+0x44>
		return -EINVAL;
    b448:	f06f 0015 	mvn.w	r0, #21
}
    b44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b450:	7902      	ldrb	r2, [r0, #4]
    b452:	f363 0201 	bfi	r2, r3, #0, #2
    b456:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
    b458:	7167      	strb	r7, [r4, #5]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b45a:	68a9      	ldr	r1, [r5, #8]
    b45c:	463a      	mov	r2, r7
    b45e:	1de0      	adds	r0, r4, #7
    b460:	f01b faf3 	bl	26a4a <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    b464:	4621      	mov	r1, r4
    b466:	f3c8 000b 	ubfx	r0, r8, #0, #12
    b46a:	f002 fd6f 	bl	df4c <ll_tx_mem_enqueue>
    b46e:	2800      	cmp	r0, #0
    b470:	d0ec      	beq.n	b44c <hci_acl_handle+0x40>
		ll_tx_mem_release(node_tx);
    b472:	4620      	mov	r0, r4
    b474:	f002 fd64 	bl	df40 <ll_tx_mem_release>
    b478:	e7e6      	b.n	b448 <hci_acl_handle+0x3c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    b47a:	7903      	ldrb	r3, [r0, #4]
    b47c:	2202      	movs	r2, #2
    b47e:	f362 0301 	bfi	r3, r2, #0, #2
    b482:	7103      	strb	r3, [r0, #4]
		break;
    b484:	e7e8      	b.n	b458 <hci_acl_handle+0x4c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    b486:	4b13      	ldr	r3, [pc, #76]	; (b4d4 <hci_acl_handle+0xc8>)
    b488:	6819      	ldr	r1, [r3, #0]
    b48a:	4603      	mov	r3, r0
    b48c:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
    b490:	4313      	orrs	r3, r2
    b492:	d105      	bne.n	b4a0 <hci_acl_handle+0x94>
		return -ENOBUFS;
    b494:	f06f 0068 	mvn.w	r0, #104	; 0x68
    b498:	e7d8      	b.n	b44c <hci_acl_handle+0x40>
		return -EINVAL;
    b49a:	f06f 0015 	mvn.w	r0, #21
}
    b49e:	4770      	bx	lr
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b4a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b4a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b4a8:	2001      	movs	r0, #1
    b4aa:	f7fb f8cd 	bl	6648 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    b4ae:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b4b0:	6030      	str	r0, [r6, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
    b4b2:	3008      	adds	r0, #8
    b4b4:	f015 fcd6 	bl	20e64 <net_buf_simple_add>
	hdr->len = len;
    b4b8:	2401      	movs	r4, #1
	hdr->evt = evt;
    b4ba:	221a      	movs	r2, #26
    b4bc:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    b4be:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
    b4c0:	6830      	ldr	r0, [r6, #0]
    b4c2:	4621      	mov	r1, r4
    b4c4:	3008      	adds	r0, #8
    b4c6:	f015 fccd 	bl	20e64 <net_buf_simple_add>
    b4ca:	4603      	mov	r3, r0
		return -ENOBUFS;
    b4cc:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    b4d0:	701c      	strb	r4, [r3, #0]
    b4d2:	e7bb      	b.n	b44c <hci_acl_handle+0x40>
    b4d4:	20000168 	.word	0x20000168

0000b4d8 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    b4d8:	4b06      	ldr	r3, [pc, #24]	; (b4f4 <hci_disconn_complete_encode+0x1c>)
    b4da:	681b      	ldr	r3, [r3, #0]
{
    b4dc:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    b4de:	f003 0410 	and.w	r4, r3, #16
    b4e2:	2500      	movs	r5, #0
    b4e4:	ea54 0305 	orrs.w	r3, r4, r5
    b4e8:	d101      	bne.n	b4ee <hci_disconn_complete_encode+0x16>
}
    b4ea:	bc30      	pop	{r4, r5}
    b4ec:	4770      	bx	lr
    b4ee:	bc30      	pop	{r4, r5}
    b4f0:	f7ff bb1a 	b.w	ab28 <hci_disconn_complete_encode.part.0>
    b4f4:	20000168 	.word	0x20000168

0000b4f8 <hci_disconn_complete_process>:
	conn_count--;
    b4f8:	4a02      	ldr	r2, [pc, #8]	; (b504 <hci_disconn_complete_process+0xc>)
    b4fa:	6813      	ldr	r3, [r2, #0]
    b4fc:	3b01      	subs	r3, #1
    b4fe:	6013      	str	r3, [r2, #0]
}
    b500:	4770      	bx	lr
    b502:	bf00      	nop
    b504:	20001a2c 	.word	0x20001a2c

0000b508 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    b508:	7f03      	ldrb	r3, [r0, #28]
    b50a:	f003 0303 	and.w	r3, r3, #3
    b50e:	3b01      	subs	r3, #1
    b510:	2b01      	cmp	r3, #1
{
    b512:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    b514:	d90d      	bls.n	b532 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    b516:	4a16      	ldr	r2, [pc, #88]	; (b570 <hci_acl_encode+0x68>)
    b518:	4916      	ldr	r1, [pc, #88]	; (b574 <hci_acl_encode+0x6c>)
    b51a:	4817      	ldr	r0, [pc, #92]	; (b578 <hci_acl_encode+0x70>)
    b51c:	f241 5315 	movw	r3, #5397	; 0x1515
    b520:	f012 fbe5 	bl	1dcee <printk>
    b524:	4040      	eors	r0, r0
    b526:	f380 8811 	msr	BASEPRI, r0
    b52a:	f04f 0003 	mov.w	r0, #3
    b52e:	df02      	svc	2
		break;
	}
}
    b530:	bd70      	pop	{r4, r5, r6, pc}
    b532:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    b534:	f101 0508 	add.w	r5, r1, #8
    b538:	4628      	mov	r0, r5
    b53a:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    b53c:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    b53e:	f015 fc91 	bl	20e64 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    b542:	7f23      	ldrb	r3, [r4, #28]
    b544:	f003 0303 	and.w	r3, r3, #3
    b548:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    b54a:	bf0c      	ite	eq
    b54c:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    b550:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    b554:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    b556:	7f61      	ldrb	r1, [r4, #29]
    b558:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    b55a:	4628      	mov	r0, r5
    b55c:	f015 fc82 	bl	20e64 <net_buf_simple_add>
    b560:	7f62      	ldrb	r2, [r4, #29]
    b562:	f104 011f 	add.w	r1, r4, #31
}
    b566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b56a:	f01b ba6e 	b.w	26a4a <memcpy>
    b56e:	bf00      	nop
    b570:	0002769c 	.word	0x0002769c
    b574:	00027650 	.word	0x00027650
    b578:	000275f0 	.word	0x000275f0

0000b57c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    b57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b580:	7905      	ldrb	r5, [r0, #4]
    b582:	88c7      	ldrh	r7, [r0, #6]
    b584:	2d02      	cmp	r5, #2
{
    b586:	4604      	mov	r4, r0
    b588:	b084      	sub	sp, #16
    b58a:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    b58c:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b590:	d00c      	beq.n	b5ac <hci_evt_encode+0x30>
	switch (node_rx->hdr.type) {
    b592:	3d0f      	subs	r5, #15
    b594:	2d06      	cmp	r5, #6
    b596:	f200 822d 	bhi.w	b9f4 <hci_evt_encode+0x478>
    b59a:	e8df f015 	tbh	[pc, r5, lsl #1]
    b59e:	0034      	.short	0x0034
    b5a0:	008c00f9 	.word	0x008c00f9
    b5a4:	00c800ae 	.word	0x00c800ae
    b5a8:	002100df 	.word	0x002100df
	switch (pdu_data->llctrl.opcode) {
    b5ac:	7fe3      	ldrb	r3, [r4, #31]
    b5ae:	3b03      	subs	r3, #3
    b5b0:	2b12      	cmp	r3, #18
    b5b2:	f200 80fc 	bhi.w	b7ae <hci_evt_encode+0x232>
    b5b6:	e8df f013 	tbh	[pc, r3, lsl #1]
    b5ba:	0184      	.short	0x0184
    b5bc:	00fa00fa 	.word	0x00fa00fa
    b5c0:	01b50167 	.word	0x01b50167
    b5c4:	01c300fa 	.word	0x01c300fa
    b5c8:	00fa00fa 	.word	0x00fa00fa
    b5cc:	017700fa 	.word	0x017700fa
    b5d0:	014800fa 	.word	0x014800fa
    b5d4:	00fa00fa 	.word	0x00fa00fa
    b5d8:	00fa00fa 	.word	0x00fa00fa
    b5dc:	01080108 	.word	0x01080108
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b5e0:	4bc9      	ldr	r3, [pc, #804]	; (b908 <hci_evt_encode+0x38c>)
    b5e2:	6858      	ldr	r0, [r3, #4]
    b5e4:	2100      	movs	r1, #0
    b5e6:	460a      	mov	r2, r1
    b5e8:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b5ec:	4313      	orrs	r3, r2
    b5ee:	d007      	beq.n	b600 <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    b5f0:	4bc6      	ldr	r3, [pc, #792]	; (b90c <hci_evt_encode+0x390>)
    b5f2:	6818      	ldr	r0, [r3, #0]
    b5f4:	460b      	mov	r3, r1
    b5f6:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b5fa:	4313      	orrs	r3, r2
    b5fc:	f040 8105 	bne.w	b80a <hci_evt_encode+0x28e>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    b600:	b004      	add	sp, #16
    b602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t status = cc->status;
    b606:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
    b608:	2d00      	cmp	r5, #0
    b60a:	f000 819e 	beq.w	b94a <hci_evt_encode+0x3ce>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b60e:	4bbe      	ldr	r3, [pc, #760]	; (b908 <hci_evt_encode+0x38c>)
    b610:	6859      	ldr	r1, [r3, #4]
    b612:	f04f 0800 	mov.w	r8, #0
    b616:	4642      	mov	r2, r8
    b618:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    b61c:	4313      	orrs	r3, r2
    b61e:	d0ef      	beq.n	b600 <hci_evt_encode+0x84>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    b620:	4bba      	ldr	r3, [pc, #744]	; (b90c <hci_evt_encode+0x390>)
    b622:	f8d3 c000 	ldr.w	ip, [r3]
    b626:	f240 2101 	movw	r1, #513	; 0x201
    b62a:	ea0c 0201 	and.w	r2, ip, r1
    b62e:	4643      	mov	r3, r8
    b630:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    b632:	f40c 7000 	and.w	r0, ip, #512	; 0x200
    b636:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    b638:	d0e2      	beq.n	b600 <hci_evt_encode+0x84>
	if (!status) {
    b63a:	2d00      	cmp	r5, #0
    b63c:	f040 8198 	bne.w	b970 <hci_evt_encode+0x3f4>
		conn_count++;
    b640:	4ab3      	ldr	r2, [pc, #716]	; (b910 <hci_evt_encode+0x394>)
    b642:	6813      	ldr	r3, [r2, #0]
    b644:	3301      	adds	r3, #1
    b646:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    b648:	ea50 0301 	orrs.w	r3, r0, r1
    b64c:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b650:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    b652:	f000 819c 	beq.w	b98e <hci_evt_encode+0x412>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b656:	221e      	movs	r2, #30
    b658:	210a      	movs	r1, #10
    b65a:	f7ff f9fd 	bl	aa58 <meta_evt>
		leecc->status = 0x00;
    b65e:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    b660:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
    b664:	7f62      	ldrb	r2, [r4, #29]
    b666:	70c2      	strb	r2, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    b668:	7fa2      	ldrb	r2, [r4, #30]
    b66a:	7102      	strb	r2, [r0, #4]
    b66c:	f8d8 2000 	ldr.w	r2, [r8]
    b670:	f8c0 2005 	str.w	r2, [r0, #5]
    b674:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    b678:	f8a0 2009 	strh.w	r2, [r0, #9]
    b67c:	4623      	mov	r3, r4
    b67e:	f853 2f2b 	ldr.w	r2, [r3, #43]!
    b682:	f8c0 200b 	str.w	r2, [r0, #11]
    b686:	889b      	ldrh	r3, [r3, #4]
    b688:	f8a0 300f 	strh.w	r3, [r0, #15]
    b68c:	4623      	mov	r3, r4
    b68e:	f853 2f25 	ldr.w	r2, [r3, #37]!
    b692:	f8c0 2011 	str.w	r2, [r0, #17]
    b696:	889b      	ldrh	r3, [r3, #4]
    b698:	f8a0 3015 	strh.w	r3, [r0, #21]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    b69c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    b69e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    b6a0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    b6a2:	f8a0 2019 	strh.w	r2, [r0, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    b6a6:	f8a0 1017 	strh.w	r1, [r0, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    b6aa:	f8a0 301b 	strh.w	r3, [r0, #27]
		leecc->clock_accuracy = cc->sca;
    b6ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    b6b2:	7743      	strb	r3, [r0, #29]
		return;
    b6b4:	e7a4      	b.n	b600 <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b6b6:	4b94      	ldr	r3, [pc, #592]	; (b908 <hci_evt_encode+0x38c>)
    b6b8:	6858      	ldr	r0, [r3, #4]
    b6ba:	2100      	movs	r1, #0
    b6bc:	460a      	mov	r2, r1
    b6be:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b6c2:	4313      	orrs	r3, r2
    b6c4:	d09c      	beq.n	b600 <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    b6c6:	4b91      	ldr	r3, [pc, #580]	; (b90c <hci_evt_encode+0x390>)
    b6c8:	6818      	ldr	r0, [r3, #0]
    b6ca:	460b      	mov	r3, r1
    b6cc:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b6d0:	4313      	orrs	r3, r2
    b6d2:	d095      	beq.n	b600 <hci_evt_encode+0x84>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    b6d4:	2209      	movs	r2, #9
    b6d6:	2103      	movs	r1, #3
    b6d8:	4630      	mov	r0, r6
    b6da:	f7ff f9bd 	bl	aa58 <meta_evt>
	sep->status = cu->status;
    b6de:	7f23      	ldrb	r3, [r4, #28]
    b6e0:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    b6e2:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    b6e4:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    b6e6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b6e8:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
    b6ec:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    b6f0:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    b6f4:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    b6f8:	e782      	b.n	b600 <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    b6fa:	4b83      	ldr	r3, [pc, #524]	; (b908 <hci_evt_encode+0x38c>)
    b6fc:	6859      	ldr	r1, [r3, #4]
    b6fe:	2400      	movs	r4, #0
    b700:	4622      	mov	r2, r4
    b702:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
    b706:	4313      	orrs	r3, r2
    b708:	f43f af7a 	beq.w	b600 <hci_evt_encode+0x84>
	hdr = net_buf_add(buf, sizeof(*hdr));
    b70c:	3608      	adds	r6, #8
    b70e:	2102      	movs	r1, #2
    b710:	4630      	mov	r0, r6
    b712:	f015 fba7 	bl	20e64 <net_buf_simple_add>
    b716:	4603      	mov	r3, r0
	hdr->evt = evt;
    b718:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
    b71a:	2103      	movs	r1, #3
	ep = net_buf_add(buf, sizeof(*ep));
    b71c:	4630      	mov	r0, r6
	hdr->evt = evt;
    b71e:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    b720:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    b722:	f015 fb9f 	bl	20e64 <net_buf_simple_add>
	ep->status = 0x00;
    b726:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b728:	f8a0 7001 	strh.w	r7, [r0, #1]
    b72c:	e768      	b.n	b600 <hci_evt_encode+0x84>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    b72e:	4b79      	ldr	r3, [pc, #484]	; (b914 <hci_evt_encode+0x398>)
    b730:	6819      	ldr	r1, [r3, #0]
    b732:	2300      	movs	r3, #0
    b734:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
    b738:	4313      	orrs	r3, r2
    b73a:	f43f af61 	beq.w	b600 <hci_evt_encode+0x84>
	hdr = net_buf_add(buf, sizeof(*hdr));
    b73e:	3608      	adds	r6, #8
    b740:	2102      	movs	r1, #2
    b742:	4630      	mov	r0, r6
    b744:	f015 fb8e 	bl	20e64 <net_buf_simple_add>
    b748:	4603      	mov	r3, r0
	hdr->evt = evt;
    b74a:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
    b74c:	2102      	movs	r1, #2
	ep = net_buf_add(buf, sizeof(*ep));
    b74e:	4630      	mov	r0, r6
	hdr->evt = evt;
    b750:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    b752:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    b754:	f015 fb86 	bl	20e64 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    b758:	8007      	strh	r7, [r0, #0]
    b75a:	e751      	b.n	b600 <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b75c:	4b6a      	ldr	r3, [pc, #424]	; (b908 <hci_evt_encode+0x38c>)
    b75e:	6858      	ldr	r0, [r3, #4]
    b760:	2100      	movs	r1, #0
    b762:	460a      	mov	r2, r1
    b764:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b768:	4313      	orrs	r3, r2
    b76a:	f43f af49 	beq.w	b600 <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    b76e:	4b67      	ldr	r3, [pc, #412]	; (b90c <hci_evt_encode+0x390>)
    b770:	6818      	ldr	r0, [r3, #0]
    b772:	460b      	mov	r3, r1
    b774:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b778:	4313      	orrs	r3, r2
    b77a:	f43f af41 	beq.w	b600 <hci_evt_encode+0x84>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    b77e:	4630      	mov	r0, r6
    b780:	2203      	movs	r2, #3
    b782:	2114      	movs	r1, #20
    b784:	f7ff f968 	bl	aa58 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    b788:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    b78a:	7f23      	ldrb	r3, [r4, #28]
    b78c:	7083      	strb	r3, [r0, #2]
    b78e:	e737      	b.n	b600 <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    b790:	4b5d      	ldr	r3, [pc, #372]	; (b908 <hci_evt_encode+0x38c>)
    b792:	6819      	ldr	r1, [r3, #0]
    b794:	2300      	movs	r3, #0
    b796:	f001 0210 	and.w	r2, r1, #16
    b79a:	4313      	orrs	r3, r2
    b79c:	f43f af30 	beq.w	b600 <hci_evt_encode+0x84>
    b7a0:	4632      	mov	r2, r6
    b7a2:	4639      	mov	r1, r7
}
    b7a4:	b004      	add	sp, #16
    b7a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b7aa:	f7ff b9bd 	b.w	ab28 <hci_disconn_complete_encode.part.0>
		LL_ASSERT(0);
    b7ae:	f241 43e9 	movw	r3, #5353	; 0x14e9
    b7b2:	4a59      	ldr	r2, [pc, #356]	; (b918 <hci_evt_encode+0x39c>)
    b7b4:	4959      	ldr	r1, [pc, #356]	; (b91c <hci_evt_encode+0x3a0>)
    b7b6:	485a      	ldr	r0, [pc, #360]	; (b920 <hci_evt_encode+0x3a4>)
    b7b8:	f012 fa99 	bl	1dcee <printk>
    b7bc:	4040      	eors	r0, r0
    b7be:	f380 8811 	msr	BASEPRI, r0
    b7c2:	f04f 0003 	mov.w	r0, #3
    b7c6:	df02      	svc	2
}
    b7c8:	e71a      	b.n	b600 <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b7ca:	4b4f      	ldr	r3, [pc, #316]	; (b908 <hci_evt_encode+0x38c>)
    b7cc:	6858      	ldr	r0, [r3, #4]
    b7ce:	2100      	movs	r1, #0
    b7d0:	460a      	mov	r2, r1
    b7d2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b7d6:	4313      	orrs	r3, r2
    b7d8:	f43f af12 	beq.w	b600 <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    b7dc:	4b4b      	ldr	r3, [pc, #300]	; (b90c <hci_evt_encode+0x390>)
    b7de:	6818      	ldr	r0, [r3, #0]
    b7e0:	460b      	mov	r3, r1
    b7e2:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b7e6:	4313      	orrs	r3, r2
    b7e8:	f43f af0a 	beq.w	b600 <hci_evt_encode+0x84>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    b7ec:	4630      	mov	r0, r6
    b7ee:	220a      	movs	r2, #10
    b7f0:	2107      	movs	r1, #7
    b7f2:	f7ff f931 	bl	aa58 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    b7f6:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    b7f8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    b7fa:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    b7fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    b7fe:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    b800:	8c23      	ldrh	r3, [r4, #32]
    b802:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    b804:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b806:	8103      	strh	r3, [r0, #8]
    b808:	e6fa      	b.n	b600 <hci_evt_encode+0x84>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    b80a:	2205      	movs	r2, #5
    b80c:	4630      	mov	r0, r6
    b80e:	210c      	movs	r1, #12
    b810:	f7ff f922 	bl	aa58 <meta_evt>
	sep->status = pu->status;
    b814:	7f23      	ldrb	r3, [r4, #28]
    b816:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    b818:	f8a0 7001 	strh.w	r7, [r0, #1]
    b81c:	7f62      	ldrb	r2, [r4, #29]
    b81e:	2a00      	cmp	r2, #0
    b820:	fa92 f3a2 	rbit	r3, r2
    b824:	fab3 f383 	clz	r3, r3
    b828:	bf08      	it	eq
    b82a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b82e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    b830:	70c3      	strb	r3, [r0, #3]
    b832:	7fa2      	ldrb	r2, [r4, #30]
    b834:	fa92 f3a2 	rbit	r3, r2
    b838:	2a00      	cmp	r2, #0
    b83a:	fab3 f383 	clz	r3, r3
    b83e:	bf08      	it	eq
    b840:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b844:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    b846:	7103      	strb	r3, [r0, #4]
    b848:	e6da      	b.n	b600 <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b84a:	4b2f      	ldr	r3, [pc, #188]	; (b908 <hci_evt_encode+0x38c>)
    b84c:	6858      	ldr	r0, [r3, #4]
    b84e:	2100      	movs	r1, #0
    b850:	460a      	mov	r2, r1
    b852:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b856:	4313      	orrs	r3, r2
    b858:	f000 8080 	beq.w	b95c <hci_evt_encode+0x3e0>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    b85c:	4b2b      	ldr	r3, [pc, #172]	; (b90c <hci_evt_encode+0x390>)
    b85e:	6818      	ldr	r0, [r3, #0]
    b860:	460b      	mov	r3, r1
    b862:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b866:	4313      	orrs	r3, r2
    b868:	d078      	beq.n	b95c <hci_evt_encode+0x3e0>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    b86a:	4630      	mov	r0, r6
    b86c:	220a      	movs	r2, #10
    b86e:	2106      	movs	r1, #6
    b870:	f7ff f8f2 	bl	aa58 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    b874:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    b876:	8c23      	ldrh	r3, [r4, #32]
    b878:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    b87a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b87c:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    b87e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    b880:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    b882:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    b884:	8103      	strh	r3, [r0, #8]
    b886:	e6bb      	b.n	b600 <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    b888:	4b1f      	ldr	r3, [pc, #124]	; (b908 <hci_evt_encode+0x38c>)
    b88a:	6819      	ldr	r1, [r3, #0]
    b88c:	2000      	movs	r0, #0
    b88e:	f001 0280 	and.w	r2, r1, #128	; 0x80
    b892:	4603      	mov	r3, r0
    b894:	4313      	orrs	r3, r2
    b896:	f43f aeb3 	beq.w	b600 <hci_evt_encode+0x84>
    b89a:	4632      	mov	r2, r6
    b89c:	4639      	mov	r1, r7
}
    b89e:	b004      	add	sp, #16
    b8a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b8a4:	f7ff b8f0 	b.w	aa88 <encrypt_change.part.0>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    b8a8:	4b17      	ldr	r3, [pc, #92]	; (b908 <hci_evt_encode+0x38c>)
    b8aa:	6819      	ldr	r1, [r3, #0]
    b8ac:	2300      	movs	r3, #0
    b8ae:	f001 0280 	and.w	r2, r1, #128	; 0x80
    b8b2:	4313      	orrs	r3, r2
    b8b4:	f43f aea4 	beq.w	b600 <hci_evt_encode+0x84>
    b8b8:	f894 0020 	ldrb.w	r0, [r4, #32]
    b8bc:	4632      	mov	r2, r6
    b8be:	4639      	mov	r1, r7
    b8c0:	e7ed      	b.n	b89e <hci_evt_encode+0x322>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b8c2:	4b11      	ldr	r3, [pc, #68]	; (b908 <hci_evt_encode+0x38c>)
    b8c4:	6858      	ldr	r0, [r3, #4]
    b8c6:	2100      	movs	r1, #0
    b8c8:	460a      	mov	r2, r1
    b8ca:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b8ce:	4313      	orrs	r3, r2
    b8d0:	f43f ae96 	beq.w	b600 <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    b8d4:	4b0d      	ldr	r3, [pc, #52]	; (b90c <hci_evt_encode+0x390>)
    b8d6:	6818      	ldr	r0, [r3, #0]
    b8d8:	460b      	mov	r3, r1
    b8da:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b8de:	4313      	orrs	r3, r2
    b8e0:	f43f ae8e 	beq.w	b600 <hci_evt_encode+0x84>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    b8e4:	220c      	movs	r2, #12
    b8e6:	2105      	movs	r1, #5
    b8e8:	4630      	mov	r0, r6
    b8ea:	f7ff f8b5 	bl	aa58 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    b8ee:	4603      	mov	r3, r0
    b8f0:	4622      	mov	r2, r4
    b8f2:	f823 7b02 	strh.w	r7, [r3], #2
    b8f6:	f852 1f20 	ldr.w	r1, [r2, #32]!
    b8fa:	6852      	ldr	r2, [r2, #4]
    b8fc:	f8c0 1002 	str.w	r1, [r0, #2]
    b900:	605a      	str	r2, [r3, #4]
    b902:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    b904:	8143      	strh	r3, [r0, #10]
    b906:	e67b      	b.n	b600 <hci_evt_encode+0x84>
    b908:	20000168 	.word	0x20000168
    b90c:	20000170 	.word	0x20000170
    b910:	20001a2c 	.word	0x20001a2c
    b914:	20001338 	.word	0x20001338
    b918:	0002769c 	.word	0x0002769c
    b91c:	00027650 	.word	0x00027650
    b920:	000275f0 	.word	0x000275f0
	switch (pdu_data->llctrl.unknown_rsp.type) {
    b924:	f894 3020 	ldrb.w	r3, [r4, #32]
    b928:	2b0e      	cmp	r3, #14
    b92a:	f47f ae69 	bne.w	b600 <hci_evt_encode+0x84>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    b92e:	460b      	mov	r3, r1
    b930:	463a      	mov	r2, r7
    b932:	2100      	movs	r1, #0
    b934:	201a      	movs	r0, #26
}
    b936:	b004      	add	sp, #16
    b938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    b93c:	f7ff b8be 	b.w	aabc <le_remote_feat_complete>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    b940:	460b      	mov	r3, r1
    b942:	463a      	mov	r2, r7
    b944:	4601      	mov	r1, r0
    b946:	2000      	movs	r0, #0
    b948:	e7f5      	b.n	b936 <hci_evt_encode+0x3ba>
		ll_rl_crpa_set(cc->peer_addr_type,
    b94a:	7fa0      	ldrb	r0, [r4, #30]
    b94c:	f104 0325 	add.w	r3, r4, #37	; 0x25
    b950:	22ff      	movs	r2, #255	; 0xff
    b952:	f104 011f 	add.w	r1, r4, #31
    b956:	f005 ff2f 	bl	117b8 <ll_rl_crpa_set>
    b95a:	e658      	b.n	b60e <hci_evt_encode+0x92>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    b95c:	2300      	movs	r3, #0
    b95e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    b962:	4638      	mov	r0, r7
    b964:	9300      	str	r3, [sp, #0]
    b966:	221a      	movs	r2, #26
    b968:	2102      	movs	r1, #2
    b96a:	f002 fb39 	bl	dfe0 <ll_conn_update>
		return;
    b96e:	e647      	b.n	b600 <hci_evt_encode+0x84>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    b970:	ea50 0301 	orrs.w	r3, r0, r1
    b974:	d02d      	beq.n	b9d2 <hci_evt_encode+0x456>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b976:	221e      	movs	r2, #30
    b978:	210a      	movs	r1, #10
    b97a:	4630      	mov	r0, r6
    b97c:	f7ff f86c 	bl	aa58 <meta_evt>
    b980:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    b982:	4641      	mov	r1, r8
    b984:	221e      	movs	r2, #30
    b986:	f01b f881 	bl	26a8c <memset>
			leecc->status = status;
    b98a:	7025      	strb	r5, [r4, #0]
			return;
    b98c:	e638      	b.n	b600 <hci_evt_encode+0x84>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    b98e:	2212      	movs	r2, #18
    b990:	2101      	movs	r1, #1
    b992:	f7ff f861 	bl	aa58 <meta_evt>
	lecc->status = 0x00;
    b996:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    b998:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
    b99c:	7f63      	ldrb	r3, [r4, #29]
    b99e:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    b9a0:	7fa3      	ldrb	r3, [r4, #30]
    b9a2:	f003 0301 	and.w	r3, r3, #1
    b9a6:	7103      	strb	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b9a8:	f8d8 3000 	ldr.w	r3, [r8]
    b9ac:	f8c0 3005 	str.w	r3, [r0, #5]
    b9b0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    b9b4:	f8a0 3009 	strh.w	r3, [r0, #9]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    b9b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    b9ba:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    b9bc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    b9be:	f8a0 200d 	strh.w	r2, [r0, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    b9c2:	f8a0 100b 	strh.w	r1, [r0, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    b9c6:	f8a0 300f 	strh.w	r3, [r0, #15]
	lecc->clock_accuracy = cc->sca;
    b9ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    b9ce:	7443      	strb	r3, [r0, #17]
    b9d0:	e616      	b.n	b600 <hci_evt_encode+0x84>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    b9d2:	4630      	mov	r0, r6
    b9d4:	2212      	movs	r2, #18
    b9d6:	2101      	movs	r1, #1
    b9d8:	f7ff f83e 	bl	aa58 <meta_evt>
__ssp_bos_icheck3(memset, void *, int)
    b9dc:	f8c0 8000 	str.w	r8, [r0]
    b9e0:	f8c0 8004 	str.w	r8, [r0, #4]
    b9e4:	f8c0 8008 	str.w	r8, [r0, #8]
    b9e8:	f8c0 800c 	str.w	r8, [r0, #12]
    b9ec:	f8a0 8010 	strh.w	r8, [r0, #16]
		lecc->status = status;
    b9f0:	7005      	strb	r5, [r0, #0]
		return;
    b9f2:	e605      	b.n	b600 <hci_evt_encode+0x84>
		LL_ASSERT(0);
    b9f4:	f44f 53a1 	mov.w	r3, #5152	; 0x1420
    b9f8:	e6db      	b.n	b7b2 <hci_evt_encode+0x236>
    b9fa:	bf00      	nop

0000b9fc <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    b9fc:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    b9fe:	f100 0408 	add.w	r4, r0, #8
{
    ba02:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    ba04:	4620      	mov	r0, r4
    ba06:	2102      	movs	r1, #2
{
    ba08:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    ba0a:	f015 fa2b 	bl	20e64 <net_buf_simple_add>
    ba0e:	4603      	mov	r3, r0
	hdr->evt = evt;
    ba10:	2213      	movs	r2, #19
	hdr->len = len;
    ba12:	2105      	movs	r1, #5
	hdr->evt = evt;
    ba14:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    ba16:	7059      	strb	r1, [r3, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
    ba18:	4620      	mov	r0, r4
    ba1a:	f015 fa23 	bl	20e64 <net_buf_simple_add>
	ep->num_handles = num_handles;
    ba1e:	2301      	movs	r3, #1
    ba20:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    ba22:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    ba26:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    ba2a:	bd70      	pop	{r4, r5, r6, pc}

0000ba2c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    ba2c:	7903      	ldrb	r3, [r0, #4]
    ba2e:	2b02      	cmp	r3, #2
    ba30:	d009      	beq.n	ba46 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
    ba32:	2b0f      	cmp	r3, #15
    ba34:	d005      	beq.n	ba42 <hci_get_class+0x16>
    ba36:	3b10      	subs	r3, #16
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
    ba38:	2b05      	cmp	r3, #5
    ba3a:	bf94      	ite	ls
    ba3c:	2003      	movls	r0, #3
    ba3e:	2000      	movhi	r0, #0
    ba40:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    ba42:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    ba44:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    ba46:	7f03      	ldrb	r3, [r0, #28]
    ba48:	f003 0303 	and.w	r3, r3, #3
    ba4c:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
    ba4e:	bf0c      	ite	eq
    ba50:	2004      	moveq	r0, #4
    ba52:	2005      	movne	r0, #5
    ba54:	4770      	bx	lr
    ba56:	bf00      	nop

0000ba58 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
    ba58:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    ba5a:	480b      	ldr	r0, [pc, #44]	; (ba88 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    ba5c:	490b      	ldr	r1, [pc, #44]	; (ba8c <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    ba5e:	4a0c      	ldr	r2, [pc, #48]	; (ba90 <hci_init+0x38>)
	conn_count = 0U;
    ba60:	4b0c      	ldr	r3, [pc, #48]	; (ba94 <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
    ba62:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ba66:	f641 75ff 	movw	r5, #8191	; 0x1fff
    ba6a:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    ba6e:	2400      	movs	r4, #0
    ba70:	2500      	movs	r5, #0
    ba72:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    ba76:	201f      	movs	r0, #31
    ba78:	2100      	movs	r1, #0
    ba7a:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
    ba7e:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    ba80:	bc30      	pop	{r4, r5}
	conn_count = 0U;
    ba82:	601a      	str	r2, [r3, #0]
}
    ba84:	4770      	bx	lr
    ba86:	bf00      	nop
    ba88:	20000168 	.word	0x20000168
    ba8c:	20001338 	.word	0x20001338
    ba90:	20000170 	.word	0x20000170
    ba94:	20001a2c 	.word	0x20001a2c

0000ba98 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    ba98:	f006 ba94 	b.w	11fc4 <lll_csrand_get>

0000ba9c <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    ba9c:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    ba9e:	2300      	movs	r3, #0
    baa0:	f007 ff82 	bl	139a8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    baa4:	2000      	movs	r0, #0
    baa6:	bd08      	pop	{r3, pc}

0000baa8 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    baa8:	b510      	push	{r4, lr}
    baaa:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    baac:	f006 faac 	bl	12008 <lll_reset>
	LL_ASSERT(!err);
    bab0:	b950      	cbnz	r0, bac8 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    bab2:	f006 fdc1 	bl	12638 <lll_adv_reset>
	LL_ASSERT(!err);
    bab6:	b9c0      	cbnz	r0, baea <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    bab8:	f007 fa60 	bl	12f7c <lll_conn_reset>
	LL_ASSERT(!err);
    babc:	bb30      	cbnz	r0, bb0c <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    babe:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    bac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bac4:	f00f ba5e 	b.w	1af84 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    bac8:	4a19      	ldr	r2, [pc, #100]	; (bb30 <perform_lll_reset+0x88>)
    baca:	491a      	ldr	r1, [pc, #104]	; (bb34 <perform_lll_reset+0x8c>)
    bacc:	481a      	ldr	r0, [pc, #104]	; (bb38 <perform_lll_reset+0x90>)
    bace:	f240 6313 	movw	r3, #1555	; 0x613
    bad2:	f012 f90c 	bl	1dcee <printk>
    bad6:	4040      	eors	r0, r0
    bad8:	f380 8811 	msr	BASEPRI, r0
    badc:	f04f 0003 	mov.w	r0, #3
    bae0:	df02      	svc	2
	err = lll_adv_reset();
    bae2:	f006 fda9 	bl	12638 <lll_adv_reset>
	LL_ASSERT(!err);
    bae6:	2800      	cmp	r0, #0
    bae8:	d0e6      	beq.n	bab8 <perform_lll_reset+0x10>
    baea:	4a11      	ldr	r2, [pc, #68]	; (bb30 <perform_lll_reset+0x88>)
    baec:	4911      	ldr	r1, [pc, #68]	; (bb34 <perform_lll_reset+0x8c>)
    baee:	4812      	ldr	r0, [pc, #72]	; (bb38 <perform_lll_reset+0x90>)
    baf0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
    baf4:	f012 f8fb 	bl	1dcee <printk>
    baf8:	4040      	eors	r0, r0
    bafa:	f380 8811 	msr	BASEPRI, r0
    bafe:	f04f 0003 	mov.w	r0, #3
    bb02:	df02      	svc	2
	err = lll_conn_reset();
    bb04:	f007 fa3a 	bl	12f7c <lll_conn_reset>
	LL_ASSERT(!err);
    bb08:	2800      	cmp	r0, #0
    bb0a:	d0d8      	beq.n	babe <perform_lll_reset+0x16>
    bb0c:	4a08      	ldr	r2, [pc, #32]	; (bb30 <perform_lll_reset+0x88>)
    bb0e:	4909      	ldr	r1, [pc, #36]	; (bb34 <perform_lll_reset+0x8c>)
    bb10:	4809      	ldr	r0, [pc, #36]	; (bb38 <perform_lll_reset+0x90>)
    bb12:	f240 6324 	movw	r3, #1572	; 0x624
    bb16:	f012 f8ea 	bl	1dcee <printk>
    bb1a:	4040      	eors	r0, r0
    bb1c:	f380 8811 	msr	BASEPRI, r0
    bb20:	f04f 0003 	mov.w	r0, #3
    bb24:	df02      	svc	2
    bb26:	4620      	mov	r0, r4
}
    bb28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bb2c:	f00f ba2a 	b.w	1af84 <z_impl_k_sem_give>
    bb30:	000276d8 	.word	0x000276d8
    bb34:	00027714 	.word	0x00027714
    bb38:	000275f0 	.word	0x000275f0

0000bb3c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    bb3c:	6008      	str	r0, [r1, #0]
    bb3e:	4801      	ldr	r0, [pc, #4]	; (bb44 <ull_ticker_status_give+0x8>)
    bb40:	f00f ba20 	b.w	1af84 <z_impl_k_sem_give>
    bb44:	20001e14 	.word	0x20001e14

0000bb48 <disabled_cb>:
    bb48:	f00f ba1c 	b.w	1af84 <z_impl_k_sem_give>

0000bb4c <tx_cmplt_get>:
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    bb4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    bb50:	4f2f      	ldr	r7, [pc, #188]	; (bc10 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    bb52:	780b      	ldrb	r3, [r1, #0]
    bb54:	783c      	ldrb	r4, [r7, #0]
{
    bb56:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    bb58:	7879      	ldrb	r1, [r7, #1]
    bb5a:	4299      	cmp	r1, r3
    bb5c:	bf9c      	itt	ls
    bb5e:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    bb60:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
    bb62:	429a      	cmp	r2, r3
{
    bb64:	4683      	mov	fp, r0
    bb66:	4692      	mov	sl, r2
    bb68:	d045      	beq.n	bbf6 <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
    bb6a:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    bb6c:	4e29      	ldr	r6, [pc, #164]	; (bc14 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
    bb6e:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    bb70:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
    bb74:	4291      	cmp	r1, r2
    bb76:	bf08      	it	eq
    bb78:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
    bb7a:	18f1      	adds	r1, r6, r3

	*idx = i;
    bb7c:	702a      	strb	r2, [r5, #0]
    bb7e:	d03a      	beq.n	bbf6 <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
    bb80:	5af3      	ldrh	r3, [r6, r3]
    bb82:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    bb84:	f04f 0800 	mov.w	r8, #0
    bb88:	f04f 0901 	mov.w	r9, #1
    bb8c:	e022      	b.n	bbd4 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
    bb8e:	b37b      	cbz	r3, bbf0 <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    bb90:	7903      	ldrb	r3, [r0, #4]
    bb92:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
    bb96:	3b01      	subs	r3, #1
    bb98:	2b01      	cmp	r3, #1
    bb9a:	d931      	bls.n	bc00 <tx_cmplt_get+0xb4>
    bb9c:	2302      	movs	r3, #2
    bb9e:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
    bba0:	f002 f9ce 	bl	df40 <ll_tx_mem_release>
	if (*idx >= count) {
    bba4:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    bba6:	7879      	ldrb	r1, [r7, #1]
    bba8:	7838      	ldrb	r0, [r7, #0]
    bbaa:	4299      	cmp	r1, r3
    bbac:	bf9c      	itt	ls
    bbae:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    bbb0:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
    bbb2:	459a      	cmp	sl, r3
    bbb4:	d021      	beq.n	bbfa <tx_cmplt_get+0xae>
	i = *idx + 1;
    bbb6:	1c5c      	adds	r4, r3, #1
    bbb8:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
    bbba:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
    bbbe:	42a1      	cmp	r1, r4
    bbc0:	bf08      	it	eq
    bbc2:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    bbc4:	18f1      	adds	r1, r6, r3
	*idx = i;
    bbc6:	702c      	strb	r4, [r5, #0]
    bbc8:	d017      	beq.n	bbfa <tx_cmplt_get+0xae>
    bbca:	5af0      	ldrh	r0, [r6, r3]
    bbcc:	f8bb 3000 	ldrh.w	r3, [fp]
    bbd0:	4298      	cmp	r0, r3
    bbd2:	d112      	bne.n	bbfa <tx_cmplt_get+0xae>
		node_tx = tx->node;
    bbd4:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    bbd6:	2801      	cmp	r0, #1
    bbd8:	f020 0303 	bic.w	r3, r0, #3
    bbdc:	d8d7      	bhi.n	bb8e <tx_cmplt_get+0x42>
			cmplt++;
    bbde:	f108 0801 	add.w	r8, r8, #1
    bbe2:	fa5f f888 	uxtb.w	r8, r8
    bbe6:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    bbea:	2b00      	cmp	r3, #0
    bbec:	d0da      	beq.n	bba4 <tx_cmplt_get+0x58>
    bbee:	e7d7      	b.n	bba0 <tx_cmplt_get+0x54>
    bbf0:	2302      	movs	r3, #2
    bbf2:	604b      	str	r3, [r1, #4]
    bbf4:	e7d6      	b.n	bba4 <tx_cmplt_get+0x58>
		return 0;
    bbf6:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
    bbfa:	4640      	mov	r0, r8
    bbfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    bc00:	f108 0801 	add.w	r8, r8, #1
    bc04:	fa5f f888 	uxtb.w	r8, r8
    bc08:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    bc0c:	e7c8      	b.n	bba0 <tx_cmplt_get+0x54>
    bc0e:	bf00      	nop
    bc10:	20000550 	.word	0x20000550
    bc14:	20000554 	.word	0x20000554

0000bc18 <rx_demux>:
{
    bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc1c:	4cac      	ldr	r4, [pc, #688]	; (bed0 <rx_demux+0x2b8>)
	k_sem_give(sem_recv);
    bc1e:	4ead      	ldr	r6, [pc, #692]	; (bed4 <rx_demux+0x2bc>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
    bc20:	f8df b2d8 	ldr.w	fp, [pc, #728]	; befc <rx_demux+0x2e4>
{
    bc24:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    bc26:	e9d4 0100 	ldrd	r0, r1, [r4]
    bc2a:	aa03      	add	r2, sp, #12
    bc2c:	f7fd f9dc 	bl	8fe8 <memq_peek>
		if (link) {
    bc30:	4607      	mov	r7, r0
    bc32:	2800      	cmp	r0, #0
    bc34:	d036      	beq.n	bca4 <rx_demux+0x8c>
			LL_ASSERT(rx);
    bc36:	9b03      	ldr	r3, [sp, #12]
    bc38:	2b00      	cmp	r3, #0
    bc3a:	f000 8122 	beq.w	be82 <rx_demux+0x26a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    bc3e:	7818      	ldrb	r0, [r3, #0]
    bc40:	aa04      	add	r2, sp, #16
    bc42:	a902      	add	r1, sp, #8
    bc44:	f004 fc22 	bl	1048c <ull_conn_ack_by_last_peek>
			if (link_tx) {
    bc48:	4605      	mov	r5, r0
    bc4a:	2800      	cmp	r0, #0
    bc4c:	d056      	beq.n	bcfc <rx_demux+0xe4>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    bc4e:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    bc52:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    bc56:	f891 9000 	ldrb.w	r9, [r1]
    bc5a:	9205      	str	r2, [sp, #20]
    bc5c:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    bc60:	f10d 0814 	add.w	r8, sp, #20
    bc64:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
    bc68:	f004 fc26 	bl	104b8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    bc6c:	4629      	mov	r1, r5
    bc6e:	9a05      	ldr	r2, [sp, #20]
    bc70:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    bc74:	f004 fc68 	bl	10548 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    bc78:	4628      	mov	r0, r5
    bc7a:	f004 fbe1 	bl	10440 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    bc7e:	4642      	mov	r2, r8
    bc80:	4639      	mov	r1, r7
    bc82:	4648      	mov	r0, r9
    bc84:	f004 fc02 	bl	1048c <ull_conn_ack_by_last_peek>
	} while (link);
    bc88:	4605      	mov	r5, r0
    bc8a:	2800      	cmp	r0, #0
    bc8c:	d1ec      	bne.n	bc68 <rx_demux+0x50>
	k_sem_give(sem_recv);
    bc8e:	6830      	ldr	r0, [r6, #0]
    bc90:	f00f f978 	bl	1af84 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    bc94:	e9d4 0100 	ldrd	r0, r1, [r4]
    bc98:	aa03      	add	r2, sp, #12
    bc9a:	f7fd f9a5 	bl	8fe8 <memq_peek>
		if (link) {
    bc9e:	4607      	mov	r7, r0
    bca0:	2800      	cmp	r0, #0
    bca2:	d1c8      	bne.n	bc36 <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    bca4:	aa04      	add	r2, sp, #16
    bca6:	a902      	add	r1, sp, #8
    bca8:	f10d 0007 	add.w	r0, sp, #7
    bcac:	f004 fbd4 	bl	10458 <ull_conn_ack_peek>
			if (link) {
    bcb0:	4605      	mov	r5, r0
    bcb2:	2800      	cmp	r0, #0
    bcb4:	d062      	beq.n	bd7c <rx_demux+0x164>
				rx_demux_conn_tx_ack(ack_last, handle,
    bcb6:	9a04      	ldr	r2, [sp, #16]
    bcb8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    bcbc:	f89d 9007 	ldrb.w	r9, [sp, #7]
    bcc0:	9205      	str	r2, [sp, #20]
    bcc2:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    bcc6:	f10d 0814 	add.w	r8, sp, #20
    bcca:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
    bcce:	f004 fbf3 	bl	104b8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    bcd2:	4629      	mov	r1, r5
    bcd4:	9a05      	ldr	r2, [sp, #20]
    bcd6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    bcda:	f004 fc35 	bl	10548 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    bcde:	4628      	mov	r0, r5
    bce0:	f004 fbae 	bl	10440 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    bce4:	4642      	mov	r2, r8
    bce6:	4639      	mov	r1, r7
    bce8:	4648      	mov	r0, r9
    bcea:	f004 fbcf 	bl	1048c <ull_conn_ack_by_last_peek>
	} while (link);
    bcee:	4605      	mov	r5, r0
    bcf0:	2800      	cmp	r0, #0
    bcf2:	d1ec      	bne.n	bcce <rx_demux+0xb6>
	k_sem_give(sem_recv);
    bcf4:	6830      	ldr	r0, [r6, #0]
    bcf6:	f00f f945 	bl	1af84 <z_impl_k_sem_give>
			if (nack) {
    bcfa:	e7cb      	b.n	bc94 <rx_demux+0x7c>
				nack = rx_demux_rx(link, rx);
    bcfc:	9b03      	ldr	r3, [sp, #12]
    bcfe:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    bd00:	791b      	ldrb	r3, [r3, #4]
    bd02:	3b01      	subs	r3, #1
    bd04:	2b0f      	cmp	r3, #15
    bd06:	d809      	bhi.n	bd1c <rx_demux+0x104>
    bd08:	e8df f003 	tbb	[pc, r3]
    bd0c:	0808313b 	.word	0x0808313b
    bd10:	08080808 	.word	0x08080808
    bd14:	08080808 	.word	0x08080808
    bd18:	16270808 	.word	0x16270808
		LL_ASSERT(0);
    bd1c:	4a6e      	ldr	r2, [pc, #440]	; (bed8 <rx_demux+0x2c0>)
    bd1e:	496f      	ldr	r1, [pc, #444]	; (bedc <rx_demux+0x2c4>)
    bd20:	486f      	ldr	r0, [pc, #444]	; (bee0 <rx_demux+0x2c8>)
    bd22:	f240 73b1 	movw	r3, #1969	; 0x7b1
    bd26:	f011 ffe2 	bl	1dcee <printk>
    bd2a:	4040      	eors	r0, r0
    bd2c:	f380 8811 	msr	BASEPRI, r0
    bd30:	f04f 0003 	mov.w	r0, #3
    bd34:	df02      	svc	2
			if (nack) {
    bd36:	e776      	b.n	bc26 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    bd38:	4965      	ldr	r1, [pc, #404]	; (bed0 <rx_demux+0x2b8>)
    bd3a:	6860      	ldr	r0, [r4, #4]
    bd3c:	2200      	movs	r2, #0
    bd3e:	f7fd f95b 	bl	8ff8 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    bd42:	4b68      	ldr	r3, [pc, #416]	; (bee4 <rx_demux+0x2cc>)
		ll_rx_put(link, rx);
    bd44:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    bd46:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    bd48:	4a67      	ldr	r2, [pc, #412]	; (bee8 <rx_demux+0x2d0>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    bd4a:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    bd4c:	4638      	mov	r0, r7
    bd4e:	f7fd f943 	bl	8fd8 <memq_enqueue>
	k_sem_give(sem_recv);
    bd52:	6830      	ldr	r0, [r6, #0]
    bd54:	f00f f916 	bl	1af84 <z_impl_k_sem_give>
			if (nack) {
    bd58:	e79c      	b.n	bc94 <rx_demux+0x7c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    bd5a:	495d      	ldr	r1, [pc, #372]	; (bed0 <rx_demux+0x2b8>)
    bd5c:	6860      	ldr	r0, [r4, #4]
    bd5e:	2200      	movs	r2, #0
    bd60:	f7fd f94a 	bl	8ff8 <memq_dequeue>
		ull_conn_setup(link, rx);
    bd64:	9905      	ldr	r1, [sp, #20]
    bd66:	4638      	mov	r0, r7
    bd68:	f002 fbe4 	bl	e534 <ull_conn_setup>
			if (nack) {
    bd6c:	e75b      	b.n	bc26 <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
    bd6e:	a905      	add	r1, sp, #20
    bd70:	4638      	mov	r0, r7
    bd72:	f002 fc01 	bl	e578 <ull_conn_rx>
		if (nack) {
    bd76:	2800      	cmp	r0, #0
    bd78:	f000 80cd 	beq.w	bf16 <rx_demux+0x2fe>
}
    bd7c:	b007      	add	sp, #28
    bd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    bd82:	4953      	ldr	r1, [pc, #332]	; (bed0 <rx_demux+0x2b8>)
    bd84:	6860      	ldr	r0, [r4, #4]
    bd86:	2200      	movs	r2, #0
    bd88:	f7fd f936 	bl	8ff8 <memq_dequeue>
		rx_demux_event_done(link, rx);
    bd8c:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
    bd8e:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
    bd92:	f8d5 901c 	ldr.w	r9, [r5, #28]
	switch (done->extra.type) {
    bd96:	b17b      	cbz	r3, bdb8 <rx_demux+0x1a0>
    bd98:	2b01      	cmp	r3, #1
    bd9a:	f000 80b8 	beq.w	bf0e <rx_demux+0x2f6>
		LL_ASSERT(0);
    bd9e:	4a4e      	ldr	r2, [pc, #312]	; (bed8 <rx_demux+0x2c0>)
    bda0:	494e      	ldr	r1, [pc, #312]	; (bedc <rx_demux+0x2c4>)
    bda2:	484f      	ldr	r0, [pc, #316]	; (bee0 <rx_demux+0x2c8>)
    bda4:	f240 73f1 	movw	r3, #2033	; 0x7f1
    bda8:	f011 ffa1 	bl	1dcee <printk>
    bdac:	4040      	eors	r0, r0
    bdae:	f380 8811 	msr	BASEPRI, r0
    bdb2:	f04f 0003 	mov.w	r0, #3
    bdb6:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    bdb8:	4a4c      	ldr	r2, [pc, #304]	; (beec <rx_demux+0x2d4>)
    bdba:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
    bdbc:	f892 c001 	ldrb.w	ip, [r2, #1]
    bdc0:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
    bdc2:	1c4b      	adds	r3, r1, #1
    bdc4:	b2db      	uxtb	r3, r3
		last = 0U;
    bdc6:	459c      	cmp	ip, r3
    bdc8:	bf08      	it	eq
    bdca:	2300      	moveq	r3, #0
	if (last == first) {
    bdcc:	4298      	cmp	r0, r3
	done->extra.type = 0U;
    bdce:	f04f 0c00 	mov.w	ip, #0
    bdd2:	f885 c020 	strb.w	ip, [r5, #32]
    bdd6:	f000 80b2 	beq.w	bf3e <rx_demux+0x326>
	done->hdr.link = link;
    bdda:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bddc:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bdde:	fb00 2101 	mla	r1, r0, r1, r2
    bde2:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
    bde4:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
    bde6:	4d42      	ldr	r5, [pc, #264]	; (bef0 <rx_demux+0x2d8>)
    bde8:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
    bdea:	78ea      	ldrb	r2, [r5, #3]
    bdec:	f895 c000 	ldrb.w	ip, [r5]
    bdf0:	429a      	cmp	r2, r3
    bdf2:	d02a      	beq.n	be4a <rx_demux+0x232>
	return (void *)(fifo + first * size);
    bdf4:	f105 0a04 	add.w	sl, r5, #4
    bdf8:	fb03 ac0c 	mla	ip, r3, ip, sl
	while (next) {
    bdfc:	f1bc 0f00 	cmp.w	ip, #0
    be00:	d023      	beq.n	be4a <rx_demux+0x232>
		uint8_t is_aborted = next->is_aborted;
    be02:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
    be06:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
    be08:	f3c3 0740 	ubfx	r7, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    be0c:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
    be10:	d546      	bpl.n	bea0 <rx_demux+0x288>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
    be12:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    be14:	78ab      	ldrb	r3, [r5, #2]
    be16:	f895 c000 	ldrb.w	ip, [r5]
    be1a:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    be1c:	429a      	cmp	r2, r3
    be1e:	d014      	beq.n	be4a <rx_demux+0x232>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    be20:	3301      	adds	r3, #1
    be22:	b2db      	uxtb	r3, r3
	if (_first == count) {
    be24:	4299      	cmp	r1, r3
    be26:	d06b      	beq.n	bf00 <rx_demux+0x2e8>
	if (first == last) {
    be28:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
    be2a:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
    be2c:	d00d      	beq.n	be4a <rx_demux+0x232>
	return (void *)(fifo + first * size);
    be2e:	fb03 ac0c 	mla	ip, r3, ip, sl

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    be32:	f1bc 0f00 	cmp.w	ip, #0
    be36:	d008      	beq.n	be4a <rx_demux+0x232>
    be38:	2f00      	cmp	r7, #0
    be3a:	d1e2      	bne.n	be02 <rx_demux+0x1ea>
    be3c:	f1b8 0f00 	cmp.w	r8, #0
    be40:	d003      	beq.n	be4a <rx_demux+0x232>
    be42:	f89c 3020 	ldrb.w	r3, [ip, #32]
    be46:	07db      	lsls	r3, r3, #31
    be48:	d5db      	bpl.n	be02 <rx_demux+0x1ea>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
    be4a:	f1b9 0f00 	cmp.w	r9, #0
    be4e:	f43f aeea 	beq.w	bc26 <rx_demux+0xe>
	return hdr->ref;
    be52:	f899 3000 	ldrb.w	r3, [r9]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
    be56:	2b00      	cmp	r3, #0
    be58:	d07f      	beq.n	bf5a <rx_demux+0x342>
	return hdr->ref--;
    be5a:	f899 3000 	ldrb.w	r3, [r9]
    be5e:	3b01      	subs	r3, #1
    be60:	b2db      	uxtb	r3, r3
    be62:	f889 3000 	strb.w	r3, [r9]
	return hdr->ref;
    be66:	f899 3000 	ldrb.w	r3, [r9]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    be6a:	2b00      	cmp	r3, #0
    be6c:	f47f aedb 	bne.w	bc26 <rx_demux+0xe>
    be70:	f8d9 3004 	ldr.w	r3, [r9, #4]
    be74:	2b00      	cmp	r3, #0
    be76:	f43f aed6 	beq.w	bc26 <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    be7a:	f8d9 0008 	ldr.w	r0, [r9, #8]
    be7e:	4798      	blx	r3
			if (nack) {
    be80:	e6d1      	b.n	bc26 <rx_demux+0xe>
			LL_ASSERT(rx);
    be82:	4a15      	ldr	r2, [pc, #84]	; (bed8 <rx_demux+0x2c0>)
    be84:	491b      	ldr	r1, [pc, #108]	; (bef4 <rx_demux+0x2dc>)
    be86:	4816      	ldr	r0, [pc, #88]	; (bee0 <rx_demux+0x2c8>)
    be88:	f240 63be 	movw	r3, #1726	; 0x6be
    be8c:	f011 ff2f 	bl	1dcee <printk>
    be90:	4040      	eors	r0, r0
    be92:	f380 8811 	msr	BASEPRI, r0
    be96:	f04f 0003 	mov.w	r0, #3
    be9a:	df02      	svc	2
    be9c:	9b03      	ldr	r3, [sp, #12]
    be9e:	e6ce      	b.n	bc3e <rx_demux+0x26>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    bea0:	465b      	mov	r3, fp
    bea2:	463a      	mov	r2, r7
    bea4:	4639      	mov	r1, r7
    bea6:	2001      	movs	r0, #1
			mfy.param = next;
    bea8:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    beac:	f7fd f908 	bl	90c0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    beb0:	2800      	cmp	r0, #0
    beb2:	d0ae      	beq.n	be12 <rx_demux+0x1fa>
    beb4:	4a08      	ldr	r2, [pc, #32]	; (bed8 <rx_demux+0x2c0>)
    beb6:	4910      	ldr	r1, [pc, #64]	; (bef8 <rx_demux+0x2e0>)
    beb8:	4809      	ldr	r0, [pc, #36]	; (bee0 <rx_demux+0x2c8>)
    beba:	f640 0309 	movw	r3, #2057	; 0x809
    bebe:	f011 ff16 	bl	1dcee <printk>
    bec2:	4040      	eors	r0, r0
    bec4:	f380 8811 	msr	BASEPRI, r0
    bec8:	f04f 0003 	mov.w	r0, #3
    becc:	df02      	svc	2
    bece:	e7a0      	b.n	be12 <rx_demux+0x1fa>
    bed0:	20001e08 	.word	0x20001e08
    bed4:	20001e10 	.word	0x20001e10
    bed8:	000276d8 	.word	0x000276d8
    bedc:	00027650 	.word	0x00027650
    bee0:	000275f0 	.word	0x000275f0
    bee4:	20000550 	.word	0x20000550
    bee8:	20001e04 	.word	0x20001e04
    beec:	200003ec 	.word	0x200003ec
    bef0:	2000042c 	.word	0x2000042c
    bef4:	0002771c 	.word	0x0002771c
    bef8:	00027720 	.word	0x00027720
    befc:	200005a4 	.word	0x200005a4
	*first = _first; /* Write back read-index */
    bf00:	2300      	movs	r3, #0
    bf02:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
    bf04:	2a00      	cmp	r2, #0
    bf06:	d0a0      	beq.n	be4a <rx_demux+0x232>
	return (void *)(fifo + first * size);
    bf08:	f8df c088 	ldr.w	ip, [pc, #136]	; bf94 <rx_demux+0x37c>
    bf0c:	e794      	b.n	be38 <rx_demux+0x220>
		ull_conn_done(done);
    bf0e:	4628      	mov	r0, r5
    bf10:	f004 f80a 	bl	ff28 <ull_conn_done>
		break;
    bf14:	e750      	b.n	bdb8 <rx_demux+0x1a0>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    bf16:	4918      	ldr	r1, [pc, #96]	; (bf78 <rx_demux+0x360>)
    bf18:	4602      	mov	r2, r0
    bf1a:	6860      	ldr	r0, [r4, #4]
    bf1c:	f7fd f86c 	bl	8ff8 <memq_dequeue>
		if (rx) {
    bf20:	9905      	ldr	r1, [sp, #20]
    bf22:	2900      	cmp	r1, #0
    bf24:	f43f ae7f 	beq.w	bc26 <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    bf28:	4b14      	ldr	r3, [pc, #80]	; (bf7c <rx_demux+0x364>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    bf2a:	4a15      	ldr	r2, [pc, #84]	; (bf80 <rx_demux+0x368>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    bf2c:	78db      	ldrb	r3, [r3, #3]
    bf2e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    bf30:	4638      	mov	r0, r7
    bf32:	f7fd f851 	bl	8fd8 <memq_enqueue>
	k_sem_give(sem_recv);
    bf36:	6830      	ldr	r0, [r6, #0]
    bf38:	f00f f824 	bl	1af84 <z_impl_k_sem_give>
			if (nack) {
    bf3c:	e673      	b.n	bc26 <rx_demux+0xe>
	LL_ASSERT(release == done);
    bf3e:	4a11      	ldr	r2, [pc, #68]	; (bf84 <rx_demux+0x36c>)
    bf40:	4911      	ldr	r1, [pc, #68]	; (bf88 <rx_demux+0x370>)
    bf42:	4812      	ldr	r0, [pc, #72]	; (bf8c <rx_demux+0x374>)
    bf44:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
    bf48:	f011 fed1 	bl	1dcee <printk>
    bf4c:	4040      	eors	r0, r0
    bf4e:	f380 8811 	msr	BASEPRI, r0
    bf52:	f04f 0003 	mov.w	r0, #3
    bf56:	df02      	svc	2
    bf58:	e745      	b.n	bde6 <rx_demux+0x1ce>
	LL_ASSERT(ull_ref_get(ull_hdr));
    bf5a:	4a0a      	ldr	r2, [pc, #40]	; (bf84 <rx_demux+0x36c>)
    bf5c:	490c      	ldr	r1, [pc, #48]	; (bf90 <rx_demux+0x378>)
    bf5e:	480b      	ldr	r0, [pc, #44]	; (bf8c <rx_demux+0x374>)
    bf60:	f640 031b 	movw	r3, #2075	; 0x81b
    bf64:	f011 fec3 	bl	1dcee <printk>
    bf68:	4040      	eors	r0, r0
    bf6a:	f380 8811 	msr	BASEPRI, r0
    bf6e:	f04f 0003 	mov.w	r0, #3
    bf72:	df02      	svc	2
    bf74:	e771      	b.n	be5a <rx_demux+0x242>
    bf76:	bf00      	nop
    bf78:	20001e08 	.word	0x20001e08
    bf7c:	20000550 	.word	0x20000550
    bf80:	20001e04 	.word	0x20001e04
    bf84:	000276d8 	.word	0x000276d8
    bf88:	00027740 	.word	0x00027740
    bf8c:	000275f0 	.word	0x000275f0
    bf90:	00027728 	.word	0x00027728
    bf94:	20000430 	.word	0x20000430

0000bf98 <ll_init>:
{
    bf98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
    bf9c:	4b9a      	ldr	r3, [pc, #616]	; (c208 <ll_init+0x270>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    bf9e:	4c9b      	ldr	r4, [pc, #620]	; (c20c <ll_init+0x274>)
	sem_recv = sem_rx;
    bfa0:	6018      	str	r0, [r3, #0]
{
    bfa2:	b086      	sub	sp, #24
	cntr_init();
    bfa4:	f007 fc84 	bl	138b0 <cntr_init>
	mayfly_init();
    bfa8:	f7fd f836 	bl	9018 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bfac:	4998      	ldr	r1, [pc, #608]	; (c210 <ll_init+0x278>)
    bfae:	4899      	ldr	r0, [pc, #612]	; (c214 <ll_init+0x27c>)
    bfb0:	9105      	str	r1, [sp, #20]
    bfb2:	9004      	str	r0, [sp, #16]
    bfb4:	4998      	ldr	r1, [pc, #608]	; (c218 <ll_init+0x280>)
    bfb6:	4899      	ldr	r0, [pc, #612]	; (c21c <ll_init+0x284>)
    bfb8:	9103      	str	r1, [sp, #12]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    bfba:	2304      	movs	r3, #4
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    bfbc:	2203      	movs	r2, #3
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bfbe:	210b      	movs	r1, #11
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    bfc0:	2502      	movs	r5, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bfc2:	e9cd 1001 	strd	r1, r0, [sp, #4]
    bfc6:	9400      	str	r4, [sp, #0]
    bfc8:	4619      	mov	r1, r3
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    bfca:	7022      	strb	r2, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    bfcc:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bfce:	4a94      	ldr	r2, [pc, #592]	; (c220 <ll_init+0x288>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    bfd0:	7425      	strb	r5, [r4, #16]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bfd2:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    bfd4:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bfd6:	f7fe fa0d 	bl	a3f4 <ticker_init>
	LL_ASSERT(!err);
    bfda:	2800      	cmp	r0, #0
    bfdc:	f040 80e5 	bne.w	c1aa <ll_init+0x212>
	return z_impl_k_sem_init(sem, initial_count, limit);
    bfe0:	2201      	movs	r2, #1
    bfe2:	2100      	movs	r1, #0
    bfe4:	488f      	ldr	r0, [pc, #572]	; (c224 <ll_init+0x28c>)
    bfe6:	f01a fa74 	bl	264d2 <z_impl_k_sem_init>
	err = lll_init();
    bfea:	f005 ffb9 	bl	11f60 <lll_init>
	if (err) {
    bfee:	4604      	mov	r4, r0
    bff0:	b118      	cbz	r0, bffa <ll_init+0x62>
}
    bff2:	4620      	mov	r0, r4
    bff4:	b006      	add	sp, #24
    bff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    bffa:	4b8b      	ldr	r3, [pc, #556]	; (c228 <ll_init+0x290>)
		link = mem_acquire(&mem_link_done.free);
    bffc:	f8df 8230 	ldr.w	r8, [pc, #560]	; c230 <ll_init+0x298>
    c000:	4d8a      	ldr	r5, [pc, #552]	; (c22c <ll_init+0x294>)
		rx = mem_acquire(&mem_done.free);
    c002:	4f89      	ldr	r7, [pc, #548]	; (c228 <ll_init+0x290>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    c004:	1d18      	adds	r0, r3, #4
    c006:	2203      	movs	r2, #3
    c008:	2134      	movs	r1, #52	; 0x34
    c00a:	f7fc ff63 	bl	8ed4 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    c00e:	4643      	mov	r3, r8
    c010:	2203      	movs	r2, #3
    c012:	1d18      	adds	r0, r3, #4
    c014:	2108      	movs	r1, #8
    c016:	f7fc ff5d 	bl	8ed4 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    c01a:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
    c01c:	786a      	ldrb	r2, [r5, #1]
    c01e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    c020:	3401      	adds	r4, #1
    c022:	b2e4      	uxtb	r4, r4
		last = 0U;
    c024:	42a2      	cmp	r2, r4
    c026:	bf08      	it	eq
    c028:	2400      	moveq	r4, #0
	if (last == first) {
    c02a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    c02c:	4640      	mov	r0, r8
    c02e:	d013      	beq.n	c058 <ll_init+0xc0>
    c030:	f7fc ff70 	bl	8f14 <mem_acquire>
    c034:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
    c036:	4638      	mov	r0, r7
		if (!link) {
    c038:	b176      	cbz	r6, c058 <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
    c03a:	f7fc ff6b 	bl	8f14 <mem_acquire>
		if (!rx) {
    c03e:	b138      	cbz	r0, c050 <ll_init+0xb8>
		rx->link = link;
    c040:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c042:	78ea      	ldrb	r2, [r5, #3]
    c044:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c046:	fb02 5303 	mla	r3, r2, r3, r5
    c04a:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    c04c:	70ec      	strb	r4, [r5, #3]
}
    c04e:	e7e5      	b.n	c01c <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
    c050:	4977      	ldr	r1, [pc, #476]	; (c230 <ll_init+0x298>)
    c052:	4630      	mov	r0, r6
    c054:	f7fc ff74 	bl	8f40 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    c058:	4b76      	ldr	r3, [pc, #472]	; (c234 <ll_init+0x29c>)
    c05a:	2209      	movs	r2, #9
    c05c:	1d18      	adds	r0, r3, #4
    c05e:	2148      	movs	r1, #72	; 0x48
    c060:	f7fc ff38 	bl	8ed4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    c064:	4b74      	ldr	r3, [pc, #464]	; (c238 <ll_init+0x2a0>)
    c066:	220b      	movs	r2, #11
    c068:	1d18      	adds	r0, r3, #4
    c06a:	2108      	movs	r1, #8
    c06c:	f7fc ff32 	bl	8ed4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    c070:	4871      	ldr	r0, [pc, #452]	; (c238 <ll_init+0x2a0>)
    c072:	f7fc ff4f 	bl	8f14 <mem_acquire>
	LL_ASSERT(link);
    c076:	4604      	mov	r4, r0
    c078:	2800      	cmp	r0, #0
    c07a:	f000 80b2 	beq.w	c1e2 <ll_init+0x24a>
	MEMQ_INIT(ull_rx, link);
    c07e:	4a6f      	ldr	r2, [pc, #444]	; (c23c <ll_init+0x2a4>)
    c080:	4620      	mov	r0, r4
    c082:	1f11      	subs	r1, r2, #4
    c084:	f7fc ff9a 	bl	8fbc <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    c088:	486b      	ldr	r0, [pc, #428]	; (c238 <ll_init+0x2a0>)
    c08a:	f7fc ff43 	bl	8f14 <mem_acquire>
	LL_ASSERT(link);
    c08e:	4604      	mov	r4, r0
    c090:	2800      	cmp	r0, #0
    c092:	f000 8098 	beq.w	c1c6 <ll_init+0x22e>
	MEMQ_INIT(ll_rx, link);
    c096:	4a6a      	ldr	r2, [pc, #424]	; (c240 <ll_init+0x2a8>)
	mem_link_rx.quota_pdu = RX_CNT;
    c098:	4d6a      	ldr	r5, [pc, #424]	; (c244 <ll_init+0x2ac>)
    c09a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; c25c <ll_init+0x2c4>
		rx = mem_acquire(&mem_pdu_rx.free);
    c09e:	f8df 8194 	ldr.w	r8, [pc, #404]	; c234 <ll_init+0x29c>
	MEMQ_INIT(ll_rx, link);
    c0a2:	4620      	mov	r0, r4
    c0a4:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    c0a6:	462e      	mov	r6, r5
	MEMQ_INIT(ll_rx, link);
    c0a8:	f7fc ff88 	bl	8fbc <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    c0ac:	2307      	movs	r3, #7
    c0ae:	f806 3b04 	strb.w	r3, [r6], #4
	while (mem_link_rx.quota_pdu &&
    c0b2:	f899 4003 	ldrb.w	r4, [r9, #3]
		link->mem = NULL;
    c0b6:	2700      	movs	r7, #0
	if (last == count) {
    c0b8:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    c0bc:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
    c0c0:	3401      	adds	r4, #1
    c0c2:	b2e4      	uxtb	r4, r4
		last = 0U;
    c0c4:	42a2      	cmp	r2, r4
    c0c6:	bf08      	it	eq
    c0c8:	2400      	moveq	r4, #0
	if (last == first) {
    c0ca:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    c0cc:	4630      	mov	r0, r6
    c0ce:	d03c      	beq.n	c14a <ll_init+0x1b2>
    c0d0:	f7fc ff20 	bl	8f14 <mem_acquire>
    c0d4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    c0d6:	4640      	mov	r0, r8
		if (!link) {
    c0d8:	f1ba 0f00 	cmp.w	sl, #0
    c0dc:	d035      	beq.n	c14a <ll_init+0x1b2>
		rx = mem_acquire(&mem_pdu_rx.free);
    c0de:	f7fc ff19 	bl	8f14 <mem_acquire>
		if (!rx) {
    c0e2:	b370      	cbz	r0, c142 <ll_init+0x1aa>
		link->mem = NULL;
    c0e4:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
    c0e8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c0ec:	f899 1003 	ldrb.w	r1, [r9, #3]
    c0f0:	f899 2000 	ldrb.w	r2, [r9]
	mem_link_rx.quota_pdu += delta;
    c0f4:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c0f6:	fb01 9202 	mla	r2, r1, r2, r9
    c0fa:	3b01      	subs	r3, #1
    c0fc:	b2db      	uxtb	r3, r3
    c0fe:	6050      	str	r0, [r2, #4]
    c100:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    c102:	f889 4003 	strb.w	r4, [r9, #3]
	while (mem_link_rx.quota_pdu &&
    c106:	2b00      	cmp	r3, #0
    c108:	d1d6      	bne.n	c0b8 <ll_init+0x120>
	err = lll_adv_init();
    c10a:	f006 fa7d 	bl	12608 <lll_adv_init>
	if (err) {
    c10e:	4604      	mov	r4, r0
    c110:	2800      	cmp	r0, #0
    c112:	f47f af6e 	bne.w	bff2 <ll_init+0x5a>
	err = ull_adv_init();
    c116:	f001 f9c7 	bl	d4a8 <ull_adv_init>
	if (err) {
    c11a:	4604      	mov	r4, r0
    c11c:	2800      	cmp	r0, #0
    c11e:	f47f af68 	bne.w	bff2 <ll_init+0x5a>
	err = lll_conn_init();
    c122:	f006 ff21 	bl	12f68 <lll_conn_init>
	if (err) {
    c126:	4604      	mov	r4, r0
    c128:	2800      	cmp	r0, #0
    c12a:	f47f af62 	bne.w	bff2 <ll_init+0x5a>
	err = ull_conn_init();
    c12e:	f002 f9ad 	bl	e48c <ull_conn_init>
	if (err) {
    c132:	4604      	mov	r4, r0
    c134:	2800      	cmp	r0, #0
    c136:	f47f af5c 	bne.w	bff2 <ll_init+0x5a>
		ull_filter_reset(true);
    c13a:	2001      	movs	r0, #1
    c13c:	f005 fbce 	bl	118dc <ull_filter_reset>
	return  0;
    c140:	e757      	b.n	bff2 <ll_init+0x5a>
			mem_release(link, &mem_link_rx.free);
    c142:	493d      	ldr	r1, [pc, #244]	; (c238 <ll_init+0x2a0>)
    c144:	4650      	mov	r0, sl
    c146:	f7fc fefb 	bl	8f40 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
    c14a:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c14c:	1e5f      	subs	r7, r3, #1
    c14e:	b2ff      	uxtb	r7, r7
    c150:	2b00      	cmp	r3, #0
    c152:	d0da      	beq.n	c10a <ll_init+0x172>
    c154:	4e3c      	ldr	r6, [pc, #240]	; (c248 <ll_init+0x2b0>)
		link = mem_acquire(&mem_link_rx.free);
    c156:	f8df 90e0 	ldr.w	r9, [pc, #224]	; c238 <ll_init+0x2a0>
    c15a:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    c15c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; c234 <ll_init+0x29c>
	if (last == count) {
    c160:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c162:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
    c164:	3401      	adds	r4, #1
    c166:	b2e4      	uxtb	r4, r4
		last = 0U;
    c168:	42a2      	cmp	r2, r4
    c16a:	bf08      	it	eq
    c16c:	2400      	moveq	r4, #0
	if (last == first) {
    c16e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    c170:	4648      	mov	r0, r9
    c172:	d0ca      	beq.n	c10a <ll_init+0x172>
    c174:	f7fc fece 	bl	8f14 <mem_acquire>
    c178:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    c17a:	4640      	mov	r0, r8
		if (!link) {
    c17c:	f1ba 0f00 	cmp.w	sl, #0
    c180:	d0c3      	beq.n	c10a <ll_init+0x172>
		rx = mem_acquire(&mem_pdu_rx.free);
    c182:	f7fc fec7 	bl	8f14 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c186:	3f01      	subs	r7, #1
    c188:	b2ff      	uxtb	r7, r7
		if (!rx) {
    c18a:	2800      	cmp	r0, #0
    c18c:	d037      	beq.n	c1fe <ll_init+0x266>
		rx->link = link;
    c18e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c192:	78f1      	ldrb	r1, [r6, #3]
    c194:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
    c196:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c198:	fb01 6202 	mla	r2, r1, r2, r6
    c19c:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c19e:	2fff      	cmp	r7, #255	; 0xff
    c1a0:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
    c1a2:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    c1a4:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c1a6:	d1db      	bne.n	c160 <ll_init+0x1c8>
    c1a8:	e7af      	b.n	c10a <ll_init+0x172>
	LL_ASSERT(!err);
    c1aa:	4a28      	ldr	r2, [pc, #160]	; (c24c <ll_init+0x2b4>)
    c1ac:	4928      	ldr	r1, [pc, #160]	; (c250 <ll_init+0x2b8>)
    c1ae:	4829      	ldr	r0, [pc, #164]	; (c254 <ll_init+0x2bc>)
    c1b0:	f44f 73a9 	mov.w	r3, #338	; 0x152
    c1b4:	f011 fd9b 	bl	1dcee <printk>
    c1b8:	4040      	eors	r0, r0
    c1ba:	f380 8811 	msr	BASEPRI, r0
    c1be:	f04f 0003 	mov.w	r0, #3
    c1c2:	df02      	svc	2
    c1c4:	e70c      	b.n	bfe0 <ll_init+0x48>
	LL_ASSERT(link);
    c1c6:	4a21      	ldr	r2, [pc, #132]	; (c24c <ll_init+0x2b4>)
    c1c8:	4923      	ldr	r1, [pc, #140]	; (c258 <ll_init+0x2c0>)
    c1ca:	4822      	ldr	r0, [pc, #136]	; (c254 <ll_init+0x2bc>)
    c1cc:	f240 6301 	movw	r3, #1537	; 0x601
    c1d0:	f011 fd8d 	bl	1dcee <printk>
    c1d4:	4040      	eors	r0, r0
    c1d6:	f380 8811 	msr	BASEPRI, r0
    c1da:	f04f 0003 	mov.w	r0, #3
    c1de:	df02      	svc	2
    c1e0:	e759      	b.n	c096 <ll_init+0xfe>
	LL_ASSERT(link);
    c1e2:	4a1a      	ldr	r2, [pc, #104]	; (c24c <ll_init+0x2b4>)
    c1e4:	491c      	ldr	r1, [pc, #112]	; (c258 <ll_init+0x2c0>)
    c1e6:	481b      	ldr	r0, [pc, #108]	; (c254 <ll_init+0x2bc>)
    c1e8:	f240 53fa 	movw	r3, #1530	; 0x5fa
    c1ec:	f011 fd7f 	bl	1dcee <printk>
    c1f0:	4040      	eors	r0, r0
    c1f2:	f380 8811 	msr	BASEPRI, r0
    c1f6:	f04f 0003 	mov.w	r0, #3
    c1fa:	df02      	svc	2
    c1fc:	e73f      	b.n	c07e <ll_init+0xe6>
			mem_release(link, &mem_link_rx.free);
    c1fe:	490e      	ldr	r1, [pc, #56]	; (c238 <ll_init+0x2a0>)
    c200:	4650      	mov	r0, sl
    c202:	f7fc fe9d 	bl	8f40 <mem_release>
			break;
    c206:	e780      	b.n	c10a <ll_init+0x172>
    c208:	20001e10 	.word	0x20001e10
    c20c:	20002128 	.word	0x20002128
    c210:	0001446d 	.word	0x0001446d
    c214:	0001438d 	.word	0x0001438d
    c218:	00014329 	.word	0x00014329
    c21c:	20001eec 	.word	0x20001eec
    c220:	20001e2c 	.word	0x20001e2c
    c224:	20001e14 	.word	0x20001e14
    c228:	20001a58 	.word	0x20001a58
    c22c:	200003ec 	.word	0x200003ec
    c230:	20001af8 	.word	0x20001af8
    c234:	20001b74 	.word	0x20001b74
    c238:	20001b18 	.word	0x20001b18
    c23c:	20001e0c 	.word	0x20001e0c
    c240:	20001e04 	.word	0x20001e04
    c244:	20001b14 	.word	0x20001b14
    c248:	20000414 	.word	0x20000414
    c24c:	000276d8 	.word	0x000276d8
    c250:	00027714 	.word	0x00027714
    c254:	000275f0 	.word	0x000275f0
    c258:	0002798c 	.word	0x0002798c
    c25c:	20000400 	.word	0x20000400

0000c260 <ll_reset>:
{
    c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c264:	b087      	sub	sp, #28
	err = ull_adv_reset();
    c266:	f001 f92d 	bl	d4c4 <ull_adv_reset>
	LL_ASSERT(!err);
    c26a:	2800      	cmp	r0, #0
    c26c:	f040 80e9 	bne.w	c442 <ll_reset+0x1e2>
	err = ull_conn_reset();
    c270:	f002 f90e 	bl	e490 <ull_conn_reset>
	LL_ASSERT(!err);
    c274:	2800      	cmp	r0, #0
    c276:	f040 80f6 	bne.w	c466 <ll_reset+0x206>
	MFIFO_INIT(tx_ack);
    c27a:	4ba0      	ldr	r3, [pc, #640]	; (c4fc <ll_reset+0x29c>)
	MFIFO_INIT(done);
    c27c:	4ea0      	ldr	r6, [pc, #640]	; (c500 <ll_reset+0x2a0>)
	MFIFO_INIT(pdu_rx_free);
    c27e:	4fa1      	ldr	r7, [pc, #644]	; (c504 <ll_reset+0x2a4>)
	MFIFO_INIT(ll_pdu_rx_free);
    c280:	4da1      	ldr	r5, [pc, #644]	; (c508 <ll_reset+0x2a8>)
	MFIFO_INIT(tx_ack);
    c282:	2400      	movs	r4, #0
    c284:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    c286:	4620      	mov	r0, r4
    c288:	f005 fb28 	bl	118dc <ull_filter_reset>
	MFIFO_INIT(prep);
    c28c:	4b9f      	ldr	r3, [pc, #636]	; (c50c <ll_reset+0x2ac>)
	MFIFO_INIT(done);
    c28e:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
    c290:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
    c292:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    c294:	806c      	strh	r4, [r5, #2]
    c296:	2201      	movs	r2, #1
    c298:	4621      	mov	r1, r4
    c29a:	4668      	mov	r0, sp
    c29c:	f01a f919 	bl	264d2 <z_impl_k_sem_init>
		mfy.param = &sem;
    c2a0:	4b9b      	ldr	r3, [pc, #620]	; (c510 <ll_reset+0x2b0>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    c2a2:	4622      	mov	r2, r4
    c2a4:	4621      	mov	r1, r4
    c2a6:	2003      	movs	r0, #3
		mfy.param = &sem;
    c2a8:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    c2ac:	f7fc ff08 	bl	90c0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c2b0:	2800      	cmp	r0, #0
    c2b2:	f040 80f4 	bne.w	c49e <ll_reset+0x23e>
	return z_impl_k_sem_take(sem, timeout);
    c2b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c2ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c2be:	4668      	mov	r0, sp
    c2c0:	f00e fe86 	bl	1afd0 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    c2c4:	f001 f99a 	bl	d5fc <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    c2c8:	2800      	cmp	r0, #0
    c2ca:	f040 80da 	bne.w	c482 <ll_reset+0x222>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    c2ce:	4b91      	ldr	r3, [pc, #580]	; (c514 <ll_reset+0x2b4>)
		link = mem_acquire(&mem_link_done.free);
    c2d0:	f8df 9244 	ldr.w	r9, [pc, #580]	; c518 <ll_reset+0x2b8>
		rx = mem_acquire(&mem_done.free);
    c2d4:	f8df 823c 	ldr.w	r8, [pc, #572]	; c514 <ll_reset+0x2b4>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    c2d8:	1d18      	adds	r0, r3, #4
    c2da:	2203      	movs	r2, #3
    c2dc:	2134      	movs	r1, #52	; 0x34
    c2de:	f7fc fdf9 	bl	8ed4 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    c2e2:	464b      	mov	r3, r9
    c2e4:	2203      	movs	r2, #3
    c2e6:	1d18      	adds	r0, r3, #4
    c2e8:	2108      	movs	r1, #8
    c2ea:	f7fc fdf3 	bl	8ed4 <mem_init>
static inline void done_alloc(void)
    c2ee:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    c2f0:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    c2f2:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
    c2f4:	3401      	adds	r4, #1
    c2f6:	b2e4      	uxtb	r4, r4
		last = 0U;
    c2f8:	42a2      	cmp	r2, r4
    c2fa:	bf08      	it	eq
    c2fc:	2400      	moveq	r4, #0
	if (last == first) {
    c2fe:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    c300:	4648      	mov	r0, r9
    c302:	d016      	beq.n	c332 <ll_reset+0xd2>
    c304:	f7fc fe06 	bl	8f14 <mem_acquire>
    c308:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
    c30a:	4640      	mov	r0, r8
		if (!link) {
    c30c:	f1ba 0f00 	cmp.w	sl, #0
    c310:	d00f      	beq.n	c332 <ll_reset+0xd2>
		rx = mem_acquire(&mem_done.free);
    c312:	f7fc fdff 	bl	8f14 <mem_acquire>
		if (!rx) {
    c316:	b140      	cbz	r0, c32a <ll_reset+0xca>
		rx->link = link;
    c318:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c31c:	78f2      	ldrb	r2, [r6, #3]
    c31e:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c320:	fb02 6303 	mla	r3, r2, r3, r6
    c324:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    c326:	70f4      	strb	r4, [r6, #3]
}
    c328:	e7e2      	b.n	c2f0 <ll_reset+0x90>
			mem_release(link, &mem_link_done.free);
    c32a:	497b      	ldr	r1, [pc, #492]	; (c518 <ll_reset+0x2b8>)
    c32c:	4650      	mov	r0, sl
    c32e:	f7fc fe07 	bl	8f40 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    c332:	4b7a      	ldr	r3, [pc, #488]	; (c51c <ll_reset+0x2bc>)
    c334:	2209      	movs	r2, #9
    c336:	1d18      	adds	r0, r3, #4
    c338:	2148      	movs	r1, #72	; 0x48
    c33a:	f7fc fdcb 	bl	8ed4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    c33e:	4b78      	ldr	r3, [pc, #480]	; (c520 <ll_reset+0x2c0>)
    c340:	220b      	movs	r2, #11
    c342:	1d18      	adds	r0, r3, #4
    c344:	2108      	movs	r1, #8
    c346:	f7fc fdc5 	bl	8ed4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    c34a:	4875      	ldr	r0, [pc, #468]	; (c520 <ll_reset+0x2c0>)
    c34c:	f7fc fde2 	bl	8f14 <mem_acquire>
	LL_ASSERT(link);
    c350:	4604      	mov	r4, r0
    c352:	2800      	cmp	r0, #0
    c354:	f000 80bf 	beq.w	c4d6 <ll_reset+0x276>
	MEMQ_INIT(ull_rx, link);
    c358:	4a72      	ldr	r2, [pc, #456]	; (c524 <ll_reset+0x2c4>)
    c35a:	4620      	mov	r0, r4
    c35c:	1f11      	subs	r1, r2, #4
    c35e:	f7fc fe2d 	bl	8fbc <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    c362:	486f      	ldr	r0, [pc, #444]	; (c520 <ll_reset+0x2c0>)
    c364:	f7fc fdd6 	bl	8f14 <mem_acquire>
	LL_ASSERT(link);
    c368:	4604      	mov	r4, r0
    c36a:	2800      	cmp	r0, #0
    c36c:	f000 80a5 	beq.w	c4ba <ll_reset+0x25a>
	MEMQ_INIT(ll_rx, link);
    c370:	4a6d      	ldr	r2, [pc, #436]	; (c528 <ll_reset+0x2c8>)
	mem_link_rx.quota_pdu = RX_CNT;
    c372:	4e6e      	ldr	r6, [pc, #440]	; (c52c <ll_reset+0x2cc>)
		rx = mem_acquire(&mem_pdu_rx.free);
    c374:	f8df a1a4 	ldr.w	sl, [pc, #420]	; c51c <ll_reset+0x2bc>
	MEMQ_INIT(ll_rx, link);
    c378:	4620      	mov	r0, r4
    c37a:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    c37c:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
    c37e:	f7fc fe1d 	bl	8fbc <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    c382:	2307      	movs	r3, #7
    c384:	f808 3b04 	strb.w	r3, [r8], #4
	while (mem_link_rx.quota_pdu &&
    c388:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
    c38a:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    c38e:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    c390:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    c392:	3401      	adds	r4, #1
    c394:	b2e4      	uxtb	r4, r4
		last = 0U;
    c396:	42a2      	cmp	r2, r4
    c398:	bf08      	it	eq
    c39a:	2400      	moveq	r4, #0
	if (last == first) {
    c39c:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    c39e:	4640      	mov	r0, r8
    c3a0:	d020      	beq.n	c3e4 <ll_reset+0x184>
    c3a2:	f7fc fdb7 	bl	8f14 <mem_acquire>
    c3a6:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    c3a8:	4650      	mov	r0, sl
		if (!link) {
    c3aa:	f1bb 0f00 	cmp.w	fp, #0
    c3ae:	d019      	beq.n	c3e4 <ll_reset+0x184>
		rx = mem_acquire(&mem_pdu_rx.free);
    c3b0:	f7fc fdb0 	bl	8f14 <mem_acquire>
		if (!rx) {
    c3b4:	b190      	cbz	r0, c3dc <ll_reset+0x17c>
		link->mem = NULL;
    c3b6:	f8cb 9004 	str.w	r9, [fp, #4]
		rx->link = link;
    c3ba:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c3be:	78e9      	ldrb	r1, [r5, #3]
    c3c0:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
    c3c2:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c3c4:	fb01 5202 	mla	r2, r1, r2, r5
    c3c8:	3b01      	subs	r3, #1
    c3ca:	b2db      	uxtb	r3, r3
    c3cc:	6050      	str	r0, [r2, #4]
    c3ce:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    c3d0:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
    c3d2:	2b00      	cmp	r3, #0
    c3d4:	d1db      	bne.n	c38e <ll_reset+0x12e>
}
    c3d6:	b007      	add	sp, #28
    c3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    c3dc:	4950      	ldr	r1, [pc, #320]	; (c520 <ll_reset+0x2c0>)
    c3de:	4658      	mov	r0, fp
    c3e0:	f7fc fdae 	bl	8f40 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
    c3e4:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c3e6:	1e5d      	subs	r5, r3, #1
    c3e8:	b2ed      	uxtb	r5, r5
    c3ea:	2b00      	cmp	r3, #0
    c3ec:	d0f3      	beq.n	c3d6 <ll_reset+0x176>
    c3ee:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
    c3f0:	f8df 912c 	ldr.w	r9, [pc, #300]	; c520 <ll_reset+0x2c0>
		rx = mem_acquire(&mem_pdu_rx.free);
    c3f4:	f8df 8124 	ldr.w	r8, [pc, #292]	; c51c <ll_reset+0x2bc>
	if (last == count) {
    c3f8:	787a      	ldrb	r2, [r7, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c3fa:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    c3fc:	3401      	adds	r4, #1
    c3fe:	b2e4      	uxtb	r4, r4
		last = 0U;
    c400:	42a2      	cmp	r2, r4
    c402:	bf08      	it	eq
    c404:	2400      	moveq	r4, #0
	if (last == first) {
    c406:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    c408:	4648      	mov	r0, r9
    c40a:	d0e4      	beq.n	c3d6 <ll_reset+0x176>
    c40c:	f7fc fd82 	bl	8f14 <mem_acquire>
    c410:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    c412:	4640      	mov	r0, r8
		if (!link) {
    c414:	f1ba 0f00 	cmp.w	sl, #0
    c418:	d0dd      	beq.n	c3d6 <ll_reset+0x176>
		rx = mem_acquire(&mem_pdu_rx.free);
    c41a:	f7fc fd7b 	bl	8f14 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c41e:	3d01      	subs	r5, #1
    c420:	b2ed      	uxtb	r5, r5
		if (!rx) {
    c422:	2800      	cmp	r0, #0
    c424:	d065      	beq.n	c4f2 <ll_reset+0x292>
		rx->link = link;
    c426:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c42a:	78f9      	ldrb	r1, [r7, #3]
    c42c:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
    c42e:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c430:	fb01 7202 	mla	r2, r1, r2, r7
    c434:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c436:	2dff      	cmp	r5, #255	; 0xff
    c438:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
    c43a:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    c43c:	70fc      	strb	r4, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c43e:	d1db      	bne.n	c3f8 <ll_reset+0x198>
    c440:	e7c9      	b.n	c3d6 <ll_reset+0x176>
	LL_ASSERT(!err);
    c442:	4a3b      	ldr	r2, [pc, #236]	; (c530 <ll_reset+0x2d0>)
    c444:	493b      	ldr	r1, [pc, #236]	; (c534 <ll_reset+0x2d4>)
    c446:	483c      	ldr	r0, [pc, #240]	; (c538 <ll_reset+0x2d8>)
    c448:	f44f 73db 	mov.w	r3, #438	; 0x1b6
    c44c:	f011 fc4f 	bl	1dcee <printk>
    c450:	4040      	eors	r0, r0
    c452:	f380 8811 	msr	BASEPRI, r0
    c456:	f04f 0003 	mov.w	r0, #3
    c45a:	df02      	svc	2
	err = ull_conn_reset();
    c45c:	f002 f818 	bl	e490 <ull_conn_reset>
	LL_ASSERT(!err);
    c460:	2800      	cmp	r0, #0
    c462:	f43f af0a 	beq.w	c27a <ll_reset+0x1a>
    c466:	4a32      	ldr	r2, [pc, #200]	; (c530 <ll_reset+0x2d0>)
    c468:	4932      	ldr	r1, [pc, #200]	; (c534 <ll_reset+0x2d4>)
    c46a:	4833      	ldr	r0, [pc, #204]	; (c538 <ll_reset+0x2d8>)
    c46c:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
    c470:	f011 fc3d 	bl	1dcee <printk>
    c474:	4040      	eors	r0, r0
    c476:	f380 8811 	msr	BASEPRI, r0
    c47a:	f04f 0003 	mov.w	r0, #3
    c47e:	df02      	svc	2
    c480:	e6fb      	b.n	c27a <ll_reset+0x1a>
	LL_ASSERT(!err);
    c482:	4a2b      	ldr	r2, [pc, #172]	; (c530 <ll_reset+0x2d0>)
    c484:	492b      	ldr	r1, [pc, #172]	; (c534 <ll_reset+0x2d4>)
    c486:	482c      	ldr	r0, [pc, #176]	; (c538 <ll_reset+0x2d8>)
    c488:	f240 231b 	movw	r3, #539	; 0x21b
    c48c:	f011 fc2f 	bl	1dcee <printk>
    c490:	4040      	eors	r0, r0
    c492:	f380 8811 	msr	BASEPRI, r0
    c496:	f04f 0003 	mov.w	r0, #3
    c49a:	df02      	svc	2
    c49c:	e717      	b.n	c2ce <ll_reset+0x6e>
		LL_ASSERT(!retval);
    c49e:	4a24      	ldr	r2, [pc, #144]	; (c530 <ll_reset+0x2d0>)
    c4a0:	4926      	ldr	r1, [pc, #152]	; (c53c <ll_reset+0x2dc>)
    c4a2:	4825      	ldr	r0, [pc, #148]	; (c538 <ll_reset+0x2d8>)
    c4a4:	f240 230e 	movw	r3, #526	; 0x20e
    c4a8:	f011 fc21 	bl	1dcee <printk>
    c4ac:	4040      	eors	r0, r0
    c4ae:	f380 8811 	msr	BASEPRI, r0
    c4b2:	f04f 0003 	mov.w	r0, #3
    c4b6:	df02      	svc	2
    c4b8:	e6fd      	b.n	c2b6 <ll_reset+0x56>
	LL_ASSERT(link);
    c4ba:	4a1d      	ldr	r2, [pc, #116]	; (c530 <ll_reset+0x2d0>)
    c4bc:	4920      	ldr	r1, [pc, #128]	; (c540 <ll_reset+0x2e0>)
    c4be:	481e      	ldr	r0, [pc, #120]	; (c538 <ll_reset+0x2d8>)
    c4c0:	f240 6301 	movw	r3, #1537	; 0x601
    c4c4:	f011 fc13 	bl	1dcee <printk>
    c4c8:	4040      	eors	r0, r0
    c4ca:	f380 8811 	msr	BASEPRI, r0
    c4ce:	f04f 0003 	mov.w	r0, #3
    c4d2:	df02      	svc	2
    c4d4:	e74c      	b.n	c370 <ll_reset+0x110>
	LL_ASSERT(link);
    c4d6:	4a16      	ldr	r2, [pc, #88]	; (c530 <ll_reset+0x2d0>)
    c4d8:	4919      	ldr	r1, [pc, #100]	; (c540 <ll_reset+0x2e0>)
    c4da:	4817      	ldr	r0, [pc, #92]	; (c538 <ll_reset+0x2d8>)
    c4dc:	f240 53fa 	movw	r3, #1530	; 0x5fa
    c4e0:	f011 fc05 	bl	1dcee <printk>
    c4e4:	4040      	eors	r0, r0
    c4e6:	f380 8811 	msr	BASEPRI, r0
    c4ea:	f04f 0003 	mov.w	r0, #3
    c4ee:	df02      	svc	2
    c4f0:	e732      	b.n	c358 <ll_reset+0xf8>
			mem_release(link, &mem_link_rx.free);
    c4f2:	490b      	ldr	r1, [pc, #44]	; (c520 <ll_reset+0x2c0>)
    c4f4:	4650      	mov	r0, sl
    c4f6:	f7fc fd23 	bl	8f40 <mem_release>
			break;
    c4fa:	e76c      	b.n	c3d6 <ll_reset+0x176>
    c4fc:	20000550 	.word	0x20000550
    c500:	200003ec 	.word	0x200003ec
    c504:	20000414 	.word	0x20000414
    c508:	20000400 	.word	0x20000400
    c50c:	2000042c 	.word	0x2000042c
    c510:	20000574 	.word	0x20000574
    c514:	20001a58 	.word	0x20001a58
    c518:	20001af8 	.word	0x20001af8
    c51c:	20001b74 	.word	0x20001b74
    c520:	20001b18 	.word	0x20001b18
    c524:	20001e0c 	.word	0x20001e0c
    c528:	20001e04 	.word	0x20001e04
    c52c:	20001b14 	.word	0x20001b14
    c530:	000276d8 	.word	0x000276d8
    c534:	00027714 	.word	0x00027714
    c538:	000275f0 	.word	0x000275f0
    c53c:	00027750 	.word	0x00027750
    c540:	0002798c 	.word	0x0002798c

0000c544 <ll_rx_get>:
{
    c544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c548:	b085      	sub	sp, #20
    c54a:	e9cd 0100 	strd	r0, r1, [sp]
    c54e:	4c5f      	ldr	r4, [pc, #380]	; (c6cc <ll_rx_get+0x188>)
				mem_release(link, &mem_link_rx.free);
    c550:	4d5f      	ldr	r5, [pc, #380]	; (c6d0 <ll_rx_get+0x18c>)
    c552:	f8df 9184 	ldr.w	r9, [pc, #388]	; c6d8 <ll_rx_get+0x194>
	*node_rx = NULL;
    c556:	9a00      	ldr	r2, [sp, #0]
    c558:	2300      	movs	r3, #0
    c55a:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    c55c:	e9d9 0100 	ldrd	r0, r1, [r9]
    c560:	aa03      	add	r2, sp, #12
    c562:	f7fc fd41 	bl	8fe8 <memq_peek>
	if (link) {
    c566:	4607      	mov	r7, r0
    c568:	2800      	cmp	r0, #0
    c56a:	f000 80a4 	beq.w	c6b6 <ll_rx_get+0x172>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    c56e:	9b03      	ldr	r3, [sp, #12]
    c570:	4958      	ldr	r1, [pc, #352]	; (c6d4 <ll_rx_get+0x190>)
    c572:	781a      	ldrb	r2, [r3, #0]
    c574:	9801      	ldr	r0, [sp, #4]
    c576:	f7ff fae9 	bl	bb4c <tx_cmplt_get>
		if (!cmplt) {
    c57a:	4603      	mov	r3, r0
    c57c:	2800      	cmp	r0, #0
    c57e:	f040 8091 	bne.w	c6a4 <ll_rx_get+0x160>
			f = mfifo_tx_ack.f;
    c582:	78a2      	ldrb	r2, [r4, #2]
    c584:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    c588:	78e2      	ldrb	r2, [r4, #3]
    c58a:	f10d 0109 	add.w	r1, sp, #9
    c58e:	f10d 000a 	add.w	r0, sp, #10
    c592:	461e      	mov	r6, r3
    c594:	f7ff fada 	bl	bb4c <tx_cmplt_get>
    c598:	ea46 0200 	orr.w	r2, r6, r0
			} while ((cmplt_prev != 0U) ||
    c59c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
    c5a0:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
    c5a2:	d1f1      	bne.n	c588 <ll_rx_get+0x44>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
    c5a4:	9b03      	ldr	r3, [sp, #12]
    c5a6:	7919      	ldrb	r1, [r3, #4]
    c5a8:	2903      	cmp	r1, #3
    c5aa:	d178      	bne.n	c69e <ll_rx_get+0x15a>
				(void)memq_dequeue(memq_ll_rx.tail,
    c5ac:	494a      	ldr	r1, [pc, #296]	; (c6d8 <ll_rx_get+0x194>)
    c5ae:	f8d9 0004 	ldr.w	r0, [r9, #4]
    c5b2:	f7fc fd21 	bl	8ff8 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    c5b6:	4949      	ldr	r1, [pc, #292]	; (c6dc <ll_rx_get+0x198>)
    c5b8:	4638      	mov	r0, r7
    c5ba:	f7fc fcc1 	bl	8f40 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c5be:	782b      	ldrb	r3, [r5, #0]
    c5c0:	2b06      	cmp	r3, #6
    c5c2:	d85d      	bhi.n	c680 <ll_rx_get+0x13c>
	mem_link_rx.quota_pdu += delta;
    c5c4:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    c5c6:	4946      	ldr	r1, [pc, #280]	; (c6e0 <ll_rx_get+0x19c>)
    c5c8:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    c5ca:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    c5cc:	f7fc fcb8 	bl	8f40 <mem_release>
	while (mem_link_rx.quota_pdu &&
    c5d0:	782b      	ldrb	r3, [r5, #0]
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d0bf      	beq.n	c556 <ll_rx_get+0x12>
    c5d6:	4f43      	ldr	r7, [pc, #268]	; (c6e4 <ll_rx_get+0x1a0>)
		link = mem_acquire(&mem_link_rx.free);
    c5d8:	f8df 8100 	ldr.w	r8, [pc, #256]	; c6dc <ll_rx_get+0x198>
    c5dc:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    c5de:	f8df a100 	ldr.w	sl, [pc, #256]	; c6e0 <ll_rx_get+0x19c>
	if (last == count) {
    c5e2:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    c5e4:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    c5e6:	3601      	adds	r6, #1
    c5e8:	b2f6      	uxtb	r6, r6
		last = 0U;
    c5ea:	42b2      	cmp	r2, r6
    c5ec:	bf08      	it	eq
    c5ee:	2600      	moveq	r6, #0
	if (last == first) {
    c5f0:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
    c5f2:	4640      	mov	r0, r8
    c5f4:	d01f      	beq.n	c636 <ll_rx_get+0xf2>
    c5f6:	f7fc fc8d 	bl	8f14 <mem_acquire>
    c5fa:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    c5fc:	4650      	mov	r0, sl
		if (!link) {
    c5fe:	f1bb 0f00 	cmp.w	fp, #0
    c602:	d018      	beq.n	c636 <ll_rx_get+0xf2>
		rx = mem_acquire(&mem_pdu_rx.free);
    c604:	f7fc fc86 	bl	8f14 <mem_acquire>
		if (!rx) {
    c608:	b188      	cbz	r0, c62e <ll_rx_get+0xea>
		link->mem = NULL;
    c60a:	2300      	movs	r3, #0
    c60c:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
    c610:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c614:	78f9      	ldrb	r1, [r7, #3]
    c616:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
    c618:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c61a:	fb01 7202 	mla	r2, r1, r2, r7
    c61e:	3b01      	subs	r3, #1
    c620:	b2db      	uxtb	r3, r3
    c622:	6050      	str	r0, [r2, #4]
    c624:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    c626:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
    c628:	2b00      	cmp	r3, #0
    c62a:	d1da      	bne.n	c5e2 <ll_rx_get+0x9e>
    c62c:	e793      	b.n	c556 <ll_rx_get+0x12>
			mem_release(link, &mem_link_rx.free);
    c62e:	492b      	ldr	r1, [pc, #172]	; (c6dc <ll_rx_get+0x198>)
    c630:	4658      	mov	r0, fp
    c632:	f7fc fc85 	bl	8f40 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c636:	782b      	ldrb	r3, [r5, #0]
    c638:	2b00      	cmp	r3, #0
    c63a:	d08c      	beq.n	c556 <ll_rx_get+0x12>
    c63c:	4f2a      	ldr	r7, [pc, #168]	; (c6e8 <ll_rx_get+0x1a4>)
	last = last + 1;
    c63e:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
    c640:	787a      	ldrb	r2, [r7, #1]
    c642:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    c644:	3601      	adds	r6, #1
    c646:	b2f6      	uxtb	r6, r6
		last = 0U;
    c648:	42b2      	cmp	r2, r6
    c64a:	bf08      	it	eq
    c64c:	2600      	moveq	r6, #0
	if (last == first) {
    c64e:	429e      	cmp	r6, r3
    c650:	d081      	beq.n	c556 <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
    c652:	4822      	ldr	r0, [pc, #136]	; (c6dc <ll_rx_get+0x198>)
    c654:	f7fc fc5e 	bl	8f14 <mem_acquire>
		if (!link) {
    c658:	4680      	mov	r8, r0
    c65a:	2800      	cmp	r0, #0
    c65c:	f43f af7b 	beq.w	c556 <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
    c660:	481f      	ldr	r0, [pc, #124]	; (c6e0 <ll_rx_get+0x19c>)
    c662:	f7fc fc57 	bl	8f14 <mem_acquire>
		if (!rx) {
    c666:	b308      	cbz	r0, c6ac <ll_rx_get+0x168>
		rx->link = link;
    c668:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c66c:	78f9      	ldrb	r1, [r7, #3]
    c66e:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
    c670:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c672:	fb01 7202 	mla	r2, r1, r2, r7
    c676:	3b01      	subs	r3, #1
    c678:	6050      	str	r0, [r2, #4]
    c67a:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    c67c:	70fe      	strb	r6, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c67e:	e76a      	b.n	c556 <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c680:	4a1a      	ldr	r2, [pc, #104]	; (c6ec <ll_rx_get+0x1a8>)
    c682:	491b      	ldr	r1, [pc, #108]	; (c6f0 <ll_rx_get+0x1ac>)
    c684:	481b      	ldr	r0, [pc, #108]	; (c6f4 <ll_rx_get+0x1b0>)
    c686:	f240 4343 	movw	r3, #1091	; 0x443
    c68a:	f011 fb30 	bl	1dcee <printk>
    c68e:	4040      	eors	r0, r0
    c690:	f380 8811 	msr	BASEPRI, r0
    c694:	f04f 0003 	mov.w	r0, #3
    c698:	df02      	svc	2
    c69a:	782b      	ldrb	r3, [r5, #0]
    c69c:	e792      	b.n	c5c4 <ll_rx_get+0x80>
			*node_rx = rx;
    c69e:	9900      	ldr	r1, [sp, #0]
    c6a0:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    c6a2:	4613      	mov	r3, r2
}
    c6a4:	4618      	mov	r0, r3
    c6a6:	b005      	add	sp, #20
    c6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    c6ac:	490b      	ldr	r1, [pc, #44]	; (c6dc <ll_rx_get+0x198>)
    c6ae:	4640      	mov	r0, r8
    c6b0:	f7fc fc46 	bl	8f40 <mem_release>
			break;
    c6b4:	e74f      	b.n	c556 <ll_rx_get+0x12>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    c6b6:	78e2      	ldrb	r2, [r4, #3]
    c6b8:	4906      	ldr	r1, [pc, #24]	; (c6d4 <ll_rx_get+0x190>)
    c6ba:	9801      	ldr	r0, [sp, #4]
    c6bc:	f7ff fa46 	bl	bb4c <tx_cmplt_get>
    c6c0:	4603      	mov	r3, r0
}
    c6c2:	4618      	mov	r0, r3
    c6c4:	b005      	add	sp, #20
    c6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6ca:	bf00      	nop
    c6cc:	20000550 	.word	0x20000550
    c6d0:	20001b14 	.word	0x20001b14
    c6d4:	20000552 	.word	0x20000552
    c6d8:	20001e00 	.word	0x20001e00
    c6dc:	20001b18 	.word	0x20001b18
    c6e0:	20001b74 	.word	0x20001b74
    c6e4:	20000400 	.word	0x20000400
    c6e8:	20000414 	.word	0x20000414
    c6ec:	000276d8 	.word	0x000276d8
    c6f0:	00027758 	.word	0x00027758
    c6f4:	000275f0 	.word	0x000275f0

0000c6f8 <ll_rx_dequeue>:
{
    c6f8:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c6fa:	495c      	ldr	r1, [pc, #368]	; (c86c <ll_rx_dequeue+0x174>)
{
    c6fc:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    c6fe:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c700:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    c702:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c704:	aa01      	add	r2, sp, #4
    c706:	f7fc fc77 	bl	8ff8 <memq_dequeue>
	LL_ASSERT(link);
    c70a:	4604      	mov	r4, r0
    c70c:	2800      	cmp	r0, #0
    c70e:	d052      	beq.n	c7b6 <ll_rx_dequeue+0xbe>
	mem_release(link, &mem_link_rx.free);
    c710:	4957      	ldr	r1, [pc, #348]	; (c870 <ll_rx_dequeue+0x178>)
    c712:	4620      	mov	r0, r4
    c714:	f7fc fc14 	bl	8f40 <mem_release>
	switch (rx->type) {
    c718:	9a01      	ldr	r2, [sp, #4]
    c71a:	7913      	ldrb	r3, [r2, #4]
    c71c:	2b15      	cmp	r3, #21
    c71e:	d810      	bhi.n	c742 <ll_rx_dequeue+0x4a>
    c720:	e8df f003 	tbb	[pc, r3]
    c724:	0f0b0f0b 	.word	0x0f0b0f0b
    c728:	0f0f0f0f 	.word	0x0f0f0f0f
    c72c:	0f0f0f0f 	.word	0x0f0f0f0f
    c730:	1e0f0f0f 	.word	0x1e0f0f0f
    c734:	0b0b0b0b 	.word	0x0b0b0b0b
    c738:	0b0b      	.short	0x0b0b
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    c73a:	2b00      	cmp	r3, #0
    c73c:	d049      	beq.n	c7d2 <ll_rx_dequeue+0xda>
}
    c73e:	b002      	add	sp, #8
    c740:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
    c742:	4a4c      	ldr	r2, [pc, #304]	; (c874 <ll_rx_dequeue+0x17c>)
    c744:	494c      	ldr	r1, [pc, #304]	; (c878 <ll_rx_dequeue+0x180>)
    c746:	484d      	ldr	r0, [pc, #308]	; (c87c <ll_rx_dequeue+0x184>)
    c748:	f240 3353 	movw	r3, #851	; 0x353
    c74c:	f011 facf 	bl	1dcee <printk>
    c750:	4040      	eors	r0, r0
    c752:	f380 8811 	msr	BASEPRI, r0
    c756:	f04f 0003 	mov.w	r0, #3
    c75a:	df02      	svc	2
}
    c75c:	b002      	add	sp, #8
    c75e:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    c760:	7f13      	ldrb	r3, [r2, #28]
    c762:	2b3c      	cmp	r3, #60	; 0x3c
    c764:	d044      	beq.n	c7f0 <ll_rx_dequeue+0xf8>
    c766:	7f53      	ldrb	r3, [r2, #29]
    c768:	b1bb      	cbz	r3, c79a <ll_rx_dequeue+0xa2>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
    c76a:	6893      	ldr	r3, [r2, #8]
    c76c:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    c76e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    c770:	b120      	cbz	r0, c77c <ll_rx_dequeue+0x84>
					adv->node_rx_cc_free = NULL;
    c772:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
    c774:	4942      	ldr	r1, [pc, #264]	; (c880 <ll_rx_dequeue+0x188>)
					adv->node_rx_cc_free = NULL;
    c776:	64a3      	str	r3, [r4, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
    c778:	f7fc fbe2 	bl	8f40 <mem_release>
			adv->is_enabled = 0U;
    c77c:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    c780:	f36f 0300 	bfc	r3, #0, #1
    c784:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
			      ull_adv_is_enabled(0));
    c788:	2000      	movs	r0, #0
    c78a:	f000 ff75 	bl	d678 <ull_adv_is_enabled>
			if (!bm) {
    c78e:	2800      	cmp	r0, #0
    c790:	d1d5      	bne.n	c73e <ll_rx_dequeue+0x46>
				ull_filter_adv_scan_state_cb(0);
    c792:	f004 fc47 	bl	11024 <ull_filter_adv_scan_state_cb>
}
    c796:	b002      	add	sp, #8
    c798:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
    c79a:	4a36      	ldr	r2, [pc, #216]	; (c874 <ll_rx_dequeue+0x17c>)
    c79c:	4936      	ldr	r1, [pc, #216]	; (c878 <ll_rx_dequeue+0x180>)
    c79e:	4837      	ldr	r0, [pc, #220]	; (c87c <ll_rx_dequeue+0x184>)
    c7a0:	f240 23fb 	movw	r3, #763	; 0x2fb
    c7a4:	f011 faa3 	bl	1dcee <printk>
    c7a8:	4040      	eors	r0, r0
    c7aa:	f380 8811 	msr	BASEPRI, r0
    c7ae:	f04f 0003 	mov.w	r0, #3
    c7b2:	df02      	svc	2
    c7b4:	e7e8      	b.n	c788 <ll_rx_dequeue+0x90>
	LL_ASSERT(link);
    c7b6:	4a2f      	ldr	r2, [pc, #188]	; (c874 <ll_rx_dequeue+0x17c>)
    c7b8:	4932      	ldr	r1, [pc, #200]	; (c884 <ll_rx_dequeue+0x18c>)
    c7ba:	4830      	ldr	r0, [pc, #192]	; (c87c <ll_rx_dequeue+0x184>)
    c7bc:	f240 2372 	movw	r3, #626	; 0x272
    c7c0:	f011 fa95 	bl	1dcee <printk>
    c7c4:	4040      	eors	r0, r0
    c7c6:	f380 8811 	msr	BASEPRI, r0
    c7ca:	f04f 0003 	mov.w	r0, #3
    c7ce:	df02      	svc	2
    c7d0:	e79e      	b.n	c710 <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    c7d2:	4a28      	ldr	r2, [pc, #160]	; (c874 <ll_rx_dequeue+0x17c>)
    c7d4:	492c      	ldr	r1, [pc, #176]	; (c888 <ll_rx_dequeue+0x190>)
    c7d6:	4829      	ldr	r0, [pc, #164]	; (c87c <ll_rx_dequeue+0x184>)
    c7d8:	f240 334f 	movw	r3, #847	; 0x34f
    c7dc:	f011 fa87 	bl	1dcee <printk>
    c7e0:	4040      	eors	r0, r0
    c7e2:	f380 8811 	msr	BASEPRI, r0
    c7e6:	f04f 0003 	mov.w	r0, #3
    c7ea:	df02      	svc	2
}
    c7ec:	b002      	add	sp, #8
    c7ee:	bd70      	pop	{r4, r5, r6, pc}
			struct lll_adv *lll = ftr->param;
    c7f0:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
    c7f2:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
    c7f4:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
    c7f6:	b1ed      	cbz	r5, c834 <ll_rx_dequeue+0x13c>
				LL_ASSERT(!conn_lll->link_tx_free);
    c7f8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
    c7fa:	2200      	movs	r2, #0
    c7fc:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
    c7fe:	b163      	cbz	r3, c81a <ll_rx_dequeue+0x122>
    c800:	4a1c      	ldr	r2, [pc, #112]	; (c874 <ll_rx_dequeue+0x17c>)
    c802:	4922      	ldr	r1, [pc, #136]	; (c88c <ll_rx_dequeue+0x194>)
    c804:	481d      	ldr	r0, [pc, #116]	; (c87c <ll_rx_dequeue+0x184>)
    c806:	f44f 7337 	mov.w	r3, #732	; 0x2dc
    c80a:	f011 fa70 	bl	1dcee <printk>
    c80e:	4040      	eors	r0, r0
    c810:	f380 8811 	msr	BASEPRI, r0
    c814:	f04f 0003 	mov.w	r0, #3
    c818:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    c81a:	f105 0150 	add.w	r1, r5, #80	; 0x50
    c81e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    c822:	f7fc fbcf 	bl	8fc4 <memq_deinit>
				LL_ASSERT(link);
    c826:	4606      	mov	r6, r0
    c828:	b190      	cbz	r0, c850 <ll_rx_dequeue+0x158>
				ll_conn_release(conn);
    c82a:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    c82c:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
    c82e:	f001 fb59 	bl	dee4 <ll_conn_release>
    c832:	e7a3      	b.n	c77c <ll_rx_dequeue+0x84>
				LL_ASSERT(conn_lll);
    c834:	4a0f      	ldr	r2, [pc, #60]	; (c874 <ll_rx_dequeue+0x17c>)
    c836:	4916      	ldr	r1, [pc, #88]	; (c890 <ll_rx_dequeue+0x198>)
    c838:	4810      	ldr	r0, [pc, #64]	; (c87c <ll_rx_dequeue+0x184>)
    c83a:	f240 23d9 	movw	r3, #729	; 0x2d9
    c83e:	f011 fa56 	bl	1dcee <printk>
    c842:	4040      	eors	r0, r0
    c844:	f380 8811 	msr	BASEPRI, r0
    c848:	f04f 0003 	mov.w	r0, #3
    c84c:	df02      	svc	2
    c84e:	e7d3      	b.n	c7f8 <ll_rx_dequeue+0x100>
				LL_ASSERT(link);
    c850:	4a08      	ldr	r2, [pc, #32]	; (c874 <ll_rx_dequeue+0x17c>)
    c852:	490c      	ldr	r1, [pc, #48]	; (c884 <ll_rx_dequeue+0x18c>)
    c854:	4809      	ldr	r0, [pc, #36]	; (c87c <ll_rx_dequeue+0x184>)
    c856:	f240 23df 	movw	r3, #735	; 0x2df
    c85a:	f011 fa48 	bl	1dcee <printk>
    c85e:	4040      	eors	r0, r0
    c860:	f380 8811 	msr	BASEPRI, r0
    c864:	f04f 0003 	mov.w	r0, #3
    c868:	df02      	svc	2
    c86a:	e7de      	b.n	c82a <ll_rx_dequeue+0x132>
    c86c:	20001e00 	.word	0x20001e00
    c870:	20001b18 	.word	0x20001b18
    c874:	000276d8 	.word	0x000276d8
    c878:	00027650 	.word	0x00027650
    c87c:	000275f0 	.word	0x000275f0
    c880:	20001b74 	.word	0x20001b74
    c884:	0002798c 	.word	0x0002798c
    c888:	000277b0 	.word	0x000277b0
    c88c:	00027798 	.word	0x00027798
    c890:	0002778c 	.word	0x0002778c

0000c894 <ll_rx_mem_release>:
{
    c894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
    c898:	6804      	ldr	r4, [r0, #0]
	while (rx) {
    c89a:	4e86      	ldr	r6, [pc, #536]	; (cab4 <ll_rx_mem_release+0x220>)
{
    c89c:	4681      	mov	r9, r0
	while (rx) {
    c89e:	2c00      	cmp	r4, #0
    c8a0:	d042      	beq.n	c928 <ll_rx_mem_release+0x94>
			LL_ASSERT(0);
    c8a2:	f8df 823c 	ldr.w	r8, [pc, #572]	; cae0 <ll_rx_mem_release+0x24c>
    c8a6:	f8df a23c 	ldr.w	sl, [pc, #572]	; cae4 <ll_rx_mem_release+0x250>
    c8aa:	4f83      	ldr	r7, [pc, #524]	; (cab8 <ll_rx_mem_release+0x224>)
		rx = rx->next;
    c8ac:	4625      	mov	r5, r4
    c8ae:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    c8b0:	792b      	ldrb	r3, [r5, #4]
    c8b2:	2b15      	cmp	r3, #21
    c8b4:	d86a      	bhi.n	c98c <ll_rx_mem_release+0xf8>
    c8b6:	e8df f003 	tbb	[pc, r3]
    c8ba:	691e      	.short	0x691e
    c8bc:	6969691e 	.word	0x6969691e
    c8c0:	69696969 	.word	0x69696969
    c8c4:	69696969 	.word	0x69696969
    c8c8:	1e790b69 	.word	0x1e790b69
    c8cc:	1e1e1e1e 	.word	0x1e1e1e1e
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    c8d0:	7f2b      	ldrb	r3, [r5, #28]
    c8d2:	2b3c      	cmp	r3, #60	; 0x3c
    c8d4:	f000 80d1 	beq.w	ca7a <ll_rx_mem_release+0x1e6>
				LL_ASSERT(!cc->status);
    c8d8:	b1db      	cbz	r3, c912 <ll_rx_mem_release+0x7e>
    c8da:	4978      	ldr	r1, [pc, #480]	; (cabc <ll_rx_mem_release+0x228>)
    c8dc:	f240 33bd 	movw	r3, #957	; 0x3bd
    c8e0:	4642      	mov	r2, r8
    c8e2:	4638      	mov	r0, r7
    c8e4:	f011 fa03 	bl	1dcee <printk>
    c8e8:	4040      	eors	r0, r0
    c8ea:	f380 8811 	msr	BASEPRI, r0
    c8ee:	f04f 0003 	mov.w	r0, #3
    c8f2:	df02      	svc	2
    c8f4:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    c8f6:	b963      	cbnz	r3, c912 <ll_rx_mem_release+0x7e>
    c8f8:	4971      	ldr	r1, [pc, #452]	; (cac0 <ll_rx_mem_release+0x22c>)
    c8fa:	f240 4303 	movw	r3, #1027	; 0x403
    c8fe:	4642      	mov	r2, r8
    c900:	4638      	mov	r0, r7
    c902:	f011 f9f4 	bl	1dcee <printk>
    c906:	4040      	eors	r0, r0
    c908:	f380 8811 	msr	BASEPRI, r0
    c90c:	f04f 0003 	mov.w	r0, #3
    c910:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c912:	7833      	ldrb	r3, [r6, #0]
    c914:	2b06      	cmp	r3, #6
    c916:	d86e      	bhi.n	c9f6 <ll_rx_mem_release+0x162>
	mem_link_rx.quota_pdu += delta;
    c918:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    c91a:	496a      	ldr	r1, [pc, #424]	; (cac4 <ll_rx_mem_release+0x230>)
	mem_link_rx.quota_pdu += delta;
    c91c:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
    c91e:	4628      	mov	r0, r5
    c920:	f7fc fb0e 	bl	8f40 <mem_release>
	while (rx) {
    c924:	2c00      	cmp	r4, #0
    c926:	d1c1      	bne.n	c8ac <ll_rx_mem_release+0x18>
	*node_rx = rx;
    c928:	2700      	movs	r7, #0
    c92a:	f8c9 7000 	str.w	r7, [r9]
	while (mem_link_rx.quota_pdu &&
    c92e:	7833      	ldrb	r3, [r6, #0]
    c930:	b353      	cbz	r3, c988 <ll_rx_mem_release+0xf4>
    c932:	4d65      	ldr	r5, [pc, #404]	; (cac8 <ll_rx_mem_release+0x234>)
		link = mem_acquire(&mem_link_rx.free);
    c934:	f8df 819c 	ldr.w	r8, [pc, #412]	; cad4 <ll_rx_mem_release+0x240>
    c938:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    c93a:	f8df 9188 	ldr.w	r9, [pc, #392]	; cac4 <ll_rx_mem_release+0x230>
	if (last == count) {
    c93e:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    c940:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    c942:	3401      	adds	r4, #1
    c944:	b2e4      	uxtb	r4, r4
		last = 0U;
    c946:	42a2      	cmp	r2, r4
    c948:	bf08      	it	eq
    c94a:	2400      	moveq	r4, #0
	if (last == first) {
    c94c:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    c94e:	4640      	mov	r0, r8
    c950:	d064      	beq.n	ca1c <ll_rx_mem_release+0x188>
    c952:	f7fc fadf 	bl	8f14 <mem_acquire>
    c956:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    c958:	4648      	mov	r0, r9
		if (!link) {
    c95a:	f1ba 0f00 	cmp.w	sl, #0
    c95e:	d05d      	beq.n	ca1c <ll_rx_mem_release+0x188>
		rx = mem_acquire(&mem_pdu_rx.free);
    c960:	f7fc fad8 	bl	8f14 <mem_acquire>
		if (!rx) {
    c964:	2800      	cmp	r0, #0
    c966:	d055      	beq.n	ca14 <ll_rx_mem_release+0x180>
		link->mem = NULL;
    c968:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
    c96c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c970:	78e9      	ldrb	r1, [r5, #3]
    c972:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
    c974:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c976:	fb01 5202 	mla	r2, r1, r2, r5
    c97a:	3b01      	subs	r3, #1
    c97c:	b2db      	uxtb	r3, r3
    c97e:	6050      	str	r0, [r2, #4]
    c980:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    c982:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
    c984:	2b00      	cmp	r3, #0
    c986:	d1da      	bne.n	c93e <ll_rx_mem_release+0xaa>
}
    c988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
    c98c:	f240 4337 	movw	r3, #1079	; 0x437
    c990:	4642      	mov	r2, r8
    c992:	4651      	mov	r1, sl
    c994:	4638      	mov	r0, r7
    c996:	f011 f9aa 	bl	1dcee <printk>
    c99a:	4040      	eors	r0, r0
    c99c:	f380 8811 	msr	BASEPRI, r0
    c9a0:	f04f 0003 	mov.w	r0, #3
    c9a4:	df02      	svc	2
	while (rx) {
    c9a6:	2c00      	cmp	r4, #0
    c9a8:	d180      	bne.n	c8ac <ll_rx_mem_release+0x18>
    c9aa:	e7bd      	b.n	c928 <ll_rx_mem_release+0x94>
			conn = ll_conn_get(rx_free->handle);
    c9ac:	88e8      	ldrh	r0, [r5, #6]
    c9ae:	f001 faa7 	bl	df00 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
    c9b2:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
    c9b4:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
    c9b6:	b163      	cbz	r3, c9d2 <ll_rx_mem_release+0x13e>
    c9b8:	4944      	ldr	r1, [pc, #272]	; (cacc <ll_rx_mem_release+0x238>)
    c9ba:	f240 432a 	movw	r3, #1066	; 0x42a
    c9be:	4642      	mov	r2, r8
    c9c0:	4638      	mov	r0, r7
    c9c2:	f011 f994 	bl	1dcee <printk>
    c9c6:	4040      	eors	r0, r0
    c9c8:	f380 8811 	msr	BASEPRI, r0
    c9cc:	f04f 0003 	mov.w	r0, #3
    c9d0:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
    c9d2:	f105 016c 	add.w	r1, r5, #108	; 0x6c
    c9d6:	f105 0068 	add.w	r0, r5, #104	; 0x68
    c9da:	f7fc faf3 	bl	8fc4 <memq_deinit>
			LL_ASSERT(link);
    c9de:	4683      	mov	fp, r0
    c9e0:	2800      	cmp	r0, #0
    c9e2:	d052      	beq.n	ca8a <ll_rx_mem_release+0x1f6>
			conn->lll.link_tx_free = link;
    c9e4:	f8c5 b078 	str.w	fp, [r5, #120]	; 0x78
			ll_conn_release(conn);
    c9e8:	4628      	mov	r0, r5
    c9ea:	f001 fa7b 	bl	dee4 <ll_conn_release>
	while (rx) {
    c9ee:	2c00      	cmp	r4, #0
    c9f0:	f47f af5c 	bne.w	c8ac <ll_rx_mem_release+0x18>
    c9f4:	e798      	b.n	c928 <ll_rx_mem_release+0x94>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c9f6:	4936      	ldr	r1, [pc, #216]	; (cad0 <ll_rx_mem_release+0x23c>)
    c9f8:	f240 4343 	movw	r3, #1091	; 0x443
    c9fc:	4642      	mov	r2, r8
    c9fe:	4638      	mov	r0, r7
    ca00:	f011 f975 	bl	1dcee <printk>
    ca04:	4040      	eors	r0, r0
    ca06:	f380 8811 	msr	BASEPRI, r0
    ca0a:	f04f 0003 	mov.w	r0, #3
    ca0e:	df02      	svc	2
    ca10:	7833      	ldrb	r3, [r6, #0]
    ca12:	e781      	b.n	c918 <ll_rx_mem_release+0x84>
			mem_release(link, &mem_link_rx.free);
    ca14:	492f      	ldr	r1, [pc, #188]	; (cad4 <ll_rx_mem_release+0x240>)
    ca16:	4650      	mov	r0, sl
    ca18:	f7fc fa92 	bl	8f40 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
    ca1c:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ca1e:	1e5f      	subs	r7, r3, #1
    ca20:	b2ff      	uxtb	r7, r7
    ca22:	2b00      	cmp	r3, #0
    ca24:	d0b0      	beq.n	c988 <ll_rx_mem_release+0xf4>
    ca26:	4d2c      	ldr	r5, [pc, #176]	; (cad8 <ll_rx_mem_release+0x244>)
		link = mem_acquire(&mem_link_rx.free);
    ca28:	f8df 80a8 	ldr.w	r8, [pc, #168]	; cad4 <ll_rx_mem_release+0x240>
    ca2c:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    ca2e:	f8df 9094 	ldr.w	r9, [pc, #148]	; cac4 <ll_rx_mem_release+0x230>
	if (last == count) {
    ca32:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ca34:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    ca36:	3401      	adds	r4, #1
    ca38:	b2e4      	uxtb	r4, r4
		last = 0U;
    ca3a:	42a2      	cmp	r2, r4
    ca3c:	bf08      	it	eq
    ca3e:	2400      	moveq	r4, #0
	if (last == first) {
    ca40:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    ca42:	4640      	mov	r0, r8
    ca44:	d0a0      	beq.n	c988 <ll_rx_mem_release+0xf4>
    ca46:	f7fc fa65 	bl	8f14 <mem_acquire>
    ca4a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    ca4c:	4648      	mov	r0, r9
		if (!link) {
    ca4e:	f1ba 0f00 	cmp.w	sl, #0
    ca52:	d099      	beq.n	c988 <ll_rx_mem_release+0xf4>
		rx = mem_acquire(&mem_pdu_rx.free);
    ca54:	f7fc fa5e 	bl	8f14 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ca58:	3f01      	subs	r7, #1
    ca5a:	b2ff      	uxtb	r7, r7
		if (!rx) {
    ca5c:	b318      	cbz	r0, caa6 <ll_rx_mem_release+0x212>
		rx->link = link;
    ca5e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ca62:	78e9      	ldrb	r1, [r5, #3]
    ca64:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
    ca66:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ca68:	fb01 5202 	mla	r2, r1, r2, r5
    ca6c:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ca6e:	2fff      	cmp	r7, #255	; 0xff
    ca70:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
    ca72:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    ca74:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ca76:	d1dc      	bne.n	ca32 <ll_rx_mem_release+0x19e>
    ca78:	e786      	b.n	c988 <ll_rx_mem_release+0xf4>
				mem_release(rx_free, &mem_pdu_rx.free);
    ca7a:	4912      	ldr	r1, [pc, #72]	; (cac4 <ll_rx_mem_release+0x230>)
    ca7c:	4628      	mov	r0, r5
    ca7e:	f7fc fa5f 	bl	8f40 <mem_release>
	while (rx) {
    ca82:	2c00      	cmp	r4, #0
    ca84:	f47f af12 	bne.w	c8ac <ll_rx_mem_release+0x18>
    ca88:	e74e      	b.n	c928 <ll_rx_mem_release+0x94>
			LL_ASSERT(link);
    ca8a:	4914      	ldr	r1, [pc, #80]	; (cadc <ll_rx_mem_release+0x248>)
    ca8c:	f240 432d 	movw	r3, #1069	; 0x42d
    ca90:	4642      	mov	r2, r8
    ca92:	4638      	mov	r0, r7
    ca94:	f011 f92b 	bl	1dcee <printk>
    ca98:	4040      	eors	r0, r0
    ca9a:	f380 8811 	msr	BASEPRI, r0
    ca9e:	f04f 0003 	mov.w	r0, #3
    caa2:	df02      	svc	2
    caa4:	e79e      	b.n	c9e4 <ll_rx_mem_release+0x150>
			mem_release(link, &mem_link_rx.free);
    caa6:	4650      	mov	r0, sl
    caa8:	490a      	ldr	r1, [pc, #40]	; (cad4 <ll_rx_mem_release+0x240>)
}
    caaa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
    caae:	f7fc ba47 	b.w	8f40 <mem_release>
    cab2:	bf00      	nop
    cab4:	20001b14 	.word	0x20001b14
    cab8:	000275f0 	.word	0x000275f0
    cabc:	000277d0 	.word	0x000277d0
    cac0:	000277dc 	.word	0x000277dc
    cac4:	20001b74 	.word	0x20001b74
    cac8:	20000400 	.word	0x20000400
    cacc:	00027800 	.word	0x00027800
    cad0:	00027758 	.word	0x00027758
    cad4:	20001b18 	.word	0x20001b18
    cad8:	20000414 	.word	0x20000414
    cadc:	0002798c 	.word	0x0002798c
    cae0:	000276d8 	.word	0x000276d8
    cae4:	00027650 	.word	0x00027650

0000cae8 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    cae8:	4801      	ldr	r0, [pc, #4]	; (caf0 <ll_rx_link_alloc+0x8>)
    caea:	f7fc ba13 	b.w	8f14 <mem_acquire>
    caee:	bf00      	nop
    caf0:	20001b18 	.word	0x20001b18

0000caf4 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    caf4:	4901      	ldr	r1, [pc, #4]	; (cafc <ll_rx_link_release+0x8>)
    caf6:	f7fc ba23 	b.w	8f40 <mem_release>
    cafa:	bf00      	nop
    cafc:	20001b18 	.word	0x20001b18

0000cb00 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    cb00:	4801      	ldr	r0, [pc, #4]	; (cb08 <ll_rx_alloc+0x8>)
    cb02:	f7fc ba07 	b.w	8f14 <mem_acquire>
    cb06:	bf00      	nop
    cb08:	20001b74 	.word	0x20001b74

0000cb0c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    cb0c:	4901      	ldr	r1, [pc, #4]	; (cb14 <ll_rx_release+0x8>)
    cb0e:	f7fc ba17 	b.w	8f40 <mem_release>
    cb12:	bf00      	nop
    cb14:	20001b74 	.word	0x20001b74

0000cb18 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    cb18:	4b02      	ldr	r3, [pc, #8]	; (cb24 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    cb1a:	4a03      	ldr	r2, [pc, #12]	; (cb28 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    cb1c:	78db      	ldrb	r3, [r3, #3]
    cb1e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    cb20:	f7fc ba5a 	b.w	8fd8 <memq_enqueue>
    cb24:	20000550 	.word	0x20000550
    cb28:	20001e04 	.word	0x20001e04

0000cb2c <ll_rx_sched>:
	k_sem_give(sem_recv);
    cb2c:	4b01      	ldr	r3, [pc, #4]	; (cb34 <ll_rx_sched+0x8>)
    cb2e:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
    cb30:	f00e ba28 	b.w	1af84 <z_impl_k_sem_give>
    cb34:	20001e10 	.word	0x20001e10

0000cb38 <ll_pdu_rx_alloc_peek>:
{
    cb38:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    cb3a:	4b0d      	ldr	r3, [pc, #52]	; (cb70 <ll_pdu_rx_alloc_peek+0x38>)
    cb3c:	789a      	ldrb	r2, [r3, #2]
    cb3e:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    cb40:	42a2      	cmp	r2, r4
    cb42:	d809      	bhi.n	cb58 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    cb44:	1aa1      	subs	r1, r4, r2
    cb46:	b2c9      	uxtb	r1, r1
    cb48:	4288      	cmp	r0, r1
    cb4a:	d802      	bhi.n	cb52 <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    cb4c:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    cb4e:	7819      	ldrb	r1, [r3, #0]
    cb50:	d109      	bne.n	cb66 <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
    cb52:	2000      	movs	r0, #0
}
    cb54:	bc10      	pop	{r4}
    cb56:	4770      	bx	lr
		return count - first + last;
    cb58:	7859      	ldrb	r1, [r3, #1]
    cb5a:	1a89      	subs	r1, r1, r2
    cb5c:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    cb5e:	b2c9      	uxtb	r1, r1
    cb60:	4288      	cmp	r0, r1
    cb62:	d8f6      	bhi.n	cb52 <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    cb64:	7819      	ldrb	r1, [r3, #0]
}
    cb66:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    cb68:	fb02 3301 	mla	r3, r2, r1, r3
    cb6c:	6858      	ldr	r0, [r3, #4]
    cb6e:	4770      	bx	lr
    cb70:	20000400 	.word	0x20000400

0000cb74 <ll_pdu_rx_alloc>:
{
    cb74:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    cb76:	4b0a      	ldr	r3, [pc, #40]	; (cba0 <ll_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
    cb78:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    cb7a:	78da      	ldrb	r2, [r3, #3]
    cb7c:	7818      	ldrb	r0, [r3, #0]
    cb7e:	785c      	ldrb	r4, [r3, #1]
    cb80:	428a      	cmp	r2, r1
    cb82:	d00a      	beq.n	cb9a <ll_pdu_rx_alloc+0x26>
	_first += 1U;
    cb84:	1c4a      	adds	r2, r1, #1
    cb86:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    cb88:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    cb8c:	4294      	cmp	r4, r2
    cb8e:	bf08      	it	eq
    cb90:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    cb92:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    cb94:	709a      	strb	r2, [r3, #2]
}
    cb96:	bc10      	pop	{r4}
    cb98:	4770      	bx	lr
		return NULL;
    cb9a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    cb9c:	e7fb      	b.n	cb96 <ll_pdu_rx_alloc+0x22>
    cb9e:	bf00      	nop
    cba0:	20000400 	.word	0x20000400

0000cba4 <ll_tx_ack_put>:
{
    cba4:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    cba6:	4a13      	ldr	r2, [pc, #76]	; (cbf4 <ll_tx_ack_put+0x50>)
    cba8:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
    cbaa:	7855      	ldrb	r5, [r2, #1]
    cbac:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
    cbae:	1c73      	adds	r3, r6, #1
    cbb0:	b2db      	uxtb	r3, r3
		last = 0U;
    cbb2:	429d      	cmp	r5, r3
    cbb4:	bf08      	it	eq
    cbb6:	2300      	moveq	r3, #0
	if (last == first) {
    cbb8:	429c      	cmp	r4, r3
    cbba:	d00a      	beq.n	cbd2 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    cbbc:	4615      	mov	r5, r2
    cbbe:	f815 4b04 	ldrb.w	r4, [r5], #4
    cbc2:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
    cbc6:	192e      	adds	r6, r5, r4
    cbc8:	d003      	beq.n	cbd2 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
    cbca:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
    cbcc:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
    cbce:	6071      	str	r1, [r6, #4]
}
    cbd0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
    cbd2:	4a09      	ldr	r2, [pc, #36]	; (cbf8 <ll_tx_ack_put+0x54>)
    cbd4:	4909      	ldr	r1, [pc, #36]	; (cbfc <ll_tx_ack_put+0x58>)
    cbd6:	480a      	ldr	r0, [pc, #40]	; (cc00 <ll_tx_ack_put+0x5c>)
    cbd8:	f240 438b 	movw	r3, #1163	; 0x48b
    cbdc:	f011 f887 	bl	1dcee <printk>
    cbe0:	4040      	eors	r0, r0
    cbe2:	f380 8811 	msr	BASEPRI, r0
    cbe6:	f04f 0003 	mov.w	r0, #3
    cbea:	df02      	svc	2
	tx->handle = handle;
    cbec:	2300      	movs	r3, #0
    cbee:	801b      	strh	r3, [r3, #0]
    cbf0:	deff      	udf	#255	; 0xff
    cbf2:	bf00      	nop
    cbf4:	20000550 	.word	0x20000550
    cbf8:	000276d8 	.word	0x000276d8
    cbfc:	00027980 	.word	0x00027980
    cc00:	000275f0 	.word	0x000275f0

0000cc04 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    cc04:	f030 0302 	bics.w	r3, r0, #2
{
    cc08:	b510      	push	{r4, lr}
    cc0a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    cc0c:	d002      	beq.n	cc14 <ull_ticker_status_take+0x10>
    cc0e:	680b      	ldr	r3, [r1, #0]
    cc10:	2b02      	cmp	r3, #2
    cc12:	d008      	beq.n	cc26 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    cc14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cc18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cc1c:	4809      	ldr	r0, [pc, #36]	; (cc44 <ull_ticker_status_take+0x40>)
    cc1e:	f00e f9d7 	bl	1afd0 <z_impl_k_sem_take>
	return *ret_cb;
    cc22:	6820      	ldr	r0, [r4, #0]
}
    cc24:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    cc26:	4a08      	ldr	r2, [pc, #32]	; (cc48 <ull_ticker_status_take+0x44>)
    cc28:	4908      	ldr	r1, [pc, #32]	; (cc4c <ull_ticker_status_take+0x48>)
    cc2a:	4809      	ldr	r0, [pc, #36]	; (cc50 <ull_ticker_status_take+0x4c>)
    cc2c:	f240 43bf 	movw	r3, #1215	; 0x4bf
    cc30:	f011 f85d 	bl	1dcee <printk>
    cc34:	4040      	eors	r0, r0
    cc36:	f380 8811 	msr	BASEPRI, r0
    cc3a:	f04f 0003 	mov.w	r0, #3
    cc3e:	df02      	svc	2
    cc40:	e7e8      	b.n	cc14 <ull_ticker_status_take+0x10>
    cc42:	bf00      	nop
    cc44:	20001e14 	.word	0x20001e14
    cc48:	000276d8 	.word	0x000276d8
    cc4c:	00027818 	.word	0x00027818
    cc50:	000275f0 	.word	0x000275f0

0000cc54 <ull_disable_mark>:
	if (!*m) {
    cc54:	4a04      	ldr	r2, [pc, #16]	; (cc68 <ull_disable_mark+0x14>)
    cc56:	6813      	ldr	r3, [r2, #0]
    cc58:	b10b      	cbz	r3, cc5e <ull_disable_mark+0xa>
}
    cc5a:	4618      	mov	r0, r3
    cc5c:	4770      	bx	lr
		*m = param;
    cc5e:	4603      	mov	r3, r0
    cc60:	6010      	str	r0, [r2, #0]
}
    cc62:	4618      	mov	r0, r3
    cc64:	4770      	bx	lr
    cc66:	bf00      	nop
    cc68:	20001a50 	.word	0x20001a50

0000cc6c <ull_disable_unmark>:
	if (*m && *m == param) {
    cc6c:	4a04      	ldr	r2, [pc, #16]	; (cc80 <ull_disable_unmark+0x14>)
    cc6e:	6813      	ldr	r3, [r2, #0]
    cc70:	b123      	cbz	r3, cc7c <ull_disable_unmark+0x10>
    cc72:	4298      	cmp	r0, r3
		*m = NULL;
    cc74:	bf06      	itte	eq
    cc76:	2100      	moveq	r1, #0
    cc78:	6011      	streq	r1, [r2, #0]
	return NULL;
    cc7a:	2300      	movne	r3, #0
}
    cc7c:	4618      	mov	r0, r3
    cc7e:	4770      	bx	lr
    cc80:	20001a50 	.word	0x20001a50

0000cc84 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    cc84:	4b01      	ldr	r3, [pc, #4]	; (cc8c <ull_disable_mark_get+0x8>)
}
    cc86:	6818      	ldr	r0, [r3, #0]
    cc88:	4770      	bx	lr
    cc8a:	bf00      	nop
    cc8c:	20001a50 	.word	0x20001a50

0000cc90 <ull_update_mark>:
	if (!*m) {
    cc90:	4a04      	ldr	r2, [pc, #16]	; (cca4 <ull_update_mark+0x14>)
    cc92:	6813      	ldr	r3, [r2, #0]
    cc94:	b10b      	cbz	r3, cc9a <ull_update_mark+0xa>
}
    cc96:	4618      	mov	r0, r3
    cc98:	4770      	bx	lr
		*m = param;
    cc9a:	4603      	mov	r3, r0
    cc9c:	6010      	str	r0, [r2, #0]
}
    cc9e:	4618      	mov	r0, r3
    cca0:	4770      	bx	lr
    cca2:	bf00      	nop
    cca4:	20001a54 	.word	0x20001a54

0000cca8 <ull_update_unmark>:
	if (*m && *m == param) {
    cca8:	4a04      	ldr	r2, [pc, #16]	; (ccbc <ull_update_unmark+0x14>)
    ccaa:	6813      	ldr	r3, [r2, #0]
    ccac:	b123      	cbz	r3, ccb8 <ull_update_unmark+0x10>
    ccae:	4298      	cmp	r0, r3
		*m = NULL;
    ccb0:	bf06      	itte	eq
    ccb2:	2100      	moveq	r1, #0
    ccb4:	6011      	streq	r1, [r2, #0]
	return NULL;
    ccb6:	2300      	movne	r3, #0
}
    ccb8:	4618      	mov	r0, r3
    ccba:	4770      	bx	lr
    ccbc:	20001a54 	.word	0x20001a54

0000ccc0 <ull_update_mark_get>:
	return mark_get(mark_update);
    ccc0:	4b01      	ldr	r3, [pc, #4]	; (ccc8 <ull_update_mark_get+0x8>)
}
    ccc2:	6818      	ldr	r0, [r3, #0]
    ccc4:	4770      	bx	lr
    ccc6:	bf00      	nop
    ccc8:	20001a54 	.word	0x20001a54

0000cccc <ull_disable>:
{
    cccc:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
    ccce:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
    ccd0:	f115 0f10 	cmn.w	r5, #16
{
    ccd4:	b087      	sub	sp, #28
	if (!hdr) {
    ccd6:	d00b      	beq.n	ccf0 <ull_disable+0x24>
	compiler_barrier();
    ccd8:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    ccda:	2201      	movs	r2, #1
    ccdc:	4668      	mov	r0, sp
    ccde:	2100      	movs	r1, #0
    cce0:	f019 fbf7 	bl	264d2 <z_impl_k_sem_init>
    cce4:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
    cce6:	4a13      	ldr	r2, [pc, #76]	; (cd34 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    cce8:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    ccec:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    ccee:	b913      	cbnz	r3, ccf6 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
    ccf0:	2000      	movs	r0, #0
}
    ccf2:	b007      	add	sp, #28
    ccf4:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
    ccf6:	4b10      	ldr	r3, [pc, #64]	; (cd38 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    ccf8:	2200      	movs	r2, #0
    ccfa:	4611      	mov	r1, r2
    ccfc:	2003      	movs	r0, #3
	mfy.param = lll;
    ccfe:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    cd00:	f7fc f9de 	bl	90c0 <mayfly_enqueue>
	LL_ASSERT(!ret);
    cd04:	b940      	cbnz	r0, cd18 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
    cd06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cd0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cd0e:	4668      	mov	r0, sp
    cd10:	f00e f95e 	bl	1afd0 <z_impl_k_sem_take>
}
    cd14:	b007      	add	sp, #28
    cd16:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    cd18:	4a08      	ldr	r2, [pc, #32]	; (cd3c <ull_disable+0x70>)
    cd1a:	4909      	ldr	r1, [pc, #36]	; (cd40 <ull_disable+0x74>)
    cd1c:	4809      	ldr	r0, [pc, #36]	; (cd44 <ull_disable+0x78>)
    cd1e:	f240 5331 	movw	r3, #1329	; 0x531
    cd22:	f010 ffe4 	bl	1dcee <printk>
    cd26:	4040      	eors	r0, r0
    cd28:	f380 8811 	msr	BASEPRI, r0
    cd2c:	f04f 0003 	mov.w	r0, #3
    cd30:	df02      	svc	2
    cd32:	e7e8      	b.n	cd06 <ull_disable+0x3a>
    cd34:	0000bb49 	.word	0x0000bb49
    cd38:	20000584 	.word	0x20000584
    cd3c:	000276d8 	.word	0x000276d8
    cd40:	00027720 	.word	0x00027720
    cd44:	000275f0 	.word	0x000275f0

0000cd48 <ull_ticker_stop_with_mark>:
{
    cd48:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    cd4a:	4d1d      	ldr	r5, [pc, #116]	; (cdc0 <ull_ticker_stop_with_mark+0x78>)
    cd4c:	682b      	ldr	r3, [r5, #0]
{
    cd4e:	b085      	sub	sp, #20
    cd50:	460c      	mov	r4, r1
    cd52:	4616      	mov	r6, r2
	if (!*m) {
    cd54:	b323      	cbz	r3, cda0 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
    cd56:	4299      	cmp	r1, r3
    cd58:	d112      	bne.n	cd80 <ull_ticker_stop_with_mark+0x38>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    cd5a:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    cd5c:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    cd5e:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    cd60:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    cd62:	4b18      	ldr	r3, [pc, #96]	; (cdc4 <ull_ticker_stop_with_mark+0x7c>)
    cd64:	9700      	str	r7, [sp, #0]
    cd66:	2103      	movs	r1, #3
    cd68:	2000      	movs	r0, #0
    cd6a:	f7fd fc69 	bl	a640 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    cd6e:	4639      	mov	r1, r7
    cd70:	f7ff ff48 	bl	cc04 <ull_ticker_status_take>
	if (ret) {
    cd74:	b140      	cbz	r0, cd88 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
    cd76:	682b      	ldr	r3, [r5, #0]
    cd78:	b10b      	cbz	r3, cd7e <ull_ticker_stop_with_mark+0x36>
    cd7a:	429c      	cmp	r4, r3
    cd7c:	d012      	beq.n	cda4 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
    cd7e:	b1cc      	cbz	r4, cdb4 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
    cd80:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    cd84:	b005      	add	sp, #20
    cd86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
    cd88:	4630      	mov	r0, r6
    cd8a:	f7ff ff9f 	bl	cccc <ull_disable>
	if (ret) {
    cd8e:	b9a0      	cbnz	r0, cdba <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
    cd90:	682b      	ldr	r3, [r5, #0]
    cd92:	b10b      	cbz	r3, cd98 <ull_ticker_stop_with_mark+0x50>
    cd94:	429c      	cmp	r4, r3
    cd96:	d00b      	beq.n	cdb0 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
    cd98:	2c00      	cmp	r4, #0
    cd9a:	d1f1      	bne.n	cd80 <ull_ticker_stop_with_mark+0x38>
}
    cd9c:	b005      	add	sp, #20
    cd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    cda0:	6029      	str	r1, [r5, #0]
	if (mark != param) {
    cda2:	e7da      	b.n	cd5a <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    cda4:	2300      	movs	r3, #0
		return -EALREADY;
    cda6:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
    cdaa:	602b      	str	r3, [r5, #0]
}
    cdac:	b005      	add	sp, #20
    cdae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    cdb0:	6028      	str	r0, [r5, #0]
	if (mark != param) {
    cdb2:	e7e7      	b.n	cd84 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
    cdb4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cdb8:	e7e4      	b.n	cd84 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
    cdba:	f06f 000f 	mvn.w	r0, #15
    cdbe:	e7e1      	b.n	cd84 <ull_ticker_stop_with_mark+0x3c>
    cdc0:	20001a50 	.word	0x20001a50
    cdc4:	0000bb3d 	.word	0x0000bb3d

0000cdc8 <ull_pdu_rx_alloc_peek>:
{
    cdc8:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    cdca:	4b0d      	ldr	r3, [pc, #52]	; (ce00 <ull_pdu_rx_alloc_peek+0x38>)
    cdcc:	789a      	ldrb	r2, [r3, #2]
    cdce:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    cdd0:	42a2      	cmp	r2, r4
    cdd2:	d809      	bhi.n	cde8 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    cdd4:	1aa1      	subs	r1, r4, r2
    cdd6:	b2c9      	uxtb	r1, r1
    cdd8:	4288      	cmp	r0, r1
    cdda:	d802      	bhi.n	cde2 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    cddc:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    cdde:	7819      	ldrb	r1, [r3, #0]
    cde0:	d109      	bne.n	cdf6 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
    cde2:	2000      	movs	r0, #0
}
    cde4:	bc10      	pop	{r4}
    cde6:	4770      	bx	lr
		return count - first + last;
    cde8:	7859      	ldrb	r1, [r3, #1]
    cdea:	1a89      	subs	r1, r1, r2
    cdec:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    cdee:	b2c9      	uxtb	r1, r1
    cdf0:	4288      	cmp	r0, r1
    cdf2:	d8f6      	bhi.n	cde2 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    cdf4:	7819      	ldrb	r1, [r3, #0]
}
    cdf6:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    cdf8:	fb02 3301 	mla	r3, r2, r1, r3
    cdfc:	6858      	ldr	r0, [r3, #4]
    cdfe:	4770      	bx	lr
    ce00:	20000414 	.word	0x20000414

0000ce04 <ull_pdu_rx_alloc>:
{
    ce04:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
    ce06:	4b0a      	ldr	r3, [pc, #40]	; (ce30 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
    ce08:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    ce0a:	78da      	ldrb	r2, [r3, #3]
    ce0c:	7818      	ldrb	r0, [r3, #0]
    ce0e:	785c      	ldrb	r4, [r3, #1]
    ce10:	428a      	cmp	r2, r1
    ce12:	d00a      	beq.n	ce2a <ull_pdu_rx_alloc+0x26>
	_first += 1U;
    ce14:	1c4a      	adds	r2, r1, #1
    ce16:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    ce18:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    ce1c:	4294      	cmp	r4, r2
    ce1e:	bf08      	it	eq
    ce20:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    ce22:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    ce24:	709a      	strb	r2, [r3, #2]
}
    ce26:	bc10      	pop	{r4}
    ce28:	4770      	bx	lr
		return NULL;
    ce2a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
    ce2c:	e7fb      	b.n	ce26 <ull_pdu_rx_alloc+0x22>
    ce2e:	bf00      	nop
    ce30:	20000414 	.word	0x20000414

0000ce34 <ull_rx_put>:
{
    ce34:	b538      	push	{r3, r4, r5, lr}
    ce36:	460c      	mov	r4, r1
    ce38:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    ce3a:	f003 fb07 	bl	1044c <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    ce3e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    ce40:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    ce42:	4a03      	ldr	r2, [pc, #12]	; (ce50 <ull_rx_put+0x1c>)
    ce44:	4628      	mov	r0, r5
}
    ce46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    ce4a:	f7fc b8c5 	b.w	8fd8 <memq_enqueue>
    ce4e:	bf00      	nop
    ce50:	20001e0c 	.word	0x20001e0c

0000ce54 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    ce54:	2201      	movs	r2, #1
    ce56:	4b02      	ldr	r3, [pc, #8]	; (ce60 <ull_rx_sched+0xc>)
    ce58:	4611      	mov	r1, r2
    ce5a:	2000      	movs	r0, #0
    ce5c:	f7fc b930 	b.w	90c0 <mayfly_enqueue>
    ce60:	20000594 	.word	0x20000594

0000ce64 <ull_prepare_enqueue>:
{
    ce64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    ce68:	4e1e      	ldr	r6, [pc, #120]	; (cee4 <ull_prepare_enqueue+0x80>)
{
    ce6a:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    ce6e:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    ce70:	f896 c001 	ldrb.w	ip, [r6, #1]
    ce74:	78b7      	ldrb	r7, [r6, #2]
	last = last + 1;
    ce76:	1c65      	adds	r5, r4, #1
    ce78:	b2ed      	uxtb	r5, r5
		last = 0U;
    ce7a:	45ac      	cmp	ip, r5
    ce7c:	bf08      	it	eq
    ce7e:	2500      	moveq	r5, #0
	if (last == first) {
    ce80:	42af      	cmp	r7, r5
    ce82:	d02a      	beq.n	ceda <ull_prepare_enqueue+0x76>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    ce84:	46b4      	mov	ip, r6
    ce86:	f81c 7b04 	ldrb.w	r7, [ip], #4
    ce8a:	fb17 f704 	smulbb	r7, r7, r4
	if (!e) {
    ce8e:	eb1c 0407 	adds.w	r4, ip, r7
    ce92:	d022      	beq.n	ceda <ull_prepare_enqueue+0x76>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ce94:	f8d2 b000 	ldr.w	fp, [r2]
    ce98:	f8d2 a004 	ldr.w	sl, [r2, #4]
    ce9c:	f8d2 8008 	ldr.w	r8, [r2, #8]
    cea0:	f8d2 900c 	ldr.w	r9, [r2, #12]
    cea4:	f84c b007 	str.w	fp, [ip, r7]
	e->is_resume = is_resume;
    cea8:	f894 2020 	ldrb.w	r2, [r4, #32]
    ceac:	f8c4 a004 	str.w	sl, [r4, #4]
    ceb0:	f00e 0e01 	and.w	lr, lr, #1
    ceb4:	f022 0203 	bic.w	r2, r2, #3
	e->is_abort_cb = is_abort_cb;
    ceb8:	e9c4 3004 	strd	r3, r0, [r4, #16]
	e->is_resume = is_resume;
    cebc:	ea42 020e 	orr.w	r2, r2, lr
	e->prio = prio;
    cec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cec2:	f8c4 8008 	str.w	r8, [r4, #8]
    cec6:	f8c4 900c 	str.w	r9, [r4, #12]
	e->abort_cb = abort_cb;
    ceca:	61a1      	str	r1, [r4, #24]
	e->prio = prio;
    cecc:	61e3      	str	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    cece:	70f5      	strb	r5, [r6, #3]
	e->is_resume = is_resume;
    ced0:	f884 2020 	strb.w	r2, [r4, #32]
	return 0;
    ced4:	2000      	movs	r0, #0
}
    ced6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
    ceda:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    cede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cee2:	bf00      	nop
    cee4:	2000042c 	.word	0x2000042c

0000cee8 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    cee8:	4b05      	ldr	r3, [pc, #20]	; (cf00 <ull_prepare_dequeue_get+0x18>)
    ceea:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    ceec:	78d9      	ldrb	r1, [r3, #3]
    ceee:	7818      	ldrb	r0, [r3, #0]
    cef0:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
    cef2:	bf1a      	itte	ne
    cef4:	3304      	addne	r3, #4
    cef6:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
    cefa:	2000      	moveq	r0, #0
}
    cefc:	4770      	bx	lr
    cefe:	bf00      	nop
    cf00:	2000042c 	.word	0x2000042c

0000cf04 <ull_prepare_dequeue_iter>:
{
    cf04:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    cf06:	4b0c      	ldr	r3, [pc, #48]	; (cf38 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
    cf08:	7802      	ldrb	r2, [r0, #0]
    cf0a:	785c      	ldrb	r4, [r3, #1]
    cf0c:	78dd      	ldrb	r5, [r3, #3]
    cf0e:	7819      	ldrb	r1, [r3, #0]
    cf10:	4294      	cmp	r4, r2
    cf12:	bf9c      	itt	ls
    cf14:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    cf16:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    cf18:	4295      	cmp	r5, r2
    cf1a:	d00a      	beq.n	cf32 <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
    cf1c:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
    cf1e:	4d07      	ldr	r5, [pc, #28]	; (cf3c <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
    cf20:	b2db      	uxtb	r3, r3
		i = 0U;
    cf22:	429c      	cmp	r4, r3
    cf24:	bf08      	it	eq
    cf26:	2300      	moveq	r3, #0
	*idx = i;
    cf28:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    cf2a:	fb02 5001 	mla	r0, r2, r1, r5
}
    cf2e:	bc30      	pop	{r4, r5}
    cf30:	4770      	bx	lr
		return NULL;
    cf32:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    cf34:	e7fb      	b.n	cf2e <ull_prepare_dequeue_iter+0x2a>
    cf36:	bf00      	nop
    cf38:	2000042c 	.word	0x2000042c
    cf3c:	20000430 	.word	0x20000430

0000cf40 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    cf40:	4b06      	ldr	r3, [pc, #24]	; (cf5c <ull_event_done_extra_get+0x1c>)
    cf42:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
    cf44:	78d8      	ldrb	r0, [r3, #3]
    cf46:	781a      	ldrb	r2, [r3, #0]
    cf48:	4288      	cmp	r0, r1
    cf4a:	d005      	beq.n	cf58 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    cf4c:	fb01 3302 	mla	r3, r1, r2, r3
    cf50:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    cf52:	b110      	cbz	r0, cf5a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    cf54:	3020      	adds	r0, #32
    cf56:	4770      	bx	lr
		return NULL;
    cf58:	2000      	movs	r0, #0
}
    cf5a:	4770      	bx	lr
    cf5c:	200003ec 	.word	0x200003ec

0000cf60 <ull_event_done>:
{
    cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
    cf62:	4a14      	ldr	r2, [pc, #80]	; (cfb4 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
    cf64:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    cf66:	78d4      	ldrb	r4, [r2, #3]
    cf68:	7811      	ldrb	r1, [r2, #0]
    cf6a:	7855      	ldrb	r5, [r2, #1]
    cf6c:	429c      	cmp	r4, r3
    cf6e:	d01f      	beq.n	cfb0 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
    cf70:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    cf74:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    cf76:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    cf78:	b2db      	uxtb	r3, r3
		_first = 0U;
    cf7a:	429d      	cmp	r5, r3
    cf7c:	bf08      	it	eq
    cf7e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    cf80:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    cf82:	b19c      	cbz	r4, cfac <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    cf84:	2501      	movs	r5, #1
	evdone->hdr.link = NULL;
    cf86:	2600      	movs	r6, #0
	link = evdone->hdr.link;
    cf88:	6827      	ldr	r7, [r4, #0]
	evdone->param = param;
    cf8a:	61e0      	str	r0, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    cf8c:	7125      	strb	r5, [r4, #4]
	evdone->hdr.link = NULL;
    cf8e:	6026      	str	r6, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    cf90:	f003 fa5c 	bl	1044c <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    cf94:	4a08      	ldr	r2, [pc, #32]	; (cfb8 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    cf96:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    cf98:	4621      	mov	r1, r4
    cf9a:	4638      	mov	r0, r7
    cf9c:	f7fc f81c 	bl	8fd8 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    cfa0:	4b06      	ldr	r3, [pc, #24]	; (cfbc <ull_event_done+0x5c>)
    cfa2:	4630      	mov	r0, r6
    cfa4:	462a      	mov	r2, r5
    cfa6:	4629      	mov	r1, r5
    cfa8:	f7fc f88a 	bl	90c0 <mayfly_enqueue>
}
    cfac:	4620      	mov	r0, r4
    cfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
    cfb0:	2400      	movs	r4, #0
    cfb2:	e7fb      	b.n	cfac <ull_event_done+0x4c>
    cfb4:	200003ec 	.word	0x200003ec
    cfb8:	20001e0c 	.word	0x20001e0c
    cfbc:	20000594 	.word	0x20000594

0000cfc0 <ticker_cb>:
{
    cfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfc4:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    cfc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cfca:	4295      	cmp	r5, r2
{
    cfcc:	b08a      	sub	sp, #40	; 0x28
    cfce:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    cfd0:	d018      	beq.n	d004 <ticker_cb+0x44>
	return ++hdr->ref;
    cfd2:	7c1b      	ldrb	r3, [r3, #16]
    cfd4:	3301      	adds	r3, #1
    cfd6:	b2db      	uxtb	r3, r3
    cfd8:	4680      	mov	r8, r0
    cfda:	460f      	mov	r7, r1
    cfdc:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
    cfde:	2b00      	cmp	r3, #0
    cfe0:	d061      	beq.n	d0a6 <ticker_cb+0xe6>
		p.ticks_at_expire = ticks_at_expire;
    cfe2:	4e38      	ldr	r6, [pc, #224]	; (d0c4 <ticker_cb+0x104>)
		mfy.param = &p;
    cfe4:	4b38      	ldr	r3, [pc, #224]	; (d0c8 <ticker_cb+0x108>)
		p.ticks_at_expire = ticks_at_expire;
    cfe6:	f8c6 8000 	str.w	r8, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    cfea:	2200      	movs	r2, #0
	lll = &adv->lll;
    cfec:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    cff0:	4611      	mov	r1, r2
    cff2:	2001      	movs	r0, #1
		mfy.param = &p;
    cff4:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
    cff6:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
    cff8:	8135      	strh	r5, [r6, #8]
		p.param = lll;
    cffa:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    cffe:	f7fc f85f 	bl	90c0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    d002:	b938      	cbnz	r0, d014 <ticker_cb+0x54>
	if (!lll->is_hdcd)
    d004:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    d008:	f015 0501 	ands.w	r5, r5, #1
    d00c:	d014      	beq.n	d038 <ticker_cb+0x78>
}
    d00e:	b00a      	add	sp, #40	; 0x28
    d010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    d014:	4a2d      	ldr	r2, [pc, #180]	; (d0cc <ticker_cb+0x10c>)
    d016:	492e      	ldr	r1, [pc, #184]	; (d0d0 <ticker_cb+0x110>)
    d018:	482e      	ldr	r0, [pc, #184]	; (d0d4 <ticker_cb+0x114>)
    d01a:	f240 6352 	movw	r3, #1618	; 0x652
    d01e:	f010 fe66 	bl	1dcee <printk>
    d022:	4040      	eors	r0, r0
    d024:	f380 8811 	msr	BASEPRI, r0
    d028:	f04f 0003 	mov.w	r0, #3
    d02c:	df02      	svc	2
	if (!lll->is_hdcd)
    d02e:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    d032:	f015 0501 	ands.w	r5, r5, #1
    d036:	d1ea      	bne.n	d00e <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
    d038:	2104      	movs	r1, #4
    d03a:	a809      	add	r0, sp, #36	; 0x24
    d03c:	f004 ffe2 	bl	12004 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
    d040:	9809      	ldr	r0, [sp, #36]	; 0x24
    d042:	4925      	ldr	r1, [pc, #148]	; (d0d8 <ticker_cb+0x118>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d044:	4a25      	ldr	r2, [pc, #148]	; (d0dc <ticker_cb+0x11c>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d046:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    d048:	fba1 3100 	umull	r3, r1, r1, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d04c:	1aa2      	subs	r2, r4, r2
    d04e:	4c24      	ldr	r4, [pc, #144]	; (d0e0 <ticker_cb+0x120>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d050:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    d052:	1a43      	subs	r3, r0, r1
    d054:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d058:	fba4 4202 	umull	r4, r2, r4, r2
		random_delay %= ULL_ADV_RANDOM_DELAY;
    d05c:	f240 1147 	movw	r1, #327	; 0x147
    d060:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d062:	0992      	lsrs	r2, r2, #6
		random_delay %= ULL_ADV_RANDOM_DELAY;
    d064:	fb01 0313 	mls	r3, r1, r3, r0
				    (TICKER_ID_ADV_BASE +
    d068:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d06a:	491e      	ldr	r1, [pc, #120]	; (d0e4 <ticker_cb+0x124>)
    d06c:	9105      	str	r1, [sp, #20]
		random_delay += 1;
    d06e:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d070:	e9cd 5502 	strd	r5, r5, [sp, #8]
    d074:	e9cd 5500 	strd	r5, r5, [sp]
    d078:	4628      	mov	r0, r5
    d07a:	b2d2      	uxtb	r2, r2
    d07c:	2101      	movs	r1, #1
		random_delay += 1;
    d07e:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d080:	f7fd fa8e 	bl	a5a0 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d084:	f030 0302 	bics.w	r3, r0, #2
    d088:	d0c1      	beq.n	d00e <ticker_cb+0x4e>
    d08a:	4a10      	ldr	r2, [pc, #64]	; (d0cc <ticker_cb+0x10c>)
    d08c:	4916      	ldr	r1, [pc, #88]	; (d0e8 <ticker_cb+0x128>)
    d08e:	4811      	ldr	r0, [pc, #68]	; (d0d4 <ticker_cb+0x114>)
    d090:	f44f 63cd 	mov.w	r3, #1640	; 0x668
    d094:	f010 fe2b 	bl	1dcee <printk>
    d098:	4040      	eors	r0, r0
    d09a:	f380 8811 	msr	BASEPRI, r0
    d09e:	f04f 0003 	mov.w	r0, #3
    d0a2:	df02      	svc	2
}
    d0a4:	e7b3      	b.n	d00e <ticker_cb+0x4e>
		LL_ASSERT(ref);
    d0a6:	4a09      	ldr	r2, [pc, #36]	; (d0cc <ticker_cb+0x10c>)
    d0a8:	4910      	ldr	r1, [pc, #64]	; (d0ec <ticker_cb+0x12c>)
    d0aa:	480a      	ldr	r0, [pc, #40]	; (d0d4 <ticker_cb+0x114>)
    d0ac:	f240 6346 	movw	r3, #1606	; 0x646
    d0b0:	f010 fe1d 	bl	1dcee <printk>
    d0b4:	4040      	eors	r0, r0
    d0b6:	f380 8811 	msr	BASEPRI, r0
    d0ba:	f04f 0003 	mov.w	r0, #3
    d0be:	df02      	svc	2
    d0c0:	e78f      	b.n	cfe2 <ticker_cb+0x22>
    d0c2:	bf00      	nop
    d0c4:	200021bc 	.word	0x200021bc
    d0c8:	200005b4 	.word	0x200005b4
    d0cc:	00027838 	.word	0x00027838
    d0d0:	00027720 	.word	0x00027720
    d0d4:	000275f0 	.word	0x000275f0
    d0d8:	90d4f121 	.word	0x90d4f121
    d0dc:	20002158 	.word	0x20002158
    d0e0:	ba2e8ba3 	.word	0xba2e8ba3
    d0e4:	0000d229 	.word	0x0000d229
    d0e8:	0002787c 	.word	0x0002787c
    d0ec:	00027878 	.word	0x00027878

0000d0f0 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    d0f0:	2800      	cmp	r0, #0
    d0f2:	d132      	bne.n	d15a <ticker_op_stop_cb+0x6a>
{
    d0f4:	b538      	push	{r3, r4, r5, lr}
    d0f6:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
    d0f8:	4d1f      	ldr	r5, [pc, #124]	; (d178 <ticker_op_stop_cb+0x88>)
	return hdr->ref;
    d0fa:	7c09      	ldrb	r1, [r1, #16]
    d0fc:	f104 031c 	add.w	r3, r4, #28
    d100:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
    d102:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    d106:	b1e1      	cbz	r1, d142 <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
    d108:	6962      	ldr	r2, [r4, #20]
    d10a:	b16a      	cbz	r2, d128 <ticker_op_stop_cb+0x38>
    d10c:	4a1b      	ldr	r2, [pc, #108]	; (d17c <ticker_op_stop_cb+0x8c>)
    d10e:	491c      	ldr	r1, [pc, #112]	; (d180 <ticker_op_stop_cb+0x90>)
    d110:	481c      	ldr	r0, [pc, #112]	; (d184 <ticker_op_stop_cb+0x94>)
    d112:	f240 63b9 	movw	r3, #1721	; 0x6b9
    d116:	f010 fdea 	bl	1dcee <printk>
    d11a:	4040      	eors	r0, r0
    d11c:	f380 8811 	msr	BASEPRI, r0
    d120:	f04f 0003 	mov.w	r0, #3
    d124:	df02      	svc	2
    d126:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    d128:	4917      	ldr	r1, [pc, #92]	; (d188 <ticker_op_stop_cb+0x98>)
		mfy.fp = lll_disable;
    d12a:	4818      	ldr	r0, [pc, #96]	; (d18c <ticker_op_stop_cb+0x9c>)
		hdr->disabled_param = mfy.param;
    d12c:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    d12e:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    d130:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
    d132:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    d134:	4b10      	ldr	r3, [pc, #64]	; (d178 <ticker_op_stop_cb+0x88>)
    d136:	4611      	mov	r1, r2
    d138:	2002      	movs	r0, #2
    d13a:	f7fb ffc1 	bl	90c0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    d13e:	b968      	cbnz	r0, d15c <ticker_op_stop_cb+0x6c>
}
    d140:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
    d142:	4b11      	ldr	r3, [pc, #68]	; (d188 <ticker_op_stop_cb+0x98>)
    d144:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    d146:	2101      	movs	r1, #1
    d148:	462b      	mov	r3, r5
    d14a:	2002      	movs	r0, #2
    d14c:	f7fb ffb8 	bl	90c0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    d150:	2800      	cmp	r0, #0
    d152:	d0f5      	beq.n	d140 <ticker_op_stop_cb+0x50>
    d154:	f240 63c5 	movw	r3, #1733	; 0x6c5
    d158:	e002      	b.n	d160 <ticker_op_stop_cb+0x70>
    d15a:	4770      	bx	lr
		LL_ASSERT(!ret);
    d15c:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
		LL_ASSERT(!ret);
    d160:	4a06      	ldr	r2, [pc, #24]	; (d17c <ticker_op_stop_cb+0x8c>)
    d162:	490b      	ldr	r1, [pc, #44]	; (d190 <ticker_op_stop_cb+0xa0>)
    d164:	4807      	ldr	r0, [pc, #28]	; (d184 <ticker_op_stop_cb+0x94>)
    d166:	f010 fdc2 	bl	1dcee <printk>
    d16a:	4040      	eors	r0, r0
    d16c:	f380 8811 	msr	BASEPRI, r0
    d170:	f04f 0003 	mov.w	r0, #3
    d174:	df02      	svc	2
}
    d176:	bd38      	pop	{r3, r4, r5, pc}
    d178:	200005c4 	.word	0x200005c4
    d17c:	00027838 	.word	0x00027838
    d180:	00027898 	.word	0x00027898
    d184:	000275f0 	.word	0x000275f0
    d188:	0000d195 	.word	0x0000d195
    d18c:	00012071 	.word	0x00012071
    d190:	00027720 	.word	0x00027720

0000d194 <disabled_cb>:
{
    d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    d196:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    d198:	6c6f      	ldr	r7, [r5, #68]	; 0x44
{
    d19a:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    d19c:	b1d7      	cbz	r7, d1d4 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
    d19e:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->link_cc_free = NULL;
    d1a0:	2300      	movs	r3, #0
    d1a2:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
    d1a4:	b34c      	cbz	r4, d1fa <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
    d1a6:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
    d1a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    d1ac:	220f      	movs	r2, #15
	adv->node_rx_cc_free = NULL;
    d1ae:	64a9      	str	r1, [r5, #72]	; 0x48
__ssp_bos_icheck3(memset, void *, int)
    d1b0:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    d1b4:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
    d1b6:	80e3      	strh	r3, [r4, #6]
    d1b8:	221e      	movs	r2, #30
    d1ba:	f019 fc67 	bl	26a8c <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    d1be:	233c      	movs	r3, #60	; 0x3c
	rx->hdr.rx_ftr.param = param;
    d1c0:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    d1c2:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    d1c4:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
    d1c6:	4621      	mov	r1, r4
    d1c8:	f7ff fca6 	bl	cb18 <ll_rx_put>
}
    d1cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    d1d0:	f7ff bcac 	b.w	cb2c <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
    d1d4:	4a10      	ldr	r2, [pc, #64]	; (d218 <disabled_cb+0x84>)
    d1d6:	4911      	ldr	r1, [pc, #68]	; (d21c <disabled_cb+0x88>)
    d1d8:	4811      	ldr	r0, [pc, #68]	; (d220 <disabled_cb+0x8c>)
    d1da:	f240 63d2 	movw	r3, #1746	; 0x6d2
    d1de:	f010 fd86 	bl	1dcee <printk>
    d1e2:	4040      	eors	r0, r0
    d1e4:	f380 8811 	msr	BASEPRI, r0
    d1e8:	f04f 0003 	mov.w	r0, #3
    d1ec:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    d1ee:	6cac      	ldr	r4, [r5, #72]	; 0x48
    d1f0:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
    d1f2:	2300      	movs	r3, #0
    d1f4:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
    d1f6:	2c00      	cmp	r4, #0
    d1f8:	d1d5      	bne.n	d1a6 <disabled_cb+0x12>
    d1fa:	4a07      	ldr	r2, [pc, #28]	; (d218 <disabled_cb+0x84>)
    d1fc:	4909      	ldr	r1, [pc, #36]	; (d224 <disabled_cb+0x90>)
    d1fe:	4808      	ldr	r0, [pc, #32]	; (d220 <disabled_cb+0x8c>)
    d200:	f240 63d6 	movw	r3, #1750	; 0x6d6
    d204:	f010 fd73 	bl	1dcee <printk>
    d208:	4040      	eors	r0, r0
    d20a:	f380 8811 	msr	BASEPRI, r0
    d20e:	f04f 0003 	mov.w	r0, #3
    d212:	df02      	svc	2
    d214:	6cac      	ldr	r4, [r5, #72]	; 0x48
    d216:	e7c6      	b.n	d1a6 <disabled_cb+0x12>
    d218:	00027838 	.word	0x00027838
    d21c:	000278ac 	.word	0x000278ac
    d220:	000275f0 	.word	0x000275f0
    d224:	000278c0 	.word	0x000278c0

0000d228 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    d228:	b900      	cbnz	r0, d22c <ticker_op_update_cb+0x4>
    d22a:	4770      	bx	lr
{
    d22c:	b510      	push	{r4, lr}
    d22e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    d230:	f7ff fd28 	bl	cc84 <ull_disable_mark_get>
    d234:	4284      	cmp	r4, r0
    d236:	d00c      	beq.n	d252 <ticker_op_update_cb+0x2a>
    d238:	4a06      	ldr	r2, [pc, #24]	; (d254 <ticker_op_update_cb+0x2c>)
    d23a:	4907      	ldr	r1, [pc, #28]	; (d258 <ticker_op_update_cb+0x30>)
    d23c:	4807      	ldr	r0, [pc, #28]	; (d25c <ticker_op_update_cb+0x34>)
    d23e:	f240 6389 	movw	r3, #1673	; 0x689
    d242:	f010 fd54 	bl	1dcee <printk>
    d246:	4040      	eors	r0, r0
    d248:	f380 8811 	msr	BASEPRI, r0
    d24c:	f04f 0003 	mov.w	r0, #3
    d250:	df02      	svc	2
}
    d252:	bd10      	pop	{r4, pc}
    d254:	00027838 	.word	0x00027838
    d258:	000278d8 	.word	0x000278d8
    d25c:	000275f0 	.word	0x000275f0

0000d260 <ticker_stop_cb>:
{
    d260:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d262:	491a      	ldr	r1, [pc, #104]	; (d2cc <ticker_stop_cb+0x6c>)
    d264:	4a1a      	ldr	r2, [pc, #104]	; (d2d0 <ticker_stop_cb+0x70>)
    d266:	1a59      	subs	r1, r3, r1
{
    d268:	461c      	mov	r4, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d26a:	fba2 3101 	umull	r3, r1, r2, r1
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    d26e:	f411 5f7f 	tst.w	r1, #16320	; 0x3fc0
{
    d272:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d274:	ea4f 1591 	mov.w	r5, r1, lsr #6
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    d278:	d119      	bne.n	d2ae <ticker_stop_cb+0x4e>
			  TICKER_ID_ADV_BASE + handle,
    d27a:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    d27c:	4b15      	ldr	r3, [pc, #84]	; (d2d4 <ticker_stop_cb+0x74>)
    d27e:	9400      	str	r4, [sp, #0]
    d280:	b2d2      	uxtb	r2, r2
    d282:	2101      	movs	r1, #1
    d284:	2000      	movs	r0, #0
    d286:	f7fd f9db 	bl	a640 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d28a:	f030 0302 	bics.w	r3, r0, #2
    d28e:	d00c      	beq.n	d2aa <ticker_stop_cb+0x4a>
    d290:	4a11      	ldr	r2, [pc, #68]	; (d2d8 <ticker_stop_cb+0x78>)
    d292:	4912      	ldr	r1, [pc, #72]	; (d2dc <ticker_stop_cb+0x7c>)
    d294:	4812      	ldr	r0, [pc, #72]	; (d2e0 <ticker_stop_cb+0x80>)
    d296:	f240 639b 	movw	r3, #1691	; 0x69b
    d29a:	f010 fd28 	bl	1dcee <printk>
    d29e:	4040      	eors	r0, r0
    d2a0:	f380 8811 	msr	BASEPRI, r0
    d2a4:	f04f 0003 	mov.w	r0, #3
    d2a8:	df02      	svc	2
}
    d2aa:	b003      	add	sp, #12
    d2ac:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    d2ae:	4a0a      	ldr	r2, [pc, #40]	; (d2d8 <ticker_stop_cb+0x78>)
    d2b0:	490c      	ldr	r1, [pc, #48]	; (d2e4 <ticker_stop_cb+0x84>)
    d2b2:	480b      	ldr	r0, [pc, #44]	; (d2e0 <ticker_stop_cb+0x80>)
    d2b4:	f240 6396 	movw	r3, #1686	; 0x696
    d2b8:	f010 fd19 	bl	1dcee <printk>
    d2bc:	4040      	eors	r0, r0
    d2be:	f380 8811 	msr	BASEPRI, r0
    d2c2:	f04f 0003 	mov.w	r0, #3
    d2c6:	df02      	svc	2
    d2c8:	e7d7      	b.n	d27a <ticker_stop_cb+0x1a>
    d2ca:	bf00      	nop
    d2cc:	20002158 	.word	0x20002158
    d2d0:	ba2e8ba3 	.word	0xba2e8ba3
    d2d4:	0000d0f1 	.word	0x0000d0f1
    d2d8:	00027838 	.word	0x00027838
    d2dc:	0002787c 	.word	0x0002787c
    d2e0:	000275f0 	.word	0x000275f0
    d2e4:	00027908 	.word	0x00027908

0000d2e8 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    d2e8:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    d2ea:	4c1b      	ldr	r4, [pc, #108]	; (d358 <conn_release.constprop.0+0x70>)
    d2ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
	LL_ASSERT(!lll->link_tx_free);
    d2ee:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    d2f0:	b163      	cbz	r3, d30c <conn_release.constprop.0+0x24>
    d2f2:	4a1a      	ldr	r2, [pc, #104]	; (d35c <conn_release.constprop.0+0x74>)
    d2f4:	491a      	ldr	r1, [pc, #104]	; (d360 <conn_release.constprop.0+0x78>)
    d2f6:	481b      	ldr	r0, [pc, #108]	; (d364 <conn_release.constprop.0+0x7c>)
    d2f8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    d2fc:	f010 fcf7 	bl	1dcee <printk>
    d300:	4040      	eors	r0, r0
    d302:	f380 8811 	msr	BASEPRI, r0
    d306:	f04f 0003 	mov.w	r0, #3
    d30a:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    d30c:	f105 0150 	add.w	r1, r5, #80	; 0x50
    d310:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    d314:	f7fb fe56 	bl	8fc4 <memq_deinit>
	LL_ASSERT(link);
    d318:	4606      	mov	r6, r0
    d31a:	b170      	cbz	r0, d33a <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
    d31c:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    d31e:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
    d320:	f000 fde0 	bl	dee4 <ll_conn_release>
	adv->lll.conn = NULL;
    d324:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    d326:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
    d328:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
    d32a:	f7ff fbef 	bl	cb0c <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    d32e:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->node_rx_cc_free = NULL;
    d330:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
    d332:	f7ff fbdf 	bl	caf4 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    d336:	6465      	str	r5, [r4, #68]	; 0x44
}
    d338:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    d33a:	4a08      	ldr	r2, [pc, #32]	; (d35c <conn_release.constprop.0+0x74>)
    d33c:	490a      	ldr	r1, [pc, #40]	; (d368 <conn_release.constprop.0+0x80>)
    d33e:	4809      	ldr	r0, [pc, #36]	; (d364 <conn_release.constprop.0+0x7c>)
    d340:	f240 7302 	movw	r3, #1794	; 0x702
    d344:	f010 fcd3 	bl	1dcee <printk>
    d348:	4040      	eors	r0, r0
    d34a:	f380 8811 	msr	BASEPRI, r0
    d34e:	f04f 0003 	mov.w	r0, #3
    d352:	df02      	svc	2
    d354:	e7e2      	b.n	d31c <conn_release.constprop.0+0x34>
    d356:	bf00      	nop
    d358:	20002158 	.word	0x20002158
    d35c:	00027838 	.word	0x00027838
    d360:	00027914 	.word	0x00027914
    d364:	000275f0 	.word	0x000275f0
    d368:	0002798c 	.word	0x0002798c

0000d36c <ll_adv_params_set>:
{
    d36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    d370:	4d4a      	ldr	r5, [pc, #296]	; (d49c <ll_adv_params_set+0x130>)
	if (!adv || adv->is_enabled) {
    d372:	4c4b      	ldr	r4, [pc, #300]	; (d4a0 <ll_adv_params_set+0x134>)
{
    d374:	4686      	mov	lr, r0
    d376:	460e      	mov	r6, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    d378:	e895 0003 	ldmia.w	r5, {r0, r1}
{
    d37c:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
    d37e:	f894 804e 	ldrb.w	r8, [r4, #78]	; 0x4e
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    d382:	9000      	str	r0, [sp, #0]
	if (!adv || adv->is_enabled) {
    d384:	f018 0001 	ands.w	r0, r8, #1
{
    d388:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    d38a:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
    d38e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    d392:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    d396:	d17c      	bne.n	d492 <ll_adv_params_set+0x126>
    d398:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
	adv->lll.chan_map = chan_map;
    d39c:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
    d3a0:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	pdu->type = pdu_adv_type[adv_type];
    d3a4:	a902      	add	r1, sp, #8
	adv->lll.chan_map = chan_map;
    d3a6:	f00c 0c07 	and.w	ip, ip, #7
		adv->interval = 0;
    d3aa:	2e01      	cmp	r6, #1
	pdu->type = pdu_adv_type[adv_type];
    d3ac:	4431      	add	r1, r6
	adv->lll.chan_map = chan_map;
    d3ae:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    d3b2:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
	pdu->type = pdu_adv_type[adv_type];
    d3b6:	f811 9c08 	ldrb.w	r9, [r1, #-8]
    d3ba:	7831      	ldrb	r1, [r6, #0]
	adv->lll.chan_map = chan_map;
    d3bc:	f005 0503 	and.w	r5, r5, #3
    d3c0:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
    d3c4:	f8df c0dc 	ldr.w	ip, [pc, #220]	; d4a4 <ll_adv_params_set+0x138>
    d3c8:	ea08 080c 	and.w	r8, r8, ip
	adv->own_addr_type = own_addr_type;
    d3cc:	f894 c04e 	ldrb.w	ip, [r4, #78]	; 0x4e
		adv->interval = 0;
    d3d0:	bf08      	it	eq
    d3d2:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
    d3d6:	f021 011f 	bic.w	r1, r1, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    d3da:	f019 0f0e 	tst.w	r9, #14
	pdu->type = pdu_adv_type[adv_type];
    d3de:	f009 090f 	and.w	r9, r9, #15
    d3e2:	f8a4 e04c 	strh.w	lr, [r4, #76]	; 0x4c
	adv->own_addr_type = own_addr_type;
    d3e6:	f362 0c42 	bfi	ip, r2, #1, #2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    d3ea:	bf0c      	ite	eq
    d3ec:	f04f 0e01 	moveq.w	lr, #1
    d3f0:	f04f 0e00 	movne.w	lr, #0
    d3f4:	ea49 0101 	orr.w	r1, r9, r1
	adv->lll.chan_map = chan_map;
    d3f8:	ea45 0508 	orr.w	r5, r5, r8
    d3fc:	f36e 1145 	bfi	r1, lr, #5, #1
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    d400:	f01c 0f04 	tst.w	ip, #4
	adv->lll.chan_map = chan_map;
    d404:	8525      	strh	r5, [r4, #40]	; 0x28
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    d406:	7031      	strb	r1, [r6, #0]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    d408:	fa5f f58c 	uxtb.w	r5, ip
	adv->own_addr_type = own_addr_type;
    d40c:	f884 c04e 	strb.w	ip, [r4, #78]	; 0x4e
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    d410:	d00a      	beq.n	d428 <ll_adv_params_set+0xbc>
		adv->id_addr_type = direct_addr_type;
    d412:	4629      	mov	r1, r5
    d414:	f363 01c3 	bfi	r1, r3, #3, #1
    d418:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
    d41c:	6839      	ldr	r1, [r7, #0]
    d41e:	f8c4 104f 	str.w	r1, [r4, #79]	; 0x4f
    d422:	88b9      	ldrh	r1, [r7, #4]
    d424:	f8a4 1053 	strh.w	r1, [r4, #83]	; 0x53
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    d428:	7831      	ldrb	r1, [r6, #0]
    d42a:	f001 050f 	and.w	r5, r1, #15
    d42e:	2d01      	cmp	r5, #1
    d430:	f002 0c01 	and.w	ip, r2, #1
    d434:	d01f      	beq.n	d476 <ll_adv_params_set+0x10a>
	} else if (pdu->len == 0) {
    d436:	7873      	ldrb	r3, [r6, #1]
		pdu->tx_addr = own_addr_type & 0x1;
    d438:	f36c 1186 	bfi	r1, ip, #6, #1
	} else if (pdu->len == 0) {
    d43c:	b1ab      	cbz	r3, d46a <ll_adv_params_set+0xfe>
		pdu->rx_addr = 0;
    d43e:	f36f 11c7 	bfc	r1, #7, #1
    d442:	7031      	strb	r1, [r6, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    d444:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    d448:	eb04 0483 	add.w	r4, r4, r3, lsl #2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    d44c:	0192      	lsls	r2, r2, #6
    d44e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d450:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (pdu->len == 0) {
    d454:	7859      	ldrb	r1, [r3, #1]
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    d456:	f042 0204 	orr.w	r2, r2, #4
    d45a:	701a      	strb	r2, [r3, #0]
	if (pdu->len == 0) {
    d45c:	b911      	cbnz	r1, d464 <ll_adv_params_set+0xf8>
		pdu->len = BDADDR_SIZE;
    d45e:	2206      	movs	r2, #6
	return 0;
    d460:	4608      	mov	r0, r1
		pdu->len = BDADDR_SIZE;
    d462:	705a      	strb	r2, [r3, #1]
}
    d464:	b003      	add	sp, #12
    d466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = 0;
    d46a:	f363 11c7 	bfi	r1, r3, #7, #1
		pdu->len = BDADDR_SIZE;
    d46e:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
    d470:	7031      	strb	r1, [r6, #0]
		pdu->len = BDADDR_SIZE;
    d472:	7073      	strb	r3, [r6, #1]
    d474:	e7e6      	b.n	d444 <ll_adv_params_set+0xd8>
		pdu->rx_addr = direct_addr_type;
    d476:	4635      	mov	r5, r6
		pdu->tx_addr = own_addr_type & 0x1;
    d478:	f36c 1186 	bfi	r1, ip, #6, #1
		pdu->rx_addr = direct_addr_type;
    d47c:	f363 11c7 	bfi	r1, r3, #7, #1
    d480:	f805 1b08 	strb.w	r1, [r5], #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d484:	683b      	ldr	r3, [r7, #0]
    d486:	60b3      	str	r3, [r6, #8]
    d488:	88bb      	ldrh	r3, [r7, #4]
    d48a:	80ab      	strh	r3, [r5, #4]
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    d48c:	230c      	movs	r3, #12
    d48e:	7073      	strb	r3, [r6, #1]
    d490:	e7d8      	b.n	d444 <ll_adv_params_set+0xd8>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d492:	200c      	movs	r0, #12
}
    d494:	b003      	add	sp, #12
    d496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d49a:	bf00      	nop
    d49c:	000271b0 	.word	0x000271b0
    d4a0:	20002158 	.word	0x20002158
    d4a4:	fffffcf1 	.word	0xfffffcf1

0000d4a8 <ull_adv_init>:
{
    d4a8:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    d4aa:	4c05      	ldr	r4, [pc, #20]	; (d4c0 <ull_adv_init+0x18>)
    d4ac:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d4b0:	f005 f8c4 	bl	1263c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    d4b4:	f104 0038 	add.w	r0, r4, #56	; 0x38
    d4b8:	f005 f8c0 	bl	1263c <lll_adv_data_init>
}
    d4bc:	2000      	movs	r0, #0
    d4be:	bd10      	pop	{r4, pc}
    d4c0:	20002158 	.word	0x20002158

0000d4c4 <ull_adv_reset>:
{
    d4c4:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
    d4c6:	4c46      	ldr	r4, [pc, #280]	; (d5e0 <ull_adv_reset+0x11c>)
    d4c8:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    d4cc:	07da      	lsls	r2, r3, #31
{
    d4ce:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
    d4d0:	d544      	bpl.n	d55c <ull_adv_reset+0x98>
	mark = ull_disable_mark(adv);
    d4d2:	4620      	mov	r0, r4
    d4d4:	f7ff fbbe 	bl	cc54 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    d4d8:	4284      	cmp	r4, r0
    d4da:	d00c      	beq.n	d4f6 <ull_adv_reset+0x32>
    d4dc:	4a41      	ldr	r2, [pc, #260]	; (d5e4 <ull_adv_reset+0x120>)
    d4de:	4942      	ldr	r1, [pc, #264]	; (d5e8 <ull_adv_reset+0x124>)
    d4e0:	4842      	ldr	r0, [pc, #264]	; (d5ec <ull_adv_reset+0x128>)
    d4e2:	f240 7355 	movw	r3, #1877	; 0x755
    d4e6:	f010 fc02 	bl	1dcee <printk>
    d4ea:	4040      	eors	r0, r0
    d4ec:	f380 8811 	msr	BASEPRI, r0
    d4f0:	f04f 0003 	mov.w	r0, #3
    d4f4:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    d4f6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    d4fa:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    d4fc:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    d4fe:	d430      	bmi.n	d562 <ull_adv_reset+0x9e>
	ret_cb = TICKER_STATUS_BUSY;
    d500:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    d502:	2103      	movs	r1, #3
    d504:	4b3a      	ldr	r3, [pc, #232]	; (d5f0 <ull_adv_reset+0x12c>)
    d506:	9500      	str	r5, [sp, #0]
    d508:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    d50a:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    d50c:	f7fd f898 	bl	a640 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    d510:	4629      	mov	r1, r5
    d512:	f7ff fb77 	bl	cc04 <ull_ticker_status_take>
	if (ret) {
    d516:	2800      	cmp	r0, #0
    d518:	d14c      	bne.n	d5b4 <ull_adv_reset+0xf0>
	ret = ull_disable(&adv->lll);
    d51a:	4836      	ldr	r0, [pc, #216]	; (d5f4 <ull_adv_reset+0x130>)
    d51c:	f7ff fbd6 	bl	cccc <ull_disable>
	LL_ASSERT(!ret);
    d520:	2800      	cmp	r0, #0
    d522:	d134      	bne.n	d58e <ull_adv_reset+0xca>
	mark = ull_disable_unmark(adv);
    d524:	482e      	ldr	r0, [pc, #184]	; (d5e0 <ull_adv_reset+0x11c>)
    d526:	f7ff fba1 	bl	cc6c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    d52a:	4284      	cmp	r4, r0
    d52c:	d00c      	beq.n	d548 <ull_adv_reset+0x84>
    d52e:	4a2d      	ldr	r2, [pc, #180]	; (d5e4 <ull_adv_reset+0x120>)
    d530:	492d      	ldr	r1, [pc, #180]	; (d5e8 <ull_adv_reset+0x124>)
    d532:	482e      	ldr	r0, [pc, #184]	; (d5ec <ull_adv_reset+0x128>)
    d534:	f240 7377 	movw	r3, #1911	; 0x777
    d538:	f010 fbd9 	bl	1dcee <printk>
    d53c:	4040      	eors	r0, r0
    d53e:	f380 8811 	msr	BASEPRI, r0
    d542:	f04f 0003 	mov.w	r0, #3
    d546:	df02      	svc	2
	if (adv->lll.conn) {
    d548:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d54a:	b10b      	cbz	r3, d550 <ull_adv_reset+0x8c>
		conn_release(adv);
    d54c:	f7ff fecc 	bl	d2e8 <conn_release.constprop.0>
	adv->is_enabled = 0U;
    d550:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    d554:	f36f 0300 	bfc	r3, #0, #1
    d558:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
    d55c:	2000      	movs	r0, #0
    d55e:	b005      	add	sp, #20
    d560:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
    d562:	2202      	movs	r2, #2
    d564:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    d566:	2103      	movs	r1, #3
    d568:	4b21      	ldr	r3, [pc, #132]	; (d5f0 <ull_adv_reset+0x12c>)
    d56a:	9500      	str	r5, [sp, #0]
    d56c:	2201      	movs	r2, #1
    d56e:	2000      	movs	r0, #0
    d570:	f7fd f866 	bl	a640 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    d574:	4629      	mov	r1, r5
    d576:	f7ff fb45 	bl	cc04 <ull_ticker_status_take>
		if (ret) {
    d57a:	2800      	cmp	r0, #0
    d57c:	d0c0      	beq.n	d500 <ull_adv_reset+0x3c>
			mark = ull_disable_unmark(adv);
    d57e:	4818      	ldr	r0, [pc, #96]	; (d5e0 <ull_adv_reset+0x11c>)
    d580:	f7ff fb74 	bl	cc6c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    d584:	4284      	cmp	r4, r0
    d586:	d0e9      	beq.n	d55c <ull_adv_reset+0x98>
    d588:	f44f 63ec 	mov.w	r3, #1888	; 0x760
    d58c:	e019      	b.n	d5c2 <ull_adv_reset+0xfe>
	LL_ASSERT(!ret);
    d58e:	4a15      	ldr	r2, [pc, #84]	; (d5e4 <ull_adv_reset+0x120>)
    d590:	4919      	ldr	r1, [pc, #100]	; (d5f8 <ull_adv_reset+0x134>)
    d592:	4816      	ldr	r0, [pc, #88]	; (d5ec <ull_adv_reset+0x128>)
    d594:	f240 7374 	movw	r3, #1908	; 0x774
    d598:	f010 fba9 	bl	1dcee <printk>
    d59c:	4040      	eors	r0, r0
    d59e:	f380 8811 	msr	BASEPRI, r0
    d5a2:	f04f 0003 	mov.w	r0, #3
    d5a6:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    d5a8:	480d      	ldr	r0, [pc, #52]	; (d5e0 <ull_adv_reset+0x11c>)
    d5aa:	f7ff fb5f 	bl	cc6c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    d5ae:	4284      	cmp	r4, r0
    d5b0:	d1bd      	bne.n	d52e <ull_adv_reset+0x6a>
    d5b2:	e7c9      	b.n	d548 <ull_adv_reset+0x84>
		mark = ull_disable_unmark(adv);
    d5b4:	480a      	ldr	r0, [pc, #40]	; (d5e0 <ull_adv_reset+0x11c>)
    d5b6:	f7ff fb59 	bl	cc6c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    d5ba:	4284      	cmp	r4, r0
    d5bc:	d0ce      	beq.n	d55c <ull_adv_reset+0x98>
    d5be:	f240 736e 	movw	r3, #1902	; 0x76e
    d5c2:	4a08      	ldr	r2, [pc, #32]	; (d5e4 <ull_adv_reset+0x120>)
    d5c4:	4908      	ldr	r1, [pc, #32]	; (d5e8 <ull_adv_reset+0x124>)
    d5c6:	4809      	ldr	r0, [pc, #36]	; (d5ec <ull_adv_reset+0x128>)
    d5c8:	f010 fb91 	bl	1dcee <printk>
    d5cc:	4040      	eors	r0, r0
    d5ce:	f380 8811 	msr	BASEPRI, r0
    d5d2:	f04f 0003 	mov.w	r0, #3
    d5d6:	df02      	svc	2
}
    d5d8:	2000      	movs	r0, #0
    d5da:	b005      	add	sp, #20
    d5dc:	bd30      	pop	{r4, r5, pc}
    d5de:	bf00      	nop
    d5e0:	20002158 	.word	0x20002158
    d5e4:	00027838 	.word	0x00027838
    d5e8:	00027928 	.word	0x00027928
    d5ec:	000275f0 	.word	0x000275f0
    d5f0:	0000bb3d 	.word	0x0000bb3d
    d5f4:	20002174 	.word	0x20002174
    d5f8:	00027720 	.word	0x00027720

0000d5fc <ull_adv_reset_finalize>:
{
    d5fc:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
    d5fe:	4c09      	ldr	r4, [pc, #36]	; (d624 <ull_adv_reset_finalize+0x28>)
    d600:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    d604:	4628      	mov	r0, r5
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
    d606:	3438      	adds	r4, #56	; 0x38
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
    d608:	f005 f826 	bl	12658 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
    d60c:	4620      	mov	r0, r4
    d60e:	f005 f823 	bl	12658 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    d612:	4628      	mov	r0, r5
    d614:	f005 f812 	bl	1263c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    d618:	4620      	mov	r0, r4
    d61a:	f005 f80f 	bl	1263c <lll_adv_data_init>
}
    d61e:	2000      	movs	r0, #0
    d620:	bd38      	pop	{r3, r4, r5, pc}
    d622:	bf00      	nop
    d624:	20002158 	.word	0x20002158

0000d628 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d628:	4a03      	ldr	r2, [pc, #12]	; (d638 <ull_adv_handle_get+0x10>)
    d62a:	4b04      	ldr	r3, [pc, #16]	; (d63c <ull_adv_handle_get+0x14>)
    d62c:	1a80      	subs	r0, r0, r2
    d62e:	fba3 3000 	umull	r3, r0, r3, r0
}
    d632:	f3c0 108f 	ubfx	r0, r0, #6, #16
    d636:	4770      	bx	lr
    d638:	20002158 	.word	0x20002158
    d63c:	ba2e8ba3 	.word	0xba2e8ba3

0000d640 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d640:	4a04      	ldr	r2, [pc, #16]	; (d654 <ull_adv_lll_handle_get+0x14>)
    d642:	6800      	ldr	r0, [r0, #0]
    d644:	4b04      	ldr	r3, [pc, #16]	; (d658 <ull_adv_lll_handle_get+0x18>)
    d646:	1a80      	subs	r0, r0, r2
    d648:	fba3 3000 	umull	r3, r0, r3, r0
}
    d64c:	f3c0 108f 	ubfx	r0, r0, #6, #16
    d650:	4770      	bx	lr
    d652:	bf00      	nop
    d654:	20002158 	.word	0x20002158
    d658:	ba2e8ba3 	.word	0xba2e8ba3

0000d65c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    d65c:	b938      	cbnz	r0, d66e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    d65e:	4805      	ldr	r0, [pc, #20]	; (d674 <ull_adv_is_enabled_get+0x18>)
    d660:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
    d664:	f013 0f01 	tst.w	r3, #1
    d668:	bf08      	it	eq
    d66a:	2000      	moveq	r0, #0
    d66c:	4770      	bx	lr
		return NULL;
    d66e:	2000      	movs	r0, #0
}
    d670:	4770      	bx	lr
    d672:	bf00      	nop
    d674:	20002158 	.word	0x20002158

0000d678 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    d678:	b928      	cbnz	r0, d686 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    d67a:	4b04      	ldr	r3, [pc, #16]	; (d68c <ull_adv_is_enabled+0x14>)
    d67c:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
    d680:	f000 0001 	and.w	r0, r0, #1
    d684:	4770      	bx	lr
    d686:	2000      	movs	r0, #0
}
    d688:	4770      	bx	lr
    d68a:	bf00      	nop
    d68c:	20002158 	.word	0x20002158

0000d690 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    d690:	b950      	cbnz	r0, d6a8 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
    d692:	4b06      	ldr	r3, [pc, #24]	; (d6ac <ull_adv_filter_pol_get+0x1c>)
    d694:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
    d698:	f010 0001 	ands.w	r0, r0, #1
    d69c:	d005      	beq.n	d6aa <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
    d69e:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    d6a2:	f000 0003 	and.w	r0, r0, #3
    d6a6:	4770      	bx	lr
		return 0;
    d6a8:	2000      	movs	r0, #0
}
    d6aa:	4770      	bx	lr
    d6ac:	20002158 	.word	0x20002158

0000d6b0 <ull_adv_data_set>:
{
    d6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    d6b4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    d6b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d6bc:	b082      	sub	sp, #8
    d6be:	6b1e      	ldr	r6, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
    d6c0:	7833      	ldrb	r3, [r6, #0]
    d6c2:	f003 030f 	and.w	r3, r3, #15
    d6c6:	2b01      	cmp	r3, #1
    d6c8:	d034      	beq.n	d734 <ull_adv_data_set+0x84>
	if (len > PDU_AC_DATA_SIZE_MAX) {
    d6ca:	291f      	cmp	r1, #31
    d6cc:	460d      	mov	r5, r1
    d6ce:	d82d      	bhi.n	d72c <ull_adv_data_set+0x7c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
    d6d0:	4604      	mov	r4, r0
    d6d2:	f10d 0107 	add.w	r1, sp, #7
    d6d6:	302c      	adds	r0, #44	; 0x2c
    d6d8:	4690      	mov	r8, r2
    d6da:	f004 ffc3 	bl	12664 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
    d6de:	7832      	ldrb	r2, [r6, #0]
    d6e0:	f3c2 1140 	ubfx	r1, r2, #5, #1
	pdu->type = prev->type;
    d6e4:	f3c2 0303 	ubfx	r3, r2, #0, #4
    d6e8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
	pdu->tx_addr = prev->tx_addr;
    d6ec:	f3c2 1180 	ubfx	r1, r2, #6, #1
	pdu->type = prev->type;
    d6f0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    d6f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
    d6f8:	4601      	mov	r1, r0
    d6fa:	4313      	orrs	r3, r2
    d6fc:	f801 3b02 	strb.w	r3, [r1], #2
    d700:	f856 3f02 	ldr.w	r3, [r6, #2]!
    d704:	f8c0 3002 	str.w	r3, [r0, #2]
    d708:	88b3      	ldrh	r3, [r6, #4]
    d70a:	808b      	strh	r3, [r1, #4]
    d70c:	4607      	mov	r7, r0
    d70e:	462a      	mov	r2, r5
    d710:	4641      	mov	r1, r8
    d712:	3008      	adds	r0, #8
    d714:	f019 f999 	bl	26a4a <memcpy>
	pdu->last = idx;
    d718:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
    d71c:	3506      	adds	r5, #6
	return 0;
    d71e:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
    d720:	707d      	strb	r5, [r7, #1]
    d722:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
    d726:	b002      	add	sp, #8
    d728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_INVALID_PARAM;
    d72c:	2012      	movs	r0, #18
}
    d72e:	b002      	add	sp, #8
    d730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
    d734:	2000      	movs	r0, #0
}
    d736:	b002      	add	sp, #8
    d738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d73c <ll_adv_data_set>:
{
    d73c:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    d73e:	4601      	mov	r1, r0
    d740:	4801      	ldr	r0, [pc, #4]	; (d748 <ll_adv_data_set+0xc>)
    d742:	f7ff bfb5 	b.w	d6b0 <ull_adv_data_set>
    d746:	bf00      	nop
    d748:	20002158 	.word	0x20002158

0000d74c <ull_scan_rsp_set>:
{
    d74c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    d74e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    d752:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d756:	b083      	sub	sp, #12
    d758:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    d75a:	460e      	mov	r6, r1
    d75c:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
    d75e:	f10d 0107 	add.w	r1, sp, #7
    d762:	3038      	adds	r0, #56	; 0x38
    d764:	4617      	mov	r7, r2
    d766:	f004 ff7d 	bl	12664 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
    d76a:	782b      	ldrb	r3, [r5, #0]
    d76c:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    d770:	019b      	lsls	r3, r3, #6
	pdu->len = BDADDR_SIZE + len;
    d772:	1db2      	adds	r2, r6, #6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    d774:	f043 0304 	orr.w	r3, r3, #4
	pdu->len = BDADDR_SIZE + len;
    d778:	7042      	strb	r2, [r0, #1]
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    d77a:	7003      	strb	r3, [r0, #0]
    d77c:	f855 3f02 	ldr.w	r3, [r5, #2]!
    d780:	f8c0 3002 	str.w	r3, [r0, #2]
    d784:	88ab      	ldrh	r3, [r5, #4]
    d786:	80c3      	strh	r3, [r0, #6]
    d788:	4639      	mov	r1, r7
    d78a:	4632      	mov	r2, r6
    d78c:	3008      	adds	r0, #8
    d78e:	f019 f95c 	bl	26a4a <memcpy>
	pdu->last = idx;
    d792:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d796:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
    d79a:	2000      	movs	r0, #0
    d79c:	b003      	add	sp, #12
    d79e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d7a0 <ll_adv_scan_rsp_set>:
{
    d7a0:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
    d7a2:	4601      	mov	r1, r0
    d7a4:	4801      	ldr	r0, [pc, #4]	; (d7ac <ll_adv_scan_rsp_set+0xc>)
    d7a6:	f7ff bfd1 	b.w	d74c <ull_scan_rsp_set>
    d7aa:	bf00      	nop
    d7ac:	20002158 	.word	0x20002158

0000d7b0 <tx_ull_dequeue>:
{
    d7b0:	b410      	push	{r4}
    d7b2:	e9d0 246c 	ldrd	r2, r4, [r0, #432]	; 0x1b0
    d7b6:	4603      	mov	r3, r0
    d7b8:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    d7ba:	b164      	cbz	r4, d7d6 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
    d7bc:	4294      	cmp	r4, r2
    d7be:	d027      	beq.n	d810 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
    d7c0:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    d7c4:	4291      	cmp	r1, r2
    d7c6:	d018      	beq.n	d7fa <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
    d7c8:	6812      	ldr	r2, [r2, #0]
    d7ca:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		tx->next = NULL;
    d7ce:	2300      	movs	r3, #0
}
    d7d0:	bc10      	pop	{r4}
		tx->next = NULL;
    d7d2:	6003      	str	r3, [r0, #0]
}
    d7d4:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    d7d6:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    d7da:	4291      	cmp	r1, r2
    d7dc:	d023      	beq.n	d826 <tx_ull_dequeue+0x76>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d7de:	7911      	ldrb	r1, [r2, #4]
    d7e0:	f001 0103 	and.w	r1, r1, #3
    d7e4:	2903      	cmp	r1, #3
    d7e6:	d00d      	beq.n	d804 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
    d7e8:	6812      	ldr	r2, [r2, #0]
    d7ea:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			conn->tx_ctrl = NULL;
    d7ee:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    d7f0:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
}
    d7f4:	bc10      	pop	{r4}
		tx->next = tx;
    d7f6:	6000      	str	r0, [r0, #0]
}
    d7f8:	4770      	bx	lr
    d7fa:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
    d7fc:	6809      	ldr	r1, [r1, #0]
    d7fe:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    d802:	e7e1      	b.n	d7c8 <tx_ull_dequeue+0x18>
		    ((pdu_data_tx->llctrl.opcode !=
    d804:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d806:	2903      	cmp	r1, #3
    d808:	d0de      	beq.n	d7c8 <tx_ull_dequeue+0x18>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    d80a:	290a      	cmp	r1, #10
    d80c:	d1ec      	bne.n	d7e8 <tx_ull_dequeue+0x38>
    d80e:	e7db      	b.n	d7c8 <tx_ull_dequeue+0x18>
    d810:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
		conn->tx_head = conn->tx_head->next;
    d814:	6812      	ldr	r2, [r2, #0]
    d816:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    d81a:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
    d81c:	bf18      	it	ne
    d81e:	f8c3 21b4 	strne.w	r2, [r3, #436]	; 0x1b4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    d822:	d1e7      	bne.n	d7f4 <tx_ull_dequeue+0x44>
    d824:	e7e3      	b.n	d7ee <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
    d826:	2a00      	cmp	r2, #0
    d828:	d1e8      	bne.n	d7fc <tx_ull_dequeue+0x4c>
    d82a:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
    d82e:	4614      	mov	r4, r2
    d830:	e7f0      	b.n	d814 <tx_ull_dequeue+0x64>
    d832:	bf00      	nop

0000d834 <init_reset>:
{
    d834:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    d836:	4813      	ldr	r0, [pc, #76]	; (d884 <init_reset+0x50>)
    d838:	4b13      	ldr	r3, [pc, #76]	; (d888 <init_reset+0x54>)
    d83a:	2201      	movs	r2, #1
    d83c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    d840:	f7fb fb48 	bl	8ed4 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
    d844:	4b11      	ldr	r3, [pc, #68]	; (d88c <init_reset+0x58>)
    d846:	2203      	movs	r2, #3
    d848:	1d18      	adds	r0, r3, #4
    d84a:	2124      	movs	r1, #36	; 0x24
    d84c:	f7fb fb42 	bl	8ed4 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    d850:	4b0f      	ldr	r3, [pc, #60]	; (d890 <init_reset+0x5c>)
    d852:	2204      	movs	r2, #4
    d854:	1898      	adds	r0, r3, r2
    d856:	2120      	movs	r1, #32
    d858:	f7fb fb3c 	bl	8ed4 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    d85c:	4b0d      	ldr	r3, [pc, #52]	; (d894 <init_reset+0x60>)
    d85e:	2207      	movs	r2, #7
    d860:	1d18      	adds	r0, r3, #4
    d862:	2108      	movs	r1, #8
    d864:	f7fb fb36 	bl	8ed4 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    d868:	4b0b      	ldr	r3, [pc, #44]	; (d898 <init_reset+0x64>)
	default_phy_tx |= BIT(1);
    d86a:	490c      	ldr	r1, [pc, #48]	; (d89c <init_reset+0x68>)
	default_phy_rx |= BIT(1);
    d86c:	4a0c      	ldr	r2, [pc, #48]	; (d8a0 <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    d86e:	480d      	ldr	r0, [pc, #52]	; (d8a4 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    d870:	251b      	movs	r5, #27
    d872:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= BIT(1);
    d874:	2303      	movs	r3, #3
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    d876:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= BIT(1);
    d87a:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= BIT(1);
    d87c:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    d87e:	8004      	strh	r4, [r0, #0]
}
    d880:	2000      	movs	r0, #0
    d882:	bd38      	pop	{r3, r4, r5, pc}
    d884:	200021d0 	.word	0x200021d0
    d888:	200021cc 	.word	0x200021cc
    d88c:	200023ac 	.word	0x200023ac
    d890:	2000241c 	.word	0x2000241c
    d894:	200024a0 	.word	0x200024a0
    d898:	20002f2e 	.word	0x20002f2e
    d89c:	20002f7d 	.word	0x20002f7d
    d8a0:	20002f7c 	.word	0x20002f7c
    d8a4:	20002f30 	.word	0x20002f30

0000d8a8 <ctrl_tx_pause_enqueue>:
{
    d8a8:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
    d8aa:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
{
    d8ae:	4604      	mov	r4, r0
    d8b0:	460d      	mov	r5, r1
	if (
    d8b2:	b11b      	cbz	r3, d8bc <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
    d8b4:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
	    conn->tx_head &&
    d8b8:	0788      	lsls	r0, r1, #30
    d8ba:	d50d      	bpl.n	d8d8 <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
    d8bc:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    d8c0:	b301      	cbz	r1, d904 <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
    d8c2:	bb4a      	cbnz	r2, d918 <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
    d8c4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    d8c8:	681a      	ldr	r2, [r3, #0]
    d8ca:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    d8cc:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    d8ce:	682b      	ldr	r3, [r5, #0]
    d8d0:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    d8d4:	b19b      	cbz	r3, d8fe <ctrl_tx_pause_enqueue+0x56>
}
    d8d6:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
    d8d8:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
    d8dc:	07c9      	lsls	r1, r1, #31
    d8de:	d4ed      	bmi.n	d8bc <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    d8e0:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
    d8e4:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
    d8e6:	bf04      	itt	eq
    d8e8:	6819      	ldreq	r1, [r3, #0]
    d8ea:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    d8ee:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    d8f2:	b1f9      	cbz	r1, d934 <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
    d8f4:	2a00      	cmp	r2, #0
    d8f6:	d0e5      	beq.n	d8c4 <ctrl_tx_pause_enqueue+0x1c>
    d8f8:	f240 738b 	movw	r3, #1931	; 0x78b
    d8fc:	e00e      	b.n	d91c <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
    d8fe:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
    d902:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
    d904:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    d906:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
			if (!pause) {
    d90a:	2a00      	cmp	r2, #0
    d90c:	d1e2      	bne.n	d8d4 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
    d90e:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
    d912:	2b00      	cmp	r3, #0
    d914:	d1df      	bne.n	d8d6 <ctrl_tx_pause_enqueue+0x2e>
    d916:	e7f2      	b.n	d8fe <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
    d918:	f240 739d 	movw	r3, #1949	; 0x79d
    d91c:	4a0a      	ldr	r2, [pc, #40]	; (d948 <ctrl_tx_pause_enqueue+0xa0>)
    d91e:	490b      	ldr	r1, [pc, #44]	; (d94c <ctrl_tx_pause_enqueue+0xa4>)
    d920:	480b      	ldr	r0, [pc, #44]	; (d950 <ctrl_tx_pause_enqueue+0xa8>)
    d922:	f010 f9e4 	bl	1dcee <printk>
    d926:	4040      	eors	r0, r0
    d928:	f380 8811 	msr	BASEPRI, r0
    d92c:	f04f 0003 	mov.w	r0, #3
    d930:	df02      	svc	2
    d932:	e7c7      	b.n	d8c4 <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
    d934:	6819      	ldr	r1, [r3, #0]
    d936:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    d938:	601d      	str	r5, [r3, #0]
			if (!pause) {
    d93a:	b90a      	cbnz	r2, d940 <ctrl_tx_pause_enqueue+0x98>
				conn->tx_ctrl_last = tx;
    d93c:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    d940:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    d942:	2b00      	cmp	r3, #0
    d944:	d1c7      	bne.n	d8d6 <ctrl_tx_pause_enqueue+0x2e>
    d946:	e7da      	b.n	d8fe <ctrl_tx_pause_enqueue+0x56>
    d948:	00027934 	.word	0x00027934
    d94c:	00027974 	.word	0x00027974
    d950:	000275f0 	.word	0x000275f0

0000d954 <tx_lll_flush>:
{
    d954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
    d958:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    d95c:	4935      	ldr	r1, [pc, #212]	; (da34 <tx_lll_flush+0xe0>)
{
    d95e:	b083      	sub	sp, #12
    d960:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    d962:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    d966:	4640      	mov	r0, r8
    d968:	f7fb fb08 	bl	8f7c <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    d96c:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
    d970:	4629      	mov	r1, r5
    d972:	f005 fb05 	bl	12f80 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    d976:	6d28      	ldr	r0, [r5, #80]	; 0x50
    d978:	4631      	mov	r1, r6
    d97a:	aa01      	add	r2, sp, #4
    d97c:	f7fb fb3c 	bl	8ff8 <memq_dequeue>
	while (link) {
    d980:	b340      	cbz	r0, d9d4 <tx_lll_flush+0x80>
    d982:	4c2d      	ldr	r4, [pc, #180]	; (da38 <tx_lll_flush+0xe4>)
		lll_tx->handle = 0xFFFF;
    d984:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    d988:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    d98c:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
    d98e:	f894 c001 	ldrb.w	ip, [r4, #1]
    d992:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
    d994:	1c4b      	adds	r3, r1, #1
    d996:	b2db      	uxtb	r3, r3
		last = 0U;
    d998:	459c      	cmp	ip, r3
    d99a:	bf08      	it	eq
    d99c:	2300      	moveq	r3, #0
	if (last == first) {
    d99e:	429a      	cmp	r2, r3
    d9a0:	d038      	beq.n	da14 <tx_lll_flush+0xc0>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    d9a2:	7822      	ldrb	r2, [r4, #0]
    d9a4:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
    d9a8:	eb19 0e02 	adds.w	lr, r9, r2
    d9ac:	d032      	beq.n	da14 <tx_lll_flush+0xc0>
		lll_tx->node = tx;
    d9ae:	f8dd c004 	ldr.w	ip, [sp, #4]
		lll_tx->handle = 0xFFFF;
    d9b2:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    d9b6:	f8dc 1000 	ldr.w	r1, [ip]
		lll_tx->node = tx;
    d9ba:	f8ce c004 	str.w	ip, [lr, #4]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    d9be:	aa01      	add	r2, sp, #4
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    d9c0:	6001      	str	r1, [r0, #0]
		tx->next = link;
    d9c2:	f8cc 0000 	str.w	r0, [ip]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    d9c6:	4631      	mov	r1, r6
    d9c8:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
    d9ca:	70e3      	strb	r3, [r4, #3]
    d9cc:	f7fb fb14 	bl	8ff8 <memq_dequeue>
	while (link) {
    d9d0:	2800      	cmp	r0, #0
    d9d2:	d1db      	bne.n	d98c <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    d9d4:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
	rx = (void *)&conn->llcp_terminate.node_rx;
    d9d8:	f508 7498 	add.w	r4, r8, #304	; 0x130
	LL_ASSERT(rx->hdr.link);
    d9dc:	b150      	cbz	r0, d9f4 <tx_lll_flush+0xa0>
	rx->hdr.link = NULL;
    d9de:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
    d9e0:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
    d9e2:	f8c8 3130 	str.w	r3, [r8, #304]	; 0x130
	ull_rx_put(link, rx);
    d9e6:	f7ff fa25 	bl	ce34 <ull_rx_put>
	ull_rx_sched();
    d9ea:	f7ff fa33 	bl	ce54 <ull_rx_sched>
}
    d9ee:	b003      	add	sp, #12
    d9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    d9f4:	4a11      	ldr	r2, [pc, #68]	; (da3c <tx_lll_flush+0xe8>)
    d9f6:	4912      	ldr	r1, [pc, #72]	; (da40 <tx_lll_flush+0xec>)
    d9f8:	4812      	ldr	r0, [pc, #72]	; (da44 <tx_lll_flush+0xf0>)
    d9fa:	f44f 63e6 	mov.w	r3, #1840	; 0x730
    d9fe:	f010 f976 	bl	1dcee <printk>
    da02:	4040      	eors	r0, r0
    da04:	f380 8811 	msr	BASEPRI, r0
    da08:	f04f 0003 	mov.w	r0, #3
    da0c:	df02      	svc	2
    da0e:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
    da12:	e7e4      	b.n	d9de <tx_lll_flush+0x8a>
		LL_ASSERT(lll_tx);
    da14:	4a09      	ldr	r2, [pc, #36]	; (da3c <tx_lll_flush+0xe8>)
    da16:	490c      	ldr	r1, [pc, #48]	; (da48 <tx_lll_flush+0xf4>)
    da18:	480a      	ldr	r0, [pc, #40]	; (da44 <tx_lll_flush+0xf0>)
    da1a:	f240 731c 	movw	r3, #1820	; 0x71c
    da1e:	f010 f966 	bl	1dcee <printk>
    da22:	4040      	eors	r0, r0
    da24:	f380 8811 	msr	BASEPRI, r0
    da28:	f04f 0003 	mov.w	r0, #3
    da2c:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
    da2e:	2300      	movs	r3, #0
    da30:	801b      	strh	r3, [r3, #0]
    da32:	deff      	udf	#255	; 0xff
    da34:	200021d0 	.word	0x200021d0
    da38:	200005d4 	.word	0x200005d4
    da3c:	00027934 	.word	0x00027934
    da40:	00027984 	.word	0x00027984
    da44:	000275f0 	.word	0x000275f0
    da48:	0002797c 	.word	0x0002797c

0000da4c <ticker_op_stop_cb>:
{
    da4c:	b510      	push	{r4, lr}
    da4e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    da50:	b9b0      	cbnz	r0, da80 <ticker_op_stop_cb+0x34>
	mfy.param = param;
    da52:	4b12      	ldr	r3, [pc, #72]	; (da9c <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
    da54:	2200      	movs	r2, #0
    da56:	4611      	mov	r1, r2
    da58:	2002      	movs	r0, #2
	mfy.param = param;
    da5a:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
    da5c:	f7fb fb30 	bl	90c0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    da60:	b900      	cbnz	r0, da64 <ticker_op_stop_cb+0x18>
}
    da62:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
    da64:	4a0e      	ldr	r2, [pc, #56]	; (daa0 <ticker_op_stop_cb+0x54>)
    da66:	490f      	ldr	r1, [pc, #60]	; (daa4 <ticker_op_stop_cb+0x58>)
    da68:	480f      	ldr	r0, [pc, #60]	; (daa8 <ticker_op_stop_cb+0x5c>)
    da6a:	f240 6389 	movw	r3, #1673	; 0x689
    da6e:	f010 f93e 	bl	1dcee <printk>
    da72:	4040      	eors	r0, r0
    da74:	f380 8811 	msr	BASEPRI, r0
    da78:	f04f 0003 	mov.w	r0, #3
    da7c:	df02      	svc	2
}
    da7e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    da80:	4a07      	ldr	r2, [pc, #28]	; (daa0 <ticker_op_stop_cb+0x54>)
    da82:	490a      	ldr	r1, [pc, #40]	; (daac <ticker_op_stop_cb+0x60>)
    da84:	4808      	ldr	r0, [pc, #32]	; (daa8 <ticker_op_stop_cb+0x5c>)
    da86:	f240 6382 	movw	r3, #1666	; 0x682
    da8a:	f010 f930 	bl	1dcee <printk>
    da8e:	4040      	eors	r0, r0
    da90:	f380 8811 	msr	BASEPRI, r0
    da94:	f04f 0003 	mov.w	r0, #3
    da98:	df02      	svc	2
    da9a:	e7da      	b.n	da52 <ticker_op_stop_cb+0x6>
    da9c:	2000064c 	.word	0x2000064c
    daa0:	00027934 	.word	0x00027934
    daa4:	00027750 	.word	0x00027750
    daa8:	000275f0 	.word	0x000275f0
    daac:	00027994 	.word	0x00027994

0000dab0 <ticker_start_conn_op_cb>:
{
    dab0:	b510      	push	{r4, lr}
    dab2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    dab4:	b990      	cbnz	r0, dadc <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
    dab6:	4620      	mov	r0, r4
    dab8:	f7ff f8f6 	bl	cca8 <ull_update_unmark>
	LL_ASSERT(p == param);
    dabc:	4284      	cmp	r4, r0
    dabe:	d00c      	beq.n	dada <ticker_start_conn_op_cb+0x2a>
    dac0:	4a0d      	ldr	r2, [pc, #52]	; (daf8 <ticker_start_conn_op_cb+0x48>)
    dac2:	490e      	ldr	r1, [pc, #56]	; (dafc <ticker_start_conn_op_cb+0x4c>)
    dac4:	480e      	ldr	r0, [pc, #56]	; (db00 <ticker_start_conn_op_cb+0x50>)
    dac6:	f240 6379 	movw	r3, #1657	; 0x679
    daca:	f010 f910 	bl	1dcee <printk>
    dace:	4040      	eors	r0, r0
    dad0:	f380 8811 	msr	BASEPRI, r0
    dad4:	f04f 0003 	mov.w	r0, #3
    dad8:	df02      	svc	2
}
    dada:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    dadc:	4a06      	ldr	r2, [pc, #24]	; (daf8 <ticker_start_conn_op_cb+0x48>)
    dade:	4909      	ldr	r1, [pc, #36]	; (db04 <ticker_start_conn_op_cb+0x54>)
    dae0:	4807      	ldr	r0, [pc, #28]	; (db00 <ticker_start_conn_op_cb+0x50>)
    dae2:	f240 6376 	movw	r3, #1654	; 0x676
    dae6:	f010 f902 	bl	1dcee <printk>
    daea:	4040      	eors	r0, r0
    daec:	f380 8811 	msr	BASEPRI, r0
    daf0:	f04f 0003 	mov.w	r0, #3
    daf4:	df02      	svc	2
    daf6:	e7de      	b.n	dab6 <ticker_start_conn_op_cb+0x6>
    daf8:	00027934 	.word	0x00027934
    dafc:	000279a0 	.word	0x000279a0
    db00:	000275f0 	.word	0x000275f0
    db04:	00027994 	.word	0x00027994

0000db08 <ticker_stop_conn_op_cb>:
{
    db08:	b510      	push	{r4, lr}
    db0a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    db0c:	b990      	cbnz	r0, db34 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
    db0e:	4620      	mov	r0, r4
    db10:	f7ff f8be 	bl	cc90 <ull_update_mark>
	LL_ASSERT(p == param);
    db14:	4284      	cmp	r4, r0
    db16:	d00c      	beq.n	db32 <ticker_stop_conn_op_cb+0x2a>
    db18:	4a0d      	ldr	r2, [pc, #52]	; (db50 <ticker_stop_conn_op_cb+0x48>)
    db1a:	490e      	ldr	r1, [pc, #56]	; (db54 <ticker_stop_conn_op_cb+0x4c>)
    db1c:	480e      	ldr	r0, [pc, #56]	; (db58 <ticker_stop_conn_op_cb+0x50>)
    db1e:	f240 636f 	movw	r3, #1647	; 0x66f
    db22:	f010 f8e4 	bl	1dcee <printk>
    db26:	4040      	eors	r0, r0
    db28:	f380 8811 	msr	BASEPRI, r0
    db2c:	f04f 0003 	mov.w	r0, #3
    db30:	df02      	svc	2
}
    db32:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    db34:	4a06      	ldr	r2, [pc, #24]	; (db50 <ticker_stop_conn_op_cb+0x48>)
    db36:	4909      	ldr	r1, [pc, #36]	; (db5c <ticker_stop_conn_op_cb+0x54>)
    db38:	4807      	ldr	r0, [pc, #28]	; (db58 <ticker_stop_conn_op_cb+0x50>)
    db3a:	f240 636c 	movw	r3, #1644	; 0x66c
    db3e:	f010 f8d6 	bl	1dcee <printk>
    db42:	4040      	eors	r0, r0
    db44:	f380 8811 	msr	BASEPRI, r0
    db48:	f04f 0003 	mov.w	r0, #3
    db4c:	df02      	svc	2
    db4e:	e7de      	b.n	db0e <ticker_stop_conn_op_cb+0x6>
    db50:	00027934 	.word	0x00027934
    db54:	000279a0 	.word	0x000279a0
    db58:	000275f0 	.word	0x000275f0
    db5c:	00027994 	.word	0x00027994

0000db60 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    db60:	b900      	cbnz	r0, db64 <ticker_update_conn_op_cb+0x4>
    db62:	4770      	bx	lr
{
    db64:	b510      	push	{r4, lr}
    db66:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    db68:	f7ff f8aa 	bl	ccc0 <ull_update_mark_get>
    db6c:	4284      	cmp	r4, r0
    db6e:	d010      	beq.n	db92 <ticker_update_conn_op_cb+0x32>
    db70:	f7ff f888 	bl	cc84 <ull_disable_mark_get>
    db74:	4284      	cmp	r4, r0
    db76:	d00c      	beq.n	db92 <ticker_update_conn_op_cb+0x32>
    db78:	4a06      	ldr	r2, [pc, #24]	; (db94 <ticker_update_conn_op_cb+0x34>)
    db7a:	4907      	ldr	r1, [pc, #28]	; (db98 <ticker_update_conn_op_cb+0x38>)
    db7c:	4807      	ldr	r0, [pc, #28]	; (db9c <ticker_update_conn_op_cb+0x3c>)
    db7e:	f240 6363 	movw	r3, #1635	; 0x663
    db82:	f010 f8b4 	bl	1dcee <printk>
    db86:	4040      	eors	r0, r0
    db88:	f380 8811 	msr	BASEPRI, r0
    db8c:	f04f 0003 	mov.w	r0, #3
    db90:	df02      	svc	2
}
    db92:	bd10      	pop	{r4, pc}
    db94:	00027934 	.word	0x00027934
    db98:	000279ac 	.word	0x000279ac
    db9c:	000275f0 	.word	0x000275f0

0000dba0 <reject_ext_ind_send.isra.0>:

	return 0;
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    dba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dba4:	4605      	mov	r5, r0
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    dba6:	4826      	ldr	r0, [pc, #152]	; (dc40 <reject_ext_ind_send.isra.0+0xa0>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    dba8:	460e      	mov	r6, r1
    dbaa:	4690      	mov	r8, r2
    dbac:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    dbae:	f7fb f9b1 	bl	8f14 <mem_acquire>
	if (!tx) {
    dbb2:	2800      	cmp	r0, #0
    dbb4:	d041      	beq.n	dc3a <reject_ext_ind_send.isra.0+0x9a>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    dbb6:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dbb8:	7904      	ldrb	r4, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    dbba:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    dbbc:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    dbc0:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dbc4:	4323      	orrs	r3, r4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    dbc6:	2111      	movs	r1, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    dbc8:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dbca:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    dbcc:	71c1      	strb	r1, [r0, #7]
	if (
    dbce:	b11a      	cbz	r2, dbd8 <reject_ext_ind_send.isra.0+0x38>
	    !conn->llcp_enc.pause_tx &&
    dbd0:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
    dbd4:	0799      	lsls	r1, r3, #30
    dbd6:	d510      	bpl.n	dbfa <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
    dbd8:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
    dbdc:	b33b      	cbz	r3, dc2e <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
    dbde:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
    dbe2:	681a      	ldr	r2, [r3, #0]
    dbe4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    dbe6:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    dbe8:	6802      	ldr	r2, [r0, #0]
    dbea:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
	if (!tx->next) {
    dbee:	b1da      	cbz	r2, dc28 <reject_ext_ind_send.isra.0+0x88>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    dbf0:	2303      	movs	r3, #3
    dbf2:	7033      	strb	r3, [r6, #0]

	return 0;
    dbf4:	2000      	movs	r0, #0
}
    dbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !conn->llcp_phy.pause_tx &&
    dbfa:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
    dbfe:	07db      	lsls	r3, r3, #31
    dc00:	d4ea      	bmi.n	dbd8 <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
    dc02:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
    dc06:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
    dc08:	bf04      	itt	eq
    dc0a:	6813      	ldreq	r3, [r2, #0]
    dc0c:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    dc10:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
    dc14:	2b00      	cmp	r3, #0
    dc16:	d1e2      	bne.n	dbde <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
    dc18:	6813      	ldr	r3, [r2, #0]
    dc1a:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    dc1c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
    dc1e:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    dc20:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
    dc24:	2a00      	cmp	r2, #0
    dc26:	d1e3      	bne.n	dbf0 <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
    dc28:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    dc2c:	e7e0      	b.n	dbf0 <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
    dc2e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    dc30:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    dc34:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
    dc38:	e7d9      	b.n	dbee <reject_ext_ind_send.isra.0+0x4e>
		return -ENOBUFS;
    dc3a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    dc3e:	e7da      	b.n	dbf6 <reject_ext_ind_send.isra.0+0x56>
    dc40:	2000241c 	.word	0x2000241c

0000dc44 <start_enc_rsp_send>:
{
    dc44:	b570      	push	{r4, r5, r6, lr}
    dc46:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    dc48:	b179      	cbz	r1, dc6a <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
    dc4a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc4e:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
    dc50:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    dc54:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
    dc56:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc5a:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    dc5e:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    dc60:	704e      	strb	r6, [r1, #1]
	return 0;
    dc62:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc64:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    dc66:	70cd      	strb	r5, [r1, #3]
}
    dc68:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    dc6a:	4826      	ldr	r0, [pc, #152]	; (dd04 <start_enc_rsp_send+0xc0>)
    dc6c:	f7fb f952 	bl	8f14 <mem_acquire>
		if (!tx) {
    dc70:	2800      	cmp	r0, #0
    dc72:	d043      	beq.n	dcfc <start_enc_rsp_send+0xb8>
	conn->lll.enc_tx = 1;
    dc74:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc78:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
    dc7a:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    dc7e:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    dc80:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    dc84:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    dc86:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc8a:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    dc8e:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc90:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    dc92:	71c1      	strb	r1, [r0, #7]
	if (
    dc94:	b1e3      	cbz	r3, dcd0 <start_enc_rsp_send+0x8c>
	    !conn->llcp_enc.pause_tx &&
    dc96:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    dc9a:	0791      	lsls	r1, r2, #30
    dc9c:	d418      	bmi.n	dcd0 <start_enc_rsp_send+0x8c>
	    !conn->llcp_phy.pause_tx &&
    dc9e:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    dca2:	07d2      	lsls	r2, r2, #31
    dca4:	d414      	bmi.n	dcd0 <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
    dca6:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    dcaa:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    dcac:	bf04      	itt	eq
    dcae:	681a      	ldreq	r2, [r3, #0]
    dcb0:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    dcb4:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    dcb8:	b1ca      	cbz	r2, dcee <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
    dcba:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    dcbe:	681a      	ldr	r2, [r3, #0]
    dcc0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    dcc2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    dcc4:	6803      	ldr	r3, [r0, #0]
    dcc6:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    dcca:	b163      	cbz	r3, dce6 <start_enc_rsp_send+0xa2>
	return 0;
    dccc:	2000      	movs	r0, #0
}
    dcce:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
    dcd0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    dcd4:	2a00      	cmp	r2, #0
    dcd6:	d1f0      	bne.n	dcba <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
    dcd8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    dcda:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    dcde:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    dce2:	2b00      	cmp	r3, #0
    dce4:	d1f2      	bne.n	dccc <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
    dce6:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
	return 0;
    dcea:	4618      	mov	r0, r3
}
    dcec:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
    dcee:	681a      	ldr	r2, [r3, #0]
    dcf0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    dcf2:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    dcf4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    dcf6:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    dcfa:	e7e6      	b.n	dcca <start_enc_rsp_send+0x86>
			return -ENOBUFS;
    dcfc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    dd00:	bd70      	pop	{r4, r5, r6, pc}
    dd02:	bf00      	nop
    dd04:	2000241c 	.word	0x2000241c

0000dd08 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
    dd08:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    dd0c:	f8d0 21b4 	ldr.w	r2, [r0, #436]	; 0x1b4
    dd10:	079b      	lsls	r3, r3, #30
{
    dd12:	b570      	push	{r4, r5, r6, lr}
    dd14:	4604      	mov	r4, r0
    dd16:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
    dd18:	d509      	bpl.n	dd2e <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
    dd1a:	2a00      	cmp	r2, #0
    dd1c:	d03d      	beq.n	dd9a <ctrl_tx_sec_enqueue+0x92>
			tx->next = conn->tx_ctrl_last->next;
    dd1e:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
    dd22:	681a      	ldr	r2, [r3, #0]
    dd24:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
    dd26:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
    dd28:	682b      	ldr	r3, [r5, #0]
    dd2a:	b333      	cbz	r3, dd7a <ctrl_tx_sec_enqueue+0x72>
}
    dd2c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
    dd2e:	f8d0 11b0 	ldr.w	r1, [r0, #432]	; 0x1b0
    dd32:	b1e1      	cbz	r1, dd6e <ctrl_tx_sec_enqueue+0x66>
			if ((conn->llcp_req != conn->llcp_ack) &&
    dd34:	f890 31ab 	ldrb.w	r3, [r0, #427]	; 0x1ab
    dd38:	f890 60e8 	ldrb.w	r6, [r0, #232]	; 0xe8
    dd3c:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
    dd40:	4286      	cmp	r6, r0
    dd42:	f003 0301 	and.w	r3, r3, #1
    dd46:	d003      	beq.n	dd50 <ctrl_tx_sec_enqueue+0x48>
    dd48:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
    dd4c:	2803      	cmp	r0, #3
    dd4e:	d02c      	beq.n	ddaa <ctrl_tx_sec_enqueue+0xa2>
	    !conn->llcp_phy.pause_tx &&
    dd50:	b9b3      	cbnz	r3, dd80 <ctrl_tx_sec_enqueue+0x78>
		if (conn->tx_head == conn->tx_data) {
    dd52:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    dd56:	4299      	cmp	r1, r3
    dd58:	d045      	beq.n	dde6 <ctrl_tx_sec_enqueue+0xde>
		if (!conn->tx_ctrl) {
    dd5a:	b99a      	cbnz	r2, dd84 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head->next;
    dd5c:	680b      	ldr	r3, [r1, #0]
    dd5e:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
    dd60:	600d      	str	r5, [r1, #0]
				conn->tx_ctrl = tx;
    dd62:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    dd64:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
		if (!tx->next) {
    dd68:	2b00      	cmp	r3, #0
    dd6a:	d1df      	bne.n	dd2c <ctrl_tx_sec_enqueue+0x24>
    dd6c:	e005      	b.n	dd7a <ctrl_tx_sec_enqueue+0x72>
		if (!conn->tx_ctrl) {
    dd6e:	b94a      	cbnz	r2, dd84 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head;
    dd70:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
    dd72:	e9c0 556c 	strd	r5, r5, [r0, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    dd76:	f8c0 51b8 	str.w	r5, [r0, #440]	; 0x1b8
			conn->tx_data_last = tx;
    dd7a:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
    dd7e:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
    dd80:	2a00      	cmp	r2, #0
    dd82:	d036      	beq.n	ddf2 <ctrl_tx_sec_enqueue+0xea>
	tx->next = conn->tx_ctrl_last->next;
    dd84:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    dd88:	681a      	ldr	r2, [r3, #0]
    dd8a:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    dd8c:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    dd8e:	682b      	ldr	r3, [r5, #0]
    dd90:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
		if (!tx->next) {
    dd94:	2b00      	cmp	r3, #0
    dd96:	d1c9      	bne.n	dd2c <ctrl_tx_sec_enqueue+0x24>
    dd98:	e7ef      	b.n	dd7a <ctrl_tx_sec_enqueue+0x72>
			tx->next = conn->tx_head;
    dd9a:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
    dd9e:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
    dda0:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		if (!tx->next) {
    dda4:	2b00      	cmp	r3, #0
    dda6:	d1c1      	bne.n	dd2c <ctrl_tx_sec_enqueue+0x24>
    dda8:	e7e7      	b.n	dd7a <ctrl_tx_sec_enqueue+0x72>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    ddaa:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
    ddac:	f000 0003 	and.w	r0, r0, #3
    ddb0:	2803      	cmp	r0, #3
    ddb2:	d1cd      	bne.n	dd50 <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
    ddb4:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    ddb6:	2803      	cmp	r0, #3
    ddb8:	d001      	beq.n	ddbe <ctrl_tx_sec_enqueue+0xb6>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    ddba:	280a      	cmp	r0, #10
    ddbc:	d1c8      	bne.n	dd50 <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
    ddbe:	b9f3      	cbnz	r3, ddfe <ctrl_tx_sec_enqueue+0xf6>
		if (conn->tx_head == conn->tx_data) {
    ddc0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    ddc4:	428b      	cmp	r3, r1
    ddc6:	d022      	beq.n	de0e <ctrl_tx_sec_enqueue+0x106>
		if (!conn->tx_ctrl) {
    ddc8:	b332      	cbz	r2, de18 <ctrl_tx_sec_enqueue+0x110>
			LL_ASSERT(!pause);
    ddca:	f240 738b 	movw	r3, #1931	; 0x78b
			LL_ASSERT(!pause);
    ddce:	4a14      	ldr	r2, [pc, #80]	; (de20 <ctrl_tx_sec_enqueue+0x118>)
    ddd0:	4914      	ldr	r1, [pc, #80]	; (de24 <ctrl_tx_sec_enqueue+0x11c>)
    ddd2:	4815      	ldr	r0, [pc, #84]	; (de28 <ctrl_tx_sec_enqueue+0x120>)
    ddd4:	f00f ff8b 	bl	1dcee <printk>
    ddd8:	4040      	eors	r0, r0
    ddda:	f380 8811 	msr	BASEPRI, r0
    ddde:	f04f 0003 	mov.w	r0, #3
    dde2:	df02      	svc	2
    dde4:	e7ce      	b.n	dd84 <ctrl_tx_sec_enqueue+0x7c>
			conn->tx_data = conn->tx_data->next;
    dde6:	680b      	ldr	r3, [r1, #0]
    dde8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    ddec:	2a00      	cmp	r2, #0
    ddee:	d1c9      	bne.n	dd84 <ctrl_tx_sec_enqueue+0x7c>
    ddf0:	e7b4      	b.n	dd5c <ctrl_tx_sec_enqueue+0x54>
			tx->next = conn->tx_head;
    ddf2:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
    ddf4:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    ddf8:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
}
    ddfc:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
    ddfe:	b112      	cbz	r2, de06 <ctrl_tx_sec_enqueue+0xfe>
			LL_ASSERT(!pause);
    de00:	f240 739d 	movw	r3, #1949	; 0x79d
    de04:	e7e3      	b.n	ddce <ctrl_tx_sec_enqueue+0xc6>
			tx->next = conn->tx_head;
    de06:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
    de08:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
}
    de0c:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
    de0e:	680b      	ldr	r3, [r1, #0]
    de10:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    de14:	2a00      	cmp	r2, #0
    de16:	d1d8      	bne.n	ddca <ctrl_tx_sec_enqueue+0xc2>
			tx->next = conn->tx_head->next;
    de18:	680b      	ldr	r3, [r1, #0]
    de1a:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
    de1c:	600d      	str	r5, [r1, #0]
			if (!pause) {
    de1e:	e783      	b.n	dd28 <ctrl_tx_sec_enqueue+0x20>
    de20:	00027934 	.word	0x00027934
    de24:	00027974 	.word	0x00027974
    de28:	000275f0 	.word	0x000275f0

0000de2c <feature_rsp_send.isra.0>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    de2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de2e:	4605      	mov	r5, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    de30:	4826      	ldr	r0, [pc, #152]	; (decc <feature_rsp_send.isra.0+0xa0>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    de32:	460c      	mov	r4, r1
    de34:	4616      	mov	r6, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    de36:	f7fb f86d 	bl	8f14 <mem_acquire>
	if (!tx) {
    de3a:	2800      	cmp	r0, #0
    de3c:	d042      	beq.n	dec4 <feature_rsp_send.isra.0+0x98>
	       (features[1] << 8) | (features[2] << 16);
    de3e:	79b3      	ldrb	r3, [r6, #6]
    de40:	7977      	ldrb	r7, [r6, #5]
    de42:	4a23      	ldr	r2, [pc, #140]	; (ded0 <feature_rsp_send.isra.0+0xa4>)
    de44:	4601      	mov	r1, r0
    de46:	041b      	lsls	r3, r3, #16
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    de48:	7930      	ldrb	r0, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    de4a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    de4e:	4303      	orrs	r3, r0
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    de50:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    de54:	4f1f      	ldr	r7, [pc, #124]	; (ded4 <feature_rsp_send.isra.0+0xa8>)
	       (features[1] << 8) | (features[2] << 16);
    de56:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    de58:	4003      	ands	r3, r0
    de5a:	f3c3 0310 	ubfx	r3, r3, #0, #17
    de5e:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
    de62:	79b3      	ldrb	r3, [r6, #6]
    de64:	f896 c005 	ldrb.w	ip, [r6, #5]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    de68:	7930      	ldrb	r0, [r6, #4]
	conn->common.fex_valid = 1U;
    de6a:	f895 60dc 	ldrb.w	r6, [r5, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
    de6e:	041b      	lsls	r3, r3, #16
    de70:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    de74:	4303      	orrs	r3, r0
    de76:	4313      	orrs	r3, r2
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    de78:	401f      	ands	r7, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    de7a:	f04f 0c09 	mov.w	ip, #9
	conn->common.fex_valid = 1U;
    de7e:	f046 0301 	orr.w	r3, r6, #1
__ssp_bos_icheck3(memset, void *, int)
    de82:	2600      	movs	r6, #0
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    de84:	7908      	ldrb	r0, [r1, #4]
	conn->llcp_feature.features_peer =
    de86:	f8c5 7120 	str.w	r7, [r5, #288]	; 0x120
	conn->common.fex_valid = 1U;
    de8a:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
    de8e:	608e      	str	r6, [r1, #8]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    de90:	f881 c005 	strb.w	ip, [r1, #5]
    de94:	60ce      	str	r6, [r1, #12]
	feat_result &= 0xFF;
    de96:	f8d5 211c 	ldr.w	r2, [r5, #284]	; 0x11c
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    de9a:	f881 c007 	strb.w	ip, [r1, #7]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    de9e:	f040 0303 	orr.w	r3, r0, #3
	feat_result &= 0xFF;
    dea2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	dst[1] = val >> 8;
    dea6:	f04f 0c41 	mov.w	ip, #65	; 0x41
	dst[2] = val >> 16;
    deaa:	2701      	movs	r7, #1
	ctrl_tx_sec_enqueue(conn, tx);
    deac:	4628      	mov	r0, r5
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    deae:	710b      	strb	r3, [r1, #4]
	dst[0] = val;
    deb0:	720a      	strb	r2, [r1, #8]
	dst[1] = val >> 8;
    deb2:	f881 c009 	strb.w	ip, [r1, #9]
	dst[2] = val >> 16;
    deb6:	728f      	strb	r7, [r1, #10]
	ctrl_tx_sec_enqueue(conn, tx);
    deb8:	f7ff ff26 	bl	dd08 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    debc:	2303      	movs	r3, #3
    debe:	7023      	strb	r3, [r4, #0]
	return 0;
    dec0:	4630      	mov	r0, r6
}
    dec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    dec4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    dec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    deca:	bf00      	nop
    decc:	2000241c 	.word	0x2000241c
    ded0:	fffe30d0 	.word	0xfffe30d0
    ded4:	0001ff7f 	.word	0x0001ff7f

0000ded8 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    ded8:	4801      	ldr	r0, [pc, #4]	; (dee0 <ll_conn_acquire+0x8>)
    deda:	f7fb b81b 	b.w	8f14 <mem_acquire>
    dede:	bf00      	nop
    dee0:	200021cc 	.word	0x200021cc

0000dee4 <ll_conn_release>:
	mem_release(conn, &conn_free);
    dee4:	4901      	ldr	r1, [pc, #4]	; (deec <ll_conn_release+0x8>)
    dee6:	f7fb b82b 	b.w	8f40 <mem_release>
    deea:	bf00      	nop
    deec:	200021cc 	.word	0x200021cc

0000def0 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    def0:	4902      	ldr	r1, [pc, #8]	; (defc <ll_conn_handle_get+0xc>)
    def2:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    def6:	f7fb b841 	b.w	8f7c <mem_index_get>
    defa:	bf00      	nop
    defc:	200021d0 	.word	0x200021d0

0000df00 <ll_conn_get>:
{
    df00:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    df02:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    df06:	4801      	ldr	r0, [pc, #4]	; (df0c <ll_conn_get+0xc>)
    df08:	f7fb b834 	b.w	8f74 <mem_get>
    df0c:	200021d0 	.word	0x200021d0

0000df10 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    df10:	b958      	cbnz	r0, df2a <ll_connected_get+0x1a>
{
    df12:	b508      	push	{r3, lr}
    df14:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    df16:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    df1a:	4805      	ldr	r0, [pc, #20]	; (df30 <ll_connected_get+0x20>)
    df1c:	f7fb f82a 	bl	8f74 <mem_get>
	if (conn->lll.handle != handle) {
    df20:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    df22:	b903      	cbnz	r3, df26 <ll_connected_get+0x16>
}
    df24:	bd08      	pop	{r3, pc}
		return NULL;
    df26:	2000      	movs	r0, #0
}
    df28:	bd08      	pop	{r3, pc}
		return NULL;
    df2a:	2000      	movs	r0, #0
}
    df2c:	4770      	bx	lr
    df2e:	bf00      	nop
    df30:	200021d0 	.word	0x200021d0

0000df34 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    df34:	4801      	ldr	r0, [pc, #4]	; (df3c <ll_tx_mem_acquire+0x8>)
    df36:	f7fa bfed 	b.w	8f14 <mem_acquire>
    df3a:	bf00      	nop
    df3c:	200023ac 	.word	0x200023ac

0000df40 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    df40:	4901      	ldr	r1, [pc, #4]	; (df48 <ll_tx_mem_release+0x8>)
    df42:	f7fa bffd 	b.w	8f40 <mem_release>
    df46:	bf00      	nop
    df48:	200023ac 	.word	0x200023ac

0000df4c <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    df4c:	2800      	cmp	r0, #0
    df4e:	d13d      	bne.n	dfcc <ll_tx_mem_enqueue+0x80>
{
    df50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df52:	4602      	mov	r2, r0
    df54:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    df56:	481f      	ldr	r0, [pc, #124]	; (dfd4 <ll_tx_mem_enqueue+0x88>)
    df58:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    df5c:	f7fb f80a 	bl	8f74 <mem_get>
	if (conn->lll.handle != handle) {
    df60:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    df62:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    df64:	b9e2      	cbnz	r2, dfa0 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    df66:	491c      	ldr	r1, [pc, #112]	; (dfd8 <ll_tx_mem_enqueue+0x8c>)
    df68:	78cf      	ldrb	r7, [r1, #3]
	if (last == count) {
    df6a:	784e      	ldrb	r6, [r1, #1]
    df6c:	7888      	ldrb	r0, [r1, #2]
	last = last + 1;
    df6e:	1c7b      	adds	r3, r7, #1
    df70:	b2db      	uxtb	r3, r3
		last = 0U;
    df72:	429e      	cmp	r6, r3
    df74:	bf08      	it	eq
    df76:	2300      	moveq	r3, #0
	if (last == first) {
    df78:	4298      	cmp	r0, r3
    df7a:	d014      	beq.n	dfa6 <ll_tx_mem_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    df7c:	460e      	mov	r6, r1
    df7e:	f816 0b04 	ldrb.w	r0, [r6], #4
    df82:	fb10 f007 	smulbb	r0, r0, r7
	if (!lll_tx) {
    df86:	1837      	adds	r7, r6, r0
    df88:	d00d      	beq.n	dfa6 <ll_tx_mem_enqueue+0x5a>
	lll_tx->handle = handle;
    df8a:	5232      	strh	r2, [r6, r0]
	lll_tx->node = tx;
    df8c:	607d      	str	r5, [r7, #4]
    df8e:	7c20      	ldrb	r0, [r4, #16]
	*last = idx; /* Commit: Update write index */
    df90:	70cb      	strb	r3, [r1, #3]
	if (ull_ref_get(&conn->ull)) {
    df92:	b958      	cbnz	r0, dfac <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    df94:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    df98:	2b00      	cmp	r3, #0
    df9a:	db11      	blt.n	dfc0 <ll_tx_mem_enqueue+0x74>
	return 0;
    df9c:	2000      	movs	r0, #0
}
    df9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    dfa0:	f06f 0015 	mvn.w	r0, #21
}
    dfa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    dfa6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    dfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mfy.param = conn;
    dfac:	4b0b      	ldr	r3, [pc, #44]	; (dfdc <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    dfae:	2101      	movs	r1, #1
    dfb0:	2003      	movs	r0, #3
		mfy.param = conn;
    dfb2:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    dfb4:	f7fb f884 	bl	90c0 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    dfb8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    dfbc:	2b00      	cmp	r3, #0
    dfbe:	daed      	bge.n	df9c <ll_tx_mem_enqueue+0x50>
		ull_slave_latency_cancel(conn, handle);
    dfc0:	4620      	mov	r0, r4
    dfc2:	2100      	movs	r1, #0
    dfc4:	f002 fd48 	bl	10a58 <ull_slave_latency_cancel>
	return 0;
    dfc8:	2000      	movs	r0, #0
}
    dfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    dfcc:	f06f 0015 	mvn.w	r0, #21
}
    dfd0:	4770      	bx	lr
    dfd2:	bf00      	nop
    dfd4:	200021d0 	.word	0x200021d0
    dfd8:	20000618 	.word	0x20000618
    dfdc:	2000063c 	.word	0x2000063c

0000dfe0 <ll_conn_update>:
{
    dfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dfe4:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    dfe8:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    dfec:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
    dff0:	2800      	cmp	r0, #0
    dff2:	d154      	bne.n	e09e <ll_conn_update+0xbe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    dff4:	460c      	mov	r4, r1
    dff6:	4616      	mov	r6, r2
    dff8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    dffc:	4602      	mov	r2, r0
    dffe:	4840      	ldr	r0, [pc, #256]	; (e100 <ll_conn_update+0x120>)
    e000:	461d      	mov	r5, r3
    e002:	f7fa ffb7 	bl	8f74 <mem_get>
	if (conn->lll.handle != handle) {
    e006:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    e008:	2b00      	cmp	r3, #0
    e00a:	d148      	bne.n	e09e <ll_conn_update+0xbe>
	if (!cmd) {
    e00c:	b1e4      	cbz	r4, e048 <ll_conn_update+0x68>
		cmd--;
    e00e:	3c01      	subs	r4, #1
		if (cmd) {
    e010:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    e014:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
    e018:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    e01c:	d04e      	beq.n	e0bc <ll_conn_update+0xdc>
			if ((conn->llcp_conn_param.req ==
    e01e:	428a      	cmp	r2, r1
    e020:	d03a      	beq.n	e098 <ll_conn_update+0xb8>
			    (conn->llcp_conn_param.state !=
    e022:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
			     conn->llcp_conn_param.ack) ||
    e026:	f002 0107 	and.w	r1, r2, #7
    e02a:	2903      	cmp	r1, #3
    e02c:	d134      	bne.n	e098 <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
    e02e:	f004 0407 	and.w	r4, r4, #7
    e032:	f044 0408 	orr.w	r4, r4, #8
    e036:	f022 020f 	bic.w	r2, r2, #15
    e03a:	4314      	orrs	r4, r2
    e03c:	f880 4172 	strb.w	r4, [r0, #370]	; 0x172
			conn->llcp_conn_param.status = status;
    e040:	f880 6173 	strb.w	r6, [r0, #371]	; 0x173
	return 0;
    e044:	4618      	mov	r0, r3
    e046:	e028      	b.n	e09a <ll_conn_update+0xba>
		if (!conn->llcp_conn_param.disabled &&
    e048:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
    e04c:	06d9      	lsls	r1, r3, #27
    e04e:	d529      	bpl.n	e0a4 <ll_conn_update+0xc4>
		} else if (conn->lll.role) {
    e050:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
    e054:	2b00      	cmp	r3, #0
    e056:	db4c      	blt.n	e0f2 <ll_conn_update+0x112>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
    e058:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
    e05c:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
    e060:	4293      	cmp	r3, r2
    e062:	d119      	bne.n	e098 <ll_conn_update+0xb8>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e064:	f890 2106 	ldrb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.interval = interval_max;
    e068:	f8a0 9108 	strh.w	r9, [r0, #264]	; 0x108
		conn->llcp_cu.req++;
    e06c:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
    e06e:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e070:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.req++;
    e074:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e078:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
    e07c:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
    e07e:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
		conn->llcp_cu.latency = latency;
    e082:	f8a0 810a 	strh.w	r8, [r0, #266]	; 0x10a
		conn->llcp_cu.timeout = timeout;
    e086:	f8a0 710c 	strh.w	r7, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e08a:	f880 2106 	strb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
    e08e:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
	return 0;
    e092:	4618      	mov	r0, r3
}
    e094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    e098:	200c      	movs	r0, #12
}
    e09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e09e:	2002      	movs	r0, #2
}
    e0a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
    e0a4:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
    e0a8:	07da      	lsls	r2, r3, #31
    e0aa:	d503      	bpl.n	e0b4 <ll_conn_update+0xd4>
		     (conn->llcp_feature.features_conn &
    e0ac:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
		    (!conn->common.fex_valid ||
    e0b0:	079b      	lsls	r3, r3, #30
    e0b2:	d5cd      	bpl.n	e050 <ll_conn_update+0x70>
    e0b4:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
    e0b8:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
			if (conn->llcp_conn_param.req !=
    e0bc:	428a      	cmp	r2, r1
    e0be:	d1eb      	bne.n	e098 <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
    e0c0:	f8b0 3172 	ldrh.w	r3, [r0, #370]	; 0x172
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e0c4:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
			conn->llcp_conn_param.interval_min = interval_min;
    e0c8:	f8a0 5174 	strh.w	r5, [r0, #372]	; 0x174
			conn->llcp_conn_param.state = cmd;
    e0cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			conn->llcp_conn_param.req++;
    e0d0:	3201      	adds	r2, #1
			conn->llcp_conn_param.state = cmd;
    e0d2:	f043 0308 	orr.w	r3, r3, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e0d6:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
    e0d8:	f8a0 9176 	strh.w	r9, [r0, #374]	; 0x176
			conn->llcp_conn_param.req++;
    e0dc:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
			conn->llcp_conn_param.latency = latency;
    e0e0:	f8a0 8178 	strh.w	r8, [r0, #376]	; 0x178
			conn->llcp_conn_param.timeout = timeout;
    e0e4:	f8a0 717a 	strh.w	r7, [r0, #378]	; 0x17a
			conn->llcp_conn_param.state = cmd;
    e0e8:	f8a0 3172 	strh.w	r3, [r0, #370]	; 0x172
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e0ec:	db03      	blt.n	e0f6 <ll_conn_update+0x116>
	return 0;
    e0ee:	2000      	movs	r0, #0
    e0f0:	e7d3      	b.n	e09a <ll_conn_update+0xba>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e0f2:	201a      	movs	r0, #26
    e0f4:	e7d1      	b.n	e09a <ll_conn_update+0xba>
				ull_slave_latency_cancel(conn, handle);
    e0f6:	2100      	movs	r1, #0
    e0f8:	f002 fcae 	bl	10a58 <ull_slave_latency_cancel>
	return 0;
    e0fc:	2000      	movs	r0, #0
    e0fe:	e7cc      	b.n	e09a <ll_conn_update+0xba>
    e100:	200021d0 	.word	0x200021d0

0000e104 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e104:	b9c8      	cbnz	r0, e13a <ll_chm_get+0x36>
{
    e106:	b538      	push	{r3, r4, r5, lr}
    e108:	4602      	mov	r2, r0
    e10a:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e10c:	480c      	ldr	r0, [pc, #48]	; (e140 <ll_chm_get+0x3c>)
    e10e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e112:	f7fa ff2f 	bl	8f74 <mem_get>
	if (conn->lll.handle != handle) {
    e116:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e118:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    e11a:	b965      	cbnz	r5, e136 <ll_chm_get+0x32>
    e11c:	f100 0238 	add.w	r2, r0, #56	; 0x38
		conn->chm_updated = 0U;
    e120:	f883 51c4 	strb.w	r5, [r3, #452]	; 0x1c4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e124:	6811      	ldr	r1, [r2, #0]
    e126:	6021      	str	r1, [r4, #0]
    e128:	7911      	ldrb	r1, [r2, #4]
    e12a:	7121      	strb	r1, [r4, #4]
	} while (conn->chm_updated);
    e12c:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
    e130:	2800      	cmp	r0, #0
    e132:	d1f5      	bne.n	e120 <ll_chm_get+0x1c>
}
    e134:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e136:	2002      	movs	r0, #2
}
    e138:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e13a:	2002      	movs	r0, #2
}
    e13c:	4770      	bx	lr
    e13e:	bf00      	nop
    e140:	200021d0 	.word	0x200021d0

0000e144 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e144:	b9e8      	cbnz	r0, e182 <ll_terminate_ind_send+0x3e>
{
    e146:	b538      	push	{r3, r4, r5, lr}
    e148:	4602      	mov	r2, r0
    e14a:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e14c:	480e      	ldr	r0, [pc, #56]	; (e188 <ll_terminate_ind_send+0x44>)
    e14e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e152:	f7fa ff0f 	bl	8f74 <mem_get>
	if (conn->lll.handle != handle) {
    e156:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    e158:	b964      	cbnz	r4, e174 <ll_terminate_ind_send+0x30>
	conn->llcp_terminate.req++;
    e15a:	f890 212c 	ldrb.w	r2, [r0, #300]	; 0x12c
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e15e:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
    e162:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
	conn->llcp_terminate.req++;
    e166:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e168:	2900      	cmp	r1, #0
	conn->llcp_terminate.req++;
    e16a:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e16e:	db03      	blt.n	e178 <ll_terminate_ind_send+0x34>
	return 0;
    e170:	4620      	mov	r0, r4
}
    e172:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e174:	2002      	movs	r0, #2
}
    e176:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
    e178:	4621      	mov	r1, r4
    e17a:	f002 fc6d 	bl	10a58 <ull_slave_latency_cancel>
	return 0;
    e17e:	4620      	mov	r0, r4
}
    e180:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e182:	2002      	movs	r0, #2
}
    e184:	4770      	bx	lr
    e186:	bf00      	nop
    e188:	200021d0 	.word	0x200021d0

0000e18c <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e18c:	b9d8      	cbnz	r0, e1c6 <ll_feature_req_send+0x3a>
{
    e18e:	b510      	push	{r4, lr}
    e190:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e192:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e196:	480f      	ldr	r0, [pc, #60]	; (e1d4 <ll_feature_req_send+0x48>)
    e198:	f7fa feec 	bl	8f74 <mem_get>
	if (conn->lll.handle != handle) {
    e19c:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    e19e:	b984      	cbnz	r4, e1c2 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
    e1a0:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    e1a4:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
    e1a8:	428a      	cmp	r2, r1
    e1aa:	d108      	bne.n	e1be <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e1ac:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
    e1b0:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e1b2:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
    e1b4:	f880 2118 	strb.w	r2, [r0, #280]	; 0x118
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e1b8:	db07      	blt.n	e1ca <ll_feature_req_send+0x3e>
	return 0;
    e1ba:	4620      	mov	r0, r4
}
    e1bc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    e1be:	200c      	movs	r0, #12
}
    e1c0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e1c2:	2002      	movs	r0, #2
}
    e1c4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e1c6:	2002      	movs	r0, #2
}
    e1c8:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
    e1ca:	4621      	mov	r1, r4
    e1cc:	f002 fc44 	bl	10a58 <ull_slave_latency_cancel>
	return 0;
    e1d0:	4620      	mov	r0, r4
}
    e1d2:	bd10      	pop	{r4, pc}
    e1d4:	200021d0 	.word	0x200021d0

0000e1d8 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e1d8:	b9d8      	cbnz	r0, e212 <ll_version_ind_send+0x3a>
{
    e1da:	b510      	push	{r4, lr}
    e1dc:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e1de:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e1e2:	480f      	ldr	r0, [pc, #60]	; (e220 <ll_version_ind_send+0x48>)
    e1e4:	f7fa fec6 	bl	8f74 <mem_get>
	if (conn->lll.handle != handle) {
    e1e8:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    e1ea:	b984      	cbnz	r4, e20e <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
    e1ec:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    e1f0:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
    e1f4:	428a      	cmp	r2, r1
    e1f6:	d108      	bne.n	e20a <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e1f8:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
    e1fc:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e1fe:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
    e200:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e204:	db07      	blt.n	e216 <ll_version_ind_send+0x3e>
	return 0;
    e206:	4620      	mov	r0, r4
}
    e208:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    e20a:	200c      	movs	r0, #12
}
    e20c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e20e:	2002      	movs	r0, #2
}
    e210:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e212:	2002      	movs	r0, #2
}
    e214:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
    e216:	4621      	mov	r1, r4
    e218:	f002 fc1e 	bl	10a58 <ull_slave_latency_cancel>
	return 0;
    e21c:	4620      	mov	r0, r4
}
    e21e:	bd10      	pop	{r4, pc}
    e220:	200021d0 	.word	0x200021d0

0000e224 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e224:	2800      	cmp	r0, #0
    e226:	d147      	bne.n	e2b8 <ll_length_req_send+0x94>
{
    e228:	b538      	push	{r3, r4, r5, lr}
    e22a:	460d      	mov	r5, r1
    e22c:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e22e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e232:	4602      	mov	r2, r0
    e234:	4824      	ldr	r0, [pc, #144]	; (e2c8 <ll_length_req_send+0xa4>)
    e236:	f7fa fe9d 	bl	8f74 <mem_get>
	if (conn->lll.handle != handle) {
    e23a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    e23c:	bb1b      	cbnz	r3, e286 <ll_length_req_send+0x62>
	if (conn->llcp_length.disabled ||
    e23e:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
    e242:	071a      	lsls	r2, r3, #28
    e244:	d421      	bmi.n	e28a <ll_length_req_send+0x66>
	    (conn->common.fex_valid &&
    e246:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
    e24a:	07d1      	lsls	r1, r2, #31
    e24c:	d503      	bpl.n	e256 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
    e24e:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
	    (conn->common.fex_valid &&
    e252:	0692      	lsls	r2, r2, #26
    e254:	d519      	bpl.n	e28a <ll_length_req_send+0x66>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
    e256:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
    e25a:	f890 2199 	ldrb.w	r2, [r0, #409]	; 0x199
    e25e:	428a      	cmp	r2, r1
    e260:	d017      	beq.n	e292 <ll_length_req_send+0x6e>
		switch (conn->llcp_length.state) {
    e262:	f003 0307 	and.w	r3, r3, #7
    e266:	2b03      	cmp	r3, #3
    e268:	d004      	beq.n	e274 <ll_length_req_send+0x50>
    e26a:	3303      	adds	r3, #3
    e26c:	f003 0307 	and.w	r3, r3, #7
    e270:	2b01      	cmp	r3, #1
    e272:	d80c      	bhi.n	e28e <ll_length_req_send+0x6a>
			if (!conn->llcp_length.cache.tx_octets) {
    e274:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
    e278:	b94b      	cbnz	r3, e28e <ll_length_req_send+0x6a>
				conn->llcp_length.cache.tx_octets = tx_octets;
    e27a:	f8a0 51a4 	strh.w	r5, [r0, #420]	; 0x1a4
				conn->llcp_length.cache.tx_time = tx_time;
    e27e:	f8a0 41a6 	strh.w	r4, [r0, #422]	; 0x1a6
				return 0;
    e282:	4618      	mov	r0, r3
}
    e284:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e286:	2002      	movs	r0, #2
}
    e288:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e28a:	201a      	movs	r0, #26
}
    e28c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    e28e:	200c      	movs	r0, #12
}
    e290:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e292:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e296:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_length.tx_octets = tx_octets;
    e29a:	f8a0 519e 	strh.w	r5, [r0, #414]	; 0x19e
	conn->llcp_length.req++;
    e29e:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e2a0:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e2a4:	2900      	cmp	r1, #0
	conn->llcp_length.req++;
    e2a6:	f880 2198 	strb.w	r2, [r0, #408]	; 0x198
	conn->llcp_length.tx_time = tx_time;
    e2aa:	f8a0 41a2 	strh.w	r4, [r0, #418]	; 0x1a2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e2ae:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e2b2:	db03      	blt.n	e2bc <ll_length_req_send+0x98>
	return 0;
    e2b4:	2000      	movs	r0, #0
}
    e2b6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e2b8:	2002      	movs	r0, #2
}
    e2ba:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
    e2bc:	2100      	movs	r1, #0
    e2be:	f002 fbcb 	bl	10a58 <ull_slave_latency_cancel>
	return 0;
    e2c2:	2000      	movs	r0, #0
}
    e2c4:	bd38      	pop	{r3, r4, r5, pc}
    e2c6:	bf00      	nop
    e2c8:	200021d0 	.word	0x200021d0

0000e2cc <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
    e2cc:	4a03      	ldr	r2, [pc, #12]	; (e2dc <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
    e2ce:	4b04      	ldr	r3, [pc, #16]	; (e2e0 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
    e2d0:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
    e2d2:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
    e2d4:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
    e2d6:	800b      	strh	r3, [r1, #0]
}
    e2d8:	4770      	bx	lr
    e2da:	bf00      	nop
    e2dc:	20002f2e 	.word	0x20002f2e
    e2e0:	20002f30 	.word	0x20002f30

0000e2e4 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
    e2e4:	4a02      	ldr	r2, [pc, #8]	; (e2f0 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
    e2e6:	4b03      	ldr	r3, [pc, #12]	; (e2f4 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
    e2e8:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
    e2ea:	8019      	strh	r1, [r3, #0]
}
    e2ec:	2000      	movs	r0, #0
    e2ee:	4770      	bx	lr
    e2f0:	20002f2e 	.word	0x20002f2e
    e2f4:	20002f30 	.word	0x20002f30

0000e2f8 <ll_length_max_get>:
{
    e2f8:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    e2fa:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
    e2fc:	f44f 74a0 	mov.w	r4, #320	; 0x140
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    e300:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    e302:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
    e304:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
    e306:	801c      	strh	r4, [r3, #0]
}
    e308:	bc30      	pop	{r4, r5}
    e30a:	4770      	bx	lr

0000e30c <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e30c:	b9c0      	cbnz	r0, e340 <ll_phy_get+0x34>
{
    e30e:	b538      	push	{r3, r4, r5, lr}
    e310:	460d      	mov	r5, r1
    e312:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e314:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e318:	4602      	mov	r2, r0
    e31a:	480a      	ldr	r0, [pc, #40]	; (e344 <ll_phy_get+0x38>)
    e31c:	f7fa fe2a 	bl	8f74 <mem_get>
    e320:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    e322:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    e324:	b950      	cbnz	r0, e33c <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
    e326:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
    e32a:	f3c2 0202 	ubfx	r2, r2, #0, #3
    e32e:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
    e330:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    e334:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e338:	7023      	strb	r3, [r4, #0]
}
    e33a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e33c:	2002      	movs	r0, #2
}
    e33e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e340:	2002      	movs	r0, #2
}
    e342:	4770      	bx	lr
    e344:	200021d0 	.word	0x200021d0

0000e348 <ll_phy_default_set>:
	default_phy_tx = tx;
    e348:	4a02      	ldr	r2, [pc, #8]	; (e354 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
    e34a:	4b03      	ldr	r3, [pc, #12]	; (e358 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
    e34c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
    e34e:	7019      	strb	r1, [r3, #0]
}
    e350:	2000      	movs	r0, #0
    e352:	4770      	bx	lr
    e354:	20002f7d 	.word	0x20002f7d
    e358:	20002f7c 	.word	0x20002f7c

0000e35c <ll_phy_req_send>:
{
    e35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
    e35e:	2800      	cmp	r0, #0
    e360:	d146      	bne.n	e3f0 <ll_phy_req_send+0x94>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e362:	460c      	mov	r4, r1
    e364:	4615      	mov	r5, r2
    e366:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e36a:	4602      	mov	r2, r0
    e36c:	4823      	ldr	r0, [pc, #140]	; (e3fc <ll_phy_req_send+0xa0>)
    e36e:	461e      	mov	r6, r3
    e370:	f7fa fe00 	bl	8f74 <mem_get>
	if (conn->lll.handle != handle) {
    e374:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    e376:	bbdb      	cbnz	r3, e3f0 <ll_phy_req_send+0x94>
	if (conn->llcp_phy.disabled ||
    e378:	f890 71ab 	ldrb.w	r7, [r0, #427]	; 0x1ab
    e37c:	f017 0708 	ands.w	r7, r7, #8
    e380:	d139      	bne.n	e3f6 <ll_phy_req_send+0x9a>
	    (conn->common.fex_valid &&
    e382:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
    e386:	07db      	lsls	r3, r3, #31
    e388:	d504      	bpl.n	e394 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
    e38a:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
    e38e:	f413 6f10 	tst.w	r3, #2304	; 0x900
    e392:	d030      	beq.n	e3f6 <ll_phy_req_send+0x9a>
	if ((conn->llcp_req != conn->llcp_ack) ||
    e394:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
    e398:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    e39c:	429a      	cmp	r2, r3
    e39e:	d124      	bne.n	e3ea <ll_phy_req_send+0x8e>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
    e3a0:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	if ((conn->llcp_req != conn->llcp_ack) ||
    e3a4:	f890 21a9 	ldrb.w	r2, [r0, #425]	; 0x1a9
    e3a8:	429a      	cmp	r2, r3
    e3aa:	d11e      	bne.n	e3ea <ll_phy_req_send+0x8e>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    e3ac:	f004 0407 	and.w	r4, r4, #7
    e3b0:	00a4      	lsls	r4, r4, #2
    e3b2:	f8b0 11aa 	ldrh.w	r1, [r0, #426]	; 0x1aa
    e3b6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    e3ba:	f006 0307 	and.w	r3, r6, #7
    e3be:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
    e3c2:	f005 0501 	and.w	r5, r5, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e3c6:	f990 403d 	ldrsb.w	r4, [r0, #61]	; 0x3d
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    e3ca:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
    e3ce:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
	conn->llcp_phy.req++;
    e3d2:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    e3d4:	430b      	orrs	r3, r1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e3d6:	2c00      	cmp	r4, #0
	conn->llcp_phy.req++;
    e3d8:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    e3dc:	f8a0 31aa 	strh.w	r3, [r0, #426]	; 0x1aa
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e3e0:	da04      	bge.n	e3ec <ll_phy_req_send+0x90>
		ull_slave_latency_cancel(conn, handle);
    e3e2:	2100      	movs	r1, #0
    e3e4:	f002 fb38 	bl	10a58 <ull_slave_latency_cancel>
    e3e8:	e000      	b.n	e3ec <ll_phy_req_send+0x90>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e3ea:	270c      	movs	r7, #12
}
    e3ec:	4638      	mov	r0, r7
    e3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e3f0:	2702      	movs	r7, #2
}
    e3f2:	4638      	mov	r0, r7
    e3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e3f6:	271a      	movs	r7, #26
}
    e3f8:	4638      	mov	r0, r7
    e3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3fc:	200021d0 	.word	0x200021d0

0000e400 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e400:	b9d8      	cbnz	r0, e43a <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e402:	4602      	mov	r2, r0
{
    e404:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e406:	480e      	ldr	r0, [pc, #56]	; (e440 <ll_apto_get+0x40>)
    e408:	460c      	mov	r4, r1
    e40a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e40e:	f7fa fdb1 	bl	8f74 <mem_get>
    e412:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    e414:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    e416:	b970      	cbnz	r0, e436 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
    e418:	f8b2 10d2 	ldrh.w	r1, [r2, #210]	; 0xd2
    e41c:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
    e41e:	4a09      	ldr	r2, [pc, #36]	; (e444 <ll_apto_get+0x44>)
    e420:	fb03 f301 	mul.w	r3, r3, r1
    e424:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
    e428:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e42c:	fba2 2303 	umull	r2, r3, r2, r3
    e430:	099b      	lsrs	r3, r3, #6
    e432:	8023      	strh	r3, [r4, #0]
}
    e434:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e436:	2002      	movs	r0, #2
}
    e438:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e43a:	2002      	movs	r0, #2
}
    e43c:	4770      	bx	lr
    e43e:	bf00      	nop
    e440:	200021d0 	.word	0x200021d0
    e444:	10624dd3 	.word	0x10624dd3

0000e448 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e448:	b9d8      	cbnz	r0, e482 <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e44a:	4602      	mov	r2, r0
{
    e44c:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e44e:	480e      	ldr	r0, [pc, #56]	; (e488 <ll_apto_set+0x40>)
    e450:	460d      	mov	r5, r1
    e452:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e456:	f7fa fd8d 	bl	8f74 <mem_get>
    e45a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    e45c:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    e45e:	b970      	cbnz	r0, e47e <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
    e460:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
    e462:	f240 44e2 	movw	r4, #1250	; 0x4e2
    e466:	fb04 f403 	mul.w	r4, r4, r3
    e46a:	f242 7310 	movw	r3, #10000	; 0x2710
    e46e:	fb03 4305 	mla	r3, r3, r5, r4
    e472:	3b01      	subs	r3, #1
    e474:	fbb3 f3f4 	udiv	r3, r3, r4
    e478:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
    e47c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e47e:	2002      	movs	r0, #2
}
    e480:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e482:	2002      	movs	r0, #2
}
    e484:	4770      	bx	lr
    e486:	bf00      	nop
    e488:	200021d0 	.word	0x200021d0

0000e48c <ull_conn_init>:
	err = init_reset();
    e48c:	f7ff b9d2 	b.w	d834 <init_reset>

0000e490 <ull_conn_reset>:
{
    e490:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e492:	2200      	movs	r2, #0
    e494:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e498:	4813      	ldr	r0, [pc, #76]	; (e4e8 <ull_conn_reset+0x58>)
    e49a:	f7fa fd6b 	bl	8f74 <mem_get>
    e49e:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
    e4a0:	f100 021c 	add.w	r2, r0, #28
    e4a4:	4601      	mov	r1, r0
    e4a6:	2003      	movs	r0, #3
    e4a8:	f7fe fc4e 	bl	cd48 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    e4ac:	b108      	cbz	r0, e4b2 <ull_conn_reset+0x22>
    e4ae:	3078      	adds	r0, #120	; 0x78
    e4b0:	d10b      	bne.n	e4ca <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
    e4b2:	480e      	ldr	r0, [pc, #56]	; (e4ec <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
    e4b4:	490e      	ldr	r1, [pc, #56]	; (e4f0 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
    e4b6:	4a0f      	ldr	r2, [pc, #60]	; (e4f4 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
    e4b8:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
    e4ba:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
    e4bc:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
    e4be:	67a3      	str	r3, [r4, #120]	; 0x78
}
    e4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
    e4c4:	6013      	str	r3, [r2, #0]
	err = init_reset();
    e4c6:	f7ff b9b5 	b.w	d834 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
    e4ca:	4a0b      	ldr	r2, [pc, #44]	; (e4f8 <ull_conn_reset+0x68>)
    e4cc:	490b      	ldr	r1, [pc, #44]	; (e4fc <ull_conn_reset+0x6c>)
    e4ce:	480c      	ldr	r0, [pc, #48]	; (e500 <ull_conn_reset+0x70>)
    e4d0:	f240 6395 	movw	r3, #1685	; 0x695
    e4d4:	f00f fc0b 	bl	1dcee <printk>
    e4d8:	4040      	eors	r0, r0
    e4da:	f380 8811 	msr	BASEPRI, r0
    e4de:	f04f 0003 	mov.w	r0, #3
    e4e2:	df02      	svc	2
    e4e4:	e7e5      	b.n	e4b2 <ull_conn_reset+0x22>
    e4e6:	bf00      	nop
    e4e8:	200021d0 	.word	0x200021d0
    e4ec:	20000618 	.word	0x20000618
    e4f0:	200005d4 	.word	0x200005d4
    e4f4:	20002398 	.word	0x20002398
    e4f8:	00027934 	.word	0x00027934
    e4fc:	00027a00 	.word	0x00027a00
    e500:	000275f0 	.word	0x000275f0

0000e504 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
    e504:	4b01      	ldr	r3, [pc, #4]	; (e50c <ull_conn_default_tx_octets_get+0x8>)
}
    e506:	8818      	ldrh	r0, [r3, #0]
    e508:	4770      	bx	lr
    e50a:	bf00      	nop
    e50c:	20002f2e 	.word	0x20002f2e

0000e510 <ull_conn_default_tx_time_get>:
	return default_tx_time;
    e510:	4b01      	ldr	r3, [pc, #4]	; (e518 <ull_conn_default_tx_time_get+0x8>)
}
    e512:	8818      	ldrh	r0, [r3, #0]
    e514:	4770      	bx	lr
    e516:	bf00      	nop
    e518:	20002f30 	.word	0x20002f30

0000e51c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
    e51c:	4b01      	ldr	r3, [pc, #4]	; (e524 <ull_conn_default_phy_tx_get+0x8>)
}
    e51e:	7818      	ldrb	r0, [r3, #0]
    e520:	4770      	bx	lr
    e522:	bf00      	nop
    e524:	20002f7d 	.word	0x20002f7d

0000e528 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
    e528:	4b01      	ldr	r3, [pc, #4]	; (e530 <ull_conn_default_phy_rx_get+0x8>)
}
    e52a:	7818      	ldrb	r0, [r3, #0]
    e52c:	4770      	bx	lr
    e52e:	bf00      	nop
    e530:	20002f7c 	.word	0x20002f7c

0000e534 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    e534:	688b      	ldr	r3, [r1, #8]
    e536:	689b      	ldr	r3, [r3, #8]
{
    e538:	b510      	push	{r4, lr}
	switch (lll->role) {
    e53a:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
    e53e:	09e4      	lsrs	r4, r4, #7
    e540:	d10d      	bne.n	e55e <ull_conn_setup+0x2a>
		LL_ASSERT(0);
    e542:	4a0a      	ldr	r2, [pc, #40]	; (e56c <ull_conn_setup+0x38>)
    e544:	490a      	ldr	r1, [pc, #40]	; (e570 <ull_conn_setup+0x3c>)
    e546:	480b      	ldr	r0, [pc, #44]	; (e574 <ull_conn_setup+0x40>)
    e548:	f240 23fa 	movw	r3, #762	; 0x2fa
    e54c:	f00f fbcf 	bl	1dcee <printk>
    e550:	4040      	eors	r0, r0
    e552:	f380 8811 	msr	BASEPRI, r0
    e556:	f04f 0003 	mov.w	r0, #3
    e55a:	df02      	svc	2
}
    e55c:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
    e55e:	460a      	mov	r2, r1
}
    e560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
    e564:	3208      	adds	r2, #8
    e566:	f7f4 b877 	b.w	2658 <ull_slave_setup>
    e56a:	bf00      	nop
    e56c:	00027934 	.word	0x00027934
    e570:	00027650 	.word	0x00027650
    e574:	000275f0 	.word	0x000275f0

0000e578 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
    e578:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
    e57a:	88da      	ldrh	r2, [r3, #6]
    e57c:	2a00      	cmp	r2, #0
    e57e:	d15e      	bne.n	e63e <ull_conn_rx+0xc6>
{
    e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e584:	460d      	mov	r5, r1
    e586:	b085      	sub	sp, #20
    e588:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e58a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e58e:	48b1      	ldr	r0, [pc, #708]	; (e854 <ull_conn_rx+0x2dc>)
    e590:	f7fa fcf0 	bl	8f74 <mem_get>
	if (conn->lll.handle != handle) {
    e594:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e596:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    e598:	2b00      	cmp	r3, #0
    e59a:	f040 8094 	bne.w	e6c6 <ull_conn_rx+0x14e>
	pdu_rx = (void *)(*rx)->pdu;
    e59e:	6828      	ldr	r0, [r5, #0]
    e5a0:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	switch (pdu_rx->ll_id) {
    e5a4:	7f02      	ldrb	r2, [r0, #28]
    e5a6:	f002 0203 	and.w	r2, r2, #3
    e5aa:	2a03      	cmp	r2, #3
	pdu_rx = (void *)(*rx)->pdu;
    e5ac:	4606      	mov	r6, r0
	switch (pdu_rx->ll_id) {
    e5ae:	f001 0c01 	and.w	ip, r1, #1
    e5b2:	d12b      	bne.n	e60c <ull_conn_rx+0x94>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
    e5b4:	f890 801f 	ldrb.w	r8, [r0, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    e5b8:	f1bc 0f00 	cmp.w	ip, #0
    e5bc:	f000 808a 	beq.w	e6d4 <ull_conn_rx+0x15c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    e5c0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    e5c4:	2b00      	cmp	r3, #0
    e5c6:	f001 0004 	and.w	r0, r1, #4
    e5ca:	f2c0 8636 	blt.w	f23a <__kernel_ram_size+0xda>
	return (!conn->lll.role &&
    e5ce:	2800      	cmp	r0, #0
    e5d0:	f040 80e7 	bne.w	e7a2 <ull_conn_rx+0x22a>
		((!conn->llcp_enc.refresh &&
    e5d4:	f1b8 0f02 	cmp.w	r8, #2
    e5d8:	f000 832f 	beq.w	ec3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1da>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    e5dc:	f1b8 0f05 	cmp.w	r8, #5
    e5e0:	f000 8567 	beq.w	f0b2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x652>
    e5e4:	f1b8 0f06 	cmp.w	r8, #6
    e5e8:	f000 86a4 	beq.w	f334 <__kernel_ram_size+0x1d4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    e5ec:	f1b8 0f0d 	cmp.w	r8, #13
    e5f0:	f000 84c7 	beq.w	ef82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x522>
    e5f4:	f1b8 0f11 	cmp.w	r8, #17
    e5f8:	f000 8378 	beq.w	ecec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28c>
		conn->llcp_terminate.reason_peer =
    e5fc:	233d      	movs	r3, #61	; 0x3d
    e5fe:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e602:	682b      	ldr	r3, [r5, #0]
    e604:	2203      	movs	r2, #3
    e606:	711a      	strb	r2, [r3, #4]

		return 0;
    e608:	2000      	movs	r0, #0
    e60a:	e00a      	b.n	e622 <ull_conn_rx+0xaa>
	switch (pdu_rx->ll_id) {
    e60c:	b962      	cbnz	r2, e628 <ull_conn_rx+0xb0>
		if (conn->llcp_enc.pause_rx) {
    e60e:	f1bc 0f00 	cmp.w	ip, #0
    e612:	d003      	beq.n	e61c <ull_conn_rx+0xa4>
			conn->llcp_terminate.reason_peer =
    e614:	233d      	movs	r3, #61	; 0x3d
    e616:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
    e61a:	6828      	ldr	r0, [r5, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e61c:	2303      	movs	r3, #3
    e61e:	7103      	strb	r3, [r0, #4]
	return 0;
    e620:	2000      	movs	r0, #0
}
    e622:	b005      	add	sp, #20
    e624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
    e628:	f1bc 0f00 	cmp.w	ip, #0
    e62c:	d0f8      	beq.n	e620 <ull_conn_rx+0xa8>
			conn->llcp_terminate.reason_peer =
    e62e:	223d      	movs	r2, #61	; 0x3d
    e630:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e634:	682a      	ldr	r2, [r5, #0]
    e636:	2103      	movs	r1, #3
	return 0;
    e638:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e63a:	7111      	strb	r1, [r2, #4]
    e63c:	e7f1      	b.n	e622 <ull_conn_rx+0xaa>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e63e:	2203      	movs	r2, #3
    e640:	711a      	strb	r2, [r3, #4]
		return 0;
    e642:	2000      	movs	r0, #0
}
    e644:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
    e646:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
    e64a:	428a      	cmp	r2, r1
				conn->llcp_phy.state =
    e64c:	f043 0303 	orr.w	r3, r3, #3
    e650:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
    e654:	d112      	bne.n	e67c <ull_conn_rx+0x104>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
    e656:	f8b4 31aa 	ldrh.w	r3, [r4, #426]	; 0x1aa
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
    e65a:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
					conn->llcp_phy.tx =
    e65e:	487e      	ldr	r0, [pc, #504]	; (e858 <ull_conn_rx+0x2e0>)
    e660:	4018      	ands	r0, r3
    e662:	f001 0307 	and.w	r3, r1, #7
    e666:	009b      	lsls	r3, r3, #2
    e668:	f3c1 1102 	ubfx	r1, r1, #4, #3
    e66c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
					conn->llcp_phy.ack--;
    e670:	3a01      	subs	r2, #1
					conn->llcp_phy.tx =
    e672:	4303      	orrs	r3, r0
					conn->llcp_phy.ack--;
    e674:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
					conn->llcp_phy.tx =
    e678:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
    e67c:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
				conn->llcp_phy.tx &= p->rx_phys;
    e680:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
    e684:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
    e688:	f3c2 0082 	ubfx	r0, r2, #2, #3
    e68c:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
    e68e:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
    e692:	009b      	lsls	r3, r3, #2
    e694:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    e698:	f002 0203 	and.w	r2, r2, #3
    e69c:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    e69e:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
    e6a2:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    e6a6:	d002      	beq.n	e6ae <ull_conn_rx+0x136>
    e6a8:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    e6ac:	d105      	bne.n	e6ba <ull_conn_rx+0x142>
					conn->llcp_phy.tx = 0;
    e6ae:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    e6b2:	f003 0303 	and.w	r3, r3, #3
    e6b6:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
    e6ba:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    e6be:	f043 0301 	orr.w	r3, r3, #1
    e6c2:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e6c6:	682b      	ldr	r3, [r5, #0]
    e6c8:	2203      	movs	r2, #3
	int nack = 0;
    e6ca:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e6cc:	711a      	strb	r2, [r3, #4]
}
    e6ce:	b005      	add	sp, #20
    e6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
    e6d4:	f100 021c 	add.w	r2, r0, #28
	switch (opcode) {
    e6d8:	f1b8 0f19 	cmp.w	r8, #25
    e6dc:	d81f      	bhi.n	e71e <ull_conn_rx+0x1a6>
    e6de:	e8df f018 	tbh	[pc, r8, lsl #1]
    e6e2:	00bf      	.short	0x00bf
    e6e4:	02ac02b8 	.word	0x02ac02b8
    e6e8:	04dc0499 	.word	0x04dc0499
    e6ec:	050204e3 	.word	0x050204e3
    e6f0:	02660276 	.word	0x02660276
    e6f4:	01e30231 	.word	0x01e30231
    e6f8:	0420051c 	.word	0x0420051c
    e6fc:	03e10450 	.word	0x03e10450
    e700:	033b03cc 	.word	0x033b03cc
    e704:	02ec0305 	.word	0x02ec0305
    e708:	008503e7 	.word	0x008503e7
    e70c:	03f30085 	.word	0x03f30085
    e710:	016301a6 	.word	0x016301a6
    e714:	012e      	.short	0x012e
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    e716:	7f73      	ldrb	r3, [r6, #29]
    e718:	2b01      	cmp	r3, #1
    e71a:	f000 8507 	beq.w	f12c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6cc>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e71e:	484f      	ldr	r0, [pc, #316]	; (e85c <ull_conn_rx+0x2e4>)
    e720:	f7fa fbf8 	bl	8f14 <mem_acquire>
	if (!tx) {
    e724:	2800      	cmp	r0, #0
    e726:	f000 8689 	beq.w	f43c <__kernel_ram_size+0x2dc>
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    e72a:	2302      	movs	r3, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e72c:	7901      	ldrb	r1, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    e72e:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    e730:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu->llctrl.unknown_rsp.type = type;
    e734:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e738:	f041 0203 	orr.w	r2, r1, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    e73c:	2107      	movs	r1, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e73e:	7102      	strb	r2, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    e740:	71c1      	strb	r1, [r0, #7]
	if (
    e742:	b303      	cbz	r3, e786 <ull_conn_rx+0x20e>
	    !conn->llcp_enc.pause_tx &&
    e744:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    e748:	0791      	lsls	r1, r2, #30
    e74a:	d41c      	bmi.n	e786 <ull_conn_rx+0x20e>
	    !conn->llcp_phy.pause_tx &&
    e74c:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    e750:	07d2      	lsls	r2, r2, #31
    e752:	d418      	bmi.n	e786 <ull_conn_rx+0x20e>
		if (conn->tx_head == conn->tx_data) {
    e754:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    e758:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    e75a:	bf04      	itt	eq
    e75c:	681a      	ldreq	r2, [r3, #0]
    e75e:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    e762:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    e766:	b99a      	cbnz	r2, e790 <ull_conn_rx+0x218>
			tx->next = conn->tx_head->next;
    e768:	681a      	ldr	r2, [r3, #0]
    e76a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    e76c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    e76e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    e770:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
	if (!tx->next) {
    e774:	2b00      	cmp	r3, #0
    e776:	f000 858a 	beq.w	f28e <__kernel_ram_size+0x12e>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e77a:	2303      	movs	r3, #3
	return 0;
    e77c:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e77e:	7133      	strb	r3, [r6, #4]
}
    e780:	b005      	add	sp, #20
    e782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->tx_ctrl) {
    e786:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    e78a:	2a00      	cmp	r2, #0
    e78c:	f000 8583 	beq.w	f296 <__kernel_ram_size+0x136>
	tx->next = conn->tx_ctrl_last->next;
    e790:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    e794:	681a      	ldr	r2, [r3, #0]
    e796:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    e798:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    e79a:	6803      	ldr	r3, [r0, #0]
    e79c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
}
    e7a0:	e7e8      	b.n	e774 <ull_conn_rx+0x1fc>
		 (conn->llcp_enc.refresh &&
    e7a2:	f1b8 0f02 	cmp.w	r8, #2
    e7a6:	f000 8248 	beq.w	ec3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1da>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    e7aa:	f1b8 0f0b 	cmp.w	r8, #11
    e7ae:	f000 8579 	beq.w	f2a4 <__kernel_ram_size+0x144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    e7b2:	f1b8 0f04 	cmp.w	r8, #4
    e7b6:	f47f af11 	bne.w	e5dc <ull_conn_rx+0x64>
		if (conn->lll.role ||
    e7ba:	7f73      	ldrb	r3, [r6, #29]
    e7bc:	2b0d      	cmp	r3, #13
    e7be:	d1ae      	bne.n	e71e <ull_conn_rx+0x1a6>
    e7c0:	4632      	mov	r2, r6
		conn->llcp_enc.pause_rx = 1U;
    e7c2:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    e7c6:	f852 1f20 	ldr.w	r1, [r2, #32]!
    e7ca:	6852      	ldr	r2, [r2, #4]
    e7cc:	f8c4 20fa 	str.w	r2, [r4, #250]	; 0xfa
    e7d0:	f8c4 10f6 	str.w	r1, [r4, #246]	; 0xf6
    e7d4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    e7d6:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e7da:	682a      	ldr	r2, [r5, #0]
		conn->llcp_enc.pause_rx = 1U;
    e7dc:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e7e0:	2103      	movs	r1, #3
		conn->llcp_enc.pause_rx = 1U;
    e7e2:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	int nack = 0;
    e7e6:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e7e8:	7111      	strb	r1, [r2, #4]
		break;
    e7ea:	e71a      	b.n	e622 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    e7ec:	7f43      	ldrb	r3, [r0, #29]
    e7ee:	2b09      	cmp	r3, #9
    e7f0:	d195      	bne.n	e71e <ull_conn_rx+0x1a6>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e7f2:	f1b8 0f14 	cmp.w	r8, #20
    e7f6:	f000 85af 	beq.w	f358 <__kernel_ram_size+0x1f8>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    e7fa:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
	if (/* Local idle, and Peer request then complete the Peer procedure
    e7fe:	f894 1199 	ldrb.w	r1, [r4, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
    e802:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
    e806:	f8b4 905c 	ldrh.w	r9, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
    e80a:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
    e80e:	f8b4 b060 	ldrh.w	fp, [r4, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    e812:	9200      	str	r2, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
    e814:	4291      	cmp	r1, r2
    e816:	f001 81cc 	beq.w	fbb2 <__kernel_ram_size+0xa52>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    e81a:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	struct node_tx *tx = NULL;
    e81e:	2100      	movs	r1, #0
	       tx) ||
    e820:	f002 0207 	and.w	r2, r2, #7
    e824:	2a02      	cmp	r2, #2
    e826:	f000 85ad 	beq.w	f384 <__kernel_ram_size+0x224>
    e82a:	f896 801f 	ldrb.w	r8, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
    e82e:	f1b8 0f15 	cmp.w	r8, #21
    e832:	f43f aef5 	beq.w	e620 <ull_conn_rx+0xa8>
			mem_release(tx, &mem_conn_tx_ctrl.free);
    e836:	4608      	mov	r0, r1
    e838:	4908      	ldr	r1, [pc, #32]	; (e85c <ull_conn_rx+0x2e4>)
    e83a:	f7fa fb81 	bl	8f40 <mem_release>
			if (conn->llcp_length.state ==
    e83e:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    e842:	f003 0307 	and.w	r3, r3, #7
    e846:	2b04      	cmp	r3, #4
    e848:	f47f aeea 	bne.w	e620 <ull_conn_rx+0xa8>
				return -EBUSY;
    e84c:	f06f 000f 	mvn.w	r0, #15
    e850:	e6e7      	b.n	e622 <ull_conn_rx+0xaa>
    e852:	bf00      	nop
    e854:	200021d0 	.word	0x200021d0
    e858:	fffffb03 	.word	0xfffffb03
    e85c:	2000241c 	.word	0x2000241c
		if (!conn->lll.role ||
    e860:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    e864:	2b00      	cmp	r3, #0
    e866:	f6bf af5a 	bge.w	e71e <ull_conn_rx+0x1a6>
    e86a:	7f43      	ldrb	r3, [r0, #29]
    e86c:	2b0c      	cmp	r3, #12
    e86e:	f47f af56 	bne.w	e71e <ull_conn_rx+0x1a6>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
    e872:	f8b0 0029 	ldrh.w	r0, [r0, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
    e876:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    e878:	1ac3      	subs	r3, r0, r3
    e87a:	041b      	lsls	r3, r3, #16
    e87c:	f100 87f4 	bmi.w	f868 <__kernel_ram_size+0x708>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    e880:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    e884:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    e888:	1a9b      	subs	r3, r3, r2
    e88a:	f003 0303 	and.w	r3, r3, #3
    e88e:	2b02      	cmp	r3, #2
    e890:	f001 80b8 	beq.w	fa04 <__kernel_ram_size+0x8a4>
	if (!conn_upd_curr) {
    e894:	4be1      	ldr	r3, [pc, #900]	; (ec1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1bc>)
    e896:	681a      	ldr	r2, [r3, #0]
    e898:	2a00      	cmp	r2, #0
    e89a:	f001 80b0 	beq.w	f9fe <__kernel_ram_size+0x89e>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
    e89e:	f896 3020 	ldrb.w	r3, [r6, #32]
    e8a2:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
    e8a6:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    e8aa:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
    e8ae:	f240 42e2 	movw	r2, #1250	; 0x4e2
    e8b2:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
    e8b6:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
    e8ba:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    e8be:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    e8c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
    e8c6:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
    e8ca:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
    e8ce:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
    e8d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
    e8d6:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    e8da:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
    e8de:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    e8e2:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
    e8e6:	f8a4 00ec 	strh.w	r0, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    e8ea:	f023 0307 	bic.w	r3, r3, #7
	link->mem = conn->llcp_rx;
    e8ee:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    e8f2:	f043 0304 	orr.w	r3, r3, #4
	conn->llcp_cu.ack--;
    e8f6:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    e8f8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
    e8fc:	f884 2105 	strb.w	r2, [r4, #261]	; 0x105
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    e900:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	conn->llcp_cu.timeout =
    e904:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
	link->mem = conn->llcp_rx;
    e908:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
    e90a:	682b      	ldr	r3, [r5, #0]
    e90c:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
    e90e:	682b      	ldr	r3, [r5, #0]
    e910:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
    e914:	2300      	movs	r3, #0
    e916:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e918:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    e91c:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    e920:	4293      	cmp	r3, r2
    e922:	d007      	beq.n	e934 <ull_conn_rx+0x3bc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    e924:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e928:	f003 0307 	and.w	r3, r3, #7
    e92c:	2b04      	cmp	r3, #4
    e92e:	d101      	bne.n	e934 <ull_conn_rx+0x3bc>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e930:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
		conn->procedure_expire = 0U;
    e934:	2300      	movs	r3, #0
    e936:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
    e93a:	4618      	mov	r0, r3
		break;
    e93c:	e671      	b.n	e622 <ull_conn_rx+0xaa>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
    e93e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    e942:	2b00      	cmp	r3, #0
    e944:	f6ff aeeb 	blt.w	e71e <ull_conn_rx+0x1a6>
    e948:	7f47      	ldrb	r7, [r0, #29]
    e94a:	2f03      	cmp	r7, #3
    e94c:	f47f aee7 	bne.w	e71e <ull_conn_rx+0x1a6>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
    e950:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
					 conn->lll.phy_rx))) {
    e954:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
    e958:	f890 2020 	ldrb.w	r2, [r0, #32]
    e95c:	430b      	orrs	r3, r1
    e95e:	f003 0307 	and.w	r3, r3, #7
    e962:	4213      	tst	r3, r2
    e964:	f43f ae5c 	beq.w	e620 <ull_conn_rx+0xa8>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
    e968:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    e96c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    e970:	1a9b      	subs	r3, r3, r2
    e972:	f003 0303 	and.w	r3, r3, #3
    e976:	2b02      	cmp	r3, #2
    e978:	f43f ae52 	beq.w	e620 <ull_conn_rx+0xa8>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
    e97c:	f104 00ed 	add.w	r0, r4, #237	; 0xed
    e980:	f002 f8f2 	bl	10b68 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
    e984:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.chan_map.initiate = 1U;
    e988:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp_ack -= 2U;
    e98c:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
    e98e:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
    e990:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CHAN_MAP;
    e994:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e998:	682a      	ldr	r2, [r5, #0]
			conn->llcp.chan_map.initiate = 1U;
    e99a:	f043 0301 	orr.w	r3, r3, #1
    e99e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	int nack = 0;
    e9a2:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e9a4:	7117      	strb	r7, [r2, #4]

		break;
    e9a6:	e63c      	b.n	e622 <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
    e9a8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    e9ac:	2b00      	cmp	r3, #0
    e9ae:	f6bf aeb6 	bge.w	e71e <ull_conn_rx+0x1a6>
    e9b2:	7f43      	ldrb	r3, [r0, #29]
    e9b4:	2b05      	cmp	r3, #5
    e9b6:	f47f aeb2 	bne.w	e71e <ull_conn_rx+0x1a6>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    e9ba:	f890 1020 	ldrb.w	r1, [r0, #32]
    e9be:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    e9c2:	ea41 0003 	orr.w	r0, r1, r3
    e9c6:	f010 0007 	ands.w	r0, r0, #7
    e9ca:	f040 86de 	bne.w	f78a <__kernel_ram_size+0x62a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e9ce:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
    e9d2:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    e9d6:	428b      	cmp	r3, r1
    e9d8:	f43f aecf 	beq.w	e77a <ull_conn_rx+0x202>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    e9dc:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e9e0:	f003 0303 	and.w	r3, r3, #3
    e9e4:	2b02      	cmp	r3, #2
    e9e6:	f47f aec8 	bne.w	e77a <ull_conn_rx+0x202>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    e9ea:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
    e9ee:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e9f2:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
    e9f6:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    e9fa:	4611      	mov	r1, r2
    e9fc:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    ea00:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		if (!conn->llcp_phy.cmd) {
    ea04:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
    ea08:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    ea0c:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    ea10:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
    ea14:	f43f ae0e 	beq.w	e634 <ull_conn_rx+0xbc>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ea18:	682b      	ldr	r3, [r5, #0]
    ea1a:	2115      	movs	r1, #21
    ea1c:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
    ea1e:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
    ea20:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
    ea22:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    ea26:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ea2a:	77b3      	strb	r3, [r6, #30]
		if (err) {
    ea2c:	e5f9      	b.n	e622 <ull_conn_rx+0xaa>
		if (conn->lll.role ||
    ea2e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    ea32:	2b00      	cmp	r3, #0
    ea34:	f6ff ae73 	blt.w	e71e <ull_conn_rx+0x1a6>
    ea38:	7f43      	ldrb	r3, [r0, #29]
    ea3a:	2b03      	cmp	r3, #3
    ea3c:	f47f ae6f 	bne.w	e71e <ull_conn_rx+0x1a6>
		if (!conn->lll.role &&
    ea40:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    ea44:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    ea48:	429a      	cmp	r2, r3
    ea4a:	f43f ae96 	beq.w	e77a <ull_conn_rx+0x202>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    ea4e:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
    ea52:	f001 0303 	and.w	r3, r1, #3
    ea56:	2b02      	cmp	r3, #2
    ea58:	f47f ae8f 	bne.w	e77a <ull_conn_rx+0x202>
			conn->llcp_phy.tx &= p->rx_phys;
    ea5c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
			conn->llcp_phy.rx &= p->tx_phys;
    ea60:	f890 2020 	ldrb.w	r2, [r0, #32]
			conn->llcp_phy.tx &= p->rx_phys;
    ea64:	f3c1 0082 	ubfx	r0, r1, #2, #3
    ea68:	4003      	ands	r3, r0
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    ea6a:	009b      	lsls	r3, r3, #2
    ea6c:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
    ea70:	ea02 1251 	and.w	r2, r2, r1, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    ea74:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    ea78:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    ea7c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    ea80:	d002      	beq.n	ea88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28>
    ea82:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    ea86:	d105      	bne.n	ea94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34>
				conn->llcp_phy.tx = 0;
    ea88:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    ea8c:	f003 0303 	and.w	r3, r3, #3
    ea90:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			conn->llcp_phy.pause_tx = 1U;
    ea94:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
    ea98:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
    ea9a:	f043 0301 	orr.w	r3, r3, #1
    ea9e:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
    eaa2:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    eaa6:	e668      	b.n	e77a <ull_conn_rx+0x202>
		if (!conn->lll.role ||
    eaa8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    eaac:	2b00      	cmp	r3, #0
    eaae:	f6bf ae36 	bge.w	e71e <ull_conn_rx+0x1a6>
    eab2:	7f45      	ldrb	r5, [r0, #29]
    eab4:	2d01      	cmp	r5, #1
    eab6:	f47f ae32 	bne.w	e71e <ull_conn_rx+0x1a6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    eaba:	4859      	ldr	r0, [pc, #356]	; (ec20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c0>)
    eabc:	f7fa fa2a 	bl	8f14 <mem_acquire>
		if (!tx) {
    eac0:	4603      	mov	r3, r0
    eac2:	2800      	cmp	r0, #0
    eac4:	f000 84ba 	beq.w	f43c <__kernel_ram_size+0x2dc>
	conn->llcp_enc.pause_rx = 1U;
    eac8:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
    eacc:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
    ead0:	f022 0205 	bic.w	r2, r2, #5
	conn->lll.enc_rx = 0;
    ead4:	f36f 01c3 	bfc	r1, #3, #1
    ead8:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
    eadc:	f042 0205 	orr.w	r2, r2, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eae0:	7901      	ldrb	r1, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
    eae2:	f884 2152 	strb.w	r2, [r4, #338]	; 0x152
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    eae6:	7145      	strb	r5, [r0, #5]
	    conn->tx_head &&
    eae8:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eaec:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    eaf0:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eaf2:	7119      	strb	r1, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    eaf4:	71d8      	strb	r0, [r3, #7]
	if (
    eaf6:	2a00      	cmp	r2, #0
    eaf8:	f000 8422 	beq.w	f340 <__kernel_ram_size+0x1e0>
	    !conn->llcp_enc.pause_tx &&
    eafc:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
    eb00:	0788      	lsls	r0, r1, #30
    eb02:	f100 841d 	bmi.w	f340 <__kernel_ram_size+0x1e0>
	    !conn->llcp_phy.pause_tx &&
    eb06:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
    eb0a:	07c9      	lsls	r1, r1, #31
    eb0c:	f100 8418 	bmi.w	f340 <__kernel_ram_size+0x1e0>
		if (conn->tx_head == conn->tx_data) {
    eb10:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
    eb14:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
    eb16:	bf04      	itt	eq
    eb18:	6811      	ldreq	r1, [r2, #0]
    eb1a:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    eb1e:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    eb22:	2900      	cmp	r1, #0
    eb24:	f001 805b 	beq.w	fbde <__kernel_ram_size+0xa7e>
	tx->next = conn->tx_ctrl_last->next;
    eb28:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    eb2c:	6811      	ldr	r1, [r2, #0]
    eb2e:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
    eb30:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
    eb32:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
	if (!tx->next) {
    eb36:	681a      	ldr	r2, [r3, #0]
    eb38:	2a00      	cmp	r2, #0
    eb3a:	f47f ae1e 	bne.w	e77a <ull_conn_rx+0x202>
		conn->tx_data_last = tx;
    eb3e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    eb42:	e61a      	b.n	e77a <ull_conn_rx+0x202>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
    eb44:	7f43      	ldrb	r3, [r0, #29]
    eb46:	2b09      	cmp	r3, #9
    eb48:	f47f ade9 	bne.w	e71e <ull_conn_rx+0x1a6>
	       (features[1] << 8) | (features[2] << 16);
    eb4c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    eb50:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    eb54:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
    eb58:	4932      	ldr	r1, [pc, #200]	; (ec24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c4>)
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    eb5a:	4d33      	ldr	r5, [pc, #204]	; (ec28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c8>)
	       (features[1] << 8) | (features[2] << 16);
    eb5c:	041b      	lsls	r3, r3, #16
    eb5e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    eb62:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    eb64:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
    eb68:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    eb6a:	4013      	ands	r3, r2
    eb6c:	f3c3 0310 	ubfx	r3, r3, #0, #17
    eb70:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
    eb74:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    eb78:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    eb7c:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
    eb80:	041b      	lsls	r3, r3, #16
    eb82:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    eb86:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
    eb88:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
    eb8c:	f894 0118 	ldrb.w	r0, [r4, #280]	; 0x118
    eb90:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	       (features[1] << 8) | (features[2] << 16);
    eb94:	430b      	orrs	r3, r1
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    eb96:	401d      	ands	r5, r3
	conn->common.fex_valid = 1U;
    eb98:	f042 0201 	orr.w	r2, r2, #1
	conn->procedure_expire = 0U;
    eb9c:	2300      	movs	r3, #0
	conn->llcp_feature.features_peer =
    eb9e:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
	conn->common.fex_valid = 1U;
    eba2:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
	conn->procedure_expire = 0U;
    eba6:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
    ebaa:	4618      	mov	r0, r3
}
    ebac:	e539      	b.n	e622 <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
    ebae:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
    ebb2:	2900      	cmp	r1, #0
    ebb4:	f6bf adb3 	bge.w	e71e <ull_conn_rx+0x1a6>
		if (conn->lll.role ||
    ebb8:	7f71      	ldrb	r1, [r6, #29]
    ebba:	2909      	cmp	r1, #9
    ebbc:	f47f adaf 	bne.w	e71e <ull_conn_rx+0x1a6>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
    ebc0:	1d31      	adds	r1, r6, #4
    ebc2:	4620      	mov	r0, r4
}
    ebc4:	b005      	add	sp, #20
    ebc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
    ebca:	f7ff b92f 	b.w	de2c <feature_rsp_send.isra.0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    ebce:	7f73      	ldrb	r3, [r6, #29]
    ebd0:	2b02      	cmp	r3, #2
    ebd2:	f47f ada4 	bne.w	e71e <ull_conn_rx+0x1a6>
		} else if ((conn->llcp_conn_param.ack !=
    ebd6:	f894 1171 	ldrb.w	r1, [r4, #369]	; 0x171
    ebda:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    ebde:	f896 2020 	ldrb.w	r2, [r6, #32]
    ebe2:	4299      	cmp	r1, r3
    ebe4:	d002      	beq.n	ebec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18c>
			    conn->llcp_conn_param.req) &&
    ebe6:	2a0f      	cmp	r2, #15
    ebe8:	f000 84e8 	beq.w	f5bc <__kernel_ram_size+0x45c>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
    ebec:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    ebf0:	f894 1199 	ldrb.w	r1, [r4, #409]	; 0x199
    ebf4:	4299      	cmp	r1, r3
    ebf6:	d002      	beq.n	ebfe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x19e>
    ebf8:	2a14      	cmp	r2, #20
    ebfa:	f000 8692 	beq.w	f922 <__kernel_ram_size+0x7c2>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
    ebfe:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
    ec02:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    ec06:	428b      	cmp	r3, r1
    ec08:	d002      	beq.n	ec10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b0>
    ec0a:	2a16      	cmp	r2, #22
    ec0c:	f000 86c6 	beq.w	f99c <__kernel_ram_size+0x83c>
			switch (llctrl->unknown_rsp.type) {
    ec10:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ec12:	bf04      	itt	eq
    ec14:	2303      	moveq	r3, #3
    ec16:	7133      	strbeq	r3, [r6, #4]
				break;
    ec18:	e68c      	b.n	e934 <ull_conn_rx+0x3bc>
    ec1a:	bf00      	nop
    ec1c:	20002398 	.word	0x20002398
    ec20:	2000241c 	.word	0x2000241c
    ec24:	fffe30d0 	.word	0xfffe30d0
    ec28:	0001ff7f 	.word	0x0001ff7f
		((!conn->llcp_enc.refresh &&
    ec2c:	f1b8 0f07 	cmp.w	r8, #7
    ec30:	d0cd      	beq.n	ebce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    ec32:	f1b8 0f02 	cmp.w	r8, #2
    ec36:	f040 830f 	bne.w	f258 <__kernel_ram_size+0xf8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    ec3a:	7f73      	ldrb	r3, [r6, #29]
    ec3c:	2b02      	cmp	r3, #2
    ec3e:	f47f ad6e 	bne.w	e71e <ull_conn_rx+0x1a6>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
    ec42:	f896 3020 	ldrb.w	r3, [r6, #32]
    ec46:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ec4a:	2303      	movs	r3, #3
    ec4c:	7133      	strb	r3, [r6, #4]
	int nack = 0;
    ec4e:	2000      	movs	r0, #0
}
    ec50:	e4e7      	b.n	e622 <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
    ec52:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    ec56:	2b00      	cmp	r3, #0
    ec58:	f6bf ad61 	bge.w	e71e <ull_conn_rx+0x1a6>
    ec5c:	7f43      	ldrb	r3, [r0, #29]
    ec5e:	2b08      	cmp	r3, #8
    ec60:	f47f ad5d 	bne.w	e71e <ull_conn_rx+0x1a6>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
    ec64:	f8b0 0025 	ldrh.w	r0, [r0, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    ec68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    ec6a:	1ac3      	subs	r3, r0, r3
    ec6c:	041f      	lsls	r7, r3, #16
    ec6e:	f100 85fb 	bmi.w	f868 <__kernel_ram_size+0x708>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    ec72:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    ec76:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    ec7a:	1a9b      	subs	r3, r3, r2
    ec7c:	f003 0303 	and.w	r3, r3, #3
    ec80:	2b02      	cmp	r3, #2
    ec82:	f000 86bf 	beq.w	fa04 <__kernel_ram_size+0x8a4>
    ec86:	4633      	mov	r3, r6
	conn->llcp.chan_map.initiate = 0U;
    ec88:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    ec8c:	f853 5f20 	ldr.w	r5, [r3, #32]!
    ec90:	f8c4 50ed 	str.w	r5, [r4, #237]	; 0xed
    ec94:	791b      	ldrb	r3, [r3, #4]
    ec96:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	conn->llcp_ack -= 2U;
    ec9a:	3a02      	subs	r2, #2
	conn->llcp.chan_map.initiate = 0U;
    ec9c:	f36f 0100 	bfc	r1, #0, #1
	conn->llcp_type = LLCP_CHAN_MAP;
    eca0:	2502      	movs	r5, #2
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    eca2:	2303      	movs	r3, #3
	conn->llcp.chan_map.instant = instant;
    eca4:	f8a4 00f2 	strh.w	r0, [r4, #242]	; 0xf2
	conn->llcp_ack -= 2U;
    eca8:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->llcp.chan_map.initiate = 0U;
    ecac:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
	conn->llcp_type = LLCP_CHAN_MAP;
    ecb0:	f884 50ea 	strb.w	r5, [r4, #234]	; 0xea
	int nack = 0;
    ecb4:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ecb6:	7133      	strb	r3, [r6, #4]
		if (err) {
    ecb8:	e4b3      	b.n	e622 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
    ecba:	7f45      	ldrb	r5, [r0, #29]
    ecbc:	2d01      	cmp	r5, #1
    ecbe:	f47f ad2e 	bne.w	e71e <ull_conn_rx+0x1a6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ecc2:	48d2      	ldr	r0, [pc, #840]	; (f00c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5ac>)
    ecc4:	f7fa f926 	bl	8f14 <mem_acquire>
	if (!tx) {
    ecc8:	4601      	mov	r1, r0
    ecca:	2800      	cmp	r0, #0
    eccc:	f000 83b6 	beq.w	f43c <__kernel_ram_size+0x2dc>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ecd0:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    ecd2:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ecd4:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    ecd8:	2213      	movs	r2, #19
	ctrl_tx_sec_enqueue(conn, tx);
    ecda:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ecdc:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    ecde:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    ece0:	f7ff f812 	bl	dd08 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ece4:	2303      	movs	r3, #3
    ece6:	7133      	strb	r3, [r6, #4]
	return 0;
    ece8:	2000      	movs	r0, #0
    ecea:	e49a      	b.n	e622 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    ecec:	7f73      	ldrb	r3, [r6, #29]
    ecee:	2b03      	cmp	r3, #3
    ecf0:	f47f ad15 	bne.w	e71e <ull_conn_rx+0x1a6>
	switch (rej_ext_ind->reject_opcode) {
    ecf4:	f896 3020 	ldrb.w	r3, [r6, #32]
    ecf8:	3b03      	subs	r3, #3
    ecfa:	2b13      	cmp	r3, #19
    ecfc:	f63f ad3d 	bhi.w	e77a <ull_conn_rx+0x202>
    ed00:	a201      	add	r2, pc, #4	; (adr r2, ed08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a8>)
    ed02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ed06:	bf00      	nop
    ed08:	0000f1e1 	.word	0x0000f1e1
    ed0c:	0000e77b 	.word	0x0000e77b
    ed10:	0000e77b 	.word	0x0000e77b
    ed14:	0000e77b 	.word	0x0000e77b
    ed18:	0000e77b 	.word	0x0000e77b
    ed1c:	0000e77b 	.word	0x0000e77b
    ed20:	0000e77b 	.word	0x0000e77b
    ed24:	0000e77b 	.word	0x0000e77b
    ed28:	0000e77b 	.word	0x0000e77b
    ed2c:	0000e77b 	.word	0x0000e77b
    ed30:	0000e77b 	.word	0x0000e77b
    ed34:	0000e77b 	.word	0x0000e77b
    ed38:	0000f17b 	.word	0x0000f17b
    ed3c:	0000e77b 	.word	0x0000e77b
    ed40:	0000e77b 	.word	0x0000e77b
    ed44:	0000e77b 	.word	0x0000e77b
    ed48:	0000e77b 	.word	0x0000e77b
    ed4c:	0000f13d 	.word	0x0000f13d
    ed50:	0000e77b 	.word	0x0000e77b
    ed54:	0000f221 	.word	0x0000f221
		if (conn->lll.role ||
    ed58:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    ed5c:	2b00      	cmp	r3, #0
    ed5e:	f6ff acde 	blt.w	e71e <ull_conn_rx+0x1a6>
    ed62:	7f43      	ldrb	r3, [r0, #29]
    ed64:	2b18      	cmp	r3, #24
    ed66:	f47f acda 	bne.w	e71e <ull_conn_rx+0x1a6>
		if (!conn->lll.role &&
    ed6a:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    ed6e:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    ed72:	429a      	cmp	r2, r3
    ed74:	f43f ad01 	beq.w	e77a <ull_conn_rx+0x202>
		    (conn->llcp_conn_param.state ==
    ed78:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		     conn->llcp_conn_param.ack) &&
    ed7c:	f003 0307 	and.w	r3, r3, #7
    ed80:	2b04      	cmp	r3, #4
    ed82:	f47f acfa 	bne.w	e77a <ull_conn_rx+0x202>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    ed86:	8c07      	ldrh	r7, [r0, #32]
			if ((interval_min < 6) ||
    ed88:	2f05      	cmp	r7, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    ed8a:	b2ba      	uxth	r2, r7
			if ((interval_min < 6) ||
    ed8c:	f240 8588 	bls.w	f8a0 <__kernel_ram_size+0x740>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    ed90:	8c40      	ldrh	r0, [r0, #34]	; 0x22
			if ((interval_min < 6) ||
    ed92:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    ed96:	b283      	uxth	r3, r0
			if ((interval_min < 6) ||
    ed98:	f200 8582 	bhi.w	f8a0 <__kernel_ram_size+0x740>
			    (interval_max > 3200) ||
    ed9c:	429a      	cmp	r2, r3
    ed9e:	f200 857f 	bhi.w	f8a0 <__kernel_ram_size+0x740>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    eda2:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
    eda4:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    eda8:	fa1f fc81 	uxth.w	ip, r1
			    (interval_min > interval_max) ||
    edac:	f080 8578 	bcs.w	f8a0 <__kernel_ram_size+0x740>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    edb0:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			    (latency > 499) ||
    edb2:	f1a2 0e0a 	sub.w	lr, r2, #10
    edb6:	fa1f fe8e 	uxth.w	lr, lr
    edba:	f640 4976 	movw	r9, #3190	; 0xc76
    edbe:	45ce      	cmp	lr, r9
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    edc0:	fa1f f882 	uxth.w	r8, r2
			    (latency > 499) ||
    edc4:	f200 856c 	bhi.w	f8a0 <__kernel_ram_size+0x740>
			     ((latency + 1) * interval_max)) ||
    edc8:	fb0c 3c03 	mla	ip, ip, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
    edcc:	ebbc 0f88 	cmp.w	ip, r8, lsl #2
    edd0:	f080 8566 	bcs.w	f8a0 <__kernel_ram_size+0x740>
			     ((latency + 1) * interval_max)) ||
    edd4:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
    edd8:	4573      	cmp	r3, lr
    edda:	f0c0 8561 	bcc.w	f8a0 <__kernel_ram_size+0x740>
			conn->procedure_expire = 0U;
    edde:	2300      	movs	r3, #0
			conn->llcp_conn_param.timeout =	timeout;
    ede0:	f8a4 217a 	strh.w	r2, [r4, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
    ede4:	f884 e17c 	strb.w	lr, [r4, #380]	; 0x17c
			conn->llcp_conn_param.interval_min = interval_min;
    ede8:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
    edec:	f8a4 0176 	strh.w	r0, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
    edf0:	f8a4 1178 	strh.w	r1, [r4, #376]	; 0x178
			conn->procedure_expire = 0U;
    edf4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    edf8:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
    edfc:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    ee00:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    ee04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    ee08:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
    ee0c:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
    ee10:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
    ee14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
    ee18:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
    ee1c:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
    ee20:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
    ee24:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
    ee28:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
    ee2c:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    ee30:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    ee34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
    ee38:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
    ee3c:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
    ee40:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    ee44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
    ee48:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
    ee4c:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
    ee50:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    ee54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
    ee58:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
    ee5c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
    ee60:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
    ee64:	682e      	ldr	r6, [r5, #0]
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    ee66:	2101      	movs	r1, #1
				sys_le16_to_cpu(cpr->offset5);
    ee68:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    ee6c:	f361 0202 	bfi	r2, r1, #0, #3
			conn->llcp_conn_param.offset5 =
    ee70:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    ee74:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ee78:	e47f      	b.n	e77a <ull_conn_rx+0x202>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    ee7a:	7f43      	ldrb	r3, [r0, #29]
    ee7c:	2b18      	cmp	r3, #24
    ee7e:	f47f ac4e 	bne.w	e71e <ull_conn_rx+0x1a6>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
    ee82:	4f63      	ldr	r7, [pc, #396]	; (f010 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5b0>)
    ee84:	683b      	ldr	r3, [r7, #0]
    ee86:	2b00      	cmp	r3, #0
    ee88:	f000 8227 	beq.w	f2da <__kernel_ram_size+0x17a>
    ee8c:	429c      	cmp	r4, r3
    ee8e:	f000 8224 	beq.w	f2da <__kernel_ram_size+0x17a>
			nack = reject_ext_ind_send(conn, *rx,
    ee92:	1d01      	adds	r1, r0, #4
    ee94:	2320      	movs	r3, #32
    ee96:	4620      	mov	r0, r4
    ee98:	220f      	movs	r2, #15
}
    ee9a:	b005      	add	sp, #20
    ee9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
    eea0:	f7fe be7e 	b.w	dba0 <reject_ext_ind_send.isra.0>
		if (conn->lll.role ||
    eea4:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
    eea8:	2900      	cmp	r1, #0
    eeaa:	f6bf ae85 	bge.w	ebb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x158>
    eeae:	e436      	b.n	e71e <ull_conn_rx+0x1a6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
    eeb0:	7f43      	ldrb	r3, [r0, #29]
    eeb2:	2b01      	cmp	r3, #1
    eeb4:	f47f ac33 	bne.w	e71e <ull_conn_rx+0x1a6>
		conn->procedure_expire = 0U;
    eeb8:	2300      	movs	r3, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    eeba:	2203      	movs	r2, #3
		conn->procedure_expire = 0U;
    eebc:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
    eec0:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    eec2:	7132      	strb	r2, [r6, #4]
		break;
    eec4:	f7ff bbad 	b.w	e622 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
    eec8:	7f43      	ldrb	r3, [r0, #29]
    eeca:	2b03      	cmp	r3, #3
    eecc:	f47f ac27 	bne.w	e71e <ull_conn_rx+0x1a6>
		if (!conn->lll.role) {
    eed0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    eed4:	2b00      	cmp	r3, #0
    eed6:	f2c0 82ce 	blt.w	f476 <__kernel_ram_size+0x316>
			if ((conn->llcp_phy.ack !=
    eeda:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
			     conn->llcp_phy.req) &&
    eede:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
			if ((conn->llcp_phy.ack !=
    eee2:	428a      	cmp	r2, r1
    eee4:	d007      	beq.n	eef6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x496>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    eee6:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    eeea:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
    eeee:	3b01      	subs	r3, #1
    eef0:	2b02      	cmp	r3, #2
    eef2:	f240 8511 	bls.w	f918 <__kernel_ram_size+0x7b8>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    eef6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    eefa:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
    eefe:	1a1b      	subs	r3, r3, r0
    ef00:	f003 0303 	and.w	r3, r3, #3
    ef04:	2b02      	cmp	r3, #2
    ef06:	f000 842e 	beq.w	f766 <__kernel_ram_size+0x606>
				     LLCP_ENCRYPTION)) ||
    ef0a:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
    ef0e:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    ef12:	4298      	cmp	r0, r3
    ef14:	f43f ab97 	beq.w	e646 <ull_conn_rx+0xce>
				nack = reject_ext_ind_send(conn, *rx,
    ef18:	1d31      	adds	r1, r6, #4
    ef1a:	4620      	mov	r0, r4
    ef1c:	232a      	movs	r3, #42	; 0x2a
    ef1e:	2216      	movs	r2, #22
    ef20:	e7bb      	b.n	ee9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    ef22:	7f45      	ldrb	r5, [r0, #29]
    ef24:	2d06      	cmp	r5, #6
    ef26:	f47f abfa 	bne.w	e71e <ull_conn_rx+0x1a6>
	if (!conn->llcp_version.tx) {
    ef2a:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
    ef2e:	07df      	lsls	r7, r3, #31
    ef30:	f140 8317 	bpl.w	f562 <__kernel_ram_size+0x402>
	} else if (!conn->llcp_version.rx) {
    ef34:	f013 0302 	ands.w	r3, r3, #2
    ef38:	f47f ac1f 	bne.w	e77a <ull_conn_rx+0x202>
		conn->llcp_version.ack = conn->llcp_version.req;
    ef3c:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
		conn->procedure_expire = 0U;
    ef40:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_version.ack = conn->llcp_version.req;
    ef44:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
	conn->llcp_version.version_number = v->version_number;
    ef48:	f896 3020 	ldrb.w	r3, [r6, #32]
    ef4c:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    ef50:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
    ef54:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
    ef58:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    ef5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ef60:	f8a4 2128 	strh.w	r2, [r4, #296]	; 0x128
		sys_le16_to_cpu(v->sub_version_number);
    ef64:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    ef68:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
    ef6c:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
    ef70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
    ef74:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
	conn->llcp_version.rx = 1U;
    ef78:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	return 0;
    ef7c:	2000      	movs	r0, #0
    ef7e:	f7ff bb50 	b.w	e622 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
    ef82:	7f73      	ldrb	r3, [r6, #29]
    ef84:	2b02      	cmp	r3, #2
    ef86:	f47f abca 	bne.w	e71e <ull_conn_rx+0x1a6>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
    ef8a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    ef8e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    ef92:	429a      	cmp	r2, r3
    ef94:	d004      	beq.n	efa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x540>
    ef96:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
    ef9a:	2a03      	cmp	r2, #3
    ef9c:	f000 846c 	beq.w	f878 <__kernel_ram_size+0x718>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    efa0:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
    efa4:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    efa8:	4283      	cmp	r3, r0
    efaa:	f000 847f 	beq.w	f8ac <__kernel_ram_size+0x74c>
		rej_ext_ind->error_code = rej_ind->error_code;
    efae:	f896 2020 	ldrb.w	r2, [r6, #32]
    efb2:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    efb6:	2a23      	cmp	r2, #35	; 0x23
    efb8:	d012      	beq.n	efe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x580>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    efba:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
    efbe:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
    efc2:	f884 01a9 	strb.w	r0, [r4, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    efc6:	f3c3 0002 	ubfx	r0, r3, #0, #3
    efca:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    efce:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
    efd2:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    efd4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
    efd8:	f884 11ab 	strb.w	r1, [r4, #427]	; 0x1ab
		conn->procedure_expire = 0U;
    efdc:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
    efe0:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    efe4:	0759      	lsls	r1, r3, #29
    efe6:	f57f abc8 	bpl.w	e77a <ull_conn_rx+0x202>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    efea:	2315      	movs	r3, #21
	p->status = rej_ext_ind->error_code;
    efec:	7732      	strb	r2, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    efee:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
    eff0:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    eff4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    eff8:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
    effa:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    effe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f002:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
    f004:	2000      	movs	r0, #0
    f006:	f7ff bb0c 	b.w	e622 <ull_conn_rx+0xaa>
    f00a:	bf00      	nop
    f00c:	2000241c 	.word	0x2000241c
    f010:	20002398 	.word	0x20002398
		if (!conn->lll.role ||
    f014:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    f018:	2b00      	cmp	r3, #0
    f01a:	f6bf ab80 	bge.w	e71e <ull_conn_rx+0x1a6>
    f01e:	7f73      	ldrb	r3, [r6, #29]
    f020:	2b17      	cmp	r3, #23
    f022:	f47f ab7c 	bne.w	e71e <ull_conn_rx+0x1a6>
    f026:	4633      	mov	r3, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    f028:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    f02c:	f853 2f20 	ldr.w	r2, [r3, #32]!
    f030:	685b      	ldr	r3, [r3, #4]
    f032:	f8c4 3159 	str.w	r3, [r4, #345]	; 0x159
    f036:	f8c4 2155 	str.w	r2, [r4, #341]	; 0x155
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
    f03a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    f03e:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
    f042:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    f046:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f04a:	682b      	ldr	r3, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    f04c:	2201      	movs	r2, #1
    f04e:	f362 0101 	bfi	r1, r2, #0, #2
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f052:	2203      	movs	r2, #3
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    f054:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f058:	711a      	strb	r2, [r3, #4]
		conn->llcp_ack -= 2U;
    f05a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
    f05e:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
    f062:	3b02      	subs	r3, #2
    f064:	4632      	mov	r2, r6
    f066:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    f06a:	f852 1f2a 	ldr.w	r1, [r2, #42]!
		conn->llcp_enc.pause_rx = 1U;
    f06e:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    f072:	6852      	ldr	r2, [r2, #4]
    f074:	f8c4 20f2 	str.w	r2, [r4, #242]	; 0xf2
    f078:	f8c4 10ee 	str.w	r1, [r4, #238]	; 0xee
    f07c:	f8d6 1032 	ldr.w	r1, [r6, #50]	; 0x32
		conn->procedure_expire = conn->procedure_reload;
    f080:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
    f084:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
		conn->llcp_enc.pause_rx = 1U;
    f088:	f043 0301 	orr.w	r3, r3, #1
    f08c:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
    f090:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	int nack = 0;
    f094:	2000      	movs	r0, #0
		break;
    f096:	f7ff bac4 	b.w	e622 <ull_conn_rx+0xaa>
		if (conn->lll.role ||
    f09a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    f09e:	2b00      	cmp	r3, #0
    f0a0:	f6bf ab8b 	bge.w	e7ba <ull_conn_rx+0x242>
    f0a4:	f7ff bb3b 	b.w	e71e <ull_conn_rx+0x1a6>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
    f0a8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    f0ac:	2b00      	cmp	r3, #0
    f0ae:	f6ff ab36 	blt.w	e71e <ull_conn_rx+0x1a6>
    f0b2:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
    f0b6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    f0ba:	4299      	cmp	r1, r3
    f0bc:	f43f ab2f 	beq.w	e71e <ull_conn_rx+0x1a6>
    f0c0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    f0c4:	2b03      	cmp	r3, #3
    f0c6:	f47f ab2a 	bne.w	e71e <ull_conn_rx+0x1a6>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
    f0ca:	7f71      	ldrb	r1, [r6, #29]
    f0cc:	2901      	cmp	r1, #1
    f0ce:	f47f ab26 	bne.w	e71e <ull_conn_rx+0x1a6>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    f0d2:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    f0d6:	f36f 0201 	bfc	r2, #0, #2
    f0da:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	int nack = 0;
    f0de:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f0e0:	7133      	strb	r3, [r6, #4]
		break;
    f0e2:	f7ff ba9e 	b.w	e622 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    f0e6:	7f43      	ldrb	r3, [r0, #29]
    f0e8:	2b01      	cmp	r3, #1
    f0ea:	f47f ab18 	bne.w	e71e <ull_conn_rx+0x1a6>
		if (conn->lll.role) {
    f0ee:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    f0f2:	2b00      	cmp	r3, #0
    f0f4:	f2c0 80b8 	blt.w	f268 <__kernel_ram_size+0x108>
			conn->llcp_enc.pause_rx = 0U;
    f0f8:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
    f0fc:	f021 0103 	bic.w	r1, r1, #3
    f100:	f884 1152 	strb.w	r1, [r4, #338]	; 0x152
		if (conn->llcp_enc.refresh) {
    f104:	074e      	lsls	r6, r1, #29
    f106:	f57f ac15 	bpl.w	e934 <ull_conn_rx+0x3bc>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    f10a:	682b      	ldr	r3, [r5, #0]
			conn->llcp_enc.refresh = 0U;
    f10c:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    f110:	2212      	movs	r2, #18
			conn->llcp_enc.refresh = 0U;
    f112:	f884 1152 	strb.w	r1, [r4, #338]	; 0x152
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    f116:	711a      	strb	r2, [r3, #4]
		conn->procedure_expire = 0U;
    f118:	e40c      	b.n	e934 <ull_conn_rx+0x3bc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    f11a:	7f43      	ldrb	r3, [r0, #29]
    f11c:	2b01      	cmp	r3, #1
    f11e:	f47f aafe 	bne.w	e71e <ull_conn_rx+0x1a6>
	} else if (!conn->lll.role) {
    f122:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    f126:	2b00      	cmp	r3, #0
    f128:	f280 80c0 	bge.w	f2ac <__kernel_ram_size+0x14c>
		conn->lll.enc_tx = 0;
    f12c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    f130:	f36f 1304 	bfc	r3, #4, #1
    f134:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
    f138:	f7ff bb1f 	b.w	e77a <ull_conn_rx+0x202>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
    f13c:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
    f140:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    f144:	4293      	cmp	r3, r2
    f146:	f43f ab18 	beq.w	e77a <ull_conn_rx+0x202>
	conn->procedure_expire = 0U;
    f14a:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f14c:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
    f14e:	f884 2199 	strb.w	r2, [r4, #409]	; 0x199
	conn->procedure_expire = 0U;
    f152:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f156:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    f158:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    f15c:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
    f160:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    f164:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    f168:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f16a:	2215      	movs	r2, #21
	int nack = 0;
    f16c:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    f16e:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
    f170:	8475      	strh	r5, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    f172:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f174:	77f2      	strb	r2, [r6, #31]
	if (err) {
    f176:	f7ff ba54 	b.w	e622 <ull_conn_rx+0xaa>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    f17a:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
    f17e:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    f182:	429a      	cmp	r2, r3
    f184:	f43f aaf9 	beq.w	e77a <ull_conn_rx+0x202>
	if (!lll->role && (rej_ext_ind->error_code ==
    f188:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
    f18c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
    f190:	2900      	cmp	r1, #0
    f192:	f2c0 8560 	blt.w	fc56 <__kernel_ram_size+0xaf6>
    f196:	2a1a      	cmp	r2, #26
    f198:	f000 8566 	beq.w	fc68 <__kernel_ram_size+0xb08>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    f19c:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    f1a0:	f002 0107 	and.w	r1, r2, #7
    f1a4:	2904      	cmp	r1, #4
    f1a6:	f000 8539 	beq.w	fc1c <__kernel_ram_size+0xabc>
	if (!conn->llcp_conn_param.cmd) {
    f1aa:	0713      	lsls	r3, r2, #28
    f1ac:	f57f aae5 	bpl.w	e77a <ull_conn_rx+0x202>
	cu->status = rej_ext_ind->error_code;
    f1b0:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    f1b4:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f1b6:	2211      	movs	r2, #17
    f1b8:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
    f1ba:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
    f1bc:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	cu->latency = lll->latency;
    f1c0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
	cu->interval = lll->interval;
    f1c2:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
    f1c4:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
    f1c8:	237d      	movs	r3, #125	; 0x7d
    f1ca:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
    f1ce:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
    f1d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
    f1d4:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
    f1d6:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
    f1da:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
    f1dc:	f7ff ba21 	b.w	e622 <ull_conn_rx+0xaa>
		if ((conn->llcp_ack != conn->llcp_req) &&
    f1e0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    f1e4:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    f1e8:	429a      	cmp	r2, r3
    f1ea:	f43f aac6 	beq.w	e77a <ull_conn_rx+0x202>
    f1ee:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
    f1f2:	2a03      	cmp	r2, #3
    f1f4:	f47f aac1 	bne.w	e77a <ull_conn_rx+0x202>
	conn->llcp_enc.pause_rx = 0U;
    f1f8:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
    f1fc:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
    f200:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
    f204:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    f206:	f884 2152 	strb.w	r2, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
    f20a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
    f20e:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
    f212:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    f216:	220d      	movs	r2, #13
	int nack = 0;
    f218:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    f21a:	77f2      	strb	r2, [r6, #31]
	if (err) {
    f21c:	f7ff ba01 	b.w	e622 <ull_conn_rx+0xaa>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    f220:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
    f224:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    f228:	4283      	cmp	r3, r0
    f22a:	f43f aaa6 	beq.w	e77a <ull_conn_rx+0x202>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    f22e:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
    f232:	2a23      	cmp	r2, #35	; 0x23
    f234:	f47f aec1 	bne.w	efba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x55a>
    f238:	e6d2      	b.n	efe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x580>
	       (conn->lll.role &&
    f23a:	2800      	cmp	r0, #0
    f23c:	f43f acf6 	beq.w	ec2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1cc>
		 (conn->llcp_enc.refresh &&
    f240:	f1b8 0f02 	cmp.w	r8, #2
    f244:	f43f acf9 	beq.w	ec3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1da>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f248:	f1b8 0f0b 	cmp.w	r8, #11
    f24c:	f43f aa63 	beq.w	e716 <ull_conn_rx+0x19e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    f250:	f1b8 0f03 	cmp.w	r8, #3
    f254:	f43f aee3 	beq.w	f01e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5be>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f258:	f1b8 0f06 	cmp.w	r8, #6
    f25c:	f47f a9c6 	bne.w	e5ec <ull_conn_rx+0x74>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    f260:	7f73      	ldrb	r3, [r6, #29]
    f262:	2b01      	cmp	r3, #1
    f264:	f47f aa5b 	bne.w	e71e <ull_conn_rx+0x1a6>
			if ((conn->llcp_req != conn->llcp_ack) &&
    f268:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
    f26c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    f270:	4283      	cmp	r3, r0
    f272:	f000 83b6 	beq.w	f9e2 <__kernel_ram_size+0x882>
    f276:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    f27a:	2b03      	cmp	r3, #3
    f27c:	f47f aa4f 	bne.w	e71e <ull_conn_rx+0x1a6>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    f280:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    f284:	f36f 0301 	bfc	r3, #0, #2
    f288:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
    f28c:	e73a      	b.n	f104 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6a4>
		conn->tx_data_last = tx;
    f28e:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    f292:	f7ff ba72 	b.w	e77a <ull_conn_rx+0x202>
			tx->next = conn->tx_head;
    f296:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    f298:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    f29c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    f2a0:	f7ff ba68 	b.w	e774 <ull_conn_rx+0x1fc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    f2a4:	7f73      	ldrb	r3, [r6, #29]
    f2a6:	2b01      	cmp	r3, #1
    f2a8:	f47f aa39 	bne.w	e71e <ull_conn_rx+0x1a6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f2ac:	48bf      	ldr	r0, [pc, #764]	; (f5ac <__kernel_ram_size+0x44c>)
    f2ae:	f7f9 fe31 	bl	8f14 <mem_acquire>
		if (!tx) {
    f2b2:	4603      	mov	r3, r0
    f2b4:	2800      	cmp	r0, #0
    f2b6:	f000 80c1 	beq.w	f43c <__kernel_ram_size+0x2dc>
	conn->llcp_enc.pause_rx = 1U;
    f2ba:	f894 0152 	ldrb.w	r0, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
    f2be:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f2c2:	7919      	ldrb	r1, [r3, #4]
	conn->llcp_enc.pause_rx = 1U;
    f2c4:	f040 0001 	orr.w	r0, r0, #1
    f2c8:	f884 0152 	strb.w	r0, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
    f2cc:	f022 0218 	bic.w	r2, r2, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    f2d0:	2001      	movs	r0, #1
	conn->lll.enc_rx = 0;
    f2d2:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    f2d6:	7158      	strb	r0, [r3, #5]
    f2d8:	e406      	b.n	eae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>
		if (!conn->lll.role) {
    f2da:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
    f2de:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
    f2e2:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    f2e6:	9000      	str	r0, [sp, #0]
    f2e8:	f1bc 0f00 	cmp.w	ip, #0
    f2ec:	f2c0 80aa 	blt.w	f444 <__kernel_ram_size+0x2e4>
			if ((conn->llcp_conn_param.req !=
    f2f0:	4290      	cmp	r0, r2
    f2f2:	d009      	beq.n	f308 <__kernel_ram_size+0x1a8>
			    ((conn->llcp_conn_param.state ==
    f2f4:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					conn->llcp_conn_param.ack) &&
    f2f8:	f012 0207 	ands.w	r2, r2, #7
    f2fc:	f000 82ca 	beq.w	f894 <__kernel_ram_size+0x734>
			      LLCP_CPR_STATE_REQ) ||
    f300:	3a04      	subs	r2, #4
    f302:	2a01      	cmp	r2, #1
    f304:	f240 82c6 	bls.w	f894 <__kernel_ram_size+0x734>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    f308:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    f30c:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
    f310:	1a12      	subs	r2, r2, r0
    f312:	f002 0203 	and.w	r2, r2, #3
    f316:	2a02      	cmp	r2, #2
    f318:	f000 8444 	beq.w	fba4 <__kernel_ram_size+0xa44>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    f31c:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
    f320:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    f324:	4290      	cmp	r0, r2
    f326:	f000 83af 	beq.w	fa88 <__kernel_ram_size+0x928>
				nack = reject_ext_ind_send(conn, *rx,
    f32a:	1d31      	adds	r1, r6, #4
    f32c:	4620      	mov	r0, r4
    f32e:	232a      	movs	r3, #42	; 0x2a
    f330:	220f      	movs	r2, #15
    f332:	e5b2      	b.n	ee9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    f334:	7f73      	ldrb	r3, [r6, #29]
    f336:	2b01      	cmp	r3, #1
    f338:	f43f aede 	beq.w	f0f8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x698>
    f33c:	f7ff b9ef 	b.w	e71e <ull_conn_rx+0x1a6>
		if (!conn->tx_ctrl) {
    f340:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    f344:	2900      	cmp	r1, #0
    f346:	f47f abef 	bne.w	eb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc8>
			tx->next = conn->tx_head;
    f34a:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
    f34c:	e9c4 336c 	strd	r3, r3, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    f350:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
    f354:	f7ff bbef 	b.w	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f358:	4894      	ldr	r0, [pc, #592]	; (f5ac <__kernel_ram_size+0x44c>)
    f35a:	f7f9 fddb 	bl	8f14 <mem_acquire>
		if (!tx) {
    f35e:	4601      	mov	r1, r0
    f360:	2800      	cmp	r0, #0
    f362:	d06b      	beq.n	f43c <__kernel_ram_size+0x2dc>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    f364:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
    f368:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
    f36c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
    f370:	f8b4 905c 	ldrh.w	r9, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
    f374:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
    f378:	f8b4 b060 	ldrh.w	fp, [r4, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    f37c:	9000      	str	r0, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
    f37e:	4290      	cmp	r0, r2
    f380:	f040 84b1 	bne.w	fce6 <__kernel_ram_size+0xb86>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
    f384:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    f386:	2a1a      	cmp	r2, #26
    f388:	f240 826c 	bls.w	f864 <__kernel_ram_size+0x704>
			eff_tx_octets = MIN(max_rx_octets,
    f38c:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
    f390:	4282      	cmp	r2, r0
    f392:	bf28      	it	cs
    f394:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    f396:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
    f39a:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
    f39e:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
    f3a2:	f1be 0f1b 	cmp.w	lr, #27
    f3a6:	bf34      	ite	cc
    f3a8:	469e      	movcc	lr, r3
    f3aa:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
    f3ae:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
			eff_rx_octets = MIN(max_tx_octets,
    f3b2:	4618      	mov	r0, r3
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
    f3b4:	bf34      	ite	cc
    f3b6:	4658      	movcc	r0, fp
    f3b8:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
    f3bc:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
    f3c0:	bf34      	ite	cc
    f3c2:	46d4      	movcc	ip, sl
    f3c4:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
    f3c8:	459e      	cmp	lr, r3
    f3ca:	f000 82bf 	beq.w	f94c <__kernel_ram_size+0x7ec>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
    f3ce:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
    f3d0:	f8a4 e19c 	strh.w	lr, [r4, #412]	; 0x19c
			conn->llcp_length.ack = conn->llcp_length.req - 1;
    f3d4:	3b01      	subs	r3, #1
    f3d6:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			conn->llcp_length.tx_octets = eff_tx_octets;
    f3da:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.state =
    f3de:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
			conn->llcp_length.rx_time = eff_rx_time;
    f3e2:	f8a4 c1a0 	strh.w	ip, [r4, #416]	; 0x1a0
			conn->llcp_length.tx_time = eff_tx_time;
    f3e6:	f8a4 01a2 	strh.w	r0, [r4, #418]	; 0x1a2
			if (tx) {
    f3ea:	2900      	cmp	r1, #0
    f3ec:	f000 8342 	beq.w	fa74 <__kernel_ram_size+0x914>
				conn->llcp_length.state =
    f3f0:	2605      	movs	r6, #5
    f3f2:	f366 0302 	bfi	r3, r6, #0, #3
    f3f6:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
			link->mem = conn->llcp_rx;
    f3fa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f3fe:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
    f400:	682b      	ldr	r3, [r5, #0]
    f402:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
    f404:	682b      	ldr	r3, [r5, #0]
    f406:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			*rx = NULL;
    f40a:	2300      	movs	r3, #0
    f40c:	602b      	str	r3, [r5, #0]
	if (tx) {
    f40e:	2900      	cmp	r1, #0
    f410:	f43f a906 	beq.w	e620 <ull_conn_rx+0xa8>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f414:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
    f416:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f418:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f41c:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f41e:	2509      	movs	r5, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
    f420:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
    f422:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
    f426:	4620      	mov	r0, r4
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
    f428:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f42c:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f42e:	714d      	strb	r5, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f430:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    f432:	f7fe fc69 	bl	dd08 <ctrl_tx_sec_enqueue>
	return 0;
    f436:	2000      	movs	r0, #0
}
    f438:	f7ff b8f3 	b.w	e622 <ull_conn_rx+0xaa>
			return -ENOBUFS;
    f43c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f440:	f7ff b8ef 	b.w	e622 <ull_conn_rx+0xaa>
		} else if ((conn->llcp_conn_param.req ==
    f444:	9900      	ldr	r1, [sp, #0]
    f446:	4291      	cmp	r1, r2
    f448:	f000 8104 	beq.w	f654 <__kernel_ram_size+0x4f4>
			    conn->llcp_conn_param.ack) ||
    f44c:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    f450:	0790      	lsls	r0, r2, #30
    f452:	f000 80ff 	beq.w	f654 <__kernel_ram_size+0x4f4>
			LL_ASSERT(0);
    f456:	4a56      	ldr	r2, [pc, #344]	; (f5b0 <__kernel_ram_size+0x450>)
    f458:	4956      	ldr	r1, [pc, #344]	; (f5b4 <__kernel_ram_size+0x454>)
    f45a:	4857      	ldr	r0, [pc, #348]	; (f5b8 <__kernel_ram_size+0x458>)
    f45c:	f241 63d1 	movw	r3, #5841	; 0x16d1
    f460:	f00e fc45 	bl	1dcee <printk>
    f464:	4040      	eors	r0, r0
    f466:	f380 8811 	msr	BASEPRI, r0
    f46a:	f04f 0003 	mov.w	r0, #3
    f46e:	df02      	svc	2
	int nack = 0;
    f470:	2000      	movs	r0, #0
    f472:	f7ff b8d6 	b.w	e622 <ull_conn_rx+0xaa>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f476:	484d      	ldr	r0, [pc, #308]	; (f5ac <__kernel_ram_size+0x44c>)
    f478:	f7f9 fd4c 	bl	8f14 <mem_acquire>
	if (!tx) {
    f47c:	4602      	mov	r2, r0
    f47e:	2800      	cmp	r0, #0
    f480:	d0dc      	beq.n	f43c <__kernel_ram_size+0x2dc>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f482:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
    f486:	f894 e1a9 	ldrb.w	lr, [r4, #425]	; 0x1a9
    f48a:	f894 71a8 	ldrb.w	r7, [r4, #424]	; 0x1a8
    f48e:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f492:	2002      	movs	r0, #2
    f494:	f360 0101 	bfi	r1, r0, #0, #2
	if (conn->llcp_phy.ack ==
    f498:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f49a:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
    f49e:	f3c3 0502 	ubfx	r5, r3, #0, #3
    f4a2:	f003 0c07 	and.w	ip, r3, #7
    f4a6:	f3c3 1002 	ubfx	r0, r3, #4, #3
    f4aa:	d113      	bne.n	f4d4 <__kernel_ram_size+0x374>
		conn->llcp_phy.tx =
    f4ac:	b2c9      	uxtb	r1, r1
    f4ae:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
    f4b2:	f894 c1ab 	ldrb.w	ip, [r4, #427]	; 0x1ab
		conn->procedure_expire =
    f4b6:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    f4ba:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_phy.ack--;
    f4be:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
    f4c0:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
    f4c4:	f36f 0c82 	bfc	ip, #2, #1
		conn->llcp_phy.ack--;
    f4c8:	f884 71a9 	strb.w	r7, [r4, #425]	; 0x1a9
		conn->llcp_phy.rx =
    f4cc:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
		conn->llcp_phy.cmd = 0U;
    f4d0:	f884 c1ab 	strb.w	ip, [r4, #427]	; 0x1ab
	conn->llcp_phy.rx &= p->tx_phys;
    f4d4:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
	conn->llcp_phy.tx &= p->rx_phys;
    f4d8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
    f4dc:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
    f4e0:	f3c1 0c82 	ubfx	ip, r1, #2, #3
    f4e4:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
    f4e8:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
    f4ec:	009b      	lsls	r3, r3, #2
    f4ee:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
    f4f2:	f001 0103 	and.w	r1, r1, #3
    f4f6:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    f4f8:	2703      	movs	r7, #3
	conn->llcp_phy.tx &= p->rx_phys;
    f4fa:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f4fe:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    f500:	7157      	strb	r7, [r2, #5]
	    conn->tx_head &&
    f502:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    f506:	7215      	strb	r5, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f508:	4339      	orrs	r1, r7
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    f50a:	2517      	movs	r5, #23
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    f50c:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f50e:	7111      	strb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    f510:	71d5      	strb	r5, [r2, #7]
	if (
    f512:	2b00      	cmp	r3, #0
    f514:	f000 812e 	beq.w	f774 <__kernel_ram_size+0x614>
	    !conn->llcp_enc.pause_tx &&
    f518:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
    f51c:	0788      	lsls	r0, r1, #30
    f51e:	f100 8129 	bmi.w	f774 <__kernel_ram_size+0x614>
	    !conn->llcp_phy.pause_tx &&
    f522:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
    f526:	07c9      	lsls	r1, r1, #31
    f528:	f100 8124 	bmi.w	f774 <__kernel_ram_size+0x614>
		if (conn->tx_head == conn->tx_data) {
    f52c:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
    f530:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
    f532:	bf04      	itt	eq
    f534:	6819      	ldreq	r1, [r3, #0]
    f536:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    f53a:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    f53e:	2900      	cmp	r1, #0
    f540:	f000 8411 	beq.w	fd66 <__kernel_ram_size+0xc06>
	tx->next = conn->tx_ctrl_last->next;
    f544:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    f548:	6819      	ldr	r1, [r3, #0]
    f54a:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    f54c:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    f54e:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
	if (!tx->next) {
    f552:	6813      	ldr	r3, [r2, #0]
    f554:	2b00      	cmp	r3, #0
    f556:	f47f a910 	bne.w	e77a <ull_conn_rx+0x202>
		conn->tx_data_last = tx;
    f55a:	f8c4 21c0 	str.w	r2, [r4, #448]	; 0x1c0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f55e:	f7ff b90c 	b.w	e77a <ull_conn_rx+0x202>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f562:	4812      	ldr	r0, [pc, #72]	; (f5ac <__kernel_ram_size+0x44c>)
    f564:	f7f9 fcd6 	bl	8f14 <mem_acquire>
		if (!tx) {
    f568:	4601      	mov	r1, r0
    f56a:	2800      	cmp	r0, #0
    f56c:	f43f af66 	beq.w	f43c <__kernel_ram_size+0x2dc>
		conn->llcp_version.tx = 1U;
    f570:	f894 2126 	ldrb.w	r2, [r4, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f574:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
    f576:	f042 0201 	orr.w	r2, r2, #1
    f57a:	f884 2126 	strb.w	r2, [r4, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f57e:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    f582:	220c      	movs	r2, #12
		pdu_tx->len =
    f584:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f586:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
    f588:	250b      	movs	r5, #11
		v->sub_version_number =
    f58a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    f58e:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    f592:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    f594:	2205      	movs	r2, #5
    f596:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
    f598:	72cb      	strb	r3, [r1, #11]
    f59a:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
    f59c:	720d      	strb	r5, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    f59e:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
    f5a0:	4620      	mov	r0, r4
    f5a2:	f7fe fbb1 	bl	dd08 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f5a6:	2303      	movs	r3, #3
    f5a8:	7133      	strb	r3, [r6, #4]
    f5aa:	e4cd      	b.n	ef48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e8>
    f5ac:	2000241c 	.word	0x2000241c
    f5b0:	00027934 	.word	0x00027934
    f5b4:	00027650 	.word	0x00027650
    f5b8:	000275f0 	.word	0x000275f0
			conn->llcp_conn_param.disabled = 1U;
    f5bc:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
			if (!conn->lll.role) {
    f5c0:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
			conn->llcp_conn_param.disabled = 1U;
    f5c4:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
    f5c8:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
    f5ca:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
			if (!conn->lll.role) {
    f5ce:	f2c0 821d 	blt.w	fa0c <__kernel_ram_size+0x8ac>
				LL_ASSERT(conn->llcp_cu.req ==
    f5d2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    f5d6:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
    f5da:	4293      	cmp	r3, r2
    f5dc:	d00e      	beq.n	f5fc <__kernel_ram_size+0x49c>
    f5de:	4ad6      	ldr	r2, [pc, #856]	; (f938 <__kernel_ram_size+0x7d8>)
    f5e0:	49d6      	ldr	r1, [pc, #856]	; (f93c <__kernel_ram_size+0x7dc>)
    f5e2:	48d7      	ldr	r0, [pc, #860]	; (f940 <__kernel_ram_size+0x7e0>)
    f5e4:	f241 7355 	movw	r3, #5973	; 0x1755
    f5e8:	f00e fb81 	bl	1dcee <printk>
    f5ec:	4040      	eors	r0, r0
    f5ee:	f380 8811 	msr	BASEPRI, r0
    f5f2:	f04f 0003 	mov.w	r0, #3
    f5f6:	df02      	svc	2
    f5f8:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
				conn->llcp_conn_param.state =
    f5fc:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
				conn->llcp_cu.interval =
    f600:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    f604:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
				conn->llcp_conn_param.state =
    f608:	2305      	movs	r3, #5
    f60a:	f363 0002 	bfi	r0, r3, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f60e:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
				conn->llcp_cu.latency =
    f612:	f8b4 6178 	ldrh.w	r6, [r4, #376]	; 0x178
				conn->llcp_cu.ack--;
    f616:	1e53      	subs	r3, r2, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    f618:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.ack--;
    f61c:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f620:	0092      	lsls	r2, r2, #2
				conn->llcp_cu.win_size = 1U;
    f622:	2301      	movs	r3, #1
    f624:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f628:	431a      	orrs	r2, r3
    f62a:	f021 0307 	bic.w	r3, r1, #7
    f62e:	431a      	orrs	r2, r3
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f630:	6829      	ldr	r1, [r5, #0]
				conn->llcp_cu.timeout =
    f632:	f8b4 517a 	ldrh.w	r5, [r4, #378]	; 0x17a
				conn->llcp_conn_param.state =
    f636:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f63a:	f884 2106 	strb.w	r2, [r4, #262]	; 0x106
				conn->llcp_cu.win_offset_us = 0U;
    f63e:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f640:	2203      	movs	r2, #3
				conn->llcp_cu.win_offset_us = 0U;
    f642:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
				conn->llcp_cu.latency =
    f646:	f8a4 610a 	strh.w	r6, [r4, #266]	; 0x10a
				conn->llcp_cu.timeout =
    f64a:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f64e:	710a      	strb	r2, [r1, #4]
				break;
    f650:	f7fe bfe7 	b.w	e622 <ull_conn_rx+0xaa>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    f654:	f8b6 8020 	ldrh.w	r8, [r6, #32]
			if ((interval_min < 6) ||
    f658:	f1b8 0f05 	cmp.w	r8, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    f65c:	fa1f f288 	uxth.w	r2, r8
			if ((interval_min < 6) ||
    f660:	d97b      	bls.n	f75a <__kernel_ram_size+0x5fa>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    f662:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
			if ((interval_min < 6) ||
    f666:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    f66a:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < 6) ||
    f66e:	d874      	bhi.n	f75a <__kernel_ram_size+0x5fa>
			    (interval_max > 3200) ||
    f670:	428a      	cmp	r2, r1
    f672:	d872      	bhi.n	f75a <__kernel_ram_size+0x5fa>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    f674:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
    f678:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    f67c:	fa1f fa8c 	uxth.w	sl, ip
			    (interval_min > interval_max) ||
    f680:	d26b      	bcs.n	f75a <__kernel_ram_size+0x5fa>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    f682:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
			    (latency > 499) ||
    f684:	f1a0 090a 	sub.w	r9, r0, #10
    f688:	fa1f f989 	uxth.w	r9, r9
    f68c:	f640 4b76 	movw	fp, #3190	; 0xc76
    f690:	45d9      	cmp	r9, fp
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    f692:	b282      	uxth	r2, r0
			    (latency > 499) ||
    f694:	d861      	bhi.n	f75a <__kernel_ram_size+0x5fa>
			     ((latency + 1) * interval_max)) ||
    f696:	fb0a 1901 	mla	r9, sl, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
    f69a:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
    f69e:	d25c      	bcs.n	f75a <__kernel_ram_size+0x5fa>
			     ((latency + 1) * interval_max)) ||
    f6a0:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
    f6a4:	4559      	cmp	r1, fp
    f6a6:	d358      	bcc.n	f75a <__kernel_ram_size+0x5fa>
			conn->llcp_conn_param.latency =	latency;
    f6a8:	f8a4 c178 	strh.w	ip, [r4, #376]	; 0x178
			conn->llcp_conn_param.interval_min = interval_min;
    f6ac:	f8a4 8174 	strh.w	r8, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
    f6b0:	f8a4 e176 	strh.w	lr, [r4, #374]	; 0x176
			conn->llcp_conn_param.timeout =	timeout;
    f6b4:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
    f6b8:	f884 b17c 	strb.w	fp, [r4, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    f6bc:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
    f6c0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
			     lll->interval) ||
    f6c4:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    f6c8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    f6cc:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
    f6d0:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
    f6d4:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    f6d8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset0 =
    f6dc:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
    f6e0:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
    f6e4:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    f6e8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
    f6ec:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
    f6f0:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
    f6f4:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    f6f8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
    f6fc:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
    f700:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
    f704:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    f708:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
    f70c:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
    f710:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    f714:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
    f718:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
    f71c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
    f720:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
    f724:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
    f728:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
    f72a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
    f72e:	f8a4 018a 	strh.w	r0, [r4, #394]	; 0x18a
			if ((conn->llcp_conn_param.interval_max !=
    f732:	f000 8302 	beq.w	fd3a <__kernel_ram_size+0xbda>
				conn->llcp_conn_param.state =
    f736:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    f73a:	2103      	movs	r1, #3
    f73c:	f361 0202 	bfi	r2, r1, #0, #3
    f740:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack--;
    f744:	9a00      	ldr	r2, [sp, #0]
    f746:	3a01      	subs	r2, #1
    f748:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
			if (!conn_upd_curr) {
    f74c:	2b00      	cmp	r3, #0
    f74e:	f47e af67 	bne.w	e620 <ull_conn_rx+0xa8>
				conn_upd_curr = conn;
    f752:	603c      	str	r4, [r7, #0]
	int nack = 0;
    f754:	4618      	mov	r0, r3
    f756:	f7fe bf64 	b.w	e622 <ull_conn_rx+0xaa>
				nack = reject_ext_ind_send(conn, *rx,
    f75a:	1d31      	adds	r1, r6, #4
    f75c:	4620      	mov	r0, r4
    f75e:	231e      	movs	r3, #30
    f760:	220f      	movs	r2, #15
    f762:	f7ff bb9a 	b.w	ee9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43a>
				      0x03) == 0x02) &&
    f766:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    f76a:	2b03      	cmp	r3, #3
    f76c:	f47f abd4 	bne.w	ef18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4b8>
    f770:	f7ff bbcb 	b.w	ef0a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4aa>
		if (!conn->tx_ctrl) {
    f774:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    f778:	2900      	cmp	r1, #0
    f77a:	f47f aee3 	bne.w	f544 <__kernel_ram_size+0x3e4>
			tx->next = conn->tx_head;
    f77e:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
    f780:	e9c4 226c 	strd	r2, r2, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    f784:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
    f788:	e6e3      	b.n	f552 <__kernel_ram_size+0x3f2>
	instant = sys_le16_to_cpu(ind->instant);
    f78a:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    f78c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    f78e:	1a82      	subs	r2, r0, r2
    f790:	0412      	lsls	r2, r2, #16
    f792:	d469      	bmi.n	f868 <__kernel_ram_size+0x708>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    f794:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    f798:	f894 c0e9 	ldrb.w	ip, [r4, #233]	; 0xe9
    f79c:	eba2 020c 	sub.w	r2, r2, ip
    f7a0:	f002 0203 	and.w	r2, r2, #3
    f7a4:	2a02      	cmp	r2, #2
    f7a6:	f000 812d 	beq.w	fa04 <__kernel_ram_size+0x8a4>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f7aa:	f894 c1a8 	ldrb.w	ip, [r4, #424]	; 0x1a8
    f7ae:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    f7b2:	4562      	cmp	r2, ip
    f7b4:	d019      	beq.n	f7ea <__kernel_ram_size+0x68a>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    f7b6:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f7ba:	f002 0203 	and.w	r2, r2, #3
    f7be:	2a02      	cmp	r2, #2
    f7c0:	d113      	bne.n	f7ea <__kernel_ram_size+0x68a>
		conn->llcp_phy.pause_tx = 0U;
    f7c2:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f7c6:	f894 60ec 	ldrb.w	r6, [r4, #236]	; 0xec
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f7ca:	f884 c1a9 	strb.w	ip, [r4, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
    f7ce:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f7d2:	f3c2 0c80 	ubfx	ip, r2, #2, #1
    f7d6:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
    f7da:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
    f7de:	f884 21ab 	strb.w	r2, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f7e2:	f884 60ec 	strb.w	r6, [r4, #236]	; 0xec
		conn->procedure_expire = 0U;
    f7e6:	f8a4 c0cc 	strh.w	ip, [r4, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
    f7ea:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
    f7ee:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
    f7f2:	009b      	lsls	r3, r3, #2
    f7f4:	f003 031c 	and.w	r3, r3, #28
    f7f8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    f7fc:	f002 0202 	and.w	r2, r2, #2
    f800:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
    f802:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
	conn->llcp.phy_upd_ind.initiate = 0U;
    f806:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	link->mem = conn->llcp_rx;
    f80a:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
    f80c:	682b      	ldr	r3, [r5, #0]
    f80e:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
    f810:	682b      	ldr	r3, [r5, #0]
    f812:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
    f816:	2300      	movs	r3, #0
    f818:	602b      	str	r3, [r5, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
    f81a:	f7fd f9ab 	bl	cb74 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
    f81e:	4605      	mov	r5, r0
    f820:	2800      	cmp	r0, #0
    f822:	f000 81ce 	beq.w	fbc2 <__kernel_ram_size+0xa62>
	rx_dle->hdr.link->mem = conn->llcp_rx;
    f826:	682b      	ldr	r3, [r5, #0]
    f828:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    f82c:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
    f82e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
    f832:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp_rx = rx_dle;
    f836:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
	conn->llcp_ack -= 2U;
    f83a:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
    f83c:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
    f83e:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
    f842:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
    f846:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
    f84a:	f43e aee9 	beq.w	e620 <ull_conn_rx+0xa8>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    f84e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    f852:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f856:	f363 1206 	bfi	r2, r3, #4, #3
    f85a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	int nack = 0;
    f85e:	2000      	movs	r0, #0
    f860:	f7fe bedf 	b.w	e622 <ull_conn_rx+0xaa>
    f864:	464a      	mov	r2, r9
    f866:	e596      	b.n	f396 <__kernel_ram_size+0x236>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f868:	2303      	movs	r3, #3
    f86a:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
    f86c:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
    f86e:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
	int nack = 0;
    f872:	2000      	movs	r0, #0
    f874:	f7fe bed5 	b.w	e622 <ull_conn_rx+0xaa>
	conn->llcp_enc.pause_rx = 0U;
    f878:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
    f87c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
    f880:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
    f884:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    f886:	f884 2152 	strb.w	r2, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
    f88a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
    f88e:	4618      	mov	r0, r3
    f890:	f7fe bec7 	b.w	e622 <ull_conn_rx+0xaa>
				nack = reject_ext_ind_send(conn, *rx,
    f894:	1d31      	adds	r1, r6, #4
    f896:	4620      	mov	r0, r4
    f898:	2323      	movs	r3, #35	; 0x23
    f89a:	220f      	movs	r2, #15
    f89c:	f7ff bafd 	b.w	ee9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43a>
				nack = reject_ext_ind_send(conn, *rx,
    f8a0:	1d31      	adds	r1, r6, #4
    f8a2:	4620      	mov	r0, r4
    f8a4:	231e      	movs	r3, #30
    f8a6:	2210      	movs	r2, #16
    f8a8:	f7ff baf7 	b.w	ee9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43a>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    f8ac:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
    f8b0:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    f8b4:	429a      	cmp	r2, r3
    f8b6:	f43f ac41 	beq.w	f13c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6dc>
		rej_ext_ind->error_code = rej_ind->error_code;
    f8ba:	f896 3020 	ldrb.w	r3, [r6, #32]
    f8be:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
    f8c2:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
    f8c6:	2a00      	cmp	r2, #0
    f8c8:	f2c0 8190 	blt.w	fbec <__kernel_ram_size+0xa8c>
    f8cc:	2b1a      	cmp	r3, #26
    f8ce:	f000 81cb 	beq.w	fc68 <__kernel_ram_size+0xb08>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    f8d2:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    f8d6:	f002 0307 	and.w	r3, r2, #7
    f8da:	2b04      	cmp	r3, #4
    f8dc:	f47f ac65 	bne.w	f1aa <__kernel_ram_size+0x4a>
		LL_ASSERT(conn_upd_curr == conn);
    f8e0:	4f18      	ldr	r7, [pc, #96]	; (f944 <__kernel_ram_size+0x7e4>)
    f8e2:	683b      	ldr	r3, [r7, #0]
    f8e4:	429c      	cmp	r4, r3
    f8e6:	d00e      	beq.n	f906 <__kernel_ram_size+0x7a6>
    f8e8:	4a13      	ldr	r2, [pc, #76]	; (f938 <__kernel_ram_size+0x7d8>)
    f8ea:	4917      	ldr	r1, [pc, #92]	; (f948 <__kernel_ram_size+0x7e8>)
    f8ec:	4814      	ldr	r0, [pc, #80]	; (f940 <__kernel_ram_size+0x7e0>)
    f8ee:	f241 03de 	movw	r3, #4318	; 0x10de
    f8f2:	f00e f9fc 	bl	1dcee <printk>
    f8f6:	4040      	eors	r0, r0
    f8f8:	f380 8811 	msr	BASEPRI, r0
    f8fc:	f04f 0003 	mov.w	r0, #3
    f900:	df02      	svc	2
    f902:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    f906:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    f90a:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    f90e:	2300      	movs	r3, #0
    f910:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
    f912:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    f916:	e448      	b.n	f1aa <__kernel_ram_size+0x4a>
				nack = reject_ext_ind_send(conn, *rx,
    f918:	1d01      	adds	r1, r0, #4
    f91a:	2323      	movs	r3, #35	; 0x23
    f91c:	4620      	mov	r0, r4
    f91e:	f7ff bafe 	b.w	ef1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4be>
			conn->llcp_length.disabled = 1U;
    f922:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
    f926:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			conn->llcp_length.disabled = 1U;
    f92a:	f042 0308 	orr.w	r3, r2, #8
    f92e:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
    f932:	f7fe bfff 	b.w	e934 <ull_conn_rx+0x3bc>
    f936:	bf00      	nop
    f938:	00027934 	.word	0x00027934
    f93c:	00027a18 	.word	0x00027a18
    f940:	000275f0 	.word	0x000275f0
    f944:	20002398 	.word	0x20002398
    f948:	00027a40 	.word	0x00027a40
			conn->llcp_length.ack = conn->llcp_length.req;
    f94c:	9b00      	ldr	r3, [sp, #0]
    f94e:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			conn->procedure_expire = 0U;
    f952:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    f954:	454a      	cmp	r2, r9
			conn->procedure_expire = 0U;
    f956:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    f95a:	f000 8154 	beq.w	fc06 <__kernel_ram_size+0xaa6>
			conn->lll.max_rx_time = eff_rx_time;
    f95e:	f8a4 c062 	strh.w	ip, [r4, #98]	; 0x62
			if (tx) {
    f962:	2900      	cmp	r1, #0
    f964:	f000 814a 	beq.w	fbfc <__kernel_ram_size+0xa9c>
				conn->llcp_length.state =
    f968:	f894 519a 	ldrb.w	r5, [r4, #410]	; 0x19a
					(conn->llcp_length.req - 1);
    f96c:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
    f96e:	f8a4 e19c 	strh.w	lr, [r4, #412]	; 0x19c
				conn->llcp_length.state =
    f972:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
    f974:	3b01      	subs	r3, #1
				conn->llcp_length.state =
    f976:	f367 0502 	bfi	r5, r7, #0, #3
				conn->llcp_length.ack =
    f97a:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->llcp_length.tx_octets = eff_tx_octets;
    f97e:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.rx_time = eff_rx_time;
    f982:	f8a4 c1a0 	strh.w	ip, [r4, #416]	; 0x1a0
				conn->llcp_length.tx_time = eff_tx_time;
    f986:	f8a4 01a2 	strh.w	r0, [r4, #418]	; 0x1a2
				conn->llcp_length.state =
    f98a:	f884 519a 	strb.w	r5, [r4, #410]	; 0x19a
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
    f98e:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
    f992:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
    f994:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
    f998:	84f0      	strh	r0, [r6, #38]	; 0x26
    f99a:	e538      	b.n	f40e <__kernel_ram_size+0x2ae>
			conn->llcp_phy.pause_tx = 0U;
    f99c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
    f9a0:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			conn->llcp_phy.ack = conn->llcp_phy.req;
    f9a4:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
			conn->llcp_phy.pause_tx = 0U;
    f9a8:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
    f9ac:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
    f9ae:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
    f9b2:	f362 1106 	bfi	r1, r2, #4, #3
			if (conn->llcp_phy.cmd) {
    f9b6:	075f      	lsls	r7, r3, #29
			conn->llcp_phy.pause_tx = 0U;
    f9b8:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
    f9bc:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    f9c0:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
    f9c4:	f140 80f8 	bpl.w	fbb8 <__kernel_ram_size+0xa58>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f9c8:	6829      	ldr	r1, [r5, #0]
				p->status = 0U;
    f9ca:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f9cc:	2015      	movs	r0, #21
    f9ce:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
    f9d0:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
    f9d2:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
    f9d4:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    f9d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f9dc:	77b3      	strb	r3, [r6, #30]
    f9de:	f7fe bfa9 	b.w	e934 <ull_conn_rx+0x3bc>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    f9e2:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
				conn->llcp_ack -= 2U;
    f9e6:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    f9e8:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
    f9ec:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
    f9ee:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    f9f2:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
				conn->llcp_type = LLCP_ENCRYPTION;
    f9f6:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
    f9fa:	f7ff bb83 	b.w	f104 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6a4>
		conn_upd_curr = conn;
    f9fe:	601c      	str	r4, [r3, #0]
    fa00:	f7fe bf4d 	b.w	e89e <ull_conn_rx+0x326>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    fa04:	2303      	movs	r3, #3
    fa06:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    fa08:	232a      	movs	r3, #42	; 0x2a
    fa0a:	e730      	b.n	f86e <__kernel_ram_size+0x70e>
			LL_ASSERT(conn_upd_curr == conn);
    fa0c:	4fd9      	ldr	r7, [pc, #868]	; (fd74 <__kernel_ram_size+0xc14>)
    fa0e:	683a      	ldr	r2, [r7, #0]
    fa10:	4294      	cmp	r4, r2
    fa12:	d00e      	beq.n	fa32 <__kernel_ram_size+0x8d2>
    fa14:	4ad8      	ldr	r2, [pc, #864]	; (fd78 <__kernel_ram_size+0xc18>)
    fa16:	49d9      	ldr	r1, [pc, #868]	; (fd7c <__kernel_ram_size+0xc1c>)
    fa18:	48d9      	ldr	r0, [pc, #868]	; (fd80 <__kernel_ram_size+0xc20>)
    fa1a:	f241 736d 	movw	r3, #5997	; 0x176d
    fa1e:	f00e f966 	bl	1dcee <printk>
    fa22:	4040      	eors	r0, r0
    fa24:	f380 8811 	msr	BASEPRI, r0
    fa28:	f04f 0003 	mov.w	r0, #3
    fa2c:	df02      	svc	2
    fa2e:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
			if (!conn->llcp_conn_param.cmd) {
    fa32:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fa36:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    fa3a:	2300      	movs	r3, #0
    fa3c:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
    fa3e:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    fa42:	682a      	ldr	r2, [r5, #0]
			if (!conn->llcp_conn_param.cmd) {
    fa44:	f43e adf7 	beq.w	e636 <ull_conn_rx+0xbe>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    fa48:	2111      	movs	r1, #17
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    fa4a:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    fa4c:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    fa4e:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
    fa50:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
    fa52:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
			cu->latency = lll->latency;
    fa56:	8e21      	ldrh	r1, [r4, #48]	; 0x30
			cu->interval = lll->interval;
    fa58:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
    fa5a:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
    fa5e:	237d      	movs	r3, #125	; 0x7d
    fa60:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
    fa64:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
    fa66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fa6a:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
    fa6e:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
    fa70:	f7fe bf60 	b.w	e934 <ull_conn_rx+0x3bc>
				conn->llcp_length.state =
    fa74:	2604      	movs	r6, #4
    fa76:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
    fa7a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
    fa7e:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
				conn->llcp_length.state =
    fa82:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
    fa86:	e4b8      	b.n	f3fa <__kernel_ram_size+0x29a>
				uint16_t interval_min =
    fa88:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				if ((interval_min < 6) ||
    fa8c:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t interval_min =
    fa90:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < 6) ||
    fa94:	f67f ae61 	bls.w	f75a <__kernel_ram_size+0x5fa>
				uint16_t interval_max =
    fa98:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
				if ((interval_min < 6) ||
    fa9c:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				uint16_t interval_max =
    faa0:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < 6) ||
    faa4:	f63f ae59 	bhi.w	f75a <__kernel_ram_size+0x5fa>
				    (interval_max > 3200) ||
    faa8:	4290      	cmp	r0, r2
    faaa:	f63f ae56 	bhi.w	f75a <__kernel_ram_size+0x5fa>
				uint16_t latency =
    faae:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
    fab2:	fa1f f08c 	uxth.w	r0, ip
				    (interval_min > interval_max) ||
    fab6:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				uint16_t latency =
    faba:	e9cd 0001 	strd	r0, r0, [sp, #4]
				    (interval_min > interval_max) ||
    fabe:	f4bf ae4c 	bcs.w	f75a <__kernel_ram_size+0x5fa>
				uint16_t timeout =
    fac2:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
    fac4:	f8ad 000e 	strh.w	r0, [sp, #14]
				    (latency > 499) ||
    fac8:	f1a0 090a 	sub.w	r9, r0, #10
    facc:	fa1f f989 	uxth.w	r9, r9
    fad0:	f640 4a76 	movw	sl, #3190	; 0xc76
    fad4:	45d1      	cmp	r9, sl
				uint16_t timeout =
    fad6:	fa1f fb80 	uxth.w	fp, r0
				    (latency > 499) ||
    fada:	f63f ae3e 	bhi.w	f75a <__kernel_ram_size+0x5fa>
				     ((latency + 1) * interval_max)) ||
    fade:	9801      	ldr	r0, [sp, #4]
    fae0:	fb00 2902 	mla	r9, r0, r2, r2
				    (timeout > 3200) ||
    fae4:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
    fae8:	f4bf ae37 	bcs.w	f75a <__kernel_ram_size+0x5fa>
				     ((latency + 1) * interval_max)) ||
    faec:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
    faf0:	4552      	cmp	r2, sl
    faf2:	f4ff ae32 	bcc.w	f75a <__kernel_ram_size+0x5fa>
				conn->llcp_conn_param.timeout =	timeout;
    faf6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
				conn->llcp_conn_param.latency =	latency;
    fafa:	f8a4 c178 	strh.w	ip, [r4, #376]	; 0x178
				conn->llcp_conn_param.interval_min =
    fafe:	f8a4 8174 	strh.w	r8, [r4, #372]	; 0x174
				conn->llcp_conn_param.interval_max =
    fb02:	f8a4 e176 	strh.w	lr, [r4, #374]	; 0x176
				conn->llcp_conn_param.timeout =	timeout;
    fb06:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
				conn->llcp_conn_param.preferred_periodicity =
    fb0a:	f884 a17c 	strb.w	sl, [r4, #380]	; 0x17c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
    fb0e:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
    fb12:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
				     lll->interval) ||
    fb16:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
					sys_le16_to_cpu(cpr->reference_conn_event_count);
    fb1a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    fb1e:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
					sys_le16_to_cpu(cpr->offset0);
    fb22:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
    fb26:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    fb2a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset0 =
    fb2e:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
					sys_le16_to_cpu(cpr->offset1);
    fb32:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
    fb36:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    fb3a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
    fb3e:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset2);
    fb42:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
    fb46:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    fb4a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
    fb4e:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset3);
    fb52:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
    fb56:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    fb5a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
    fb5e:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset4);
    fb62:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    fb66:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
    fb6a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
    fb6e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset5);
    fb72:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
    fb76:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
    fb7a:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
    fb7c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
    fb80:	f8a4 018a 	strh.w	r0, [r4, #394]	; 0x18a
				if ((conn->llcp_conn_param.interval_max !=
    fb84:	f000 80b7 	beq.w	fcf6 <__kernel_ram_size+0xb96>
					if (conn->llcp_enc.pause_tx) {
    fb88:	078e      	lsls	r6, r1, #30
						conn->llcp_conn_param.state =
    fb8a:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					if (conn->llcp_enc.pause_tx) {
    fb8e:	f57f add4 	bpl.w	f73a <__kernel_ram_size+0x5da>
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    fb92:	6829      	ldr	r1, [r5, #0]
						conn->llcp_conn_param.state =
    fb94:	2002      	movs	r0, #2
    fb96:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    fb9a:	2003      	movs	r0, #3
						conn->llcp_conn_param.state =
    fb9c:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    fba0:	7108      	strb	r0, [r1, #4]
    fba2:	e5cf      	b.n	f744 <__kernel_ram_size+0x5e4>
				      0x03) == 0x02) &&
    fba4:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
    fba8:	2a03      	cmp	r2, #3
    fbaa:	f47f abbe 	bne.w	f32a <__kernel_ram_size+0x1ca>
    fbae:	f7ff bbb5 	b.w	f31c <__kernel_ram_size+0x1bc>
	struct node_tx *tx = NULL;
    fbb2:	2100      	movs	r1, #0
    fbb4:	f7fe be3b 	b.w	e82e <ull_conn_rx+0x2b6>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    fbb8:	682b      	ldr	r3, [r5, #0]
    fbba:	2203      	movs	r2, #3
    fbbc:	711a      	strb	r2, [r3, #4]
    fbbe:	f7fe beb9 	b.w	e934 <ull_conn_rx+0x3bc>
	LL_ASSERT(rx_dle);
    fbc2:	4a6d      	ldr	r2, [pc, #436]	; (fd78 <__kernel_ram_size+0xc18>)
    fbc4:	496f      	ldr	r1, [pc, #444]	; (fd84 <__kernel_ram_size+0xc24>)
    fbc6:	486e      	ldr	r0, [pc, #440]	; (fd80 <__kernel_ram_size+0xc20>)
    fbc8:	f241 3396 	movw	r3, #5014	; 0x1396
    fbcc:	f00e f88f 	bl	1dcee <printk>
    fbd0:	4040      	eors	r0, r0
    fbd2:	f380 8811 	msr	BASEPRI, r0
    fbd6:	f04f 0003 	mov.w	r0, #3
    fbda:	df02      	svc	2
    fbdc:	e623      	b.n	f826 <__kernel_ram_size+0x6c6>
			tx->next = conn->tx_head->next;
    fbde:	6811      	ldr	r1, [r2, #0]
    fbe0:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
    fbe2:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
    fbe4:	e9c4 336d 	strd	r3, r3, [r4, #436]	; 0x1b4
    fbe8:	f7fe bfa5 	b.w	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    fbec:	2b23      	cmp	r3, #35	; 0x23
    fbee:	f43f ae70 	beq.w	f8d2 <__kernel_ram_size+0x772>
			conn->slave.ticks_to_offset =
    fbf2:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    fbf6:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    fbfa:	e66a      	b.n	f8d2 <__kernel_ram_size+0x772>
				conn->lll.max_tx_octets = eff_tx_octets;
    fbfc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
    fc00:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
    fc04:	e6c3      	b.n	f98e <__kernel_ram_size+0x82e>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    fc06:	4558      	cmp	r0, fp
    fc08:	f47f aea9 	bne.w	f95e <__kernel_ram_size+0x7fe>
			    eff_rx_time == conn->lll.max_rx_time &&
    fc0c:	45d4      	cmp	ip, sl
    fc0e:	f47f aea6 	bne.w	f95e <__kernel_ram_size+0x7fe>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    fc12:	682b      	ldr	r3, [r5, #0]
    fc14:	2503      	movs	r5, #3
    fc16:	711d      	strb	r5, [r3, #4]
				goto send_length_resp;
    fc18:	f7ff bbf9 	b.w	f40e <__kernel_ram_size+0x2ae>
		LL_ASSERT(conn_upd_curr == conn);
    fc1c:	4f55      	ldr	r7, [pc, #340]	; (fd74 <__kernel_ram_size+0xc14>)
    fc1e:	6839      	ldr	r1, [r7, #0]
    fc20:	428c      	cmp	r4, r1
    fc22:	d010      	beq.n	fc46 <__kernel_ram_size+0xae6>
    fc24:	4a54      	ldr	r2, [pc, #336]	; (fd78 <__kernel_ram_size+0xc18>)
    fc26:	4955      	ldr	r1, [pc, #340]	; (fd7c <__kernel_ram_size+0xc1c>)
    fc28:	4855      	ldr	r0, [pc, #340]	; (fd80 <__kernel_ram_size+0xc20>)
    fc2a:	f241 03de 	movw	r3, #4318	; 0x10de
    fc2e:	f00e f85e 	bl	1dcee <printk>
    fc32:	4040      	eors	r0, r0
    fc34:	f380 8811 	msr	BASEPRI, r0
    fc38:	f04f 0003 	mov.w	r0, #3
    fc3c:	df02      	svc	2
    fc3e:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    fc42:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fc46:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    fc4a:	2300      	movs	r3, #0
    fc4c:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
    fc4e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    fc52:	f7ff baaa 	b.w	f1aa <__kernel_ram_size+0x4a>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    fc56:	2a23      	cmp	r2, #35	; 0x23
    fc58:	f43f aaa0 	beq.w	f19c <__kernel_ram_size+0x3c>
			conn->slave.ticks_to_offset =
    fc5c:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    fc60:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
    fc64:	f7ff ba9a 	b.w	f19c <__kernel_ram_size+0x3c>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
    fc68:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    fc6c:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
    fc70:	4293      	cmp	r3, r2
    fc72:	d00e      	beq.n	fc92 <__kernel_ram_size+0xb32>
    fc74:	4a40      	ldr	r2, [pc, #256]	; (fd78 <__kernel_ram_size+0xc18>)
    fc76:	4944      	ldr	r1, [pc, #272]	; (fd88 <__kernel_ram_size+0xc28>)
    fc78:	4841      	ldr	r0, [pc, #260]	; (fd80 <__kernel_ram_size+0xc20>)
    fc7a:	f241 03c3 	movw	r3, #4291	; 0x10c3
    fc7e:	f00e f836 	bl	1dcee <printk>
    fc82:	4040      	eors	r0, r0
    fc84:	f380 8811 	msr	BASEPRI, r0
    fc88:	f04f 0003 	mov.w	r0, #3
    fc8c:	df02      	svc	2
    fc8e:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fc92:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
    fc96:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    fc9a:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fc9e:	2305      	movs	r3, #5
    fca0:	f363 0102 	bfi	r1, r3, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    fca4:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fca8:	f884 1172 	strb.w	r1, [r4, #370]	; 0x172
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    fcac:	f3c1 03c0 	ubfx	r3, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    fcb0:	009b      	lsls	r3, r3, #2
    fcb2:	f020 0007 	bic.w	r0, r0, #7
    fcb6:	f043 0301 	orr.w	r3, r3, #1
    fcba:	4303      	orrs	r3, r0
		conn->llcp_cu.ack--;
    fcbc:	3a01      	subs	r2, #1
		conn->llcp_cu.win_size = 1U;
    fcbe:	2501      	movs	r5, #1
		conn->llcp_cu.ack--;
    fcc0:	f884 2105 	strb.w	r2, [r4, #261]	; 0x105
		conn->llcp_cu.win_offset_us = 0U;
    fcc4:	2000      	movs	r0, #0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    fcc6:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    fcca:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    fcce:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
		conn->llcp_cu.win_size = 1U;
    fcd2:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
		conn->llcp_cu.win_offset_us = 0U;
    fcd6:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    fcda:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    fcde:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
	if (err) {
    fce2:	f7fe bd4a 	b.w	e77a <ull_conn_rx+0x202>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    fce6:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
    fcea:	f012 0f06 	tst.w	r2, #6
    fcee:	f43f ab49 	beq.w	f384 <__kernel_ram_size+0x224>
    fcf2:	f7fe bd95 	b.w	e820 <ull_conn_rx+0x2a8>
				     lll->interval) ||
    fcf6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    fcf8:	9802      	ldr	r0, [sp, #8]
    fcfa:	4282      	cmp	r2, r0
    fcfc:	f47f af44 	bne.w	fb88 <__kernel_ram_size+0xa28>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    fd00:	f240 42e2 	movw	r2, #1250	; 0x4e2
    fd04:	fb02 f00c 	mul.w	r0, r2, ip
    fd08:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
    fd0c:	f8b4 60c6 	ldrh.w	r6, [r4, #198]	; 0xc6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    fd10:	fb02 020b 	mla	r2, r2, fp, r0
    fd14:	3a01      	subs	r2, #1
    fd16:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
    fd1a:	b292      	uxth	r2, r2
    fd1c:	4296      	cmp	r6, r2
    fd1e:	f47f af33 	bne.w	fb88 <__kernel_ram_size+0xa28>
				conn->llcp_conn_param.state =
    fd22:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
    fd26:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    fd2a:	f042 0201 	orr.w	r2, r2, #1
    fd2e:	f8a4 2172 	strh.w	r2, [r4, #370]	; 0x172
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    fd32:	682a      	ldr	r2, [r5, #0]
    fd34:	2103      	movs	r1, #3
    fd36:	7111      	strb	r1, [r2, #4]
    fd38:	e504      	b.n	f744 <__kernel_ram_size+0x5e4>
			     lll->interval) ||
    fd3a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    fd3c:	4550      	cmp	r0, sl
    fd3e:	f47f acfa 	bne.w	f736 <__kernel_ram_size+0x5d6>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    fd42:	f240 40e2 	movw	r0, #1250	; 0x4e2
    fd46:	fb00 f101 	mul.w	r1, r0, r1
    fd4a:	f242 7010 	movw	r0, #10000	; 0x2710
    fd4e:	fb00 1202 	mla	r2, r0, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
    fd52:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    fd56:	3a01      	subs	r2, #1
    fd58:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
    fd5c:	b292      	uxth	r2, r2
    fd5e:	4290      	cmp	r0, r2
    fd60:	f47f ace9 	bne.w	f736 <__kernel_ram_size+0x5d6>
    fd64:	e7dd      	b.n	fd22 <__kernel_ram_size+0xbc2>
			tx->next = conn->tx_head->next;
    fd66:	6819      	ldr	r1, [r3, #0]
    fd68:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
    fd6a:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
    fd6c:	e9c4 226d 	strd	r2, r2, [r4, #436]	; 0x1b4
    fd70:	f7ff bbef 	b.w	f552 <__kernel_ram_size+0x3f2>
    fd74:	20002398 	.word	0x20002398
    fd78:	00027934 	.word	0x00027934
    fd7c:	00027a40 	.word	0x00027a40
    fd80:	000275f0 	.word	0x000275f0
    fd84:	00027a58 	.word	0x00027a58
    fd88:	00027a18 	.word	0x00027a18

0000fd8c <ull_conn_tx_demux>:
{
    fd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd90:	4f24      	ldr	r7, [pc, #144]	; (fe24 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fd92:	4e25      	ldr	r6, [pc, #148]	; (fe28 <ull_conn_tx_demux+0x9c>)
    fd94:	78fa      	ldrb	r2, [r7, #3]
{
    fd96:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
    fd98:	1d3d      	adds	r5, r7, #4
    fd9a:	e021      	b.n	fde0 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fd9c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    fda0:	4630      	mov	r0, r6
    fda2:	f7f9 f8e7 	bl	8f74 <mem_get>
	if (conn->lll.handle != handle) {
    fda6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    fda8:	bb32      	cbnz	r2, fdf8 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
    fdaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
    fdae:	f8d0 11bc 	ldr.w	r1, [r0, #444]	; 0x1bc
			tx->next = NULL;
    fdb2:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
    fdb4:	b369      	cbz	r1, fe12 <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
    fdb6:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
    fdba:	b102      	cbz	r2, fdbe <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
    fdbc:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
    fdbe:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
		MFIFO_DEQUEUE(conn_tx);
    fdc2:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
    fdc4:	78bb      	ldrb	r3, [r7, #2]
    fdc6:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
    fdc8:	429a      	cmp	r2, r3
    fdca:	d005      	beq.n	fdd8 <ull_conn_tx_demux+0x4c>
	_first += 1U;
    fdcc:	3301      	adds	r3, #1
    fdce:	b2db      	uxtb	r3, r3
		_first = 0U;
    fdd0:	4299      	cmp	r1, r3
    fdd2:	bf08      	it	eq
    fdd4:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    fdd6:	70bb      	strb	r3, [r7, #2]
	} while (--count);
    fdd8:	3c01      	subs	r4, #1
    fdda:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    fdde:	d016      	beq.n	fe0e <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    fde0:	78bb      	ldrb	r3, [r7, #2]
    fde2:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
    fde4:	4293      	cmp	r3, r2
    fde6:	d012      	beq.n	fe0e <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
    fde8:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
    fdec:	eb15 0803 	adds.w	r8, r5, r3
    fdf0:	d00d      	beq.n	fe0e <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
    fdf2:	5aea      	ldrh	r2, [r5, r3]
    fdf4:	2a00      	cmp	r2, #0
    fdf6:	d0d1      	beq.n	fd9c <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
    fdf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
    fdfc:	790b      	ldrb	r3, [r1, #4]
    fdfe:	f36f 0301 	bfc	r3, #0, #2
    fe02:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
    fe04:	f64f 70ff 	movw	r0, #65535	; 0xffff
    fe08:	f7fc fecc 	bl	cba4 <ll_tx_ack_put>
    fe0c:	e7d9      	b.n	fdc2 <ull_conn_tx_demux+0x36>
}
    fe0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
    fe12:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
				conn->tx_data = tx;
    fe16:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
				if (!conn->tx_head) {
    fe1a:	2a00      	cmp	r2, #0
    fe1c:	d1cb      	bne.n	fdb6 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
    fe1e:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
			if (conn->tx_data_last) {
    fe22:	e7cc      	b.n	fdbe <ull_conn_tx_demux+0x32>
    fe24:	20000618 	.word	0x20000618
    fe28:	200021d0 	.word	0x200021d0

0000fe2c <conn_cleanup>:
{
    fe2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
    fe30:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	rx->hdr.handle = conn->lll.handle;
    fe34:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	*((uint8_t *)rx->pdu) = reason;
    fe36:	f880 114c 	strb.w	r1, [r0, #332]	; 0x14c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    fe3a:	2310      	movs	r3, #16
{
    fe3c:	b083      	sub	sp, #12
    fe3e:	4606      	mov	r6, r0
	rx->hdr.handle = conn->lll.handle;
    fe40:	f8a0 2136 	strh.w	r2, [r0, #310]	; 0x136
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    fe44:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
	struct lll_conn *lll = &conn->lll;
    fe48:	f100 0b1c 	add.w	fp, r0, #28
	while (rx) {
    fe4c:	b144      	cbz	r4, fe60 <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
    fe4e:	2503      	movs	r5, #3
		rx = hdr->link->mem;
    fe50:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
    fe52:	4621      	mov	r1, r4
		rx = hdr->link->mem;
    fe54:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
    fe56:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
    fe58:	f7fc fe5e 	bl	cb18 <ll_rx_put>
	while (rx) {
    fe5c:	2c00      	cmp	r4, #0
    fe5e:	d1f7      	bne.n	fe50 <conn_cleanup+0x24>
	while (conn->tx_head) {
    fe60:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
    fe64:	b381      	cbz	r1, fec8 <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
    fe66:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ff20 <conn_cleanup+0xf4>
		LL_ASSERT(link);
    fe6a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; ff18 <conn_cleanup+0xec>
    fe6e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; ff24 <conn_cleanup+0xf8>
    fe72:	f106 076c 	add.w	r7, r6, #108	; 0x6c
    fe76:	e007      	b.n	fe88 <conn_cleanup+0x5c>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    fe78:	4629      	mov	r1, r5
    fe7a:	4620      	mov	r0, r4
    fe7c:	463a      	mov	r2, r7
    fe7e:	f7f9 f8ab 	bl	8fd8 <memq_enqueue>
	while (conn->tx_head) {
    fe82:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
    fe86:	b1f9      	cbz	r1, fec8 <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    fe88:	4630      	mov	r0, r6
    fe8a:	f7fd fc91 	bl	d7b0 <tx_ull_dequeue>
    fe8e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
    fe90:	4640      	mov	r0, r8
    fe92:	f7f9 f83f 	bl	8f14 <mem_acquire>
		LL_ASSERT(link);
    fe96:	4604      	mov	r4, r0
    fe98:	2800      	cmp	r0, #0
    fe9a:	d1ed      	bne.n	fe78 <conn_cleanup+0x4c>
    fe9c:	481c      	ldr	r0, [pc, #112]	; (ff10 <conn_cleanup+0xe4>)
    fe9e:	f240 7304 	movw	r3, #1796	; 0x704
    fea2:	4652      	mov	r2, sl
    fea4:	4649      	mov	r1, r9
    fea6:	f00d ff22 	bl	1dcee <printk>
    feaa:	4040      	eors	r0, r0
    feac:	f380 8811 	msr	BASEPRI, r0
    feb0:	f04f 0003 	mov.w	r0, #3
    feb4:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    feb6:	4629      	mov	r1, r5
    feb8:	4620      	mov	r0, r4
    feba:	463a      	mov	r2, r7
    febc:	f7f9 f88c 	bl	8fd8 <memq_enqueue>
	while (conn->tx_head) {
    fec0:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
    fec4:	2900      	cmp	r1, #0
    fec6:	d1df      	bne.n	fe88 <conn_cleanup+0x5c>
				    TICKER_ID_CONN_BASE + lll->handle,
    fec8:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fecc:	4b11      	ldr	r3, [pc, #68]	; (ff14 <conn_cleanup+0xe8>)
    fece:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
    fed2:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fed4:	b2d2      	uxtb	r2, r2
    fed6:	2101      	movs	r1, #1
    fed8:	2000      	movs	r0, #0
    feda:	f7fa fbb1 	bl	a640 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fede:	f030 0302 	bics.w	r3, r0, #2
    fee2:	d00c      	beq.n	fefe <conn_cleanup+0xd2>
    fee4:	4a0c      	ldr	r2, [pc, #48]	; (ff18 <conn_cleanup+0xec>)
    fee6:	490d      	ldr	r1, [pc, #52]	; (ff1c <conn_cleanup+0xf0>)
    fee8:	4809      	ldr	r0, [pc, #36]	; (ff10 <conn_cleanup+0xe4>)
    feea:	f240 63c3 	movw	r3, #1731	; 0x6c3
    feee:	f00d fefe 	bl	1dcee <printk>
    fef2:	4040      	eors	r0, r0
    fef4:	f380 8811 	msr	BASEPRI, r0
    fef8:	f04f 0003 	mov.w	r0, #3
    fefc:	df02      	svc	2
	lll->handle = 0xFFFF;
    fefe:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
    ff02:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
    ff04:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
    ff06:	b003      	add	sp, #12
    ff08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
    ff0c:	f7ff bf3e 	b.w	fd8c <ull_conn_tx_demux>
    ff10:	000275f0 	.word	0x000275f0
    ff14:	0000da4d 	.word	0x0000da4d
    ff18:	00027934 	.word	0x00027934
    ff1c:	00027a74 	.word	0x00027a74
    ff20:	200024a0 	.word	0x200024a0
    ff24:	0002798c 	.word	0x0002798c

0000ff28 <ull_conn_done>:
{
    ff28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
    ff2c:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
    ff2e:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
    ff30:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
    ff32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ff36:	429a      	cmp	r2, r3
{
    ff38:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
    ff3a:	f000 8092 	beq.w	10062 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x63>
	switch (done->extra.mic_state) {
    ff3e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
    ff42:	2b01      	cmp	r3, #1
    ff44:	4606      	mov	r6, r0
    ff46:	f000 80dd 	beq.w	10104 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x105>
    ff4a:	2b02      	cmp	r3, #2
    ff4c:	f000 80d0 	beq.w	100f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf1>
    ff50:	2b00      	cmp	r3, #0
    ff52:	f000 80b3 	beq.w	100bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbd>
	reason_peer = conn->llcp_terminate.reason_peer;
    ff56:	f894 712f 	ldrb.w	r7, [r4, #303]	; 0x12f
	if (reason_peer && (
    ff5a:	2f00      	cmp	r7, #0
    ff5c:	f040 80cb 	bne.w	100f6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf7>
	latency_event = lll->latency_event;
    ff60:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
    ff64:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	ticks_drift_plus = 0U;
    ff66:	9709      	str	r7, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
    ff68:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
    ff6c:	9708      	str	r7, [sp, #32]
	elapsed_event = latency_event + 1;
    ff6e:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
    ff72:	2b00      	cmp	r3, #0
    ff74:	d078      	beq.n	10068 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x69>
		} else if (lll->role) {
    ff76:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
    ff7a:	2b00      	cmp	r3, #0
    ff7c:	f2c0 8108 	blt.w	10190 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x191>
	if (done->extra.crc_valid) {
    ff80:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
    ff84:	2200      	movs	r2, #0
    ff86:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
    ff8a:	2b00      	cmp	r3, #0
    ff8c:	f000 80c0 	beq.w	10110 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x111>
		conn->supervision_expire = 0U;
    ff90:	2300      	movs	r3, #0
    ff92:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
    ff96:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    ff9a:	b133      	cbz	r3, ffaa <ull_conn_done+0x82>
		if (conn->procedure_expire > elapsed_event) {
    ff9c:	4543      	cmp	r3, r8
    ff9e:	f240 810d 	bls.w	101bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1bd>
			conn->procedure_expire -= elapsed_event;
    ffa2:	eba3 0308 	sub.w	r3, r3, r8
    ffa6:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
    ffaa:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    ffae:	b133      	cbz	r3, ffbe <ull_conn_done+0x96>
		if (conn->apto_expire > elapsed_event) {
    ffb0:	4543      	cmp	r3, r8
    ffb2:	f240 80d5 	bls.w	10160 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x161>
			conn->apto_expire -= elapsed_event;
    ffb6:	eba3 0308 	sub.w	r3, r3, r8
    ffba:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
    ffbe:	f8b4 20d0 	ldrh.w	r2, [r4, #208]	; 0xd0
    ffc2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    ffc6:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
    ffca:	b15a      	cbz	r2, ffe4 <ull_conn_done+0xbc>
		if (conn->appto_expire > elapsed_event) {
    ffcc:	4542      	cmp	r2, r8
    ffce:	f200 80ab 	bhi.w	10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>
			if ((conn->procedure_expire == 0U) &&
    ffd2:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			conn->appto_expire = 0U;
    ffd6:	2000      	movs	r0, #0
    ffd8:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
    ffdc:	b912      	cbnz	r2, ffe4 <ull_conn_done+0xbc>
    ffde:	4299      	cmp	r1, r3
    ffe0:	f000 8103 	beq.w	101ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1eb>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    ffe4:	1a5b      	subs	r3, r3, r1
    ffe6:	f003 0303 	and.w	r3, r3, #3
    ffea:	2b02      	cmp	r3, #2
    ffec:	f000 80a6 	beq.w	1013c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x13d>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
    fff0:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    fff4:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
    fff8:	429a      	cmp	r2, r3
    fffa:	f000 80c7 	beq.w	1018c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x18d>
		lll->latency_event = 0U;
    fffe:	2200      	movs	r2, #0
   10000:	84aa      	strh	r2, [r5, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   10002:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
   10006:	b917      	cbnz	r7, 1000e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf>
   10008:	454a      	cmp	r2, r9
   1000a:	f000 80a4 	beq.w	10156 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x157>
		lazy = lll->latency_event + 1U;
   1000e:	3201      	adds	r2, #1
   10010:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   10012:	b913      	cbnz	r3, 1001a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b>
   10014:	2c00      	cmp	r4, #0
   10016:	f000 8084 	beq.w	10122 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x123>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1001a:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1001c:	4e83      	ldr	r6, [pc, #524]	; (1022c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x22d>)
		struct ll_conn *conn = lll->hdr.parent;
   1001e:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   10020:	9506      	str	r5, [sp, #24]
   10022:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   10024:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   10026:	9103      	str	r1, [sp, #12]
   10028:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1002c:	b2d2      	uxtb	r2, r2
   1002e:	9704      	str	r7, [sp, #16]
   10030:	9400      	str	r4, [sp, #0]
   10032:	9605      	str	r6, [sp, #20]
   10034:	2101      	movs	r1, #1
   10036:	f7fa fab3 	bl	a5a0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1003a:	f030 0302 	bics.w	r3, r0, #2
   1003e:	d010      	beq.n	10062 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x63>
   10040:	f7fc fe20 	bl	cc84 <ull_disable_mark_get>
   10044:	4285      	cmp	r5, r0
   10046:	d00c      	beq.n	10062 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x63>
   10048:	4a79      	ldr	r2, [pc, #484]	; (10230 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x231>)
   1004a:	497a      	ldr	r1, [pc, #488]	; (10234 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x235>)
   1004c:	487a      	ldr	r0, [pc, #488]	; (10238 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x239>)
   1004e:	f240 5317 	movw	r3, #1303	; 0x517
   10052:	f00d fe4c 	bl	1dcee <printk>
   10056:	4040      	eors	r0, r0
   10058:	f380 8811 	msr	BASEPRI, r0
   1005c:	f04f 0003 	mov.w	r0, #3
   10060:	df02      	svc	2
}
   10062:	b00b      	add	sp, #44	; 0x2c
   10064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   10068:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   1006c:	2b00      	cmp	r3, #0
   1006e:	d18f      	bne.n	ff90 <ull_conn_done+0x68>
	else if (conn->connect_expire) {
   10070:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   10074:	2b00      	cmp	r3, #0
   10076:	d04b      	beq.n	10110 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x111>
		if (conn->connect_expire > elapsed_event) {
   10078:	4543      	cmp	r3, r8
   1007a:	f240 80bd 	bls.w	101f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f9>
			conn->connect_expire -= elapsed_event;
   1007e:	eba3 0308 	sub.w	r3, r3, r8
   10082:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   10086:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
	if (conn->supervision_expire) {
   1008a:	2b00      	cmp	r3, #0
   1008c:	d083      	beq.n	ff96 <ull_conn_done+0x6e>
		if (conn->supervision_expire > elapsed_event) {
   1008e:	4598      	cmp	r8, r3
   10090:	f080 808f 	bcs.w	101b2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b3>
			conn->supervision_expire -= elapsed_event;
   10094:	eba3 0308 	sub.w	r3, r3, r8
   10098:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   1009a:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   1009c:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1009e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0U;
   100a2:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   100a4:	d908      	bls.n	100b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb9>
			else if (lll->role) {
   100a6:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   100aa:	4293      	cmp	r3, r2
   100ac:	f6bf af73 	bge.w	ff96 <ull_conn_done+0x6e>
				if (latency_event) {
   100b0:	f1b9 0f00 	cmp.w	r9, #0
   100b4:	f000 808b 	beq.w	101ce <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1cf>
				force = 1U;
   100b8:	2701      	movs	r7, #1
   100ba:	e76c      	b.n	ff96 <ull_conn_done+0x6e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   100bc:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   100c0:	0719      	lsls	r1, r3, #28
   100c2:	d542      	bpl.n	1014a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14b>
					    (lll->latency + 6)) ?
   100c4:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   100c6:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   100ca:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   100cc:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   100ce:	bfc4      	itt	gt
   100d0:	1ad3      	subgt	r3, r2, r3
   100d2:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   100d4:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   100d8:	bfcc      	ite	gt
   100da:	b29b      	uxthgt	r3, r3
   100dc:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   100de:	4299      	cmp	r1, r3
   100e0:	d061      	beq.n	101a6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1a7>
				conn->appto_reload = appto_reload_new;
   100e2:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   100e6:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   100ea:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   100ee:	e732      	b.n	ff56 <ull_conn_done+0x2e>
		conn->llcp_terminate.reason_peer =
   100f0:	273d      	movs	r7, #61	; 0x3d
   100f2:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		conn_cleanup(conn, reason_peer);
   100f6:	4639      	mov	r1, r7
   100f8:	4620      	mov	r0, r4
   100fa:	f7ff fe97 	bl	fe2c <conn_cleanup>
}
   100fe:	b00b      	add	sp, #44	; 0x2c
   10100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->appto_expire = conn->apto_expire = 0U;
   10104:	2300      	movs	r3, #0
   10106:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   1010a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   1010e:	e722      	b.n	ff56 <ull_conn_done+0x2e>
		if (!conn->supervision_expire) {
   10110:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   10114:	2b00      	cmp	r3, #0
   10116:	d1ba      	bne.n	1008e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f>
			conn->supervision_expire = conn->supervision_reload;
   10118:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1011c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   10120:	e7b3      	b.n	1008a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8b>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   10122:	b371      	cbz	r1, 10182 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x183>
   10124:	4623      	mov	r3, r4
   10126:	e778      	b.n	1001a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   10128:	1a5b      	subs	r3, r3, r1
   1012a:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   1012e:	eba2 0808 	sub.w	r8, r2, r8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   10132:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   10134:	f8a4 80d0 	strh.w	r8, [r4, #208]	; 0xd0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   10138:	f47f af5a 	bne.w	fff0 <ull_conn_done+0xc8>
   1013c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   10140:	3b01      	subs	r3, #1
   10142:	2b01      	cmp	r3, #1
   10144:	f63f af54 	bhi.w	fff0 <ull_conn_done+0xc8>
   10148:	e759      	b.n	fffe <ull_conn_done+0xd6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1014a:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   1014e:	07da      	lsls	r2, r3, #31
   10150:	f57f af01 	bpl.w	ff56 <ull_conn_done+0x2e>
   10154:	e7b6      	b.n	100c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc5>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   10156:	b90b      	cbnz	r3, 1015c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x15d>
   10158:	2c00      	cmp	r4, #0
   1015a:	d082      	beq.n	10062 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x63>
	lazy = 0U;
   1015c:	4639      	mov	r1, r7
   1015e:	e75c      	b.n	1001a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b>
			rx = ll_pdu_rx_alloc();
   10160:	f7fc fd08 	bl	cb74 <ll_pdu_rx_alloc>
			if (rx) {
   10164:	4601      	mov	r1, r0
   10166:	b370      	cbz	r0, 101c6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c7>
				conn->apto_expire = 0U;
   10168:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   1016a:	8baa      	ldrh	r2, [r5, #28]
				conn->apto_expire = 0U;
   1016c:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->type = NODE_RX_TYPE_APTO;
   10170:	2313      	movs	r3, #19
				rx->handle = lll->handle;
   10172:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   10174:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   10176:	6800      	ldr	r0, [r0, #0]
   10178:	f7fc fcce 	bl	cb18 <ll_rx_put>
				ll_rx_sched();
   1017c:	f7fc fcd6 	bl	cb2c <ll_rx_sched>
   10180:	e71d      	b.n	ffbe <ull_conn_done+0x96>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   10182:	2f00      	cmp	r7, #0
   10184:	f43f af6d 	beq.w	10062 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x63>
   10188:	4623      	mov	r3, r4
   1018a:	e746      	b.n	1001a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b>
   1018c:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   1018e:	e738      	b.n	10002 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   10190:	aa08      	add	r2, sp, #32
   10192:	a909      	add	r1, sp, #36	; 0x24
   10194:	4630      	mov	r0, r6
   10196:	f7f0 f983 	bl	4a0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   1019a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1019e:	b383      	cbz	r3, 10202 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x203>
				lll->latency_event = 0;
   101a0:	2300      	movs	r3, #0
   101a2:	84ab      	strh	r3, [r5, #36]	; 0x24
   101a4:	e6ec      	b.n	ff80 <ull_conn_done+0x58>
			if (conn->apto_expire == 0U) {
   101a6:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   101aa:	2900      	cmp	r1, #0
   101ac:	f47f aed3 	bne.w	ff56 <ull_conn_done+0x2e>
   101b0:	e799      	b.n	100e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe7>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   101b2:	4620      	mov	r0, r4
   101b4:	2108      	movs	r1, #8
   101b6:	f7ff fe39 	bl	fe2c <conn_cleanup>
			return;
   101ba:	e752      	b.n	10062 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x63>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   101bc:	4620      	mov	r0, r4
   101be:	2122      	movs	r1, #34	; 0x22
   101c0:	f7ff fe34 	bl	fe2c <conn_cleanup>
			return;
   101c4:	e74d      	b.n	10062 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x63>
				conn->apto_expire = 1U;
   101c6:	2301      	movs	r3, #1
   101c8:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   101cc:	e6f7      	b.n	ffbe <ull_conn_done+0x96>
					force = conn->slave.force & 0x01;
   101ce:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1U;
   101d2:	085a      	lsrs	r2, r3, #1
					if (force) {
   101d4:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   101d8:	bf17      	itett	ne
   101da:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   101de:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   101e2:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   101e6:	461f      	movne	r7, r3
   101e8:	e6d5      	b.n	ff96 <ull_conn_done+0x6e>
				conn->llcp_ack -= 2U;
   101ea:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   101ec:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   101ee:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   101f2:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   101f6:	e6fb      	b.n	fff0 <ull_conn_done+0xc8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   101f8:	4620      	mov	r0, r4
   101fa:	213e      	movs	r1, #62	; 0x3e
   101fc:	f7ff fe16 	bl	fe2c <conn_cleanup>
			return;
   10200:	e72f      	b.n	10062 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x63>
				ull_conn_tx_demux(UINT8_MAX);
   10202:	20ff      	movs	r0, #255	; 0xff
   10204:	f7ff fdc2 	bl	fd8c <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   10208:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1020c:	2b00      	cmp	r3, #0
   1020e:	d1c7      	bne.n	101a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1a1>
   10210:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   10214:	463a      	mov	r2, r7
   10216:	f7f8 fee7 	bl	8fe8 <memq_peek>
   1021a:	2800      	cmp	r0, #0
   1021c:	d1c0      	bne.n	101a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1a1>
			} else if (lll->slave.latency_enabled) {
   1021e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   10222:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   10224:	bf44      	itt	mi
   10226:	8c2b      	ldrhmi	r3, [r5, #32]
   10228:	84ab      	strhmi	r3, [r5, #36]	; 0x24
   1022a:	e6a9      	b.n	ff80 <ull_conn_done+0x58>
   1022c:	0000db61 	.word	0x0000db61
   10230:	00027934 	.word	0x00027934
   10234:	00027aa4 	.word	0x00027aa4
   10238:	000275f0 	.word	0x000275f0

0001023c <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   1023c:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   10240:	2b00      	cmp	r3, #0
   10242:	f000 80e7 	beq.w	10414 <ull_conn_tx_lll_enqueue+0x1d8>
   10246:	3901      	subs	r1, #1
{
   10248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1024c:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 1041c <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   10250:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 10420 <ull_conn_tx_lll_enqueue+0x1e4>
   10254:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 10424 <ull_conn_tx_lll_enqueue+0x1e8>
   10258:	4604      	mov	r4, r0
   1025a:	b2cd      	uxtb	r5, r1
   1025c:	e012      	b.n	10284 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   1025e:	4640      	mov	r0, r8
   10260:	f7f8 fe58 	bl	8f14 <mem_acquire>
		LL_ASSERT(link);
   10264:	4607      	mov	r7, r0
   10266:	2800      	cmp	r0, #0
   10268:	d066      	beq.n	10338 <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1026a:	4631      	mov	r1, r6
   1026c:	4638      	mov	r0, r7
   1026e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   10272:	f7f8 feb1 	bl	8fd8 <memq_enqueue>
	while (conn->tx_head &&
   10276:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1027a:	3d01      	subs	r5, #1
   1027c:	b2ed      	uxtb	r5, r5
   1027e:	2b00      	cmp	r3, #0
   10280:	f000 8089 	beq.w	10396 <ull_conn_tx_lll_enqueue+0x15a>
		 !conn->llcp_phy.pause_tx &&
   10284:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
	while (conn->tx_head &&
   10288:	07d1      	lsls	r1, r2, #31
   1028a:	d403      	bmi.n	10294 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   1028c:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
		 !conn->llcp_phy.pause_tx &&
   10290:	0792      	lsls	r2, r2, #30
   10292:	d566      	bpl.n	10362 <ull_conn_tx_lll_enqueue+0x126>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   10294:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   10298:	4293      	cmp	r3, r2
   1029a:	d17c      	bne.n	10396 <ull_conn_tx_lll_enqueue+0x15a>
   1029c:	2dff      	cmp	r5, #255	; 0xff
   1029e:	d07a      	beq.n	10396 <ull_conn_tx_lll_enqueue+0x15a>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   102a0:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   102a4:	4620      	mov	r0, r4
   102a6:	f7fd fa83 	bl	d7b0 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   102aa:	7903      	ldrb	r3, [r0, #4]
   102ac:	f003 0303 	and.w	r3, r3, #3
   102b0:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   102b2:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   102b4:	d1d3      	bne.n	1025e <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   102b6:	79c3      	ldrb	r3, [r0, #7]
   102b8:	3b03      	subs	r3, #3
   102ba:	2b14      	cmp	r3, #20
   102bc:	d8cf      	bhi.n	1025e <ull_conn_tx_lll_enqueue+0x22>
   102be:	a201      	add	r2, pc, #4	; (adr r2, 102c4 <ull_conn_tx_lll_enqueue+0x88>)
   102c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   102c4:	00010321 	.word	0x00010321
   102c8:	00010321 	.word	0x00010321
   102cc:	0001025f 	.word	0x0001025f
   102d0:	0001025f 	.word	0x0001025f
   102d4:	0001025f 	.word	0x0001025f
   102d8:	0001025f 	.word	0x0001025f
   102dc:	0001025f 	.word	0x0001025f
   102e0:	00010321 	.word	0x00010321
   102e4:	00010319 	.word	0x00010319
   102e8:	0001025f 	.word	0x0001025f
   102ec:	0001025f 	.word	0x0001025f
   102f0:	0001025f 	.word	0x0001025f
   102f4:	0001025f 	.word	0x0001025f
   102f8:	0001025f 	.word	0x0001025f
   102fc:	0001025f 	.word	0x0001025f
   10300:	0001025f 	.word	0x0001025f
   10304:	0001025f 	.word	0x0001025f
   10308:	0001025f 	.word	0x0001025f
   1030c:	0001025f 	.word	0x0001025f
   10310:	00010355 	.word	0x00010355
   10314:	00010355 	.word	0x00010355
		if (!conn->lll.role) {
   10318:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1031c:	2b00      	cmp	r3, #0
   1031e:	da9e      	bge.n	1025e <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   10320:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   10324:	f043 0302 	orr.w	r3, r3, #2
   10328:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		link = mem_acquire(&mem_link_tx.free);
   1032c:	4640      	mov	r0, r8
   1032e:	f7f8 fdf1 	bl	8f14 <mem_acquire>
		LL_ASSERT(link);
   10332:	4607      	mov	r7, r0
   10334:	2800      	cmp	r0, #0
   10336:	d198      	bne.n	1026a <ull_conn_tx_lll_enqueue+0x2e>
   10338:	4837      	ldr	r0, [pc, #220]	; (10418 <ull_conn_tx_lll_enqueue+0x1dc>)
   1033a:	f240 536b 	movw	r3, #1387	; 0x56b
   1033e:	4652      	mov	r2, sl
   10340:	4649      	mov	r1, r9
   10342:	f00d fcd4 	bl	1dcee <printk>
   10346:	4040      	eors	r0, r0
   10348:	f380 8811 	msr	BASEPRI, r0
   1034c:	f04f 0003 	mov.w	r0, #3
   10350:	df02      	svc	2
   10352:	e78a      	b.n	1026a <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
   10354:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   10358:	f043 0301 	orr.w	r3, r3, #1
   1035c:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		break;
   10360:	e77d      	b.n	1025e <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   10362:	791a      	ldrb	r2, [r3, #4]
   10364:	f002 0203 	and.w	r2, r2, #3
   10368:	2a03      	cmp	r2, #3
   1036a:	d197      	bne.n	1029c <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   1036c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1036e:	2a03      	cmp	r2, #3
   10370:	d001      	beq.n	10376 <ull_conn_tx_lll_enqueue+0x13a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   10372:	2a0a      	cmp	r2, #10
   10374:	d192      	bne.n	1029c <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   10376:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   1037a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1037e:	428a      	cmp	r2, r1
   10380:	d00b      	beq.n	1039a <ull_conn_tx_lll_enqueue+0x15e>
   10382:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   10386:	2a03      	cmp	r2, #3
   10388:	d088      	beq.n	1029c <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   1038a:	681a      	ldr	r2, [r3, #0]
   1038c:	b11a      	cbz	r2, 10396 <ull_conn_tx_lll_enqueue+0x15a>
   1038e:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   10392:	428a      	cmp	r2, r1
   10394:	d02d      	beq.n	103f2 <ull_conn_tx_lll_enqueue+0x1b6>
}
   10396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
   1039a:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
   1039e:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   103a2:	4288      	cmp	r0, r1
   103a4:	d1f1      	bne.n	1038a <ull_conn_tx_lll_enqueue+0x14e>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   103a6:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   103aa:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   103ae:	4288      	cmp	r0, r1
   103b0:	d1eb      	bne.n	1038a <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   103b2:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   103b6:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   103ba:	4288      	cmp	r0, r1
   103bc:	d1e5      	bne.n	1038a <ull_conn_tx_lll_enqueue+0x14e>
		       conn->llcp_conn_param.req) ||
   103be:	f894 0199 	ldrb.w	r0, [r4, #409]	; 0x199
   103c2:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
   103c6:	4288      	cmp	r0, r1
   103c8:	d1df      	bne.n	1038a <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   103ca:	f894 01a9 	ldrb.w	r0, [r4, #425]	; 0x1a9
   103ce:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   103d2:	4288      	cmp	r0, r1
   103d4:	d1d9      	bne.n	1038a <ull_conn_tx_lll_enqueue+0x14e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   103d6:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   103da:	2101      	movs	r1, #1
   103dc:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   103e0:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   103e2:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   103e4:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   103e8:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_type = LLCP_ENCRYPTION;
   103ec:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   103f0:	e754      	b.n	1029c <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
   103f2:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
				if (!conn->tx_data_last) {
   103f6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
				conn->tx_head = tx->next;
   103fa:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
				tx->next = conn->tx_ctrl_last->next;
   103fe:	680a      	ldr	r2, [r1, #0]
   10400:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   10402:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   10404:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
   10408:	2800      	cmp	r0, #0
   1040a:	f47f af47 	bne.w	1029c <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   1040e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   10412:	e743      	b.n	1029c <ull_conn_tx_lll_enqueue+0x60>
   10414:	4770      	bx	lr
   10416:	bf00      	nop
   10418:	000275f0 	.word	0x000275f0
   1041c:	200024a0 	.word	0x200024a0
   10420:	00027934 	.word	0x00027934
   10424:	0002798c 	.word	0x0002798c

00010428 <tx_demux>:
{
   10428:	b510      	push	{r4, lr}
   1042a:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   1042c:	2001      	movs	r0, #1
   1042e:	f7ff fcad 	bl	fd8c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   10432:	4620      	mov	r0, r4
   10434:	2101      	movs	r1, #1
}
   10436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   1043a:	f7ff beff 	b.w	1023c <ull_conn_tx_lll_enqueue>
   1043e:	bf00      	nop

00010440 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   10440:	4901      	ldr	r1, [pc, #4]	; (10448 <ull_conn_link_tx_release+0x8>)
   10442:	f7f8 bd7d 	b.w	8f40 <mem_release>
   10446:	bf00      	nop
   10448:	200024a0 	.word	0x200024a0

0001044c <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   1044c:	4b01      	ldr	r3, [pc, #4]	; (10454 <ull_conn_ack_last_idx_get+0x8>)
}
   1044e:	78d8      	ldrb	r0, [r3, #3]
   10450:	4770      	bx	lr
   10452:	bf00      	nop
   10454:	200005d4 	.word	0x200005d4

00010458 <ull_conn_ack_peek>:
{
   10458:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1045a:	4b0b      	ldr	r3, [pc, #44]	; (10488 <ull_conn_ack_peek+0x30>)
   1045c:	789c      	ldrb	r4, [r3, #2]
   1045e:	78de      	ldrb	r6, [r3, #3]
   10460:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   10462:	42b4      	cmp	r4, r6
   10464:	d00d      	beq.n	10482 <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   10466:	3304      	adds	r3, #4
   10468:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   1046c:	4605      	mov	r5, r0
   1046e:	1918      	adds	r0, r3, r4
   10470:	d005      	beq.n	1047e <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   10472:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   10474:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   10476:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   10478:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   1047a:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1047c:	6818      	ldr	r0, [r3, #0]
}
   1047e:	bcf0      	pop	{r4, r5, r6, r7}
   10480:	4770      	bx	lr
		return NULL;
   10482:	2000      	movs	r0, #0
   10484:	e7fb      	b.n	1047e <ull_conn_ack_peek+0x26>
   10486:	bf00      	nop
   10488:	200005d4 	.word	0x200005d4

0001048c <ull_conn_ack_by_last_peek>:
{
   1048c:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1048e:	4b09      	ldr	r3, [pc, #36]	; (104b4 <ull_conn_ack_by_last_peek+0x28>)
   10490:	789c      	ldrb	r4, [r3, #2]
   10492:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   10494:	4284      	cmp	r4, r0
   10496:	d00b      	beq.n	104b0 <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   10498:	3304      	adds	r3, #4
   1049a:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   1049e:	1918      	adds	r0, r3, r4
   104a0:	d004      	beq.n	104ac <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   104a2:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   104a4:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   104a6:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   104a8:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   104aa:	6818      	ldr	r0, [r3, #0]
}
   104ac:	bc30      	pop	{r4, r5}
   104ae:	4770      	bx	lr
		return NULL;
   104b0:	2000      	movs	r0, #0
   104b2:	e7fb      	b.n	104ac <ull_conn_ack_by_last_peek+0x20>
   104b4:	200005d4 	.word	0x200005d4

000104b8 <ull_conn_ack_dequeue>:
{
   104b8:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   104ba:	4b0a      	ldr	r3, [pc, #40]	; (104e4 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   104bc:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   104be:	78da      	ldrb	r2, [r3, #3]
   104c0:	7818      	ldrb	r0, [r3, #0]
   104c2:	785c      	ldrb	r4, [r3, #1]
   104c4:	428a      	cmp	r2, r1
   104c6:	d00a      	beq.n	104de <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   104c8:	1c4a      	adds	r2, r1, #1
   104ca:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   104cc:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   104d0:	4294      	cmp	r4, r2
   104d2:	bf08      	it	eq
   104d4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   104d6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   104d8:	709a      	strb	r2, [r3, #2]
}
   104da:	bc10      	pop	{r4}
   104dc:	4770      	bx	lr
		return NULL;
   104de:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   104e0:	e7fb      	b.n	104da <ull_conn_ack_dequeue+0x22>
   104e2:	bf00      	nop
   104e4:	200005d4 	.word	0x200005d4

000104e8 <ull_conn_lll_ack_enqueue>:
{
   104e8:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   104ea:	4a13      	ldr	r2, [pc, #76]	; (10538 <ull_conn_lll_ack_enqueue+0x50>)
   104ec:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   104ee:	7855      	ldrb	r5, [r2, #1]
   104f0:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   104f2:	1c73      	adds	r3, r6, #1
   104f4:	b2db      	uxtb	r3, r3
		last = 0U;
   104f6:	429d      	cmp	r5, r3
   104f8:	bf08      	it	eq
   104fa:	2300      	moveq	r3, #0
	if (last == first) {
   104fc:	429c      	cmp	r4, r3
   104fe:	d00a      	beq.n	10516 <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10500:	4615      	mov	r5, r2
   10502:	f815 4b04 	ldrb.w	r4, [r5], #4
   10506:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   1050a:	192e      	adds	r6, r5, r4
   1050c:	d003      	beq.n	10516 <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   1050e:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   10510:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   10512:	6071      	str	r1, [r6, #4]
}
   10514:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   10516:	4a09      	ldr	r2, [pc, #36]	; (1053c <ull_conn_lll_ack_enqueue+0x54>)
   10518:	4909      	ldr	r1, [pc, #36]	; (10540 <ull_conn_lll_ack_enqueue+0x58>)
   1051a:	480a      	ldr	r0, [pc, #40]	; (10544 <ull_conn_lll_ack_enqueue+0x5c>)
   1051c:	f240 53a9 	movw	r3, #1449	; 0x5a9
   10520:	f00d fbe5 	bl	1dcee <printk>
   10524:	4040      	eors	r0, r0
   10526:	f380 8811 	msr	BASEPRI, r0
   1052a:	f04f 0003 	mov.w	r0, #3
   1052e:	df02      	svc	2
	lll_tx->handle = handle;
   10530:	2300      	movs	r3, #0
   10532:	801b      	strh	r3, [r3, #0]
   10534:	deff      	udf	#255	; 0xff
   10536:	bf00      	nop
   10538:	200005d4 	.word	0x200005d4
   1053c:	00027934 	.word	0x00027934
   10540:	0002797c 	.word	0x0002797c
   10544:	000275f0 	.word	0x000275f0

00010548 <ull_conn_tx_ack>:
{
   10548:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   1054a:	7953      	ldrb	r3, [r2, #5]
{
   1054c:	b083      	sub	sp, #12
   1054e:	4614      	mov	r4, r2
   10550:	4605      	mov	r5, r0
   10552:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   10554:	b37b      	cbz	r3, 105b6 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   10556:	7923      	ldrb	r3, [r4, #4]
   10558:	f003 0203 	and.w	r2, r3, #3
   1055c:	2a03      	cmp	r2, #3
   1055e:	d00d      	beq.n	1057c <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   10560:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10564:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   10566:	bf04      	itt	eq
   10568:	f36f 0301 	bfceq	r3, #0, #2
   1056c:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1056e:	4621      	mov	r1, r4
   10570:	4628      	mov	r0, r5
}
   10572:	b003      	add	sp, #12
   10574:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   10578:	f7fc bb14 	b.w	cba4 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   1057c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10580:	429d      	cmp	r5, r3
   10582:	d126      	bne.n	105d2 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   10584:	6830      	ldr	r0, [r6, #0]
   10586:	4284      	cmp	r4, r0
   10588:	d04b      	beq.n	10622 <ull_conn_tx_ack+0xda>
			LL_ASSERT(!link->next);
   1058a:	2800      	cmp	r0, #0
   1058c:	d0ef      	beq.n	1056e <ull_conn_tx_ack+0x26>
   1058e:	4abf      	ldr	r2, [pc, #764]	; (1088c <ull_conn_tx_ack+0x344>)
   10590:	49bf      	ldr	r1, [pc, #764]	; (10890 <ull_conn_tx_ack+0x348>)
   10592:	48c0      	ldr	r0, [pc, #768]	; (10894 <ull_conn_tx_ack+0x34c>)
   10594:	f240 53c9 	movw	r3, #1481	; 0x5c9
   10598:	f00d fba9 	bl	1dcee <printk>
   1059c:	4040      	eors	r0, r0
   1059e:	f380 8811 	msr	BASEPRI, r0
   105a2:	f04f 0003 	mov.w	r0, #3
   105a6:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   105a8:	4621      	mov	r1, r4
   105aa:	4628      	mov	r0, r5
}
   105ac:	b003      	add	sp, #12
   105ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   105b2:	f7fc baf7 	b.w	cba4 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   105b6:	4ab5      	ldr	r2, [pc, #724]	; (1088c <ull_conn_tx_ack+0x344>)
   105b8:	49b7      	ldr	r1, [pc, #732]	; (10898 <ull_conn_tx_ack+0x350>)
   105ba:	48b6      	ldr	r0, [pc, #728]	; (10894 <ull_conn_tx_ack+0x34c>)
   105bc:	f240 53b6 	movw	r3, #1462	; 0x5b6
   105c0:	f00d fb95 	bl	1dcee <printk>
   105c4:	4040      	eors	r0, r0
   105c6:	f380 8811 	msr	BASEPRI, r0
   105ca:	f04f 0003 	mov.w	r0, #3
   105ce:	df02      	svc	2
   105d0:	e7c1      	b.n	10556 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   105d2:	48b2      	ldr	r0, [pc, #712]	; (1089c <ull_conn_tx_ack+0x354>)
   105d4:	462a      	mov	r2, r5
   105d6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   105da:	f7f8 fccb 	bl	8f74 <mem_get>
   105de:	79e3      	ldrb	r3, [r4, #7]
   105e0:	3b02      	subs	r3, #2
   105e2:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   105e4:	2b16      	cmp	r3, #22
   105e6:	d818      	bhi.n	1061a <ull_conn_tx_ack+0xd2>
   105e8:	e8df f013 	tbh	[pc, r3, lsl #1]
   105ec:	00f60111 	.word	0x00f60111
   105f0:	00170048 	.word	0x00170048
   105f4:	00170017 	.word	0x00170017
   105f8:	00170017 	.word	0x00170017
   105fc:	005d00e5 	.word	0x005d00e5
   10600:	00530017 	.word	0x00530017
   10604:	00170017 	.word	0x00170017
   10608:	004f0017 	.word	0x004f0017
   1060c:	00170017 	.word	0x00170017
   10610:	00a400cc 	.word	0x00a400cc
   10614:	00280021 	.word	0x00280021
   10618:	00d4      	.short	0x00d4
		if (link->next == (void *)tx) {
   1061a:	6830      	ldr	r0, [r6, #0]
   1061c:	42a0      	cmp	r0, r4
   1061e:	d1b4      	bne.n	1058a <ull_conn_tx_ack+0x42>
   10620:	4620      	mov	r0, r4
			mem_release(tx, &mem_conn_tx_ctrl.free);
   10622:	499f      	ldr	r1, [pc, #636]	; (108a0 <ull_conn_tx_ack+0x358>)
}
   10624:	b003      	add	sp, #12
   10626:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1062a:	f7f8 bc89 	b.w	8f40 <mem_release>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1062e:	f890 31aa 	ldrb.w	r3, [r0, #426]	; 0x1aa
   10632:	2202      	movs	r2, #2
   10634:	f362 0301 	bfi	r3, r2, #0, #2
   10638:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		if (conn->lll.role) {
   1063c:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
   10640:	2b00      	cmp	r3, #0
   10642:	da14      	bge.n	1066e <ull_conn_tx_ack+0x126>
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   10644:	4997      	ldr	r1, [pc, #604]	; (108a4 <ull_conn_tx_ack+0x35c>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   10646:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
   1064a:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   1064e:	c903      	ldmia	r1, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   10650:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   10654:	f10d 0c08 	add.w	ip, sp, #8
   10658:	e90c 0003 	stmdb	ip, {r0, r1}
			lll->phy_tx_time = phy_tx_time[phys];
   1065c:	f003 0307 	and.w	r3, r3, #7
   10660:	4463      	add	r3, ip
   10662:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   10666:	f363 1206 	bfi	r2, r3, #4, #3
   1066a:	f887 2064 	strb.w	r2, [r7, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1066e:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
   10672:	f36f 0300 	bfc	r3, #0, #1
   10676:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
		break;
   1067a:	e783      	b.n	10584 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   1067c:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
   10680:	f043 0302 	orr.w	r3, r3, #2
   10684:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
   10688:	e77c      	b.n	10584 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1068a:	7a23      	ldrb	r3, [r4, #8]
   1068c:	2b03      	cmp	r3, #3
   1068e:	f47f af79 	bne.w	10584 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   10692:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = 0U;
   10696:	2200      	movs	r2, #0
		conn->llcp_enc.pause_rx = 0U;
   10698:	f023 0303 	bic.w	r3, r3, #3
   1069c:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = 0U;
   106a0:	f8a7 20cc 	strh.w	r2, [r7, #204]	; 0xcc
		break;
   106a4:	e76e      	b.n	10584 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   106a6:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   106aa:	2b00      	cmp	r3, #0
   106ac:	dbe6      	blt.n	1067c <ull_conn_tx_ack+0x134>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   106ae:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   106b0:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   106b2:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   106b6:	2203      	movs	r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   106b8:	7161      	strb	r1, [r4, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   106ba:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   106bc:	71e2      	strb	r2, [r4, #7]
   106be:	f8d0 3155 	ldr.w	r3, [r0, #341]	; 0x155
   106c2:	f8d0 2159 	ldr.w	r2, [r0, #345]	; 0x159
   106c6:	60e2      	str	r2, [r4, #12]
   106c8:	60a3      	str	r3, [r4, #8]
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   106ca:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
   106ce:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   106d0:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
   106d4:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   106d6:	210c      	movs	r1, #12
   106d8:	f104 0012 	add.w	r0, r4, #18
   106dc:	f001 fc7e 	bl	11fdc <lll_csrand_isr_get>
	    conn->tx_head &&
   106e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
	if (
   106e4:	2b00      	cmp	r3, #0
   106e6:	f000 80ab 	beq.w	10840 <ull_conn_tx_ack+0x2f8>
	    !conn->llcp_enc.pause_tx &&
   106ea:	f897 2152 	ldrb.w	r2, [r7, #338]	; 0x152
	    conn->tx_head &&
   106ee:	0791      	lsls	r1, r2, #30
   106f0:	f100 80a6 	bmi.w	10840 <ull_conn_tx_ack+0x2f8>
	    !conn->llcp_phy.pause_tx &&
   106f4:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
   106f8:	07d2      	lsls	r2, r2, #31
   106fa:	f100 80a1 	bmi.w	10840 <ull_conn_tx_ack+0x2f8>
		if (conn->tx_head == conn->tx_data) {
   106fe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
   10702:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   10704:	bf04      	itt	eq
   10706:	681a      	ldreq	r2, [r3, #0]
   10708:	f8c7 21bc 	streq.w	r2, [r7, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   1070c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
   10710:	2a00      	cmp	r2, #0
   10712:	f000 80b4 	beq.w	1087e <ull_conn_tx_ack+0x336>
	tx->next = conn->tx_ctrl_last->next;
   10716:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
   1071a:	681a      	ldr	r2, [r3, #0]
   1071c:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   1071e:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
   10720:	6823      	ldr	r3, [r4, #0]
   10722:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
	if (!tx->next) {
   10726:	6832      	ldr	r2, [r6, #0]
   10728:	2b00      	cmp	r3, #0
   1072a:	d077      	beq.n	1081c <ull_conn_tx_ack+0x2d4>
		if (link->next == (void *)tx) {
   1072c:	2a00      	cmp	r2, #0
   1072e:	d078      	beq.n	10822 <ull_conn_tx_ack+0x2da>
}
   10730:	b003      	add	sp, #12
   10732:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   10734:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   10738:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   1073c:	428b      	cmp	r3, r1
   1073e:	f43f af21 	beq.w	10584 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   10742:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
   10746:	f002 0307 	and.w	r3, r2, #7
   1074a:	2b03      	cmp	r3, #3
   1074c:	d005      	beq.n	1075a <ull_conn_tx_ack+0x212>
   1074e:	3303      	adds	r3, #3
   10750:	f003 0307 	and.w	r3, r3, #7
   10754:	2b01      	cmp	r3, #1
   10756:	f63f af60 	bhi.w	1061a <ull_conn_tx_ack+0xd2>
				conn->lll.max_tx_octets =
   1075a:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
   1075e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   10762:	f002 0307 	and.w	r3, r2, #7
				conn->lll.max_tx_time =
   10766:	f8b7 01a2 	ldrh.w	r0, [r7, #418]	; 0x1a2
   1076a:	f8a7 0060 	strh.w	r0, [r7, #96]	; 0x60
				if (conn->llcp_length.state ==
   1076e:	2b05      	cmp	r3, #5
   10770:	d07f      	beq.n	10872 <ull_conn_tx_ack+0x32a>
				if (!conn->llcp_length.cache.tx_octets) {
   10772:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
   10776:	2b00      	cmp	r3, #0
   10778:	d16d      	bne.n	10856 <ull_conn_tx_ack+0x30e>
					conn->llcp_length.ack =
   1077a:	f887 1199 	strb.w	r1, [r7, #409]	; 0x199
					conn->procedure_expire = 0U;
   1077e:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
					break;
   10782:	e6ff      	b.n	10584 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   10784:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   10788:	2202      	movs	r2, #2
   1078a:	f362 0302 	bfi	r3, r2, #0, #3
   1078e:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
		break;
   10792:	e6f7      	b.n	10584 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   10794:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   10798:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1079c:	f890 21ab 	ldrb.w	r2, [r0, #427]	; 0x1ab
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   107a0:	f3c3 0382 	ubfx	r3, r3, #2, #3
   107a4:	f363 1106 	bfi	r1, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   107a8:	f36f 0200 	bfc	r2, #0, #1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   107ac:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   107b0:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
		break;
   107b4:	e6e6      	b.n	10584 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_tx = 1U;
   107b6:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   107ba:	f8b0 20ca 	ldrh.w	r2, [r0, #202]	; 0xca
   107be:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   107c2:	f023 0306 	bic.w	r3, r3, #6
		conn->llcp_enc.ack = conn->llcp_enc.req;
   107c6:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
   107ca:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
		conn->llcp_enc.pause_tx = 1U;
   107ce:	f043 0306 	orr.w	r3, r3, #6
   107d2:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
		break;
   107d6:	e6d5      	b.n	10584 <ull_conn_tx_ack+0x3c>
   107d8:	4622      	mov	r2, r4
		conn->llcp_enc.pause_tx = 1U;
   107da:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
   107de:	f852 1f12 	ldr.w	r1, [r2, #18]!
   107e2:	6852      	ldr	r2, [r2, #4]
   107e4:	f8c0 20f2 	str.w	r2, [r0, #242]	; 0xf2
   107e8:	f8c0 10ee 	str.w	r1, [r0, #238]	; 0xee
   107ec:	f8d4 201a 	ldr.w	r2, [r4, #26]
		conn->procedure_expire = conn->procedure_reload;
   107f0:	f8b0 10ca 	ldrh.w	r1, [r0, #202]	; 0xca
   107f4:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
		conn->llcp_enc.pause_tx = 1U;
   107f8:	f043 0302 	orr.w	r3, r3, #2
		conn->llcp_enc.ack = conn->llcp_enc.req;
   107fc:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
		conn->llcp_enc.pause_tx = 1U;
   10800:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   10804:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
		conn->llcp_enc.ack = conn->llcp_enc.req;
   10808:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
		break;
   1080c:	e6ba      	b.n	10584 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   1080e:	7a21      	ldrb	r1, [r4, #8]
   10810:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   10812:	bf08      	it	eq
   10814:	2116      	moveq	r1, #22
   10816:	f7ff fb09 	bl	fe2c <conn_cleanup>
	break;
   1081a:	e6b3      	b.n	10584 <ull_conn_tx_ack+0x3c>
		conn->tx_data_last = tx;
   1081c:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
   10820:	e784      	b.n	1072c <ull_conn_tx_ack+0x1e4>
			LL_ASSERT(link->next);
   10822:	4a1a      	ldr	r2, [pc, #104]	; (1088c <ull_conn_tx_ack+0x344>)
   10824:	4920      	ldr	r1, [pc, #128]	; (108a8 <ull_conn_tx_ack+0x360>)
   10826:	481b      	ldr	r0, [pc, #108]	; (10894 <ull_conn_tx_ack+0x34c>)
   10828:	f240 53c1 	movw	r3, #1473	; 0x5c1
   1082c:	f00d fa5f 	bl	1dcee <printk>
   10830:	4040      	eors	r0, r0
   10832:	f380 8811 	msr	BASEPRI, r0
   10836:	f04f 0003 	mov.w	r0, #3
   1083a:	df02      	svc	2
   1083c:	2000      	movs	r0, #0
   1083e:	e6f0      	b.n	10622 <ull_conn_tx_ack+0xda>
		if (!conn->tx_ctrl) {
   10840:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
   10844:	2a00      	cmp	r2, #0
   10846:	f47f af66 	bne.w	10716 <ull_conn_tx_ack+0x1ce>
			tx->next = conn->tx_head;
   1084a:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   1084c:	e9c7 446c 	strd	r4, r4, [r7, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   10850:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
   10854:	e767      	b.n	10726 <ull_conn_tx_ack+0x1de>
				conn->llcp_length.cache.tx_octets = 0;
   10856:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10858:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_length.tx_octets =
   1085c:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
				conn->llcp_length.tx_time =
   10860:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10864:	f887 219a 	strb.w	r2, [r7, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
   10868:	f8a7 11a4 	strh.w	r1, [r7, #420]	; 0x1a4
				conn->llcp_length.tx_time =
   1086c:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
				break;
   10870:	e688      	b.n	10584 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   10872:	2304      	movs	r3, #4
   10874:	f363 0202 	bfi	r2, r3, #0, #3
   10878:	f887 219a 	strb.w	r2, [r7, #410]	; 0x19a
					break;
   1087c:	e682      	b.n	10584 <ull_conn_tx_ack+0x3c>
			tx->next = conn->tx_head->next;
   1087e:	681a      	ldr	r2, [r3, #0]
   10880:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   10882:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
   10884:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   10886:	e9c7 446d 	strd	r4, r4, [r7, #436]	; 0x1b4
   1088a:	e74c      	b.n	10726 <ull_conn_tx_ack+0x1de>
   1088c:	00027934 	.word	0x00027934
   10890:	00027b0c 	.word	0x00027b0c
   10894:	000275f0 	.word	0x000275f0
   10898:	00027b00 	.word	0x00027b00
   1089c:	200021d0 	.word	0x200021d0
   108a0:	2000241c 	.word	0x2000241c
   108a4:	00027b24 	.word	0x00027b24
   108a8:	00027b18 	.word	0x00027b18

000108ac <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   108ac:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
   108b0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   108b4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   108b8:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   108ba:	bf14      	ite	ne
   108bc:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   108be:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   108c0:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   108c4:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   108c8:	bf14      	ite	ne
   108ca:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   108cc:	3b0b      	subeq	r3, #11
   108ce:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   108d0:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   108d2:	bf44      	itt	mi
   108d4:	3b04      	submi	r3, #4
   108d6:	b29b      	uxthmi	r3, r3
}
   108d8:	4298      	cmp	r0, r3
   108da:	bf28      	it	cs
   108dc:	4618      	movcs	r0, r3
   108de:	4770      	bx	lr

000108e0 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   108e0:	b510      	push	{r4, lr}
   108e2:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   108e4:	b930      	cbnz	r0, 108f4 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   108e6:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   108ea:	f36f 0341 	bfc	r3, #1, #1
   108ee:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   108f2:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   108f4:	4a09      	ldr	r2, [pc, #36]	; (1091c <ticker_update_latency_cancel_op_cb+0x3c>)
   108f6:	490a      	ldr	r1, [pc, #40]	; (10920 <ticker_update_latency_cancel_op_cb+0x40>)
   108f8:	480a      	ldr	r0, [pc, #40]	; (10924 <ticker_update_latency_cancel_op_cb+0x44>)
   108fa:	f240 13e3 	movw	r3, #483	; 0x1e3
   108fe:	f00d f9f6 	bl	1dcee <printk>
   10902:	4040      	eors	r0, r0
   10904:	f380 8811 	msr	BASEPRI, r0
   10908:	f04f 0003 	mov.w	r0, #3
   1090c:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   1090e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   10912:	f36f 0341 	bfc	r3, #1, #1
   10916:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   1091a:	bd10      	pop	{r4, pc}
   1091c:	00027b30 	.word	0x00027b30
   10920:	00027b74 	.word	0x00027b74
   10924:	000275f0 	.word	0x000275f0

00010928 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10928:	b900      	cbnz	r0, 1092c <ticker_op_cb+0x4>
   1092a:	4770      	bx	lr
{
   1092c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1092e:	4a07      	ldr	r2, [pc, #28]	; (1094c <ticker_op_cb+0x24>)
   10930:	4907      	ldr	r1, [pc, #28]	; (10950 <ticker_op_cb+0x28>)
   10932:	4808      	ldr	r0, [pc, #32]	; (10954 <ticker_op_cb+0x2c>)
   10934:	f240 13db 	movw	r3, #475	; 0x1db
   10938:	f00d f9d9 	bl	1dcee <printk>
   1093c:	4040      	eors	r0, r0
   1093e:	f380 8811 	msr	BASEPRI, r0
   10942:	f04f 0003 	mov.w	r0, #3
   10946:	df02      	svc	2
}
   10948:	bd08      	pop	{r3, pc}
   1094a:	bf00      	nop
   1094c:	00027b30 	.word	0x00027b30
   10950:	00027994 	.word	0x00027994
   10954:	000275f0 	.word	0x000275f0

00010958 <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   10958:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1095a:	4a07      	ldr	r2, [pc, #28]	; (10978 <ticker_op_stop_adv_cb.part.0+0x20>)
   1095c:	4907      	ldr	r1, [pc, #28]	; (1097c <ticker_op_stop_adv_cb.part.0+0x24>)
   1095e:	4808      	ldr	r0, [pc, #32]	; (10980 <ticker_op_stop_adv_cb.part.0+0x28>)
   10960:	f240 13d3 	movw	r3, #467	; 0x1d3
   10964:	f00d f9c3 	bl	1dcee <printk>
   10968:	4040      	eors	r0, r0
   1096a:	f380 8811 	msr	BASEPRI, r0
   1096e:	f04f 0003 	mov.w	r0, #3
   10972:	df02      	svc	2
}
   10974:	bd08      	pop	{r3, pc}
   10976:	bf00      	nop
   10978:	00027b30 	.word	0x00027b30
   1097c:	00027b88 	.word	0x00027b88
   10980:	000275f0 	.word	0x000275f0

00010984 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   10984:	2801      	cmp	r0, #1
   10986:	d000      	beq.n	1098a <ticker_op_stop_adv_cb+0x6>
   10988:	4770      	bx	lr
{
   1098a:	b510      	push	{r4, lr}
   1098c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1098e:	f7fc f979 	bl	cc84 <ull_disable_mark_get>
   10992:	4284      	cmp	r4, r0
   10994:	d003      	beq.n	1099e <ticker_op_stop_adv_cb+0x1a>
}
   10996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1099a:	f7ff bfdd 	b.w	10958 <ticker_op_stop_adv_cb.part.0>
   1099e:	bd10      	pop	{r4, pc}

000109a0 <ull_slave_ticker_cb>:
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   109a0:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
{
   109a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109a6:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   109a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   109ac:	459c      	cmp	ip, r3
   109ae:	d02a      	beq.n	10a06 <ull_slave_ticker_cb+0x66>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   109b0:	4605      	mov	r5, r0
   109b2:	460f      	mov	r7, r1
   109b4:	4601      	mov	r1, r0
   109b6:	4620      	mov	r0, r4
   109b8:	4616      	mov	r6, r2
   109ba:	f7f0 f8a9 	bl	b10 <ull_conn_llcp>
		if (ret) {
   109be:	bb10      	cbnz	r0, 10a06 <ull_slave_ticker_cb+0x66>
	return ++hdr->ref;
   109c0:	7c23      	ldrb	r3, [r4, #16]
   109c2:	3301      	adds	r3, #1
   109c4:	b2db      	uxtb	r3, r3
   109c6:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   109c8:	b363      	cbz	r3, 10a24 <ull_slave_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   109ca:	f8df c088 	ldr.w	ip, [pc, #136]	; 10a54 <ull_slave_ticker_cb+0xb4>
	mfy.param = &p;
   109ce:	4b1c      	ldr	r3, [pc, #112]	; (10a40 <ull_slave_ticker_cb+0xa0>)
	p.ticks_at_expire = ticks_at_expire;
   109d0:	f8cc 5000 	str.w	r5, [ip]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   109d4:	2200      	movs	r2, #0
	p.param = &conn->lll;
   109d6:	f104 0e1c 	add.w	lr, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   109da:	4611      	mov	r1, r2
   109dc:	2001      	movs	r0, #1
	mfy.param = &p;
   109de:	f8c3 c008 	str.w	ip, [r3, #8]
	p.remainder = remainder;
   109e2:	f8cc 7004 	str.w	r7, [ip, #4]
	p.lazy = lazy;
   109e6:	f8ac 6008 	strh.w	r6, [ip, #8]
	p.param = &conn->lll;
   109ea:	f8cc e00c 	str.w	lr, [ip, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   109ee:	f7f8 fb67 	bl	90c0 <mayfly_enqueue>
	LL_ASSERT(!err);
   109f2:	b948      	cbnz	r0, 10a08 <ull_slave_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   109f4:	20ff      	movs	r0, #255	; 0xff
   109f6:	f7ff f9c9 	bl	fd8c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   109fa:	4620      	mov	r0, r4
   109fc:	21ff      	movs	r1, #255	; 0xff
}
   109fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   10a02:	f7ff bc1b 	b.w	1023c <ull_conn_tx_lll_enqueue>
}
   10a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   10a08:	4a0e      	ldr	r2, [pc, #56]	; (10a44 <ull_slave_ticker_cb+0xa4>)
   10a0a:	490f      	ldr	r1, [pc, #60]	; (10a48 <ull_slave_ticker_cb+0xa8>)
   10a0c:	480f      	ldr	r0, [pc, #60]	; (10a4c <ull_slave_ticker_cb+0xac>)
   10a0e:	f240 1397 	movw	r3, #407	; 0x197
   10a12:	f00d f96c 	bl	1dcee <printk>
   10a16:	4040      	eors	r0, r0
   10a18:	f380 8811 	msr	BASEPRI, r0
   10a1c:	f04f 0003 	mov.w	r0, #3
   10a20:	df02      	svc	2
   10a22:	e7e7      	b.n	109f4 <ull_slave_ticker_cb+0x54>
	LL_ASSERT(ref);
   10a24:	4a07      	ldr	r2, [pc, #28]	; (10a44 <ull_slave_ticker_cb+0xa4>)
   10a26:	490a      	ldr	r1, [pc, #40]	; (10a50 <ull_slave_ticker_cb+0xb0>)
   10a28:	4808      	ldr	r0, [pc, #32]	; (10a4c <ull_slave_ticker_cb+0xac>)
   10a2a:	f240 138b 	movw	r3, #395	; 0x18b
   10a2e:	f00d f95e 	bl	1dcee <printk>
   10a32:	4040      	eors	r0, r0
   10a34:	f380 8811 	msr	BASEPRI, r0
   10a38:	f04f 0003 	mov.w	r0, #3
   10a3c:	df02      	svc	2
   10a3e:	e7c4      	b.n	109ca <ull_slave_ticker_cb+0x2a>
   10a40:	2000065c 	.word	0x2000065c
   10a44:	00027b30 	.word	0x00027b30
   10a48:	00027714 	.word	0x00027714
   10a4c:	000275f0 	.word	0x000275f0
   10a50:	00027878 	.word	0x00027878
   10a54:	200024e4 	.word	0x200024e4

00010a58 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   10a58:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   10a5a:	b123      	cbz	r3, 10a66 <ull_slave_latency_cancel+0xe>
   10a5c:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   10a60:	f012 0302 	ands.w	r3, r2, #2
   10a64:	d000      	beq.n	10a68 <ull_slave_latency_cancel+0x10>
   10a66:	4770      	bx	lr
{
   10a68:	b530      	push	{r4, r5, lr}
   10a6a:	b089      	sub	sp, #36	; 0x24
		conn->slave.latency_cancel = 1U;
   10a6c:	f042 0202 	orr.w	r2, r2, #2
				      (TICKER_ID_CONN_BASE + handle),
   10a70:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   10a72:	4d11      	ldr	r5, [pc, #68]	; (10ab8 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   10a74:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   10a78:	2401      	movs	r4, #1
   10a7a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   10a7e:	b2ca      	uxtb	r2, r1
   10a80:	9006      	str	r0, [sp, #24]
   10a82:	9304      	str	r3, [sp, #16]
   10a84:	9300      	str	r3, [sp, #0]
   10a86:	4618      	mov	r0, r3
   10a88:	9505      	str	r5, [sp, #20]
   10a8a:	9403      	str	r4, [sp, #12]
   10a8c:	2103      	movs	r1, #3
   10a8e:	f7f9 fd87 	bl	a5a0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10a92:	f030 0302 	bics.w	r3, r0, #2
   10a96:	d00c      	beq.n	10ab2 <ull_slave_latency_cancel+0x5a>
   10a98:	4a08      	ldr	r2, [pc, #32]	; (10abc <ull_slave_latency_cancel+0x64>)
   10a9a:	4909      	ldr	r1, [pc, #36]	; (10ac0 <ull_slave_latency_cancel+0x68>)
   10a9c:	4809      	ldr	r0, [pc, #36]	; (10ac4 <ull_slave_latency_cancel+0x6c>)
   10a9e:	f44f 73b0 	mov.w	r3, #352	; 0x160
   10aa2:	f00d f924 	bl	1dcee <printk>
   10aa6:	4040      	eors	r0, r0
   10aa8:	f380 8811 	msr	BASEPRI, r0
   10aac:	f04f 0003 	mov.w	r0, #3
   10ab0:	df02      	svc	2
}
   10ab2:	b009      	add	sp, #36	; 0x24
   10ab4:	bd30      	pop	{r4, r5, pc}
   10ab6:	bf00      	nop
   10ab8:	000108e1 	.word	0x000108e1
   10abc:	00027b30 	.word	0x00027b30
   10ac0:	00027a74 	.word	0x00027a74
   10ac4:	000275f0 	.word	0x000275f0

00010ac8 <ll_start_enc_req_send>:
{
   10ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10aca:	460d      	mov	r5, r1
   10acc:	4614      	mov	r4, r2
	conn = ll_connected_get(handle);
   10ace:	f7fd fa1f 	bl	df10 <ll_connected_get>
	if (!conn) {
   10ad2:	2800      	cmp	r0, #0
   10ad4:	d046      	beq.n	10b64 <ll_start_enc_req_send+0x9c>
	if (error_code) {
   10ad6:	4603      	mov	r3, r0
   10ad8:	b9ed      	cbnz	r5, 10b16 <ll_start_enc_req_send+0x4e>
		if ((conn->llcp_req == conn->llcp_ack) ||
   10ada:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   10ade:	f890 20e9 	ldrb.w	r2, [r0, #233]	; 0xe9
   10ae2:	4291      	cmp	r1, r2
   10ae4:	d035      	beq.n	10b52 <ll_start_enc_req_send+0x8a>
   10ae6:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
   10aea:	2a03      	cmp	r2, #3
   10aec:	d131      	bne.n	10b52 <ll_start_enc_req_send+0x8a>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   10aee:	f8b0 20ec 	ldrh.w	r2, [r0, #236]	; 0xec
   10af2:	6827      	ldr	r7, [r4, #0]
   10af4:	68e0      	ldr	r0, [r4, #12]
   10af6:	6866      	ldr	r6, [r4, #4]
   10af8:	68a1      	ldr	r1, [r4, #8]
   10afa:	f8c3 1165 	str.w	r1, [r3, #357]	; 0x165
   10afe:	f8c3 0169 	str.w	r0, [r3, #361]	; 0x169
   10b02:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   10b06:	f8c3 715d 	str.w	r7, [r3, #349]	; 0x15d
   10b0a:	f8c3 6161 	str.w	r6, [r3, #353]	; 0x161
	return 0;
   10b0e:	4628      	mov	r0, r5
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   10b10:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
}
   10b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_enc.refresh == 0U) {
   10b16:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
   10b1a:	f010 0004 	ands.w	r0, r0, #4
   10b1e:	d112      	bne.n	10b46 <ll_start_enc_req_send+0x7e>
			if ((conn->llcp_req == conn->llcp_ack) ||
   10b20:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
   10b24:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
   10b28:	4291      	cmp	r1, r2
   10b2a:	d012      	beq.n	10b52 <ll_start_enc_req_send+0x8a>
   10b2c:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   10b30:	2a03      	cmp	r2, #3
   10b32:	d10e      	bne.n	10b52 <ll_start_enc_req_send+0x8a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   10b34:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
			conn->llcp.encryption.error_code = error_code;
   10b38:	f883 50ed 	strb.w	r5, [r3, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   10b3c:	f360 0201 	bfi	r2, r0, #0, #2
   10b40:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
}
   10b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    conn->llcp_terminate.req) {
   10b46:	f893 112c 	ldrb.w	r1, [r3, #300]	; 0x12c
			if (conn->llcp_terminate.ack !=
   10b4a:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
   10b4e:	428a      	cmp	r2, r1
   10b50:	d001      	beq.n	10b56 <ll_start_enc_req_send+0x8e>
				return BT_HCI_ERR_CMD_DISALLOWED;
   10b52:	200c      	movs	r0, #12
}
   10b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			conn->llcp_terminate.req++;
   10b56:	3201      	adds	r2, #1
   10b58:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
			conn->llcp_terminate.reason_own = error_code;
   10b5c:	f883 512e 	strb.w	r5, [r3, #302]	; 0x12e
	return 0;
   10b60:	2000      	movs	r0, #0
}
   10b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10b64:	2002      	movs	r0, #2
}
   10b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010b68 <ull_chan_map_get>:
	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
	memcpy(chan_map, map, sizeof(map));
   10b68:	4a04      	ldr	r2, [pc, #16]	; (10b7c <ull_chan_map_get+0x14>)

	return count;
   10b6a:	4905      	ldr	r1, [pc, #20]	; (10b80 <ull_chan_map_get+0x18>)
{
   10b6c:	4603      	mov	r3, r0
   10b6e:	6810      	ldr	r0, [r2, #0]
   10b70:	6018      	str	r0, [r3, #0]
   10b72:	7912      	ldrb	r2, [r2, #4]
}
   10b74:	7808      	ldrb	r0, [r1, #0]
   10b76:	711a      	strb	r2, [r3, #4]
   10b78:	4770      	bx	lr
   10b7a:	bf00      	nop
   10b7c:	2000066c 	.word	0x2000066c
   10b80:	20000bb9 	.word	0x20000bb9

00010b84 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   10b84:	b470      	push	{r4, r5, r6}
   10b86:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   10b88:	7800      	ldrb	r0, [r0, #0]
   10b8a:	4c1b      	ldr	r4, [pc, #108]	; (10bf8 <lll_chan_sel_1+0x74>)
   10b8c:	fb02 1101 	mla	r1, r2, r1, r1
   10b90:	180a      	adds	r2, r1, r0
   10b92:	fb84 0102 	smull	r0, r1, r4, r2
   10b96:	4411      	add	r1, r2
   10b98:	1149      	asrs	r1, r1, #5
   10b9a:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   10b9e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   10ba2:	1a51      	subs	r1, r2, r1
   10ba4:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   10ba6:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   10ba8:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   10baa:	5c9c      	ldrb	r4, [r3, r2]
{
   10bac:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   10bb0:	f001 0107 	and.w	r1, r1, #7
   10bb4:	410c      	asrs	r4, r1
   10bb6:	f014 0401 	ands.w	r4, r4, #1
   10bba:	d11b      	bne.n	10bf4 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   10bbc:	fbb0 f2f5 	udiv	r2, r0, r5
   10bc0:	fb05 0212 	mls	r2, r5, r2, r0
   10bc4:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   10bc6:	1e5d      	subs	r5, r3, #1
   10bc8:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   10bca:	f104 0108 	add.w	r1, r4, #8
   10bce:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   10bd2:	4620      	mov	r0, r4
   10bd4:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   10bd6:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   10bda:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   10bde:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   10be2:	d002      	beq.n	10bea <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   10be4:	b132      	cbz	r2, 10bf4 <lll_chan_sel_1+0x70>
				chan_index--;
   10be6:	3a01      	subs	r2, #1
   10be8:	b2d2      	uxtb	r2, r2
			chan_next++;
   10bea:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   10bec:	4284      	cmp	r4, r0
   10bee:	d1f2      	bne.n	10bd6 <lll_chan_sel_1+0x52>
	while (byte_count--) {
   10bf0:	42b5      	cmp	r5, r6
   10bf2:	d1ea      	bne.n	10bca <lll_chan_sel_1+0x46>
}
   10bf4:	bc70      	pop	{r4, r5, r6}
   10bf6:	4770      	bx	lr
   10bf8:	dd67c8a7 	.word	0xdd67c8a7

00010bfc <lll_chan_sel_2>:
{
   10bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   10bfe:	4f2f      	ldr	r7, [pc, #188]	; (10cbc <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10c00:	4e2f      	ldr	r6, [pc, #188]	; (10cc0 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   10c02:	ea80 0501 	eor.w	r5, r0, r1
   10c06:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   10c08:	0a28      	lsrs	r0, r5, #8
   10c0a:	b2ed      	uxtb	r5, r5
   10c0c:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   10c10:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10c14:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   10c18:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   10c1c:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10c20:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   10c24:	ea4c 0c0e 	orr.w	ip, ip, lr
   10c28:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10c2a:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   10c2e:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   10c32:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   10c36:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   10c3a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   10c3e:	f3c0 4007 	ubfx	r0, r0, #16, #8
   10c42:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   10c46:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   10c4a:	3c01      	subs	r4, #1
   10c4c:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   10c4e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   10c52:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   10c54:	d1d8      	bne.n	10c08 <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   10c56:	481b      	ldr	r0, [pc, #108]	; (10cc4 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   10c58:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   10c5a:	fba0 5001 	umull	r5, r0, r0, r1
   10c5e:	1a0d      	subs	r5, r1, r0
   10c60:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   10c64:	0940      	lsrs	r0, r0, #5
   10c66:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   10c6a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   10c6e:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   10c70:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   10c74:	f000 0607 	and.w	r6, r0, #7
   10c78:	5d55      	ldrb	r5, [r2, r5]
   10c7a:	4135      	asrs	r5, r6
   10c7c:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   10c7e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   10c80:	d41a      	bmi.n	10cb8 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   10c82:	fb01 f303 	mul.w	r3, r1, r3
   10c86:	1e56      	subs	r6, r2, #1
   10c88:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   10c8c:	3204      	adds	r2, #4
		bite = *chan_map;
   10c8e:	f104 0508 	add.w	r5, r4, #8
   10c92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   10c96:	4620      	mov	r0, r4
   10c98:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   10c9a:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   10c9e:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   10ca2:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   10ca6:	d002      	beq.n	10cae <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   10ca8:	b133      	cbz	r3, 10cb8 <lll_chan_sel_2+0xbc>
				chan_index--;
   10caa:	3b01      	subs	r3, #1
   10cac:	b2db      	uxtb	r3, r3
			chan_next++;
   10cae:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   10cb0:	42a0      	cmp	r0, r4
   10cb2:	d1f2      	bne.n	10c9a <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   10cb4:	42b2      	cmp	r2, r6
   10cb6:	d1ea      	bne.n	10c8e <lll_chan_sel_2+0x92>
}
   10cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cba:	bf00      	nop
   10cbc:	00022110 	.word	0x00022110
   10cc0:	00088440 	.word	0x00088440
   10cc4:	bacf914d 	.word	0xbacf914d

00010cc8 <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   10cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10ccc:	4688      	mov	r8, r1
	int i;

	if (free) {
   10cce:	4615      	mov	r5, r2
   10cd0:	b10a      	cbz	r2, 10cd6 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   10cd2:	23ff      	movs	r3, #255	; 0xff
   10cd4:	7013      	strb	r3, [r2, #0]
   10cd6:	4e17      	ldr	r6, [pc, #92]	; (10d34 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10cd8:	f000 0701 	and.w	r7, r0, #1
   10cdc:	f106 0902 	add.w	r9, r6, #2
{
   10ce0:	2400      	movs	r4, #0
   10ce2:	e004      	b.n	10cee <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10ce4:	42ba      	cmp	r2, r7
   10ce6:	d014      	beq.n	10d12 <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   10ce8:	3401      	adds	r4, #1
   10cea:	2c08      	cmp	r4, #8
   10cec:	d00e      	beq.n	10d0c <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10cee:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10cf2:	07d9      	lsls	r1, r3, #31
   10cf4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   10cf8:	d4f4      	bmi.n	10ce4 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   10cfa:	2d00      	cmp	r5, #0
   10cfc:	d0f4      	beq.n	10ce8 <wl_find+0x20>
   10cfe:	782b      	ldrb	r3, [r5, #0]
   10d00:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   10d02:	bf08      	it	eq
   10d04:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   10d06:	3401      	adds	r4, #1
   10d08:	2c08      	cmp	r4, #8
   10d0a:	d1f0      	bne.n	10cee <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   10d0c:	20ff      	movs	r0, #255	; 0xff
}
   10d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10d12:	2206      	movs	r2, #6
   10d14:	4641      	mov	r1, r8
   10d16:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   10d1a:	f015 fe88 	bl	26a2e <memcmp>
   10d1e:	b130      	cbz	r0, 10d2e <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   10d20:	2d00      	cmp	r5, #0
   10d22:	d0e1      	beq.n	10ce8 <wl_find+0x20>
   10d24:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10d28:	07db      	lsls	r3, r3, #31
   10d2a:	d4dd      	bmi.n	10ce8 <wl_find+0x20>
   10d2c:	e7e7      	b.n	10cfe <wl_find+0x36>
			return i;
   10d2e:	b2e0      	uxtb	r0, r4
   10d30:	e7ed      	b.n	10d0e <wl_find+0x46>
   10d32:	bf00      	nop
   10d34:	20002724 	.word	0x20002724

00010d38 <filter_insert>:
}
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
   10d38:	b430      	push	{r4, r5}
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10d3a:	7845      	ldrb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   10d3c:	7804      	ldrb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10d3e:	408a      	lsls	r2, r1
   10d40:	4315      	orrs	r5, r2
	filter->enable_bitmask |= BIT(index);
   10d42:	2201      	movs	r2, #1
   10d44:	408a      	lsls	r2, r1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10d46:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	filter->enable_bitmask |= BIT(index);
   10d4a:	4314      	orrs	r4, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10d4c:	0049      	lsls	r1, r1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10d4e:	7045      	strb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   10d50:	7004      	strb	r4, [r0, #0]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10d52:	3102      	adds	r1, #2
   10d54:	681a      	ldr	r2, [r3, #0]
   10d56:	5042      	str	r2, [r0, r1]
   10d58:	4401      	add	r1, r0
   10d5a:	889b      	ldrh	r3, [r3, #4]
   10d5c:	808b      	strh	r3, [r1, #4]
}
   10d5e:	bc30      	pop	{r4, r5}
   10d60:	4770      	bx	lr
   10d62:	bf00      	nop

00010d64 <wl_update>:
{
   10d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10d68:	4d16      	ldr	r5, [pc, #88]	; (10dc4 <wl_update+0x60>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10d6a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10dcc <wl_update+0x68>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   10d6e:	4f16      	ldr	r7, [pc, #88]	; (10dc8 <wl_update+0x64>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10d70:	f8df 905c 	ldr.w	r9, [pc, #92]	; 10dd0 <wl_update+0x6c>
   10d74:	1eae      	subs	r6, r5, #2
{
   10d76:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   10d78:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10d7c:	f013 0f01 	tst.w	r3, #1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   10d80:	4621      	mov	r1, r4
   10d82:	462b      	mov	r3, r5
   10d84:	4638      	mov	r0, r7
		if (!wl[i].taken) {
   10d86:	d015      	beq.n	10db4 <wl_update+0x50>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10d88:	f898 2000 	ldrb.w	r2, [r8]
   10d8c:	b162      	cbz	r2, 10da8 <wl_update+0x44>
		j = wl[i].rl_idx;
   10d8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10d92:	2a07      	cmp	r2, #7
   10d94:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   10d98:	d806      	bhi.n	10da8 <wl_update+0x44>
   10d9a:	f819 203c 	ldrb.w	r2, [r9, ip, lsl #3]
   10d9e:	f012 0f04 	tst.w	r2, #4
   10da2:	d001      	beq.n	10da8 <wl_update+0x44>
   10da4:	06d2      	lsls	r2, r2, #27
   10da6:	d505      	bpl.n	10db4 <wl_update+0x50>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   10da8:	f816 2034 	ldrb.w	r2, [r6, r4, lsl #3]
   10dac:	f3c2 0240 	ubfx	r2, r2, #1, #1
   10db0:	f7ff ffc2 	bl	10d38 <filter_insert>
	for (i = 0U; i < WL_SIZE; i++) {
   10db4:	3401      	adds	r4, #1
   10db6:	2c08      	cmp	r4, #8
   10db8:	f105 0508 	add.w	r5, r5, #8
   10dbc:	d1dc      	bne.n	10d78 <wl_update+0x14>
}
   10dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10dc2:	bf00      	nop
   10dc4:	20002726 	.word	0x20002726
   10dc8:	20002764 	.word	0x20002764
   10dcc:	20002f7f 	.word	0x20002f7f
   10dd0:	200025ac 	.word	0x200025ac

00010dd4 <rl_update>:
{
   10dd4:	b570      	push	{r4, r5, r6, lr}
   10dd6:	4d0c      	ldr	r5, [pc, #48]	; (10e08 <rl_update+0x34>)
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   10dd8:	480c      	ldr	r0, [pc, #48]	; (10e0c <rl_update+0x38>)
   10dda:	1c6e      	adds	r6, r5, #1
{
   10ddc:	2400      	movs	r4, #0
   10dde:	e002      	b.n	10de6 <rl_update+0x12>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10de0:	3401      	adds	r4, #1
   10de2:	2c08      	cmp	r4, #8
   10de4:	d00f      	beq.n	10e06 <rl_update+0x32>
		if (rl[i].taken) {
   10de6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   10dea:	00d3      	lsls	r3, r2, #3
   10dec:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
   10df0:	07d1      	lsls	r1, r2, #31
   10df2:	d5f5      	bpl.n	10de0 <rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   10df4:	4621      	mov	r1, r4
   10df6:	4433      	add	r3, r6
   10df8:	f3c2 1280 	ubfx	r2, r2, #6, #1
   10dfc:	3401      	adds	r4, #1
   10dfe:	f7ff ff9b 	bl	10d38 <filter_insert>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10e02:	2c08      	cmp	r4, #8
   10e04:	d1ef      	bne.n	10de6 <rl_update+0x12>
}
   10e06:	bd70      	pop	{r4, r5, r6, pc}
   10e08:	200025ac 	.word	0x200025ac
   10e0c:	200026ec 	.word	0x200026ec

00010e10 <ll_wl_size_get>:
}
   10e10:	2008      	movs	r0, #8
   10e12:	4770      	bx	lr

00010e14 <ll_wl_clear>:
{
   10e14:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   10e16:	2000      	movs	r0, #0
   10e18:	f7fc fc3a 	bl	d690 <ull_adv_filter_pol_get>
   10e1c:	b9d8      	cbnz	r0, 10e56 <ll_wl_clear+0x42>
   10e1e:	4a0f      	ldr	r2, [pc, #60]	; (10e5c <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   10e20:	4c0f      	ldr	r4, [pc, #60]	; (10e60 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   10e22:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   10e26:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   10e28:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   10e2a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   10e2e:	d805      	bhi.n	10e3c <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   10e30:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   10e34:	f36f 1345 	bfc	r3, #5, #1
   10e38:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   10e3c:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   10e40:	f36f 0300 	bfc	r3, #0, #1
   10e44:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   10e48:	3001      	adds	r0, #1
   10e4a:	2808      	cmp	r0, #8
   10e4c:	d1e9      	bne.n	10e22 <ll_wl_clear+0xe>
	wl_anon = 0U;
   10e4e:	4b05      	ldr	r3, [pc, #20]	; (10e64 <ll_wl_clear+0x50>)
   10e50:	2000      	movs	r0, #0
   10e52:	7018      	strb	r0, [r3, #0]
}
   10e54:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10e56:	200c      	movs	r0, #12
}
   10e58:	bd10      	pop	{r4, pc}
   10e5a:	bf00      	nop
   10e5c:	20002724 	.word	0x20002724
   10e60:	200025ac 	.word	0x200025ac
   10e64:	20002f80 	.word	0x20002f80

00010e68 <ll_wl_remove>:
{
   10e68:	b538      	push	{r3, r4, r5, lr}
   10e6a:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   10e6c:	2000      	movs	r0, #0
   10e6e:	f7fc fc0f 	bl	d690 <ull_adv_filter_pol_get>
   10e72:	bb30      	cbnz	r0, 10ec2 <ll_wl_remove+0x5a>
   10e74:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   10e76:	7828      	ldrb	r0, [r5, #0]
   10e78:	28ff      	cmp	r0, #255	; 0xff
   10e7a:	d01e      	beq.n	10eba <ll_wl_remove+0x52>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   10e7c:	1c69      	adds	r1, r5, #1
   10e7e:	4622      	mov	r2, r4
   10e80:	f7ff ff22 	bl	10cc8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   10e84:	2807      	cmp	r0, #7
   10e86:	d901      	bls.n	10e8c <ll_wl_remove+0x24>
   10e88:	2002      	movs	r0, #2
}
   10e8a:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   10e8c:	4a0e      	ldr	r2, [pc, #56]	; (10ec8 <ll_wl_remove+0x60>)
   10e8e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   10e92:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   10e94:	2b07      	cmp	r3, #7
   10e96:	d808      	bhi.n	10eaa <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   10e98:	490c      	ldr	r1, [pc, #48]	; (10ecc <ll_wl_remove+0x64>)
   10e9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10e9e:	f811 5033 	ldrb.w	r5, [r1, r3, lsl #3]
   10ea2:	f364 1545 	bfi	r5, r4, #5, #1
   10ea6:	f801 5033 	strb.w	r5, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   10eaa:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   10eae:	f36f 0300 	bfc	r3, #0, #1
   10eb2:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   10eb6:	2000      	movs	r0, #0
}
   10eb8:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   10eba:	4b05      	ldr	r3, [pc, #20]	; (10ed0 <ll_wl_remove+0x68>)
   10ebc:	701c      	strb	r4, [r3, #0]
		return 0;
   10ebe:	4620      	mov	r0, r4
}
   10ec0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10ec2:	200c      	movs	r0, #12
}
   10ec4:	bd38      	pop	{r3, r4, r5, pc}
   10ec6:	bf00      	nop
   10ec8:	20002724 	.word	0x20002724
   10ecc:	200025ac 	.word	0x200025ac
   10ed0:	20002f80 	.word	0x20002f80

00010ed4 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   10ed4:	2807      	cmp	r0, #7
{
   10ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10eda:	4604      	mov	r4, r0
   10edc:	460e      	mov	r6, r1
   10ede:	4615      	mov	r5, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   10ee0:	d819      	bhi.n	10f16 <ll_rl_id_addr_get+0x42>
	LL_ASSERT(rl[rl_idx].taken);
   10ee2:	4f1a      	ldr	r7, [pc, #104]	; (10f4c <ll_rl_id_addr_get+0x78>)
   10ee4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   10ee8:	ea4f 0884 	mov.w	r8, r4, lsl #2
   10eec:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   10ef0:	07db      	lsls	r3, r3, #31
   10ef2:	d51d      	bpl.n	10f30 <ll_rl_id_addr_get+0x5c>
	*id_addr_type = rl[rl_idx].id_addr_type;
   10ef4:	44a0      	add	r8, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   10ef6:	2028      	movs	r0, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   10ef8:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   10efc:	fb00 7404 	mla	r4, r0, r4, r7
	*id_addr_type = rl[rl_idx].id_addr_type;
   10f00:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10f04:	7033      	strb	r3, [r6, #0]
   10f06:	f8d4 3001 	ldr.w	r3, [r4, #1]
   10f0a:	602b      	str	r3, [r5, #0]
   10f0c:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   10f10:	80ab      	strh	r3, [r5, #4]
}
   10f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   10f16:	4a0e      	ldr	r2, [pc, #56]	; (10f50 <ll_rl_id_addr_get+0x7c>)
   10f18:	490e      	ldr	r1, [pc, #56]	; (10f54 <ll_rl_id_addr_get+0x80>)
   10f1a:	480f      	ldr	r0, [pc, #60]	; (10f58 <ll_rl_id_addr_get+0x84>)
   10f1c:	23e9      	movs	r3, #233	; 0xe9
   10f1e:	f00c fee6 	bl	1dcee <printk>
   10f22:	4040      	eors	r0, r0
   10f24:	f380 8811 	msr	BASEPRI, r0
   10f28:	f04f 0003 	mov.w	r0, #3
   10f2c:	df02      	svc	2
   10f2e:	e7d8      	b.n	10ee2 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   10f30:	4a07      	ldr	r2, [pc, #28]	; (10f50 <ll_rl_id_addr_get+0x7c>)
   10f32:	490a      	ldr	r1, [pc, #40]	; (10f5c <ll_rl_id_addr_get+0x88>)
   10f34:	4808      	ldr	r0, [pc, #32]	; (10f58 <ll_rl_id_addr_get+0x84>)
   10f36:	23ea      	movs	r3, #234	; 0xea
   10f38:	f00c fed9 	bl	1dcee <printk>
   10f3c:	4040      	eors	r0, r0
   10f3e:	f380 8811 	msr	BASEPRI, r0
   10f42:	f04f 0003 	mov.w	r0, #3
   10f46:	df02      	svc	2
   10f48:	e7d4      	b.n	10ef4 <ll_rl_id_addr_get+0x20>
   10f4a:	bf00      	nop
   10f4c:	200025ac 	.word	0x200025ac
   10f50:	00027bb8 	.word	0x00027bb8
   10f54:	00027bfc 	.word	0x00027bfc
   10f58:	000275f0 	.word	0x000275f0
   10f5c:	00027c08 	.word	0x00027c08

00010f60 <ll_rl_size_get>:
   10f60:	2008      	movs	r0, #8
   10f62:	4770      	bx	lr

00010f64 <ll_rl_clear>:
{
   10f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   10f66:	2000      	movs	r0, #0
   10f68:	f7fc fb86 	bl	d678 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   10f6c:	bb98      	cbnz	r0, 10fd6 <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   10f6e:	4b1b      	ldr	r3, [pc, #108]	; (10fdc <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   10f70:	491b      	ldr	r1, [pc, #108]	; (10fe0 <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   10f72:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   10f76:	f893 c000 	ldrb.w	ip, [r3]
   10f7a:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   10f7e:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   10f82:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   10f86:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   10f8a:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   10f8c:	f360 0200 	bfi	r2, r0, #0, #1
   10f90:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   10f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   10f98:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   10f9c:	f360 0c00 	bfi	ip, r0, #0, #1
   10fa0:	f360 0700 	bfi	r7, r0, #0, #1
   10fa4:	f360 0600 	bfi	r6, r0, #0, #1
   10fa8:	f360 0500 	bfi	r5, r0, #0, #1
   10fac:	f360 0400 	bfi	r4, r0, #0, #1
   10fb0:	f360 0100 	bfi	r1, r0, #0, #1
   10fb4:	f360 0200 	bfi	r2, r0, #0, #1
   10fb8:	f883 c000 	strb.w	ip, [r3]
   10fbc:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   10fc0:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   10fc4:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   10fc8:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   10fcc:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   10fd0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   10fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10fd6:	200c      	movs	r0, #12
}
   10fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10fda:	bf00      	nop
   10fdc:	200025ac 	.word	0x200025ac
   10fe0:	20002f7e 	.word	0x20002f7e

00010fe4 <ll_rl_enable>:
{
   10fe4:	b510      	push	{r4, lr}
   10fe6:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   10fe8:	2000      	movs	r0, #0
   10fea:	f7fc fb45 	bl	d678 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   10fee:	b958      	cbnz	r0, 11008 <ll_rl_enable+0x24>
	switch (enable) {
   10ff0:	b134      	cbz	r4, 11000 <ll_rl_enable+0x1c>
   10ff2:	2c01      	cmp	r4, #1
   10ff4:	d001      	beq.n	10ffa <ll_rl_enable+0x16>
   10ff6:	2012      	movs	r0, #18
}
   10ff8:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   10ffa:	4b04      	ldr	r3, [pc, #16]	; (1100c <ll_rl_enable+0x28>)
   10ffc:	701c      	strb	r4, [r3, #0]
}
   10ffe:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   11000:	4b02      	ldr	r3, [pc, #8]	; (1100c <ll_rl_enable+0x28>)
   11002:	701c      	strb	r4, [r3, #0]
	return 0;
   11004:	4620      	mov	r0, r4
}
   11006:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11008:	200c      	movs	r0, #12
}
   1100a:	bd10      	pop	{r4, pc}
   1100c:	20002f7f 	.word	0x20002f7f

00011010 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   11010:	4a03      	ldr	r2, [pc, #12]	; (11020 <ll_rl_timeout_set+0x10>)
   11012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11016:	fb03 f300 	mul.w	r3, r3, r0
   1101a:	6013      	str	r3, [r2, #0]
}
   1101c:	4770      	bx	lr
   1101e:	bf00      	nop
   11020:	20002720 	.word	0x20002720

00011024 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   11024:	b1b0      	cbz	r0, 11054 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   11026:	4b0d      	ldr	r3, [pc, #52]	; (1105c <ull_filter_adv_scan_state_cb+0x38>)
   11028:	681a      	ldr	r2, [r3, #0]
{
   1102a:	b510      	push	{r4, lr}
   1102c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11030:	f240 30e7 	movw	r0, #999	; 0x3e7
   11034:	2100      	movs	r1, #0
   11036:	fbe3 0102 	umlal	r0, r1, r3, r2
   1103a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1103e:	2300      	movs	r3, #0
   11040:	f7ef f89e 	bl	180 <__aeabi_uldivmod>
}
   11044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11048:	4602      	mov	r2, r0
   1104a:	460b      	mov	r3, r1
   1104c:	4804      	ldr	r0, [pc, #16]	; (11060 <ull_filter_adv_scan_state_cb+0x3c>)
   1104e:	4905      	ldr	r1, [pc, #20]	; (11064 <ull_filter_adv_scan_state_cb+0x40>)
   11050:	f00a b8f4 	b.w	1b23c <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   11054:	4803      	ldr	r0, [pc, #12]	; (11064 <ull_filter_adv_scan_state_cb+0x40>)
   11056:	f015 bac4 	b.w	265e2 <k_delayed_work_cancel>
   1105a:	bf00      	nop
   1105c:	20002720 	.word	0x20002720
   11060:	20001488 	.word	0x20001488
   11064:	20001348 	.word	0x20001348

00011068 <ull_filter_adv_update>:
{
   11068:	b508      	push	{r3, lr}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1106a:	4b09      	ldr	r3, [pc, #36]	; (11090 <ull_filter_adv_update+0x28>)
   1106c:	2200      	movs	r2, #0
   1106e:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   11070:	b930      	cbnz	r0, 11080 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   11072:	4b08      	ldr	r3, [pc, #32]	; (11094 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   11074:	4a08      	ldr	r2, [pc, #32]	; (11098 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   11076:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   11078:	2100      	movs	r1, #0
   1107a:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   1107c:	b91b      	cbnz	r3, 11086 <ull_filter_adv_update+0x1e>
}
   1107e:	bd08      	pop	{r3, pc}
		wl_update();
   11080:	f7ff fe70 	bl	10d64 <wl_update>
   11084:	e7f5      	b.n	11072 <ull_filter_adv_update+0xa>
}
   11086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1108a:	f7ff bea3 	b.w	10dd4 <rl_update>
   1108e:	bf00      	nop
   11090:	20002764 	.word	0x20002764
   11094:	20002f7f 	.word	0x20002f7f
   11098:	200026ec 	.word	0x200026ec

0001109c <ull_filter_adv_pdu_update>:
{
   1109c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx = adv->lll.rl_idx;
   110a0:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   110a4:	2f07      	cmp	r7, #7
{
   110a6:	4605      	mov	r5, r0
   110a8:	460c      	mov	r4, r1
   110aa:	f101 0602 	add.w	r6, r1, #2
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   110ae:	d844      	bhi.n	1113a <ull_filter_adv_pdu_update+0x9e>
   110b0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 111a4 <ull_filter_adv_pdu_update+0x108>
   110b4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   110b8:	ea4f 0987 	mov.w	r9, r7, lsl #2
   110bc:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   110c0:	0719      	lsls	r1, r3, #28
   110c2:	d528      	bpl.n	11116 <ull_filter_adv_pdu_update+0x7a>
		LL_ASSERT(rl[idx].rpas_ready);
   110c4:	079a      	lsls	r2, r3, #30
   110c6:	d559      	bpl.n	1117c <ull_filter_adv_pdu_update+0xe0>
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   110c8:	eb09 0207 	add.w	r2, r9, r7
		pdu->tx_addr = 1;
   110cc:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   110ce:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
		pdu->tx_addr = 1;
   110d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   110d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
   110d8:	7023      	strb	r3, [r4, #0]
   110da:	6813      	ldr	r3, [r2, #0]
   110dc:	f8c4 3002 	str.w	r3, [r4, #2]
   110e0:	8893      	ldrh	r3, [r2, #4]
   110e2:	80b3      	strh	r3, [r6, #4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   110e4:	7823      	ldrb	r3, [r4, #0]
   110e6:	f003 030f 	and.w	r3, r3, #15
   110ea:	2b01      	cmp	r3, #1
   110ec:	d123      	bne.n	11136 <ull_filter_adv_pdu_update+0x9a>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   110ee:	44b9      	add	r9, r7
   110f0:	f104 0208 	add.w	r2, r4, #8
   110f4:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   110f8:	075b      	lsls	r3, r3, #29
   110fa:	d530      	bpl.n	1115e <ull_filter_adv_pdu_update+0xc2>
			pdu->rx_addr = 1;
   110fc:	7821      	ldrb	r1, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   110fe:	2328      	movs	r3, #40	; 0x28
   11100:	fb03 8707 	mla	r7, r3, r7, r8
			pdu->rx_addr = 1;
   11104:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   11108:	7021      	strb	r1, [r4, #0]
   1110a:	f8d7 301e 	ldr.w	r3, [r7, #30]
   1110e:	60a3      	str	r3, [r4, #8]
   11110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   11112:	8093      	strh	r3, [r2, #4]
   11114:	e00f      	b.n	11136 <ull_filter_adv_pdu_update+0x9a>
		pdu->tx_addr = adv->own_addr_type & 0x1;
   11116:	f890 004e 	ldrb.w	r0, [r0, #78]	; 0x4e
   1111a:	7823      	ldrb	r3, [r4, #0]
   1111c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   11120:	f360 1386 	bfi	r3, r0, #6, #1
   11124:	7023      	strb	r3, [r4, #0]
			ll_addr_get(pdu->tx_addr, adva);
   11126:	4631      	mov	r1, r6
   11128:	f7f9 fad6 	bl	a6d8 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1112c:	7823      	ldrb	r3, [r4, #0]
   1112e:	f003 030f 	and.w	r3, r3, #15
   11132:	2b01      	cmp	r3, #1
   11134:	d0db      	beq.n	110ee <ull_filter_adv_pdu_update+0x52>
}
   11136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = adv->own_addr_type & 0x1;
   1113a:	f890 004e 	ldrb.w	r0, [r0, #78]	; 0x4e
   1113e:	780b      	ldrb	r3, [r1, #0]
   11140:	f3c0 0040 	ubfx	r0, r0, #1, #1
   11144:	f360 1386 	bfi	r3, r0, #6, #1
   11148:	7023      	strb	r3, [r4, #0]
			ll_addr_get(pdu->tx_addr, adva);
   1114a:	4631      	mov	r1, r6
   1114c:	f7f9 fac4 	bl	a6d8 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   11150:	7823      	ldrb	r3, [r4, #0]
   11152:	f003 030f 	and.w	r3, r3, #15
   11156:	2b01      	cmp	r3, #1
   11158:	d1ed      	bne.n	11136 <ull_filter_adv_pdu_update+0x9a>
   1115a:	f104 0208 	add.w	r2, r4, #8
			pdu->rx_addr = adv->id_addr_type;
   1115e:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   11162:	7821      	ldrb	r1, [r4, #0]
   11164:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   11168:	f363 11c7 	bfi	r1, r3, #7, #1
   1116c:	7021      	strb	r1, [r4, #0]
   1116e:	f855 3f4f 	ldr.w	r3, [r5, #79]!
   11172:	6013      	str	r3, [r2, #0]
   11174:	88ab      	ldrh	r3, [r5, #4]
   11176:	8093      	strh	r3, [r2, #4]
}
   11178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   1117c:	4a06      	ldr	r2, [pc, #24]	; (11198 <ull_filter_adv_pdu_update+0xfc>)
   1117e:	4907      	ldr	r1, [pc, #28]	; (1119c <ull_filter_adv_pdu_update+0x100>)
   11180:	4807      	ldr	r0, [pc, #28]	; (111a0 <ull_filter_adv_pdu_update+0x104>)
   11182:	f44f 7313 	mov.w	r3, #588	; 0x24c
   11186:	f00c fdb2 	bl	1dcee <printk>
   1118a:	4040      	eors	r0, r0
   1118c:	f380 8811 	msr	BASEPRI, r0
   11190:	f04f 0003 	mov.w	r0, #3
   11194:	df02      	svc	2
   11196:	e797      	b.n	110c8 <ull_filter_adv_pdu_update+0x2c>
   11198:	00027bb8 	.word	0x00027bb8
   1119c:	00027c1c 	.word	0x00027c1c
   111a0:	000275f0 	.word	0x000275f0
   111a4:	200025ac 	.word	0x200025ac

000111a8 <ull_filter_rpa_update>:
{
   111a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111ac:	4682      	mov	sl, r0
   111ae:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   111b0:	f015 fa70 	bl	26694 <z_impl_k_uptime_ticks>
   111b4:	0142      	lsls	r2, r0, #5
   111b6:	014b      	lsls	r3, r1, #5
   111b8:	ebb2 0800 	subs.w	r8, r2, r0
   111bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   111c0:	eb63 0301 	sbc.w	r3, r3, r1
   111c4:	009b      	lsls	r3, r3, #2
   111c6:	ea4f 0288 	mov.w	r2, r8, lsl #2
   111ca:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   111ce:	eb12 0800 	adds.w	r8, r2, r0
   111d2:	eb43 0101 	adc.w	r1, r3, r1
   111d6:	00c9      	lsls	r1, r1, #3
   111d8:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   111dc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   111e0:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   111e4:	0bc8      	lsrs	r0, r1, #15
   111e6:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   111ea:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   111ec:	f1ba 0f00 	cmp.w	sl, #0
   111f0:	d117      	bne.n	11222 <ull_filter_rpa_update+0x7a>
   111f2:	4b66      	ldr	r3, [pc, #408]	; (1138c <ull_filter_rpa_update+0x1e4>)
   111f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   111f8:	1c59      	adds	r1, r3, #1
   111fa:	bf08      	it	eq
   111fc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   11200:	d00f      	beq.n	11222 <ull_filter_rpa_update+0x7a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   11202:	4963      	ldr	r1, [pc, #396]	; (11390 <ull_filter_rpa_update+0x1e8>)
   11204:	6809      	ldr	r1, [r1, #0]
   11206:	ebb8 0402 	subs.w	r4, r8, r2
   1120a:	eb60 0503 	sbc.w	r5, r0, r3
   1120e:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   11210:	428c      	cmp	r4, r1
   11212:	eb75 0303 	sbcs.w	r3, r5, r3
   11216:	bfac      	ite	ge
   11218:	f04f 0901 	movge.w	r9, #1
   1121c:	f04f 0900 	movlt.w	r9, #0
   11220:	e001      	b.n	11226 <ull_filter_rpa_update+0x7e>
   11222:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11226:	4e5b      	ldr	r6, [pc, #364]	; (11394 <ull_filter_rpa_update+0x1ec>)
   11228:	f8df b17c 	ldr.w	fp, [pc, #380]	; 113a8 <ull_filter_rpa_update+0x200>
   1122c:	f1a6 0717 	sub.w	r7, r6, #23
	bool all = timeout || (rpa_last_ms == -1) ||
   11230:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11232:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   11236:	00a5      	lsls	r5, r4, #2
   11238:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1123c:	07da      	lsls	r2, r3, #31
   1123e:	d515      	bpl.n	1126c <ull_filter_rpa_update+0xc4>
   11240:	f1b9 0f00 	cmp.w	r9, #0
   11244:	d101      	bne.n	1124a <ull_filter_rpa_update+0xa2>
   11246:	0798      	lsls	r0, r3, #30
   11248:	d410      	bmi.n	1126c <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   1124a:	192b      	adds	r3, r5, r4
   1124c:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   11250:	0759      	lsls	r1, r3, #29
   11252:	d432      	bmi.n	112ba <ull_filter_rpa_update+0x112>
			if (rl[i].lirk) {
   11254:	192b      	adds	r3, r5, r4
   11256:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1125a:	071a      	lsls	r2, r3, #28
   1125c:	d419      	bmi.n	11292 <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   1125e:	4425      	add	r5, r4
   11260:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   11264:	f043 0302 	orr.w	r3, r3, #2
   11268:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1126c:	3401      	adds	r4, #1
   1126e:	2c08      	cmp	r4, #8
   11270:	f106 0628 	add.w	r6, r6, #40	; 0x28
   11274:	d1dd      	bne.n	11232 <ull_filter_rpa_update+0x8a>
	if (all) {
   11276:	f1b9 0f00 	cmp.w	r9, #0
   1127a:	d004      	beq.n	11286 <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   1127c:	4b43      	ldr	r3, [pc, #268]	; (1138c <ull_filter_rpa_update+0x1e4>)
   1127e:	9a01      	ldr	r2, [sp, #4]
   11280:	f8c3 8000 	str.w	r8, [r3]
   11284:	605a      	str	r2, [r3, #4]
	if (timeout) {
   11286:	f1ba 0f00 	cmp.w	sl, #0
   1128a:	d139      	bne.n	11300 <ull_filter_rpa_update+0x158>
}
   1128c:	b007      	add	sp, #28
   1128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   11292:	a902      	add	r1, sp, #8
   11294:	f1a6 0010 	sub.w	r0, r6, #16
   11298:	f00d fbd2 	bl	1ea40 <bt_rpa_create>
				LL_ASSERT(!err);
   1129c:	2800      	cmp	r0, #0
   1129e:	d166      	bne.n	1136e <ull_filter_rpa_update+0x1c6>
				bt_addr_copy(&local_rpas[i], &rpa);
   112a0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   112a4:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
   112a8:	9802      	ldr	r0, [sp, #8]
   112aa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   112ae:	f84b 0012 	str.w	r0, [fp, r2, lsl #1]
				rl[i].local_rpa = &local_rpas[i];
   112b2:	f8c6 300d 	str.w	r3, [r6, #13]
   112b6:	8099      	strh	r1, [r3, #4]
   112b8:	e7d1      	b.n	1125e <ull_filter_rpa_update+0xb6>

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   112ba:	7833      	ldrb	r3, [r6, #0]
   112bc:	4a36      	ldr	r2, [pc, #216]	; (11398 <ull_filter_rpa_update+0x1f0>)
   112be:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   112c2:	320f      	adds	r2, #15

	for (; length > 0; length--) {
   112c4:	f10d 0307 	add.w	r3, sp, #7
   112c8:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   112cc:	f812 1901 	ldrb.w	r1, [r2], #-1
   112d0:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   112d4:	4298      	cmp	r0, r3
   112d6:	d1f9      	bne.n	112cc <ull_filter_rpa_update+0x124>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   112d8:	1df1      	adds	r1, r6, #7
   112da:	a802      	add	r0, sp, #8
   112dc:	f00d fbb0 	bl	1ea40 <bt_rpa_create>
				LL_ASSERT(!err);
   112e0:	2800      	cmp	r0, #0
   112e2:	d0b7      	beq.n	11254 <ull_filter_rpa_update+0xac>
   112e4:	4a2d      	ldr	r2, [pc, #180]	; (1139c <ull_filter_rpa_update+0x1f4>)
   112e6:	492e      	ldr	r1, [pc, #184]	; (113a0 <ull_filter_rpa_update+0x1f8>)
   112e8:	482e      	ldr	r0, [pc, #184]	; (113a4 <ull_filter_rpa_update+0x1fc>)
   112ea:	f240 2316 	movw	r3, #534	; 0x216
   112ee:	f00c fcfe 	bl	1dcee <printk>
   112f2:	4040      	eors	r0, r0
   112f4:	f380 8811 	msr	BASEPRI, r0
   112f8:	f04f 0003 	mov.w	r0, #3
   112fc:	df02      	svc	2
   112fe:	e7a9      	b.n	11254 <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
   11300:	2000      	movs	r0, #0
   11302:	f7fc f9ab 	bl	d65c <ull_adv_is_enabled_get>
		if (adv) {
   11306:	4604      	mov	r4, r0
   11308:	2800      	cmp	r0, #0
   1130a:	d0bf      	beq.n	1128c <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1130c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   11310:	075b      	lsls	r3, r3, #29
   11312:	d5bb      	bpl.n	1128c <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   11314:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   11318:	2b07      	cmp	r3, #7
   1131a:	d8b7      	bhi.n	1128c <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1131c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11320:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   11324:	a902      	add	r1, sp, #8
   11326:	302c      	adds	r0, #44	; 0x2c
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   11328:	6b1e      	ldr	r6, [r3, #48]	; 0x30
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1132a:	f001 f99b 	bl	12664 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   1132e:	7833      	ldrb	r3, [r6, #0]
	pdu->type = prev->type;
   11330:	7802      	ldrb	r2, [r0, #0]
		pdu->chan_sel = prev->chan_sel;
   11332:	f3c3 1140 	ubfx	r1, r3, #5, #1
	pdu->type = prev->type;
   11336:	f3c3 0303 	ubfx	r3, r3, #0, #4
   1133a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   1133e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   11342:	4313      	orrs	r3, r2
   11344:	7003      	strb	r3, [r0, #0]
   11346:	4605      	mov	r5, r0
	ull_filter_adv_pdu_update(adv, pdu);
   11348:	4601      	mov	r1, r0
   1134a:	4620      	mov	r0, r4
   1134c:	f7ff fea6 	bl	1109c <ull_filter_adv_pdu_update>
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   11350:	7872      	ldrb	r2, [r6, #1]
   11352:	f106 0108 	add.w	r1, r6, #8
   11356:	3a06      	subs	r2, #6
   11358:	f105 0008 	add.w	r0, r5, #8
   1135c:	f015 fb75 	bl	26a4a <memcpy>
	pdu->len = prev->len;
   11360:	7873      	ldrb	r3, [r6, #1]
   11362:	706b      	strb	r3, [r5, #1]
	pdu->last = idx;
   11364:	f89d 3008 	ldrb.w	r3, [sp, #8]
   11368:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   1136c:	e78e      	b.n	1128c <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   1136e:	4a0b      	ldr	r2, [pc, #44]	; (1139c <ull_filter_rpa_update+0x1f4>)
   11370:	490b      	ldr	r1, [pc, #44]	; (113a0 <ull_filter_rpa_update+0x1f8>)
   11372:	480c      	ldr	r0, [pc, #48]	; (113a4 <ull_filter_rpa_update+0x1fc>)
   11374:	f240 2323 	movw	r3, #547	; 0x223
   11378:	f00c fcb9 	bl	1dcee <printk>
   1137c:	4040      	eors	r0, r0
   1137e:	f380 8811 	msr	BASEPRI, r0
   11382:	f04f 0003 	mov.w	r0, #3
   11386:	df02      	svc	2
   11388:	e78a      	b.n	112a0 <ull_filter_rpa_update+0xf8>
   1138a:	bf00      	nop
   1138c:	20001340 	.word	0x20001340
   11390:	20002720 	.word	0x20002720
   11394:	200025c3 	.word	0x200025c3
   11398:	2000252c 	.word	0x2000252c
   1139c:	00027bb8 	.word	0x00027bb8
   113a0:	00027714 	.word	0x00027714
   113a4:	000275f0 	.word	0x000275f0
   113a8:	200024f4 	.word	0x200024f4

000113ac <rpa_timeout>:
{
   113ac:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   113ae:	2001      	movs	r0, #1
   113b0:	f7ff fefa 	bl	111a8 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   113b4:	4b0a      	ldr	r3, [pc, #40]	; (113e0 <rpa_timeout+0x34>)
   113b6:	681a      	ldr	r2, [r3, #0]
   113b8:	f240 30e7 	movw	r0, #999	; 0x3e7
   113bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   113c0:	2100      	movs	r1, #0
   113c2:	fbe3 0102 	umlal	r0, r1, r3, r2
   113c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   113ca:	2300      	movs	r3, #0
   113cc:	f7ee fed8 	bl	180 <__aeabi_uldivmod>
}
   113d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   113d4:	4602      	mov	r2, r0
   113d6:	460b      	mov	r3, r1
   113d8:	4802      	ldr	r0, [pc, #8]	; (113e4 <rpa_timeout+0x38>)
   113da:	4903      	ldr	r1, [pc, #12]	; (113e8 <rpa_timeout+0x3c>)
   113dc:	f009 bf2e 	b.w	1b23c <k_delayed_work_submit_to_queue>
   113e0:	20002720 	.word	0x20002720
   113e4:	20001488 	.word	0x20001488
   113e8:	20001348 	.word	0x20001348

000113ec <ull_filter_rl_find>:
{
   113ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113f0:	468b      	mov	fp, r1
	if (free) {
   113f2:	4616      	mov	r6, r2
   113f4:	b10a      	cbz	r2, 113fa <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   113f6:	23ff      	movs	r3, #255	; 0xff
   113f8:	7013      	strb	r3, [r2, #0]
   113fa:	f8df 8064 	ldr.w	r8, [pc, #100]	; 11460 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   113fe:	f000 0901 	and.w	r9, r0, #1
   11402:	f108 0a01 	add.w	sl, r8, #1
{
   11406:	2400      	movs	r4, #0
   11408:	e004      	b.n	11414 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1140a:	454a      	cmp	r2, r9
   1140c:	d019      	beq.n	11442 <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1140e:	3401      	adds	r4, #1
   11410:	2c08      	cmp	r4, #8
   11412:	d012      	beq.n	1143a <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11414:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   11418:	00e8      	lsls	r0, r5, #3
   1141a:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1141e:	07d9      	lsls	r1, r3, #31
   11420:	f3c3 1280 	ubfx	r2, r3, #6, #1
   11424:	b2e7      	uxtb	r7, r4
   11426:	d4f0      	bmi.n	1140a <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11428:	2e00      	cmp	r6, #0
   1142a:	d0f0      	beq.n	1140e <ull_filter_rl_find+0x22>
   1142c:	7833      	ldrb	r3, [r6, #0]
   1142e:	3401      	adds	r4, #1
   11430:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11432:	bf08      	it	eq
   11434:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11436:	2c08      	cmp	r4, #8
   11438:	d1ec      	bne.n	11414 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   1143a:	27ff      	movs	r7, #255	; 0xff
}
   1143c:	4638      	mov	r0, r7
   1143e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11442:	4450      	add	r0, sl
   11444:	2206      	movs	r2, #6
   11446:	4659      	mov	r1, fp
   11448:	f015 faf1 	bl	26a2e <memcmp>
   1144c:	2800      	cmp	r0, #0
   1144e:	d0f5      	beq.n	1143c <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11450:	2e00      	cmp	r6, #0
   11452:	d0dc      	beq.n	1140e <ull_filter_rl_find+0x22>
   11454:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   11458:	07db      	lsls	r3, r3, #31
   1145a:	d4d8      	bmi.n	1140e <ull_filter_rl_find+0x22>
   1145c:	e7e6      	b.n	1142c <ull_filter_rl_find+0x40>
   1145e:	bf00      	nop
   11460:	200025ac 	.word	0x200025ac

00011464 <ll_wl_add>:
{
   11464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11468:	4605      	mov	r5, r0
   1146a:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   1146c:	2000      	movs	r0, #0
   1146e:	f7fc f90f 	bl	d690 <ull_adv_filter_pol_get>
   11472:	2800      	cmp	r0, #0
   11474:	d13e      	bne.n	114f4 <ll_wl_add+0x90>
   11476:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   11478:	7828      	ldrb	r0, [r5, #0]
   1147a:	28ff      	cmp	r0, #255	; 0xff
   1147c:	d033      	beq.n	114e6 <ll_wl_add+0x82>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1147e:	f105 0801 	add.w	r8, r5, #1
   11482:	4641      	mov	r1, r8
   11484:	f10d 0207 	add.w	r2, sp, #7
   11488:	f7ff fc1e 	bl	10cc8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1148c:	2807      	cmp	r0, #7
   1148e:	d926      	bls.n	114de <ll_wl_add+0x7a>
	} else if (j >= ARRAY_SIZE(wl)) {
   11490:	f89d 6007 	ldrb.w	r6, [sp, #7]
   11494:	2e07      	cmp	r6, #7
   11496:	d83e      	bhi.n	11516 <ll_wl_add+0xb2>
	wl[i].id_addr_type = id_addr->type & 0x1;
   11498:	4f21      	ldr	r7, [pc, #132]	; (11520 <ll_wl_add+0xbc>)
   1149a:	782a      	ldrb	r2, [r5, #0]
   1149c:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   114a0:	f362 0341 	bfi	r3, r2, #1, #1
   114a4:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   114a8:	2302      	movs	r3, #2
   114aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   114ae:	f8d5 2001 	ldr.w	r2, [r5, #1]
   114b2:	50fa      	str	r2, [r7, r3]
   114b4:	443b      	add	r3, r7
   114b6:	f8b5 2005 	ldrh.w	r2, [r5, #5]
   114ba:	809a      	strh	r2, [r3, #4]
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   114bc:	7828      	ldrb	r0, [r5, #0]
   114be:	4622      	mov	r2, r4
   114c0:	4641      	mov	r1, r8
   114c2:	f7ff ff93 	bl	113ec <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   114c6:	2807      	cmp	r0, #7
   114c8:	d918      	bls.n	114fc <ll_wl_add+0x98>
		wl[i].rl_idx = FILTER_IDX_NONE;
   114ca:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   114ce:	22ff      	movs	r2, #255	; 0xff
   114d0:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   114d2:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   114d6:	f043 0301 	orr.w	r3, r3, #1
   114da:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   114de:	2000      	movs	r0, #0
}
   114e0:	b002      	add	sp, #8
   114e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   114e6:	4b0f      	ldr	r3, [pc, #60]	; (11524 <ll_wl_add+0xc0>)
   114e8:	2201      	movs	r2, #1
		return 0;
   114ea:	4620      	mov	r0, r4
		wl_anon = 1U;
   114ec:	701a      	strb	r2, [r3, #0]
}
   114ee:	b002      	add	sp, #8
   114f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   114f4:	200c      	movs	r0, #12
}
   114f6:	b002      	add	sp, #8
   114f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   114fc:	490a      	ldr	r1, [pc, #40]	; (11528 <ll_wl_add+0xc4>)
   114fe:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   11502:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   11506:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   1150a:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   1150c:	f043 0320 	orr.w	r3, r3, #32
   11510:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   11514:	e7dd      	b.n	114d2 <ll_wl_add+0x6e>
   11516:	2007      	movs	r0, #7
}
   11518:	b002      	add	sp, #8
   1151a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1151e:	bf00      	nop
   11520:	20002724 	.word	0x20002724
   11524:	20002f80 	.word	0x20002f80
   11528:	200025ac 	.word	0x200025ac

0001152c <ll_rl_add>:
{
   1152c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11530:	4606      	mov	r6, r0
   11532:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   11534:	2000      	movs	r0, #0
{
   11536:	460d      	mov	r5, r1
   11538:	4617      	mov	r7, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1153a:	f7fc f89d 	bl	d678 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1153e:	2800      	cmp	r0, #0
   11540:	f040 8099 	bne.w	11676 <ll_rl_add+0x14a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   11544:	46b1      	mov	r9, r6
   11546:	f10d 020f 	add.w	r2, sp, #15
   1154a:	f819 0b01 	ldrb.w	r0, [r9], #1
   1154e:	4649      	mov	r1, r9
   11550:	f7ff ff4c 	bl	113ec <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11554:	2807      	cmp	r0, #7
   11556:	f240 80a0 	bls.w	1169a <ll_rl_add+0x16e>
	} else if (j >= ARRAY_SIZE(rl)) {
   1155a:	f89d 800f 	ldrb.w	r8, [sp, #15]
   1155e:	f1b8 0f07 	cmp.w	r8, #7
   11562:	f200 808c 	bhi.w	1167e <ll_rl_add+0x152>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11566:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   1156a:	00d2      	lsls	r2, r2, #3
   1156c:	4c4d      	ldr	r4, [pc, #308]	; (116a4 <ll_rl_add+0x178>)
   1156e:	f8d9 1000 	ldr.w	r1, [r9]
   11572:	9201      	str	r2, [sp, #4]
   11574:	1c53      	adds	r3, r2, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   11576:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
   1157a:	50e1      	str	r1, [r4, r3]
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1157c:	4423      	add	r3, r4
   1157e:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   11582:	8099      	strh	r1, [r3, #4]
	rl[i].id_addr_type = id_addr->type & 0x1;
   11584:	7831      	ldrb	r1, [r6, #0]
   11586:	f814 303a 	ldrb.w	r3, [r4, sl, lsl #3]
   1158a:	4693      	mov	fp, r2
   1158c:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   11590:	4628      	mov	r0, r5
   11592:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   11594:	54a3      	strb	r3, [r4, r2]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   11596:	f7f7 fd05 	bl	8fa4 <mem_nz>
   1159a:	f814 300b 	ldrb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1159e:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   115a0:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   115a4:	4638      	mov	r0, r7
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   115a6:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   115aa:	f7f7 fcfb 	bl	8fa4 <mem_nz>
   115ae:	f814 300b 	ldrb.w	r3, [r4, fp]
	if (rl[i].pirk) {
   115b2:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   115b4:	f000 0001 	and.w	r0, r0, #1
   115b8:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   115bc:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   115c0:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   115c4:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   115c8:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   115cc:	d01a      	beq.n	11604 <ll_rl_add+0xd8>
		rl[i].pirk_idx = peer_irk_count;
   115ce:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 116b0 <ll_rl_add+0x184>
		peer_irk_rl_ids[peer_irk_count] = i;
   115d2:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 116b4 <ll_rl_add+0x188>
		rl[i].pirk_idx = peer_irk_count;
   115d6:	f89e 1000 	ldrb.w	r1, [lr]
   115da:	4b33      	ldr	r3, [pc, #204]	; (116a8 <ll_rl_add+0x17c>)
		peer_irk_rl_ids[peer_irk_count] = i;
   115dc:	f80c 8001 	strb.w	r8, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   115e0:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   115e4:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
   115e8:	3101      	adds	r1, #1
	psrc += length - 1;
   115ea:	f105 030f 	add.w	r3, r5, #15
   115ee:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   115f2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   115f6:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   115f8:	f813 1901 	ldrb.w	r1, [r3], #-1
   115fc:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   11600:	429d      	cmp	r5, r3
   11602:	d1f9      	bne.n	115f8 <ll_rl_add+0xcc>
	if (rl[i].lirk) {
   11604:	b198      	cbz	r0, 1162e <ll_rl_add+0x102>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   11606:	1dd3      	adds	r3, r2, #7
   11608:	6838      	ldr	r0, [r7, #0]
   1160a:	f8d7 e004 	ldr.w	lr, [r7, #4]
   1160e:	f8d7 c008 	ldr.w	ip, [r7, #8]
   11612:	68fd      	ldr	r5, [r7, #12]
   11614:	50e0      	str	r0, [r4, r3]
		rl[i].local_rpa = NULL;
   11616:	eb0b 0108 	add.w	r1, fp, r8
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1161a:	4423      	add	r3, r4
		rl[i].local_rpa = NULL;
   1161c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   11620:	2000      	movs	r0, #0
   11622:	f8c3 e004 	str.w	lr, [r3, #4]
   11626:	f8c3 c008 	str.w	ip, [r3, #8]
   1162a:	60dd      	str	r5, [r3, #12]
   1162c:	6248      	str	r0, [r1, #36]	; 0x24
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1162e:	f102 0318 	add.w	r3, r2, #24
   11632:	18e2      	adds	r2, r4, r3
__ssp_bos_icheck3(memset, void *, int)
   11634:	2700      	movs	r7, #0
   11636:	50e7      	str	r7, [r4, r3]
   11638:	eb0b 0508 	add.w	r5, fp, r8
   1163c:	8097      	strh	r7, [r2, #4]
	rl[i].rpas_ready = 0U;
   1163e:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
   11642:	00ed      	lsls	r5, r5, #3
   11644:	f023 0312 	bic.w	r3, r3, #18
   11648:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1164a:	4649      	mov	r1, r9
   1164c:	7830      	ldrb	r0, [r6, #0]
   1164e:	463a      	mov	r2, r7
   11650:	f7ff fb3a 	bl	10cc8 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   11654:	2807      	cmp	r0, #7
   11656:	d916      	bls.n	11686 <ll_rl_add+0x15a>
		rl[i].wl = 0U;
   11658:	5d63      	ldrb	r3, [r4, r5]
   1165a:	f367 1345 	bfi	r3, r7, #5, #1
   1165e:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   11660:	44d8      	add	r8, fp
	return 0;
   11662:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   11664:	f814 3038 	ldrb.w	r3, [r4, r8, lsl #3]
   11668:	f043 0301 	orr.w	r3, r3, #1
   1166c:	f804 3038 	strb.w	r3, [r4, r8, lsl #3]
}
   11670:	b005      	add	sp, #20
   11672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11676:	200c      	movs	r0, #12
}
   11678:	b005      	add	sp, #20
   1167a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1167e:	2007      	movs	r0, #7
}
   11680:	b005      	add	sp, #20
   11682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   11686:	4a09      	ldr	r2, [pc, #36]	; (116ac <ll_rl_add+0x180>)
		rl[i].wl = 1U;
   11688:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   1168a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   1168e:	f043 0320 	orr.w	r3, r3, #32
   11692:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   11694:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1U;
   11698:	e7e2      	b.n	11660 <ll_rl_add+0x134>
		return BT_HCI_ERR_INVALID_PARAM;
   1169a:	2012      	movs	r0, #18
}
   1169c:	b005      	add	sp, #20
   1169e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116a2:	bf00      	nop
   116a4:	200025ac 	.word	0x200025ac
   116a8:	2000252c 	.word	0x2000252c
   116ac:	20002724 	.word	0x20002724
   116b0:	20002f7e 	.word	0x20002f7e
   116b4:	20002524 	.word	0x20002524

000116b8 <ll_rl_remove>:
{
   116b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116bc:	b083      	sub	sp, #12
   116be:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   116c0:	2000      	movs	r0, #0
{
   116c2:	9500      	str	r5, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   116c4:	f7fb ffd8 	bl	d678 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   116c8:	2800      	cmp	r0, #0
   116ca:	d160      	bne.n	1178e <ll_rl_remove+0xd6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   116cc:	462f      	mov	r7, r5
   116ce:	4602      	mov	r2, r0
   116d0:	4604      	mov	r4, r0
   116d2:	f817 0b01 	ldrb.w	r0, [r7], #1
   116d6:	9500      	str	r5, [sp, #0]
   116d8:	4639      	mov	r1, r7
   116da:	f7ff fe87 	bl	113ec <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   116de:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   116e0:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
   116e2:	d903      	bls.n	116ec <ll_rl_remove+0x34>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   116e4:	2002      	movs	r0, #2
}
   116e6:	b003      	add	sp, #12
   116e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   116ec:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 117ac <ll_rl_remove+0xf4>
   116f0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   116f4:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   116f8:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   116fc:	075d      	lsls	r5, r3, #29
   116fe:	ea4f 0980 	mov.w	r9, r0, lsl #2
   11702:	d52c      	bpl.n	1175e <ll_rl_remove+0xa6>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11704:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 117b0 <ll_rl_remove+0xf8>
   11708:	f89e c000 	ldrb.w	ip, [lr]
   1170c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   11710:	f01c 0bff 	ands.w	fp, ip, #255	; 0xff
   11714:	d021      	beq.n	1175a <ll_rl_remove+0xa2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11716:	7dd3      	ldrb	r3, [r2, #23]
   11718:	9301      	str	r3, [sp, #4]
			if (pj && pi != pj) {
   1171a:	455b      	cmp	r3, fp
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1171c:	461d      	mov	r5, r3
			if (pj && pi != pj) {
   1171e:	d01c      	beq.n	1175a <ll_rl_remove+0xa2>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   11720:	f8df a090 	ldr.w	sl, [pc, #144]	; 117b4 <ll_rl_remove+0xfc>
   11724:	eb0a 130b 	add.w	r3, sl, fp, lsl #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1172a:	eb0a 1a05 	add.w	sl, sl, r5, lsl #4
   1172e:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   11732:	9d00      	ldr	r5, [sp, #0]
					if (rl[k].taken && rl[k].pirk &&
   11734:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   11738:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1173c:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   11740:	07d8      	lsls	r0, r3, #31
   11742:	b2e1      	uxtb	r1, r4
   11744:	f104 0401 	add.w	r4, r4, #1
   11748:	d504      	bpl.n	11754 <ll_rl_remove+0x9c>
   1174a:	075b      	lsls	r3, r3, #29
   1174c:	d502      	bpl.n	11754 <ll_rl_remove+0x9c>
   1174e:	7dd3      	ldrb	r3, [r2, #23]
   11750:	455b      	cmp	r3, fp
   11752:	d020      	beq.n	11796 <ll_rl_remove+0xde>
				for (k = 0U;
   11754:	2c08      	cmp	r4, #8
   11756:	d1ed      	bne.n	11734 <ll_rl_remove+0x7c>
   11758:	9500      	str	r5, [sp, #0]
			peer_irk_count--;
   1175a:	f88e c000 	strb.w	ip, [lr]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1175e:	9b00      	ldr	r3, [sp, #0]
   11760:	4639      	mov	r1, r7
   11762:	7818      	ldrb	r0, [r3, #0]
   11764:	2200      	movs	r2, #0
   11766:	f7ff faaf 	bl	10cc8 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1176a:	2807      	cmp	r0, #7
   1176c:	d804      	bhi.n	11778 <ll_rl_remove+0xc0>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1176e:	4b0d      	ldr	r3, [pc, #52]	; (117a4 <ll_rl_remove+0xec>)
   11770:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   11774:	23ff      	movs	r3, #255	; 0xff
   11776:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   11778:	444e      	add	r6, r9
		return 0;
   1177a:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1177c:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   11780:	f36f 0300 	bfc	r3, #0, #1
   11784:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
   11788:	b003      	add	sp, #12
   1178a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1178e:	200c      	movs	r0, #12
}
   11790:	b003      	add	sp, #12
   11792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						rl[k].pirk_idx = pi;
   11796:	9801      	ldr	r0, [sp, #4]
						peer_irk_rl_ids[pi] = k;
   11798:	4b03      	ldr	r3, [pc, #12]	; (117a8 <ll_rl_remove+0xf0>)
   1179a:	9500      	str	r5, [sp, #0]
   1179c:	5419      	strb	r1, [r3, r0]
						rl[k].pirk_idx = pi;
   1179e:	75d0      	strb	r0, [r2, #23]
						break;
   117a0:	e7db      	b.n	1175a <ll_rl_remove+0xa2>
   117a2:	bf00      	nop
   117a4:	20002724 	.word	0x20002724
   117a8:	20002524 	.word	0x20002524
   117ac:	200025ac 	.word	0x200025ac
   117b0:	20002f7e 	.word	0x20002f7e
   117b4:	2000252c 	.word	0x2000252c

000117b8 <ll_rl_crpa_set>:
{
   117b8:	b538      	push	{r3, r4, r5, lr}
   117ba:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   117bc:	795b      	ldrb	r3, [r3, #5]
   117be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   117c2:	2b40      	cmp	r3, #64	; 0x40
   117c4:	d000      	beq.n	117c8 <ll_rl_crpa_set+0x10>
}
   117c6:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   117c8:	b119      	cbz	r1, 117d2 <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   117ca:	2200      	movs	r2, #0
   117cc:	f7ff fe0e 	bl	113ec <ull_filter_rl_find>
   117d0:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   117d2:	2a07      	cmp	r2, #7
   117d4:	d8f7      	bhi.n	117c6 <ll_rl_crpa_set+0xe>
   117d6:	4b08      	ldr	r3, [pc, #32]	; (117f8 <ll_rl_crpa_set+0x40>)
   117d8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   117dc:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   117e0:	07c9      	lsls	r1, r1, #31
   117e2:	d5f0      	bpl.n	117c6 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   117e4:	2028      	movs	r0, #40	; 0x28
   117e6:	2118      	movs	r1, #24
   117e8:	fb10 1202 	smlabb	r2, r0, r2, r1
   117ec:	6820      	ldr	r0, [r4, #0]
   117ee:	5098      	str	r0, [r3, r2]
   117f0:	4413      	add	r3, r2
   117f2:	88a2      	ldrh	r2, [r4, #4]
   117f4:	809a      	strh	r2, [r3, #4]
}
   117f6:	bd38      	pop	{r3, r4, r5, pc}
   117f8:	200025ac 	.word	0x200025ac

000117fc <ll_rl_crpa_get>:
{
   117fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   117fe:	4603      	mov	r3, r0
{
   11800:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   11802:	f813 0b01 	ldrb.w	r0, [r3], #1
   11806:	2200      	movs	r2, #0
   11808:	4619      	mov	r1, r3
   1180a:	f7ff fdef 	bl	113ec <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1180e:	2807      	cmp	r0, #7
   11810:	d901      	bls.n	11816 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11812:	2002      	movs	r0, #2
}
   11814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   11816:	4f09      	ldr	r7, [pc, #36]	; (1183c <ll_rl_crpa_get+0x40>)
   11818:	2428      	movs	r4, #40	; 0x28
   1181a:	2318      	movs	r3, #24
   1181c:	fb14 3400 	smlabb	r4, r4, r0, r3
   11820:	193e      	adds	r6, r7, r4
   11822:	4630      	mov	r0, r6
   11824:	2106      	movs	r1, #6
   11826:	f7f7 fbbd 	bl	8fa4 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1182a:	2800      	cmp	r0, #0
   1182c:	d0f1      	beq.n	11812 <ll_rl_crpa_get+0x16>
   1182e:	5938      	ldr	r0, [r7, r4]
   11830:	6028      	str	r0, [r5, #0]
   11832:	88b3      	ldrh	r3, [r6, #4]
   11834:	80ab      	strh	r3, [r5, #4]
		return 0;
   11836:	2000      	movs	r0, #0
}
   11838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1183a:	bf00      	nop
   1183c:	200025ac 	.word	0x200025ac

00011840 <ll_rl_lrpa_get>:
{
   11840:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   11842:	4603      	mov	r3, r0
{
   11844:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   11846:	f813 0b01 	ldrb.w	r0, [r3], #1
   1184a:	2200      	movs	r2, #0
   1184c:	4619      	mov	r1, r3
   1184e:	f7ff fdcd 	bl	113ec <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11852:	2807      	cmp	r0, #7
   11854:	d901      	bls.n	1185a <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11856:	2002      	movs	r0, #2
}
   11858:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1185a:	4b06      	ldr	r3, [pc, #24]	; (11874 <ll_rl_lrpa_get+0x34>)
   1185c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11860:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
		return 0;
   11864:	2000      	movs	r0, #0
   11866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11868:	681a      	ldr	r2, [r3, #0]
   1186a:	6022      	str	r2, [r4, #0]
   1186c:	889b      	ldrh	r3, [r3, #4]
   1186e:	80a3      	strh	r3, [r4, #4]
}
   11870:	bd10      	pop	{r4, pc}
   11872:	bf00      	nop
   11874:	200025ac 	.word	0x200025ac

00011878 <ll_priv_mode_set>:
{
   11878:	b570      	push	{r4, r5, r6, lr}
   1187a:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1187c:	2000      	movs	r0, #0
{
   1187e:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   11880:	f7fb fefa 	bl	d678 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   11884:	b968      	cbnz	r0, 118a2 <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   11886:	4629      	mov	r1, r5
   11888:	4602      	mov	r2, r0
   1188a:	4604      	mov	r4, r0
   1188c:	f811 0b01 	ldrb.w	r0, [r1], #1
   11890:	f7ff fdac 	bl	113ec <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11894:	2807      	cmp	r0, #7
   11896:	d81c      	bhi.n	118d2 <ll_priv_mode_set+0x5a>
		switch (mode) {
   11898:	b186      	cbz	r6, 118bc <ll_priv_mode_set+0x44>
   1189a:	2e01      	cmp	r6, #1
   1189c:	d003      	beq.n	118a6 <ll_priv_mode_set+0x2e>
   1189e:	2012      	movs	r0, #18
}
   118a0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   118a2:	200c      	movs	r0, #12
}
   118a4:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   118a6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   118aa:	490b      	ldr	r1, [pc, #44]	; (118d8 <ll_priv_mode_set+0x60>)
   118ac:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   118b0:	f042 0210 	orr.w	r2, r2, #16
   118b4:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   118b8:	4620      	mov	r0, r4
}
   118ba:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   118bc:	4b06      	ldr	r3, [pc, #24]	; (118d8 <ll_priv_mode_set+0x60>)
   118be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   118c2:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   118c6:	f366 1204 	bfi	r2, r6, #4, #1
   118ca:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   118ce:	4630      	mov	r0, r6
}
   118d0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   118d2:	2002      	movs	r0, #2
}
   118d4:	bd70      	pop	{r4, r5, r6, pc}
   118d6:	bf00      	nop
   118d8:	200025ac 	.word	0x200025ac

000118dc <ull_filter_reset>:
	wl_anon = 0U;
   118dc:	4a31      	ldr	r2, [pc, #196]	; (119a4 <ull_filter_reset+0xc8>)
   118de:	4932      	ldr	r1, [pc, #200]	; (119a8 <ull_filter_reset+0xcc>)
{
   118e0:	b4f0      	push	{r4, r5, r6, r7}
	wl_anon = 0U;
   118e2:	2300      	movs	r3, #0
   118e4:	4c31      	ldr	r4, [pc, #196]	; (119ac <ull_filter_reset+0xd0>)
   118e6:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   118e8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   118ec:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   118ee:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   118f0:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   118f4:	d805      	bhi.n	11902 <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   118f6:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   118fa:	f36f 1245 	bfc	r2, #5, #1
   118fe:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   11902:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   11906:	f36f 0200 	bfc	r2, #0, #1
   1190a:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1190e:	3301      	adds	r3, #1
   11910:	2b08      	cmp	r3, #8
   11912:	d1e9      	bne.n	118e8 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   11914:	780f      	ldrb	r7, [r1, #0]
   11916:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   1191a:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   1191e:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   11922:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   11926:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   11928:	f363 0700 	bfi	r7, r3, #0, #1
   1192c:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   1192e:	4f20      	ldr	r7, [pc, #128]	; (119b0 <ull_filter_reset+0xd4>)
		rl[i].taken = 0U;
   11930:	f363 0500 	bfi	r5, r3, #0, #1
   11934:	f363 0400 	bfi	r4, r3, #0, #1
   11938:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   1193c:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   1193e:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   11942:	4f1c      	ldr	r7, [pc, #112]	; (119b4 <ull_filter_reset+0xd8>)
		rl[i].taken = 0U;
   11944:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   11948:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   1194c:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   11950:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   11954:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   11958:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   1195a:	f363 0600 	bfi	r6, r3, #0, #1
   1195e:	f363 0500 	bfi	r5, r3, #0, #1
   11962:	f363 0400 	bfi	r4, r3, #0, #1
   11966:	f363 0200 	bfi	r2, r3, #0, #1
   1196a:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   1196e:	4b12      	ldr	r3, [pc, #72]	; (119b8 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11970:	4e12      	ldr	r6, [pc, #72]	; (119bc <ull_filter_reset+0xe0>)
   11972:	4f13      	ldr	r7, [pc, #76]	; (119c0 <ull_filter_reset+0xe4>)
		rl[i].taken = 0U;
   11974:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   11978:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   1197c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11980:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11984:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   11988:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1198c:	6037      	str	r7, [r6, #0]
	if (init) {
   1198e:	b120      	cbz	r0, 1199a <ull_filter_reset+0xbe>
}
   11990:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11992:	490c      	ldr	r1, [pc, #48]	; (119c4 <ull_filter_reset+0xe8>)
   11994:	480c      	ldr	r0, [pc, #48]	; (119c8 <ull_filter_reset+0xec>)
   11996:	f014 be1c 	b.w	265d2 <k_delayed_work_init>
}
   1199a:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_cancel(&rpa_work);
   1199c:	480a      	ldr	r0, [pc, #40]	; (119c8 <ull_filter_reset+0xec>)
   1199e:	f014 be20 	b.w	265e2 <k_delayed_work_cancel>
   119a2:	bf00      	nop
   119a4:	20002f80 	.word	0x20002f80
   119a8:	200025ac 	.word	0x200025ac
   119ac:	20002724 	.word	0x20002724
   119b0:	20002f7f 	.word	0x20002f7f
   119b4:	20002f7e 	.word	0x20002f7e
   119b8:	20001340 	.word	0x20001340
   119bc:	20002720 	.word	0x20002720
   119c0:	000dbba0 	.word	0x000dbba0
   119c4:	000113ad 	.word	0x000113ad
   119c8:	20001348 	.word	0x20001348

000119cc <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   119cc:	2807      	cmp	r0, #7
   119ce:	d807      	bhi.n	119e0 <ull_filter_lll_lrpa_used+0x14>
   119d0:	4b04      	ldr	r3, [pc, #16]	; (119e4 <ull_filter_lll_lrpa_used+0x18>)
   119d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   119d6:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   119da:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   119de:	4770      	bx	lr
   119e0:	2000      	movs	r0, #0
}
   119e2:	4770      	bx	lr
   119e4:	200025ac 	.word	0x200025ac

000119e8 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   119e8:	4b02      	ldr	r3, [pc, #8]	; (119f4 <ull_filter_lll_irks_get+0xc>)
   119ea:	781b      	ldrb	r3, [r3, #0]
   119ec:	7003      	strb	r3, [r0, #0]
}
   119ee:	4802      	ldr	r0, [pc, #8]	; (119f8 <ull_filter_lll_irks_get+0x10>)
   119f0:	4770      	bx	lr
   119f2:	bf00      	nop
   119f4:	20002f7e 	.word	0x20002f7e
   119f8:	2000252c 	.word	0x2000252c

000119fc <ull_filter_lll_rl_irk_idx>:
{
   119fc:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   119fe:	4b20      	ldr	r3, [pc, #128]	; (11a80 <ull_filter_lll_rl_irk_idx+0x84>)
   11a00:	781b      	ldrb	r3, [r3, #0]
   11a02:	4283      	cmp	r3, r0
{
   11a04:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11a06:	d90c      	bls.n	11a22 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   11a08:	4b1e      	ldr	r3, [pc, #120]	; (11a84 <ull_filter_lll_rl_irk_idx+0x88>)
   11a0a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11a0c:	2c07      	cmp	r4, #7
   11a0e:	d819      	bhi.n	11a44 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   11a10:	4b1d      	ldr	r3, [pc, #116]	; (11a88 <ull_filter_lll_rl_irk_idx+0x8c>)
   11a12:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   11a16:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   11a1a:	07db      	lsls	r3, r3, #31
   11a1c:	d520      	bpl.n	11a60 <ull_filter_lll_rl_irk_idx+0x64>
}
   11a1e:	4620      	mov	r0, r4
   11a20:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11a22:	4a1a      	ldr	r2, [pc, #104]	; (11a8c <ull_filter_lll_rl_irk_idx+0x90>)
   11a24:	491a      	ldr	r1, [pc, #104]	; (11a90 <ull_filter_lll_rl_irk_idx+0x94>)
   11a26:	481b      	ldr	r0, [pc, #108]	; (11a94 <ull_filter_lll_rl_irk_idx+0x98>)
   11a28:	f240 23c6 	movw	r3, #710	; 0x2c6
   11a2c:	f00c f95f 	bl	1dcee <printk>
   11a30:	4040      	eors	r0, r0
   11a32:	f380 8811 	msr	BASEPRI, r0
   11a36:	f04f 0003 	mov.w	r0, #3
   11a3a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11a3c:	4b11      	ldr	r3, [pc, #68]	; (11a84 <ull_filter_lll_rl_irk_idx+0x88>)
   11a3e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11a40:	2c07      	cmp	r4, #7
   11a42:	d9e5      	bls.n	11a10 <ull_filter_lll_rl_irk_idx+0x14>
   11a44:	4a11      	ldr	r2, [pc, #68]	; (11a8c <ull_filter_lll_rl_irk_idx+0x90>)
   11a46:	4914      	ldr	r1, [pc, #80]	; (11a98 <ull_filter_lll_rl_irk_idx+0x9c>)
   11a48:	4812      	ldr	r0, [pc, #72]	; (11a94 <ull_filter_lll_rl_irk_idx+0x98>)
   11a4a:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   11a4e:	f00c f94e 	bl	1dcee <printk>
   11a52:	4040      	eors	r0, r0
   11a54:	f380 8811 	msr	BASEPRI, r0
   11a58:	f04f 0003 	mov.w	r0, #3
   11a5c:	df02      	svc	2
   11a5e:	e7d7      	b.n	11a10 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   11a60:	4a0a      	ldr	r2, [pc, #40]	; (11a8c <ull_filter_lll_rl_irk_idx+0x90>)
   11a62:	490e      	ldr	r1, [pc, #56]	; (11a9c <ull_filter_lll_rl_irk_idx+0xa0>)
   11a64:	480b      	ldr	r0, [pc, #44]	; (11a94 <ull_filter_lll_rl_irk_idx+0x98>)
   11a66:	f240 23c9 	movw	r3, #713	; 0x2c9
   11a6a:	f00c f940 	bl	1dcee <printk>
   11a6e:	4040      	eors	r0, r0
   11a70:	f380 8811 	msr	BASEPRI, r0
   11a74:	f04f 0003 	mov.w	r0, #3
   11a78:	df02      	svc	2
}
   11a7a:	4620      	mov	r0, r4
   11a7c:	bd10      	pop	{r4, pc}
   11a7e:	bf00      	nop
   11a80:	20002f7e 	.word	0x20002f7e
   11a84:	20002524 	.word	0x20002524
   11a88:	200025ac 	.word	0x200025ac
   11a8c:	00027bb8 	.word	0x00027bb8
   11a90:	00027d9c 	.word	0x00027d9c
   11a94:	000275f0 	.word	0x000275f0
   11a98:	00027dbc 	.word	0x00027dbc
   11a9c:	00027d90 	.word	0x00027d90

00011aa0 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11aa0:	2807      	cmp	r0, #7
   11aa2:	d823      	bhi.n	11aec <ull_filter_lll_irk_whitelisted+0x4c>
{
   11aa4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   11aa6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   11aaa:	4e11      	ldr	r6, [pc, #68]	; (11af0 <ull_filter_lll_irk_whitelisted+0x50>)
   11aac:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   11ab0:	07db      	lsls	r3, r3, #31
   11ab2:	4604      	mov	r4, r0
   11ab4:	ea4f 0580 	mov.w	r5, r0, lsl #2
   11ab8:	d505      	bpl.n	11ac6 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   11aba:	442c      	add	r4, r5
   11abc:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   11ac0:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   11ac4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   11ac6:	4a0b      	ldr	r2, [pc, #44]	; (11af4 <ull_filter_lll_irk_whitelisted+0x54>)
   11ac8:	490b      	ldr	r1, [pc, #44]	; (11af8 <ull_filter_lll_irk_whitelisted+0x58>)
   11aca:	480c      	ldr	r0, [pc, #48]	; (11afc <ull_filter_lll_irk_whitelisted+0x5c>)
   11acc:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   11ad0:	f00c f90d 	bl	1dcee <printk>
   11ad4:	4040      	eors	r0, r0
   11ad6:	f380 8811 	msr	BASEPRI, r0
   11ada:	f04f 0003 	mov.w	r0, #3
   11ade:	df02      	svc	2
	return rl[rl_idx].wl;
   11ae0:	442c      	add	r4, r5
   11ae2:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   11ae6:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   11aea:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   11aec:	2000      	movs	r0, #0
}
   11aee:	4770      	bx	lr
   11af0:	200025ac 	.word	0x200025ac
   11af4:	00027bb8 	.word	0x00027bb8
   11af8:	00027c08 	.word	0x00027c08
   11afc:	000275f0 	.word	0x000275f0

00011b00 <ull_filter_lll_get>:
		return &wl_filter;
   11b00:	4a03      	ldr	r2, [pc, #12]	; (11b10 <ull_filter_lll_get+0x10>)
   11b02:	4b04      	ldr	r3, [pc, #16]	; (11b14 <ull_filter_lll_get+0x14>)
}
   11b04:	2800      	cmp	r0, #0
   11b06:	bf0c      	ite	eq
   11b08:	4610      	moveq	r0, r2
   11b0a:	4618      	movne	r0, r3
   11b0c:	4770      	bx	lr
   11b0e:	bf00      	nop
   11b10:	200026ec 	.word	0x200026ec
   11b14:	20002764 	.word	0x20002764

00011b18 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   11b18:	4b1c      	ldr	r3, [pc, #112]	; (11b8c <ull_filter_lll_rl_addr_allowed+0x74>)
   11b1a:	781b      	ldrb	r3, [r3, #0]
   11b1c:	b1fb      	cbz	r3, 11b5e <ull_filter_lll_rl_addr_allowed+0x46>
   11b1e:	7813      	ldrb	r3, [r2, #0]
   11b20:	2bff      	cmp	r3, #255	; 0xff
   11b22:	d11c      	bne.n	11b5e <ull_filter_lll_rl_addr_allowed+0x46>
{
   11b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11b28:	4d19      	ldr	r5, [pc, #100]	; (11b90 <ull_filter_lll_rl_addr_allowed+0x78>)
   11b2a:	4606      	mov	r6, r0
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   11b2c:	2300      	movs	r3, #0
   11b2e:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   11b30:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   11b34:	fa5f fe83 	uxtb.w	lr, r3
   11b38:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   11b3c:	f014 0001 	ands.w	r0, r4, #1
   11b40:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   11b44:	d003      	beq.n	11b4e <ull_filter_lll_rl_addr_allowed+0x36>
   11b46:	f3c4 1480 	ubfx	r4, r4, #6, #1
   11b4a:	42b4      	cmp	r4, r6
   11b4c:	d009      	beq.n	11b62 <ull_filter_lll_rl_addr_allowed+0x4a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11b4e:	3301      	adds	r3, #1
   11b50:	2b08      	cmp	r3, #8
   11b52:	f105 0528 	add.w	r5, r5, #40	; 0x28
   11b56:	d1eb      	bne.n	11b30 <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   11b58:	2001      	movs	r0, #1
}
   11b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   11b5e:	2001      	movs	r0, #1
}
   11b60:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   11b62:	1fac      	subs	r4, r5, #6
   11b64:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   11b68:	f814 af01 	ldrb.w	sl, [r4, #1]!
   11b6c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   11b70:	45ca      	cmp	sl, r9
   11b72:	d1ec      	bne.n	11b4e <ull_filter_lll_rl_addr_allowed+0x36>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   11b74:	42ac      	cmp	r4, r5
   11b76:	d1f7      	bne.n	11b68 <ull_filter_lll_rl_addr_allowed+0x50>
				return !rl[i].pirk || rl[i].dev;
   11b78:	4463      	add	r3, ip
				*rl_idx = i;
   11b7a:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   11b7e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   11b82:	075a      	lsls	r2, r3, #29
   11b84:	d5e9      	bpl.n	11b5a <ull_filter_lll_rl_addr_allowed+0x42>
   11b86:	f3c3 1000 	ubfx	r0, r3, #4, #1
   11b8a:	e7e6      	b.n	11b5a <ull_filter_lll_rl_addr_allowed+0x42>
   11b8c:	20002f7f 	.word	0x20002f7f
   11b90:	200025b2 	.word	0x200025b2

00011b94 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   11b94:	4b02      	ldr	r3, [pc, #8]	; (11ba0 <ull_filter_lll_rl_enabled+0xc>)
   11b96:	7818      	ldrb	r0, [r3, #0]
}
   11b98:	3800      	subs	r0, #0
   11b9a:	bf18      	it	ne
   11b9c:	2001      	movne	r0, #1
   11b9e:	4770      	bx	lr
   11ba0:	20002f7f 	.word	0x20002f7f

00011ba4 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11ba4:	4668      	mov	r0, sp
   11ba6:	f020 0107 	bic.w	r1, r0, #7
   11baa:	468d      	mov	sp, r1
   11bac:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
   11bae:	f001 ff81 	bl	13ab4 <isr_radio>

	ISR_DIRECT_PM();
   11bb2:	f7f2 fd73 	bl	469c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   11bb6:	f7f2 ff09 	bl	49cc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11bba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11bbe:	4685      	mov	sp, r0
   11bc0:	4770      	bx	lr
   11bc2:	bf00      	nop

00011bc4 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   11bc4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   11bc6:	4b09      	ldr	r3, [pc, #36]	; (11bec <rtc0_nrf5_isr+0x28>)
   11bc8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   11bcc:	b93a      	cbnz	r2, 11bde <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   11bce:	2001      	movs	r0, #1
   11bd0:	f7f7 faca 	bl	9168 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   11bd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   11bd8:	2002      	movs	r0, #2
   11bda:	f7f7 bac5 	b.w	9168 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   11bde:	2000      	movs	r0, #0
   11be0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   11be4:	f7f8 fc52 	bl	a48c <ticker_trigger>
   11be8:	e7f1      	b.n	11bce <rtc0_nrf5_isr+0xa>
   11bea:	bf00      	nop
   11bec:	4000b000 	.word	0x4000b000

00011bf0 <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(const void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
   11bf0:	2000      	movs	r0, #0
   11bf2:	f7f7 bab9 	b.w	9168 <mayfly_run>
   11bf6:	bf00      	nop

00011bf8 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   11bf8:	f002 b85a 	b.w	13cb0 <radio_status_reset>

00011bfc <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11bfc:	2801      	cmp	r0, #1
   11bfe:	d800      	bhi.n	11c02 <ticker_stop_op_cb+0x6>
   11c00:	4770      	bx	lr
{
   11c02:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11c04:	4a06      	ldr	r2, [pc, #24]	; (11c20 <ticker_stop_op_cb+0x24>)
   11c06:	4907      	ldr	r1, [pc, #28]	; (11c24 <ticker_stop_op_cb+0x28>)
   11c08:	4807      	ldr	r0, [pc, #28]	; (11c28 <ticker_stop_op_cb+0x2c>)
   11c0a:	f240 238a 	movw	r3, #650	; 0x28a
   11c0e:	f00c f86e 	bl	1dcee <printk>
   11c12:	4040      	eors	r0, r0
   11c14:	f380 8811 	msr	BASEPRI, r0
   11c18:	f04f 0003 	mov.w	r0, #3
   11c1c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   11c1e:	bd08      	pop	{r3, pc}
   11c20:	00027dc4 	.word	0x00027dc4
   11c24:	00027e0c 	.word	0x00027e0c
   11c28:	000275f0 	.word	0x000275f0

00011c2c <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11c2c:	2801      	cmp	r0, #1
   11c2e:	d800      	bhi.n	11c32 <ticker_start_op_cb+0x6>
   11c30:	4770      	bx	lr
{
   11c32:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11c34:	4a06      	ldr	r2, [pc, #24]	; (11c50 <ticker_start_op_cb+0x24>)
   11c36:	4907      	ldr	r1, [pc, #28]	; (11c54 <ticker_start_op_cb+0x28>)
   11c38:	4807      	ldr	r0, [pc, #28]	; (11c58 <ticker_start_op_cb+0x2c>)
   11c3a:	f240 2395 	movw	r3, #661	; 0x295
   11c3e:	f00c f856 	bl	1dcee <printk>
   11c42:	4040      	eors	r0, r0
   11c44:	f380 8811 	msr	BASEPRI, r0
   11c48:	f04f 0003 	mov.w	r0, #3
   11c4c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   11c4e:	bd08      	pop	{r3, pc}
   11c50:	00027dc4 	.word	0x00027dc4
   11c54:	00027e0c 	.word	0x00027e0c
   11c58:	000275f0 	.word	0x000275f0

00011c5c <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   11c5c:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11c5e:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   11c60:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   11c62:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11c64:	4c15      	ldr	r4, [pc, #84]	; (11cbc <preempt_ticker_start.isra.0+0x60>)
   11c66:	4916      	ldr	r1, [pc, #88]	; (11cc0 <preempt_ticker_start.isra.0+0x64>)
   11c68:	9208      	str	r2, [sp, #32]
   11c6a:	e9cd 2203 	strd	r2, r2, [sp, #12]
   11c6e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   11c72:	9206      	str	r2, [sp, #24]
   11c74:	9407      	str	r4, [sp, #28]
   11c76:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   11c78:	e9d3 5400 	ldrd	r5, r4, [r3]
   11c7c:	6899      	ldr	r1, [r3, #8]
   11c7e:	42a5      	cmp	r5, r4
   11c80:	bf2c      	ite	cs
   11c82:	ebc1 0105 	rsbcs	r1, r1, r5
   11c86:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   11c8a:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11c8c:	9100      	str	r1, [sp, #0]
   11c8e:	4610      	mov	r0, r2
   11c90:	4611      	mov	r1, r2
   11c92:	f7f8 fc69 	bl	a568 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11c96:	2802      	cmp	r0, #2
   11c98:	d801      	bhi.n	11c9e <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   11c9a:	b00b      	add	sp, #44	; 0x2c
   11c9c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11c9e:	4a09      	ldr	r2, [pc, #36]	; (11cc4 <preempt_ticker_start.isra.0+0x68>)
   11ca0:	4909      	ldr	r1, [pc, #36]	; (11cc8 <preempt_ticker_start.isra.0+0x6c>)
   11ca2:	480a      	ldr	r0, [pc, #40]	; (11ccc <preempt_ticker_start.isra.0+0x70>)
   11ca4:	f240 23b3 	movw	r3, #691	; 0x2b3
   11ca8:	f00c f821 	bl	1dcee <printk>
   11cac:	4040      	eors	r0, r0
   11cae:	f380 8811 	msr	BASEPRI, r0
   11cb2:	f04f 0003 	mov.w	r0, #3
   11cb6:	df02      	svc	2
}
   11cb8:	b00b      	add	sp, #44	; 0x2c
   11cba:	bd30      	pop	{r4, r5, pc}
   11cbc:	00011c2d 	.word	0x00011c2d
   11cc0:	00011f21 	.word	0x00011f21
   11cc4:	00027dc4 	.word	0x00027dc4
   11cc8:	00027e2c 	.word	0x00027e2c
   11ccc:	000275f0 	.word	0x000275f0

00011cd0 <prepare>:
{
   11cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11cd4:	b085      	sub	sp, #20
   11cd6:	4604      	mov	r4, r0
	idx = UINT8_MAX;
   11cd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   11cdc:	f10d 000f 	add.w	r0, sp, #15
{
   11ce0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   11ce4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   11ce8:	f88d c00f 	strb.w	ip, [sp, #15]
{
   11cec:	460d      	mov	r5, r1
   11cee:	4616      	mov	r6, r2
   11cf0:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   11cf2:	f7fb f907 	bl	cf04 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   11cf6:	b918      	cbnz	r0, 11d00 <prepare+0x30>
   11cf8:	e01e      	b.n	11d38 <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   11cfa:	f7fb f903 	bl	cf04 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   11cfe:	b1d8      	cbz	r0, 11d38 <prepare+0x68>
   11d00:	f890 3020 	ldrb.w	r3, [r0, #32]
   11d04:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   11d06:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   11d0a:	d1f6      	bne.n	11cfa <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
   11d0c:	4b2d      	ldr	r3, [pc, #180]	; (11dc4 <prepare+0xf4>)
   11d0e:	689a      	ldr	r2, [r3, #8]
   11d10:	b9aa      	cbnz	r2, 11d3e <prepare+0x6e>
   11d12:	f1b9 0f00 	cmp.w	r9, #0
   11d16:	d036      	beq.n	11d86 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   11d18:	2201      	movs	r2, #1
   11d1a:	9201      	str	r2, [sp, #4]
   11d1c:	9700      	str	r7, [sp, #0]
   11d1e:	4633      	mov	r3, r6
   11d20:	4629      	mov	r1, r5
   11d22:	4620      	mov	r0, r4
   11d24:	4642      	mov	r2, r8
   11d26:	f7fb f89d 	bl	ce64 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   11d2a:	b9d8      	cbnz	r0, 11d64 <prepare+0x94>
		return -EINPROGRESS;
   11d2c:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   11d30:	4620      	mov	r0, r4
   11d32:	b005      	add	sp, #20
   11d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   11d38:	4b22      	ldr	r3, [pc, #136]	; (11dc4 <prepare+0xf4>)
   11d3a:	689a      	ldr	r2, [r3, #8]
   11d3c:	b31a      	cbz	r2, 11d86 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   11d3e:	e9cd 7900 	strd	r7, r9, [sp]
   11d42:	4633      	mov	r3, r6
   11d44:	4629      	mov	r1, r5
   11d46:	4620      	mov	r0, r4
   11d48:	4642      	mov	r2, r8
   11d4a:	f7fb f88b 	bl	ce64 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   11d4e:	b948      	cbnz	r0, 11d64 <prepare+0x94>
		if (is_resume) {
   11d50:	f1b9 0f00 	cmp.w	r9, #0
   11d54:	d1ea      	bne.n	11d2c <prepare+0x5c>
		preempt_ticker_start(prepare_param);
   11d56:	f8d8 100c 	ldr.w	r1, [r8, #12]
   11d5a:	f8d8 0000 	ldr.w	r0, [r8]
   11d5e:	f7ff ff7d 	bl	11c5c <preempt_ticker_start.isra.0>
   11d62:	e7e3      	b.n	11d2c <prepare+0x5c>
		LL_ASSERT(!err);
   11d64:	4a18      	ldr	r2, [pc, #96]	; (11dc8 <prepare+0xf8>)
   11d66:	4919      	ldr	r1, [pc, #100]	; (11dcc <prepare+0xfc>)
   11d68:	4819      	ldr	r0, [pc, #100]	; (11dd0 <prepare+0x100>)
   11d6a:	f240 232f 	movw	r3, #559	; 0x22f
   11d6e:	f00b ffbe 	bl	1dcee <printk>
   11d72:	4040      	eors	r0, r0
   11d74:	f380 8811 	msr	BASEPRI, r0
   11d78:	f04f 0003 	mov.w	r0, #3
   11d7c:	df02      	svc	2
		if (is_resume) {
   11d7e:	f1b9 0f00 	cmp.w	r9, #0
   11d82:	d1d3      	bne.n	11d2c <prepare+0x5c>
   11d84:	e7e7      	b.n	11d56 <prepare+0x86>
	event.curr.param = prepare_param->param;
   11d86:	f8d8 200c 	ldr.w	r2, [r8, #12]
   11d8a:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   11d8c:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   11d90:	4640      	mov	r0, r8
   11d92:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   11d94:	2200      	movs	r2, #0
   11d96:	4b0f      	ldr	r3, [pc, #60]	; (11dd4 <prepare+0x104>)
   11d98:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   11d9a:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   11d9c:	4611      	mov	r1, r2
   11d9e:	4610      	mov	r0, r2
   11da0:	f7f8 fc4e 	bl	a640 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11da4:	2802      	cmp	r0, #2
   11da6:	d9c3      	bls.n	11d30 <prepare+0x60>
   11da8:	4a07      	ldr	r2, [pc, #28]	; (11dc8 <prepare+0xf8>)
   11daa:	490b      	ldr	r1, [pc, #44]	; (11dd8 <prepare+0x108>)
   11dac:	4808      	ldr	r0, [pc, #32]	; (11dd0 <prepare+0x100>)
   11dae:	f240 2369 	movw	r3, #617	; 0x269
   11db2:	f00b ff9c 	bl	1dcee <printk>
   11db6:	4040      	eors	r0, r0
   11db8:	f380 8811 	msr	BASEPRI, r0
   11dbc:	f04f 0003 	mov.w	r0, #3
   11dc0:	df02      	svc	2
   11dc2:	e7b5      	b.n	11d30 <prepare+0x60>
   11dc4:	2000279c 	.word	0x2000279c
   11dc8:	00027dc4 	.word	0x00027dc4
   11dcc:	00027714 	.word	0x00027714
   11dd0:	000275f0 	.word	0x000275f0
   11dd4:	00011bfd 	.word	0x00011bfd
   11dd8:	00027e2c 	.word	0x00027e2c

00011ddc <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   11ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   11dde:	4e4b      	ldr	r6, [pc, #300]	; (11f0c <preempt+0x130>)
   11de0:	68b3      	ldr	r3, [r6, #8]
{
   11de2:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   11de4:	b1b3      	cbz	r3, 11e14 <preempt+0x38>
   11de6:	6833      	ldr	r3, [r6, #0]
   11de8:	b1a3      	cbz	r3, 11e14 <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   11dea:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   11dec:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   11df0:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   11df4:	f7fb f886 	bl	cf04 <ull_prepare_dequeue_iter>
	if (!next) {
   11df8:	4604      	mov	r4, r0
   11dfa:	b158      	cbz	r0, 11e14 <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   11dfc:	f894 3020 	ldrb.w	r3, [r4, #32]
   11e00:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   11e04:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   11e08:	d006      	beq.n	11e18 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   11e0a:	f7fb f87b 	bl	cf04 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   11e0e:	4604      	mov	r4, r0
   11e10:	2800      	cmp	r0, #0
   11e12:	d1f3      	bne.n	11dfc <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   11e14:	b00b      	add	sp, #44	; 0x2c
   11e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   11e18:	ab05      	add	r3, sp, #20
   11e1a:	e9d6 2700 	ldrd	r2, r7, [r6]
   11e1e:	69e1      	ldr	r1, [r4, #28]
   11e20:	68e0      	ldr	r0, [r4, #12]
   11e22:	9300      	str	r3, [sp, #0]
   11e24:	ab04      	add	r3, sp, #16
   11e26:	47b8      	blx	r7
	if (!ret) {
   11e28:	4607      	mov	r7, r0
   11e2a:	2800      	cmp	r0, #0
   11e2c:	d062      	beq.n	11ef4 <preempt+0x118>
	event.curr.abort_cb(NULL, event.curr.param);
   11e2e:	68b3      	ldr	r3, [r6, #8]
   11e30:	6831      	ldr	r1, [r6, #0]
   11e32:	4628      	mov	r0, r5
   11e34:	4798      	blx	r3
	if (ret == -EAGAIN) {
   11e36:	f117 0f0b 	cmn.w	r7, #11
   11e3a:	d01a      	beq.n	11e72 <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   11e3c:	378c      	adds	r7, #140	; 0x8c
   11e3e:	d011      	beq.n	11e64 <preempt+0x88>
   11e40:	4a33      	ldr	r2, [pc, #204]	; (11f10 <preempt+0x134>)
   11e42:	4934      	ldr	r1, [pc, #208]	; (11f14 <preempt+0x138>)
   11e44:	4834      	ldr	r0, [pc, #208]	; (11f18 <preempt+0x13c>)
   11e46:	f240 23ff 	movw	r3, #767	; 0x2ff
   11e4a:	f00b ff50 	bl	1dcee <printk>
   11e4e:	4040      	eors	r0, r0
   11e50:	f380 8811 	msr	BASEPRI, r0
   11e54:	f04f 0003 	mov.w	r0, #3
   11e58:	df02      	svc	2
   11e5a:	e003      	b.n	11e64 <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   11e5c:	f890 3020 	ldrb.w	r3, [r0, #32]
   11e60:	079b      	lsls	r3, r3, #30
   11e62:	d041      	beq.n	11ee8 <preempt+0x10c>
		next = ull_prepare_dequeue_iter(&idx);
   11e64:	f10d 000e 	add.w	r0, sp, #14
   11e68:	f7fb f84c 	bl	cf04 <ull_prepare_dequeue_iter>
		if (!next) {
   11e6c:	2800      	cmp	r0, #0
   11e6e:	d1f5      	bne.n	11e5c <preempt+0x80>
   11e70:	e7d0      	b.n	11e14 <preempt+0x38>
		iter_idx = UINT8_MAX;
   11e72:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   11e74:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   11e78:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   11e7c:	f7fb f842 	bl	cf04 <ull_prepare_dequeue_iter>
		while (iter) {
   11e80:	bb48      	cbnz	r0, 11ed6 <preempt+0xfa>
	prepare_param.param = event.curr.param;
   11e82:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   11e84:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   11e86:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   11e88:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   11e8a:	2301      	movs	r3, #1
	event.curr.param = NULL;
   11e8c:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   11e8e:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
   11e90:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   11e92:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   11e96:	9b04      	ldr	r3, [sp, #16]
   11e98:	aa06      	add	r2, sp, #24
   11e9a:	f7fa ffe3 	bl	ce64 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   11e9e:	2800      	cmp	r0, #0
   11ea0:	d0e0      	beq.n	11e64 <preempt+0x88>
   11ea2:	4a1b      	ldr	r2, [pc, #108]	; (11f10 <preempt+0x134>)
   11ea4:	491d      	ldr	r1, [pc, #116]	; (11f1c <preempt+0x140>)
   11ea6:	481c      	ldr	r0, [pc, #112]	; (11f18 <preempt+0x13c>)
   11ea8:	f240 23fd 	movw	r3, #765	; 0x2fd
   11eac:	f00b ff1f 	bl	1dcee <printk>
   11eb0:	4040      	eors	r0, r0
   11eb2:	f380 8811 	msr	BASEPRI, r0
   11eb6:	f04f 0003 	mov.w	r0, #3
   11eba:	df02      	svc	2
   11ebc:	e7d2      	b.n	11e64 <preempt+0x88>
				iter->is_aborted = 1;
   11ebe:	f043 0302 	orr.w	r3, r3, #2
   11ec2:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   11ec6:	6983      	ldr	r3, [r0, #24]
   11ec8:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
   11eca:	f10d 000f 	add.w	r0, sp, #15
   11ece:	f7fb f819 	bl	cf04 <ull_prepare_dequeue_iter>
		while (iter) {
   11ed2:	2800      	cmp	r0, #0
   11ed4:	d0d5      	beq.n	11e82 <preempt+0xa6>
			if (!iter->is_aborted &&
   11ed6:	f890 3020 	ldrb.w	r3, [r0, #32]
   11eda:	079a      	lsls	r2, r3, #30
   11edc:	d4f5      	bmi.n	11eca <preempt+0xee>
			    event.curr.param == iter->prepare_param.param) {
   11ede:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   11ee0:	6831      	ldr	r1, [r6, #0]
   11ee2:	4291      	cmp	r1, r2
   11ee4:	d1f1      	bne.n	11eca <preempt+0xee>
   11ee6:	e7ea      	b.n	11ebe <preempt+0xe2>
	preempt_ticker_start(&next->prepare_param);
   11ee8:	68c1      	ldr	r1, [r0, #12]
   11eea:	6800      	ldr	r0, [r0, #0]
   11eec:	f7ff feb6 	bl	11c5c <preempt_ticker_start.isra.0>
}
   11ef0:	b00b      	add	sp, #44	; 0x2c
   11ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   11ef4:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   11ef8:	69a2      	ldr	r2, [r4, #24]
   11efa:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   11efc:	f043 0302 	orr.w	r3, r3, #2
   11f00:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   11f04:	4620      	mov	r0, r4
   11f06:	4790      	blx	r2
		goto preempt_next;
   11f08:	e7ac      	b.n	11e64 <preempt+0x88>
   11f0a:	bf00      	nop
   11f0c:	2000279c 	.word	0x2000279c
   11f10:	00027dc4 	.word	0x00027dc4
   11f14:	00027e54 	.word	0x00027e54
   11f18:	000275f0 	.word	0x000275f0
   11f1c:	00027720 	.word	0x00027720

00011f20 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   11f20:	2200      	movs	r2, #0
{
   11f22:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   11f24:	4611      	mov	r1, r2
   11f26:	4b0a      	ldr	r3, [pc, #40]	; (11f50 <preempt_ticker_cb+0x30>)
   11f28:	2001      	movs	r0, #1
   11f2a:	f7f7 f8c9 	bl	90c0 <mayfly_enqueue>
	LL_ASSERT(!ret);
   11f2e:	b900      	cbnz	r0, 11f32 <preempt_ticker_cb+0x12>
}
   11f30:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   11f32:	4a08      	ldr	r2, [pc, #32]	; (11f54 <preempt_ticker_cb+0x34>)
   11f34:	4908      	ldr	r1, [pc, #32]	; (11f58 <preempt_ticker_cb+0x38>)
   11f36:	4809      	ldr	r0, [pc, #36]	; (11f5c <preempt_ticker_cb+0x3c>)
   11f38:	f240 23c1 	movw	r3, #705	; 0x2c1
   11f3c:	f00b fed7 	bl	1dcee <printk>
   11f40:	4040      	eors	r0, r0
   11f42:	f380 8811 	msr	BASEPRI, r0
   11f46:	f04f 0003 	mov.w	r0, #3
   11f4a:	df02      	svc	2
}
   11f4c:	bd08      	pop	{r3, pc}
   11f4e:	bf00      	nop
   11f50:	20000674 	.word	0x20000674
   11f54:	00027dc4 	.word	0x00027dc4
   11f58:	00027720 	.word	0x00027720
   11f5c:	000275f0 	.word	0x000275f0

00011f60 <lll_init>:
{
   11f60:	b510      	push	{r4, lr}
   11f62:	4815      	ldr	r0, [pc, #84]	; (11fb8 <lll_init+0x58>)
   11f64:	f008 f9c6 	bl	1a2f4 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   11f68:	4b14      	ldr	r3, [pc, #80]	; (11fbc <lll_init+0x5c>)
   11f6a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   11f6c:	b300      	cbz	r0, 11fb0 <lll_init+0x50>
	event.curr.abort_cb = NULL;
   11f6e:	4b14      	ldr	r3, [pc, #80]	; (11fc0 <lll_init+0x60>)
   11f70:	2400      	movs	r4, #0
   11f72:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   11f74:	f000 fa22 	bl	123bc <lll_clock_init>
	if (err < 0) {
   11f78:	2800      	cmp	r0, #0
   11f7a:	db18      	blt.n	11fae <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   11f7c:	4622      	mov	r2, r4
   11f7e:	4621      	mov	r1, r4
   11f80:	2001      	movs	r0, #1
   11f82:	f7f2 fb73 	bl	466c <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   11f86:	4622      	mov	r2, r4
   11f88:	4621      	mov	r1, r4
   11f8a:	200b      	movs	r0, #11
   11f8c:	f7f2 fb6e 	bl	466c <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   11f90:	4622      	mov	r2, r4
   11f92:	4621      	mov	r1, r4
   11f94:	2018      	movs	r0, #24
   11f96:	f7f2 fb69 	bl	466c <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   11f9a:	2001      	movs	r0, #1
   11f9c:	f7f2 fb34 	bl	4608 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   11fa0:	200b      	movs	r0, #11
   11fa2:	f7f2 fb31 	bl	4608 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   11fa6:	2018      	movs	r0, #24
   11fa8:	f7f2 fb2e 	bl	4608 <arch_irq_enable>
	return 0;
   11fac:	4620      	mov	r0, r4
}
   11fae:	bd10      	pop	{r4, pc}
		return -ENODEV;
   11fb0:	f06f 0012 	mvn.w	r0, #18
}
   11fb4:	bd10      	pop	{r4, pc}
   11fb6:	bf00      	nop
   11fb8:	00027e60 	.word	0x00027e60
   11fbc:	20002798 	.word	0x20002798
   11fc0:	2000279c 	.word	0x2000279c

00011fc4 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   11fc4:	4a04      	ldr	r2, [pc, #16]	; (11fd8 <lll_csrand_get+0x14>)
{
   11fc6:	b410      	push	{r4}
   11fc8:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   11fca:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   11fcc:	6884      	ldr	r4, [r0, #8]
   11fce:	b28a      	uxth	r2, r1
   11fd0:	4619      	mov	r1, r3
   11fd2:	6823      	ldr	r3, [r4, #0]
}
   11fd4:	bc10      	pop	{r4}
   11fd6:	4718      	bx	r3
   11fd8:	20002798 	.word	0x20002798

00011fdc <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   11fdc:	4b08      	ldr	r3, [pc, #32]	; (12000 <lll_csrand_isr_get+0x24>)
   11fde:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   11fe0:	689a      	ldr	r2, [r3, #8]
{
   11fe2:	b410      	push	{r4}
   11fe4:	6854      	ldr	r4, [r2, #4]
   11fe6:	b134      	cbz	r4, 11ff6 <lll_csrand_isr_get+0x1a>
   11fe8:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   11fea:	46a4      	mov	ip, r4
   11fec:	4601      	mov	r1, r0
}
   11fee:	bc10      	pop	{r4}
   11ff0:	4618      	mov	r0, r3
   11ff2:	2300      	movs	r3, #0
   11ff4:	4760      	bx	ip
   11ff6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11ffa:	bc10      	pop	{r4}
   11ffc:	4770      	bx	lr
   11ffe:	bf00      	nop
   12000:	20002798 	.word	0x20002798

00012004 <lll_rand_isr_get>:
   12004:	f7ff bfea 	b.w	11fdc <lll_csrand_isr_get>

00012008 <lll_reset>:
}
   12008:	2000      	movs	r0, #0
   1200a:	4770      	bx	lr

0001200c <lll_prepare>:
{
   1200c:	b510      	push	{r4, lr}
   1200e:	b082      	sub	sp, #8
   12010:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   12012:	9400      	str	r4, [sp, #0]
   12014:	2400      	movs	r4, #0
   12016:	9401      	str	r4, [sp, #4]
   12018:	f7ff fe5a 	bl	11cd0 <prepare>
}
   1201c:	b002      	add	sp, #8
   1201e:	bd10      	pop	{r4, pc}

00012020 <lll_resume>:
{
   12020:	b510      	push	{r4, lr}
   12022:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   12024:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   12026:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1202a:	69c3      	ldr	r3, [r0, #28]
   1202c:	6902      	ldr	r2, [r0, #16]
   1202e:	f004 0401 	and.w	r4, r4, #1
   12032:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   12036:	9401      	str	r4, [sp, #4]
   12038:	f7ff fe4a 	bl	11cd0 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1203c:	b108      	cbz	r0, 12042 <lll_resume+0x22>
   1203e:	3077      	adds	r0, #119	; 0x77
   12040:	d101      	bne.n	12046 <lll_resume+0x26>
}
   12042:	b002      	add	sp, #8
   12044:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   12046:	4a07      	ldr	r2, [pc, #28]	; (12064 <lll_resume+0x44>)
   12048:	4907      	ldr	r1, [pc, #28]	; (12068 <lll_resume+0x48>)
   1204a:	4808      	ldr	r0, [pc, #32]	; (1206c <lll_resume+0x4c>)
   1204c:	23e5      	movs	r3, #229	; 0xe5
   1204e:	f00b fe4e 	bl	1dcee <printk>
   12052:	4040      	eors	r0, r0
   12054:	f380 8811 	msr	BASEPRI, r0
   12058:	f04f 0003 	mov.w	r0, #3
   1205c:	df02      	svc	2
}
   1205e:	b002      	add	sp, #8
   12060:	bd10      	pop	{r4, pc}
   12062:	bf00      	nop
   12064:	00027dc4 	.word	0x00027dc4
   12068:	00027e64 	.word	0x00027e64
   1206c:	000275f0 	.word	0x000275f0

00012070 <lll_disable>:
{
   12070:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   12072:	4604      	mov	r4, r0
{
   12074:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   12076:	2800      	cmp	r0, #0
   12078:	d035      	beq.n	120e6 <lll_disable+0x76>
   1207a:	4b26      	ldr	r3, [pc, #152]	; (12114 <lll_disable+0xa4>)
   1207c:	681a      	ldr	r2, [r3, #0]
   1207e:	4282      	cmp	r2, r0
   12080:	d02b      	beq.n	120da <lll_disable+0x6a>
		idx = UINT8_MAX;
   12082:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   12084:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   12088:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1208c:	f7fa ff3a 	bl	cf04 <ull_prepare_dequeue_iter>
		while (next) {
   12090:	4603      	mov	r3, r0
   12092:	b940      	cbnz	r0, 120a6 <lll_disable+0x36>
   12094:	e01f      	b.n	120d6 <lll_disable+0x66>
			    (!param || (param == next->prepare_param.param))) {
   12096:	4294      	cmp	r4, r2
   12098:	d00e      	beq.n	120b8 <lll_disable+0x48>
			next = ull_prepare_dequeue_iter(&idx);
   1209a:	f10d 0007 	add.w	r0, sp, #7
   1209e:	f7fa ff31 	bl	cf04 <ull_prepare_dequeue_iter>
		while (next) {
   120a2:	4603      	mov	r3, r0
   120a4:	b1b8      	cbz	r0, 120d6 <lll_disable+0x66>
			if (!next->is_aborted &&
   120a6:	f893 2020 	ldrb.w	r2, [r3, #32]
   120aa:	0792      	lsls	r2, r2, #30
   120ac:	d4f5      	bmi.n	1209a <lll_disable+0x2a>
				next->is_aborted = 1;
   120ae:	68da      	ldr	r2, [r3, #12]
				next->abort_cb(&next->prepare_param,
   120b0:	4618      	mov	r0, r3
   120b2:	4611      	mov	r1, r2
			if (!next->is_aborted &&
   120b4:	2c00      	cmp	r4, #0
   120b6:	d1ee      	bne.n	12096 <lll_disable+0x26>
				next->is_aborted = 1;
   120b8:	f893 2020 	ldrb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   120bc:	699d      	ldr	r5, [r3, #24]
				next->is_aborted = 1;
   120be:	f042 0202 	orr.w	r2, r2, #2
   120c2:	f883 2020 	strb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   120c6:	47a8      	blx	r5
			next = ull_prepare_dequeue_iter(&idx);
   120c8:	f10d 0007 	add.w	r0, sp, #7
   120cc:	f7fa ff1a 	bl	cf04 <ull_prepare_dequeue_iter>
		while (next) {
   120d0:	4603      	mov	r3, r0
   120d2:	2800      	cmp	r0, #0
   120d4:	d1e7      	bne.n	120a6 <lll_disable+0x36>
}
   120d6:	b003      	add	sp, #12
   120d8:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   120da:	689b      	ldr	r3, [r3, #8]
   120dc:	b16b      	cbz	r3, 120fa <lll_disable+0x8a>
   120de:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   120e0:	2000      	movs	r0, #0
   120e2:	4798      	blx	r3
   120e4:	e7cd      	b.n	12082 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   120e6:	4a0b      	ldr	r2, [pc, #44]	; (12114 <lll_disable+0xa4>)
   120e8:	6893      	ldr	r3, [r2, #8]
   120ea:	2b00      	cmp	r3, #0
   120ec:	d0c9      	beq.n	12082 <lll_disable+0x12>
   120ee:	6811      	ldr	r1, [r2, #0]
   120f0:	2900      	cmp	r1, #0
   120f2:	d0c6      	beq.n	12082 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   120f4:	2000      	movs	r0, #0
   120f6:	4798      	blx	r3
   120f8:	e7c3      	b.n	12082 <lll_disable+0x12>
			LL_ASSERT(!param);
   120fa:	4a07      	ldr	r2, [pc, #28]	; (12118 <lll_disable+0xa8>)
   120fc:	4907      	ldr	r1, [pc, #28]	; (1211c <lll_disable+0xac>)
   120fe:	4808      	ldr	r0, [pc, #32]	; (12120 <lll_disable+0xb0>)
   12100:	23ef      	movs	r3, #239	; 0xef
   12102:	f00b fdf4 	bl	1dcee <printk>
   12106:	4040      	eors	r0, r0
   12108:	f380 8811 	msr	BASEPRI, r0
   1210c:	f04f 0003 	mov.w	r0, #3
   12110:	df02      	svc	2
   12112:	e7b6      	b.n	12082 <lll_disable+0x12>
   12114:	2000279c 	.word	0x2000279c
   12118:	00027dc4 	.word	0x00027dc4
   1211c:	00027e78 	.word	0x00027e78
   12120:	000275f0 	.word	0x000275f0

00012124 <lll_prepare_done>:
}
   12124:	2000      	movs	r0, #0
   12126:	4770      	bx	lr

00012128 <lll_done>:
{
   12128:	b510      	push	{r4, lr}
   1212a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1212c:	f7fa fedc 	bl	cee8 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   12130:	b13c      	cbz	r4, 12142 <lll_done+0x1a>
   12132:	b320      	cbz	r0, 1217e <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   12134:	6820      	ldr	r0, [r4, #0]
   12136:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   12138:	f7fa ff12 	bl	cf60 <ull_event_done>
	LL_ASSERT(evdone);
   1213c:	b180      	cbz	r0, 12160 <lll_done+0x38>
}
   1213e:	2000      	movs	r0, #0
   12140:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   12142:	4c1d      	ldr	r4, [pc, #116]	; (121b8 <lll_done+0x90>)
   12144:	68a3      	ldr	r3, [r4, #8]
   12146:	b343      	cbz	r3, 1219a <lll_done+0x72>
		param = event.curr.param;
   12148:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1214a:	2300      	movs	r3, #0
   1214c:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1214e:	6023      	str	r3, [r4, #0]
		if (param) {
   12150:	2800      	cmp	r0, #0
   12152:	d0f1      	beq.n	12138 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   12154:	6800      	ldr	r0, [r0, #0]
   12156:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   12158:	f7fa ff02 	bl	cf60 <ull_event_done>
	LL_ASSERT(evdone);
   1215c:	2800      	cmp	r0, #0
   1215e:	d1ee      	bne.n	1213e <lll_done+0x16>
   12160:	4a16      	ldr	r2, [pc, #88]	; (121bc <lll_done+0x94>)
   12162:	4917      	ldr	r1, [pc, #92]	; (121c0 <lll_done+0x98>)
   12164:	4817      	ldr	r0, [pc, #92]	; (121c4 <lll_done+0x9c>)
   12166:	f44f 73a0 	mov.w	r3, #320	; 0x140
   1216a:	f00b fdc0 	bl	1dcee <printk>
   1216e:	4040      	eors	r0, r0
   12170:	f380 8811 	msr	BASEPRI, r0
   12174:	f04f 0003 	mov.w	r0, #3
   12178:	df02      	svc	2
}
   1217a:	2000      	movs	r0, #0
   1217c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   1217e:	4a0f      	ldr	r2, [pc, #60]	; (121bc <lll_done+0x94>)
   12180:	4911      	ldr	r1, [pc, #68]	; (121c8 <lll_done+0xa0>)
   12182:	4810      	ldr	r0, [pc, #64]	; (121c4 <lll_done+0x9c>)
   12184:	f44f 7391 	mov.w	r3, #290	; 0x122
   12188:	f00b fdb1 	bl	1dcee <printk>
   1218c:	4040      	eors	r0, r0
   1218e:	f380 8811 	msr	BASEPRI, r0
   12192:	f04f 0003 	mov.w	r0, #3
   12196:	df02      	svc	2
   12198:	e7cc      	b.n	12134 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1219a:	4a08      	ldr	r2, [pc, #32]	; (121bc <lll_done+0x94>)
   1219c:	490b      	ldr	r1, [pc, #44]	; (121cc <lll_done+0xa4>)
   1219e:	4809      	ldr	r0, [pc, #36]	; (121c4 <lll_done+0x9c>)
   121a0:	f44f 7394 	mov.w	r3, #296	; 0x128
   121a4:	f00b fda3 	bl	1dcee <printk>
   121a8:	4040      	eors	r0, r0
   121aa:	f380 8811 	msr	BASEPRI, r0
   121ae:	f04f 0003 	mov.w	r0, #3
   121b2:	df02      	svc	2
   121b4:	e7c8      	b.n	12148 <lll_done+0x20>
   121b6:	bf00      	nop
   121b8:	2000279c 	.word	0x2000279c
   121bc:	00027dc4 	.word	0x00027dc4
   121c0:	00027ea4 	.word	0x00027ea4
   121c4:	000275f0 	.word	0x000275f0
   121c8:	00027e80 	.word	0x00027e80
   121cc:	00027e90 	.word	0x00027e90

000121d0 <lll_is_abort_cb>:
}
   121d0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   121d4:	4770      	bx	lr
   121d6:	bf00      	nop

000121d8 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   121d8:	e9d0 2300 	ldrd	r2, r3, [r0]
   121dc:	2a00      	cmp	r2, #0
   121de:	db04      	blt.n	121ea <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   121e0:	429a      	cmp	r2, r3
   121e2:	bf38      	it	cc
   121e4:	461a      	movcc	r2, r3
   121e6:	4610      	mov	r0, r2
}
   121e8:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   121ea:	6880      	ldr	r0, [r0, #8]
   121ec:	4298      	cmp	r0, r3
   121ee:	bf38      	it	cc
   121f0:	4618      	movcc	r0, r3
   121f2:	4770      	bx	lr

000121f4 <lll_preempt_calc>:
{
   121f4:	b510      	push	{r4, lr}
   121f6:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   121f8:	f7f8 fa68 	bl	a6cc <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   121fc:	4621      	mov	r1, r4
   121fe:	f7f8 fa67 	bl	a6d0 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   12202:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   12204:	0203      	lsls	r3, r0, #8
   12206:	d404      	bmi.n	12212 <lll_preempt_calc+0x1e>
   12208:	2809      	cmp	r0, #9
   1220a:	bf94      	ite	ls
   1220c:	2000      	movls	r0, #0
   1220e:	2001      	movhi	r0, #1
}
   12210:	bd10      	pop	{r4, pc}
	return 0;
   12212:	2000      	movs	r0, #0
}
   12214:	bd10      	pop	{r4, pc}
   12216:	bf00      	nop

00012218 <lll_chan_set>:
	switch (chan) {
   12218:	2826      	cmp	r0, #38	; 0x26
{
   1221a:	b510      	push	{r4, lr}
   1221c:	4604      	mov	r4, r0
	switch (chan) {
   1221e:	d01c      	beq.n	1225a <lll_chan_set+0x42>
   12220:	2827      	cmp	r0, #39	; 0x27
   12222:	d012      	beq.n	1224a <lll_chan_set+0x32>
   12224:	2825      	cmp	r0, #37	; 0x25
   12226:	d008      	beq.n	1223a <lll_chan_set+0x22>
		if (chan < 11) {
   12228:	280a      	cmp	r0, #10
   1222a:	d91e      	bls.n	1226a <lll_chan_set+0x52>
		} else if (chan < 40) {
   1222c:	2827      	cmp	r0, #39	; 0x27
   1222e:	d821      	bhi.n	12274 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   12230:	3003      	adds	r0, #3
   12232:	0040      	lsls	r0, r0, #1
   12234:	f001 fca8 	bl	13b88 <radio_freq_chan_set>
   12238:	e002      	b.n	12240 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1223a:	2002      	movs	r0, #2
   1223c:	f001 fca4 	bl	13b88 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   12240:	4620      	mov	r0, r4
}
   12242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   12246:	f001 bca5 	b.w	13b94 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1224a:	2050      	movs	r0, #80	; 0x50
   1224c:	f001 fc9c 	bl	13b88 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   12250:	4620      	mov	r0, r4
}
   12252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   12256:	f001 bc9d 	b.w	13b94 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1225a:	201a      	movs	r0, #26
   1225c:	f001 fc94 	bl	13b88 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   12260:	4620      	mov	r0, r4
}
   12262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   12266:	f001 bc95 	b.w	13b94 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1226a:	3002      	adds	r0, #2
   1226c:	0040      	lsls	r0, r0, #1
   1226e:	f001 fc8b 	bl	13b88 <radio_freq_chan_set>
   12272:	e7e5      	b.n	12240 <lll_chan_set+0x28>
			LL_ASSERT(0);
   12274:	4a06      	ldr	r2, [pc, #24]	; (12290 <lll_chan_set+0x78>)
   12276:	4907      	ldr	r1, [pc, #28]	; (12294 <lll_chan_set+0x7c>)
   12278:	4807      	ldr	r0, [pc, #28]	; (12298 <lll_chan_set+0x80>)
   1227a:	f240 13a3 	movw	r3, #419	; 0x1a3
   1227e:	f00b fd36 	bl	1dcee <printk>
   12282:	4040      	eors	r0, r0
   12284:	f380 8811 	msr	BASEPRI, r0
   12288:	f04f 0003 	mov.w	r0, #3
   1228c:	df02      	svc	2
   1228e:	e7d7      	b.n	12240 <lll_chan_set+0x28>
   12290:	00027dc4 	.word	0x00027dc4
   12294:	00027650 	.word	0x00027650
   12298:	000275f0 	.word	0x000275f0

0001229c <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1229c:	f001 bce2 	b.w	13c64 <radio_rx_ready_delay_get>

000122a0 <lll_isr_tx_status_reset>:
{
   122a0:	b508      	push	{r3, lr}
	radio_status_reset();
   122a2:	f001 fd05 	bl	13cb0 <radio_status_reset>
}
   122a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   122aa:	f001 bdc5 	b.w	13e38 <radio_tmr_status_reset>
   122ae:	bf00      	nop

000122b0 <lll_isr_rx_status_reset>:
{
   122b0:	b508      	push	{r3, lr}
	radio_status_reset();
   122b2:	f001 fcfd 	bl	13cb0 <radio_status_reset>
	radio_tmr_status_reset();
   122b6:	f001 fdbf 	bl	13e38 <radio_tmr_status_reset>
}
   122ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   122be:	f001 bd6b 	b.w	13d98 <radio_rssi_status_reset>
   122c2:	bf00      	nop

000122c4 <lll_isr_status_reset>:
{
   122c4:	b508      	push	{r3, lr}
	radio_status_reset();
   122c6:	f001 fcf3 	bl	13cb0 <radio_status_reset>
	radio_tmr_status_reset();
   122ca:	f001 fdb5 	bl	13e38 <radio_tmr_status_reset>
	radio_filter_status_reset();
   122ce:	f001 fd9b 	bl	13e08 <radio_filter_status_reset>
	radio_ar_status_reset();
   122d2:	f001 ff79 	bl	141c8 <radio_ar_status_reset>
}
   122d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   122da:	f001 bd5d 	b.w	13d98 <radio_rssi_status_reset>
   122de:	bf00      	nop

000122e0 <lll_isr_cleanup>:
{
   122e0:	b508      	push	{r3, lr}
   122e2:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   122e4:	4815      	ldr	r0, [pc, #84]	; (1233c <lll_isr_cleanup+0x5c>)
   122e6:	f001 fbf5 	bl	13ad4 <radio_isr_set>
	if (!radio_is_idle()) {
   122ea:	f001 fd01 	bl	13cf0 <radio_is_idle>
   122ee:	b150      	cbz	r0, 12306 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   122f0:	f001 fe44 	bl	13f7c <radio_tmr_stop>
	err = lll_hfclock_off();
   122f4:	f000 f894 	bl	12420 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   122f8:	2800      	cmp	r0, #0
   122fa:	db0c      	blt.n	12316 <lll_isr_cleanup+0x36>
}
   122fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   12300:	2000      	movs	r0, #0
   12302:	f7ff bf11 	b.w	12128 <lll_done>
		radio_disable();
   12306:	f001 fcbb 	bl	13c80 <radio_disable>
	radio_tmr_stop();
   1230a:	f001 fe37 	bl	13f7c <radio_tmr_stop>
	err = lll_hfclock_off();
   1230e:	f000 f887 	bl	12420 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   12312:	2800      	cmp	r0, #0
   12314:	daf2      	bge.n	122fc <lll_isr_cleanup+0x1c>
   12316:	4a0a      	ldr	r2, [pc, #40]	; (12340 <lll_isr_cleanup+0x60>)
   12318:	490a      	ldr	r1, [pc, #40]	; (12344 <lll_isr_cleanup+0x64>)
   1231a:	480b      	ldr	r0, [pc, #44]	; (12348 <lll_isr_cleanup+0x68>)
   1231c:	f240 2306 	movw	r3, #518	; 0x206
   12320:	f00b fce5 	bl	1dcee <printk>
   12324:	4040      	eors	r0, r0
   12326:	f380 8811 	msr	BASEPRI, r0
   1232a:	f04f 0003 	mov.w	r0, #3
   1232e:	df02      	svc	2
	lll_done(NULL);
   12330:	2000      	movs	r0, #0
}
   12332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   12336:	f7ff bef7 	b.w	12128 <lll_done>
   1233a:	bf00      	nop
   1233c:	00011bf9 	.word	0x00011bf9
   12340:	00027dc4 	.word	0x00027dc4
   12344:	00027eac 	.word	0x00027eac
   12348:	000275f0 	.word	0x000275f0

0001234c <lll_isr_abort>:
{
   1234c:	b510      	push	{r4, lr}
   1234e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   12350:	f7ff ffb8 	bl	122c4 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   12354:	4620      	mov	r0, r4
}
   12356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1235a:	f7ff bfc1 	b.w	122e0 <lll_isr_cleanup>
   1235e:	bf00      	nop

00012360 <clock_ready>:
	z_impl_k_sem_give(sem);
   12360:	f101 0010 	add.w	r0, r1, #16
   12364:	f008 be0e 	b.w	1af84 <z_impl_k_sem_give>

00012368 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   12368:	b530      	push	{r4, r5, lr}
   1236a:	4604      	mov	r4, r0
   1236c:	b08b      	sub	sp, #44	; 0x2c
   1236e:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   12370:	2201      	movs	r2, #1
   12372:	2100      	movs	r1, #0
   12374:	a804      	add	r0, sp, #16
   12376:	f014 f8ac 	bl	264d2 <z_impl_k_sem_init>
   1237a:	2300      	movs	r3, #0
   1237c:	4a0e      	ldr	r2, [pc, #56]	; (123b8 <blocking_on+0x50>)
   1237e:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   12380:	4620      	mov	r0, r4
   12382:	2303      	movs	r3, #3
   12384:	4669      	mov	r1, sp
   12386:	9201      	str	r2, [sp, #4]
   12388:	9302      	str	r3, [sp, #8]
   1238a:	f00b fd2c 	bl	1dde6 <onoff_request>
	if (err < 0) {
   1238e:	2800      	cmp	r0, #0
   12390:	db10      	blt.n	123b4 <blocking_on+0x4c>
   12392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   12396:	f240 30e7 	movw	r0, #999	; 0x3e7
   1239a:	2100      	movs	r1, #0
   1239c:	fbe3 0105 	umlal	r0, r1, r3, r5
   123a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   123a4:	2300      	movs	r3, #0
   123a6:	f7ed feeb 	bl	180 <__aeabi_uldivmod>
   123aa:	4602      	mov	r2, r0
   123ac:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   123ae:	a804      	add	r0, sp, #16
   123b0:	f008 fe0e 	bl	1afd0 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   123b4:	b00b      	add	sp, #44	; 0x2c
   123b6:	bd30      	pop	{r4, r5, pc}
   123b8:	00012361 	.word	0x00012361

000123bc <lll_clock_init>:

int lll_clock_init(void)
{
   123bc:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   123be:	2001      	movs	r0, #1
   123c0:	f7f1 fdee 	bl	3fa0 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   123c4:	4904      	ldr	r1, [pc, #16]	; (123d8 <lll_clock_init+0x1c>)
   123c6:	2401      	movs	r4, #1
   123c8:	2300      	movs	r3, #0
   123ca:	608c      	str	r4, [r1, #8]
   123cc:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   123ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   123d2:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   123d4:	f00b bd07 	b.w	1dde6 <onoff_request>
   123d8:	200027b4 	.word	0x200027b4

000123dc <lll_clock_wait>:

int lll_clock_wait(void)
{
   123dc:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   123de:	2001      	movs	r0, #1
   123e0:	f7f1 fdde 	bl	3fa0 <z_nrf_clock_control_get_onoff>

	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
}
   123e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   123e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   123ec:	f7ff bfbc 	b.w	12368 <blocking_on>

000123f0 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   123f0:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   123f2:	4b0a      	ldr	r3, [pc, #40]	; (1241c <lll_hfclock_on+0x2c>)
   123f4:	f3bf 8f5b 	dmb	ish
   123f8:	e853 2f00 	ldrex	r2, [r3]
   123fc:	1c51      	adds	r1, r2, #1
   123fe:	e843 1000 	strex	r0, r1, [r3]
   12402:	2800      	cmp	r0, #0
   12404:	d1f8      	bne.n	123f8 <lll_hfclock_on+0x8>
   12406:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1240a:	2a00      	cmp	r2, #0
   1240c:	dd01      	ble.n	12412 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1240e:	2000      	movs	r0, #0
   12410:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   12412:	f7f1 fdcd 	bl	3fb0 <z_nrf_clock_bt_ctlr_hf_request>
}
   12416:	2000      	movs	r0, #0
   12418:	bd08      	pop	{r3, pc}
   1241a:	bf00      	nop
   1241c:	200027b0 	.word	0x200027b0

00012420 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   12420:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   12422:	4b0d      	ldr	r3, [pc, #52]	; (12458 <lll_hfclock_off+0x38>)
   12424:	681a      	ldr	r2, [r3, #0]
   12426:	2a00      	cmp	r2, #0
   12428:	dd12      	ble.n	12450 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1242a:	f3bf 8f5b 	dmb	ish
   1242e:	e853 2f00 	ldrex	r2, [r3]
   12432:	1e51      	subs	r1, r2, #1
   12434:	e843 1000 	strex	r0, r1, [r3]
   12438:	2800      	cmp	r0, #0
   1243a:	d1f8      	bne.n	1242e <lll_hfclock_off+0xe>
   1243c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   12440:	2a01      	cmp	r2, #1
   12442:	dd01      	ble.n	12448 <lll_hfclock_off+0x28>
		return 0;
   12444:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   12446:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   12448:	f7f1 fdc8 	bl	3fdc <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1244c:	2000      	movs	r0, #0
}
   1244e:	bd08      	pop	{r3, pc}
		return -EALREADY;
   12450:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   12454:	bd08      	pop	{r3, pc}
   12456:	bf00      	nop
   12458:	200027b0 	.word	0x200027b0

0001245c <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   1245c:	2014      	movs	r0, #20
   1245e:	4770      	bx	lr

00012460 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   12460:	4b01      	ldr	r3, [pc, #4]	; (12468 <lll_clock_ppm_get+0x8>)
}
   12462:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12466:	4770      	bx	lr
   12468:	00027eb8 	.word	0x00027eb8

0001246c <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1246c:	b510      	push	{r4, lr}
   1246e:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   12470:	f7ff ff28 	bl	122c4 <lll_isr_status_reset>

	radio_filter_disable();
   12474:	f001 fcbe 	bl	13df4 <radio_filter_disable>

	lll_isr_cleanup(param);
   12478:	4620      	mov	r0, r4
}
   1247a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1247e:	f7ff bf2f 	b.w	122e0 <lll_isr_cleanup>
   12482:	bf00      	nop

00012484 <isr_tx>:
{
   12484:	b530      	push	{r4, r5, lr}
   12486:	b083      	sub	sp, #12
   12488:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1248a:	f7ff ff09 	bl	122a0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1248e:	2096      	movs	r0, #150	; 0x96
   12490:	f001 fce2 	bl	13e58 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   12494:	2300      	movs	r3, #0
   12496:	461a      	mov	r2, r3
   12498:	4619      	mov	r1, r3
   1249a:	4618      	mov	r0, r3
   1249c:	f001 fc62 	bl	13d64 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   124a0:	f001 fc4a 	bl	13d38 <radio_pkt_scratch_get>
   124a4:	f001 fbd0 	bl	13c48 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   124a8:	f001 fc0e 	bl	13cc8 <radio_is_ready>
   124ac:	b9d8      	cbnz	r0, 124e6 <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   124ae:	481e      	ldr	r0, [pc, #120]	; (12528 <isr_tx+0xa4>)
   124b0:	4621      	mov	r1, r4
   124b2:	f001 fb0f 	bl	13ad4 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   124b6:	f7ff fb6d 	bl	11b94 <ull_filter_lll_rl_enabled>
   124ba:	bb48      	cbnz	r0, 12510 <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   124bc:	f001 fdba 	bl	14034 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   124c0:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   124c2:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   124c4:	4608      	mov	r0, r1
   124c6:	f001 fbcf 	bl	13c68 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   124ca:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   124cc:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   124ce:	4608      	mov	r0, r1
   124d0:	f001 fbc6 	bl	13c60 <radio_tx_chain_delay_get>
   124d4:	442c      	add	r4, r5
   124d6:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   124d8:	1a20      	subs	r0, r4, r0
   124da:	f001 fd63 	bl	13fa4 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   124de:	f001 fd9b 	bl	14018 <radio_tmr_end_capture>
}
   124e2:	b003      	add	sp, #12
   124e4:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   124e6:	4a11      	ldr	r2, [pc, #68]	; (1252c <isr_tx+0xa8>)
   124e8:	4911      	ldr	r1, [pc, #68]	; (12530 <isr_tx+0xac>)
   124ea:	4812      	ldr	r0, [pc, #72]	; (12534 <isr_tx+0xb0>)
   124ec:	f240 235d 	movw	r3, #605	; 0x25d
   124f0:	f00b fbfd 	bl	1dcee <printk>
   124f4:	4040      	eors	r0, r0
   124f6:	f380 8811 	msr	BASEPRI, r0
   124fa:	f04f 0003 	mov.w	r0, #3
   124fe:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   12500:	4809      	ldr	r0, [pc, #36]	; (12528 <isr_tx+0xa4>)
   12502:	4621      	mov	r1, r4
   12504:	f001 fae6 	bl	13ad4 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   12508:	f7ff fb44 	bl	11b94 <ull_filter_lll_rl_enabled>
   1250c:	2800      	cmp	r0, #0
   1250e:	d0d5      	beq.n	124bc <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   12510:	f10d 0007 	add.w	r0, sp, #7
   12514:	f7ff fa68 	bl	119e8 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   12518:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1251a:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1251c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12520:	f001 fe1a 	bl	14158 <radio_ar_configure>
   12524:	e7ca      	b.n	124bc <isr_tx+0x38>
   12526:	bf00      	nop
   12528:	00012b95 	.word	0x00012b95
   1252c:	00027ec8 	.word	0x00027ec8
   12530:	00027f14 	.word	0x00027f14
   12534:	000275f0 	.word	0x000275f0

00012538 <is_abort_cb>:
	if (next != curr) {
   12538:	4282      	cmp	r2, r0
{
   1253a:	b508      	push	{r3, lr}
	if (next != curr) {
   1253c:	d011      	beq.n	12562 <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   1253e:	7b12      	ldrb	r2, [r2, #12]
   12540:	07d2      	lsls	r2, r2, #31
   12542:	d402      	bmi.n	1254a <is_abort_cb+0x12>
			return -ECANCELED;
   12544:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   12548:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1254a:	4a14      	ldr	r2, [pc, #80]	; (1259c <is_abort_cb+0x64>)
   1254c:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1254e:	9a02      	ldr	r2, [sp, #8]
   12550:	2300      	movs	r3, #0
   12552:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   12554:	f7ff ff4c 	bl	123f0 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   12558:	2800      	cmp	r0, #0
   1255a:	db0f      	blt.n	1257c <is_abort_cb+0x44>
   1255c:	f06f 000a 	mvn.w	r0, #10
}
   12560:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   12562:	7c13      	ldrb	r3, [r2, #16]
   12564:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12568:	6953      	ldr	r3, [r2, #20]
   1256a:	781b      	ldrb	r3, [r3, #0]
   1256c:	f003 030f 	and.w	r3, r3, #15
   12570:	2b01      	cmp	r3, #1
		return 0;
   12572:	bf14      	ite	ne
   12574:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   12578:	2000      	moveq	r0, #0
}
   1257a:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1257c:	4a08      	ldr	r2, [pc, #32]	; (125a0 <is_abort_cb+0x68>)
   1257e:	4909      	ldr	r1, [pc, #36]	; (125a4 <is_abort_cb+0x6c>)
   12580:	4809      	ldr	r0, [pc, #36]	; (125a8 <is_abort_cb+0x70>)
   12582:	f240 231b 	movw	r3, #539	; 0x21b
   12586:	f00b fbb2 	bl	1dcee <printk>
   1258a:	4040      	eors	r0, r0
   1258c:	f380 8811 	msr	BASEPRI, r0
   12590:	f04f 0003 	mov.w	r0, #3
   12594:	df02      	svc	2
   12596:	f06f 000a 	mvn.w	r0, #10
}
   1259a:	bd08      	pop	{r3, pc}
   1259c:	00012a3d 	.word	0x00012a3d
   125a0:	00027ec8 	.word	0x00027ec8
   125a4:	00027eac 	.word	0x00027eac
   125a8:	000275f0 	.word	0x000275f0

000125ac <abort_cb>:
{
   125ac:	b510      	push	{r4, lr}
	if (!prepare_param) {
   125ae:	b1d8      	cbz	r0, 125e8 <abort_cb+0x3c>
	err = lll_hfclock_off();
   125b0:	460c      	mov	r4, r1
   125b2:	f7ff ff35 	bl	12420 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   125b6:	2800      	cmp	r0, #0
   125b8:	db04      	blt.n	125c4 <abort_cb+0x18>
	lll_done(param);
   125ba:	4620      	mov	r0, r4
}
   125bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   125c0:	f7ff bdb2 	b.w	12128 <lll_done>
	LL_ASSERT(err >= 0);
   125c4:	4a0c      	ldr	r2, [pc, #48]	; (125f8 <abort_cb+0x4c>)
   125c6:	490d      	ldr	r1, [pc, #52]	; (125fc <abort_cb+0x50>)
   125c8:	480d      	ldr	r0, [pc, #52]	; (12600 <abort_cb+0x54>)
   125ca:	f240 2341 	movw	r3, #577	; 0x241
   125ce:	f00b fb8e 	bl	1dcee <printk>
   125d2:	4040      	eors	r0, r0
   125d4:	f380 8811 	msr	BASEPRI, r0
   125d8:	f04f 0003 	mov.w	r0, #3
   125dc:	df02      	svc	2
	lll_done(param);
   125de:	4620      	mov	r0, r4
}
   125e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   125e4:	f7ff bda0 	b.w	12128 <lll_done>
		radio_isr_set(isr_abort, param);
   125e8:	4806      	ldr	r0, [pc, #24]	; (12604 <abort_cb+0x58>)
   125ea:	f001 fa73 	bl	13ad4 <radio_isr_set>
}
   125ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   125f2:	f001 bb45 	b.w	13c80 <radio_disable>
   125f6:	bf00      	nop
   125f8:	00027ec8 	.word	0x00027ec8
   125fc:	00027eac 	.word	0x00027eac
   12600:	000275f0 	.word	0x000275f0
   12604:	0001246d 	.word	0x0001246d

00012608 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   12608:	4b08      	ldr	r3, [pc, #32]	; (1262c <lll_adv_init+0x24>)
{
   1260a:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1260c:	1d18      	adds	r0, r3, #4
   1260e:	2205      	movs	r2, #5
   12610:	2128      	movs	r1, #40	; 0x28
   12612:	f7f6 fc5f 	bl	8ed4 <mem_init>
	MFIFO_INIT(pdu_free);
   12616:	4b06      	ldr	r3, [pc, #24]	; (12630 <lll_adv_init+0x28>)
   12618:	2400      	movs	r4, #0
   1261a:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1261c:	2203      	movs	r2, #3
   1261e:	4621      	mov	r1, r4
   12620:	4804      	ldr	r0, [pc, #16]	; (12634 <lll_adv_init+0x2c>)
   12622:	f013 ff56 	bl	264d2 <z_impl_k_sem_init>
}
   12626:	4620      	mov	r0, r4
   12628:	bd10      	pop	{r4, pc}
   1262a:	bf00      	nop
   1262c:	200027c4 	.word	0x200027c4
   12630:	20000684 	.word	0x20000684
   12634:	20002890 	.word	0x20002890

00012638 <lll_adv_reset>:
   12638:	f7ff bfe6 	b.w	12608 <lll_adv_init>

0001263c <lll_adv_data_init>:
{
   1263c:	b510      	push	{r4, lr}
   1263e:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   12640:	4804      	ldr	r0, [pc, #16]	; (12654 <lll_adv_data_init+0x18>)
   12642:	f7f6 fc67 	bl	8f14 <mem_acquire>
	if (!p) {
   12646:	b110      	cbz	r0, 1264e <lll_adv_data_init+0x12>
	pdu->pdu[0] = (void *)p;
   12648:	6060      	str	r0, [r4, #4]
	return 0;
   1264a:	2000      	movs	r0, #0
}
   1264c:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1264e:	f06f 000b 	mvn.w	r0, #11
}
   12652:	bd10      	pop	{r4, pc}
   12654:	200027c4 	.word	0x200027c4

00012658 <lll_adv_data_reset>:
{
   12658:	4603      	mov	r3, r0
	pdu->first = 0U;
   1265a:	2000      	movs	r0, #0
   1265c:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1265e:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   12660:	6098      	str	r0, [r3, #8]
}
   12662:	4770      	bx	lr

00012664 <lll_adv_pdu_alloc>:
{
   12664:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   12666:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   12668:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1266a:	429a      	cmp	r2, r3
   1266c:	d006      	beq.n	1267c <lll_adv_pdu_alloc+0x18>
		pdu->last = first;
   1266e:	b2d4      	uxtb	r4, r2
   12670:	7044      	strb	r4, [r0, #1]
  __ASM volatile ("dsb 0xF":::"memory");
   12672:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   12676:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   12678:	4294      	cmp	r4, r2
   1267a:	d003      	beq.n	12684 <lll_adv_pdu_alloc+0x20>
		last++;
   1267c:	3301      	adds	r3, #1
   1267e:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   12680:	2b02      	cmp	r3, #2
   12682:	d007      	beq.n	12694 <lll_adv_pdu_alloc+0x30>
	*idx = last;
   12684:	461c      	mov	r4, r3
   12686:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1268a:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1268c:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1268e:	b14d      	cbz	r5, 126a4 <lll_adv_pdu_alloc+0x40>
}
   12690:	4628      	mov	r0, r5
   12692:	bd70      	pop	{r4, r5, r6, pc}
{
   12694:	2400      	movs	r4, #0
			last = 0U;
   12696:	4623      	mov	r3, r4
	*idx = last;
   12698:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1269c:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1269e:	6865      	ldr	r5, [r4, #4]
	if (p) {
   126a0:	2d00      	cmp	r5, #0
   126a2:	d1f5      	bne.n	12690 <lll_adv_pdu_alloc+0x2c>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   126a4:	4e33      	ldr	r6, [pc, #204]	; (12774 <lll_adv_pdu_alloc+0x110>)
   126a6:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   126a8:	78f1      	ldrb	r1, [r6, #3]
   126aa:	7833      	ldrb	r3, [r6, #0]
   126ac:	4291      	cmp	r1, r2
   126ae:	d003      	beq.n	126b8 <lll_adv_pdu_alloc+0x54>
	return *((void **)(fifo + first * size));
   126b0:	fb02 6303 	mla	r3, r2, r3, r6
   126b4:	685d      	ldr	r5, [r3, #4]
	if (p) {
   126b6:	b93d      	cbnz	r5, 126c8 <lll_adv_pdu_alloc+0x64>
	p = mem_acquire(&mem_pdu.free);
   126b8:	482f      	ldr	r0, [pc, #188]	; (12778 <lll_adv_pdu_alloc+0x114>)
   126ba:	f7f6 fc2b 	bl	8f14 <mem_acquire>
	if (p) {
   126be:	4605      	mov	r5, r0
   126c0:	b1a8      	cbz	r0, 126ee <lll_adv_pdu_alloc+0x8a>
	pdu->pdu[last] = (void *)p;
   126c2:	6065      	str	r5, [r4, #4]
}
   126c4:	4628      	mov	r0, r5
   126c6:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   126c8:	482c      	ldr	r0, [pc, #176]	; (1277c <lll_adv_pdu_alloc+0x118>)
   126ca:	2200      	movs	r2, #0
   126cc:	2300      	movs	r3, #0
   126ce:	f008 fc7f 	bl	1afd0 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   126d2:	2800      	cmp	r0, #0
   126d4:	d133      	bne.n	1273e <lll_adv_pdu_alloc+0xda>
	uint8_t _first = *first; /* Copy read-index */
   126d6:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   126d8:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   126da:	7871      	ldrb	r1, [r6, #1]
   126dc:	429a      	cmp	r2, r3
   126de:	d0f0      	beq.n	126c2 <lll_adv_pdu_alloc+0x5e>
	_first += 1U;
   126e0:	3301      	adds	r3, #1
   126e2:	b2db      	uxtb	r3, r3
		_first = 0U;
   126e4:	4299      	cmp	r1, r3
   126e6:	bf08      	it	eq
   126e8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   126ea:	70b3      	strb	r3, [r6, #2]

	return mem;
   126ec:	e7e9      	b.n	126c2 <lll_adv_pdu_alloc+0x5e>
   126ee:	4823      	ldr	r0, [pc, #140]	; (1277c <lll_adv_pdu_alloc+0x118>)
   126f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   126f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   126f8:	f008 fc6a 	bl	1afd0 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   126fc:	2800      	cmp	r0, #0
   126fe:	d12b      	bne.n	12758 <lll_adv_pdu_alloc+0xf4>
	uint8_t _first = *first; /* Copy read-index */
   12700:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   12702:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   12704:	7832      	ldrb	r2, [r6, #0]
   12706:	7870      	ldrb	r0, [r6, #1]
   12708:	4299      	cmp	r1, r3
   1270a:	d00a      	beq.n	12722 <lll_adv_pdu_alloc+0xbe>
	mem = *((void **)(fifo + _first * size));
   1270c:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   12710:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   12712:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   12714:	b2db      	uxtb	r3, r3
		_first = 0U;
   12716:	4298      	cmp	r0, r3
   12718:	bf08      	it	eq
   1271a:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1271c:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   1271e:	2d00      	cmp	r5, #0
   12720:	d1cf      	bne.n	126c2 <lll_adv_pdu_alloc+0x5e>
   12722:	4a17      	ldr	r2, [pc, #92]	; (12780 <lll_adv_pdu_alloc+0x11c>)
   12724:	4917      	ldr	r1, [pc, #92]	; (12784 <lll_adv_pdu_alloc+0x120>)
   12726:	4818      	ldr	r0, [pc, #96]	; (12788 <lll_adv_pdu_alloc+0x124>)
   12728:	23fa      	movs	r3, #250	; 0xfa
   1272a:	f00b fae0 	bl	1dcee <printk>
   1272e:	4040      	eors	r0, r0
   12730:	f380 8811 	msr	BASEPRI, r0
   12734:	f04f 0003 	mov.w	r0, #3
   12738:	df02      	svc	2
   1273a:	2500      	movs	r5, #0
   1273c:	e7c1      	b.n	126c2 <lll_adv_pdu_alloc+0x5e>
		LL_ASSERT(!err);
   1273e:	4a10      	ldr	r2, [pc, #64]	; (12780 <lll_adv_pdu_alloc+0x11c>)
   12740:	4912      	ldr	r1, [pc, #72]	; (1278c <lll_adv_pdu_alloc+0x128>)
   12742:	4811      	ldr	r0, [pc, #68]	; (12788 <lll_adv_pdu_alloc+0x124>)
   12744:	23e7      	movs	r3, #231	; 0xe7
   12746:	f00b fad2 	bl	1dcee <printk>
   1274a:	4040      	eors	r0, r0
   1274c:	f380 8811 	msr	BASEPRI, r0
   12750:	f04f 0003 	mov.w	r0, #3
   12754:	df02      	svc	2
   12756:	e7be      	b.n	126d6 <lll_adv_pdu_alloc+0x72>
	LL_ASSERT(!err);
   12758:	4a09      	ldr	r2, [pc, #36]	; (12780 <lll_adv_pdu_alloc+0x11c>)
   1275a:	490c      	ldr	r1, [pc, #48]	; (1278c <lll_adv_pdu_alloc+0x128>)
   1275c:	480a      	ldr	r0, [pc, #40]	; (12788 <lll_adv_pdu_alloc+0x124>)
   1275e:	23f7      	movs	r3, #247	; 0xf7
   12760:	f00b fac5 	bl	1dcee <printk>
   12764:	4040      	eors	r0, r0
   12766:	f380 8811 	msr	BASEPRI, r0
   1276a:	f04f 0003 	mov.w	r0, #3
   1276e:	df02      	svc	2
   12770:	e7c6      	b.n	12700 <lll_adv_pdu_alloc+0x9c>
   12772:	bf00      	nop
   12774:	20000684 	.word	0x20000684
   12778:	200027c4 	.word	0x200027c4
   1277c:	20002890 	.word	0x20002890
   12780:	00027ec8 	.word	0x00027ec8
   12784:	00027f28 	.word	0x00027f28
   12788:	000275f0 	.word	0x000275f0
   1278c:	00027714 	.word	0x00027714

00012790 <lll_adv_pdu_latest_get>:
{
   12790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12792:	4604      	mov	r4, r0
	first = pdu->first;
   12794:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   12796:	7840      	ldrb	r0, [r0, #1]
   12798:	4298      	cmp	r0, r3
   1279a:	d029      	beq.n	127f0 <lll_adv_pdu_latest_get+0x60>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1279c:	4d1d      	ldr	r5, [pc, #116]	; (12814 <lll_adv_pdu_latest_get+0x84>)
   1279e:	b2da      	uxtb	r2, r3
	last = last + 1;
   127a0:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   127a2:	786e      	ldrb	r6, [r5, #1]
   127a4:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   127a6:	3301      	adds	r3, #1
   127a8:	b2db      	uxtb	r3, r3
		last = 0U;
   127aa:	429e      	cmp	r6, r3
   127ac:	bf08      	it	eq
   127ae:	2300      	moveq	r3, #0
	if (last == first) {
   127b0:	4298      	cmp	r0, r3
   127b2:	d01f      	beq.n	127f4 <lll_adv_pdu_latest_get+0x64>
		first += 1U;
   127b4:	1c50      	adds	r0, r2, #1
   127b6:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   127b8:	2802      	cmp	r0, #2
   127ba:	bf04      	itt	eq
   127bc:	2600      	moveq	r6, #0
			first = 0U;
   127be:	4630      	moveq	r0, r6
		*is_modified = 1U;
   127c0:	f04f 0701 	mov.w	r7, #1
		pdu->first = first;
   127c4:	7020      	strb	r0, [r4, #0]
		*is_modified = 1U;
   127c6:	700f      	strb	r7, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   127c8:	7829      	ldrb	r1, [r5, #0]
   127ca:	bf18      	it	ne
   127cc:	4606      	movne	r6, r0
   127ce:	78e8      	ldrb	r0, [r5, #3]
   127d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   127d4:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   127d8:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   127da:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   127dc:	6057      	str	r7, [r2, #4]
   127de:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   127e0:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   127e2:	480d      	ldr	r0, [pc, #52]	; (12818 <lll_adv_pdu_latest_get+0x88>)
   127e4:	f008 fbce 	bl	1af84 <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   127e8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   127ec:	6860      	ldr	r0, [r4, #4]
}
   127ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   127f0:	4606      	mov	r6, r0
   127f2:	e7f9      	b.n	127e8 <lll_adv_pdu_latest_get+0x58>
			LL_ASSERT(false);
   127f4:	4a09      	ldr	r2, [pc, #36]	; (1281c <lll_adv_pdu_latest_get+0x8c>)
   127f6:	490a      	ldr	r1, [pc, #40]	; (12820 <lll_adv_pdu_latest_get+0x90>)
   127f8:	480a      	ldr	r0, [pc, #40]	; (12824 <lll_adv_pdu_latest_get+0x94>)
   127fa:	f240 130d 	movw	r3, #269	; 0x10d
   127fe:	f00b fa76 	bl	1dcee <printk>
   12802:	4040      	eors	r0, r0
   12804:	f380 8811 	msr	BASEPRI, r0
   12808:	f04f 0003 	mov.w	r0, #3
   1280c:	df02      	svc	2
   1280e:	2000      	movs	r0, #0
}
   12810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12812:	bf00      	nop
   12814:	20000684 	.word	0x20000684
   12818:	20002890 	.word	0x20002890
   1281c:	00027ec8 	.word	0x00027ec8
   12820:	00027650 	.word	0x00027650
   12824:	000275f0 	.word	0x000275f0

00012828 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   12828:	7b03      	ldrb	r3, [r0, #12]
{
   1282a:	b530      	push	{r4, r5, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1282c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   12830:	2b00      	cmp	r3, #0
{
   12832:	4604      	mov	r4, r0
   12834:	fa93 f0a3 	rbit	r0, r3
   12838:	fab0 f080 	clz	r0, r0
   1283c:	bf08      	it	eq
   1283e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   12842:	1c45      	adds	r5, r0, #1
{
   12844:	b083      	sub	sp, #12
	LL_ASSERT(chan);
   12846:	d041      	beq.n	128cc <chan_prepare+0xa4>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   12848:	7b22      	ldrb	r2, [r4, #12]
   1284a:	1e59      	subs	r1, r3, #1
   1284c:	400b      	ands	r3, r1
   1284e:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   12852:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   12856:	7322      	strb	r2, [r4, #12]
	lll_chan_set(36 + chan);
   12858:	f7ff fcde 	bl	12218 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1285c:	2300      	movs	r3, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1285e:	f10d 0107 	add.w	r1, sp, #7
   12862:	f104 0010 	add.w	r0, r4, #16
   12866:	f88d 3007 	strb.w	r3, [sp, #7]
   1286a:	f7ff ff91 	bl	12790 <lll_adv_pdu_latest_get>
   1286e:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   12870:	f001 f9f0 	bl	13c54 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   12874:	782b      	ldrb	r3, [r5, #0]
   12876:	f003 030f 	and.w	r3, r3, #15
   1287a:	2b02      	cmp	r3, #2
   1287c:	d01d      	beq.n	128ba <chan_prepare+0x92>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1287e:	f10d 0107 	add.w	r1, sp, #7
   12882:	f104 001c 	add.w	r0, r4, #28
   12886:	f7ff ff83 	bl	12790 <lll_adv_pdu_latest_get>
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1288a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1288e:	b963      	cbnz	r3, 128aa <chan_prepare+0x82>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   12890:	4621      	mov	r1, r4
   12892:	4817      	ldr	r0, [pc, #92]	; (128f0 <chan_prepare+0xc8>)
   12894:	f001 f91e 	bl	13ad4 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   12898:	2096      	movs	r0, #150	; 0x96
   1289a:	f001 fadd 	bl	13e58 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1289e:	2000      	movs	r0, #0
   128a0:	f001 fa52 	bl	13d48 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   128a4:	4628      	mov	r0, r5
   128a6:	b003      	add	sp, #12
   128a8:	bd30      	pop	{r4, r5, pc}
   128aa:	462b      	mov	r3, r5
   128ac:	f853 2f02 	ldr.w	r2, [r3, #2]!
   128b0:	f8c0 2002 	str.w	r2, [r0, #2]
   128b4:	889b      	ldrh	r3, [r3, #4]
   128b6:	80c3      	strh	r3, [r0, #6]
   128b8:	e7ea      	b.n	12890 <chan_prepare+0x68>
		radio_isr_set(isr_done, lll);
   128ba:	480e      	ldr	r0, [pc, #56]	; (128f4 <chan_prepare+0xcc>)
   128bc:	4621      	mov	r1, r4
   128be:	f001 f909 	bl	13ad4 <radio_isr_set>
		radio_switch_complete_and_disable();
   128c2:	f001 fa5b 	bl	13d7c <radio_switch_complete_and_disable>
}
   128c6:	4628      	mov	r0, r5
   128c8:	b003      	add	sp, #12
   128ca:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(chan);
   128cc:	4a0a      	ldr	r2, [pc, #40]	; (128f8 <chan_prepare+0xd0>)
   128ce:	490b      	ldr	r1, [pc, #44]	; (128fc <chan_prepare+0xd4>)
   128d0:	480b      	ldr	r0, [pc, #44]	; (12900 <chan_prepare+0xd8>)
   128d2:	f240 3356 	movw	r3, #854	; 0x356
   128d6:	f00b fa0a 	bl	1dcee <printk>
   128da:	4040      	eors	r0, r0
   128dc:	f380 8811 	msr	BASEPRI, r0
   128e0:	f04f 0003 	mov.w	r0, #3
   128e4:	df02      	svc	2
   128e6:	7b23      	ldrb	r3, [r4, #12]
   128e8:	f3c3 1302 	ubfx	r3, r3, #4, #3
   128ec:	e7ac      	b.n	12848 <chan_prepare+0x20>
   128ee:	bf00      	nop
   128f0:	00012485 	.word	0x00012485
   128f4:	00012a65 	.word	0x00012a65
   128f8:	00027ec8 	.word	0x00027ec8
   128fc:	00027f2c 	.word	0x00027f2c
   12900:	000275f0 	.word	0x000275f0

00012904 <prepare_cb>:
{
   12904:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   12906:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   12908:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1290a:	f015 0501 	ands.w	r5, r5, #1
{
   1290e:	b083      	sub	sp, #12
	if (unlikely(lll_is_stop(lll))) {
   12910:	d16e      	bne.n	129f0 <prepare_cb+0xec>
	radio_reset();
   12912:	4606      	mov	r6, r0
   12914:	f001 f8fe 	bl	13b14 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   12918:	4628      	mov	r0, r5
   1291a:	f001 f92f 	bl	13b7c <radio_tx_power_set>
	radio_phy_set(0, 0);
   1291e:	4629      	mov	r1, r5
   12920:	4628      	mov	r0, r5
   12922:	f001 f91b 	bl	13b5c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   12926:	462a      	mov	r2, r5
   12928:	2125      	movs	r1, #37	; 0x25
   1292a:	2008      	movs	r0, #8
   1292c:	f001 f95e 	bl	13bec <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   12930:	4b3b      	ldr	r3, [pc, #236]	; (12a20 <prepare_cb+0x11c>)
   12932:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   12934:	a801      	add	r0, sp, #4
   12936:	f001 f93f 	bl	13bb8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1293a:	493a      	ldr	r1, [pc, #232]	; (12a24 <prepare_cb+0x120>)
   1293c:	f240 605b 	movw	r0, #1627	; 0x65b
   12940:	f001 f9e0 	bl	13d04 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   12944:	7b23      	ldrb	r3, [r4, #12]
   12946:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1294a:	f362 1306 	bfi	r3, r2, #4, #3
   1294e:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   12950:	4620      	mov	r0, r4
   12952:	f7ff ff69 	bl	12828 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   12956:	f7ff f91d 	bl	11b94 <ull_filter_lll_rl_enabled>
   1295a:	bb50      	cbnz	r0, 129b2 <prepare_cb+0xae>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1295c:	7b63      	ldrb	r3, [r4, #13]
   1295e:	079b      	lsls	r3, r3, #30
   12960:	d134      	bne.n	129cc <prepare_cb+0xc8>
	evt = HDR_LLL2EVT(lll);
   12962:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   12964:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   12966:	4638      	mov	r0, r7
   12968:	f7ff fc36 	bl	121d8 <lll_evt_offset_get>
   1296c:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1296e:	6872      	ldr	r2, [r6, #4]
   12970:	f105 0109 	add.w	r1, r5, #9
   12974:	2001      	movs	r0, #1
   12976:	f001 fa7b 	bl	13e70 <radio_tmr_start>
	radio_tmr_end_capture();
   1297a:	f001 fb4d 	bl	14018 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1297e:	4620      	mov	r0, r4
   12980:	f7fa fe5e 	bl	d640 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   12984:	1c81      	adds	r1, r0, #2
   12986:	462a      	mov	r2, r5
   12988:	b2c9      	uxtb	r1, r1
   1298a:	4638      	mov	r0, r7
   1298c:	f7ff fc32 	bl	121f4 <lll_preempt_calc>
   12990:	b930      	cbnz	r0, 129a0 <prepare_cb+0x9c>
		ret = lll_prepare_done(lll);
   12992:	4620      	mov	r0, r4
   12994:	f7ff fbc6 	bl	12124 <lll_prepare_done>
		LL_ASSERT(!ret);
   12998:	b9d0      	cbnz	r0, 129d0 <prepare_cb+0xcc>
}
   1299a:	2000      	movs	r0, #0
   1299c:	b003      	add	sp, #12
   1299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   129a0:	4821      	ldr	r0, [pc, #132]	; (12a28 <prepare_cb+0x124>)
   129a2:	4621      	mov	r1, r4
   129a4:	f001 f896 	bl	13ad4 <radio_isr_set>
		radio_disable();
   129a8:	f001 f96a 	bl	13c80 <radio_disable>
}
   129ac:	2000      	movs	r0, #0
   129ae:	b003      	add	sp, #12
   129b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   129b2:	7b60      	ldrb	r0, [r4, #13]
   129b4:	f010 0003 	ands.w	r0, r0, #3
   129b8:	bf18      	it	ne
   129ba:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   129bc:	f7ff f8a0 	bl	11b00 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   129c0:	7841      	ldrb	r1, [r0, #1]
   129c2:	1c82      	adds	r2, r0, #2
   129c4:	7800      	ldrb	r0, [r0, #0]
   129c6:	f001 f9f9 	bl	13dbc <radio_filter_configure>
   129ca:	e7ca      	b.n	12962 <prepare_cb+0x5e>
		struct lll_filter *wl = ull_filter_lll_get(true);
   129cc:	2001      	movs	r0, #1
   129ce:	e7f5      	b.n	129bc <prepare_cb+0xb8>
		LL_ASSERT(!ret);
   129d0:	4a16      	ldr	r2, [pc, #88]	; (12a2c <prepare_cb+0x128>)
   129d2:	4917      	ldr	r1, [pc, #92]	; (12a30 <prepare_cb+0x12c>)
   129d4:	4817      	ldr	r0, [pc, #92]	; (12a34 <prepare_cb+0x130>)
   129d6:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
   129da:	f00b f988 	bl	1dcee <printk>
   129de:	4040      	eors	r0, r0
   129e0:	f380 8811 	msr	BASEPRI, r0
   129e4:	f04f 0003 	mov.w	r0, #3
   129e8:	df02      	svc	2
}
   129ea:	2000      	movs	r0, #0
   129ec:	b003      	add	sp, #12
   129ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   129f0:	f7ff fd16 	bl	12420 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   129f4:	2800      	cmp	r0, #0
   129f6:	db05      	blt.n	12a04 <prepare_cb+0x100>
		lll_done(NULL);
   129f8:	2000      	movs	r0, #0
   129fa:	f7ff fb95 	bl	12128 <lll_done>
}
   129fe:	2000      	movs	r0, #0
   12a00:	b003      	add	sp, #12
   12a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   12a04:	4a09      	ldr	r2, [pc, #36]	; (12a2c <prepare_cb+0x128>)
   12a06:	490c      	ldr	r1, [pc, #48]	; (12a38 <prepare_cb+0x134>)
   12a08:	480a      	ldr	r0, [pc, #40]	; (12a34 <prepare_cb+0x130>)
   12a0a:	f240 1391 	movw	r3, #401	; 0x191
   12a0e:	f00b f96e 	bl	1dcee <printk>
   12a12:	4040      	eors	r0, r0
   12a14:	f380 8811 	msr	BASEPRI, r0
   12a18:	f04f 0003 	mov.w	r0, #3
   12a1c:	df02      	svc	2
   12a1e:	e7eb      	b.n	129f8 <prepare_cb+0xf4>
   12a20:	8e89bed6 	.word	0x8e89bed6
   12a24:	00555555 	.word	0x00555555
   12a28:	0001246d 	.word	0x0001246d
   12a2c:	00027ec8 	.word	0x00027ec8
   12a30:	00027720 	.word	0x00027720
   12a34:	000275f0 	.word	0x000275f0
   12a38:	00027eac 	.word	0x00027eac

00012a3c <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   12a3c:	68c3      	ldr	r3, [r0, #12]
{
   12a3e:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   12a40:	681e      	ldr	r6, [r3, #0]
{
   12a42:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   12a44:	f7f7 fe42 	bl	a6cc <ticker_ticks_now_get>
   12a48:	4605      	mov	r5, r0
   12a4a:	4630      	mov	r0, r6
   12a4c:	f7ff fbc4 	bl	121d8 <lll_evt_offset_get>
	p->remainder = 0;
   12a50:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   12a52:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   12a54:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   12a58:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   12a5a:	4620      	mov	r0, r4
}
   12a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   12a60:	f7ff bf50 	b.w	12904 <prepare_cb>

00012a64 <isr_done>:
{
   12a64:	b510      	push	{r4, lr}
   12a66:	4604      	mov	r4, r0
	lll_isr_status_reset();
   12a68:	f7ff fc2c 	bl	122c4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   12a6c:	7b23      	ldrb	r3, [r4, #12]
   12a6e:	f003 0271 	and.w	r2, r3, #113	; 0x71
   12a72:	2a01      	cmp	r2, #1
   12a74:	d105      	bne.n	12a82 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   12a76:	f3c3 0242 	ubfx	r2, r3, #1, #3
   12a7a:	f362 1306 	bfi	r3, r2, #4, #3
   12a7e:	7323      	strb	r3, [r4, #12]
   12a80:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr) {
   12a82:	f013 0f70 	tst.w	r3, #112	; 0x70
   12a86:	d106      	bne.n	12a96 <isr_done+0x32>
	radio_filter_disable();
   12a88:	f001 f9b4 	bl	13df4 <radio_filter_disable>
	lll_isr_cleanup(param);
   12a8c:	4620      	mov	r0, r4
}
   12a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   12a92:	f7ff bc25 	b.w	122e0 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   12a96:	4620      	mov	r0, r4
   12a98:	f7ff fec6 	bl	12828 <chan_prepare>
		radio_tx_enable();
   12a9c:	f001 f8ea 	bl	13c74 <radio_tx_enable>
}
   12aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   12aa4:	f001 bab8 	b.w	14018 <radio_tmr_end_capture>

00012aa8 <lll_adv_prepare>:
{
   12aa8:	b510      	push	{r4, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   12aae:	f7ff fc9f 	bl	123f0 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   12ab2:	2800      	cmp	r0, #0
   12ab4:	db1a      	blt.n	12aec <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   12ab6:	4a14      	ldr	r2, [pc, #80]	; (12b08 <lll_adv_prepare+0x60>)
   12ab8:	4914      	ldr	r1, [pc, #80]	; (12b0c <lll_adv_prepare+0x64>)
   12aba:	4815      	ldr	r0, [pc, #84]	; (12b10 <lll_adv_prepare+0x68>)
   12abc:	9400      	str	r4, [sp, #0]
   12abe:	2300      	movs	r3, #0
   12ac0:	f7ff faa4 	bl	1200c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   12ac4:	b108      	cbz	r0, 12aca <lll_adv_prepare+0x22>
   12ac6:	3077      	adds	r0, #119	; 0x77
   12ac8:	d101      	bne.n	12ace <lll_adv_prepare+0x26>
}
   12aca:	b002      	add	sp, #8
   12acc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   12ace:	4a11      	ldr	r2, [pc, #68]	; (12b14 <lll_adv_prepare+0x6c>)
   12ad0:	4911      	ldr	r1, [pc, #68]	; (12b18 <lll_adv_prepare+0x70>)
   12ad2:	4812      	ldr	r0, [pc, #72]	; (12b1c <lll_adv_prepare+0x74>)
   12ad4:	f240 132d 	movw	r3, #301	; 0x12d
   12ad8:	f00b f909 	bl	1dcee <printk>
   12adc:	4040      	eors	r0, r0
   12ade:	f380 8811 	msr	BASEPRI, r0
   12ae2:	f04f 0003 	mov.w	r0, #3
   12ae6:	df02      	svc	2
}
   12ae8:	b002      	add	sp, #8
   12aea:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   12aec:	4a09      	ldr	r2, [pc, #36]	; (12b14 <lll_adv_prepare+0x6c>)
   12aee:	490c      	ldr	r1, [pc, #48]	; (12b20 <lll_adv_prepare+0x78>)
   12af0:	480a      	ldr	r0, [pc, #40]	; (12b1c <lll_adv_prepare+0x74>)
   12af2:	f44f 7395 	mov.w	r3, #298	; 0x12a
   12af6:	f00b f8fa 	bl	1dcee <printk>
   12afa:	4040      	eors	r0, r0
   12afc:	f380 8811 	msr	BASEPRI, r0
   12b00:	f04f 0003 	mov.w	r0, #3
   12b04:	df02      	svc	2
   12b06:	e7d6      	b.n	12ab6 <lll_adv_prepare+0xe>
   12b08:	00012905 	.word	0x00012905
   12b0c:	000125ad 	.word	0x000125ad
   12b10:	00012539 	.word	0x00012539
   12b14:	00027ec8 	.word	0x00027ec8
   12b18:	00027f34 	.word	0x00027f34
   12b1c:	000275f0 	.word	0x000275f0
   12b20:	00027eac 	.word	0x00027eac

00012b24 <lll_adv_scan_req_check>:
{
   12b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   12b28:	7b45      	ldrb	r5, [r0, #13]
{
   12b2a:	f89d 8020 	ldrb.w	r8, [sp, #32]
   12b2e:	4617      	mov	r7, r2
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   12b30:	07ea      	lsls	r2, r5, #31
{
   12b32:	4689      	mov	r9, r1
   12b34:	461e      	mov	r6, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   12b36:	d50a      	bpl.n	12b4e <lll_adv_scan_req_check+0x2a>
		(((lll->filter_policy & 0x01) != 0) &&
   12b38:	f1b8 0f00 	cmp.w	r8, #0
   12b3c:	d017      	beq.n	12b6e <lll_adv_scan_req_check+0x4a>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   12b3e:	f899 3000 	ldrb.w	r3, [r9]
   12b42:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   12b46:	d019      	beq.n	12b7c <lll_adv_scan_req_check+0x58>
{
   12b48:	2000      	movs	r0, #0
}
   12b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12b4e:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   12b50:	f811 0b02 	ldrb.w	r0, [r1], #2
   12b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12b56:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12b5a:	f7fe ffdd 	bl	11b18 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   12b5e:	2800      	cmp	r0, #0
   12b60:	d1ed      	bne.n	12b3e <lll_adv_scan_req_check+0x1a>
		(((lll->filter_policy & 0x01) != 0) &&
   12b62:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   12b64:	07db      	lsls	r3, r3, #31
   12b66:	d5ef      	bpl.n	12b48 <lll_adv_scan_req_check+0x24>
		(((lll->filter_policy & 0x01) != 0) &&
   12b68:	f1b8 0f00 	cmp.w	r8, #0
   12b6c:	d1e7      	bne.n	12b3e <lll_adv_scan_req_check+0x1a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   12b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12b70:	7818      	ldrb	r0, [r3, #0]
   12b72:	f7fe ff95 	bl	11aa0 <ull_filter_lll_irk_whitelisted>
   12b76:	2800      	cmp	r0, #0
   12b78:	d1e1      	bne.n	12b3e <lll_adv_scan_req_check+0x1a>
   12b7a:	e7e5      	b.n	12b48 <lll_adv_scan_req_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   12b7c:	f109 0108 	add.w	r1, r9, #8
   12b80:	4630      	mov	r0, r6
   12b82:	2206      	movs	r2, #6
   12b84:	f013 ff53 	bl	26a2e <memcmp>
	return (tx_addr == sr->rx_addr) &&
   12b88:	fab0 f080 	clz	r0, r0
   12b8c:	0940      	lsrs	r0, r0, #5
}
   12b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12b92:	bf00      	nop

00012b94 <isr_rx>:
{
   12b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b98:	b084      	sub	sp, #16
   12b9a:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   12b9c:	f001 f89e 	bl	13cdc <radio_is_done>
	if (trx_done) {
   12ba0:	f010 0fff 	tst.w	r0, #255	; 0xff
   12ba4:	d10a      	bne.n	12bbc <isr_rx+0x28>
	lll_isr_status_reset();
   12ba6:	f7ff fb8d 	bl	122c4 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   12baa:	48bd      	ldr	r0, [pc, #756]	; (12ea0 <isr_rx+0x30c>)
   12bac:	4629      	mov	r1, r5
   12bae:	f000 ff91 	bl	13ad4 <radio_isr_set>
	radio_disable();
   12bb2:	f001 f865 	bl	13c80 <radio_disable>
}
   12bb6:	b004      	add	sp, #16
   12bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = radio_crc_is_valid();
   12bbc:	f001 f8ae 	bl	13d1c <radio_crc_is_valid>
   12bc0:	4607      	mov	r7, r0
		devmatch_ok = radio_filter_has_match();
   12bc2:	f001 f929 	bl	13e18 <radio_filter_has_match>
   12bc6:	4606      	mov	r6, r0
		devmatch_id = radio_filter_match_get();
   12bc8:	f001 f930 	bl	13e2c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   12bcc:	f001 fb12 	bl	141f4 <radio_ar_has_match>
   12bd0:	4604      	mov	r4, r0
		irkmatch_id = radio_ar_match_get();
   12bd2:	f001 faf3 	bl	141bc <radio_ar_match_get>
   12bd6:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   12bd8:	f001 f8e6 	bl	13da8 <radio_rssi_is_ready>
	lll_isr_status_reset();
   12bdc:	f7ff fb72 	bl	122c4 <lll_isr_status_reset>
	if (crc_ok) {
   12be0:	f017 0fff 	tst.w	r7, #255	; 0xff
   12be4:	d0e1      	beq.n	12baa <isr_rx+0x16>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   12be6:	f014 07ff 	ands.w	r7, r4, #255	; 0xff
   12bea:	f040 8094 	bne.w	12d16 <isr_rx+0x182>
   12bee:	20ff      	movs	r0, #255	; 0xff
   12bf0:	f88d 000f 	strb.w	r0, [sp, #15]
	pdu_rx = (void *)radio_pkt_scratch_get();
   12bf4:	f001 f8a0 	bl	13d38 <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   12bf8:	7c2a      	ldrb	r2, [r5, #16]
   12bfa:	4604      	mov	r4, r0
   12bfc:	eb05 0282 	add.w	r2, r5, r2, lsl #2
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   12c00:	7800      	ldrb	r0, [r0, #0]
   12c02:	f8d2 8014 	ldr.w	r8, [r2, #20]
   12c06:	f000 020f 	and.w	r2, r0, #15
   12c0a:	2a03      	cmp	r2, #3
		devmatch_ok = radio_filter_has_match();
   12c0c:	b2f6      	uxtb	r6, r6
	addr = pdu_adv->adv_ind.addr;
   12c0e:	f108 0902 	add.w	r9, r8, #2
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   12c12:	f000 8093 	beq.w	12d3c <isr_rx+0x1a8>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   12c16:	2a05      	cmp	r2, #5
   12c18:	d1c7      	bne.n	12baa <isr_rx+0x16>
   12c1a:	7863      	ldrb	r3, [r4, #1]
   12c1c:	2b22      	cmp	r3, #34	; 0x22
   12c1e:	d1c4      	bne.n	12baa <isr_rx+0x16>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, uint8_t devmatch_ok,
				   uint8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   12c20:	f898 2000 	ldrb.w	r2, [r8]
   12c24:	f002 020f 	and.w	r2, r2, #15
   12c28:	2a01      	cmp	r2, #1
   12c2a:	f000 80c9 	beq.w	12dc0 <isr_rx+0x22c>
		       isr_rx_ci_adva_check(adv, ci) &&
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x02) == 0) &&
   12c2e:	7b6b      	ldrb	r3, [r5, #13]
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   12c30:	0799      	lsls	r1, r3, #30
   12c32:	d575      	bpl.n	12d20 <isr_rx+0x18c>
		(((lll->filter_policy & 0x02) != 0) &&
   12c34:	2e00      	cmp	r6, #0
   12c36:	f000 80bb 	beq.w	12db0 <isr_rx+0x21c>
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
	return (adv->tx_addr == ci->rx_addr) &&
   12c3a:	f898 3000 	ldrb.w	r3, [r8]
   12c3e:	7821      	ldrb	r1, [r4, #0]
   12c40:	f3c3 1280 	ubfx	r2, r3, #6, #1
   12c44:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   12c48:	d1af      	bne.n	12baa <isr_rx+0x16>
   12c4a:	f003 030f 	and.w	r3, r3, #15
   12c4e:	2b01      	cmp	r3, #1
   12c50:	f104 0608 	add.w	r6, r4, #8
   12c54:	f000 80e1 	beq.w	12e1a <isr_rx+0x286>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   12c58:	4631      	mov	r1, r6
   12c5a:	4648      	mov	r0, r9
   12c5c:	2206      	movs	r2, #6
   12c5e:	f013 fee6 	bl	26a2e <memcmp>
			 BDADDR_SIZE)) ||
   12c62:	fab0 f080 	clz	r0, r0
   12c66:	0940      	lsrs	r0, r0, #5
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   12c68:	2800      	cmp	r0, #0
   12c6a:	d09e      	beq.n	12baa <isr_rx+0x16>
				   &rl_idx) &&
   12c6c:	68ab      	ldr	r3, [r5, #8]
   12c6e:	2b00      	cmp	r3, #0
   12c70:	d09b      	beq.n	12baa <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   12c72:	2004      	movs	r0, #4
   12c74:	f7fa f8a8 	bl	cdc8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   12c78:	2800      	cmp	r0, #0
   12c7a:	d096      	beq.n	12baa <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   12c7c:	4889      	ldr	r0, [pc, #548]	; (12ea4 <isr_rx+0x310>)
   12c7e:	4629      	mov	r1, r5
   12c80:	f000 ff28 	bl	13ad4 <radio_isr_set>
		radio_disable();
   12c84:	f000 fffc 	bl	13c80 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   12c88:	f001 f81e 	bl	13cc8 <radio_is_ready>
   12c8c:	2800      	cmp	r0, #0
   12c8e:	f040 8081 	bne.w	12d94 <isr_rx+0x200>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   12c92:	792b      	ldrb	r3, [r5, #4]

	hdr->is_stop = 1U;
   12c94:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   12c98:	07db      	lsls	r3, r3, #31
   12c9a:	712a      	strb	r2, [r5, #4]
   12c9c:	d46c      	bmi.n	12d78 <isr_rx+0x1e4>
		rx = ull_pdu_rx_alloc();
   12c9e:	f7fa f8b1 	bl	ce04 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   12ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12ca6:	210f      	movs	r1, #15
		rx->hdr.handle = 0xffff;
   12ca8:	80c2      	strh	r2, [r0, #6]
		rx = ull_pdu_rx_alloc();
   12caa:	4606      	mov	r6, r0
   12cac:	4623      	mov	r3, r4
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12cae:	7101      	strb	r1, [r0, #4]
   12cb0:	f100 021c 	add.w	r2, r0, #28
   12cb4:	f104 0e20 	add.w	lr, r4, #32
   12cb8:	681c      	ldr	r4, [r3, #0]
   12cba:	6858      	ldr	r0, [r3, #4]
   12cbc:	6899      	ldr	r1, [r3, #8]
   12cbe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   12cc2:	f8c2 c00c 	str.w	ip, [r2, #12]
   12cc6:	3310      	adds	r3, #16
   12cc8:	4573      	cmp	r3, lr
   12cca:	6014      	str	r4, [r2, #0]
   12ccc:	6050      	str	r0, [r2, #4]
   12cce:	6091      	str	r1, [r2, #8]
   12cd0:	f102 0210 	add.w	r2, r2, #16
   12cd4:	d1f0      	bne.n	12cb8 <isr_rx+0x124>
   12cd6:	681b      	ldr	r3, [r3, #0]
   12cd8:	6013      	str	r3, [r2, #0]
		ftr->param = lll;
   12cda:	60b5      	str	r5, [r6, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   12cdc:	f001 f948 	bl	13f70 <radio_tmr_start_get>
   12ce0:	6130      	str	r0, [r6, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   12ce2:	f001 f9a1 	bl	14028 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   12ce6:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   12ce8:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   12cea:	4608      	mov	r0, r1
   12cec:	f000 ffb8 	bl	13c60 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   12cf0:	1a24      	subs	r4, r4, r0
   12cf2:	6174      	str	r4, [r6, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   12cf4:	2f00      	cmp	r7, #0
   12cf6:	d03d      	beq.n	12d74 <isr_rx+0x1e0>
   12cf8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12cfc:	76b3      	strb	r3, [r6, #26]
			ftr->extra = ull_pdu_rx_alloc();
   12cfe:	f7fa f881 	bl	ce04 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   12d02:	4631      	mov	r1, r6
			ftr->extra = ull_pdu_rx_alloc();
   12d04:	60f0      	str	r0, [r6, #12]
		ull_rx_put(rx->hdr.link, rx);
   12d06:	6830      	ldr	r0, [r6, #0]
   12d08:	f7fa f894 	bl	ce34 <ull_rx_put>
		ull_rx_sched();
   12d0c:	f7fa f8a2 	bl	ce54 <ull_rx_sched>
}
   12d10:	b004      	add	sp, #16
   12d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   12d16:	fa5f f088 	uxtb.w	r0, r8
   12d1a:	f7fe fe6f 	bl	119fc <ull_filter_lll_rl_irk_idx>
   12d1e:	e767      	b.n	12bf0 <isr_rx+0x5c>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   12d20:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12d24:	f10d 020f 	add.w	r2, sp, #15
   12d28:	1ca1      	adds	r1, r4, #2
   12d2a:	f7fe fef5 	bl	11b18 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   12d2e:	2800      	cmp	r0, #0
   12d30:	d183      	bne.n	12c3a <isr_rx+0xa6>
		(((lll->filter_policy & 0x02) != 0) &&
   12d32:	7b6b      	ldrb	r3, [r5, #13]
						rl_idx)) ||
   12d34:	079a      	lsls	r2, r3, #30
   12d36:	f57f af38 	bpl.w	12baa <isr_rx+0x16>
   12d3a:	e77b      	b.n	12c34 <isr_rx+0xa0>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   12d3c:	7863      	ldrb	r3, [r4, #1]
   12d3e:	2b0c      	cmp	r3, #12
   12d40:	f47f af33 	bne.w	12baa <isr_rx+0x16>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   12d44:	f898 2000 	ldrb.w	r2, [r8]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   12d48:	f002 030f 	and.w	r3, r2, #15
   12d4c:	2b01      	cmp	r3, #1
   12d4e:	f43f af2c 	beq.w	12baa <isr_rx+0x16>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   12d52:	f10d 030f 	add.w	r3, sp, #15
   12d56:	9301      	str	r3, [sp, #4]
   12d58:	9600      	str	r6, [sp, #0]
   12d5a:	f3c2 1280 	ubfx	r2, r2, #6, #1
   12d5e:	464b      	mov	r3, r9
   12d60:	4621      	mov	r1, r4
   12d62:	4628      	mov	r0, r5
   12d64:	f7ff fede 	bl	12b24 <lll_adv_scan_req_check>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   12d68:	2800      	cmp	r0, #0
   12d6a:	d15f      	bne.n	12e2c <isr_rx+0x298>
   12d6c:	7820      	ldrb	r0, [r4, #0]
   12d6e:	f000 020f 	and.w	r2, r0, #15
   12d72:	e750      	b.n	12c16 <isr_rx+0x82>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   12d74:	23ff      	movs	r3, #255	; 0xff
   12d76:	e7c1      	b.n	12cfc <isr_rx+0x168>
		LL_ASSERT(!ret);
   12d78:	4a4b      	ldr	r2, [pc, #300]	; (12ea8 <isr_rx+0x314>)
   12d7a:	494c      	ldr	r1, [pc, #304]	; (12eac <isr_rx+0x318>)
   12d7c:	484c      	ldr	r0, [pc, #304]	; (12eb0 <isr_rx+0x31c>)
   12d7e:	f240 33ee 	movw	r3, #1006	; 0x3ee
   12d82:	f00a ffb4 	bl	1dcee <printk>
   12d86:	4040      	eors	r0, r0
   12d88:	f380 8811 	msr	BASEPRI, r0
   12d8c:	f04f 0003 	mov.w	r0, #3
   12d90:	df02      	svc	2
   12d92:	e784      	b.n	12c9e <isr_rx+0x10a>
		LL_ASSERT(!radio_is_ready());
   12d94:	4a44      	ldr	r2, [pc, #272]	; (12ea8 <isr_rx+0x314>)
   12d96:	4947      	ldr	r1, [pc, #284]	; (12eb4 <isr_rx+0x320>)
   12d98:	4845      	ldr	r0, [pc, #276]	; (12eb0 <isr_rx+0x31c>)
   12d9a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
   12d9e:	f00a ffa6 	bl	1dcee <printk>
   12da2:	4040      	eors	r0, r0
   12da4:	f380 8811 	msr	BASEPRI, r0
   12da8:	f04f 0003 	mov.w	r0, #3
   12dac:	df02      	svc	2
   12dae:	e770      	b.n	12c92 <isr_rx+0xfe>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   12db0:	f89d 000f 	ldrb.w	r0, [sp, #15]
   12db4:	f7fe fe74 	bl	11aa0 <ull_filter_lll_irk_whitelisted>
   12db8:	2800      	cmp	r0, #0
   12dba:	f47f af3e 	bne.w	12c3a <isr_rx+0xa6>
   12dbe:	e6f4      	b.n	12baa <isr_rx+0x16>
						      ci->connect_ind.init_addr,
   12dc0:	1ca6      	adds	r6, r4, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   12dc2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12dc6:	4631      	mov	r1, r6
   12dc8:	f10d 020f 	add.w	r2, sp, #15
   12dcc:	f7fe fea4 	bl	11b18 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(adv, ci) &&
   12dd0:	2800      	cmp	r0, #0
   12dd2:	f43f aeea 	beq.w	12baa <isr_rx+0x16>
	return (adv->tx_addr == ci->rx_addr) &&
   12dd6:	f898 3000 	ldrb.w	r3, [r8]
   12dda:	7821      	ldrb	r1, [r4, #0]
   12ddc:	f3c3 1280 	ubfx	r2, r3, #6, #1
   12de0:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   12de4:	f47f aee1 	bne.w	12baa <isr_rx+0x16>
   12de8:	f003 030f 	and.w	r3, r3, #15
   12dec:	2b01      	cmp	r3, #1
   12dee:	f104 0a08 	add.w	sl, r4, #8
   12df2:	d04d      	beq.n	12e90 <isr_rx+0x2fc>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   12df4:	4651      	mov	r1, sl
   12df6:	4648      	mov	r0, r9
   12df8:	2206      	movs	r2, #6
   12dfa:	f013 fe18 	bl	26a2e <memcmp>
			 BDADDR_SIZE)) ||
   12dfe:	2800      	cmp	r0, #0
   12e00:	f47f aed3 	bne.w	12baa <isr_rx+0x16>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
   12e04:	f89d 000f 	ldrb.w	r0, [sp, #15]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   12e08:	28ff      	cmp	r0, #255	; 0xff
   12e0a:	d02e      	beq.n	12e6a <isr_rx+0x2d6>
   12e0c:	7bab      	ldrb	r3, [r5, #14]
   12e0e:	2bff      	cmp	r3, #255	; 0xff
   12e10:	d02b      	beq.n	12e6a <isr_rx+0x2d6>
		return rl_idx == lll->rl_idx;
   12e12:	1ac6      	subs	r6, r0, r3
   12e14:	4270      	negs	r0, r6
   12e16:	4170      	adcs	r0, r6
   12e18:	e726      	b.n	12c68 <isr_rx+0xd4>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   12e1a:	2206      	movs	r2, #6
   12e1c:	4631      	mov	r1, r6
   12e1e:	4648      	mov	r0, r9
   12e20:	f013 fe05 	bl	26a2e <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   12e24:	2800      	cmp	r0, #0
   12e26:	f43f af21 	beq.w	12c6c <isr_rx+0xd8>
   12e2a:	e715      	b.n	12c58 <isr_rx+0xc4>
		radio_isr_set(isr_done, lll);
   12e2c:	4629      	mov	r1, r5
   12e2e:	481c      	ldr	r0, [pc, #112]	; (12ea0 <isr_rx+0x30c>)
   12e30:	f000 fe50 	bl	13ad4 <radio_isr_set>
		radio_switch_complete_and_disable();
   12e34:	f000 ffa2 	bl	13d7c <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   12e38:	7f2b      	ldrb	r3, [r5, #28]
   12e3a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   12e3e:	6a28      	ldr	r0, [r5, #32]
   12e40:	f000 ff08 	bl	13c54 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   12e44:	f000 ff40 	bl	13cc8 <radio_is_ready>
   12e48:	2800      	cmp	r0, #0
   12e4a:	f43f aeb4 	beq.w	12bb6 <isr_rx+0x22>
   12e4e:	4a16      	ldr	r2, [pc, #88]	; (12ea8 <isr_rx+0x314>)
   12e50:	4918      	ldr	r1, [pc, #96]	; (12eb4 <isr_rx+0x320>)
   12e52:	4817      	ldr	r0, [pc, #92]	; (12eb0 <isr_rx+0x31c>)
   12e54:	f240 33a3 	movw	r3, #931	; 0x3a3
   12e58:	f00a ff49 	bl	1dcee <printk>
   12e5c:	4040      	eors	r0, r0
   12e5e:	f380 8811 	msr	BASEPRI, r0
   12e62:	f04f 0003 	mov.w	r0, #3
   12e66:	df02      	svc	2
		if (!err) {
   12e68:	e6a5      	b.n	12bb6 <isr_rx+0x22>
	return (adv->rx_addr == ci->tx_addr) &&
   12e6a:	7823      	ldrb	r3, [r4, #0]
   12e6c:	f898 2000 	ldrb.w	r2, [r8]
   12e70:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12e74:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   12e78:	f47f ae97 	bne.w	12baa <isr_rx+0x16>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   12e7c:	4631      	mov	r1, r6
   12e7e:	f108 0008 	add.w	r0, r8, #8
   12e82:	2206      	movs	r2, #6
   12e84:	f013 fdd3 	bl	26a2e <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   12e88:	fab0 f080 	clz	r0, r0
   12e8c:	0940      	lsrs	r0, r0, #5
		       isr_rx_ci_adva_check(adv, ci) &&
   12e8e:	e6eb      	b.n	12c68 <isr_rx+0xd4>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   12e90:	2206      	movs	r2, #6
   12e92:	4651      	mov	r1, sl
   12e94:	4648      	mov	r0, r9
   12e96:	f013 fdca 	bl	26a2e <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   12e9a:	2800      	cmp	r0, #0
   12e9c:	d0b2      	beq.n	12e04 <isr_rx+0x270>
   12e9e:	e7a9      	b.n	12df4 <isr_rx+0x260>
   12ea0:	00012a65 	.word	0x00012a65
   12ea4:	0001246d 	.word	0x0001246d
   12ea8:	00027ec8 	.word	0x00027ec8
   12eac:	00027720 	.word	0x00027720
   12eb0:	000275f0 	.word	0x000275f0
   12eb4:	00027f14 	.word	0x00027f14

00012eb8 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   12eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12eba:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   12ebc:	f7ff fa02 	bl	122c4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   12ec0:	f7fa f83e 	bl	cf40 <ull_event_done_extra_get>
	LL_ASSERT(e);
   12ec4:	4604      	mov	r4, r0
   12ec6:	2800      	cmp	r0, #0
   12ec8:	d033      	beq.n	12f32 <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   12eca:	4b21      	ldr	r3, [pc, #132]	; (12f50 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   12ecc:	4921      	ldr	r1, [pc, #132]	; (12f54 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   12ece:	4a22      	ldr	r2, [pc, #136]	; (12f58 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   12ed0:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   12ed2:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   12ed4:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   12ed6:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   12ed8:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   12eda:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   12edc:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   12ede:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   12ee0:	b11b      	cbz	r3, 12eea <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   12ee2:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   12ee6:	2b00      	cmp	r3, #0
   12ee8:	db04      	blt.n	12ef4 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   12eea:	4628      	mov	r0, r5
}
   12eec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   12ef0:	f7ff b9f6 	b.w	122e0 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   12ef4:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   12ef8:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   12efc:	2b02      	cmp	r3, #2
   12efe:	d016      	beq.n	12f2e <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   12f00:	2b04      	cmp	r3, #4
   12f02:	bf14      	ite	ne
   12f04:	2728      	movne	r7, #40	; 0x28
   12f06:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   12f0a:	f001 f879 	bl	14000 <radio_tmr_aa_restore>
   12f0e:	4606      	mov	r6, r0
   12f10:	f001 f87c 	bl	1400c <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   12f14:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   12f16:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   12f18:	2300      	movs	r3, #0
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   12f1a:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->drift.start_to_address_actual_us =
   12f1e:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   12f20:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   12f22:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   12f24:	63eb      	str	r3, [r5, #60]	; 0x3c
}
   12f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   12f2a:	f7ff b9d9 	b.w	122e0 <lll_isr_cleanup>
	switch (phy) {
   12f2e:	2718      	movs	r7, #24
   12f30:	e7eb      	b.n	12f0a <isr_done+0x52>
	LL_ASSERT(e);
   12f32:	4a0a      	ldr	r2, [pc, #40]	; (12f5c <isr_done+0xa4>)
   12f34:	490a      	ldr	r1, [pc, #40]	; (12f60 <isr_done+0xa8>)
   12f36:	480b      	ldr	r0, [pc, #44]	; (12f64 <isr_done+0xac>)
   12f38:	f240 236d 	movw	r3, #621	; 0x26d
   12f3c:	f00a fed7 	bl	1dcee <printk>
   12f40:	4040      	eors	r0, r0
   12f42:	f380 8811 	msr	BASEPRI, r0
   12f46:	f04f 0003 	mov.w	r0, #3
   12f4a:	df02      	svc	2
   12f4c:	e7bd      	b.n	12eca <isr_done+0x12>
   12f4e:	bf00      	nop
   12f50:	20002f32 	.word	0x20002f32
   12f54:	20002f82 	.word	0x20002f82
   12f58:	20002f83 	.word	0x20002f83
   12f5c:	00027f48 	.word	0x00027f48
   12f60:	000278bc 	.word	0x000278bc
   12f64:	000275f0 	.word	0x000275f0

00012f68 <lll_conn_init>:
{
   12f68:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   12f6a:	f000 fee1 	bl	13d30 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12f6e:	7803      	ldrb	r3, [r0, #0]
   12f70:	2201      	movs	r2, #1
   12f72:	f362 0301 	bfi	r3, r2, #0, #2
   12f76:	7003      	strb	r3, [r0, #0]
}
   12f78:	2000      	movs	r0, #0
   12f7a:	bd08      	pop	{r3, pc}

00012f7c <lll_conn_reset>:
}
   12f7c:	2000      	movs	r0, #0
   12f7e:	4770      	bx	lr

00012f80 <lll_conn_flush>:
}
   12f80:	4770      	bx	lr
   12f82:	bf00      	nop

00012f84 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   12f84:	4805      	ldr	r0, [pc, #20]	; (12f9c <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   12f86:	4906      	ldr	r1, [pc, #24]	; (12fa0 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   12f88:	4a06      	ldr	r2, [pc, #24]	; (12fa4 <lll_conn_prepare_reset+0x20>)
{
   12f8a:	b410      	push	{r4}
	trx_cnt = 0U;
   12f8c:	2300      	movs	r3, #0
   12f8e:	4c06      	ldr	r4, [pc, #24]	; (12fa8 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   12f90:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   12f92:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   12f94:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   12f96:	8023      	strh	r3, [r4, #0]
}
   12f98:	bc10      	pop	{r4}
   12f9a:	4770      	bx	lr
   12f9c:	20002f82 	.word	0x20002f82
   12fa0:	20002f81 	.word	0x20002f81
   12fa4:	20002f83 	.word	0x20002f83
   12fa8:	20002f32 	.word	0x20002f32

00012fac <lll_conn_abort_cb>:
{
   12fac:	b510      	push	{r4, lr}
	if (!prepare_param) {
   12fae:	b1d0      	cbz	r0, 12fe6 <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   12fb0:	460c      	mov	r4, r1
   12fb2:	f7ff fa35 	bl	12420 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   12fb6:	2800      	cmp	r0, #0
   12fb8:	db04      	blt.n	12fc4 <lll_conn_abort_cb+0x18>
	lll_done(param);
   12fba:	4620      	mov	r0, r4
}
   12fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   12fc0:	f7ff b8b2 	b.w	12128 <lll_done>
	LL_ASSERT(err >= 0);
   12fc4:	4a0b      	ldr	r2, [pc, #44]	; (12ff4 <lll_conn_abort_cb+0x48>)
   12fc6:	490c      	ldr	r1, [pc, #48]	; (12ff8 <lll_conn_abort_cb+0x4c>)
   12fc8:	480c      	ldr	r0, [pc, #48]	; (12ffc <lll_conn_abort_cb+0x50>)
   12fca:	239b      	movs	r3, #155	; 0x9b
   12fcc:	f00a fe8f 	bl	1dcee <printk>
   12fd0:	4040      	eors	r0, r0
   12fd2:	f380 8811 	msr	BASEPRI, r0
   12fd6:	f04f 0003 	mov.w	r0, #3
   12fda:	df02      	svc	2
	lll_done(param);
   12fdc:	4620      	mov	r0, r4
}
   12fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   12fe2:	f7ff b8a1 	b.w	12128 <lll_done>
		radio_isr_set(isr_done, param);
   12fe6:	4806      	ldr	r0, [pc, #24]	; (13000 <lll_conn_abort_cb+0x54>)
   12fe8:	f000 fd74 	bl	13ad4 <radio_isr_set>
}
   12fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   12ff0:	f000 be46 	b.w	13c80 <radio_disable>
   12ff4:	00027f48 	.word	0x00027f48
   12ff8:	00027eac 	.word	0x00027eac
   12ffc:	000275f0 	.word	0x000275f0
   13000:	00012eb9 	.word	0x00012eb9

00013004 <lll_conn_rx_pkt_set>:
{
   13004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13006:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   13008:	2001      	movs	r0, #1
   1300a:	f7f9 fedd 	bl	cdc8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1300e:	4606      	mov	r6, r0
   13010:	b358      	cbz	r0, 1306a <lll_conn_rx_pkt_set+0x66>
	phy = lll->phy_rx;
   13012:	f894 5049 	ldrb.w	r5, [r4, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   13016:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
	phy = lll->phy_rx;
   1301a:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   1301e:	4628      	mov	r0, r5
   13020:	2100      	movs	r1, #0
   13022:	f000 fd9b 	bl	13b5c <radio_phy_set>
	} else if (lll->enc_rx) {
   13026:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1302a:	006a      	lsls	r2, r5, #1
   1302c:	071b      	lsls	r3, r3, #28
   1302e:	f042 0201 	orr.w	r2, r2, #1
   13032:	d510      	bpl.n	13056 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   13034:	1d39      	adds	r1, r7, #4
   13036:	b2c9      	uxtb	r1, r1
   13038:	2008      	movs	r0, #8
   1303a:	f000 fdd7 	bl	13bec <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1303e:	f000 fe7f 	bl	13d40 <radio_pkt_decrypt_get>
   13042:	4629      	mov	r1, r5
   13044:	4602      	mov	r2, r0
   13046:	f104 0063 	add.w	r0, r4, #99	; 0x63
   1304a:	f000 fff9 	bl	14040 <radio_ccm_rx_pkt_set>
}
   1304e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   13052:	f000 bdf9 	b.w	13c48 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   13056:	b2f9      	uxtb	r1, r7
   13058:	2008      	movs	r0, #8
   1305a:	f000 fdc7 	bl	13bec <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1305e:	f106 001c 	add.w	r0, r6, #28
}
   13062:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   13066:	f000 bdef 	b.w	13c48 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1306a:	4a07      	ldr	r2, [pc, #28]	; (13088 <lll_conn_rx_pkt_set+0x84>)
   1306c:	4907      	ldr	r1, [pc, #28]	; (1308c <lll_conn_rx_pkt_set+0x88>)
   1306e:	4808      	ldr	r0, [pc, #32]	; (13090 <lll_conn_rx_pkt_set+0x8c>)
   13070:	f240 13d5 	movw	r3, #469	; 0x1d5
   13074:	f00a fe3b 	bl	1dcee <printk>
   13078:	4040      	eors	r0, r0
   1307a:	f380 8811 	msr	BASEPRI, r0
   1307e:	f04f 0003 	mov.w	r0, #3
   13082:	df02      	svc	2
   13084:	e7c5      	b.n	13012 <lll_conn_rx_pkt_set+0xe>
   13086:	bf00      	nop
   13088:	00027f48 	.word	0x00027f48
   1308c:	00027f94 	.word	0x00027f94
   13090:	000275f0 	.word	0x000275f0

00013094 <lll_conn_isr_tx>:
{
   13094:	b538      	push	{r3, r4, r5, lr}
   13096:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   13098:	f7ff f902 	bl	122a0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1309c:	2096      	movs	r0, #150	; 0x96
   1309e:	f000 fedb 	bl	13e58 <radio_tmr_tifs_set>
				     lll->phy_flags);
   130a2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   130a6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   130aa:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   130ae:	f000 0007 	and.w	r0, r0, #7
   130b2:	f002 0207 	and.w	r2, r2, #7
   130b6:	2100      	movs	r1, #0
   130b8:	f000 fe54 	bl	13d64 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   130bc:	4620      	mov	r0, r4
   130be:	f7ff ffa1 	bl	13004 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   130c2:	f000 fe01 	bl	13cc8 <radio_is_ready>
   130c6:	bb58      	cbnz	r0, 13120 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   130c8:	f000 ffb4 	bl	14034 <radio_tmr_tifs_base_get>
   130cc:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   130ce:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   130d2:	2101      	movs	r1, #1
   130d4:	f000 0007 	and.w	r0, r0, #7
   130d8:	f000 fdc6 	bl	13c68 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   130dc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   130e0:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   130e4:	4405      	add	r5, r0
   130e6:	2b02      	cmp	r3, #2
   130e8:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   130ec:	d016      	beq.n	1311c <lll_conn_isr_tx+0x88>
		return 376;
   130ee:	2b04      	cmp	r3, #4
   130f0:	bf14      	ite	ne
   130f2:	2328      	movne	r3, #40	; 0x28
   130f4:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   130f8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   130fc:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   13100:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   13104:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   13106:	f000 fdab 	bl	13c60 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1310a:	1a28      	subs	r0, r5, r0
   1310c:	f000 ff4a 	bl	13fa4 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   13110:	4621      	mov	r1, r4
   13112:	480a      	ldr	r0, [pc, #40]	; (1313c <lll_conn_isr_tx+0xa8>)
}
   13114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   13118:	f000 bcdc 	b.w	13ad4 <radio_isr_set>
	switch (phy) {
   1311c:	2318      	movs	r3, #24
   1311e:	e7eb      	b.n	130f8 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   13120:	4a07      	ldr	r2, [pc, #28]	; (13140 <lll_conn_isr_tx+0xac>)
   13122:	4908      	ldr	r1, [pc, #32]	; (13144 <lll_conn_isr_tx+0xb0>)
   13124:	4808      	ldr	r0, [pc, #32]	; (13148 <lll_conn_isr_tx+0xb4>)
   13126:	f240 13a1 	movw	r3, #417	; 0x1a1
   1312a:	f00a fde0 	bl	1dcee <printk>
   1312e:	4040      	eors	r0, r0
   13130:	f380 8811 	msr	BASEPRI, r0
   13134:	f04f 0003 	mov.w	r0, #3
   13138:	df02      	svc	2
   1313a:	e7c5      	b.n	130c8 <lll_conn_isr_tx+0x34>
   1313c:	00013285 	.word	0x00013285
   13140:	00027f48 	.word	0x00027f48
   13144:	00027f14 	.word	0x00027f14
   13148:	000275f0 	.word	0x000275f0

0001314c <lll_conn_tx_pkt_set>:
{
   1314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1314e:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   13150:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   13154:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   13158:	f001 0407 	and.w	r4, r1, #7
{
   1315c:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1315e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   13162:	4620      	mov	r0, r4
   13164:	f000 fcfa 	bl	13b5c <radio_phy_set>
	} else if (lll->enc_tx) {
   13168:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1316c:	0062      	lsls	r2, r4, #1
   1316e:	06db      	lsls	r3, r3, #27
   13170:	f042 0201 	orr.w	r2, r2, #1
   13174:	b2f1      	uxtb	r1, r6
   13176:	d50d      	bpl.n	13194 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   13178:	3104      	adds	r1, #4
   1317a:	b2c9      	uxtb	r1, r1
   1317c:	2008      	movs	r0, #8
   1317e:	f000 fd35 	bl	13bec <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   13182:	4639      	mov	r1, r7
   13184:	f105 0084 	add.w	r0, r5, #132	; 0x84
   13188:	f000 ff90 	bl	140ac <radio_ccm_tx_pkt_set>
}
   1318c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   13190:	f000 bd60 	b.w	13c54 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   13194:	2008      	movs	r0, #8
   13196:	f000 fd29 	bl	13bec <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1319a:	4638      	mov	r0, r7
}
   1319c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   131a0:	f000 bd58 	b.w	13c54 <radio_pkt_tx_set>

000131a4 <lll_conn_pdu_tx_prep>:
{
   131a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   131a8:	4604      	mov	r4, r0
   131aa:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   131ac:	aa01      	add	r2, sp, #4
   131ae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   131b0:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   131b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
   131b4:	f7f5 ff18 	bl	8fe8 <memq_peek>
	if (lll->empty || !link) {
   131b8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   131bc:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   131be:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   131c0:	d432      	bmi.n	13228 <lll_conn_pdu_tx_prep+0x84>
   131c2:	2800      	cmp	r0, #0
   131c4:	d04e      	beq.n	13264 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   131c6:	9a01      	ldr	r2, [sp, #4]
   131c8:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   131cc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   131d0:	f102 0804 	add.w	r8, r2, #4
   131d4:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   131d8:	b913      	cbnz	r3, 131e0 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   131da:	786b      	ldrb	r3, [r5, #1]
   131dc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   131e0:	b137      	cbz	r7, 131f0 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   131e2:	f818 2007 	ldrb.w	r2, [r8, r7]
   131e6:	2101      	movs	r1, #1
   131e8:	f361 0201 	bfi	r2, r1, #0, #2
   131ec:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   131f0:	1bdb      	subs	r3, r3, r7
   131f2:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   131f4:	4620      	mov	r0, r4
   131f6:	f7fd fb59 	bl	108ac <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   131fa:	786b      	ldrb	r3, [r5, #1]
   131fc:	4283      	cmp	r3, r0
   131fe:	d924      	bls.n	1324a <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   13200:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   13202:	f818 3007 	ldrb.w	r3, [r8, r7]
   13206:	f043 0310 	orr.w	r3, r3, #16
   1320a:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1320e:	f818 3007 	ldrb.w	r3, [r8, r7]
		p->resv = 0U;
   13212:	2200      	movs	r2, #0
		p->rfu = 0U;
   13214:	f36f 1347 	bfc	r3, #5, #3
   13218:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1321c:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   1321e:	f8c9 5000 	str.w	r5, [r9]
}
   13222:	b003      	add	sp, #12
   13224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   13228:	f043 0304 	orr.w	r3, r3, #4
   1322c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   13230:	f000 fd7e 	bl	13d30 <radio_pkt_empty_get>
   13234:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   13236:	b1e6      	cbz	r6, 13272 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   13238:	7803      	ldrb	r3, [r0, #0]
   1323a:	f043 0310 	orr.w	r3, r3, #16
   1323e:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   13240:	f8c9 5000 	str.w	r5, [r9]
}
   13244:	b003      	add	sp, #12
   13246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1324a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1324c:	6832      	ldr	r2, [r6, #0]
   1324e:	429a      	cmp	r2, r3
			p->md = 1U;
   13250:	f818 3007 	ldrb.w	r3, [r8, r7]
   13254:	bf14      	ite	ne
   13256:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1325a:	f36f 1304 	bfceq	r3, #4, #1
   1325e:	f808 3007 	strb.w	r3, [r8, r7]
   13262:	e7d4      	b.n	1320e <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   13264:	f043 0304 	orr.w	r3, r3, #4
   13268:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1326c:	f000 fd60 	bl	13d30 <radio_pkt_empty_get>
   13270:	4605      	mov	r5, r0
			p->md = 0U;
   13272:	782b      	ldrb	r3, [r5, #0]
   13274:	f36f 1304 	bfc	r3, #4, #1
   13278:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1327a:	f8c9 5000 	str.w	r5, [r9]
}
   1327e:	b003      	add	sp, #12
   13280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00013284 <lll_conn_isr_rx>:
{
   13284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13288:	b082      	sub	sp, #8
   1328a:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1328c:	f000 fd26 	bl	13cdc <radio_is_done>
	if (trx_done) {
   13290:	f010 0fff 	tst.w	r0, #255	; 0xff
   13294:	d10a      	bne.n	132ac <lll_conn_isr_rx+0x28>
	lll_isr_rx_status_reset();
   13296:	f7ff f80b 	bl	122b0 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1329a:	48b2      	ldr	r0, [pc, #712]	; (13564 <lll_conn_isr_rx+0x2e0>)
   1329c:	4621      	mov	r1, r4
   1329e:	f000 fc19 	bl	13ad4 <radio_isr_set>
		radio_disable();
   132a2:	f000 fced 	bl	13c80 <radio_disable>
}
   132a6:	b002      	add	sp, #8
   132a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_ok = radio_crc_is_valid();
   132ac:	f000 fd36 	bl	13d1c <radio_crc_is_valid>
   132b0:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   132b2:	f000 fd79 	bl	13da8 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   132b6:	f7fe fffb 	bl	122b0 <lll_isr_rx_status_reset>
	trx_cnt++;
   132ba:	4aab      	ldr	r2, [pc, #684]	; (13568 <lll_conn_isr_rx+0x2e4>)
   132bc:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   132be:	2001      	movs	r0, #1
	trx_cnt++;
   132c0:	4403      	add	r3, r0
   132c2:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   132c4:	f7f9 fd80 	bl	cdc8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   132c8:	4606      	mov	r6, r0
   132ca:	2800      	cmp	r0, #0
   132cc:	f000 80c6 	beq.w	1345c <lll_conn_isr_rx+0x1d8>
	if (crc_ok) {
   132d0:	2d00      	cmp	r5, #0
   132d2:	d15b      	bne.n	1338c <lll_conn_isr_rx+0x108>
		if (crc_expire == 0U) {
   132d4:	4ba5      	ldr	r3, [pc, #660]	; (1356c <lll_conn_isr_rx+0x2e8>)
   132d6:	781f      	ldrb	r7, [r3, #0]
   132d8:	2f00      	cmp	r7, #0
   132da:	f040 80ae 	bne.w	1343a <lll_conn_isr_rx+0x1b6>
		crc_expire--;
   132de:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   132e0:	a901      	add	r1, sp, #4
   132e2:	4620      	mov	r0, r4
		crc_expire--;
   132e4:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   132e6:	f7ff ff5d 	bl	131a4 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   132ea:	2096      	movs	r0, #150	; 0x96
   132ec:	f000 fdb4 	bl	13e58 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   132f0:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   132f4:	f000 0007 	and.w	r0, r0, #7
   132f8:	f000 fd26 	bl	13d48 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   132fc:	489c      	ldr	r0, [pc, #624]	; (13570 <lll_conn_isr_rx+0x2ec>)
   132fe:	4621      	mov	r1, r4
   13300:	f000 fbe8 	bl	13ad4 <radio_isr_set>
		radio_tmr_end_capture();
   13304:	f000 fe88 	bl	14018 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   13308:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   1330c:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   1330e:	f3c2 0340 	ubfx	r3, r2, #1, #1
   13312:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   13314:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   13318:	009b      	lsls	r3, r3, #2
   1331a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1331e:	f020 020c 	bic.w	r2, r0, #12
   13322:	4313      	orrs	r3, r2
   13324:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   13326:	4620      	mov	r0, r4
   13328:	f7ff ff10 	bl	1314c <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1332c:	f000 fccc 	bl	13cc8 <radio_is_ready>
   13330:	2800      	cmp	r0, #0
   13332:	f040 80cb 	bne.w	134cc <lll_conn_isr_rx+0x248>
	if (!radio_tmr_aa_restore()) {
   13336:	f000 fe63 	bl	14000 <radio_tmr_aa_restore>
   1333a:	b1f0      	cbz	r0, 1337a <lll_conn_isr_rx+0xf6>
	if (tx_release) {
   1333c:	b31d      	cbz	r5, 13386 <lll_conn_isr_rx+0x102>
		LL_ASSERT(lll->handle != 0xFFFF);
   1333e:	8a20      	ldrh	r0, [r4, #16]
   13340:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13344:	4298      	cmp	r0, r3
   13346:	f000 80e3 	beq.w	13510 <lll_conn_isr_rx+0x28c>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1334a:	4629      	mov	r1, r5
   1334c:	f7fd f8cc 	bl	104e8 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   13350:	b177      	cbz	r7, 13370 <lll_conn_isr_rx+0xec>
		if (lll->enc_rx) {
   13352:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   13356:	071b      	lsls	r3, r3, #28
   13358:	f100 80d1 	bmi.w	134fe <lll_conn_isr_rx+0x27a>
		ull_pdu_rx_alloc();
   1335c:	f7f9 fd52 	bl	ce04 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   13360:	2302      	movs	r3, #2
   13362:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   13364:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   13366:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   13368:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1336a:	4631      	mov	r1, r6
   1336c:	f7f9 fd62 	bl	ce34 <ull_rx_put>
		ull_rx_sched();
   13370:	f7f9 fd70 	bl	ce54 <ull_rx_sched>
}
   13374:	b002      	add	sp, #8
   13376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1337a:	f000 fe35 	bl	13fe8 <radio_tmr_aa_get>
   1337e:	f000 fe39 	bl	13ff4 <radio_tmr_aa_save>
	if (tx_release) {
   13382:	2d00      	cmp	r5, #0
   13384:	d1db      	bne.n	1333e <lll_conn_isr_rx+0xba>
	if (is_rx_enqueue) {
   13386:	2f00      	cmp	r7, #0
   13388:	d1e3      	bne.n	13352 <lll_conn_isr_rx+0xce>
   1338a:	e78c      	b.n	132a6 <lll_conn_isr_rx+0x22>
	if (lll->enc_rx) {
   1338c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   13390:	0719      	lsls	r1, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   13392:	f106 071c 	add.w	r7, r6, #28
	if (lll->enc_rx) {
   13396:	f100 8090 	bmi.w	134ba <lll_conn_isr_rx+0x236>
	if (pdu_data_rx->nesn != lll->sn) {
   1339a:	7f32      	ldrb	r2, [r6, #28]
   1339c:	f003 0101 	and.w	r1, r3, #1
   133a0:	f3c2 0080 	ubfx	r0, r2, #2, #1
   133a4:	4288      	cmp	r0, r1
   133a6:	d069      	beq.n	1347c <lll_conn_isr_rx+0x1f8>
		if (lll->role) {
   133a8:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
		lll->sn++;
   133ac:	f081 0101 	eor.w	r1, r1, #1
   133b0:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   133b4:	2a00      	cmp	r2, #0
		lll->sn++;
   133b6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   133ba:	da05      	bge.n	133c8 <lll_conn_isr_rx+0x144>
			lll->slave.latency_enabled = 1;
   133bc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   133c0:	f043 0301 	orr.w	r3, r3, #1
   133c4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   133c8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   133cc:	075a      	lsls	r2, r3, #29
   133ce:	f100 808b 	bmi.w	134e8 <lll_conn_isr_rx+0x264>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   133d2:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   133d6:	aa01      	add	r2, sp, #4
   133d8:	f7f5 fe06 	bl	8fe8 <memq_peek>
		if (link) {
   133dc:	4680      	mov	r8, r0
   133de:	2800      	cmp	r0, #0
   133e0:	f000 8088 	beq.w	134f4 <lll_conn_isr_rx+0x270>
					       lll->packet_tx_head_offset);
   133e4:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   133e8:	9b01      	ldr	r3, [sp, #4]
   133ea:	4413      	add	r3, r2
   133ec:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   133ee:	b151      	cbz	r1, 13406 <lll_conn_isr_rx+0x182>
				if (lll->enc_tx) {
   133f0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   133f4:	06dd      	lsls	r5, r3, #27
   133f6:	d506      	bpl.n	13406 <lll_conn_isr_rx+0x182>
					lll->ccm_tx.counter++;
   133f8:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   133fc:	3301      	adds	r3, #1
   133fe:	f140 0000 	adc.w	r0, r0, #0
   13402:	e9c4 3025 	strd	r3, r0, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   13406:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1340a:	440a      	add	r2, r1
   1340c:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1340e:	429a      	cmp	r2, r3
   13410:	f0c0 808d 	bcc.w	1352e <lll_conn_isr_rx+0x2aa>
			} else if (offset == lll->packet_tx_head_len) {
   13414:	d16e      	bne.n	134f4 <lll_conn_isr_rx+0x270>
				lll->packet_tx_head_len = 0;
   13416:	2200      	movs	r2, #0
   13418:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   1341c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1341e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   13422:	f7f5 fde9 	bl	8ff8 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   13426:	9d01      	ldr	r5, [sp, #4]
   13428:	7f32      	ldrb	r2, [r6, #28]
   1342a:	682b      	ldr	r3, [r5, #0]
   1342c:	f8c8 3000 	str.w	r3, [r8]
				tx->next = link;
   13430:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   13434:	f8c5 8000 	str.w	r8, [r5]
				*tx_release = tx;
   13438:	e021      	b.n	1347e <lll_conn_isr_rx+0x1fa>
		crc_expire--;
   1343a:	3f01      	subs	r7, #1
   1343c:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1343e:	a901      	add	r1, sp, #4
   13440:	4620      	mov	r0, r4
		crc_expire--;
   13442:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   13444:	f7ff feae 	bl	131a4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   13448:	2f00      	cmp	r7, #0
   1344a:	f040 80e9 	bne.w	13620 <lll_conn_isr_rx+0x39c>
		radio_isr_set(isr_done, param);
   1344e:	4845      	ldr	r0, [pc, #276]	; (13564 <lll_conn_isr_rx+0x2e0>)
   13450:	4621      	mov	r1, r4
   13452:	f000 fb3f 	bl	13ad4 <radio_isr_set>
			radio_switch_complete_and_disable();
   13456:	f000 fc91 	bl	13d7c <radio_switch_complete_and_disable>
   1345a:	e755      	b.n	13308 <lll_conn_isr_rx+0x84>
	LL_ASSERT(node_rx);
   1345c:	4a45      	ldr	r2, [pc, #276]	; (13574 <lll_conn_isr_rx+0x2f0>)
   1345e:	4946      	ldr	r1, [pc, #280]	; (13578 <lll_conn_isr_rx+0x2f4>)
   13460:	4846      	ldr	r0, [pc, #280]	; (1357c <lll_conn_isr_rx+0x2f8>)
   13462:	23d0      	movs	r3, #208	; 0xd0
   13464:	f00a fc43 	bl	1dcee <printk>
   13468:	4040      	eors	r0, r0
   1346a:	f380 8811 	msr	BASEPRI, r0
   1346e:	f04f 0003 	mov.w	r0, #3
   13472:	df02      	svc	2
	if (crc_ok) {
   13474:	2d00      	cmp	r5, #0
   13476:	f43f af2d 	beq.w	132d4 <lll_conn_isr_rx+0x50>
   1347a:	e787      	b.n	1338c <lll_conn_isr_rx+0x108>
	tx_release = NULL;
   1347c:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   1347e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   13482:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13486:	429a      	cmp	r2, r3
   13488:	d058      	beq.n	1353c <lll_conn_isr_rx+0x2b8>
	is_rx_enqueue = 0U;
   1348a:	2700      	movs	r7, #0
		crc_expire = 0U;
   1348c:	4a37      	ldr	r2, [pc, #220]	; (1356c <lll_conn_isr_rx+0x2e8>)
		crc_valid = 1U;
   1348e:	4b3c      	ldr	r3, [pc, #240]	; (13580 <lll_conn_isr_rx+0x2fc>)
		crc_expire = 0U;
   13490:	2100      	movs	r1, #0
   13492:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   13494:	4620      	mov	r0, r4
		crc_valid = 1U;
   13496:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   13498:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1349a:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1349c:	f7ff fe82 	bl	131a4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   134a0:	7f33      	ldrb	r3, [r6, #28]
   134a2:	06d9      	lsls	r1, r3, #27
   134a4:	f53f af21 	bmi.w	132ea <lll_conn_isr_rx+0x66>
			      (pdu_data_tx->md == 0) &&
   134a8:	9b01      	ldr	r3, [sp, #4]
   134aa:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   134ac:	06d2      	lsls	r2, r2, #27
   134ae:	f53f af1c 	bmi.w	132ea <lll_conn_isr_rx+0x66>
			      (pdu_data_tx->md == 0) &&
   134b2:	785b      	ldrb	r3, [r3, #1]
   134b4:	2b00      	cmp	r3, #0
   134b6:	d0ca      	beq.n	1344e <lll_conn_isr_rx+0x1ca>
   134b8:	e717      	b.n	132ea <lll_conn_isr_rx+0x66>
		pkt_decrypt = radio_pkt_decrypt_get();
   134ba:	f000 fc41 	bl	13d40 <radio_pkt_decrypt_get>
   134be:	7883      	ldrb	r3, [r0, #2]
   134c0:	8802      	ldrh	r2, [r0, #0]
   134c2:	83b2      	strh	r2, [r6, #28]
   134c4:	70bb      	strb	r3, [r7, #2]
   134c6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   134ca:	e766      	b.n	1339a <lll_conn_isr_rx+0x116>
	LL_ASSERT(!radio_is_ready());
   134cc:	4a29      	ldr	r2, [pc, #164]	; (13574 <lll_conn_isr_rx+0x2f0>)
   134ce:	492d      	ldr	r1, [pc, #180]	; (13584 <lll_conn_isr_rx+0x300>)
   134d0:	482a      	ldr	r0, [pc, #168]	; (1357c <lll_conn_isr_rx+0x2f8>)
   134d2:	f44f 739e 	mov.w	r3, #316	; 0x13c
   134d6:	f00a fc0a 	bl	1dcee <printk>
   134da:	4040      	eors	r0, r0
   134dc:	f380 8811 	msr	BASEPRI, r0
   134e0:	f04f 0003 	mov.w	r0, #3
   134e4:	df02      	svc	2
   134e6:	e726      	b.n	13336 <lll_conn_isr_rx+0xb2>
			lll->empty = 0;
   134e8:	f36f 0382 	bfc	r3, #2, #1
   134ec:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			pdu_data_tx = (void *)radio_pkt_empty_get();
   134f0:	f000 fc1e 	bl	13d30 <radio_pkt_empty_get>
		if (link) {
   134f4:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   134f8:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   134fa:	2500      	movs	r5, #0
   134fc:	e7bf      	b.n	1347e <lll_conn_isr_rx+0x1fa>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   134fe:	f000 fc1f 	bl	13d40 <radio_pkt_decrypt_get>
   13502:	7f72      	ldrb	r2, [r6, #29]
   13504:	1cc1      	adds	r1, r0, #3
   13506:	f106 001f 	add.w	r0, r6, #31
   1350a:	f013 fa9e 	bl	26a4a <memcpy>
   1350e:	e725      	b.n	1335c <lll_conn_isr_rx+0xd8>
		LL_ASSERT(lll->handle != 0xFFFF);
   13510:	4a18      	ldr	r2, [pc, #96]	; (13574 <lll_conn_isr_rx+0x2f0>)
   13512:	491d      	ldr	r1, [pc, #116]	; (13588 <lll_conn_isr_rx+0x304>)
   13514:	4819      	ldr	r0, [pc, #100]	; (1357c <lll_conn_isr_rx+0x2f8>)
   13516:	f240 134b 	movw	r3, #331	; 0x14b
   1351a:	f00a fbe8 	bl	1dcee <printk>
   1351e:	4040      	eors	r0, r0
   13520:	f380 8811 	msr	BASEPRI, r0
   13524:	f04f 0003 	mov.w	r0, #3
   13528:	df02      	svc	2
   1352a:	8a20      	ldrh	r0, [r4, #16]
   1352c:	e70d      	b.n	1334a <lll_conn_isr_rx+0xc6>
				lll->packet_tx_head_offset = offset;
   1352e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   13532:	7f32      	ldrb	r2, [r6, #28]
   13534:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
	tx_release = NULL;
   13538:	2500      	movs	r5, #0
   1353a:	e7a0      	b.n	1347e <lll_conn_isr_rx+0x1fa>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1353c:	2003      	movs	r0, #3
   1353e:	f7f9 fc43 	bl	cdc8 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   13542:	2800      	cmp	r0, #0
   13544:	d0a1      	beq.n	1348a <lll_conn_isr_rx+0x206>
		lll->nesn++;
   13546:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1354a:	f083 0302 	eor.w	r3, r3, #2
   1354e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   13552:	7f73      	ldrb	r3, [r6, #29]
   13554:	2b00      	cmp	r3, #0
   13556:	d098      	beq.n	1348a <lll_conn_isr_rx+0x206>
			if (lll->enc_rx) {
   13558:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1355c:	0718      	lsls	r0, r3, #28
   1355e:	d415      	bmi.n	1358c <lll_conn_isr_rx+0x308>
			*is_rx_enqueue = 1U;
   13560:	2701      	movs	r7, #1
   13562:	e793      	b.n	1348c <lll_conn_isr_rx+0x208>
   13564:	00012eb9 	.word	0x00012eb9
   13568:	20002f32 	.word	0x20002f32
   1356c:	20002f81 	.word	0x20002f81
   13570:	00013095 	.word	0x00013095
   13574:	00027f48 	.word	0x00027f48
   13578:	00027f94 	.word	0x00027f94
   1357c:	000275f0 	.word	0x000275f0
   13580:	20002f82 	.word	0x20002f82
   13584:	00027f14 	.word	0x00027f14
   13588:	00027fa4 	.word	0x00027fa4
				done = radio_ccm_is_done();
   1358c:	f000 fdb8 	bl	14100 <radio_ccm_is_done>
				LL_ASSERT(done);
   13590:	b3c0      	cbz	r0, 13604 <lll_conn_isr_rx+0x380>
				bool mic_failure = !radio_ccm_mic_is_valid();
   13592:	f000 fdd7 	bl	14144 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   13596:	bb28      	cbnz	r0, 135e4 <lll_conn_isr_rx+0x360>
				    lll->ccm_rx.counter == 0 &&
   13598:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1359c:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   135a0:	4313      	orrs	r3, r2
   135a2:	d104      	bne.n	135ae <lll_conn_isr_rx+0x32a>
				    (pdu_data_rx->ll_id ==
   135a4:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   135a6:	f003 0303 	and.w	r3, r3, #3
   135aa:	2b03      	cmp	r3, #3
   135ac:	d004      	beq.n	135b8 <lll_conn_isr_rx+0x334>
					mic_state = LLL_CONN_MIC_FAIL;
   135ae:	4b1d      	ldr	r3, [pc, #116]	; (13624 <lll_conn_isr_rx+0x3a0>)
   135b0:	2202      	movs	r2, #2
   135b2:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   135b4:	2700      	movs	r7, #0
   135b6:	e6be      	b.n	13336 <lll_conn_isr_rx+0xb2>
						radio_pkt_scratch_get();
   135b8:	f000 fbbe 	bl	13d38 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   135bc:	7842      	ldrb	r2, [r0, #1]
   135be:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   135c0:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   135c2:	d8f4      	bhi.n	135ae <lll_conn_isr_rx+0x32a>
   135c4:	3203      	adds	r2, #3
   135c6:	4638      	mov	r0, r7
   135c8:	f013 fa3f 	bl	26a4a <memcpy>
						lll->ccm_rx.counter--;
   135cc:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   135d0:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   135d4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   135d8:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   135dc:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   135e0:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   135e4:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   135e8:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   135ec:	490d      	ldr	r1, [pc, #52]	; (13624 <lll_conn_isr_rx+0x3a0>)
				lll->ccm_rx.counter++;
   135ee:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   135f0:	f104 0073 	add.w	r0, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   135f4:	f142 0200 	adc.w	r2, r2, #0
				mic_state = LLL_CONN_MIC_PASS;
   135f8:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   135fa:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   135fe:	700f      	strb	r7, [r1, #0]
				lll->ccm_rx.counter++;
   13600:	6042      	str	r2, [r0, #4]
		if (err) {
   13602:	e743      	b.n	1348c <lll_conn_isr_rx+0x208>
				LL_ASSERT(done);
   13604:	4a08      	ldr	r2, [pc, #32]	; (13628 <lll_conn_isr_rx+0x3a4>)
   13606:	4909      	ldr	r1, [pc, #36]	; (1362c <lll_conn_isr_rx+0x3a8>)
   13608:	4809      	ldr	r0, [pc, #36]	; (13630 <lll_conn_isr_rx+0x3ac>)
   1360a:	f240 330f 	movw	r3, #783	; 0x30f
   1360e:	f00a fb6e 	bl	1dcee <printk>
   13612:	4040      	eors	r0, r0
   13614:	f380 8811 	msr	BASEPRI, r0
   13618:	f04f 0003 	mov.w	r0, #3
   1361c:	df02      	svc	2
   1361e:	e7b8      	b.n	13592 <lll_conn_isr_rx+0x30e>
	is_rx_enqueue = 0U;
   13620:	462f      	mov	r7, r5
   13622:	e662      	b.n	132ea <lll_conn_isr_rx+0x66>
   13624:	20002f83 	.word	0x20002f83
   13628:	00027f48 	.word	0x00027f48
   1362c:	00027f9c 	.word	0x00027f9c
   13630:	000275f0 	.word	0x000275f0

00013634 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   13634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   13638:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1363a:	8a22      	ldrh	r2, [r4, #16]
   1363c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13640:	429a      	cmp	r2, r3
{
   13642:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   13644:	f000 80c3 	beq.w	137ce <prepare_cb+0x19a>
		DEBUG_RADIO_CLOSE_S(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   13648:	4605      	mov	r5, r0
   1364a:	f7ff fc9b 	bl	12f84 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1364e:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   13650:	8b66      	ldrh	r6, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   13652:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   13656:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   13658:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   1365a:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   1365c:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1365e:	8361      	strh	r1, [r4, #26]
	if (lll->data_chan_sel) {
   13660:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   13662:	82e2      	strh	r2, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   13664:	8320      	strh	r0, [r4, #24]
	if (lll->data_chan_sel) {
   13666:	f104 021c 	add.w	r2, r4, #28
   1366a:	f100 808f 	bmi.w	1378c <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1366e:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   13672:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   13676:	9600      	str	r6, [sp, #0]
   13678:	4613      	mov	r3, r2
   1367a:	4602      	mov	r2, r0
   1367c:	f104 0023 	add.w	r0, r4, #35	; 0x23
   13680:	f7fd fa80 	bl	10b84 <lll_chan_sel_1>
   13684:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   13686:	e9d4 610c 	ldrd	r6, r1, [r4, #48]	; 0x30
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   1368a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1368c:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_event_us +=
   13690:	4431      	add	r1, r6
		lll->slave.window_widening_event_us =
   13692:	428a      	cmp	r2, r1
   13694:	bf28      	it	cs
   13696:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   13698:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   1369a:	2600      	movs	r6, #0
		lll->slave.window_widening_event_us =
   1369c:	6362      	str	r2, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   1369e:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   136a0:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   136a2:	63a6      	str	r6, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   136a4:	f000 fa36 	bl	13b14 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   136a8:	4630      	mov	r0, r6
   136aa:	f000 fa67 	bl	13b7c <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   136ae:	4620      	mov	r0, r4
   136b0:	f7ff fca8 	bl	13004 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   136b4:	f104 0008 	add.w	r0, r4, #8
   136b8:	f000 fa7e 	bl	13bb8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   136bc:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   136be:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   136c0:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   136c2:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   136c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   136c8:	4319      	orrs	r1, r3
   136ca:	f240 605b 	movw	r0, #1627	; 0x65b
   136ce:	f000 fb19 	bl	13d04 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   136d2:	4638      	mov	r0, r7
   136d4:	f7fe fda0 	bl	12218 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   136d8:	4621      	mov	r1, r4
   136da:	4849      	ldr	r0, [pc, #292]	; (13800 <prepare_cb+0x1cc>)
   136dc:	f000 f9fa 	bl	13ad4 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   136e0:	2096      	movs	r0, #150	; 0x96
   136e2:	f000 fbb9 	bl	13e58 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   136e6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   136ea:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   136ee:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   136f2:	4631      	mov	r1, r6
   136f4:	f002 0207 	and.w	r2, r2, #7
   136f8:	f000 0007 	and.w	r0, r0, #7
   136fc:	f000 fb32 	bl	13d64 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   13700:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   13704:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   13706:	4640      	mov	r0, r8
   13708:	f7fe fd66 	bl	121d8 <lll_evt_offset_get>
   1370c:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1370e:	686a      	ldr	r2, [r5, #4]
   13710:	f107 0109 	add.w	r1, r7, #9
   13714:	4630      	mov	r0, r6
   13716:	f000 fbab 	bl	13e70 <radio_tmr_start>
   1371a:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1371c:	f000 fc50 	bl	13fc0 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   13720:	4630      	mov	r0, r6
   13722:	f000 fc67 	bl	13ff4 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   13726:	6b62      	ldr	r2, [r4, #52]	; 0x34
	hcto = remainder_us +
   13728:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1372a:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1372e:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   13730:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   13734:	f000 0007 	and.w	r0, r0, #7
   13738:	2101      	movs	r1, #1
	hcto = remainder_us +
   1373a:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1373c:	f000 fa92 	bl	13c64 <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   13740:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
   13744:	f002 0207 	and.w	r2, r2, #7
   13748:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1374a:	4405      	add	r5, r0
   1374c:	d03d      	beq.n	137ca <prepare_cb+0x196>
		return 40;
   1374e:	2a04      	cmp	r2, #4
   13750:	bf0c      	ite	eq
   13752:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   13756:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   13758:	4610      	mov	r0, r2
   1375a:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1375c:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1375e:	f000 fa83 	bl	13c68 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   13762:	4428      	add	r0, r5
   13764:	f000 fc1e 	bl	13fa4 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   13768:	7c21      	ldrb	r1, [r4, #16]
   1376a:	3103      	adds	r1, #3
   1376c:	463a      	mov	r2, r7
   1376e:	4640      	mov	r0, r8
   13770:	b2c9      	uxtb	r1, r1
   13772:	f7fe fd3f 	bl	121f4 <lll_preempt_calc>
   13776:	b190      	cbz	r0, 1379e <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   13778:	4822      	ldr	r0, [pc, #136]	; (13804 <prepare_cb+0x1d0>)
   1377a:	4621      	mov	r1, r4
   1377c:	f000 f9aa 	bl	13ad4 <radio_isr_set>
		radio_disable();
   13780:	f000 fa7e 	bl	13c80 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   13784:	2000      	movs	r0, #0
   13786:	b002      	add	sp, #8
   13788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   1378c:	4430      	add	r0, r6
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1378e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   13790:	b280      	uxth	r0, r0
   13792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13796:	f7fd fa31 	bl	10bfc <lll_chan_sel_2>
   1379a:	4607      	mov	r7, r0
   1379c:	e773      	b.n	13686 <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   1379e:	4620      	mov	r0, r4
   137a0:	f7fe fcc0 	bl	12124 <lll_prepare_done>
		LL_ASSERT(!ret);
   137a4:	2800      	cmp	r0, #0
   137a6:	d0ed      	beq.n	13784 <prepare_cb+0x150>
   137a8:	4a17      	ldr	r2, [pc, #92]	; (13808 <prepare_cb+0x1d4>)
   137aa:	4918      	ldr	r1, [pc, #96]	; (1380c <prepare_cb+0x1d8>)
   137ac:	4818      	ldr	r0, [pc, #96]	; (13810 <prepare_cb+0x1dc>)
   137ae:	f240 1313 	movw	r3, #275	; 0x113
   137b2:	f00a fa9c 	bl	1dcee <printk>
   137b6:	4040      	eors	r0, r0
   137b8:	f380 8811 	msr	BASEPRI, r0
   137bc:	f04f 0003 	mov.w	r0, #3
   137c0:	df02      	svc	2
}
   137c2:	2000      	movs	r0, #0
   137c4:	b002      	add	sp, #8
   137c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   137ca:	2318      	movs	r3, #24
   137cc:	e7c4      	b.n	13758 <prepare_cb+0x124>
		err = lll_hfclock_off();
   137ce:	f7fe fe27 	bl	12420 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   137d2:	2800      	cmp	r0, #0
   137d4:	db06      	blt.n	137e4 <prepare_cb+0x1b0>
		lll_done(NULL);
   137d6:	2000      	movs	r0, #0
   137d8:	f7fe fca6 	bl	12128 <lll_done>
}
   137dc:	2000      	movs	r0, #0
   137de:	b002      	add	sp, #8
   137e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(err >= 0);
   137e4:	4a08      	ldr	r2, [pc, #32]	; (13808 <prepare_cb+0x1d4>)
   137e6:	490b      	ldr	r1, [pc, #44]	; (13814 <prepare_cb+0x1e0>)
   137e8:	4809      	ldr	r0, [pc, #36]	; (13810 <prepare_cb+0x1dc>)
   137ea:	237d      	movs	r3, #125	; 0x7d
   137ec:	f00a fa7f 	bl	1dcee <printk>
   137f0:	4040      	eors	r0, r0
   137f2:	f380 8811 	msr	BASEPRI, r0
   137f6:	f04f 0003 	mov.w	r0, #3
   137fa:	df02      	svc	2
   137fc:	e7eb      	b.n	137d6 <prepare_cb+0x1a2>
   137fe:	bf00      	nop
   13800:	00013285 	.word	0x00013285
   13804:	0001234d 	.word	0x0001234d
   13808:	00027fbc 	.word	0x00027fbc
   1380c:	00027720 	.word	0x00027720
   13810:	000275f0 	.word	0x000275f0
   13814:	00027eac 	.word	0x00027eac

00013818 <lll_slave_prepare>:
{
   13818:	b570      	push	{r4, r5, r6, lr}
   1381a:	b082      	sub	sp, #8
   1381c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1381e:	f7fe fde7 	bl	123f0 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   13822:	2800      	cmp	r0, #0
   13824:	db29      	blt.n	1387a <lll_slave_prepare+0x62>
	lll = p->param;
   13826:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   13828:	8923      	ldrh	r3, [r4, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   1382a:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->slave.window_widening_prepare_us +=
   1382c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1382e:	8ace      	ldrh	r6, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   13830:	4a18      	ldr	r2, [pc, #96]	; (13894 <lll_slave_prepare+0x7c>)
	elapsed = p->lazy + 1;
   13832:	3301      	adds	r3, #1
   13834:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   13836:	fb00 5503 	mla	r5, r0, r3, r5
	    lll->slave.window_widening_max_us) {
   1383a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
		lll->slave.window_widening_prepare_us =
   1383c:	42a8      	cmp	r0, r5
   1383e:	bf28      	it	cs
   13840:	4628      	movcs	r0, r5
	lll->latency_prepare += elapsed;
   13842:	4433      	add	r3, r6
		lll->slave.window_widening_prepare_us =
   13844:	6308      	str	r0, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   13846:	82cb      	strh	r3, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   13848:	4813      	ldr	r0, [pc, #76]	; (13898 <lll_slave_prepare+0x80>)
   1384a:	4914      	ldr	r1, [pc, #80]	; (1389c <lll_slave_prepare+0x84>)
   1384c:	9400      	str	r4, [sp, #0]
   1384e:	2300      	movs	r3, #0
   13850:	f7fe fbdc 	bl	1200c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   13854:	b108      	cbz	r0, 1385a <lll_slave_prepare+0x42>
   13856:	3077      	adds	r0, #119	; 0x77
   13858:	d101      	bne.n	1385e <lll_slave_prepare+0x46>
}
   1385a:	b002      	add	sp, #8
   1385c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1385e:	4a10      	ldr	r2, [pc, #64]	; (138a0 <lll_slave_prepare+0x88>)
   13860:	4910      	ldr	r1, [pc, #64]	; (138a4 <lll_slave_prepare+0x8c>)
   13862:	4811      	ldr	r0, [pc, #68]	; (138a8 <lll_slave_prepare+0x90>)
   13864:	235f      	movs	r3, #95	; 0x5f
   13866:	f00a fa42 	bl	1dcee <printk>
   1386a:	4040      	eors	r0, r0
   1386c:	f380 8811 	msr	BASEPRI, r0
   13870:	f04f 0003 	mov.w	r0, #3
   13874:	df02      	svc	2
}
   13876:	b002      	add	sp, #8
   13878:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(err >= 0);
   1387a:	4a09      	ldr	r2, [pc, #36]	; (138a0 <lll_slave_prepare+0x88>)
   1387c:	490b      	ldr	r1, [pc, #44]	; (138ac <lll_slave_prepare+0x94>)
   1387e:	480a      	ldr	r0, [pc, #40]	; (138a8 <lll_slave_prepare+0x90>)
   13880:	2348      	movs	r3, #72	; 0x48
   13882:	f00a fa34 	bl	1dcee <printk>
   13886:	4040      	eors	r0, r0
   13888:	f380 8811 	msr	BASEPRI, r0
   1388c:	f04f 0003 	mov.w	r0, #3
   13890:	df02      	svc	2
   13892:	e7c8      	b.n	13826 <lll_slave_prepare+0xe>
   13894:	00013635 	.word	0x00013635
   13898:	000121d1 	.word	0x000121d1
   1389c:	00012fad 	.word	0x00012fad
   138a0:	00027fbc 	.word	0x00027fbc
   138a4:	00027f34 	.word	0x00027f34
   138a8:	000275f0 	.word	0x000275f0
   138ac:	00027eac 	.word	0x00027eac

000138b0 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   138b0:	4b05      	ldr	r3, [pc, #20]	; (138c8 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   138b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   138b6:	2100      	movs	r1, #0
   138b8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   138bc:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   138c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   138c4:	4770      	bx	lr
   138c6:	bf00      	nop
   138c8:	4000b000 	.word	0x4000b000

000138cc <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   138cc:	4b05      	ldr	r3, [pc, #20]	; (138e4 <cntr_start+0x18>)
   138ce:	7818      	ldrb	r0, [r3, #0]
   138d0:	1c42      	adds	r2, r0, #1
   138d2:	701a      	strb	r2, [r3, #0]
   138d4:	b918      	cbnz	r0, 138de <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   138d6:	4b04      	ldr	r3, [pc, #16]	; (138e8 <cntr_start+0x1c>)
   138d8:	2201      	movs	r2, #1
   138da:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   138dc:	4770      	bx	lr
		return 1;
   138de:	2001      	movs	r0, #1
}
   138e0:	4770      	bx	lr
   138e2:	bf00      	nop
   138e4:	20002f84 	.word	0x20002f84
   138e8:	4000b000 	.word	0x4000b000

000138ec <cntr_stop>:

uint32_t cntr_stop(void)
{
   138ec:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   138ee:	4c0d      	ldr	r4, [pc, #52]	; (13924 <cntr_stop+0x38>)
   138f0:	7820      	ldrb	r0, [r4, #0]
   138f2:	b148      	cbz	r0, 13908 <cntr_stop+0x1c>

	if (--_refcount) {
   138f4:	3801      	subs	r0, #1
   138f6:	b2c0      	uxtb	r0, r0
   138f8:	7020      	strb	r0, [r4, #0]
   138fa:	b918      	cbnz	r0, 13904 <cntr_stop+0x18>
   138fc:	4b0a      	ldr	r3, [pc, #40]	; (13928 <cntr_stop+0x3c>)
   138fe:	2201      	movs	r2, #1
   13900:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   13902:	bd10      	pop	{r4, pc}
		return 1;
   13904:	2001      	movs	r0, #1
}
   13906:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   13908:	4a08      	ldr	r2, [pc, #32]	; (1392c <cntr_stop+0x40>)
   1390a:	4909      	ldr	r1, [pc, #36]	; (13930 <cntr_stop+0x44>)
   1390c:	4809      	ldr	r0, [pc, #36]	; (13934 <cntr_stop+0x48>)
   1390e:	232e      	movs	r3, #46	; 0x2e
   13910:	f00a f9ed 	bl	1dcee <printk>
   13914:	4040      	eors	r0, r0
   13916:	f380 8811 	msr	BASEPRI, r0
   1391a:	f04f 0003 	mov.w	r0, #3
   1391e:	df02      	svc	2
   13920:	7820      	ldrb	r0, [r4, #0]
   13922:	e7e7      	b.n	138f4 <cntr_stop+0x8>
   13924:	20002f84 	.word	0x20002f84
   13928:	4000b004 	.word	0x4000b004
   1392c:	00028008 	.word	0x00028008
   13930:	00028054 	.word	0x00028054
   13934:	000275f0 	.word	0x000275f0

00013938 <cntr_cnt_get>:
     return p_reg->COUNTER;
   13938:	4b01      	ldr	r3, [pc, #4]	; (13940 <cntr_cnt_get+0x8>)
   1393a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1393e:	4770      	bx	lr
   13940:	4000b000 	.word	0x4000b000

00013944 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   13944:	4b02      	ldr	r3, [pc, #8]	; (13950 <cntr_cmp_set+0xc>)
   13946:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1394a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1394e:	4770      	bx	lr
   13950:	4000b000 	.word	0x4000b000

00013954 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   13954:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   13956:	4b12      	ldr	r3, [pc, #72]	; (139a0 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13958:	4d12      	ldr	r5, [pc, #72]	; (139a4 <do_ecb+0x50>)
   1395a:	2601      	movs	r6, #1
   1395c:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   1395e:	2100      	movs	r1, #0
   13960:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   13962:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   13966:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1396a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1396e:	601c      	str	r4, [r3, #0]
}
   13970:	e005      	b.n	1397e <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   13972:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   13976:	b932      	cbnz	r2, 13986 <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   13978:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1397c:	b11a      	cbz	r2, 13986 <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1397e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   13982:	2a00      	cmp	r2, #0
   13984:	d0f5      	beq.n	13972 <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13986:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   13988:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1398c:	2a00      	cmp	r2, #0
   1398e:	d1e7      	bne.n	13960 <do_ecb+0xc>
   13990:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   13994:	2f00      	cmp	r7, #0
   13996:	d0e3      	beq.n	13960 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   13998:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   1399a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1399e:	4770      	bx	lr
   139a0:	4000e000 	.word	0x4000e000
   139a4:	4000e004 	.word	0x4000e004

000139a8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   139a8:	b570      	push	{r4, r5, r6, lr}
   139aa:	b08c      	sub	sp, #48	; 0x30
   139ac:	460e      	mov	r6, r1
   139ae:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   139b0:	4601      	mov	r1, r0
   139b2:	2210      	movs	r2, #16
   139b4:	4668      	mov	r0, sp
{
   139b6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   139b8:	f7f5 fae6 	bl	8f88 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   139bc:	2210      	movs	r2, #16
   139be:	eb0d 0002 	add.w	r0, sp, r2
   139c2:	4631      	mov	r1, r6
   139c4:	f7f5 fae0 	bl	8f88 <mem_rcopy>

	do_ecb(&ecb);
   139c8:	4668      	mov	r0, sp
   139ca:	f7ff ffc3 	bl	13954 <do_ecb>

	if (cipher_text_le) {
   139ce:	b125      	cbz	r5, 139da <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   139d0:	4628      	mov	r0, r5
   139d2:	2210      	movs	r2, #16
   139d4:	a908      	add	r1, sp, #32
   139d6:	f7f5 fad7 	bl	8f88 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   139da:	b12c      	cbz	r4, 139e8 <ecb_encrypt+0x40>
   139dc:	ad08      	add	r5, sp, #32
   139de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   139e0:	6020      	str	r0, [r4, #0]
   139e2:	6061      	str	r1, [r4, #4]
   139e4:	60a2      	str	r2, [r4, #8]
   139e6:	60e3      	str	r3, [r4, #12]
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   139e8:	b00c      	add	sp, #48	; 0x30
   139ea:	bd70      	pop	{r4, r5, r6, pc}

000139ec <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   139ec:	b4f0      	push	{r4, r5, r6, r7}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   139ee:	4e2a      	ldr	r6, [pc, #168]	; (13a98 <sw_switch.isra.0+0xac>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   139f0:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 13aac <sw_switch.isra.0+0xc0>
   139f4:	7834      	ldrb	r4, [r6, #0]
   139f6:	4b29      	ldr	r3, [pc, #164]	; (13a9c <sw_switch.isra.0+0xb0>)
   139f8:	f8cc 3560 	str.w	r3, [ip, #1376]	; 0x560
   139fc:	f104 030b 	add.w	r3, r4, #11
   13a00:	b2db      	uxtb	r3, r3
   13a02:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   13a04:	4f26      	ldr	r7, [pc, #152]	; (13aa0 <sw_switch.isra.0+0xb4>)
   13a06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   13a0a:	00e5      	lsls	r5, r4, #3
   13a0c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   13a10:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   13a14:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   13a18:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13a1c:	f8cc 5564 	str.w	r5, [ip, #1380]	; 0x564
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   13a20:	b225      	sxth	r5, r4

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13a22:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   13a26:	b388      	cbz	r0, 13a8c <sw_switch.isra.0+0xa0>

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   13a28:	f24a 274e 	movw	r7, #41550	; 0xa24e
   13a2c:	f649 6c34 	movw	ip, #40500	; 0x9e34
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   13a30:	f242 40b8 	movw	r0, #9400	; 0x24b8
	switch (phy) {
   13a34:	2a02      	cmp	r2, #2
   13a36:	bf14      	ite	ne
   13a38:	463a      	movne	r2, r7
   13a3a:	4662      	moveq	r2, ip
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   13a3c:	f241 574a 	movw	r7, #5450	; 0x154a
   13a40:	2902      	cmp	r1, #2
   13a42:	bf14      	ite	ne
   13a44:	4601      	movne	r1, r0
   13a46:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   13a48:	4816      	ldr	r0, [pc, #88]	; (13aa4 <sw_switch.isra.0+0xb8>)

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13a4a:	4f17      	ldr	r7, [pc, #92]	; (13aa8 <sw_switch.isra.0+0xbc>)
   13a4c:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
   13a50:	440a      	add	r2, r1
   13a52:	fba0 3202 	umull	r3, r2, r0, r2
   13a56:	0992      	lsrs	r2, r2, #6
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   13a58:	00ab      	lsls	r3, r5, #2
   13a5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13a5e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   13a62:	3401      	adds	r4, #1
		SW_SWITCH_TIMER->CC[cc]) {
   13a64:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
	if (delay <
   13a68:	4291      	cmp	r1, r2
				 SW_SWITCH_TIMER->CC[cc] - delay);
   13a6a:	bf8a      	itet	hi
   13a6c:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   13a70:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   13a72:	1a8a      	subhi	r2, r1, r2
   13a74:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   13a78:	4b0c      	ldr	r3, [pc, #48]	; (13aac <sw_switch.isra.0+0xc0>)
	sw_tifs_toggle &= 1;
   13a7a:	f004 0401 	and.w	r4, r4, #1
   13a7e:	f44f 6290 	mov.w	r2, #1152	; 0x480
   13a82:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13a86:	7034      	strb	r4, [r6, #0]
}
   13a88:	bcf0      	pop	{r4, r5, r6, r7}
   13a8a:	4770      	bx	lr
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13a8c:	4a08      	ldr	r2, [pc, #32]	; (13ab0 <sw_switch.isra.0+0xc4>)
   13a8e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   13a92:	2229      	movs	r2, #41	; 0x29
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
   13a94:	e7e0      	b.n	13a58 <sw_switch.isra.0+0x6c>
   13a96:	bf00      	nop
   13a98:	20002f85 	.word	0x20002f85
   13a9c:	4000110c 	.word	0x4000110c
   13aa0:	40009140 	.word	0x40009140
   13aa4:	10624dd3 	.word	0x10624dd3
   13aa8:	40001000 	.word	0x40001000
   13aac:	4001f000 	.word	0x4001f000
   13ab0:	40001004 	.word	0x40001004

00013ab4 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   13ab4:	4b04      	ldr	r3, [pc, #16]	; (13ac8 <isr_radio+0x14>)
   13ab6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   13aba:	b123      	cbz	r3, 13ac6 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   13abc:	4a03      	ldr	r2, [pc, #12]	; (13acc <isr_radio+0x18>)
   13abe:	4b04      	ldr	r3, [pc, #16]	; (13ad0 <isr_radio+0x1c>)
   13ac0:	6810      	ldr	r0, [r2, #0]
   13ac2:	681b      	ldr	r3, [r3, #0]
   13ac4:	4718      	bx	r3
}
   13ac6:	4770      	bx	lr
   13ac8:	40001000 	.word	0x40001000
   13acc:	20002bc8 	.word	0x20002bc8
   13ad0:	20002bc4 	.word	0x20002bc4

00013ad4 <radio_isr_set>:
{
   13ad4:	b538      	push	{r3, r4, r5, lr}
   13ad6:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   13ad8:	2001      	movs	r0, #1
{
   13ada:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   13adc:	f7f0 fda4 	bl	4628 <arch_irq_disable>
	isr_cb_param = param;
   13ae0:	4a08      	ldr	r2, [pc, #32]	; (13b04 <radio_isr_set+0x30>)
	isr_cb = cb;
   13ae2:	4809      	ldr	r0, [pc, #36]	; (13b08 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13ae4:	4b09      	ldr	r3, [pc, #36]	; (13b0c <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   13ae6:	490a      	ldr	r1, [pc, #40]	; (13b10 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   13ae8:	6015      	str	r5, [r2, #0]
   13aea:	2510      	movs	r5, #16
   13aec:	2202      	movs	r2, #2
	isr_cb = cb;
   13aee:	6004      	str	r4, [r0, #0]
   13af0:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   13af4:	2001      	movs	r0, #1
   13af6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   13afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   13afe:	f7f0 bd83 	b.w	4608 <arch_irq_enable>
   13b02:	bf00      	nop
   13b04:	20002bc8 	.word	0x20002bc8
   13b08:	20002bc4 	.word	0x20002bc4
   13b0c:	e000e100 	.word	0xe000e100
   13b10:	40001000 	.word	0x40001000

00013b14 <radio_reset>:
{
   13b14:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   13b16:	2001      	movs	r0, #1
   13b18:	f7f0 fd86 	bl	4628 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   13b1c:	4b0c      	ldr	r3, [pc, #48]	; (13b50 <radio_reset+0x3c>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   13b1e:	490d      	ldr	r1, [pc, #52]	; (13b54 <radio_reset+0x40>)
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   13b20:	4a0d      	ldr	r2, [pc, #52]	; (13b58 <radio_reset+0x44>)
   13b22:	2400      	movs	r4, #0
   13b24:	2001      	movs	r0, #1
   13b26:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
   13b2a:	f8c3 0ffc 	str.w	r0, [r3, #4092]	; 0xffc
   13b2e:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   13b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   13b34:	f023 0301 	bic.w	r3, r3, #1
   13b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   13b3c:	f44f 6410 	mov.w	r4, #2304	; 0x900
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   13b40:	f44f 5090 	mov.w	r0, #4608	; 0x1200
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   13b44:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   13b46:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   13b4a:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   13b4e:	bd10      	pop	{r4, pc}
   13b50:	40001000 	.word	0x40001000
   13b54:	40001774 	.word	0x40001774
   13b58:	4001f000 	.word	0x4001f000

00013b5c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   13b5c:	4b06      	ldr	r3, [pc, #24]	; (13b78 <radio_phy_set+0x1c>)
	switch (phy) {
   13b5e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   13b60:	bf14      	ite	ne
   13b62:	2203      	movne	r2, #3
   13b64:	2204      	moveq	r2, #4
   13b66:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   13b6a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   13b6e:	f042 0201 	orr.w	r2, r2, #1
   13b72:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   13b76:	4770      	bx	lr
   13b78:	40001000 	.word	0x40001000

00013b7c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   13b7c:	4b01      	ldr	r3, [pc, #4]	; (13b84 <radio_tx_power_set+0x8>)
   13b7e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   13b82:	4770      	bx	lr
   13b84:	40001000 	.word	0x40001000

00013b88 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   13b88:	4b01      	ldr	r3, [pc, #4]	; (13b90 <radio_freq_chan_set+0x8>)
   13b8a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   13b8e:	4770      	bx	lr
   13b90:	40001000 	.word	0x40001000

00013b94 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   13b94:	4b07      	ldr	r3, [pc, #28]	; (13bb4 <radio_whiten_iv_set+0x20>)
   13b96:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   13b9a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   13b9e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   13ba2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   13ba6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   13baa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   13bae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   13bb2:	4770      	bx	lr
   13bb4:	40001000 	.word	0x40001000

00013bb8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   13bb8:	4a0b      	ldr	r2, [pc, #44]	; (13be8 <radio_aa_set+0x30>)
   13bba:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   13bbc:	2301      	movs	r3, #1
{
   13bbe:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   13bc0:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   13bc4:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   13bc8:	78c3      	ldrb	r3, [r0, #3]
   13bca:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   13bce:	7843      	ldrb	r3, [r0, #1]
   13bd0:	7884      	ldrb	r4, [r0, #2]
   13bd2:	7801      	ldrb	r1, [r0, #0]
   13bd4:	041b      	lsls	r3, r3, #16
   13bd6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   13bda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   13bde:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   13be0:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   13be4:	4770      	bx	lr
   13be6:	bf00      	nop
   13be8:	40001000 	.word	0x40001000

00013bec <radio_pkt_configure>:
	switch (phy) {
   13bec:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   13bf0:	2b02      	cmp	r3, #2
{
   13bf2:	b410      	push	{r4}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   13bf4:	bf14      	ite	ne
   13bf6:	2400      	movne	r4, #0
   13bf8:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   13bfc:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   13bfe:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   13c02:	bf48      	it	mi
   13c04:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   13c08:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   13c0a:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   13c0e:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   13c10:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   13c14:	4a0a      	ldr	r2, [pc, #40]	; (13c40 <radio_pkt_configure+0x54>)
}
   13c16:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   13c18:	4303      	orrs	r3, r0
   13c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   13c1e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   13c22:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   13c26:	4807      	ldr	r0, [pc, #28]	; (13c44 <radio_pkt_configure+0x58>)
   13c28:	4018      	ands	r0, r3
   13c2a:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   13c2e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   13c32:	4319      	orrs	r1, r3
   13c34:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   13c38:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   13c3c:	4770      	bx	lr
   13c3e:	bf00      	nop
   13c40:	40001000 	.word	0x40001000
   13c44:	fef80000 	.word	0xfef80000

00013c48 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   13c48:	4b01      	ldr	r3, [pc, #4]	; (13c50 <radio_pkt_rx_set+0x8>)
   13c4a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   13c4e:	4770      	bx	lr
   13c50:	40001000 	.word	0x40001000

00013c54 <radio_pkt_tx_set>:
   13c54:	4b01      	ldr	r3, [pc, #4]	; (13c5c <radio_pkt_tx_set+0x8>)
   13c56:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   13c5a:	4770      	bx	lr
   13c5c:	40001000 	.word	0x40001000

00013c60 <radio_tx_chain_delay_get>:
}
   13c60:	2001      	movs	r0, #1
   13c62:	4770      	bx	lr

00013c64 <radio_rx_ready_delay_get>:
}
   13c64:	2029      	movs	r0, #41	; 0x29
   13c66:	4770      	bx	lr

00013c68 <radio_rx_chain_delay_get>:
	switch (phy) {
   13c68:	2802      	cmp	r0, #2
}
   13c6a:	bf14      	ite	ne
   13c6c:	200a      	movne	r0, #10
   13c6e:	2006      	moveq	r0, #6
   13c70:	4770      	bx	lr
   13c72:	bf00      	nop

00013c74 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13c74:	4b01      	ldr	r3, [pc, #4]	; (13c7c <radio_tx_enable+0x8>)
   13c76:	2201      	movs	r2, #1
   13c78:	601a      	str	r2, [r3, #0]
}
   13c7a:	4770      	bx	lr
   13c7c:	40001000 	.word	0x40001000

00013c80 <radio_disable>:
{
   13c80:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   13c82:	4a08      	ldr	r2, [pc, #32]	; (13ca4 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   13c84:	4808      	ldr	r0, [pc, #32]	; (13ca8 <radio_disable+0x28>)
   13c86:	4909      	ldr	r1, [pc, #36]	; (13cac <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   13c88:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   13c8a:	f44f 6590 	mov.w	r5, #1152	; 0x480
   13c8e:	2400      	movs	r4, #0
   13c90:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   13c94:	6053      	str	r3, [r2, #4]
   13c96:	60d3      	str	r3, [r2, #12]
   13c98:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   13c9c:	bc30      	pop	{r4, r5}
   13c9e:	600b      	str	r3, [r1, #0]
   13ca0:	4770      	bx	lr
   13ca2:	bf00      	nop
   13ca4:	4001f000 	.word	0x4001f000
   13ca8:	40001000 	.word	0x40001000
   13cac:	40001010 	.word	0x40001010

00013cb0 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   13cb0:	4b04      	ldr	r3, [pc, #16]	; (13cc4 <radio_status_reset+0x14>)
   13cb2:	2200      	movs	r2, #0
   13cb4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   13cb8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   13cbc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   13cc0:	4770      	bx	lr
   13cc2:	bf00      	nop
   13cc4:	40001000 	.word	0x40001000

00013cc8 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   13cc8:	4b03      	ldr	r3, [pc, #12]	; (13cd8 <radio_is_ready+0x10>)
   13cca:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   13cce:	3800      	subs	r0, #0
   13cd0:	bf18      	it	ne
   13cd2:	2001      	movne	r0, #1
   13cd4:	4770      	bx	lr
   13cd6:	bf00      	nop
   13cd8:	40001000 	.word	0x40001000

00013cdc <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   13cdc:	4b03      	ldr	r3, [pc, #12]	; (13cec <radio_is_done+0x10>)
   13cde:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   13ce2:	3800      	subs	r0, #0
   13ce4:	bf18      	it	ne
   13ce6:	2001      	movne	r0, #1
   13ce8:	4770      	bx	lr
   13cea:	bf00      	nop
   13cec:	40001000 	.word	0x40001000

00013cf0 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   13cf0:	4b03      	ldr	r3, [pc, #12]	; (13d00 <radio_is_idle+0x10>)
   13cf2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   13cf6:	fab0 f080 	clz	r0, r0
   13cfa:	0940      	lsrs	r0, r0, #5
   13cfc:	4770      	bx	lr
   13cfe:	bf00      	nop
   13d00:	40001000 	.word	0x40001000

00013d04 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   13d04:	4b04      	ldr	r3, [pc, #16]	; (13d18 <radio_crc_configure+0x14>)
   13d06:	f240 1203 	movw	r2, #259	; 0x103
   13d0a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   13d0e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   13d12:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   13d16:	4770      	bx	lr
   13d18:	40001000 	.word	0x40001000

00013d1c <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   13d1c:	4b03      	ldr	r3, [pc, #12]	; (13d2c <radio_crc_is_valid+0x10>)
   13d1e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13d22:	3800      	subs	r0, #0
   13d24:	bf18      	it	ne
   13d26:	2001      	movne	r0, #1
   13d28:	4770      	bx	lr
   13d2a:	bf00      	nop
   13d2c:	40001000 	.word	0x40001000

00013d30 <radio_pkt_empty_get>:
}
   13d30:	4800      	ldr	r0, [pc, #0]	; (13d34 <radio_pkt_empty_get+0x4>)
   13d32:	4770      	bx	lr
   13d34:	20002abc 	.word	0x20002abc

00013d38 <radio_pkt_scratch_get>:
}
   13d38:	4800      	ldr	r0, [pc, #0]	; (13d3c <radio_pkt_scratch_get+0x4>)
   13d3a:	4770      	bx	lr
   13d3c:	20002ac0 	.word	0x20002ac0

00013d40 <radio_pkt_decrypt_get>:
}
   13d40:	4800      	ldr	r0, [pc, #0]	; (13d44 <radio_pkt_decrypt_get+0x4>)
   13d42:	4770      	bx	lr
   13d44:	200029b8 	.word	0x200029b8

00013d48 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13d48:	4b05      	ldr	r3, [pc, #20]	; (13d60 <radio_switch_complete_and_rx+0x18>)
{
   13d4a:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   13d4c:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13d4e:	2403      	movs	r4, #3
{
   13d50:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13d52:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   13d56:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   13d58:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   13d5a:	f7ff be47 	b.w	139ec <sw_switch.isra.0>
   13d5e:	bf00      	nop
   13d60:	40001000 	.word	0x40001000

00013d64 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13d64:	4b04      	ldr	r3, [pc, #16]	; (13d78 <radio_switch_complete_and_tx+0x14>)
{
   13d66:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13d68:	2403      	movs	r4, #3
{
   13d6a:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13d6c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   13d70:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   13d72:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   13d74:	f7ff be3a 	b.w	139ec <sw_switch.isra.0>
   13d78:	40001000 	.word	0x40001000

00013d7c <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   13d7c:	4904      	ldr	r1, [pc, #16]	; (13d90 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   13d7e:	4b05      	ldr	r3, [pc, #20]	; (13d94 <radio_switch_complete_and_disable+0x18>)
   13d80:	2003      	movs	r0, #3
   13d82:	f44f 6290 	mov.w	r2, #1152	; 0x480
   13d86:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   13d8a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   13d8e:	4770      	bx	lr
   13d90:	40001000 	.word	0x40001000
   13d94:	4001f000 	.word	0x4001f000

00013d98 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   13d98:	4b02      	ldr	r3, [pc, #8]	; (13da4 <radio_rssi_status_reset+0xc>)
   13d9a:	2200      	movs	r2, #0
   13d9c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   13da0:	4770      	bx	lr
   13da2:	bf00      	nop
   13da4:	40001000 	.word	0x40001000

00013da8 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   13da8:	4b03      	ldr	r3, [pc, #12]	; (13db8 <radio_rssi_is_ready+0x10>)
   13daa:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   13dae:	3800      	subs	r0, #0
   13db0:	bf18      	it	ne
   13db2:	2001      	movne	r0, #1
   13db4:	4770      	bx	lr
   13db6:	bf00      	nop
   13db8:	40001000 	.word	0x40001000

00013dbc <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   13dbc:	b430      	push	{r4, r5}
   13dbe:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   13dc0:	00a3      	lsls	r3, r4, #2
   13dc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   13dca:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   13dcc:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   13dd0:	3401      	adds	r4, #1
   13dd2:	8895      	ldrh	r5, [r2, #4]
   13dd4:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   13dd8:	2c08      	cmp	r4, #8
		bdaddr += 6;
   13dda:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   13dde:	d1ef      	bne.n	13dc0 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   13de0:	4b03      	ldr	r3, [pc, #12]	; (13df0 <radio_filter_configure+0x34>)
   13de2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   13de6:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   13de8:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   13dec:	4770      	bx	lr
   13dee:	bf00      	nop
   13df0:	40001000 	.word	0x40001000

00013df4 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   13df4:	4a03      	ldr	r2, [pc, #12]	; (13e04 <radio_filter_disable+0x10>)
   13df6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   13dfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13dfe:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   13e02:	4770      	bx	lr
   13e04:	40001000 	.word	0x40001000

00013e08 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   13e08:	4b02      	ldr	r3, [pc, #8]	; (13e14 <radio_filter_status_reset+0xc>)
   13e0a:	2200      	movs	r2, #0
   13e0c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   13e10:	4770      	bx	lr
   13e12:	bf00      	nop
   13e14:	40001000 	.word	0x40001000

00013e18 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   13e18:	4b03      	ldr	r3, [pc, #12]	; (13e28 <radio_filter_has_match+0x10>)
   13e1a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   13e1e:	3800      	subs	r0, #0
   13e20:	bf18      	it	ne
   13e22:	2001      	movne	r0, #1
   13e24:	4770      	bx	lr
   13e26:	bf00      	nop
   13e28:	40001000 	.word	0x40001000

00013e2c <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   13e2c:	4b01      	ldr	r3, [pc, #4]	; (13e34 <radio_filter_match_get+0x8>)
   13e2e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   13e32:	4770      	bx	lr
   13e34:	40001000 	.word	0x40001000

00013e38 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   13e38:	4904      	ldr	r1, [pc, #16]	; (13e4c <radio_tmr_status_reset+0x14>)
   13e3a:	4b05      	ldr	r3, [pc, #20]	; (13e50 <radio_tmr_status_reset+0x18>)
   13e3c:	4a05      	ldr	r2, [pc, #20]	; (13e54 <radio_tmr_status_reset+0x1c>)
   13e3e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   13e42:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   13e46:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   13e4a:	4770      	bx	lr
   13e4c:	4000b000 	.word	0x4000b000
   13e50:	4001f000 	.word	0x4001f000
   13e54:	0e700060 	.word	0x0e700060

00013e58 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   13e58:	4b03      	ldr	r3, [pc, #12]	; (13e68 <radio_tmr_tifs_set+0x10>)
   13e5a:	4a04      	ldr	r2, [pc, #16]	; (13e6c <radio_tmr_tifs_set+0x14>)
   13e5c:	781b      	ldrb	r3, [r3, #0]
   13e5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   13e62:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   13e66:	4770      	bx	lr
   13e68:	20002f85 	.word	0x20002f85
   13e6c:	40009000 	.word	0x40009000

00013e70 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   13e70:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   13e72:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   13e76:	4d31      	ldr	r5, [pc, #196]	; (13f3c <radio_tmr_start+0xcc>)
   13e78:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   13e7c:	42ab      	cmp	r3, r5
{
   13e7e:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   13e80:	d906      	bls.n	13e90 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   13e82:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   13e86:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   13e8a:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   13e8e:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13e90:	4d2b      	ldr	r5, [pc, #172]	; (13f40 <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   13e92:	4b2c      	ldr	r3, [pc, #176]	; (13f44 <radio_tmr_start+0xd4>)
	remainder /= 1000000UL;
   13e94:	482c      	ldr	r0, [pc, #176]	; (13f48 <radio_tmr_start+0xd8>)
   13e96:	2601      	movs	r6, #1
   13e98:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   13e9a:	2600      	movs	r6, #0
   13e9c:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   13ea0:	4d2a      	ldr	r5, [pc, #168]	; (13f4c <radio_tmr_start+0xdc>)
	remainder /= 1000000UL;
   13ea2:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   13ea6:	2604      	movs	r6, #4
   13ea8:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   13eac:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   13eae:	2602      	movs	r6, #2
   13eb0:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13eb4:	4a26      	ldr	r2, [pc, #152]	; (13f50 <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   13eb6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   13eba:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   13ebe:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   13ec2:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   13ec6:	4923      	ldr	r1, [pc, #140]	; (13f54 <radio_tmr_start+0xe4>)
   13ec8:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
    p_reg->CHENSET = mask;
   13ecc:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13ece:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   13ed2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   13ed6:	b354      	cbz	r4, 13f2e <radio_tmr_start+0xbe>
    p_reg->CHENCLR = mask;
   13ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   13edc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   13ee0:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   13ee4:	4b1a      	ldr	r3, [pc, #104]	; (13f50 <radio_tmr_start+0xe0>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   13ee6:	4a1c      	ldr	r2, [pc, #112]	; (13f58 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13ee8:	491c      	ldr	r1, [pc, #112]	; (13f5c <radio_tmr_start+0xec>)
   13eea:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   13eee:	2500      	movs	r5, #0
   13ef0:	2401      	movs	r4, #1
	SW_SWITCH_TIMER->PRESCALER = 4;
   13ef2:	2604      	movs	r6, #4
   13ef4:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->MODE = 0;
   13ef6:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   13efa:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   13efe:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
   13f02:	6014      	str	r4, [r2, #0]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13f04:	f502 32b0 	add.w	r2, r2, #90112	; 0x16000
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13f08:	4f15      	ldr	r7, [pc, #84]	; (13f60 <radio_tmr_start+0xf0>)
   13f0a:	4e16      	ldr	r6, [pc, #88]	; (13f64 <radio_tmr_start+0xf4>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13f0c:	4d16      	ldr	r5, [pc, #88]	; (13f68 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13f0e:	4c17      	ldr	r4, [pc, #92]	; (13f6c <radio_tmr_start+0xfc>)
   13f10:	f8c3 7548 	str.w	r7, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13f14:	320c      	adds	r2, #12
   13f16:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13f1a:	f8c3 6550 	str.w	r6, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13f1e:	f8c3 5554 	str.w	r5, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13f22:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   13f26:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13f28:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
   13f2c:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   13f2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   13f32:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   13f36:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   13f3a:	e7d3      	b.n	13ee4 <radio_tmr_start+0x74>
   13f3c:	7ff0bdbf 	.word	0x7ff0bdbf
   13f40:	4000800c 	.word	0x4000800c
   13f44:	40008000 	.word	0x40008000
   13f48:	431bde83 	.word	0x431bde83
   13f4c:	4000b000 	.word	0x4000b000
   13f50:	4001f000 	.word	0x4001f000
   13f54:	4000b148 	.word	0x4000b148
   13f58:	40009000 	.word	0x40009000
   13f5c:	4000900c 	.word	0x4000900c
   13f60:	4000110c 	.word	0x4000110c
   13f64:	40009140 	.word	0x40009140
   13f68:	4001f004 	.word	0x4001f004
   13f6c:	40009144 	.word	0x40009144

00013f70 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   13f70:	4b01      	ldr	r3, [pc, #4]	; (13f78 <radio_tmr_start_get+0x8>)
   13f72:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   13f76:	4770      	bx	lr
   13f78:	4000b000 	.word	0x4000b000

00013f7c <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   13f7c:	b410      	push	{r4}
   13f7e:	4805      	ldr	r0, [pc, #20]	; (13f94 <radio_tmr_stop+0x18>)
   13f80:	4c05      	ldr	r4, [pc, #20]	; (13f98 <radio_tmr_stop+0x1c>)
   13f82:	4906      	ldr	r1, [pc, #24]	; (13f9c <radio_tmr_stop+0x20>)
   13f84:	4a06      	ldr	r2, [pc, #24]	; (13fa0 <radio_tmr_stop+0x24>)
   13f86:	2301      	movs	r3, #1
   13f88:	6023      	str	r3, [r4, #0]
   13f8a:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   13f8c:	bc10      	pop	{r4}
   13f8e:	600b      	str	r3, [r1, #0]
   13f90:	6013      	str	r3, [r2, #0]
   13f92:	4770      	bx	lr
   13f94:	40008010 	.word	0x40008010
   13f98:	40008004 	.word	0x40008004
   13f9c:	40009004 	.word	0x40009004
   13fa0:	40009010 	.word	0x40009010

00013fa4 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   13fa4:	4904      	ldr	r1, [pc, #16]	; (13fb8 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   13fa6:	4b05      	ldr	r3, [pc, #20]	; (13fbc <radio_tmr_hcto_configure+0x18>)
   13fa8:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   13fac:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   13fb0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   13fb4:	4770      	bx	lr
   13fb6:	bf00      	nop
   13fb8:	40008000 	.word	0x40008000
   13fbc:	4001f000 	.word	0x4001f000

00013fc0 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13fc0:	4b05      	ldr	r3, [pc, #20]	; (13fd8 <radio_tmr_aa_capture+0x18>)
   13fc2:	4806      	ldr	r0, [pc, #24]	; (13fdc <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13fc4:	4906      	ldr	r1, [pc, #24]	; (13fe0 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   13fc6:	4a07      	ldr	r2, [pc, #28]	; (13fe4 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13fc8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13fcc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   13fd0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   13fd4:	4770      	bx	lr
   13fd6:	bf00      	nop
   13fd8:	4001f000 	.word	0x4001f000
   13fdc:	40001100 	.word	0x40001100
   13fe0:	40008040 	.word	0x40008040
   13fe4:	04000040 	.word	0x04000040

00013fe8 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   13fe8:	4b01      	ldr	r3, [pc, #4]	; (13ff0 <radio_tmr_aa_get+0x8>)
   13fea:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   13fee:	4770      	bx	lr
   13ff0:	40008000 	.word	0x40008000

00013ff4 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   13ff4:	4b01      	ldr	r3, [pc, #4]	; (13ffc <radio_tmr_aa_save+0x8>)
   13ff6:	6018      	str	r0, [r3, #0]
}
   13ff8:	4770      	bx	lr
   13ffa:	bf00      	nop
   13ffc:	20002bcc 	.word	0x20002bcc

00014000 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   14000:	4b01      	ldr	r3, [pc, #4]	; (14008 <radio_tmr_aa_restore+0x8>)
}
   14002:	6818      	ldr	r0, [r3, #0]
   14004:	4770      	bx	lr
   14006:	bf00      	nop
   14008:	20002bcc 	.word	0x20002bcc

0001400c <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1400c:	4b01      	ldr	r3, [pc, #4]	; (14014 <radio_tmr_ready_get+0x8>)
   1400e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   14012:	4770      	bx	lr
   14014:	40008000 	.word	0x40008000

00014018 <radio_tmr_end_capture>:
   14018:	4b02      	ldr	r3, [pc, #8]	; (14024 <radio_tmr_end_capture+0xc>)
   1401a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1401e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   14022:	4770      	bx	lr
   14024:	4001f000 	.word	0x4001f000

00014028 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   14028:	4b01      	ldr	r3, [pc, #4]	; (14030 <radio_tmr_end_get+0x8>)
   1402a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1402e:	4770      	bx	lr
   14030:	40008000 	.word	0x40008000

00014034 <radio_tmr_tifs_base_get>:
   14034:	4b01      	ldr	r3, [pc, #4]	; (1403c <radio_tmr_tifs_base_get+0x8>)
   14036:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1403a:	4770      	bx	lr
   1403c:	40008000 	.word	0x40008000

00014040 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   14040:	b4f0      	push	{r4, r5, r6, r7}
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   14042:	4c14      	ldr	r4, [pc, #80]	; (14094 <radio_ccm_rx_pkt_set+0x54>)
   14044:	4f14      	ldr	r7, [pc, #80]	; (14098 <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   14046:	4b15      	ldr	r3, [pc, #84]	; (1409c <radio_ccm_rx_pkt_set+0x5c>)
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   14048:	4d15      	ldr	r5, [pc, #84]	; (140a0 <radio_ccm_rx_pkt_set+0x60>)
   1404a:	4e16      	ldr	r6, [pc, #88]	; (140a4 <radio_ccm_rx_pkt_set+0x64>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1404c:	2902      	cmp	r1, #2
   1404e:	bf14      	ite	ne
   14050:	4621      	movne	r1, r4
   14052:	4639      	moveq	r1, r7
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   14054:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   14056:	2702      	movs	r7, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   14058:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1405c:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   14060:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   14064:	4f10      	ldr	r7, [pc, #64]	; (140a8 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   14066:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1406a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1406e:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   14072:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14076:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   14078:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1407c:	4628      	mov	r0, r5
	NRF_CCM->SHORTS = 0;
   1407e:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   14082:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   14086:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1408a:	f8c6 1504 	str.w	r1, [r6, #1284]	; 0x504
}
   1408e:	bcf0      	pop	{r4, r5, r6, r7}
   14090:	601a      	str	r2, [r3, #0]
   14092:	4770      	bx	lr
   14094:	01000001 	.word	0x01000001
   14098:	01010001 	.word	0x01010001
   1409c:	4000f000 	.word	0x4000f000
   140a0:	20002ac0 	.word	0x20002ac0
   140a4:	4001f000 	.word	0x4001f000
   140a8:	200028ac 	.word	0x200028ac

000140ac <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   140ac:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   140ae:	4b10      	ldr	r3, [pc, #64]	; (140f0 <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   140b0:	4d10      	ldr	r5, [pc, #64]	; (140f4 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   140b2:	4e11      	ldr	r6, [pc, #68]	; (140f8 <radio_ccm_tx_pkt_set+0x4c>)
{
   140b4:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   140b6:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   140b8:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   140ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   140be:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   140c2:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   140c6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   140ca:	4e0c      	ldr	r6, [pc, #48]	; (140fc <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   140cc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   140d0:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   140d2:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   140d6:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   140d8:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   140dc:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   140e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   140e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   140e8:	601c      	str	r4, [r3, #0]
}
   140ea:	bc70      	pop	{r4, r5, r6}
   140ec:	4770      	bx	lr
   140ee:	bf00      	nop
   140f0:	4000f000 	.word	0x4000f000
   140f4:	20002ac0 	.word	0x20002ac0
   140f8:	01010000 	.word	0x01010000
   140fc:	200028ac 	.word	0x200028ac

00014100 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   14100:	4a0e      	ldr	r2, [pc, #56]	; (1413c <radio_ccm_is_done+0x3c>)
   14102:	2302      	movs	r3, #2
   14104:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   14108:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1410c:	b933      	cbnz	r3, 1411c <radio_ccm_is_done+0x1c>
		__WFE();
   1410e:	bf20      	wfe
		__SEV();
   14110:	bf40      	sev
		__WFE();
   14112:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   14114:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   14118:	2b00      	cmp	r3, #0
   1411a:	d0f8      	beq.n	1410e <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1411c:	4b07      	ldr	r3, [pc, #28]	; (1413c <radio_ccm_is_done+0x3c>)
   1411e:	4a08      	ldr	r2, [pc, #32]	; (14140 <radio_ccm_is_done+0x40>)
   14120:	2002      	movs	r0, #2
   14122:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   14126:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1412a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1412e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   14132:	fab0 f080 	clz	r0, r0
   14136:	0940      	lsrs	r0, r0, #5
   14138:	4770      	bx	lr
   1413a:	bf00      	nop
   1413c:	4000f000 	.word	0x4000f000
   14140:	e000e100 	.word	0xe000e100

00014144 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   14144:	4b03      	ldr	r3, [pc, #12]	; (14154 <radio_ccm_mic_is_valid+0x10>)
   14146:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1414a:	3800      	subs	r0, #0
   1414c:	bf18      	it	ne
   1414e:	2001      	movne	r0, #1
   14150:	4770      	bx	lr
   14152:	bf00      	nop
   14154:	4000f000 	.word	0x4000f000

00014158 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > BIT(0))))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   14158:	4a14      	ldr	r2, [pc, #80]	; (141ac <radio_ar_configure+0x54>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == BIT(2))) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1415a:	4b15      	ldr	r3, [pc, #84]	; (141b0 <radio_ar_configure+0x58>)
{
   1415c:	b470      	push	{r4, r5, r6}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1415e:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   14162:	4e14      	ldr	r6, [pc, #80]	; (141b4 <radio_ar_configure+0x5c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   14164:	2403      	movs	r4, #3
   14166:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1416a:	3d01      	subs	r5, #1
	NRF_AAR->NIRK = nirk;
   1416c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

	NRF_AAR->EVENTS_END = 0;
   14170:	2400      	movs	r4, #0
    p_reg->BCC = radio_bcc;
   14172:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->IRKPTR = (uint32_t)irk;
   14174:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = addrptr;
   14178:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1417c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   14180:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   14184:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   14188:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1418c:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   14190:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   14194:	4908      	ldr	r1, [pc, #32]	; (141b8 <radio_ar_configure+0x60>)
   14196:	4303      	orrs	r3, r0
   14198:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1419c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   141a0:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   141a4:	bc70      	pop	{r4, r5, r6}
   141a6:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   141aa:	4770      	bx	lr
   141ac:	40001000 	.word	0x40001000
   141b0:	4000f000 	.word	0x4000f000
   141b4:	200028a8 	.word	0x200028a8
   141b8:	4001f000 	.word	0x4001f000

000141bc <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   141bc:	4b01      	ldr	r3, [pc, #4]	; (141c4 <radio_ar_match_get+0x8>)
   141be:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   141c2:	4770      	bx	lr
   141c4:	4000f000 	.word	0x4000f000

000141c8 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   141c8:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   141ca:	4807      	ldr	r0, [pc, #28]	; (141e8 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   141cc:	4c07      	ldr	r4, [pc, #28]	; (141ec <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   141ce:	4a08      	ldr	r2, [pc, #32]	; (141f0 <radio_ar_status_reset+0x28>)
   141d0:	2300      	movs	r3, #0
   141d2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   141d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   141da:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   141de:	bc10      	pop	{r4}
   141e0:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   141e4:	4770      	bx	lr
   141e6:	bf00      	nop
   141e8:	4000f000 	.word	0x4000f000
   141ec:	40001000 	.word	0x40001000
   141f0:	4001f000 	.word	0x4001f000

000141f4 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   141f4:	4b08      	ldr	r3, [pc, #32]	; (14218 <radio_ar_has_match+0x24>)
   141f6:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   141fa:	b160      	cbz	r0, 14216 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   141fc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   14200:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   14204:	b138      	cbz	r0, 14216 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   14206:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1420a:	b120      	cbz	r0, 14216 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1420c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   14210:	fab0 f080 	clz	r0, r0
   14214:	0940      	lsrs	r0, r0, #5
}
   14216:	4770      	bx	lr
   14218:	40001000 	.word	0x40001000

0001421c <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1421c:	2902      	cmp	r1, #2
{
   1421e:	b510      	push	{r4, lr}
   14220:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   14222:	d00b      	beq.n	1423c <mayfly_enable_cb+0x20>
   14224:	4a0a      	ldr	r2, [pc, #40]	; (14250 <mayfly_enable_cb+0x34>)
   14226:	490b      	ldr	r1, [pc, #44]	; (14254 <mayfly_enable_cb+0x38>)
   14228:	480b      	ldr	r0, [pc, #44]	; (14258 <mayfly_enable_cb+0x3c>)
   1422a:	231f      	movs	r3, #31
   1422c:	f009 fd5f 	bl	1dcee <printk>
   14230:	4040      	eors	r0, r0
   14232:	f380 8811 	msr	BASEPRI, r0
   14236:	f04f 0003 	mov.w	r0, #3
   1423a:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1423c:	200b      	movs	r0, #11
	if (enable) {
   1423e:	b11c      	cbz	r4, 14248 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   14240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   14244:	f7f0 b9e0 	b.w	4608 <arch_irq_enable>
}
   14248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1424c:	f7f0 b9ec 	b.w	4628 <arch_irq_disable>
   14250:	00028060 	.word	0x00028060
   14254:	000280b0 	.word	0x000280b0
   14258:	000275f0 	.word	0x000275f0

0001425c <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1425c:	b129      	cbz	r1, 1426a <mayfly_is_enabled+0xe>
   1425e:	3901      	subs	r1, #1
   14260:	2901      	cmp	r1, #1
   14262:	d805      	bhi.n	14270 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   14264:	200b      	movs	r0, #11
   14266:	f7f0 b9f3 	b.w	4650 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1426a:	2018      	movs	r0, #24
   1426c:	f7f0 b9f0 	b.w	4650 <arch_irq_is_enabled>
{
   14270:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   14272:	4a07      	ldr	r2, [pc, #28]	; (14290 <mayfly_is_enabled+0x34>)
   14274:	4907      	ldr	r1, [pc, #28]	; (14294 <mayfly_is_enabled+0x38>)
   14276:	4808      	ldr	r0, [pc, #32]	; (14298 <mayfly_is_enabled+0x3c>)
   14278:	2337      	movs	r3, #55	; 0x37
   1427a:	f009 fd38 	bl	1dcee <printk>
   1427e:	4040      	eors	r0, r0
   14280:	f380 8811 	msr	BASEPRI, r0
   14284:	f04f 0003 	mov.w	r0, #3
   14288:	df02      	svc	2
		break;
	}

	return 0;
}
   1428a:	2000      	movs	r0, #0
   1428c:	bd08      	pop	{r3, pc}
   1428e:	bf00      	nop
   14290:	00028060 	.word	0x00028060
   14294:	00027650 	.word	0x00027650
   14298:	000275f0 	.word	0x000275f0

0001429c <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1429c:	4288      	cmp	r0, r1
   1429e:	d013      	beq.n	142c8 <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   142a0:	b928      	cbnz	r0, 142ae <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   142a2:	1e48      	subs	r0, r1, #1
   142a4:	2801      	cmp	r0, #1
   142a6:	bf8c      	ite	hi
   142a8:	2000      	movhi	r0, #0
   142aa:	2001      	movls	r0, #1
   142ac:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   142ae:	2801      	cmp	r0, #1
   142b0:	d106      	bne.n	142c0 <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   142b2:	b159      	cbz	r1, 142cc <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   142b4:	f1a1 0002 	sub.w	r0, r1, #2
   142b8:	fab0 f080 	clz	r0, r0
   142bc:	0940      	lsrs	r0, r0, #5
   142be:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   142c0:	2802      	cmp	r0, #2
   142c2:	d004      	beq.n	142ce <mayfly_prio_is_equal+0x32>
   142c4:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   142c6:	4770      	bx	lr
   142c8:	2001      	movs	r0, #1
   142ca:	4770      	bx	lr
#endif
	       0;
}
   142cc:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   142ce:	2901      	cmp	r1, #1
   142d0:	bf8c      	ite	hi
   142d2:	2000      	movhi	r0, #0
   142d4:	2001      	movls	r0, #1
   142d6:	4770      	bx	lr

000142d8 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   142d8:	2901      	cmp	r1, #1
{
   142da:	b508      	push	{r3, lr}
	switch (callee_id) {
   142dc:	d00f      	beq.n	142fe <mayfly_pend+0x26>
   142de:	2902      	cmp	r1, #2
   142e0:	d00d      	beq.n	142fe <mayfly_pend+0x26>
   142e2:	b191      	cbz	r1, 1430a <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   142e4:	4a0c      	ldr	r2, [pc, #48]	; (14318 <mayfly_pend+0x40>)
   142e6:	490d      	ldr	r1, [pc, #52]	; (1431c <mayfly_pend+0x44>)
   142e8:	480d      	ldr	r0, [pc, #52]	; (14320 <mayfly_pend+0x48>)
   142ea:	2368      	movs	r3, #104	; 0x68
   142ec:	f009 fcff 	bl	1dcee <printk>
   142f0:	4040      	eors	r0, r0
   142f2:	f380 8811 	msr	BASEPRI, r0
   142f6:	f04f 0003 	mov.w	r0, #3
   142fa:	df02      	svc	2
		break;
	}
}
   142fc:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   142fe:	4b09      	ldr	r3, [pc, #36]	; (14324 <mayfly_pend+0x4c>)
   14300:	f44f 6200 	mov.w	r2, #2048	; 0x800
   14304:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14308:	bd08      	pop	{r3, pc}
   1430a:	4b06      	ldr	r3, [pc, #24]	; (14324 <mayfly_pend+0x4c>)
   1430c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   14310:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14314:	bd08      	pop	{r3, pc}
   14316:	bf00      	nop
   14318:	00028060 	.word	0x00028060
   1431c:	00027650 	.word	0x00027650
   14320:	000275f0 	.word	0x000275f0
   14324:	e000e100 	.word	0xe000e100

00014328 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   14328:	2803      	cmp	r0, #3
{
   1432a:	b510      	push	{r4, lr}
   1432c:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1432e:	d804      	bhi.n	1433a <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   14330:	4b11      	ldr	r3, [pc, #68]	; (14378 <hal_ticker_instance0_caller_id_get+0x50>)
   14332:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   14334:	b18c      	cbz	r4, 1435a <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   14336:	4620      	mov	r0, r4
   14338:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1433a:	4a10      	ldr	r2, [pc, #64]	; (1437c <hal_ticker_instance0_caller_id_get+0x54>)
   1433c:	4910      	ldr	r1, [pc, #64]	; (14380 <hal_ticker_instance0_caller_id_get+0x58>)
   1433e:	4811      	ldr	r0, [pc, #68]	; (14384 <hal_ticker_instance0_caller_id_get+0x5c>)
   14340:	232b      	movs	r3, #43	; 0x2b
   14342:	f009 fcd4 	bl	1dcee <printk>
   14346:	4040      	eors	r0, r0
   14348:	f380 8811 	msr	BASEPRI, r0
   1434c:	f04f 0003 	mov.w	r0, #3
   14350:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   14352:	4b09      	ldr	r3, [pc, #36]	; (14378 <hal_ticker_instance0_caller_id_get+0x50>)
   14354:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   14356:	2c00      	cmp	r4, #0
   14358:	d1ed      	bne.n	14336 <hal_ticker_instance0_caller_id_get+0xe>
   1435a:	4a08      	ldr	r2, [pc, #32]	; (1437c <hal_ticker_instance0_caller_id_get+0x54>)
   1435c:	490a      	ldr	r1, [pc, #40]	; (14388 <hal_ticker_instance0_caller_id_get+0x60>)
   1435e:	4809      	ldr	r0, [pc, #36]	; (14384 <hal_ticker_instance0_caller_id_get+0x5c>)
   14360:	232e      	movs	r3, #46	; 0x2e
   14362:	f009 fcc4 	bl	1dcee <printk>
   14366:	4040      	eors	r0, r0
   14368:	f380 8811 	msr	BASEPRI, r0
   1436c:	f04f 0003 	mov.w	r0, #3
   14370:	df02      	svc	2
}
   14372:	4620      	mov	r0, r4
   14374:	bd10      	pop	{r4, pc}
   14376:	bf00      	nop
   14378:	00028140 	.word	0x00028140
   1437c:	000280c0 	.word	0x000280c0
   14380:	00028110 	.word	0x00028110
   14384:	000275f0 	.word	0x000275f0
   14388:	00028130 	.word	0x00028130

0001438c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1438c:	3801      	subs	r0, #1
{
   1438e:	b510      	push	{r4, lr}
   14390:	461c      	mov	r4, r3
   14392:	2804      	cmp	r0, #4
   14394:	d855      	bhi.n	14442 <hal_ticker_instance0_sched+0xb6>
   14396:	e8df f000 	tbb	[pc, r0]
   1439a:	1a12      	.short	0x1a12
   1439c:	1e16      	.short	0x1e16
   1439e:	03          	.byte	0x03
   1439f:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   143a0:	2904      	cmp	r1, #4
   143a2:	d01e      	beq.n	143e2 <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   143a4:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   143a6:	4a28      	ldr	r2, [pc, #160]	; (14448 <hal_ticker_instance0_sched+0xbc>)
   143a8:	4928      	ldr	r1, [pc, #160]	; (1444c <hal_ticker_instance0_sched+0xc0>)
   143aa:	4829      	ldr	r0, [pc, #164]	; (14450 <hal_ticker_instance0_sched+0xc4>)
   143ac:	f009 fc9f 	bl	1dcee <printk>
   143b0:	4040      	eors	r0, r0
   143b2:	f380 8811 	msr	BASEPRI, r0
   143b6:	f04f 0003 	mov.w	r0, #3
   143ba:	df02      	svc	2
		break;
	}
}
   143bc:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   143be:	2904      	cmp	r1, #4
   143c0:	d01f      	beq.n	14402 <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   143c2:	234e      	movs	r3, #78	; 0x4e
   143c4:	e7ef      	b.n	143a6 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   143c6:	2904      	cmp	r1, #4
   143c8:	d013      	beq.n	143f2 <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   143ca:	237c      	movs	r3, #124	; 0x7c
   143cc:	e7eb      	b.n	143a6 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   143ce:	2903      	cmp	r1, #3
   143d0:	d01f      	beq.n	14412 <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   143d2:	2365      	movs	r3, #101	; 0x65
   143d4:	e7e7      	b.n	143a6 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   143d6:	2903      	cmp	r1, #3
   143d8:	d02b      	beq.n	14432 <hal_ticker_instance0_sched+0xa6>
   143da:	2904      	cmp	r1, #4
   143dc:	d021      	beq.n	14422 <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   143de:	23a2      	movs	r3, #162	; 0xa2
   143e0:	e7e1      	b.n	143a6 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   143e2:	4b1c      	ldr	r3, [pc, #112]	; (14454 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   143e4:	2102      	movs	r1, #2
			m.param = instance;
   143e6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   143e8:	2003      	movs	r0, #3
}
   143ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   143ee:	f7f4 be67 	b.w	90c0 <mayfly_enqueue>
			m.param = instance;
   143f2:	4b19      	ldr	r3, [pc, #100]	; (14458 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   143f4:	2102      	movs	r1, #2
			m.param = instance;
   143f6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   143f8:	2001      	movs	r0, #1
}
   143fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   143fe:	f7f4 be5f 	b.w	90c0 <mayfly_enqueue>
			m.param = instance;
   14402:	4b16      	ldr	r3, [pc, #88]	; (1445c <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   14404:	2102      	movs	r1, #2
			m.param = instance;
   14406:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   14408:	2000      	movs	r0, #0
}
   1440a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1440e:	f7f4 be57 	b.w	90c0 <mayfly_enqueue>
			m.param = instance;
   14412:	4b13      	ldr	r3, [pc, #76]	; (14460 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   14414:	2101      	movs	r1, #1
			m.param = instance;
   14416:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   14418:	4608      	mov	r0, r1
}
   1441a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1441e:	f7f4 be4f 	b.w	90c0 <mayfly_enqueue>
			m.param = instance;
   14422:	4b10      	ldr	r3, [pc, #64]	; (14464 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   14424:	2102      	movs	r1, #2
			m.param = instance;
   14426:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   14428:	4608      	mov	r0, r1
}
   1442a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1442e:	f7f4 be47 	b.w	90c0 <mayfly_enqueue>
			m.param = instance;
   14432:	4b0d      	ldr	r3, [pc, #52]	; (14468 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   14434:	2101      	movs	r1, #1
			m.param = instance;
   14436:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   14438:	2002      	movs	r0, #2
}
   1443a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1443e:	f7f4 be3f 	b.w	90c0 <mayfly_enqueue>
		LL_ASSERT(0);
   14442:	23c0      	movs	r3, #192	; 0xc0
   14444:	e7af      	b.n	143a6 <hal_ticker_instance0_sched+0x1a>
   14446:	bf00      	nop
   14448:	000280c0 	.word	0x000280c0
   1444c:	00027650 	.word	0x00027650
   14450:	000275f0 	.word	0x000275f0
   14454:	200006e8 	.word	0x200006e8
   14458:	200006b8 	.word	0x200006b8
   1445c:	20000698 	.word	0x20000698
   14460:	200006a8 	.word	0x200006a8
   14464:	200006d8 	.word	0x200006d8
   14468:	200006c8 	.word	0x200006c8

0001446c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1446c:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1446e:	2000      	movs	r0, #0
   14470:	f7ff ba68 	b.w	13944 <cntr_cmp_set>

00014474 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   14474:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14478:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1447c:	3201      	adds	r2, #1
   1447e:	d008      	beq.n	14492 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   14480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14484:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   14488:	f013 0301 	ands.w	r3, r3, #1
   1448c:	d10f      	bne.n	144ae <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1448e:	2000      	movs	r0, #0
   14490:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   14492:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   14496:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1449a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1449c:	4293      	cmp	r3, r2
   1449e:	d0f6      	beq.n	1448e <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   144a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   144a4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   144a8:	f013 0301 	ands.w	r3, r3, #1
   144ac:	d0ef      	beq.n	1448e <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   144ae:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   144b2:	0c19      	lsrs	r1, r3, #16
{
   144b4:	b410      	push	{r4}
	dst[0] = val;
   144b6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   144b8:	0a0c      	lsrs	r4, r1, #8
   144ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   144be:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   144c0:	70c4      	strb	r4, [r0, #3]
   144c2:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   144c4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   144c8:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   144ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   144ce:	f063 033f 	orn	r3, r3, #63	; 0x3f
   144d2:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   144d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   144d8:	3301      	adds	r3, #1
   144da:	d035      	beq.n	14548 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   144dc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   144e0:	3301      	adds	r3, #1
   144e2:	d031      	beq.n	14548 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   144e4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   144e8:	3301      	adds	r3, #1
   144ea:	d02d      	beq.n	14548 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   144ec:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   144f0:	3301      	adds	r3, #1
   144f2:	d029      	beq.n	14548 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   144f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   144f8:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   144fa:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   144fc:	0a0c      	lsrs	r4, r1, #8
   144fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   14502:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   14504:	7244      	strb	r4, [r0, #9]
   14506:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   14508:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1450c:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1450e:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   14510:	0a0c      	lsrs	r4, r1, #8
   14512:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   14516:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   14518:	7344      	strb	r4, [r0, #13]
   1451a:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1451c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   14520:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   14522:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   14524:	0a0c      	lsrs	r4, r1, #8
   14526:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1452a:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1452c:	7444      	strb	r4, [r0, #17]
   1452e:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   14530:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   14534:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   14536:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   14538:	0a11      	lsrs	r1, r2, #8
   1453a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1453e:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   14540:	7541      	strb	r1, [r0, #21]
   14542:	74c3      	strb	r3, [r0, #19]
		return 1;
   14544:	2001      	movs	r0, #1
}
   14546:	e009      	b.n	1455c <hci_vendor_read_static_addr+0xe8>
__ssp_bos_icheck3(memset, void *, int)
   14548:	2300      	movs	r3, #0
   1454a:	f8c0 3006 	str.w	r3, [r0, #6]
   1454e:	f8c0 300a 	str.w	r3, [r0, #10]
   14552:	f8c0 300e 	str.w	r3, [r0, #14]
   14556:	f8c0 3012 	str.w	r3, [r0, #18]
   1455a:	2001      	movs	r0, #1
}
   1455c:	bc10      	pop	{r4}
   1455e:	4770      	bx	lr

00014560 <hci_vendor_read_key_hierarchy_roots>:
   14560:	2300      	movs	r3, #0
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   14562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14566:	6003      	str	r3, [r0, #0]
   14568:	6043      	str	r3, [r0, #4]
   1456a:	6083      	str	r3, [r0, #8]
   1456c:	60c3      	str	r3, [r0, #12]
   1456e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   14572:	3301      	adds	r3, #1
   14574:	d036      	beq.n	145e4 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   14576:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1457a:	3301      	adds	r3, #1
   1457c:	d032      	beq.n	145e4 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1457e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   14582:	3301      	adds	r3, #1
   14584:	d02e      	beq.n	145e4 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   14586:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1458a:	3301      	adds	r3, #1
   1458c:	d02a      	beq.n	145e4 <hci_vendor_read_key_hierarchy_roots+0x84>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1458e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
   14592:	700b      	strb	r3, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   14594:	0c18      	lsrs	r0, r3, #16
{
   14596:	b410      	push	{r4}
	dst[1] = val >> 8;
   14598:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1459c:	0a04      	lsrs	r4, r0, #8
	dst[0] = val;
   1459e:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   145a0:	70cc      	strb	r4, [r1, #3]
   145a2:	704b      	strb	r3, [r1, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   145a4:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
   145a8:	710b      	strb	r3, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   145aa:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   145ac:	0a04      	lsrs	r4, r0, #8
   145ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   145b2:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   145b4:	71cc      	strb	r4, [r1, #7]
   145b6:	714b      	strb	r3, [r1, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   145b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
   145bc:	720b      	strb	r3, [r1, #8]
	sys_put_le16(val >> 16, &dst[2]);
   145be:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   145c0:	0a04      	lsrs	r4, r0, #8
   145c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   145c6:	7288      	strb	r0, [r1, #10]
	dst[1] = val >> 8;
   145c8:	72cc      	strb	r4, [r1, #11]
   145ca:	724b      	strb	r3, [r1, #9]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   145cc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
   145d0:	730b      	strb	r3, [r1, #12]
	sys_put_le16(val >> 16, &dst[2]);
   145d2:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   145d4:	0a10      	lsrs	r0, r2, #8
   145d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   145da:	bc10      	pop	{r4}
	dst[0] = val;
   145dc:	738a      	strb	r2, [r1, #14]
	dst[1] = val >> 8;
   145de:	73c8      	strb	r0, [r1, #15]
   145e0:	734b      	strb	r3, [r1, #13]
   145e2:	4770      	bx	lr
   145e4:	2300      	movs	r3, #0
   145e6:	600b      	str	r3, [r1, #0]
   145e8:	604b      	str	r3, [r1, #4]
   145ea:	608b      	str	r3, [r1, #8]
   145ec:	60cb      	str	r3, [r1, #12]
   145ee:	4770      	bx	lr

000145f0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   145f0:	4b02      	ldr	r3, [pc, #8]	; (145fc <net_buf_pool_get+0xc>)
   145f2:	2228      	movs	r2, #40	; 0x28
   145f4:	fb02 3000 	mla	r0, r2, r0, r3
   145f8:	4770      	bx	lr
   145fa:	bf00      	nop
   145fc:	20000d88 	.word	0x20000d88

00014600 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14600:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   14602:	4a05      	ldr	r2, [pc, #20]	; (14618 <net_buf_id+0x18>)
   14604:	2128      	movs	r1, #40	; 0x28
   14606:	fb01 2303 	mla	r3, r1, r3, r2
   1460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1460c:	1ac0      	subs	r0, r0, r3
}
   1460e:	4b03      	ldr	r3, [pc, #12]	; (1461c <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   14610:	10c0      	asrs	r0, r0, #3
}
   14612:	4358      	muls	r0, r3
   14614:	4770      	bx	lr
   14616:	bf00      	nop
   14618:	20000d88 	.word	0x20000d88
   1461c:	aaaaaaab 	.word	0xaaaaaaab

00014620 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   14620:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14622:	4a0a      	ldr	r2, [pc, #40]	; (1464c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14624:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14626:	2428      	movs	r4, #40	; 0x28
   14628:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1462c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1462e:	6a1b      	ldr	r3, [r3, #32]
   14630:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   14632:	6823      	ldr	r3, [r4, #0]
   14634:	429a      	cmp	r2, r3
   14636:	bf94      	ite	ls
   14638:	600a      	strls	r2, [r1, #0]
   1463a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1463c:	f7ff ffe0 	bl	14600 <net_buf_id>
   14640:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   14644:	fb02 3000 	mla	r0, r2, r0, r3
   14648:	bd10      	pop	{r4, pc}
   1464a:	bf00      	nop
   1464c:	20000d88 	.word	0x20000d88

00014650 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   14650:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   14654:	4605      	mov	r5, r0
   14656:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   14658:	4610      	mov	r0, r2
   1465a:	4619      	mov	r1, r3
{
   1465c:	4616      	mov	r6, r2
   1465e:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   14660:	f012 f81a 	bl	26698 <z_timeout_end_calc>
   14664:	4680      	mov	r8, r0
   14666:	4689      	mov	r9, r1
	__asm__ volatile(
   14668:	f04f 0320 	mov.w	r3, #32
   1466c:	f3ef 8a11 	mrs	sl, BASEPRI
   14670:	f383 8811 	msr	BASEPRI, r3
   14674:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   14678:	8b6b      	ldrh	r3, [r5, #26]
   1467a:	2b00      	cmp	r3, #0
   1467c:	d054      	beq.n	14728 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1467e:	8b2a      	ldrh	r2, [r5, #24]
   14680:	429a      	cmp	r2, r3
   14682:	d93d      	bls.n	14700 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   14684:	2200      	movs	r2, #0
   14686:	2300      	movs	r3, #0
   14688:	4628      	mov	r0, r5
   1468a:	f006 f8b7 	bl	1a7fc <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1468e:	4604      	mov	r4, r0
   14690:	2800      	cmp	r0, #0
   14692:	d035      	beq.n	14700 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   14694:	f38a 8811 	msr	BASEPRI, sl
   14698:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1469c:	9b01      	ldr	r3, [sp, #4]
   1469e:	2b00      	cmp	r3, #0
   146a0:	d052      	beq.n	14748 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   146a2:	ea56 0307 	orrs.w	r3, r6, r7
   146a6:	d010      	beq.n	146ca <net_buf_alloc_len+0x7a>
   146a8:	1c7b      	adds	r3, r7, #1
   146aa:	bf08      	it	eq
   146ac:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   146b0:	d00b      	beq.n	146ca <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   146b2:	f006 ff47 	bl	1b544 <z_tick_get>
   146b6:	ebb8 0600 	subs.w	r6, r8, r0
   146ba:	eb69 0701 	sbc.w	r7, r9, r1
   146be:	2e00      	cmp	r6, #0
   146c0:	f177 0300 	sbcs.w	r3, r7, #0
   146c4:	bfbc      	itt	lt
   146c6:	2600      	movlt	r6, #0
   146c8:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   146ca:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   146cc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 14760 <net_buf_alloc_len+0x110>
   146d0:	2228      	movs	r2, #40	; 0x28
   146d2:	fb02 8303 	mla	r3, r2, r3, r8
   146d6:	a901      	add	r1, sp, #4
   146d8:	6a1b      	ldr	r3, [r3, #32]
   146da:	681b      	ldr	r3, [r3, #0]
   146dc:	4632      	mov	r2, r6
   146de:	681d      	ldr	r5, [r3, #0]
   146e0:	4620      	mov	r0, r4
   146e2:	463b      	mov	r3, r7
   146e4:	47a8      	blx	r5
   146e6:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   146e8:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   146ea:	bb70      	cbnz	r0, 1474a <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   146ec:	79a0      	ldrb	r0, [r4, #6]
   146ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   146f2:	4621      	mov	r1, r4
   146f4:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   146f8:	f011 fdaa 	bl	26250 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   146fc:	462c      	mov	r4, r5
}
   146fe:	e01f      	b.n	14740 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   14700:	8b68      	ldrh	r0, [r5, #26]
   14702:	1e43      	subs	r3, r0, #1
   14704:	836b      	strh	r3, [r5, #26]
   14706:	f38a 8811 	msr	BASEPRI, sl
   1470a:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1470e:	8b2c      	ldrh	r4, [r5, #24]
   14710:	1a24      	subs	r4, r4, r0
   14712:	6a68      	ldr	r0, [r5, #36]	; 0x24
   14714:	2318      	movs	r3, #24
   14716:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1471a:	4811      	ldr	r0, [pc, #68]	; (14760 <net_buf_alloc_len+0x110>)
   1471c:	4b11      	ldr	r3, [pc, #68]	; (14764 <net_buf_alloc_len+0x114>)
   1471e:	1a2d      	subs	r5, r5, r0
   14720:	10ed      	asrs	r5, r5, #3
   14722:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   14724:	71a5      	strb	r5, [r4, #6]
		goto success;
   14726:	e7b9      	b.n	1469c <net_buf_alloc_len+0x4c>
   14728:	f38a 8811 	msr	BASEPRI, sl
   1472c:	f3bf 8f6f 	isb	sy
   14730:	4632      	mov	r2, r6
   14732:	463b      	mov	r3, r7
   14734:	4628      	mov	r0, r5
   14736:	f006 f861 	bl	1a7fc <z_impl_k_queue_get>
	if (!buf) {
   1473a:	4604      	mov	r4, r0
   1473c:	2800      	cmp	r0, #0
   1473e:	d1ad      	bne.n	1469c <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   14740:	4620      	mov	r0, r4
   14742:	b002      	add	sp, #8
   14744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   14748:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1474a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1474c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1474e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   14750:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   14752:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   14754:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   14756:	6923      	ldr	r3, [r4, #16]
   14758:	81e2      	strh	r2, [r4, #14]
   1475a:	60a3      	str	r3, [r4, #8]
	return buf;
   1475c:	e7f0      	b.n	14740 <net_buf_alloc_len+0xf0>
   1475e:	bf00      	nop
   14760:	20000d88 	.word	0x20000d88
   14764:	cccccccd 	.word	0xcccccccd

00014768 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   14768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1476c:	4d17      	ldr	r5, [pc, #92]	; (147cc <net_buf_unref+0x64>)
   1476e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   14770:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   14772:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   14774:	b90c      	cbnz	r4, 1477a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   14776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1477a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1477c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   14780:	3b01      	subs	r3, #1
   14782:	b2db      	uxtb	r3, r3
   14784:	7123      	strb	r3, [r4, #4]
   14786:	2b00      	cmp	r3, #0
   14788:	d1f5      	bne.n	14776 <net_buf_unref+0xe>
		if (buf->__buf) {
   1478a:	6921      	ldr	r1, [r4, #16]
   1478c:	b159      	cbz	r1, 147a6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1478e:	7963      	ldrb	r3, [r4, #5]
   14790:	079b      	lsls	r3, r3, #30
   14792:	d407      	bmi.n	147a4 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   14794:	79a3      	ldrb	r3, [r4, #6]
   14796:	fb07 5303 	mla	r3, r7, r3, r5
   1479a:	4620      	mov	r0, r4
   1479c:	6a1b      	ldr	r3, [r3, #32]
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	689b      	ldr	r3, [r3, #8]
   147a2:	4798      	blx	r3
			buf->__buf = NULL;
   147a4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   147a6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   147a8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   147aa:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   147ae:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   147b0:	69db      	ldr	r3, [r3, #28]
   147b2:	b11b      	cbz	r3, 147bc <net_buf_unref+0x54>
			pool->destroy(buf);
   147b4:	4620      	mov	r0, r4
   147b6:	4798      	blx	r3
{
   147b8:	4644      	mov	r4, r8
   147ba:	e7db      	b.n	14774 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   147bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   147c0:	4621      	mov	r1, r4
   147c2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   147c6:	f011 fd43 	bl	26250 <k_queue_prepend>
}
   147ca:	e7f5      	b.n	147b8 <net_buf_unref+0x50>
   147cc:	20000d88 	.word	0x20000d88

000147d0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   147d0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   147d2:	4b09      	ldr	r3, [pc, #36]	; (147f8 <gpio_nrfx_init+0x28>)
   147d4:	781a      	ldrb	r2, [r3, #0]
   147d6:	b96a      	cbnz	r2, 147f4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   147d8:	2101      	movs	r1, #1
   147da:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   147dc:	2006      	movs	r0, #6
   147de:	2105      	movs	r1, #5
   147e0:	f7ef ff44 	bl	466c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   147e4:	2006      	movs	r0, #6
   147e6:	f7ef ff0f 	bl	4608 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   147ea:	4b04      	ldr	r3, [pc, #16]	; (147fc <gpio_nrfx_init+0x2c>)
   147ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   147f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   147f4:	2000      	movs	r0, #0
   147f6:	bd08      	pop	{r3, pc}
   147f8:	20002f86 	.word	0x20002f86
   147fc:	40006000 	.word	0x40006000

00014800 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14800:	4b2a      	ldr	r3, [pc, #168]	; (148ac <gpio_nrfx_config+0xac>)
{
   14802:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14804:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14806:	482a      	ldr	r0, [pc, #168]	; (148b0 <gpio_nrfx_config+0xb0>)
   14808:	4013      	ands	r3, r2
   1480a:	4283      	cmp	r3, r0
   1480c:	d03e      	beq.n	1488c <gpio_nrfx_config+0x8c>
   1480e:	d80d      	bhi.n	1482c <gpio_nrfx_config+0x2c>
   14810:	2b06      	cmp	r3, #6
   14812:	d015      	beq.n	14840 <gpio_nrfx_config+0x40>
   14814:	d805      	bhi.n	14822 <gpio_nrfx_config+0x22>
   14816:	b19b      	cbz	r3, 14840 <gpio_nrfx_config+0x40>
   14818:	2b02      	cmp	r3, #2
   1481a:	d039      	beq.n	14890 <gpio_nrfx_config+0x90>
   1481c:	f06f 0015 	mvn.w	r0, #21
   14820:	e033      	b.n	1488a <gpio_nrfx_config+0x8a>
   14822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14826:	d1f9      	bne.n	1481c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   14828:	2301      	movs	r3, #1
   1482a:	e009      	b.n	14840 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1482c:	4821      	ldr	r0, [pc, #132]	; (148b4 <gpio_nrfx_config+0xb4>)
   1482e:	4283      	cmp	r3, r0
   14830:	d030      	beq.n	14894 <gpio_nrfx_config+0x94>
   14832:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   14836:	d02f      	beq.n	14898 <gpio_nrfx_config+0x98>
   14838:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1483c:	d1ee      	bne.n	1481c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1483e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   14840:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   14842:	bf54      	ite	pl
   14844:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   14848:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1484a:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1484e:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   14852:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14856:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1485a:	d007      	beq.n	1486c <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1485c:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14860:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14862:	d01b      	beq.n	1489c <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   14864:	2201      	movs	r2, #1
   14866:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   14868:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1486c:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   14870:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   14874:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14878:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1487c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   14880:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14884:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   14888:	2000      	movs	r0, #0
}
   1488a:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1488c:	2307      	movs	r3, #7
   1488e:	e7d7      	b.n	14840 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   14890:	2304      	movs	r3, #4
   14892:	e7d5      	b.n	14840 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   14894:	2305      	movs	r3, #5
   14896:	e7d3      	b.n	14840 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   14898:	2303      	movs	r3, #3
   1489a:	e7d1      	b.n	14840 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1489c:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1489e:	bf42      	ittt	mi
   148a0:	2201      	movmi	r2, #1
   148a2:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   148a4:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   148a8:	e7e0      	b.n	1486c <gpio_nrfx_config+0x6c>
   148aa:	bf00      	nop
   148ac:	00f00006 	.word	0x00f00006
   148b0:	00100006 	.word	0x00100006
   148b4:	00400002 	.word	0x00400002

000148b8 <gpio_nrfx_pin_interrupt_configure>:
{
   148b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   148ba:	460c      	mov	r4, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   148bc:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   148be:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   148c0:	7a08      	ldrb	r0, [r1, #8]
   148c2:	f004 051f 	and.w	r5, r4, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   148c6:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   148ca:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
   148ce:	d10c      	bne.n	148ea <gpio_nrfx_pin_interrupt_configure+0x32>
    *p_pin = pin_number & 0x1F;
   148d0:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   148d4:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   148d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   148dc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   148e0:	07cf      	lsls	r7, r1, #31
   148e2:	d507      	bpl.n	148f4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   148e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   148e8:	e0bd      	b.n	14a66 <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   148ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   148ee:	68f1      	ldr	r1, [r6, #12]
   148f0:	f000 80aa 	beq.w	14a48 <gpio_nrfx_pin_interrupt_configure+0x190>
   148f4:	68f0      	ldr	r0, [r6, #12]
   148f6:	2101      	movs	r1, #1
   148f8:	40a1      	lsls	r1, r4
   148fa:	4301      	orrs	r1, r0
   148fc:	6970      	ldr	r0, [r6, #20]
   148fe:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14900:	2101      	movs	r1, #1
   14902:	40a1      	lsls	r1, r4
   14904:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   14908:	69b2      	ldr	r2, [r6, #24]
   1490a:	bf0c      	ite	eq
   1490c:	4308      	orreq	r0, r1
   1490e:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   14910:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   14914:	bf0c      	ite	eq
   14916:	430a      	orreq	r2, r1
   14918:	438a      	bicne	r2, r1
   1491a:	61b2      	str	r2, [r6, #24]
   1491c:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1491e:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14920:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   14924:	bf0c      	ite	eq
   14926:	4311      	orreq	r1, r2
   14928:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1492c:	4a54      	ldr	r2, [pc, #336]	; (14a80 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
   1492e:	6131      	str	r1, [r6, #16]
   14930:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14934:	2300      	movs	r3, #0
   14936:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14938:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1493c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   14940:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   14944:	4285      	cmp	r5, r0
   14946:	f040 8084 	bne.w	14a52 <gpio_nrfx_pin_interrupt_configure+0x19a>
		    && (intenset & BIT(i))) {
   1494a:	fa21 f003 	lsr.w	r0, r1, r3
   1494e:	07c0      	lsls	r0, r0, #31
   14950:	d57f      	bpl.n	14a52 <gpio_nrfx_pin_interrupt_configure+0x19a>
			(void)atomic_and(mask, ~BIT(i));
   14952:	2101      	movs	r1, #1
   14954:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14956:	484b      	ldr	r0, [pc, #300]	; (14a84 <gpio_nrfx_pin_interrupt_configure+0x1cc>)
   14958:	f3bf 8f5b 	dmb	ish
   1495c:	43cf      	mvns	r7, r1
   1495e:	e850 cf00 	ldrex	ip, [r0]
   14962:	ea0c 0c07 	and.w	ip, ip, r7
   14966:	e840 ce00 	strex	lr, ip, [r0]
   1496a:	f1be 0f00 	cmp.w	lr, #0
   1496e:	d1f6      	bne.n	1495e <gpio_nrfx_pin_interrupt_configure+0xa6>
   14970:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   14974:	009b      	lsls	r3, r3, #2
   14976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1497a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1497e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   14982:	f020 0001 	bic.w	r0, r0, #1
   14986:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1498a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1498e:	2100      	movs	r1, #0
   14990:	4628      	mov	r0, r5
   14992:	f00c fab5 	bl	20f00 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   14996:	68f3      	ldr	r3, [r6, #12]
   14998:	40e3      	lsrs	r3, r4
   1499a:	f013 0301 	ands.w	r3, r3, #1
   1499e:	d051      	beq.n	14a44 <gpio_nrfx_pin_interrupt_configure+0x18c>
		if (data->trig_edge & BIT(pin)) {
   149a0:	6973      	ldr	r3, [r6, #20]
   149a2:	40e3      	lsrs	r3, r4
   149a4:	f013 0201 	ands.w	r2, r3, #1
   149a8:	d05e      	beq.n	14a68 <gpio_nrfx_pin_interrupt_configure+0x1b0>
			if (data->double_edge & BIT(pin)) {
   149aa:	69b3      	ldr	r3, [r6, #24]
   149ac:	40e3      	lsrs	r3, r4
   149ae:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   149b0:	bf5f      	itttt	pl
   149b2:	6931      	ldrpl	r1, [r6, #16]
   149b4:	fa21 f404 	lsrpl.w	r4, r1, r4
   149b8:	f004 0401 	andpl.w	r4, r4, #1
   149bc:	f1c4 0402 	rsbpl	r4, r4, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   149c0:	4930      	ldr	r1, [pc, #192]	; (14a84 <gpio_nrfx_pin_interrupt_configure+0x1cc>)
   149c2:	bf54      	ite	pl
   149c4:	b2e4      	uxtbpl	r4, r4
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   149c6:	2403      	movmi	r4, #3
   149c8:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   149ca:	2701      	movs	r7, #1
   149cc:	fa07 f602 	lsl.w	r6, r7, r2
   149d0:	f3bf 8f5b 	dmb	ish
   149d4:	e851 0f00 	ldrex	r0, [r1]
   149d8:	ea40 0306 	orr.w	r3, r0, r6
   149dc:	e841 3c00 	strex	ip, r3, [r1]
   149e0:	f1bc 0f00 	cmp.w	ip, #0
   149e4:	d1f6      	bne.n	149d4 <gpio_nrfx_pin_interrupt_configure+0x11c>
   149e6:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   149ea:	40d0      	lsrs	r0, r2
   149ec:	f010 0301 	ands.w	r3, r0, #1
   149f0:	d134      	bne.n	14a5c <gpio_nrfx_pin_interrupt_configure+0x1a4>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   149f2:	0091      	lsls	r1, r2, #2
   149f4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   149f8:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   149fc:	3240      	adds	r2, #64	; 0x40
   149fe:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   14a02:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   14a06:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   14a0a:	0092      	lsls	r2, r2, #2
   14a0c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14a10:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
   14a12:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14a14:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   14a18:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   14a1c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14a20:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14a24:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   14a28:	4305      	orrs	r5, r0
   14a2a:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14a2e:	6013      	str	r3, [r2, #0]
   14a30:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14a32:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   14a36:	f042 0201 	orr.w	r2, r2, #1
   14a3a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   14a3e:	4a10      	ldr	r2, [pc, #64]	; (14a80 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
   14a40:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304
	int res = 0;
   14a44:	4618      	mov	r0, r3
   14a46:	e00e      	b.n	14a66 <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14a48:	2001      	movs	r0, #1
   14a4a:	40a0      	lsls	r0, r4
   14a4c:	ea21 0100 	bic.w	r1, r1, r0
   14a50:	e754      	b.n	148fc <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14a52:	3301      	adds	r3, #1
   14a54:	2b08      	cmp	r3, #8
   14a56:	f47f af6f 	bne.w	14938 <gpio_nrfx_pin_interrupt_configure+0x80>
   14a5a:	e798      	b.n	1498e <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   14a5c:	3201      	adds	r2, #1
   14a5e:	2a08      	cmp	r2, #8
   14a60:	d1b4      	bne.n	149cc <gpio_nrfx_pin_interrupt_configure+0x114>
	return -ENODEV;
   14a62:	f06f 0012 	mvn.w	r0, #18
}
   14a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14a68:	6931      	ldr	r1, [r6, #16]
   14a6a:	40e1      	lsrs	r1, r4
   14a6c:	f001 0101 	and.w	r1, r1, #1
   14a70:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14a74:	4628      	mov	r0, r5
   14a76:	b2c9      	uxtb	r1, r1
   14a78:	f00c fa42 	bl	20f00 <nrf_gpio_cfg_sense_set>
	int res = 0;
   14a7c:	4610      	mov	r0, r2
   14a7e:	e7f2      	b.n	14a66 <gpio_nrfx_pin_interrupt_configure+0x1ae>
   14a80:	40006000 	.word	0x40006000
   14a84:	20002c1c 	.word	0x20002c1c

00014a88 <gpiote_event_handler>:
{
   14a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14a8c:	4d3f      	ldr	r5, [pc, #252]	; (14b8c <gpiote_event_handler+0x104>)
   14a8e:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
   14a90:	2e00      	cmp	r6, #0
   14a92:	d04e      	beq.n	14b32 <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
   14a94:	4b3e      	ldr	r3, [pc, #248]	; (14b90 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   14a96:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   14a9a:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   14a9c:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   14a9e:	4301      	orrs	r1, r0
   14aa0:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
   14aa4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
   14aa8:	2701      	movs	r7, #1
   14aaa:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   14aae:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   14ab0:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
   14ab4:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
   14ab8:	bb72      	cbnz	r2, 14b18 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14aba:	602a      	str	r2, [r5, #0]
   14abc:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   14abe:	4835      	ldr	r0, [pc, #212]	; (14b94 <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   14ac0:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   14ac2:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14ac4:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   14ac6:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   14aca:	fa05 f103 	lsl.w	r1, r5, r3
   14ace:	4211      	tst	r1, r2
   14ad0:	d011      	beq.n	14af6 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ad2:	009a      	lsls	r2, r3, #2
   14ad4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14ad8:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   14adc:	6811      	ldr	r1, [r2, #0]
   14ade:	b151      	cbz	r1, 14af6 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14ae0:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   14ae4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14ae8:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14aea:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   14aee:	fa05 f101 	lsl.w	r1, r5, r1
   14af2:	6812      	ldr	r2, [r2, #0]
   14af4:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14af6:	3301      	adds	r3, #1
   14af8:	2b08      	cmp	r3, #8
   14afa:	d1e4      	bne.n	14ac6 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   14afc:	b9dc      	cbnz	r4, 14b36 <gpiote_event_handler+0xae>
	if (port_event) {
   14afe:	b14e      	cbz	r6, 14b14 <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
   14b00:	4c23      	ldr	r4, [pc, #140]	; (14b90 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   14b02:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
   14b06:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   14b08:	4301      	orrs	r1, r0
   14b0a:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
   14b0e:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   14b10:	2600      	movs	r6, #0
	while (level_pins) {
   14b12:	bb42      	cbnz	r2, 14b66 <gpiote_event_handler+0xde>
}
   14b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   14b18:	423a      	tst	r2, r7
   14b1a:	d006      	beq.n	14b2a <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   14b1c:	2100      	movs	r1, #0
   14b1e:	f008 001f 	and.w	r0, r8, #31
   14b22:	f00c f9ed 	bl	20f00 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   14b26:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
   14b2a:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   14b2e:	007f      	lsls	r7, r7, #1
   14b30:	e7c2      	b.n	14ab8 <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   14b32:	4634      	mov	r4, r6
   14b34:	e7c3      	b.n	14abe <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14b36:	4b16      	ldr	r3, [pc, #88]	; (14b90 <gpiote_event_handler+0x108>)
   14b38:	6859      	ldr	r1, [r3, #4]
   14b3a:	2900      	cmp	r1, #0
   14b3c:	d0df      	beq.n	14afe <gpiote_event_handler+0x76>
	return node->next;
   14b3e:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   14b40:	4f15      	ldr	r7, [pc, #84]	; (14b98 <gpiote_event_handler+0x110>)
   14b42:	2d00      	cmp	r5, #0
   14b44:	bf38      	it	cc
   14b46:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   14b48:	688a      	ldr	r2, [r1, #8]
   14b4a:	4022      	ands	r2, r4
   14b4c:	d002      	beq.n	14b54 <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
   14b4e:	684b      	ldr	r3, [r1, #4]
   14b50:	4638      	mov	r0, r7
   14b52:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14b54:	2d00      	cmp	r5, #0
   14b56:	d0d2      	beq.n	14afe <gpiote_event_handler+0x76>
   14b58:	682b      	ldr	r3, [r5, #0]
   14b5a:	2b00      	cmp	r3, #0
   14b5c:	bf38      	it	cc
   14b5e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14b60:	4629      	mov	r1, r5
   14b62:	461d      	mov	r5, r3
   14b64:	e7f0      	b.n	14b48 <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
   14b66:	4215      	tst	r5, r2
   14b68:	d00c      	beq.n	14b84 <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14b6a:	6921      	ldr	r1, [r4, #16]
   14b6c:	40f1      	lsrs	r1, r6
   14b6e:	f001 0101 	and.w	r1, r1, #1
   14b72:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14b76:	b2c9      	uxtb	r1, r1
   14b78:	f006 001f 	and.w	r0, r6, #31
   14b7c:	f00c f9c0 	bl	20f00 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   14b80:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   14b84:	3601      	adds	r6, #1
		bit <<= 1;
   14b86:	006d      	lsls	r5, r5, #1
   14b88:	e7c3      	b.n	14b12 <gpiote_event_handler+0x8a>
   14b8a:	bf00      	nop
   14b8c:	4000617c 	.word	0x4000617c
   14b90:	20002c00 	.word	0x20002c00
   14b94:	40006000 	.word	0x40006000
   14b98:	20000c1c 	.word	0x20000c1c

00014b9c <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   14b9c:	4b01      	ldr	r3, [pc, #4]	; (14ba4 <hfclk_on_callback+0x8>)
   14b9e:	2201      	movs	r2, #1
   14ba0:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
   14ba2:	4770      	bx	lr
   14ba4:	4000c000 	.word	0x4000c000

00014ba8 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
   14ba8:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
   14baa:	68c3      	ldr	r3, [r0, #12]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   14bac:	d10b      	bne.n	14bc6 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   14bae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   14bb0:	4b06      	ldr	r3, [pc, #24]	; (14bcc <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
   14bb2:	4807      	ldr	r0, [pc, #28]	; (14bd0 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   14bb4:	4359      	muls	r1, r3
	val->val1 = uval / 1000000;
   14bb6:	fb91 f3f0 	sdiv	r3, r1, r0
   14bba:	6013      	str	r3, [r2, #0]
	val->val2 = uval % 1000000;
   14bbc:	fb00 1313 	mls	r3, r0, r3, r1
   14bc0:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   14bc2:	2000      	movs	r0, #0
   14bc4:	4770      	bx	lr
		return -ENOTSUP;
   14bc6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   14bca:	4770      	bx	lr
   14bcc:	0003d090 	.word	0x0003d090
   14bd0:	000f4240 	.word	0x000f4240

00014bd4 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14bd4:	4b03      	ldr	r3, [pc, #12]	; (14be4 <temp_nrf5_isr+0x10>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
   14bd6:	68c0      	ldr	r0, [r0, #12]
   14bd8:	2200      	movs	r2, #0
   14bda:	601a      	str	r2, [r3, #0]
   14bdc:	681b      	ldr	r3, [r3, #0]
	z_impl_k_sem_give(sem);
   14bde:	f006 b9d1 	b.w	1af84 <z_impl_k_sem_give>
   14be2:	bf00      	nop
   14be4:	4000c100 	.word	0x4000c100

00014be8 <temp_nrf5_init>:
};

DEVICE_DECLARE(temp_nrf5);

static int temp_nrf5_init(const struct device *dev)
{
   14be8:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
   14bea:	68c4      	ldr	r4, [r0, #12]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   14bec:	2000      	movs	r0, #0
   14bee:	f7ef f9d7 	bl	3fa0 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
   14bf2:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
   14bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14bf8:	2100      	movs	r1, #0
   14bfa:	4620      	mov	r0, r4
   14bfc:	f011 fc69 	bl	264d2 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   14c00:	f104 0018 	add.w	r0, r4, #24
   14c04:	f011 fa95 	bl	26132 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, UINT_MAX);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
   14c08:	2200      	movs	r2, #0
   14c0a:	2101      	movs	r1, #1
   14c0c:	200c      	movs	r0, #12
   14c0e:	f7ef fd2d 	bl	466c <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_GET(temp_nrf5),
		0);
	irq_enable(DT_INST_IRQN(0));
   14c12:	200c      	movs	r0, #12
   14c14:	f7ef fcf8 	bl	4608 <arch_irq_enable>
    p_reg->INTENSET = mask;
   14c18:	4b02      	ldr	r3, [pc, #8]	; (14c24 <temp_nrf5_init+0x3c>)
   14c1a:	2201      	movs	r2, #1
   14c1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
   14c20:	2000      	movs	r0, #0
   14c22:	bd10      	pop	{r4, pc}
   14c24:	4000c000 	.word	0x4000c000

00014c28 <temp_nrf5_sample_fetch>:
{
   14c28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
   14c2a:	68c5      	ldr	r5, [r0, #12]
	if (data->clk_mgr == NULL) {
   14c2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14c2e:	b36b      	cbz	r3, 14c8c <temp_nrf5_sample_fetch+0x64>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   14c30:	2938      	cmp	r1, #56	; 0x38
   14c32:	d001      	beq.n	14c38 <temp_nrf5_sample_fetch+0x10>
   14c34:	290c      	cmp	r1, #12
   14c36:	d12c      	bne.n	14c92 <temp_nrf5_sample_fetch+0x6a>
	k_mutex_lock(&data->mutex, K_FOREVER);
   14c38:	f105 0618 	add.w	r6, r5, #24
	return z_impl_k_mutex_lock(mutex, timeout);
   14c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c44:	4630      	mov	r0, r6
   14c46:	f005 fd19 	bl	1a67c <z_impl_k_mutex_lock>
	*notify = (struct sys_notify){
   14c4a:	4b13      	ldr	r3, [pc, #76]	; (14c98 <temp_nrf5_sample_fetch+0x70>)
   14c4c:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
   14c4e:	6b28      	ldr	r0, [r5, #48]	; 0x30
   14c50:	2303      	movs	r3, #3
   14c52:	2400      	movs	r4, #0
   14c54:	4669      	mov	r1, sp
   14c56:	9403      	str	r4, [sp, #12]
   14c58:	9302      	str	r3, [sp, #8]
   14c5a:	f009 f8c4 	bl	1dde6 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
   14c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c66:	4628      	mov	r0, r5
   14c68:	f006 f9b2 	bl	1afd0 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
   14c6c:	6b28      	ldr	r0, [r5, #48]	; 0x30
   14c6e:	f009 f903 	bl	1de78 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
   14c72:	4b0a      	ldr	r3, [pc, #40]	; (14c9c <temp_nrf5_sample_fetch+0x74>)
   14c74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
   14c78:	62eb      	str	r3, [r5, #44]	; 0x2c
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   14c7a:	4b09      	ldr	r3, [pc, #36]	; (14ca0 <temp_nrf5_sample_fetch+0x78>)
   14c7c:	2201      	movs	r2, #1
   14c7e:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   14c80:	4630      	mov	r0, r6
   14c82:	f005 fd73 	bl	1a76c <z_impl_k_mutex_unlock>
	return 0;
   14c86:	4620      	mov	r0, r4
}
   14c88:	b004      	add	sp, #16
   14c8a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   14c8c:	f06f 000a 	mvn.w	r0, #10
   14c90:	e7fa      	b.n	14c88 <temp_nrf5_sample_fetch+0x60>
		return -ENOTSUP;
   14c92:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14c96:	e7f7      	b.n	14c88 <temp_nrf5_sample_fetch+0x60>
   14c98:	00014b9d 	.word	0x00014b9d
   14c9c:	4000c000 	.word	0x4000c000
   14ca0:	4000c004 	.word	0x4000c004

00014ca4 <init_spi>:
		transfer_next_chunk(dev_data->dev);
	}
}

static int init_spi(const struct device *dev)
{
   14ca4:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   14ca6:	68c4      	ldr	r4, [r0, #12]
	dev_data->dev = dev;

	/* This sets only default values of frequency, mode and bit order.
	 * The proper ones are set in configure() when a transfer is started.
	 */
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   14ca8:	4a08      	ldr	r2, [pc, #32]	; (14ccc <init_spi+0x28>)
	dev_data->dev = dev;
   14caa:	65e0      	str	r0, [r4, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   14cac:	6840      	ldr	r0, [r0, #4]
   14cae:	4623      	mov	r3, r4
   14cb0:	f100 0108 	add.w	r1, r0, #8
   14cb4:	f000 fe8a 	bl	159cc <nrfx_spi_init>
			       &get_dev_config(dev)->config,
			       event_handler,
			       dev_data);
	if (result != NRFX_SUCCESS) {
   14cb8:	4b05      	ldr	r3, [pc, #20]	; (14cd0 <init_spi+0x2c>)
   14cba:	4298      	cmp	r0, r3
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
	}

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	dev_data->pm_state = DEVICE_PM_ACTIVE_STATE;
   14cbc:	bf03      	ittte	eq
   14cbe:	2301      	moveq	r3, #1
   14cc0:	66a3      	streq	r3, [r4, #104]	; 0x68
#endif

	return 0;
   14cc2:	2000      	moveq	r0, #0
		return -EBUSY;
   14cc4:	f06f 000f 	mvnne.w	r0, #15
}
   14cc8:	bd10      	pop	{r4, pc}
   14cca:	bf00      	nop
   14ccc:	000210fb 	.word	0x000210fb
   14cd0:	0bad0000 	.word	0x0bad0000

00014cd4 <transfer_next_chunk>:
{
   14cd4:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   14cd6:	68c5      	ldr	r5, [r0, #12]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   14cd8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   14cda:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   14cdc:	b085      	sub	sp, #20
   14cde:	b982      	cbnz	r2, 14d02 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   14ce0:	bb73      	cbnz	r3, 14d40 <transfer_next_chunk+0x6c>
	int error = 0;
   14ce2:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   14ce4:	2200      	movs	r2, #0
   14ce6:	4611      	mov	r1, r2
   14ce8:	4628      	mov	r0, r5
   14cea:	f00c f9af 	bl	2104c <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   14cee:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   14cf0:	f105 0020 	add.w	r0, r5, #32
   14cf4:	f006 f946 	bl	1af84 <z_impl_k_sem_give>
	dev_data->busy = false;
   14cf8:	2300      	movs	r3, #0
   14cfa:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   14cfe:	b005      	add	sp, #20
   14d00:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   14d02:	4611      	mov	r1, r2
   14d04:	b113      	cbz	r3, 14d0c <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   14d06:	429a      	cmp	r2, r3
   14d08:	bf28      	it	cs
   14d0a:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   14d0c:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   14d0e:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   14d10:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   14d12:	b1bc      	cbz	r4, 14d44 <transfer_next_chunk+0x70>
   14d14:	2a00      	cmp	r2, #0
   14d16:	bf18      	it	ne
   14d18:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   14d1a:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   14d1c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   14d1e:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   14d20:	b192      	cbz	r2, 14d48 <transfer_next_chunk+0x74>
   14d22:	2b00      	cmp	r3, #0
   14d24:	bf18      	it	ne
   14d26:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   14d28:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   14d2a:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   14d2c:	2200      	movs	r2, #0
   14d2e:	4669      	mov	r1, sp
   14d30:	f000 ff3c 	bl	15bac <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   14d34:	4b05      	ldr	r3, [pc, #20]	; (14d4c <transfer_next_chunk+0x78>)
   14d36:	4298      	cmp	r0, r3
   14d38:	d0e1      	beq.n	14cfe <transfer_next_chunk+0x2a>
		error = -EIO;
   14d3a:	f06f 0404 	mvn.w	r4, #4
   14d3e:	e7d1      	b.n	14ce4 <transfer_next_chunk+0x10>
   14d40:	4619      	mov	r1, r3
   14d42:	e7e3      	b.n	14d0c <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   14d44:	4622      	mov	r2, r4
   14d46:	e7e8      	b.n	14d1a <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   14d48:	4613      	mov	r3, r2
   14d4a:	e7ed      	b.n	14d28 <transfer_next_chunk+0x54>
   14d4c:	0bad0000 	.word	0x0bad0000

00014d50 <spi_nrfx_transceive>:
{
   14d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d54:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   14d56:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   14d58:	68c4      	ldr	r4, [r0, #12]
   14d5a:	045b      	lsls	r3, r3, #17
{
   14d5c:	4680      	mov	r8, r0
   14d5e:	460d      	mov	r5, r1
   14d60:	4617      	mov	r7, r2
   14d62:	f100 80ac 	bmi.w	14ebe <spi_nrfx_transceive+0x16e>
	return z_impl_k_sem_take(sem, timeout);
   14d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d6e:	f104 0008 	add.w	r0, r4, #8
   14d72:	f006 f92d 	bl	1afd0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   14d76:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   14d78:	f8d8 200c 	ldr.w	r2, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   14d7c:	6813      	ldr	r3, [r2, #0]
   14d7e:	429d      	cmp	r5, r3
   14d80:	d066      	beq.n	14e50 <spi_nrfx_transceive+0x100>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   14d82:	88ab      	ldrh	r3, [r5, #4]
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   14d84:	f641 0109 	movw	r1, #6153	; 0x1809
   14d88:	420b      	tst	r3, r1
   14d8a:	f040 80c4 	bne.w	14f16 <spi_nrfx_transceive+0x1c6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   14d8e:	f3c3 1345 	ubfx	r3, r3, #5, #6
   14d92:	2b08      	cmp	r3, #8
   14d94:	f040 80bf 	bne.w	14f16 <spi_nrfx_transceive+0x1c6>
	if (spi_cfg->frequency < 125000) {
   14d98:	6829      	ldr	r1, [r5, #0]
   14d9a:	4b60      	ldr	r3, [pc, #384]	; (14f1c <spi_nrfx_transceive+0x1cc>)
   14d9c:	4299      	cmp	r1, r3
   14d9e:	f240 80ba 	bls.w	14f16 <spi_nrfx_transceive+0x1c6>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   14da2:	68ab      	ldr	r3, [r5, #8]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
   14da4:	f8d8 b004 	ldr.w	fp, [r8, #4]
	ctx->config = spi_cfg;
   14da8:	6015      	str	r5, [r2, #0]
   14daa:	b30b      	cbz	r3, 14df0 <spi_nrfx_transceive+0xa0>
   14dac:	6818      	ldr	r0, [r3, #0]
   14dae:	b1f8      	cbz	r0, 14df0 <spi_nrfx_transceive+0xa0>
				   ctx->config->cs->gpio_dt_flags |
   14db0:	f893 9009 	ldrb.w	r9, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   14db4:	7a19      	ldrb	r1, [r3, #8]
	struct gpio_driver_data *data =
   14db6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   14dba:	f019 0f01 	tst.w	r9, #1
   14dbe:	bf0c      	ite	eq
   14dc0:	f449 59b0 	orreq.w	r9, r9, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   14dc4:	f489 6920 	eorne.w	r9, r9, #2560	; 0xa00
	return api->pin_configure(port, pin, flags);
   14dc8:	6883      	ldr	r3, [r0, #8]
   14dca:	9101      	str	r1, [sp, #4]
   14dcc:	681b      	ldr	r3, [r3, #0]
   14dce:	464a      	mov	r2, r9
   14dd0:	4798      	blx	r3
	if (ret != 0) {
   14dd2:	b968      	cbnz	r0, 14df0 <spi_nrfx_transceive+0xa0>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   14dd4:	9901      	ldr	r1, [sp, #4]
   14dd6:	f8da 2000 	ldr.w	r2, [sl]
   14dda:	2301      	movs	r3, #1
   14ddc:	fa03 f101 	lsl.w	r1, r3, r1
   14de0:	f019 0f01 	tst.w	r9, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   14de4:	bf14      	ite	ne
   14de6:	4311      	orrne	r1, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   14de8:	ea22 0101 	biceq.w	r1, r2, r1
   14dec:	f8ca 1000 	str.w	r1, [sl]
	nrf_spi_configure(spi->p_reg,
   14df0:	88a9      	ldrh	r1, [r5, #4]
   14df2:	f8db 2000 	ldr.w	r2, [fp]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   14df6:	0788      	lsls	r0, r1, #30
   14df8:	f001 0304 	and.w	r3, r1, #4
   14dfc:	d568      	bpl.n	14ed0 <spi_nrfx_transceive+0x180>
			return NRF_SPI_MODE_2;
   14dfe:	2b00      	cmp	r3, #0
   14e00:	bf14      	ite	ne
   14e02:	2303      	movne	r3, #3
   14e04:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   14e06:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   14e08:	f3c1 1100 	ubfx	r1, r1, #4, #1
   14e0c:	d064      	beq.n	14ed8 <spi_nrfx_transceive+0x188>
   14e0e:	2b03      	cmp	r3, #3
   14e10:	d065      	beq.n	14ede <spi_nrfx_transceive+0x18e>
   14e12:	2b01      	cmp	r3, #1
   14e14:	d101      	bne.n	14e1a <spi_nrfx_transceive+0xca>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   14e16:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
   14e1a:	4b41      	ldr	r3, [pc, #260]	; (14f20 <spi_nrfx_transceive+0x1d0>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   14e1c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
   14e20:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
   14e22:	4299      	cmp	r1, r3
   14e24:	d95e      	bls.n	14ee4 <spi_nrfx_transceive+0x194>
	} else if (frequency < 500000) {
   14e26:	4b3f      	ldr	r3, [pc, #252]	; (14f24 <spi_nrfx_transceive+0x1d4>)
   14e28:	4299      	cmp	r1, r3
   14e2a:	d95e      	bls.n	14eea <spi_nrfx_transceive+0x19a>
	} else if (frequency < 1000000) {
   14e2c:	4b3e      	ldr	r3, [pc, #248]	; (14f28 <spi_nrfx_transceive+0x1d8>)
   14e2e:	4299      	cmp	r1, r3
   14e30:	d95e      	bls.n	14ef0 <spi_nrfx_transceive+0x1a0>
	} else if (frequency < 2000000) {
   14e32:	4b3e      	ldr	r3, [pc, #248]	; (14f2c <spi_nrfx_transceive+0x1dc>)
   14e34:	4299      	cmp	r1, r3
   14e36:	d95e      	bls.n	14ef6 <spi_nrfx_transceive+0x1a6>
	} else if (frequency < 4000000) {
   14e38:	4b3d      	ldr	r3, [pc, #244]	; (14f30 <spi_nrfx_transceive+0x1e0>)
   14e3a:	4299      	cmp	r1, r3
   14e3c:	d95e      	bls.n	14efc <spi_nrfx_transceive+0x1ac>
		return NRF_SPI_FREQ_8M;
   14e3e:	4b3d      	ldr	r3, [pc, #244]	; (14f34 <spi_nrfx_transceive+0x1e4>)
   14e40:	4299      	cmp	r1, r3
   14e42:	bf34      	ite	cc
   14e44:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   14e48:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   14e4c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   14e50:	2301      	movs	r3, #1
   14e52:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   14e56:	2f00      	cmp	r7, #0
   14e58:	d053      	beq.n	14f02 <spi_nrfx_transceive+0x1b2>
		ctx->current_tx = tx_bufs->buffers;
   14e5a:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   14e5c:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   14e5e:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   14e60:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   14e62:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   14e64:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   14e66:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   14e68:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   14e6a:	2e00      	cmp	r6, #0
   14e6c:	d04e      	beq.n	14f0c <spi_nrfx_transceive+0x1bc>
		ctx->current_rx = rx_bufs->buffers;
   14e6e:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   14e70:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   14e72:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   14e74:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   14e76:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   14e78:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   14e7a:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   14e7c:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   14e7e:	2200      	movs	r2, #0
   14e80:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   14e82:	2101      	movs	r1, #1
   14e84:	4620      	mov	r0, r4
   14e86:	f00c f8e1 	bl	2104c <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   14e8a:	4640      	mov	r0, r8
   14e8c:	f7ff ff22 	bl	14cd4 <transfer_next_chunk>
   14e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e98:	f104 0020 	add.w	r0, r4, #32
   14e9c:	f006 f898 	bl	1afd0 <z_impl_k_sem_take>
	status = ctx->sync_status;
   14ea0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   14ea2:	6823      	ldr	r3, [r4, #0]
   14ea4:	889b      	ldrh	r3, [r3, #4]
   14ea6:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   14eaa:	d104      	bne.n	14eb6 <spi_nrfx_transceive+0x166>
		ctx->owner = NULL;
   14eac:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   14eae:	f104 0008 	add.w	r0, r4, #8
   14eb2:	f006 f867 	bl	1af84 <z_impl_k_sem_give>
}
   14eb6:	4628      	mov	r0, r5
   14eb8:	b003      	add	sp, #12
   14eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   14ebe:	6923      	ldr	r3, [r4, #16]
   14ec0:	2b00      	cmp	r3, #0
   14ec2:	f47f af50 	bne.w	14d66 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   14ec6:	6863      	ldr	r3, [r4, #4]
   14ec8:	4299      	cmp	r1, r3
   14eca:	f47f af4c 	bne.w	14d66 <spi_nrfx_transceive+0x16>
   14ece:	e753      	b.n	14d78 <spi_nrfx_transceive+0x28>
			return NRF_SPI_MODE_0;
   14ed0:	3b00      	subs	r3, #0
   14ed2:	bf18      	it	ne
   14ed4:	2301      	movne	r3, #1
   14ed6:	e796      	b.n	14e06 <spi_nrfx_transceive+0xb6>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   14ed8:	f041 0104 	orr.w	r1, r1, #4
        break;
   14edc:	e79d      	b.n	14e1a <spi_nrfx_transceive+0xca>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   14ede:	f041 0106 	orr.w	r1, r1, #6
        break;
   14ee2:	e79a      	b.n	14e1a <spi_nrfx_transceive+0xca>
		return NRF_SPI_FREQ_125K;
   14ee4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   14ee8:	e7b0      	b.n	14e4c <spi_nrfx_transceive+0xfc>
		return NRF_SPI_FREQ_250K;
   14eea:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   14eee:	e7ad      	b.n	14e4c <spi_nrfx_transceive+0xfc>
		return NRF_SPI_FREQ_500K;
   14ef0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   14ef4:	e7aa      	b.n	14e4c <spi_nrfx_transceive+0xfc>
		return NRF_SPI_FREQ_1M;
   14ef6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   14efa:	e7a7      	b.n	14e4c <spi_nrfx_transceive+0xfc>
		return NRF_SPI_FREQ_2M;
   14efc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   14f00:	e7a4      	b.n	14e4c <spi_nrfx_transceive+0xfc>
		ctx->tx_count = 0;
   14f02:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   14f06:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   14f0a:	e7ae      	b.n	14e6a <spi_nrfx_transceive+0x11a>
		ctx->rx_count = 0;
   14f0c:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   14f10:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   14f14:	e7b3      	b.n	14e7e <spi_nrfx_transceive+0x12e>
		return -EINVAL;
   14f16:	f06f 0515 	mvn.w	r5, #21
   14f1a:	e7c2      	b.n	14ea2 <spi_nrfx_transceive+0x152>
   14f1c:	0001e847 	.word	0x0001e847
   14f20:	0003d08f 	.word	0x0003d08f
   14f24:	0007a11f 	.word	0x0007a11f
   14f28:	000f423f 	.word	0x000f423f
   14f2c:	001e847f 	.word	0x001e847f
   14f30:	003d08ff 	.word	0x003d08ff
   14f34:	007a1200 	.word	0x007a1200

00014f38 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f38:	4b06      	ldr	r3, [pc, #24]	; (14f54 <uart_nrfx_poll_in+0x1c>)
   14f3a:	681a      	ldr	r2, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   14f3c:	b13a      	cbz	r2, 14f4e <uart_nrfx_poll_in+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14f3e:	2000      	movs	r0, #0
   14f40:	6018      	str	r0, [r3, #0]
   14f42:	681b      	ldr	r3, [r3, #0]
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   14f44:	4b04      	ldr	r3, [pc, #16]	; (14f58 <uart_nrfx_poll_in+0x20>)
   14f46:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   14f4a:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   14f4c:	4770      	bx	lr
		return -1;
   14f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   14f52:	4770      	bx	lr
   14f54:	40002108 	.word	0x40002108
   14f58:	40002000 	.word	0x40002000

00014f5c <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   14f5c:	4b02      	ldr	r3, [pc, #8]	; (14f68 <uart_nrfx_err_check+0xc>)
   14f5e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   14f62:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   14f66:	4770      	bx	lr
   14f68:	40002000 	.word	0x40002000

00014f6c <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   14f6c:	b510      	push	{r4, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   14f6e:	794b      	ldrb	r3, [r1, #5]
   14f70:	2b01      	cmp	r3, #1
   14f72:	d11c      	bne.n	14fae <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14f74:	798b      	ldrb	r3, [r1, #6]
   14f76:	2b03      	cmp	r3, #3
   14f78:	d119      	bne.n	14fae <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   14f7a:	79cb      	ldrb	r3, [r1, #7]
   14f7c:	b9bb      	cbnz	r3, 14fae <uart_nrfx_configure+0x42>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   14f7e:	790a      	ldrb	r2, [r1, #4]
   14f80:	b112      	cbz	r2, 14f88 <uart_nrfx_configure+0x1c>
   14f82:	2a02      	cmp	r2, #2
   14f84:	d113      	bne.n	14fae <uart_nrfx_configure+0x42>
   14f86:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14f88:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   14f8a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   14f8e:	d05e      	beq.n	1504e <uart_nrfx_configure+0xe2>
   14f90:	d82b      	bhi.n	14fea <uart_nrfx_configure+0x7e>
   14f92:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14f96:	d05c      	beq.n	15052 <uart_nrfx_configure+0xe6>
   14f98:	d814      	bhi.n	14fc4 <uart_nrfx_configure+0x58>
   14f9a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   14f9e:	d05a      	beq.n	15056 <uart_nrfx_configure+0xea>
   14fa0:	d808      	bhi.n	14fb4 <uart_nrfx_configure+0x48>
   14fa2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14fa6:	d059      	beq.n	1505c <uart_nrfx_configure+0xf0>
   14fa8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   14fac:	d059      	beq.n	15062 <uart_nrfx_configure+0xf6>
   14fae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14fb2:	e04b      	b.n	1504c <uart_nrfx_configure+0xe0>
   14fb4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   14fb8:	d056      	beq.n	15068 <uart_nrfx_configure+0xfc>
   14fba:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   14fbe:	d1f6      	bne.n	14fae <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   14fc0:	4b33      	ldr	r3, [pc, #204]	; (15090 <uart_nrfx_configure+0x124>)
   14fc2:	e039      	b.n	15038 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   14fc4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   14fc8:	d051      	beq.n	1506e <uart_nrfx_configure+0x102>
   14fca:	d807      	bhi.n	14fdc <uart_nrfx_configure+0x70>
   14fcc:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   14fd0:	d04f      	beq.n	15072 <uart_nrfx_configure+0x106>
   14fd2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   14fd6:	d1ea      	bne.n	14fae <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   14fd8:	4b2e      	ldr	r3, [pc, #184]	; (15094 <uart_nrfx_configure+0x128>)
   14fda:	e02d      	b.n	15038 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   14fdc:	f647 2412 	movw	r4, #31250	; 0x7a12
   14fe0:	42a3      	cmp	r3, r4
   14fe2:	d1e4      	bne.n	14fae <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   14fe4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14fe8:	e026      	b.n	15038 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   14fea:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   14fee:	d043      	beq.n	15078 <uart_nrfx_configure+0x10c>
   14ff0:	d811      	bhi.n	15016 <uart_nrfx_configure+0xaa>
   14ff2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   14ff6:	d041      	beq.n	1507c <uart_nrfx_configure+0x110>
   14ff8:	d808      	bhi.n	1500c <uart_nrfx_configure+0xa0>
   14ffa:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   14ffe:	42a3      	cmp	r3, r4
   15000:	d03e      	beq.n	15080 <uart_nrfx_configure+0x114>
   15002:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   15006:	d1d2      	bne.n	14fae <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   15008:	4b23      	ldr	r3, [pc, #140]	; (15098 <uart_nrfx_configure+0x12c>)
   1500a:	e015      	b.n	15038 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   1500c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15010:	d1cd      	bne.n	14fae <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   15012:	4b22      	ldr	r3, [pc, #136]	; (1509c <uart_nrfx_configure+0x130>)
   15014:	e010      	b.n	15038 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   15016:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1501a:	d034      	beq.n	15086 <uart_nrfx_configure+0x11a>
   1501c:	d807      	bhi.n	1502e <uart_nrfx_configure+0xc2>
   1501e:	4c20      	ldr	r4, [pc, #128]	; (150a0 <uart_nrfx_configure+0x134>)
   15020:	42a3      	cmp	r3, r4
   15022:	d032      	beq.n	1508a <uart_nrfx_configure+0x11e>
   15024:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   15028:	d1c1      	bne.n	14fae <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1502a:	4b1e      	ldr	r3, [pc, #120]	; (150a4 <uart_nrfx_configure+0x138>)
   1502c:	e004      	b.n	15038 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   1502e:	4c1e      	ldr	r4, [pc, #120]	; (150a8 <uart_nrfx_configure+0x13c>)
   15030:	42a3      	cmp	r3, r4
   15032:	d1bc      	bne.n	14fae <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   15034:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   15038:	4c1c      	ldr	r4, [pc, #112]	; (150ac <uart_nrfx_configure+0x140>)
   1503a:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1503e:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   15042:	68c3      	ldr	r3, [r0, #12]
   15044:	c903      	ldmia	r1, {r0, r1}
   15046:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1504a:	2000      	movs	r0, #0
}
   1504c:	bd10      	pop	{r4, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1504e:	4b18      	ldr	r3, [pc, #96]	; (150b0 <uart_nrfx_configure+0x144>)
   15050:	e7f2      	b.n	15038 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   15052:	4b18      	ldr	r3, [pc, #96]	; (150b4 <uart_nrfx_configure+0x148>)
   15054:	e7f0      	b.n	15038 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   15056:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1505a:	e7ed      	b.n	15038 <uart_nrfx_configure+0xcc>
		nrf_baudrate = 0x00014000;
   1505c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15060:	e7ea      	b.n	15038 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   15062:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15066:	e7e7      	b.n	15038 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   15068:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1506c:	e7e4      	b.n	15038 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1506e:	4b12      	ldr	r3, [pc, #72]	; (150b8 <uart_nrfx_configure+0x14c>)
   15070:	e7e2      	b.n	15038 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   15072:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   15076:	e7df      	b.n	15038 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   15078:	4b10      	ldr	r3, [pc, #64]	; (150bc <uart_nrfx_configure+0x150>)
   1507a:	e7dd      	b.n	15038 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1507c:	4b10      	ldr	r3, [pc, #64]	; (150c0 <uart_nrfx_configure+0x154>)
   1507e:	e7db      	b.n	15038 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   15080:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   15084:	e7d8      	b.n	15038 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   15086:	4b0f      	ldr	r3, [pc, #60]	; (150c4 <uart_nrfx_configure+0x158>)
   15088:	e7d6      	b.n	15038 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1508a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1508e:	e7d3      	b.n	15038 <uart_nrfx_configure+0xcc>
   15090:	0013b000 	.word	0x0013b000
   15094:	004ea000 	.word	0x004ea000
   15098:	00ebf000 	.word	0x00ebf000
   1509c:	01d7e000 	.word	0x01d7e000
   150a0:	0003d090 	.word	0x0003d090
   150a4:	075f7000 	.word	0x075f7000
   150a8:	000f4240 	.word	0x000f4240
   150ac:	40002000 	.word	0x40002000
   150b0:	009d5000 	.word	0x009d5000
   150b4:	00275000 	.word	0x00275000
   150b8:	0075f000 	.word	0x0075f000
   150bc:	03afb000 	.word	0x03afb000
   150c0:	013a9000 	.word	0x013a9000
   150c4:	0ebed000 	.word	0x0ebed000

000150c8 <uart_nrfx_poll_out>:
{
   150c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150ca:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   150cc:	f011 fa11 	bl	264f2 <k_is_in_isr>
   150d0:	4d19      	ldr	r5, [pc, #100]	; (15138 <uart_nrfx_poll_out+0x70>)
   150d2:	bb70      	cbnz	r0, 15132 <uart_nrfx_poll_out+0x6a>
   150d4:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   150d6:	2701      	movs	r7, #1
   150d8:	f3bf 8f5b 	dmb	ish
   150dc:	e855 3f00 	ldrex	r3, [r5]
   150e0:	2b00      	cmp	r3, #0
   150e2:	d103      	bne.n	150ec <uart_nrfx_poll_out+0x24>
   150e4:	e845 7200 	strex	r2, r7, [r5]
   150e8:	2a00      	cmp	r2, #0
   150ea:	d1f7      	bne.n	150dc <uart_nrfx_poll_out+0x14>
   150ec:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   150f0:	d007      	beq.n	15102 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   150f2:	2021      	movs	r0, #33	; 0x21
   150f4:	2100      	movs	r1, #0
   150f6:	3c01      	subs	r4, #1
   150f8:	f005 ff1e 	bl	1af38 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   150fc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   15100:	d1ea      	bne.n	150d8 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15102:	4c0e      	ldr	r4, [pc, #56]	; (1513c <uart_nrfx_poll_out+0x74>)
   15104:	2200      	movs	r2, #0
   15106:	6022      	str	r2, [r4, #0]
   15108:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1510a:	4a0d      	ldr	r2, [pc, #52]	; (15140 <uart_nrfx_poll_out+0x78>)
   1510c:	2101      	movs	r1, #1
   1510e:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
   15110:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
   15114:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15118:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1511a:	b923      	cbnz	r3, 15126 <uart_nrfx_poll_out+0x5e>
   1511c:	2001      	movs	r0, #1
   1511e:	f00c f82f 	bl	21180 <nrfx_busy_wait>
   15122:	3e01      	subs	r6, #1
   15124:	d1f8      	bne.n	15118 <uart_nrfx_poll_out+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15126:	4b07      	ldr	r3, [pc, #28]	; (15144 <uart_nrfx_poll_out+0x7c>)
   15128:	2201      	movs	r2, #1
   1512a:	601a      	str	r2, [r3, #0]
	*lock = 0;
   1512c:	2300      	movs	r3, #0
   1512e:	602b      	str	r3, [r5, #0]
}
   15130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   15132:	2301      	movs	r3, #1
   15134:	602b      	str	r3, [r5, #0]
   15136:	e7e4      	b.n	15102 <uart_nrfx_poll_out+0x3a>
   15138:	20002c54 	.word	0x20002c54
   1513c:	4000211c 	.word	0x4000211c
   15140:	40002008 	.word	0x40002008
   15144:	4000200c 	.word	0x4000200c

00015148 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   15148:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
   1514a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1514e:	4c13      	ldr	r4, [pc, #76]	; (1519c <uart_nrfx_init+0x54>)
   15150:	2200      	movs	r2, #0
   15152:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   15156:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   1515a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1515e:	2103      	movs	r1, #3
   15160:	f8c3 175c 	str.w	r1, [r3, #1884]	; 0x75c
   15164:	f8c3 2758 	str.w	r2, [r3, #1880]	; 0x758
    p_reg->PSELRXD = pselrxd;
   15168:	2316      	movs	r3, #22
   1516a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   1516e:	2317      	movs	r3, #23
   15170:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSELRTS = pselrts;
   15174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15178:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1517c:	68c1      	ldr	r1, [r0, #12]
    p_reg->PSELCTS = pselcts;
   1517e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   15182:	f7ff fef3 	bl	14f6c <uart_nrfx_configure>
	if (err) {
   15186:	b938      	cbnz	r0, 15198 <uart_nrfx_init+0x50>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   15188:	2304      	movs	r3, #4
   1518a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1518e:	4b04      	ldr	r3, [pc, #16]	; (151a0 <uart_nrfx_init+0x58>)
   15190:	6018      	str	r0, [r3, #0]
   15192:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15194:	2301      	movs	r3, #1
   15196:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   15198:	bd10      	pop	{r4, pc}
   1519a:	bf00      	nop
   1519c:	40002000 	.word	0x40002000
   151a0:	40002108 	.word	0x40002108

000151a4 <uart_nrfx_pm_control>:
}

static int uart_nrfx_pm_control(const struct device *dev,
				uint32_t ctrl_command,
				void *context, device_pm_cb cb, void *arg)
{
   151a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151a6:	4f28      	ldr	r7, [pc, #160]	; (15248 <uart_nrfx_pm_control+0xa4>)
	static uint32_t current_state = DEVICE_PM_ACTIVE_STATE;

	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   151a8:	2901      	cmp	r1, #1
{
   151aa:	461e      	mov	r6, r3
   151ac:	683b      	ldr	r3, [r7, #0]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   151ae:	d149      	bne.n	15244 <uart_nrfx_pm_control+0xa0>
		uint32_t new_state = *((const uint32_t *)context);
   151b0:	6815      	ldr	r5, [r2, #0]

		if (new_state != current_state) {
   151b2:	429d      	cmp	r5, r3
   151b4:	d024      	beq.n	15200 <uart_nrfx_pm_control+0x5c>
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
   151b6:	2d01      	cmp	r5, #1
   151b8:	4924      	ldr	r1, [pc, #144]	; (1524c <uart_nrfx_pm_control+0xa8>)
   151ba:	d127      	bne.n	1520c <uart_nrfx_pm_control+0x68>
    return p_reg->PSELTXD;
   151bc:	f8d1 450c 	ldr.w	r4, [r1, #1292]	; 0x50c
    return p_reg->PSELRXD;
   151c0:	f8d1 3514 	ldr.w	r3, [r1, #1300]	; 0x514
    return p_reg->PSELCTS;
   151c4:	f8d1 c510 	ldr.w	ip, [r1, #1296]	; 0x510
    return p_reg->PSELRTS;
   151c8:	f8d1 c508 	ldr.w	ip, [r1, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   151cc:	f004 041f 	and.w	r4, r4, #31
    p_reg->OUTSET = set_mask;
   151d0:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   151d4:	fa05 fe04 	lsl.w	lr, r5, r4
    *p_pin = pin_number & 0x1F;
   151d8:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   151dc:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   151e0:	f8cc e508 	str.w	lr, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   151e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   151e8:	f04f 0e03 	mov.w	lr, #3
   151ec:	f84c e024 	str.w	lr, [ip, r4, lsl #2]
   151f0:	2400      	movs	r4, #0
   151f2:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   151f6:	2304      	movs	r3, #4
   151f8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151fc:	600d      	str	r5, [r1, #0]
			uart_nrfx_set_power_state(dev, new_state);
			current_state = new_state;
   151fe:	603d      	str	r5, [r7, #0]
	} else {
		__ASSERT_NO_MSG(ctrl_command == DEVICE_PM_GET_POWER_STATE);
		*((uint32_t *)context) = current_state;
	}

	if (cb) {
   15200:	b116      	cbz	r6, 15208 <uart_nrfx_pm_control+0x64>
		cb(dev, 0, context, arg);
   15202:	9b06      	ldr	r3, [sp, #24]
   15204:	2100      	movs	r1, #0
   15206:	47b0      	blx	r6
	}

	return 0;
}
   15208:	2000      	movs	r0, #0
   1520a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1520c:	2300      	movs	r3, #0
   1520e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    return p_reg->PSELTXD;
   15212:	f8d1 450c 	ldr.w	r4, [r1, #1292]	; 0x50c
    return p_reg->PSELRXD;
   15216:	f8d1 3514 	ldr.w	r3, [r1, #1300]	; 0x514
    return p_reg->PSELCTS;
   1521a:	f8d1 c510 	ldr.w	ip, [r1, #1296]	; 0x510
    return p_reg->PSELRTS;
   1521e:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   15222:	f004 011f 	and.w	r1, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15226:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1522a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1522e:	f04f 0c02 	mov.w	ip, #2
   15232:	f844 c021 	str.w	ip, [r4, r1, lsl #2]
    *p_pin = pin_number & 0x1F;
   15236:	f003 011f 	and.w	r1, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1523a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1523e:	f844 c021 	str.w	ip, [r4, r1, lsl #2]
}
   15242:	e7dc      	b.n	151fe <uart_nrfx_pm_control+0x5a>
		*((uint32_t *)context) = current_state;
   15244:	6013      	str	r3, [r2, #0]
   15246:	e7db      	b.n	15200 <uart_nrfx_pm_control+0x5c>
   15248:	200008c4 	.word	0x200008c4
   1524c:	40002000 	.word	0x40002000

00015250 <random_byte_get>:
	__asm__ volatile(
   15250:	f04f 0320 	mov.w	r3, #32
   15254:	f3ef 8211 	mrs	r2, BASEPRI
   15258:	f383 8811 	msr	BASEPRI, r3
   1525c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   15260:	4b08      	ldr	r3, [pc, #32]	; (15284 <random_byte_get+0x34>)
   15262:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   15264:	b159      	cbz	r1, 1527e <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   15266:	4908      	ldr	r1, [pc, #32]	; (15288 <random_byte_get+0x38>)
   15268:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1526c:	2100      	movs	r1, #0
   1526e:	6019      	str	r1, [r3, #0]
   15270:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   15272:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   15274:	f382 8811 	msr	BASEPRI, r2
   15278:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1527c:	4770      	bx	lr
	int retval = -EAGAIN;
   1527e:	f06f 000a 	mvn.w	r0, #10
   15282:	e7f7      	b.n	15274 <random_byte_get+0x24>
   15284:	4000d100 	.word	0x4000d100
   15288:	4000d000 	.word	0x4000d000

0001528c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1528c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1528e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   15290:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   15292:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   15294:	f04f 0520 	mov.w	r5, #32
   15298:	f3ef 8011 	mrs	r0, BASEPRI
   1529c:	f385 8811 	msr	BASEPRI, r5
   152a0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   152a4:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   152a6:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   152aa:	1ba4      	subs	r4, r4, r6
   152ac:	403c      	ands	r4, r7
	if (available < len) {
   152ae:	42a2      	cmp	r2, r4
		len = available;
   152b0:	bf88      	it	hi
   152b2:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   152b4:	eb06 0c02 	add.w	ip, r6, r2
   152b8:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   152bc:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   152be:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   152c2:	f380 8811 	msr	BASEPRI, r0
   152c6:	f3bf 8f6f 	isb	sy
   152ca:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   152cc:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   152ce:	4282      	cmp	r2, r0
   152d0:	d119      	bne.n	15306 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   152d2:	4576      	cmp	r6, lr
   152d4:	d10d      	bne.n	152f2 <rng_pool_get+0x66>
	__asm__ volatile(
   152d6:	f04f 0520 	mov.w	r5, #32
   152da:	f3ef 8211 	mrs	r2, BASEPRI
   152de:	f385 8811 	msr	BASEPRI, r5
   152e2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   152e6:	781d      	ldrb	r5, [r3, #0]
   152e8:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   152ea:	f382 8811 	msr	BASEPRI, r2
   152ee:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   152f2:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   152f4:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   152f6:	b288      	uxth	r0, r1
	available = available - len;
   152f8:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   152fa:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   152fc:	bf22      	ittt	cs
   152fe:	4b06      	ldrcs	r3, [pc, #24]	; (15318 <rng_pool_get+0x8c>)
   15300:	2201      	movcs	r2, #1
   15302:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   15304:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   15306:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1530a:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1530c:	f89c c005 	ldrb.w	ip, [ip, #5]
   15310:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   15314:	403d      	ands	r5, r7
   15316:	e7da      	b.n	152ce <rng_pool_get+0x42>
   15318:	4000d000 	.word	0x4000d000

0001531c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1531c:	43db      	mvns	r3, r3
{
   1531e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   15322:	f013 0501 	ands.w	r5, r3, #1
{
   15326:	460e      	mov	r6, r1
   15328:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1532a:	d004      	beq.n	15336 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1532c:	4821      	ldr	r0, [pc, #132]	; (153b4 <entropy_nrf5_get_entropy_isr+0x98>)
   1532e:	f7ff ffad 	bl	1528c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   15332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   15336:	2a00      	cmp	r2, #0
   15338:	d033      	beq.n	153a2 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1533a:	f04f 0320 	mov.w	r3, #32
   1533e:	f3ef 8811 	mrs	r8, BASEPRI
   15342:	f383 8811 	msr	BASEPRI, r3
   15346:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1534a:	200d      	movs	r0, #13
   1534c:	f7ef f980 	bl	4650 <arch_irq_is_enabled>
   15350:	4607      	mov	r7, r0
		irq_disable(IRQN);
   15352:	200d      	movs	r0, #13
   15354:	f7ef f968 	bl	4628 <arch_irq_disable>
	__asm__ volatile(
   15358:	f388 8811 	msr	BASEPRI, r8
   1535c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15360:	4a15      	ldr	r2, [pc, #84]	; (153b8 <entropy_nrf5_get_entropy_isr+0x9c>)
   15362:	6015      	str	r5, [r2, #0]
   15364:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   15366:	4b15      	ldr	r3, [pc, #84]	; (153bc <entropy_nrf5_get_entropy_isr+0xa0>)
   15368:	2101      	movs	r1, #1
   1536a:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1536c:	4914      	ldr	r1, [pc, #80]	; (153c0 <entropy_nrf5_get_entropy_isr+0xa4>)
   1536e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   15372:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   15376:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   15378:	4691      	mov	r9, r2
   1537a:	468a      	mov	sl, r1
   1537c:	4698      	mov	r8, r3
   1537e:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   15382:	b183      	cbz	r3, 153a6 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   15384:	f7ff ff64 	bl	15250 <random_byte_get>
			if (byte < 0) {
   15388:	1e03      	subs	r3, r0, #0
   1538a:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1538e:	dbf6      	blt.n	1537e <entropy_nrf5_get_entropy_isr+0x62>
   15390:	3d01      	subs	r5, #1
   15392:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   15394:	5573      	strb	r3, [r6, r5]
		} while (len);
   15396:	2d00      	cmp	r5, #0
   15398:	d1f1      	bne.n	1537e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1539a:	b117      	cbz	r7, 153a2 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1539c:	200d      	movs	r0, #13
   1539e:	f7ef f933 	bl	4608 <arch_irq_enable>
	return cnt;
   153a2:	4620      	mov	r0, r4
   153a4:	e7c5      	b.n	15332 <entropy_nrf5_get_entropy_isr+0x16>
   153a6:	f3bf 8f4f 	dsb	sy
				__WFE();
   153aa:	bf20      	wfe
				__SEV();
   153ac:	bf40      	sev
				__WFE();
   153ae:	bf20      	wfe
   153b0:	e7e5      	b.n	1537e <entropy_nrf5_get_entropy_isr+0x62>
   153b2:	bf00      	nop
   153b4:	20002c88 	.word	0x20002c88
   153b8:	4000d100 	.word	0x4000d100
   153bc:	4000d000 	.word	0x4000d000
   153c0:	e000e100 	.word	0xe000e100

000153c4 <entropy_nrf5_get_entropy>:
{
   153c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   153c8:	4f13      	ldr	r7, [pc, #76]	; (15418 <entropy_nrf5_get_entropy+0x54>)
   153ca:	460d      	mov	r5, r1
   153cc:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   153ce:	f107 0845 	add.w	r8, r7, #69	; 0x45
   153d2:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   153d6:	b914      	cbnz	r4, 153de <entropy_nrf5_get_entropy+0x1a>
}
   153d8:	4620      	mov	r0, r4
   153da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   153de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   153e6:	4638      	mov	r0, r7
   153e8:	f005 fdf2 	bl	1afd0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   153ec:	4622      	mov	r2, r4
   153ee:	4629      	mov	r1, r5
   153f0:	4640      	mov	r0, r8
   153f2:	f7ff ff4b 	bl	1528c <rng_pool_get>
   153f6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   153f8:	4638      	mov	r0, r7
   153fa:	f005 fdc3 	bl	1af84 <z_impl_k_sem_give>
		if (bytes == 0U) {
   153fe:	b93e      	cbnz	r6, 15410 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   15400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15408:	4648      	mov	r0, r9
   1540a:	f005 fde1 	bl	1afd0 <z_impl_k_sem_take>
			continue;
   1540e:	e7e2      	b.n	153d6 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   15410:	1ba4      	subs	r4, r4, r6
   15412:	b2a4      	uxth	r4, r4
		buf += bytes;
   15414:	4435      	add	r5, r6
   15416:	e7de      	b.n	153d6 <entropy_nrf5_get_entropy+0x12>
   15418:	20002c58 	.word	0x20002c58

0001541c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   1541c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1541e:	4c19      	ldr	r4, [pc, #100]	; (15484 <entropy_nrf5_init+0x68>)
   15420:	2201      	movs	r2, #1
   15422:	4611      	mov	r1, r2
   15424:	4620      	mov	r0, r4
   15426:	f011 f854 	bl	264d2 <z_impl_k_sem_init>
   1542a:	2201      	movs	r2, #1
   1542c:	2100      	movs	r1, #0
   1542e:	f104 0018 	add.w	r0, r4, #24
   15432:	f011 f84e 	bl	264d2 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   15436:	f240 4307 	movw	r3, #1031	; 0x407
   1543a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1543e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15442:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   15444:	230c      	movs	r3, #12
   15446:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1544a:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1544c:	4b0e      	ldr	r3, [pc, #56]	; (15488 <entropy_nrf5_init+0x6c>)
   1544e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   15452:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   15456:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1545a:	f042 0201 	orr.w	r2, r2, #1
   1545e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15462:	4a0a      	ldr	r2, [pc, #40]	; (1548c <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   15464:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15466:	6015      	str	r5, [r2, #0]
   15468:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1546a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1546e:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   15470:	6019      	str	r1, [r3, #0]
   15472:	200d      	movs	r0, #13
   15474:	f7ef f8fa 	bl	466c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   15478:	200d      	movs	r0, #13
   1547a:	f7ef f8c5 	bl	4608 <arch_irq_enable>

	return 0;
}
   1547e:	4628      	mov	r0, r5
   15480:	bd38      	pop	{r3, r4, r5, pc}
   15482:	bf00      	nop
   15484:	20002c58 	.word	0x20002c58
   15488:	4000d000 	.word	0x4000d000
   1548c:	4000d100 	.word	0x4000d100

00015490 <isr>:
{
   15490:	b510      	push	{r4, lr}
	byte = random_byte_get();
   15492:	f7ff fedd 	bl	15250 <random_byte_get>
	if (byte < 0) {
   15496:	2800      	cmp	r0, #0
   15498:	db20      	blt.n	154dc <isr+0x4c>
	uint8_t last  = rngp->last;
   1549a:	4b17      	ldr	r3, [pc, #92]	; (154f8 <isr+0x68>)
   1549c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   154a0:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   154a4:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   154a8:	1a51      	subs	r1, r2, r1
   154aa:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   154ae:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   154b0:	d10d      	bne.n	154ce <isr+0x3e>
	uint8_t last  = rngp->last;
   154b2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   154b6:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   154ba:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   154be:	1a51      	subs	r1, r2, r1
   154c0:	ea34 0101 	bics.w	r1, r4, r1
   154c4:	d10b      	bne.n	154de <isr+0x4e>
   154c6:	4b0d      	ldr	r3, [pc, #52]	; (154fc <isr+0x6c>)
   154c8:	2201      	movs	r2, #1
   154ca:	601a      	str	r2, [r3, #0]
}
   154cc:	e00e      	b.n	154ec <isr+0x5c>
	rngp->buffer[last] = byte;
   154ce:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   154d0:	3201      	adds	r2, #1
   154d2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   154d4:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   154d8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   154dc:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   154de:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   154e0:	3201      	adds	r2, #1
   154e2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   154e4:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   154e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   154ec:	4804      	ldr	r0, [pc, #16]	; (15500 <isr+0x70>)
}
   154ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   154f2:	f005 bd47 	b.w	1af84 <z_impl_k_sem_give>
   154f6:	bf00      	nop
   154f8:	20002c58 	.word	0x20002c58
   154fc:	4000d004 	.word	0x4000d004
   15500:	20002c70 	.word	0x20002c70

00015504 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   15504:	4b04      	ldr	r3, [pc, #16]	; (15518 <nrf52_errata_108+0x14>)
   15506:	6818      	ldr	r0, [r3, #0]
   15508:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1550a:	bf04      	itt	eq
   1550c:	4b03      	ldreq	r3, [pc, #12]	; (1551c <nrf52_errata_108+0x18>)
   1550e:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   15510:	1f83      	subs	r3, r0, #6
   15512:	4258      	negs	r0, r3
   15514:	4158      	adcs	r0, r3
   15516:	4770      	bx	lr
   15518:	10000130 	.word	0x10000130
   1551c:	f0000fe0 	.word	0xf0000fe0

00015520 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   15520:	4b07      	ldr	r3, [pc, #28]	; (15540 <nrf52_errata_16+0x20>)
   15522:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   15524:	2b06      	cmp	r3, #6
   15526:	d109      	bne.n	1553c <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   15528:	4b06      	ldr	r3, [pc, #24]	; (15544 <nrf52_errata_16+0x24>)
   1552a:	681b      	ldr	r3, [r3, #0]
   1552c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   15530:	3b03      	subs	r3, #3
   15532:	2b03      	cmp	r3, #3
   15534:	d802      	bhi.n	1553c <nrf52_errata_16+0x1c>
   15536:	4a04      	ldr	r2, [pc, #16]	; (15548 <nrf52_errata_16+0x28>)
   15538:	5cd0      	ldrb	r0, [r2, r3]
   1553a:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1553c:	2000      	movs	r0, #0
    #endif
}
   1553e:	4770      	bx	lr
   15540:	f0000fe0 	.word	0xf0000fe0
   15544:	f0000fe8 	.word	0xf0000fe8
   15548:	00028acb 	.word	0x00028acb

0001554c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1554c:	4a02      	ldr	r2, [pc, #8]	; (15558 <nvmc_wait+0xc>)
   1554e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   15552:	2b00      	cmp	r3, #0
   15554:	d0fb      	beq.n	1554e <nvmc_wait+0x2>
}
   15556:	4770      	bx	lr
   15558:	4001e000 	.word	0x4001e000

0001555c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1555c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1555e:	f7ff ffd1 	bl	15504 <nrf52_errata_108>
   15562:	b128      	cbz	r0, 15570 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   15564:	4b77      	ldr	r3, [pc, #476]	; (15744 <SystemInit+0x1e8>)
   15566:	4a78      	ldr	r2, [pc, #480]	; (15748 <SystemInit+0x1ec>)
   15568:	681b      	ldr	r3, [r3, #0]
   1556a:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1556e:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   15570:	f7ff ffd6 	bl	15520 <nrf52_errata_16>
   15574:	b110      	cbz	r0, 1557c <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   15576:	4b75      	ldr	r3, [pc, #468]	; (1574c <SystemInit+0x1f0>)
   15578:	4a75      	ldr	r2, [pc, #468]	; (15750 <SystemInit+0x1f4>)
   1557a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1557c:	f7ff ffc2 	bl	15504 <nrf52_errata_108>
   15580:	b128      	cbz	r0, 1558e <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   15582:	4b74      	ldr	r3, [pc, #464]	; (15754 <SystemInit+0x1f8>)
   15584:	4a74      	ldr	r2, [pc, #464]	; (15758 <SystemInit+0x1fc>)
   15586:	681b      	ldr	r3, [r3, #0]
   15588:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1558c:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1558e:	f7ff ffc7 	bl	15520 <nrf52_errata_16>
   15592:	b120      	cbz	r0, 1559e <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   15594:	4a71      	ldr	r2, [pc, #452]	; (1575c <SystemInit+0x200>)
   15596:	68d3      	ldr	r3, [r2, #12]
   15598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1559c:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1559e:	f7ff ffb1 	bl	15504 <nrf52_errata_108>
   155a2:	b140      	cbz	r0, 155b6 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   155a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   155a8:	2200      	movs	r2, #0
   155aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   155ae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   155b2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   155b6:	f7ff ffb3 	bl	15520 <nrf52_errata_16>
   155ba:	b110      	cbz	r0, 155c2 <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   155bc:	4b68      	ldr	r3, [pc, #416]	; (15760 <SystemInit+0x204>)
   155be:	2203      	movs	r2, #3
   155c0:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   155c2:	f7ff ffad 	bl	15520 <nrf52_errata_16>
   155c6:	b140      	cbz	r0, 155da <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   155c8:	4b66      	ldr	r3, [pc, #408]	; (15764 <SystemInit+0x208>)
   155ca:	2205      	movs	r2, #5
   155cc:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   155ce:	2201      	movs	r2, #1
   155d0:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   155d2:	2200      	movs	r2, #0
   155d4:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   155d6:	223f      	movs	r2, #63	; 0x3f
   155d8:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   155da:	4b63      	ldr	r3, [pc, #396]	; (15768 <SystemInit+0x20c>)
   155dc:	681a      	ldr	r2, [r3, #0]
   155de:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   155e0:	bf0b      	itete	eq
   155e2:	4b62      	ldreq	r3, [pc, #392]	; (1576c <SystemInit+0x210>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   155e4:	4b62      	ldrne	r3, [pc, #392]	; (15770 <SystemInit+0x214>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   155e6:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   155e8:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   155ea:	bf02      	ittt	eq
   155ec:	3308      	addeq	r3, #8
   155ee:	681b      	ldreq	r3, [r3, #0]
   155f0:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   155f4:	2a06      	cmp	r2, #6
   155f6:	d14d      	bne.n	15694 <SystemInit+0x138>
            {
                switch(var2)
   155f8:	3b03      	subs	r3, #3
   155fa:	2b03      	cmp	r3, #3
   155fc:	d803      	bhi.n	15606 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   155fe:	4a5d      	ldr	r2, [pc, #372]	; (15774 <SystemInit+0x218>)
   15600:	5cd3      	ldrb	r3, [r2, r3]
   15602:	2b00      	cmp	r3, #0
   15604:	d046      	beq.n	15694 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   15606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1560a:	4b5b      	ldr	r3, [pc, #364]	; (15778 <SystemInit+0x21c>)
   1560c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   15610:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   15614:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   15618:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1561c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   15620:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   15624:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   15628:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1562c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   15630:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   15634:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   15638:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1563c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   15640:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   15644:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   15648:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1564c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   15650:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   15654:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   15658:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1565c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   15660:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   15664:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   15668:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1566c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   15670:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   15674:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   15678:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1567c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   15680:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   15684:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   15688:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1568c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   15690:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   15694:	f7ff ff36 	bl	15504 <nrf52_errata_108>
   15698:	b128      	cbz	r0, 156a6 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1569a:	4b38      	ldr	r3, [pc, #224]	; (1577c <SystemInit+0x220>)
   1569c:	4a38      	ldr	r2, [pc, #224]	; (15780 <SystemInit+0x224>)
   1569e:	681b      	ldr	r3, [r3, #0]
   156a0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   156a4:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   156a6:	f7ff ff2d 	bl	15504 <nrf52_errata_108>
   156aa:	b148      	cbz	r0, 156c0 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   156ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   156b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   156b4:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   156b6:	bf44      	itt	mi
   156b8:	f06f 0201 	mvnmi.w	r2, #1
   156bc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   156c0:	4b29      	ldr	r3, [pc, #164]	; (15768 <SystemInit+0x20c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   156c2:	681b      	ldr	r3, [r3, #0]
   156c4:	2b06      	cmp	r3, #6
   156c6:	d10c      	bne.n	156e2 <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   156c8:	4b29      	ldr	r3, [pc, #164]	; (15770 <SystemInit+0x214>)
   156ca:	681b      	ldr	r3, [r3, #0]
   156cc:	3b03      	subs	r3, #3
   156ce:	2b03      	cmp	r3, #3
   156d0:	d802      	bhi.n	156d8 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   156d2:	4a2c      	ldr	r2, [pc, #176]	; (15784 <SystemInit+0x228>)
   156d4:	5cd3      	ldrb	r3, [r2, r3]
   156d6:	b123      	cbz	r3, 156e2 <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   156d8:	4a2b      	ldr	r2, [pc, #172]	; (15788 <SystemInit+0x22c>)
   156da:	6813      	ldr	r3, [r2, #0]
   156dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   156e0:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   156e2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   156e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   156ea:	2a00      	cmp	r2, #0
   156ec:	db03      	blt.n	156f6 <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   156ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   156f2:	2b00      	cmp	r3, #0
   156f4:	da22      	bge.n	1573c <SystemInit+0x1e0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   156f6:	4925      	ldr	r1, [pc, #148]	; (1578c <SystemInit+0x230>)
   156f8:	2301      	movs	r3, #1
   156fa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   156fe:	f7ff ff25 	bl	1554c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   15702:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   15706:	2415      	movs	r4, #21
   15708:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1570c:	f7ff ff1e 	bl	1554c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   15710:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   15714:	f7ff ff1a 	bl	1554c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   15718:	2300      	movs	r3, #0
   1571a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1571e:	f7ff ff15 	bl	1554c <nvmc_wait>
   15722:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15726:	491a      	ldr	r1, [pc, #104]	; (15790 <SystemInit+0x234>)
   15728:	4b1a      	ldr	r3, [pc, #104]	; (15794 <SystemInit+0x238>)
   1572a:	68ca      	ldr	r2, [r1, #12]
   1572c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15730:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15732:	60cb      	str	r3, [r1, #12]
   15734:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15738:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1573a:	e7fd      	b.n	15738 <SystemInit+0x1dc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1573c:	4b16      	ldr	r3, [pc, #88]	; (15798 <SystemInit+0x23c>)
   1573e:	4a17      	ldr	r2, [pc, #92]	; (1579c <SystemInit+0x240>)
   15740:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   15742:	bd10      	pop	{r4, pc}
   15744:	10000324 	.word	0x10000324
   15748:	40013540 	.word	0x40013540
   1574c:	4007c074 	.word	0x4007c074
   15750:	baadf00d 	.word	0xbaadf00d
   15754:	10000244 	.word	0x10000244
   15758:	4000053c 	.word	0x4000053c
   1575c:	e000edf0 	.word	0xe000edf0
   15760:	400005a0 	.word	0x400005a0
   15764:	40005610 	.word	0x40005610
   15768:	10000130 	.word	0x10000130
   1576c:	f0000fe0 	.word	0xf0000fe0
   15770:	10000134 	.word	0x10000134
   15774:	00028ac3 	.word	0x00028ac3
   15778:	4000c000 	.word	0x4000c000
   1577c:	10000258 	.word	0x10000258
   15780:	40000ee4 	.word	0x40000ee4
   15784:	00028ac7 	.word	0x00028ac7
   15788:	4000173c 	.word	0x4000173c
   1578c:	4001e000 	.word	0x4001e000
   15790:	e000ed00 	.word	0xe000ed00
   15794:	05fa0004 	.word	0x05fa0004
   15798:	20000928 	.word	0x20000928
   1579c:	03d09000 	.word	0x03d09000

000157a0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   157a0:	4b05      	ldr	r3, [pc, #20]	; (157b8 <nrfx_clock_init+0x18>)
   157a2:	791a      	ldrb	r2, [r3, #4]
   157a4:	b92a      	cbnz	r2, 157b2 <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
   157a6:	719a      	strb	r2, [r3, #6]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   157a8:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   157aa:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   157ac:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   157ae:	4803      	ldr	r0, [pc, #12]	; (157bc <nrfx_clock_init+0x1c>)
   157b0:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   157b2:	4803      	ldr	r0, [pc, #12]	; (157c0 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   157b4:	4770      	bx	lr
   157b6:	bf00      	nop
   157b8:	20002cac 	.word	0x20002cac
   157bc:	0bad0000 	.word	0x0bad0000
   157c0:	0bad000c 	.word	0x0bad000c

000157c4 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   157c4:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   157c6:	b110      	cbz	r0, 157ce <nrfx_clock_start+0xa>
   157c8:	2801      	cmp	r0, #1
   157ca:	d01e      	beq.n	1580a <nrfx_clock_start+0x46>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   157cc:	bd30      	pop	{r4, r5, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   157ce:	4b14      	ldr	r3, [pc, #80]	; (15820 <nrfx_clock_start+0x5c>)
   157d0:	6018      	str	r0, [r3, #0]
   157d2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   157d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   157d8:	2202      	movs	r2, #2
   157da:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   157de:	4a11      	ldr	r2, [pc, #68]	; (15824 <nrfx_clock_start+0x60>)
   157e0:	68d0      	ldr	r0, [r2, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   157e2:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   157e6:	60d3      	str	r3, [r2, #12]
    dwt_ctrl = DWT->CTRL;
   157e8:	4b0f      	ldr	r3, [pc, #60]	; (15828 <nrfx_clock_start+0x64>)
   157ea:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   157ec:	f044 0101 	orr.w	r1, r4, #1
   157f0:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   157f2:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   157f4:	6859      	ldr	r1, [r3, #4]
   157f6:	1b49      	subs	r1, r1, r5
   157f8:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   157fc:	d3fa      	bcc.n	157f4 <nrfx_clock_start+0x30>
    DWT->CTRL = dwt_ctrl;
   157fe:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15800:	4b0a      	ldr	r3, [pc, #40]	; (1582c <nrfx_clock_start+0x68>)
    CoreDebug->DEMCR = core_debug;
   15802:	60d0      	str	r0, [r2, #12]
   15804:	2201      	movs	r2, #1
   15806:	601a      	str	r2, [r3, #0]
}
   15808:	e7e0      	b.n	157cc <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1580a:	4b09      	ldr	r3, [pc, #36]	; (15830 <nrfx_clock_start+0x6c>)
   1580c:	2200      	movs	r2, #0
   1580e:	601a      	str	r2, [r3, #0]
   15810:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   15812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15816:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1581a:	6018      	str	r0, [r3, #0]
}
   1581c:	e7d6      	b.n	157cc <nrfx_clock_start+0x8>
   1581e:	bf00      	nop
   15820:	40000104 	.word	0x40000104
   15824:	e000edf0 	.word	0xe000edf0
   15828:	e0001000 	.word	0xe0001000
   1582c:	40000008 	.word	0x40000008
   15830:	40000100 	.word	0x40000100

00015834 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   15834:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   15836:	b110      	cbz	r0, 1583e <nrfx_clock_stop+0xa>
   15838:	2801      	cmp	r0, #1
   1583a:	d018      	beq.n	1586e <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1583c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1583e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15842:	2202      	movs	r2, #2
   15844:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15848:	4a18      	ldr	r2, [pc, #96]	; (158ac <nrfx_clock_stop+0x78>)
   1584a:	6010      	str	r0, [r2, #0]
   1584c:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1584e:	4a18      	ldr	r2, [pc, #96]	; (158b0 <nrfx_clock_stop+0x7c>)
   15850:	2101      	movs	r1, #1
   15852:	6011      	str	r1, [r2, #0]
   15854:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15858:	461c      	mov	r4, r3
   1585a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1585e:	03db      	lsls	r3, r3, #15
   15860:	d5ec      	bpl.n	1583c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   15862:	2001      	movs	r0, #1
   15864:	f00b fc8c 	bl	21180 <nrfx_busy_wait>
   15868:	3d01      	subs	r5, #1
   1586a:	d1f6      	bne.n	1585a <nrfx_clock_stop+0x26>
   1586c:	e7e6      	b.n	1583c <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1586e:	4b11      	ldr	r3, [pc, #68]	; (158b4 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   15870:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15874:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   15876:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1587a:	601a      	str	r2, [r3, #0]
   1587c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1587e:	4b0e      	ldr	r3, [pc, #56]	; (158b8 <nrfx_clock_stop+0x84>)
   15880:	f242 7510 	movw	r5, #10000	; 0x2710
   15884:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15886:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1588a:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1588e:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15890:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15894:	d505      	bpl.n	158a2 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   15896:	b123      	cbz	r3, 158a2 <nrfx_clock_stop+0x6e>
   15898:	2001      	movs	r0, #1
   1589a:	f00b fc71 	bl	21180 <nrfx_busy_wait>
   1589e:	3d01      	subs	r5, #1
   158a0:	d1f1      	bne.n	15886 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   158a2:	4b06      	ldr	r3, [pc, #24]	; (158bc <nrfx_clock_stop+0x88>)
   158a4:	2200      	movs	r2, #0
   158a6:	715a      	strb	r2, [r3, #5]
   158a8:	e7c8      	b.n	1583c <nrfx_clock_stop+0x8>
   158aa:	bf00      	nop
   158ac:	40000104 	.word	0x40000104
   158b0:	4000000c 	.word	0x4000000c
   158b4:	40000100 	.word	0x40000100
   158b8:	40000004 	.word	0x40000004
   158bc:	20002cac 	.word	0x20002cac

000158c0 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   158c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   158c4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   158c8:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   158cc:	03c8      	lsls	r0, r1, #15
   158ce:	d51a      	bpl.n	15906 <nrfx_clock_calibration_start+0x46>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
   158d0:	07d1      	lsls	r1, r2, #31
   158d2:	d518      	bpl.n	15906 <nrfx_clock_calibration_start+0x46>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   158d4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   158d8:	03d2      	lsls	r2, r2, #15
   158da:	d514      	bpl.n	15906 <nrfx_clock_calibration_start+0x46>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
   158dc:	4a0c      	ldr	r2, [pc, #48]	; (15910 <nrfx_clock_calibration_start+0x50>)
   158de:	7991      	ldrb	r1, [r2, #6]
   158e0:	f001 00ff 	and.w	r0, r1, #255	; 0xff
   158e4:	b989      	cbnz	r1, 1590a <nrfx_clock_calibration_start+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158e6:	490b      	ldr	r1, [pc, #44]	; (15914 <nrfx_clock_calibration_start+0x54>)
   158e8:	6008      	str	r0, [r1, #0]
   158ea:	6809      	ldr	r1, [r1, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   158ec:	480a      	ldr	r0, [pc, #40]	; (15918 <nrfx_clock_calibration_start+0x58>)
    p_reg->INTENSET = mask;
   158ee:	2108      	movs	r1, #8
   158f0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
   158f4:	2301      	movs	r3, #1
   158f6:	7193      	strb	r3, [r2, #6]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_192)
        *(volatile uint32_t *)0x40000C34 = 0x00000002;
   158f8:	4a08      	ldr	r2, [pc, #32]	; (1591c <nrfx_clock_calibration_start+0x5c>)
   158fa:	2102      	movs	r1, #2
   158fc:	6011      	str	r1, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   158fe:	f6a2 4224 	subw	r2, r2, #3108	; 0xc24
   15902:	6013      	str	r3, [r2, #0]
}
   15904:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
   15906:	4806      	ldr	r0, [pc, #24]	; (15920 <nrfx_clock_calibration_start+0x60>)
   15908:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
   1590a:	4806      	ldr	r0, [pc, #24]	; (15924 <nrfx_clock_calibration_start+0x64>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1590c:	4770      	bx	lr
   1590e:	bf00      	nop
   15910:	20002cac 	.word	0x20002cac
   15914:	4000010c 	.word	0x4000010c
   15918:	0bad0000 	.word	0x0bad0000
   1591c:	40000c34 	.word	0x40000c34
   15920:	0bad0005 	.word	0x0bad0005
   15924:	0bad000b 	.word	0x0bad000b

00015928 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15928:	4b22      	ldr	r3, [pc, #136]	; (159b4 <nrfx_power_clock_irq_handler+0x8c>)
   1592a:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1592c:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1592e:	b16a      	cbz	r2, 1594c <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15930:	2200      	movs	r2, #0
   15932:	601a      	str	r2, [r3, #0]
   15934:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   15936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1593a:	2201      	movs	r2, #1
   1593c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   15940:	4b1d      	ldr	r3, [pc, #116]	; (159b8 <nrfx_power_clock_irq_handler+0x90>)
   15942:	7958      	ldrb	r0, [r3, #5]
   15944:	b910      	cbnz	r0, 1594c <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   15946:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   15948:	681b      	ldr	r3, [r3, #0]
   1594a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1594c:	4b1b      	ldr	r3, [pc, #108]	; (159bc <nrfx_power_clock_irq_handler+0x94>)
   1594e:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   15950:	b15a      	cbz	r2, 1596a <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15952:	2200      	movs	r2, #0
   15954:	601a      	str	r2, [r3, #0]
   15956:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   15958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1595c:	2202      	movs	r2, #2
   1595e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   15962:	4b15      	ldr	r3, [pc, #84]	; (159b8 <nrfx_power_clock_irq_handler+0x90>)
   15964:	2001      	movs	r0, #1
   15966:	681b      	ldr	r3, [r3, #0]
   15968:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1596a:	4b15      	ldr	r3, [pc, #84]	; (159c0 <nrfx_power_clock_irq_handler+0x98>)
   1596c:	681a      	ldr	r2, [r3, #0]
        }
    }

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
#if NRF_CLOCK_HAS_CALIBRATION_TIMER
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_CTTO))
   1596e:	b15a      	cbz	r2, 15988 <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15970:	2200      	movs	r2, #0
   15972:	601a      	str	r2, [r3, #0]
   15974:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   15976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1597a:	2210      	movs	r2, #16
   1597c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_CTTO);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_CTTO");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_CTTO_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
   15980:	4b0d      	ldr	r3, [pc, #52]	; (159b8 <nrfx_power_clock_irq_handler+0x90>)
   15982:	2002      	movs	r0, #2
   15984:	681b      	ldr	r3, [r3, #0]
   15986:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15988:	4a0e      	ldr	r2, [pc, #56]	; (159c4 <nrfx_power_clock_irq_handler+0x9c>)
   1598a:	6813      	ldr	r3, [r2, #0]
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE))
   1598c:	b183      	cbz	r3, 159b0 <nrfx_power_clock_irq_handler+0x88>
    {
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_192)
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
   1598e:	490e      	ldr	r1, [pc, #56]	; (159c8 <nrfx_power_clock_irq_handler+0xa0>)
   15990:	2300      	movs	r3, #0
   15992:	600b      	str	r3, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15994:	6013      	str	r3, [r2, #0]
   15996:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
   15998:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1599c:	2108      	movs	r1, #8
   1599e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
   159a2:	4a05      	ldr	r2, [pc, #20]	; (159b8 <nrfx_power_clock_irq_handler+0x90>)
   159a4:	7193      	strb	r3, [r2, #6]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   159a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
   159aa:	6813      	ldr	r3, [r2, #0]
   159ac:	2003      	movs	r0, #3
   159ae:	4718      	bx	r3
}
   159b0:	bd10      	pop	{r4, pc}
   159b2:	bf00      	nop
   159b4:	40000100 	.word	0x40000100
   159b8:	20002cac 	.word	0x20002cac
   159bc:	40000104 	.word	0x40000104
   159c0:	40000110 	.word	0x40000110
   159c4:	4000010c 	.word	0x4000010c
   159c8:	40000c34 	.word	0x40000c34

000159cc <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   159cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   159d0:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   159d2:	4d4d      	ldr	r5, [pc, #308]	; (15b08 <nrfx_spi_init+0x13c>)
   159d4:	2628      	movs	r6, #40	; 0x28
   159d6:	4366      	muls	r6, r4
   159d8:	19af      	adds	r7, r5, r6
   159da:	f897 c01c 	ldrb.w	ip, [r7, #28]
   159de:	f1bc 0f00 	cmp.w	ip, #0
   159e2:	f040 808f 	bne.w	15b04 <nrfx_spi_init+0x138>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   159e6:	51aa      	str	r2, [r5, r6]
    p_cb->p_context = p_context;
   159e8:	607b      	str	r3, [r7, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   159ea:	f891 e000 	ldrb.w	lr, [r1]
   159ee:	7b0f      	ldrb	r7, [r1, #12]
   159f0:	f00e 061f 	and.w	r6, lr, #31
   159f4:	f04f 0c01 	mov.w	ip, #1
   159f8:	fa0c fc06 	lsl.w	ip, ip, r6
   159fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15a00:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   15a04:	f04f 0801 	mov.w	r8, #1
   15a08:	2f01      	cmp	r7, #1
    p_reg->OUTCLR = clr_mask;
   15a0a:	bf94      	ite	ls
   15a0c:	f8c3 c50c 	strls.w	ip, [r3, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   15a10:	f8c3 c508 	strhi.w	ip, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15a14:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   15a18:	784e      	ldrb	r6, [r1, #1]
   15a1a:	2eff      	cmp	r6, #255	; 0xff
    *p_pin = pin_number & 0x1F;
   15a1c:	bf1f      	itttt	ne
   15a1e:	f006 0c1f 	andne.w	ip, r6, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   15a22:	fa08 f80c 	lslne.w	r8, r8, ip
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15a26:	f50c 7ce0 	addne.w	ip, ip, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
   15a2a:	f8c3 850c 	strne.w	r8, [r3, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15a2e:	bf1c      	itt	ne
   15a30:	f04f 0803 	movne.w	r8, #3
   15a34:	f843 802c 	strne.w	r8, [r3, ip, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   15a38:	788b      	ldrb	r3, [r1, #2]
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   15a3a:	bf08      	it	eq
   15a3c:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   15a40:	2bff      	cmp	r3, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   15a42:	bf1f      	itttt	ne
   15a44:	f891 800e 	ldrbne.w	r8, [r1, #14]
    *p_pin = pin_number & 0x1F;
   15a48:	f003 0c1f 	andne.w	ip, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15a4c:	f50c 7ce0 	addne.w	ip, ip, #448	; 0x1c0
   15a50:	f04f 49a0 	movne.w	r9, #1342177280	; 0x50000000
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   15a54:	bf1c      	itt	ne
   15a56:	ea4f 0888 	movne.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15a5a:	f849 802c 	strne.w	r8, [r9, ip, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   15a5e:	f891 8003 	ldrb.w	r8, [r1, #3]
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   15a62:	bf08      	it	eq
   15a64:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   15a68:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   15a6c:	d00f      	beq.n	15a8e <nrfx_spi_init+0xc2>
    *p_pin = pin_number & 0x1F;
   15a6e:	f008 0c1f 	and.w	ip, r8, #31
    p_reg->OUTSET = set_mask;
   15a72:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15a76:	f04f 0901 	mov.w	r9, #1
   15a7a:	fa09 f90c 	lsl.w	r9, r9, ip
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15a7e:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   15a82:	f8ca 9508 	str.w	r9, [sl, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15a86:	f04f 0903 	mov.w	r9, #3
   15a8a:	f84a 902c 	str.w	r9, [sl, ip, lsl #2]
    {
        nrf_gpio_pin_set(p_config->ss_pin);
        nrf_gpio_cfg_output(p_config->ss_pin);
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   15a8e:	f04f 0c28 	mov.w	ip, #40	; 0x28
   15a92:	fb0c 5c04 	mla	ip, ip, r4, r5
   15a96:	f88c 801e 	strb.w	r8, [ip, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   15a9a:	6800      	ldr	r0, [r0, #0]
    p_reg->PSELSCK  = sck_pin;
   15a9c:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
   15aa0:	f8c0 650c 	str.w	r6, [r0, #1292]	; 0x50c
    p_reg->PSELMISO = miso_pin;
   15aa4:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   15aa8:	688b      	ldr	r3, [r1, #8]
   15aaa:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   15aae:	7b4b      	ldrb	r3, [r1, #13]
   15ab0:	3b00      	subs	r3, #0
   15ab2:	bf18      	it	ne
   15ab4:	2301      	movne	r3, #1
    switch (spi_mode)
   15ab6:	2f02      	cmp	r7, #2
   15ab8:	d01e      	beq.n	15af8 <nrfx_spi_init+0x12c>
   15aba:	2f03      	cmp	r7, #3
   15abc:	d01f      	beq.n	15afe <nrfx_spi_init+0x132>
   15abe:	2f01      	cmp	r7, #1
   15ac0:	d101      	bne.n	15ac6 <nrfx_spi_init+0xfa>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   15ac2:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   15ac6:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   15aca:	2328      	movs	r3, #40	; 0x28
   15acc:	fb03 5304 	mla	r3, r3, r4, r5
   15ad0:	7949      	ldrb	r1, [r1, #5]
   15ad2:	77d9      	strb	r1, [r3, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   15ad4:	2301      	movs	r3, #1
   15ad6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   15ada:	b11a      	cbz	r2, 15ae4 <nrfx_spi_init+0x118>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   15adc:	f340 3007 	sbfx	r0, r0, #12, #8
   15ae0:	f7ee fd92 	bl	4608 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   15ae4:	2328      	movs	r3, #40	; 0x28
   15ae6:	fb03 5404 	mla	r4, r3, r4, r5
   15aea:	2300      	movs	r3, #0
   15aec:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   15aee:	4807      	ldr	r0, [pc, #28]	; (15b0c <nrfx_spi_init+0x140>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   15af0:	2301      	movs	r3, #1
   15af2:	7723      	strb	r3, [r4, #28]
}
   15af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   15af8:	f043 0304 	orr.w	r3, r3, #4
        break;
   15afc:	e7e3      	b.n	15ac6 <nrfx_spi_init+0xfa>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   15afe:	f043 0306 	orr.w	r3, r3, #6
        break;
   15b02:	e7e0      	b.n	15ac6 <nrfx_spi_init+0xfa>
        return err_code;
   15b04:	4802      	ldr	r0, [pc, #8]	; (15b10 <nrfx_spi_init+0x144>)
   15b06:	e7f5      	b.n	15af4 <nrfx_spi_init+0x128>
   15b08:	20002cb4 	.word	0x20002cb4
   15b0c:	0bad0000 	.word	0x0bad0000
   15b10:	0bad0005 	.word	0x0bad0005

00015b14 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
   15b14:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   15b16:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
   15b18:	4e23      	ldr	r6, [pc, #140]	; (15ba8 <nrfx_spi_uninit+0x94>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   15b1a:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   15b1c:	2328      	movs	r3, #40	; 0x28
   15b1e:	436b      	muls	r3, r5
   15b20:	58f3      	ldr	r3, [r6, r3]
   15b22:	b133      	cbz	r3, 15b32 <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   15b24:	f344 3007 	sbfx	r0, r4, #12, #8
   15b28:	f7ee fd7e 	bl	4628 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   15b2c:	2304      	movs	r3, #4
   15b2e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   15b32:	2300      	movs	r3, #0
   15b34:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return p_reg->PSELSCK;
   15b38:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   15b3c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15b40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   15b44:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15b48:	2102      	movs	r1, #2
   15b4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMISO;
   15b4e:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
    nrf_spi_disable(p_spi);

    nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));

    uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
    if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   15b52:	1c58      	adds	r0, r3, #1
    *p_pin = pin_number & 0x1F;
   15b54:	bf1e      	ittt	ne
   15b56:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15b5a:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
   15b5e:	f842 1023 	strne.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMOSI;
   15b62:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
    {
        nrf_gpio_cfg_default(miso_pin);
    }

    uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
    if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   15b66:	1c5a      	adds	r2, r3, #1
   15b68:	d008      	beq.n	15b7c <nrfx_spi_uninit+0x68>
    *p_pin = pin_number & 0x1F;
   15b6a:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15b6e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15b72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   15b76:	2102      	movs	r1, #2
   15b78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    {
        nrf_gpio_cfg_default(mosi_pin);
    }

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   15b7c:	2328      	movs	r3, #40	; 0x28
   15b7e:	fb03 6305 	mla	r3, r3, r5, r6
   15b82:	7f9b      	ldrb	r3, [r3, #30]
   15b84:	2bff      	cmp	r3, #255	; 0xff
   15b86:	d008      	beq.n	15b9a <nrfx_spi_uninit+0x86>
    *p_pin = pin_number & 0x1F;
   15b88:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15b8c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15b90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   15b94:	2102      	movs	r1, #2
   15b96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   15b9a:	2328      	movs	r3, #40	; 0x28
   15b9c:	fb03 6505 	mla	r5, r3, r5, r6
   15ba0:	2300      	movs	r3, #0
   15ba2:	772b      	strb	r3, [r5, #28]
}
   15ba4:	bd70      	pop	{r4, r5, r6, pc}
   15ba6:	bf00      	nop
   15ba8:	20002cb4 	.word	0x20002cb4

00015bac <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   15bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   15bb0:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   15bb2:	4e41      	ldr	r6, [pc, #260]	; (15cb8 <nrfx_spi_xfer+0x10c>)
   15bb4:	2328      	movs	r3, #40	; 0x28
   15bb6:	436b      	muls	r3, r5
{
   15bb8:	4696      	mov	lr, r2
    if (p_cb->transfer_in_progress)
   15bba:	18f2      	adds	r2, r6, r3
{
   15bbc:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
   15bbe:	7f51      	ldrb	r1, [r2, #29]
{
   15bc0:	4680      	mov	r8, r0
    if (p_cb->transfer_in_progress)
   15bc2:	2900      	cmp	r1, #0
   15bc4:	d176      	bne.n	15cb4 <nrfx_spi_xfer+0x108>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   15bc6:	f856 c003 	ldr.w	ip, [r6, r3]
   15bca:	f1bc 0f00 	cmp.w	ip, #0
   15bce:	d001      	beq.n	15bd4 <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
   15bd0:	2301      	movs	r3, #1
   15bd2:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   15bd4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   15bd8:	2428      	movs	r4, #40	; 0x28
   15bda:	fb04 6405 	mla	r4, r4, r5, r6
   15bde:	f104 090c 	add.w	r9, r4, #12
   15be2:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    p_cb->abort = false;
   15be6:	2300      	movs	r3, #0
   15be8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   15bec:	7fa3      	ldrb	r3, [r4, #30]
   15bee:	2bff      	cmp	r3, #255	; 0xff
   15bf0:	d008      	beq.n	15c04 <nrfx_spi_xfer+0x58>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   15bf2:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   15bf4:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   15bf8:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
   15bfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   15c00:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    }
    if (flags)
   15c04:	2328      	movs	r3, #40	; 0x28
   15c06:	f1be 0f00 	cmp.w	lr, #0
   15c0a:	d006      	beq.n	15c1a <nrfx_spi_xfer+0x6e>
    {
        p_cb->transfer_in_progress = false;
   15c0c:	fb03 6505 	mla	r5, r3, r5, r6
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   15c10:	482a      	ldr	r0, [pc, #168]	; (15cbc <nrfx_spi_xfer+0x110>)
        p_cb->transfer_in_progress = false;
   15c12:	2300      	movs	r3, #0
   15c14:	776b      	strb	r3, [r5, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   15c1a:	f8d8 4000 	ldr.w	r4, [r8]
    p_cb->bytes_transferred = 0;
   15c1e:	fb03 6305 	mla	r3, r3, r5, r6
    p_reg->INTENCLR = mask;
   15c22:	2204      	movs	r2, #4
   15c24:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
   15c28:	f8c3 e020 	str.w	lr, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c2c:	f8c4 e108 	str.w	lr, [r4, #264]	; 0x108
   15c30:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   15c34:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
   15c36:	b18a      	cbz	r2, 15c5c <nrfx_spi_xfer+0xb0>
   15c38:	683b      	ldr	r3, [r7, #0]
   15c3a:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   15c3c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   15c40:	2a01      	cmp	r2, #1
   15c42:	d90d      	bls.n	15c60 <nrfx_spi_xfer+0xb4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   15c44:	683b      	ldr	r3, [r7, #0]
   15c46:	785b      	ldrb	r3, [r3, #1]
   15c48:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
   15c4c:	f1bc 0f00 	cmp.w	ip, #0
   15c50:	d00e      	beq.n	15c70 <nrfx_spi_xfer+0xc4>
    p_reg->INTENSET = mask;
   15c52:	2304      	movs	r3, #4
   15c54:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   15c58:	4819      	ldr	r0, [pc, #100]	; (15cc0 <nrfx_spi_xfer+0x114>)
   15c5a:	e7dc      	b.n	15c16 <nrfx_spi_xfer+0x6a>
    nrf_spi_txd_set(p_spi,
   15c5c:	7fdb      	ldrb	r3, [r3, #31]
   15c5e:	e7ed      	b.n	15c3c <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
   15c60:	68fb      	ldr	r3, [r7, #12]
   15c62:	2b01      	cmp	r3, #1
   15c64:	d9f2      	bls.n	15c4c <nrfx_spi_xfer+0xa0>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   15c66:	2328      	movs	r3, #40	; 0x28
   15c68:	fb03 6305 	mla	r3, r3, r5, r6
    p_reg->TXD = data;
   15c6c:	7fdb      	ldrb	r3, [r3, #31]
   15c6e:	e7eb      	b.n	15c48 <nrfx_spi_xfer+0x9c>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   15c70:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   15c74:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c78:	4667      	mov	r7, ip
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15c7a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   15c7e:	2b00      	cmp	r3, #0
   15c80:	d0fb      	beq.n	15c7a <nrfx_spi_xfer+0xce>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c82:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   15c86:	4620      	mov	r0, r4
   15c88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   15c8c:	f00b fa87 	bl	2119e <transfer_byte>
   15c90:	2800      	cmp	r0, #0
   15c92:	d1f2      	bne.n	15c7a <nrfx_spi_xfer+0xce>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   15c94:	2328      	movs	r3, #40	; 0x28
   15c96:	fb03 6505 	mla	r5, r3, r5, r6
   15c9a:	7fab      	ldrb	r3, [r5, #30]
   15c9c:	2bff      	cmp	r3, #255	; 0xff
   15c9e:	d0db      	beq.n	15c58 <nrfx_spi_xfer+0xac>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15ca0:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   15ca2:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15ca6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   15caa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   15cae:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   15cb2:	e7d1      	b.n	15c58 <nrfx_spi_xfer+0xac>
        return err_code;
   15cb4:	4803      	ldr	r0, [pc, #12]	; (15cc4 <nrfx_spi_xfer+0x118>)
   15cb6:	e7ae      	b.n	15c16 <nrfx_spi_xfer+0x6a>
   15cb8:	20002cb4 	.word	0x20002cb4
   15cbc:	0bad0003 	.word	0x0bad0003
   15cc0:	0bad0000 	.word	0x0bad0000
   15cc4:	0bad000b 	.word	0x0bad000b

00015cc8 <nrfx_spi_2_irq_handler>:
   15cc8:	4810      	ldr	r0, [pc, #64]	; (15d0c <nrfx_spi_2_irq_handler+0x44>)
    NRFX_ASSERT(p_cb->handler);

    nrf_spi_event_clear(p_spi, NRF_SPI_EVENT_READY);
    NRFX_LOG_DEBUG("Event: NRF_SPI_EVENT_READY.");

    if (!transfer_byte(p_spi, p_cb))
   15cca:	4911      	ldr	r1, [pc, #68]	; (15d10 <nrfx_spi_2_irq_handler+0x48>)
   15ccc:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI2_ENABLED)
void nrfx_spi_2_irq_handler(void)
{
   15cce:	b510      	push	{r4, lr}
   15cd0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   15cd4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   15cd8:	f00b fa61 	bl	2119e <transfer_byte>
   15cdc:	b9a0      	cbnz	r0, 15d08 <nrfx_spi_2_irq_handler+0x40>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   15cde:	7f8b      	ldrb	r3, [r1, #30]
   15ce0:	2bff      	cmp	r3, #255	; 0xff
   15ce2:	d008      	beq.n	15cf6 <nrfx_spi_2_irq_handler+0x2e>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15ce4:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   15ce6:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15cea:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   15cee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   15cf2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
   15cf6:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   15cf8:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   15cfa:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI2, &m_cb[NRFX_SPI2_INST_IDX]);
}
   15cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   15d00:	e9d1 3100 	ldrd	r3, r1, [r1]
   15d04:	4803      	ldr	r0, [pc, #12]	; (15d14 <nrfx_spi_2_irq_handler+0x4c>)
   15d06:	4718      	bx	r3
}
   15d08:	bd10      	pop	{r4, pc}
   15d0a:	bf00      	nop
   15d0c:	40023000 	.word	0x40023000
   15d10:	20002cb4 	.word	0x20002cb4
   15d14:	20002cbc 	.word	0x20002cbc

00015d18 <lv_indev_reset.part.0>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
   15d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d1a:	4604      	mov	r4, r0
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
            indev->proc.types.pointer.last_pressed = NULL;
        }
    }
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
   15d1c:	2000      	movs	r0, #0
   15d1e:	f002 ff89 	bl	18c34 <lv_indev_get_next>
        while(i) {
            i->proc.reset_query = 1;
            if(indev_act == i) indev_obj_act = NULL;
   15d22:	4e0b      	ldr	r6, [pc, #44]	; (15d50 <lv_indev_reset.part.0+0x38>)
   15d24:	4f0b      	ldr	r7, [pc, #44]	; (15d54 <lv_indev_reset.part.0+0x3c>)
   15d26:	2500      	movs	r5, #0
        while(i) {
   15d28:	b900      	cbnz	r0, 15d2c <lv_indev_reset.part.0+0x14>
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
        }
    }
}
   15d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            i->proc.reset_query = 1;
   15d2c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   15d30:	f043 0302 	orr.w	r3, r3, #2
   15d34:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
            if(indev_act == i) indev_obj_act = NULL;
   15d38:	6833      	ldr	r3, [r6, #0]
   15d3a:	4298      	cmp	r0, r3
   15d3c:	bf08      	it	eq
   15d3e:	603d      	streq	r5, [r7, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
   15d40:	b114      	cbz	r4, 15d48 <lv_indev_reset.part.0+0x30>
   15d42:	6c03      	ldr	r3, [r0, #64]	; 0x40
   15d44:	429c      	cmp	r4, r3
   15d46:	d100      	bne.n	15d4a <lv_indev_reset.part.0+0x32>
                i->proc.types.pointer.last_pressed = NULL;
   15d48:	6405      	str	r5, [r0, #64]	; 0x40
            i = lv_indev_get_next(i);
   15d4a:	f002 ff73 	bl	18c34 <lv_indev_get_next>
   15d4e:	e7eb      	b.n	15d28 <lv_indev_reset.part.0+0x10>
   15d50:	20002cdc 	.word	0x20002cdc
   15d54:	20002ce0 	.word	0x20002ce0

00015d58 <lv_indev_get_act>:
}
   15d58:	4b01      	ldr	r3, [pc, #4]	; (15d60 <lv_indev_get_act+0x8>)
   15d5a:	6818      	ldr	r0, [r3, #0]
   15d5c:	4770      	bx	lr
   15d5e:	bf00      	nop
   15d60:	20002cdc 	.word	0x20002cdc

00015d64 <lv_indev_reset>:
{
   15d64:	4603      	mov	r3, r0
   15d66:	4608      	mov	r0, r1
    if(indev) {
   15d68:	b19b      	cbz	r3, 15d92 <lv_indev_reset+0x2e>
        indev->proc.reset_query = 1;
   15d6a:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   15d6e:	f042 0202 	orr.w	r2, r2, #2
   15d72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        if(indev_act == indev) indev_obj_act = NULL;
   15d76:	4a08      	ldr	r2, [pc, #32]	; (15d98 <lv_indev_reset+0x34>)
   15d78:	6812      	ldr	r2, [r2, #0]
   15d7a:	429a      	cmp	r2, r3
   15d7c:	bf02      	ittt	eq
   15d7e:	4a07      	ldreq	r2, [pc, #28]	; (15d9c <lv_indev_reset+0x38>)
   15d80:	2100      	moveq	r1, #0
   15d82:	6011      	streq	r1, [r2, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
   15d84:	b110      	cbz	r0, 15d8c <lv_indev_reset+0x28>
   15d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   15d88:	4282      	cmp	r2, r0
   15d8a:	d104      	bne.n	15d96 <lv_indev_reset+0x32>
            indev->proc.types.pointer.last_pressed = NULL;
   15d8c:	2200      	movs	r2, #0
   15d8e:	641a      	str	r2, [r3, #64]	; 0x40
   15d90:	4770      	bx	lr
   15d92:	f7ff bfc1 	b.w	15d18 <lv_indev_reset.part.0>
}
   15d96:	4770      	bx	lr
   15d98:	20002cdc 	.word	0x20002cdc
   15d9c:	20002ce0 	.word	0x20002ce0

00015da0 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
   15da0:	2872      	cmp	r0, #114	; 0x72
   15da2:	d867      	bhi.n	15e74 <style_prop_is_cacheble+0xd4>
   15da4:	2853      	cmp	r0, #83	; 0x53
   15da6:	d816      	bhi.n	15dd6 <style_prop_is_cacheble+0x36>
   15da8:	2833      	cmp	r0, #51	; 0x33
   15daa:	d85b      	bhi.n	15e64 <style_prop_is_cacheble+0xc4>
   15dac:	281f      	cmp	r0, #31
   15dae:	d81c      	bhi.n	15dea <style_prop_is_cacheble+0x4a>
   15db0:	3801      	subs	r0, #1
   15db2:	b283      	uxth	r3, r0
   15db4:	2b17      	cmp	r3, #23
   15db6:	d920      	bls.n	15dfa <style_prop_is_cacheble+0x5a>
   15db8:	2000      	movs	r0, #0
   15dba:	4770      	bx	lr
   15dbc:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
   15dc0:	2301      	movs	r3, #1
   15dc2:	b280      	uxth	r0, r0
   15dc4:	fa03 f000 	lsl.w	r0, r3, r0
   15dc8:	f244 030b 	movw	r3, #16395	; 0x400b
   15dcc:	4218      	tst	r0, r3
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
   15dce:	bf14      	ite	ne
   15dd0:	2001      	movne	r0, #1
   15dd2:	2000      	moveq	r0, #0
   15dd4:	4770      	bx	lr
   15dd6:	3854      	subs	r0, #84	; 0x54
   15dd8:	b280      	uxth	r0, r0
   15dda:	2301      	movs	r3, #1
   15ddc:	4083      	lsls	r3, r0
   15dde:	4835      	ldr	r0, [pc, #212]	; (15eb4 <style_prop_is_cacheble+0x114>)
   15de0:	4018      	ands	r0, r3
   15de2:	3800      	subs	r0, #0
   15de4:	bf18      	it	ne
   15de6:	2001      	movne	r0, #1
   15de8:	4770      	bx	lr
   15dea:	3820      	subs	r0, #32
   15dec:	2301      	movs	r3, #1
   15dee:	b280      	uxth	r0, r0
   15df0:	fa03 f000 	lsl.w	r0, r3, r0
   15df4:	f503 2371 	add.w	r3, r3, #987136	; 0xf1000
   15df8:	e7e8      	b.n	15dcc <style_prop_is_cacheble+0x2c>
   15dfa:	2817      	cmp	r0, #23
   15dfc:	d8dc      	bhi.n	15db8 <style_prop_is_cacheble+0x18>
   15dfe:	a301      	add	r3, pc, #4	; (adr r3, 15e04 <style_prop_is_cacheble+0x64>)
   15e00:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   15e04:	00015eaf 	.word	0x00015eaf
   15e08:	00015eaf 	.word	0x00015eaf
   15e0c:	00015db9 	.word	0x00015db9
   15e10:	00015eaf 	.word	0x00015eaf
   15e14:	00015eaf 	.word	0x00015eaf
   15e18:	00015eaf 	.word	0x00015eaf
   15e1c:	00015eaf 	.word	0x00015eaf
   15e20:	00015db9 	.word	0x00015db9
   15e24:	00015db9 	.word	0x00015db9
   15e28:	00015db9 	.word	0x00015db9
   15e2c:	00015db9 	.word	0x00015db9
   15e30:	00015db9 	.word	0x00015db9
   15e34:	00015db9 	.word	0x00015db9
   15e38:	00015db9 	.word	0x00015db9
   15e3c:	00015db9 	.word	0x00015db9
   15e40:	00015eaf 	.word	0x00015eaf
   15e44:	00015eaf 	.word	0x00015eaf
   15e48:	00015eaf 	.word	0x00015eaf
   15e4c:	00015eaf 	.word	0x00015eaf
   15e50:	00015db9 	.word	0x00015db9
   15e54:	00015eaf 	.word	0x00015eaf
   15e58:	00015eaf 	.word	0x00015eaf
   15e5c:	00015eaf 	.word	0x00015eaf
   15e60:	00015eaf 	.word	0x00015eaf
    switch(prop) {
   15e64:	3840      	subs	r0, #64	; 0x40
   15e66:	b280      	uxth	r0, r0
   15e68:	2810      	cmp	r0, #16
   15e6a:	d8a5      	bhi.n	15db8 <style_prop_is_cacheble+0x18>
   15e6c:	2301      	movs	r3, #1
   15e6e:	4083      	lsls	r3, r0
   15e70:	4811      	ldr	r0, [pc, #68]	; (15eb8 <style_prop_is_cacheble+0x118>)
   15e72:	e7b5      	b.n	15de0 <style_prop_is_cacheble+0x40>
   15e74:	f248 038e 	movw	r3, #32910	; 0x808e
   15e78:	4298      	cmp	r0, r3
   15e7a:	d811      	bhi.n	15ea0 <style_prop_is_cacheble+0x100>
   15e7c:	f248 037f 	movw	r3, #32895	; 0x807f
   15e80:	4298      	cmp	r0, r3
   15e82:	d89b      	bhi.n	15dbc <style_prop_is_cacheble+0x1c>
   15e84:	28ff      	cmp	r0, #255	; 0xff
   15e86:	d012      	beq.n	15eae <style_prop_is_cacheble+0x10e>
   15e88:	d806      	bhi.n	15e98 <style_prop_is_cacheble+0xf8>
   15e8a:	287f      	cmp	r0, #127	; 0x7f
   15e8c:	d00f      	beq.n	15eae <style_prop_is_cacheble+0x10e>
            return true;
   15e8e:	2891      	cmp	r0, #145	; 0x91
   15e90:	bf14      	ite	ne
   15e92:	2000      	movne	r0, #0
   15e94:	2001      	moveq	r0, #1
   15e96:	4770      	bx	lr
   15e98:	f248 030c 	movw	r3, #32780	; 0x800c
   15e9c:	4298      	cmp	r0, r3
   15e9e:	e7f7      	b.n	15e90 <style_prop_is_cacheble+0xf0>
    switch(prop) {
   15ea0:	f248 03a0 	movw	r3, #32928	; 0x80a0
   15ea4:	4298      	cmp	r0, r3
   15ea6:	d002      	beq.n	15eae <style_prop_is_cacheble+0x10e>
            return true;
   15ea8:	f248 03ad 	movw	r3, #32941	; 0x80ad
   15eac:	e7f6      	b.n	15e9c <style_prop_is_cacheble+0xfc>
   15eae:	2001      	movs	r0, #1
            break;
        default:
            return false;
    }
}
   15eb0:	4770      	bx	lr
   15eb2:	bf00      	nop
   15eb4:	44001001 	.word	0x44001001
   15eb8:	00010005 	.word	0x00010005

00015ebc <lv_init>:
{
   15ebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(lv_initialized) {
   15ebe:	4d16      	ldr	r5, [pc, #88]	; (15f18 <lv_init+0x5c>)
   15ec0:	782e      	ldrb	r6, [r5, #0]
   15ec2:	bb36      	cbnz	r6, 15f12 <lv_init+0x56>
    _lv_mem_init();
   15ec4:	f00f fd15 	bl	258f2 <_lv_mem_init>
    _lv_task_core_init();
   15ec8:	f002 ff9e 	bl	18e08 <_lv_task_core_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
   15ecc:	4813      	ldr	r0, [pc, #76]	; (15f1c <lv_init+0x60>)
   15ece:	2110      	movs	r1, #16
   15ed0:	f00f fc19 	bl	25706 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
   15ed4:	4812      	ldr	r0, [pc, #72]	; (15f20 <lv_init+0x64>)
   15ed6:	f44f 71c0 	mov.w	r1, #384	; 0x180
   15eda:	f00f fc14 	bl	25706 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
   15ede:	4811      	ldr	r0, [pc, #68]	; (15f24 <lv_init+0x68>)
   15ee0:	2164      	movs	r1, #100	; 0x64
   15ee2:	f00f fc10 	bl	25706 <_lv_ll_init>
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
   15ee6:	4b10      	ldr	r3, [pc, #64]	; (15f28 <lv_init+0x6c>)
   15ee8:	9300      	str	r3, [sp, #0]
   15eea:	2401      	movs	r4, #1
   15eec:	e9cd 3301 	strd	r3, r3, [sp, #4]
   15ef0:	4632      	mov	r2, r6
   15ef2:	4631      	mov	r1, r6
   15ef4:	4620      	mov	r0, r4
   15ef6:	f003 fbbb 	bl	19670 <lv_theme_mono_init>
    lv_theme_set_act(th);
   15efa:	f003 fb73 	bl	195e4 <lv_theme_set_act>
    _lv_refr_init();
   15efe:	f00c fb10 	bl	22522 <_lv_refr_init>
    _lv_indev_init();
   15f02:	f00b f99b 	bl	2123c <_lv_indev_init>
    _lv_img_decoder_init();
   15f06:	f002 fdc1 	bl	18a8c <_lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
   15f0a:	4620      	mov	r0, r4
   15f0c:	f002 fbb6 	bl	1867c <lv_img_cache_set_size>
    lv_initialized = true;
   15f10:	702c      	strb	r4, [r5, #0]
}
   15f12:	b004      	add	sp, #16
   15f14:	bd70      	pop	{r4, r5, r6, pc}
   15f16:	bf00      	nop
   15f18:	20002f87 	.word	0x20002f87
   15f1c:	20002e28 	.word	0x20002e28
   15f20:	20002cfc 	.word	0x20002cfc
   15f24:	20002d9c 	.word	0x20002d9c
   15f28:	20000974 	.word	0x20000974

00015f2c <lv_event_send_func>:
{
   15f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15f30:	4f1e      	ldr	r7, [pc, #120]	; (15fac <lv_event_send_func+0x80>)
    const void * event_act_data_save = event_act_data;
   15f32:	f8df a07c 	ldr.w	sl, [pc, #124]	; 15fb0 <lv_event_send_func+0x84>
    event_temp_data.obj     = obj;
   15f36:	9101      	str	r1, [sp, #4]
{
   15f38:	461e      	mov	r6, r3
    event_temp_data.deleted = false;
   15f3a:	2300      	movs	r3, #0
   15f3c:	f88d 3008 	strb.w	r3, [sp, #8]
        event_temp_data.prev = event_temp_data_head;
   15f40:	683b      	ldr	r3, [r7, #0]
   15f42:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
   15f44:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
   15f46:	f8da 9000 	ldr.w	r9, [sl]
    event_temp_data_head = &event_temp_data;
   15f4a:	603b      	str	r3, [r7, #0]
{
   15f4c:	4680      	mov	r8, r0
   15f4e:	460c      	mov	r4, r1
   15f50:	4615      	mov	r5, r2
    event_act_data                   = data;
   15f52:	f8ca 6000 	str.w	r6, [sl]
    lv_indev_t * indev_act = lv_indev_get_act();
   15f56:	f7ff feff 	bl	15d58 <lv_indev_get_act>
    if(indev_act) {
   15f5a:	b118      	cbz	r0, 15f64 <lv_event_send_func+0x38>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
   15f5c:	6883      	ldr	r3, [r0, #8]
   15f5e:	b10b      	cbz	r3, 15f64 <lv_event_send_func+0x38>
   15f60:	4629      	mov	r1, r5
   15f62:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
   15f64:	f1b8 0f00 	cmp.w	r8, #0
   15f68:	d002      	beq.n	15f70 <lv_event_send_func+0x44>
   15f6a:	4629      	mov	r1, r5
   15f6c:	4620      	mov	r0, r4
   15f6e:	47c0      	blx	r8
    event_temp_data_head = event_temp_data_head->prev;
   15f70:	683b      	ldr	r3, [r7, #0]
    event_act_data = event_act_data_save;
   15f72:	f8ca 9000 	str.w	r9, [sl]
    event_temp_data_head = event_temp_data_head->prev;
   15f76:	689b      	ldr	r3, [r3, #8]
   15f78:	603b      	str	r3, [r7, #0]
    if(event_temp_data.deleted) {
   15f7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15f7e:	b983      	cbnz	r3, 15fa2 <lv_event_send_func+0x76>
    if(obj) {
   15f80:	b18c      	cbz	r4, 15fa6 <lv_event_send_func+0x7a>
        if(obj->parent_event && obj->parent) {
   15f82:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   15f86:	065a      	lsls	r2, r3, #25
   15f88:	d50d      	bpl.n	15fa6 <lv_event_send_func+0x7a>
   15f8a:	6820      	ldr	r0, [r4, #0]
   15f8c:	b158      	cbz	r0, 15fa6 <lv_event_send_func+0x7a>
            lv_res_t res = lv_event_send(obj->parent, event, data);
   15f8e:	4632      	mov	r2, r6
   15f90:	4629      	mov	r1, r5
   15f92:	f00b f986 	bl	212a2 <lv_event_send>
        return LV_RES_INV;
   15f96:	1e43      	subs	r3, r0, #1
   15f98:	4258      	negs	r0, r3
   15f9a:	4158      	adcs	r0, r3
}
   15f9c:	b004      	add	sp, #16
   15f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
   15fa2:	2000      	movs	r0, #0
   15fa4:	e7fa      	b.n	15f9c <lv_event_send_func+0x70>
    return LV_RES_OK;
   15fa6:	2001      	movs	r0, #1
   15fa8:	e7f8      	b.n	15f9c <lv_event_send_func+0x70>
   15faa:	bf00      	nop
   15fac:	20002ce8 	.word	0x20002ce8
   15fb0:	20002ce4 	.word	0x20002ce4

00015fb4 <lv_obj_get_disp>:
{
   15fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->parent == NULL)
   15fb6:	6803      	ldr	r3, [r0, #0]
{
   15fb8:	4605      	mov	r5, r0
    if(obj->parent == NULL)
   15fba:	b123      	cbz	r3, 15fc6 <lv_obj_get_disp+0x12>
    return obj->parent;
   15fbc:	462b      	mov	r3, r5
   15fbe:	682d      	ldr	r5, [r5, #0]
    } while(par != NULL);
   15fc0:	2d00      	cmp	r5, #0
   15fc2:	d1fb      	bne.n	15fbc <lv_obj_get_disp+0x8>
   15fc4:	461d      	mov	r5, r3
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
   15fc6:	480d      	ldr	r0, [pc, #52]	; (15ffc <lv_obj_get_disp+0x48>)
   15fc8:	4f0c      	ldr	r7, [pc, #48]	; (15ffc <lv_obj_get_disp+0x48>)
   15fca:	f00f fbdb 	bl	25784 <_lv_ll_get_head>
   15fce:	4604      	mov	r4, r0
   15fd0:	b90c      	cbnz	r4, 15fd6 <lv_obj_get_disp+0x22>
}
   15fd2:	4620      	mov	r0, r4
   15fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, s) {
   15fd6:	f104 0634 	add.w	r6, r4, #52	; 0x34
   15fda:	4630      	mov	r0, r6
   15fdc:	f00f fbd2 	bl	25784 <_lv_ll_get_head>
   15fe0:	4601      	mov	r1, r0
   15fe2:	b928      	cbnz	r0, 15ff0 <lv_obj_get_disp+0x3c>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
   15fe4:	4621      	mov	r1, r4
   15fe6:	4638      	mov	r0, r7
   15fe8:	f00f fbd2 	bl	25790 <_lv_ll_get_next>
   15fec:	4604      	mov	r4, r0
   15fee:	e7ef      	b.n	15fd0 <lv_obj_get_disp+0x1c>
            if(s == scr) return d;
   15ff0:	428d      	cmp	r5, r1
   15ff2:	d0ee      	beq.n	15fd2 <lv_obj_get_disp+0x1e>
        _LV_LL_READ(d->scr_ll, s) {
   15ff4:	4630      	mov	r0, r6
   15ff6:	f00f fbcb 	bl	25790 <_lv_ll_get_next>
   15ffa:	e7f1      	b.n	15fe0 <lv_obj_get_disp+0x2c>
   15ffc:	20002cfc 	.word	0x20002cfc

00016000 <obj_del_core>:
{
   16000:	b570      	push	{r4, r5, r6, lr}
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
   16002:	2200      	movs	r2, #0
   16004:	2115      	movs	r1, #21
{
   16006:	4604      	mov	r4, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
   16008:	f00b f94b 	bl	212a2 <lv_event_send>
    i = _lv_ll_get_head(&(obj->child_ll));
   1600c:	1d25      	adds	r5, r4, #4
        i = _lv_ll_get_head(&(obj->child_ll));
   1600e:	4628      	mov	r0, r5
   16010:	f00f fbb8 	bl	25784 <_lv_ll_get_head>
    while(i != NULL) {
   16014:	b9f8      	cbnz	r0, 16056 <obj_del_core+0x56>
    lv_event_temp_data_t * t = event_temp_data_head;
   16016:	4b1e      	ldr	r3, [pc, #120]	; (16090 <obj_del_core+0x90>)
   16018:	681e      	ldr	r6, [r3, #0]
        if(t->obj == obj) t->deleted = true;
   1601a:	2301      	movs	r3, #1
    while(t) {
   1601c:	b9f6      	cbnz	r6, 1605c <obj_del_core+0x5c>
    lv_indev_t * indev = lv_indev_get_next(NULL);
   1601e:	4630      	mov	r0, r6
        indev = lv_indev_get_next(indev);
   16020:	f002 fe08 	bl	18c34 <lv_indev_get_next>
   16024:	4605      	mov	r5, r0
    while(indev) {
   16026:	b9f8      	cbnz	r0, 16068 <obj_del_core+0x68>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
   16028:	4602      	mov	r2, r0
   1602a:	4601      	mov	r1, r0
   1602c:	69e3      	ldr	r3, [r4, #28]
   1602e:	4620      	mov	r0, r4
   16030:	4798      	blx	r3
    return obj->parent;
   16032:	6820      	ldr	r0, [r4, #0]
    if(par == NULL) { /*It is a screen*/
   16034:	bb40      	cbnz	r0, 16088 <obj_del_core+0x88>
        lv_disp_t * d = lv_obj_get_disp(obj);
   16036:	4620      	mov	r0, r4
   16038:	f7ff ffbc 	bl	15fb4 <lv_obj_get_disp>
        _lv_ll_remove(&d->scr_ll, obj);
   1603c:	4621      	mov	r1, r4
   1603e:	3034      	adds	r0, #52	; 0x34
        _lv_ll_remove(&(par->child_ll), obj);
   16040:	f00f fbe1 	bl	25806 <_lv_ll_remove>
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
   16044:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16046:	b108      	cbz	r0, 1604c <obj_del_core+0x4c>
   16048:	f002 fe12 	bl	18c70 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
   1604c:	4620      	mov	r0, r4
}
   1604e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_mem_free(obj); /*Free the object itself*/
   16052:	f002 be0d 	b.w	18c70 <lv_mem_free>
        obj_del_core(i);
   16056:	f7ff ffd3 	bl	16000 <obj_del_core>
   1605a:	e7d8      	b.n	1600e <obj_del_core+0xe>
        if(t->obj == obj) t->deleted = true;
   1605c:	6832      	ldr	r2, [r6, #0]
   1605e:	4294      	cmp	r4, r2
   16060:	bf08      	it	eq
   16062:	7133      	strbeq	r3, [r6, #4]
        t = t->prev;
   16064:	68b6      	ldr	r6, [r6, #8]
   16066:	e7d9      	b.n	1601c <obj_del_core+0x1c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
   16068:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1606a:	42a3      	cmp	r3, r4
   1606c:	d002      	beq.n	16074 <obj_del_core+0x74>
   1606e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   16070:	42a3      	cmp	r3, r4
   16072:	d103      	bne.n	1607c <obj_del_core+0x7c>
            lv_indev_reset(indev, obj);
   16074:	4621      	mov	r1, r4
   16076:	4628      	mov	r0, r5
   16078:	f7ff fe74 	bl	15d64 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
   1607c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1607e:	42a3      	cmp	r3, r4
            indev->proc.types.pointer.last_pressed = NULL;
   16080:	bf08      	it	eq
   16082:	642e      	streq	r6, [r5, #64]	; 0x40
        indev = lv_indev_get_next(indev);
   16084:	4628      	mov	r0, r5
   16086:	e7cb      	b.n	16020 <obj_del_core+0x20>
        _lv_ll_remove(&(par->child_ll), obj);
   16088:	4621      	mov	r1, r4
   1608a:	3004      	adds	r0, #4
   1608c:	e7d8      	b.n	16040 <obj_del_core+0x40>
   1608e:	bf00      	nop
   16090:	20002ce8 	.word	0x20002ce8

00016094 <lv_obj_create>:
{
   16094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16098:	460d      	mov	r5, r1
    if(parent == NULL) {
   1609a:	4606      	mov	r6, r0
   1609c:	2800      	cmp	r0, #0
   1609e:	d155      	bne.n	1614c <lv_obj_create+0xb8>
        lv_disp_t * disp = lv_disp_get_default();
   160a0:	f002 fd28 	bl	18af4 <lv_disp_get_default>
        if(!disp) {
   160a4:	b918      	cbnz	r0, 160ae <lv_obj_create+0x1a>
            return NULL;
   160a6:	2400      	movs	r4, #0
}
   160a8:	4620      	mov	r0, r4
   160aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
   160ae:	3034      	adds	r0, #52	; 0x34
   160b0:	f00f fb31 	bl	25716 <_lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
   160b4:	4604      	mov	r4, r0
   160b6:	2800      	cmp	r0, #0
   160b8:	d0f5      	beq.n	160a6 <lv_obj_create+0x12>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
   160ba:	213c      	movs	r1, #60	; 0x3c
   160bc:	f00b f8e1 	bl	21282 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   160c0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        new_obj->event_cb = NULL;
   160c4:	61a6      	str	r6, [r4, #24]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   160c6:	f366 1346 	bfi	r3, r6, #5, #2
   160ca:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->signal_cb = lv_obj_signal;
   160ce:	4b9a      	ldr	r3, [pc, #616]	; (16338 <lv_obj_create+0x2a4>)
   160d0:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
   160d2:	4b9a      	ldr	r3, [pc, #616]	; (1633c <lv_obj_create+0x2a8>)
   160d4:	6223      	str	r3, [r4, #32]
        new_obj->coords.x1    = 0;
   160d6:	6126      	str	r6, [r4, #16]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
   160d8:	4630      	mov	r0, r6
   160da:	f002 fd11 	bl	18b00 <lv_disp_get_hor_res>
   160de:	3801      	subs	r0, #1
   160e0:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
   160e2:	4630      	mov	r0, r6
   160e4:	f002 fd1c 	bl	18b20 <lv_disp_get_ver_res>
   160e8:	3801      	subs	r0, #1
   160ea:	82e0      	strh	r0, [r4, #22]
    new_obj->ext_draw_pad = 0;
   160ec:	2700      	movs	r7, #0
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   160ee:	213c      	movs	r1, #60	; 0x3c
   160f0:	1d20      	adds	r0, r4, #4
    _lv_memset_00(&new_obj->user_data, sizeof(lv_obj_user_data_t));
   160f2:	f104 0838 	add.w	r8, r4, #56	; 0x38
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   160f6:	f00f fb06 	bl	25706 <_lv_ll_init>
    new_obj->ext_draw_pad = 0;
   160fa:	8627      	strh	r7, [r4, #48]	; 0x30
    _lv_memset_00(&new_obj->user_data, sizeof(lv_obj_user_data_t));
   160fc:	4640      	mov	r0, r8
   160fe:	2104      	movs	r1, #4
   16100:	f00b f8bf 	bl	21282 <_lv_memset_00>
    new_obj->gesture_parent = parent ? 1 : 0;
   16104:	1bf2      	subs	r2, r6, r7
   16106:	bf18      	it	ne
   16108:	2201      	movne	r2, #1
    new_obj->click        = 1;
   1610a:	f640 4301 	movw	r3, #3073	; 0xc01
   1610e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16112:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    new_obj->protect      = LV_PROTECT_NONE;
   16114:	86a7      	strh	r7, [r4, #52]	; 0x34
    new_obj->click        = 1;
   16116:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
   1611a:	4313      	orrs	r3, r2
    new_obj->ext_attr = NULL;
   1611c:	6267      	str	r7, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
   1611e:	f104 0728 	add.w	r7, r4, #40	; 0x28
    new_obj->click        = 1;
   16122:	8663      	strh	r3, [r4, #50]	; 0x32
    lv_style_list_init(&new_obj->style_list);
   16124:	4638      	mov	r0, r7
   16126:	f00c fad9 	bl	226dc <lv_style_list_init>
    if(copy == NULL) {
   1612a:	2d00      	cmp	r5, #0
   1612c:	d166      	bne.n	161fc <lv_obj_create+0x168>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
   1612e:	2e00      	cmp	r6, #0
   16130:	d05f      	beq.n	161f2 <lv_obj_create+0x15e>
   16132:	2102      	movs	r1, #2
   16134:	4620      	mov	r0, r4
   16136:	f003 fa5b 	bl	195f0 <lv_theme_apply>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
   1613a:	69f3      	ldr	r3, [r6, #28]
   1613c:	4622      	mov	r2, r4
   1613e:	2101      	movs	r1, #1
   16140:	4630      	mov	r0, r6
   16142:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
   16144:	4620      	mov	r0, r4
   16146:	f00b f93d 	bl	213c4 <lv_obj_invalidate>
   1614a:	e7ad      	b.n	160a8 <lv_obj_create+0x14>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
   1614c:	3004      	adds	r0, #4
   1614e:	f00f fae2 	bl	25716 <_lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
   16152:	4604      	mov	r4, r0
   16154:	2800      	cmp	r0, #0
   16156:	d0a6      	beq.n	160a6 <lv_obj_create+0x12>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
   16158:	213c      	movs	r1, #60	; 0x3c
   1615a:	f00b f892 	bl	21282 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   1615e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        new_obj->parent = parent;
   16162:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   16164:	f36f 1346 	bfc	r3, #5, #2
   16168:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->signal_cb = lv_obj_signal;
   1616c:	4b72      	ldr	r3, [pc, #456]	; (16338 <lv_obj_create+0x2a4>)
   1616e:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
   16170:	4b72      	ldr	r3, [pc, #456]	; (1633c <lv_obj_create+0x2a8>)
   16172:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
   16174:	f04f 0900 	mov.w	r9, #0
        new_obj->coords.y1    = parent->coords.y1;
   16178:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
   1617c:	8263      	strh	r3, [r4, #18]
        new_obj->event_cb = NULL;
   1617e:	f8c4 9018 	str.w	r9, [r4, #24]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   16182:	4648      	mov	r0, r9
   16184:	f9b6 8012 	ldrsh.w	r8, [r6, #18]
   16188:	f002 fcda 	bl	18b40 <lv_disp_get_dpi>
   1618c:	2732      	movs	r7, #50	; 0x32
   1618e:	f04f 0a50 	mov.w	sl, #80	; 0x50
   16192:	fb00 a007 	mla	r0, r0, r7, sl
   16196:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1619a:	db26      	blt.n	161ea <lv_obj_create+0x156>
   1619c:	4648      	mov	r0, r9
   1619e:	f002 fccf 	bl	18b40 <lv_disp_get_dpi>
   161a2:	fb00 a707 	mla	r7, r0, r7, sl
   161a6:	20a0      	movs	r0, #160	; 0xa0
   161a8:	fb97 f7f0 	sdiv	r7, r7, r0
   161ac:	b23f      	sxth	r7, r7
   161ae:	4447      	add	r7, r8
            new_obj->coords.x1    = parent->coords.x1;
   161b0:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   161b4:	82e7      	strh	r7, [r4, #22]
            new_obj->coords.x1    = parent->coords.x1;
   161b6:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
   161b8:	2000      	movs	r0, #0
   161ba:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
   161be:	f002 fcbf 	bl	18b40 <lv_disp_get_dpi>
   161c2:	2764      	movs	r7, #100	; 0x64
   161c4:	f04f 0950 	mov.w	r9, #80	; 0x50
   161c8:	fb00 9007 	mla	r0, r0, r7, r9
   161cc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   161d0:	db0d      	blt.n	161ee <lv_obj_create+0x15a>
   161d2:	2000      	movs	r0, #0
   161d4:	f002 fcb4 	bl	18b40 <lv_disp_get_dpi>
   161d8:	fb00 9707 	mla	r7, r0, r7, r9
   161dc:	20a0      	movs	r0, #160	; 0xa0
   161de:	fb97 f7f0 	sdiv	r7, r7, r0
   161e2:	b23f      	sxth	r7, r7
   161e4:	4447      	add	r7, r8
   161e6:	82a7      	strh	r7, [r4, #20]
   161e8:	e780      	b.n	160ec <lv_obj_create+0x58>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   161ea:	2701      	movs	r7, #1
   161ec:	e7df      	b.n	161ae <lv_obj_create+0x11a>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
   161ee:	2701      	movs	r7, #1
   161f0:	e7f8      	b.n	161e4 <lv_obj_create+0x150>
        else  lv_theme_apply(new_obj, LV_THEME_SCR);
   161f2:	2101      	movs	r1, #1
   161f4:	4620      	mov	r0, r4
   161f6:	f003 f9fb 	bl	195f0 <lv_theme_apply>
    if(parent != NULL) {
   161fa:	e755      	b.n	160a8 <lv_obj_create+0x14>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
   161fc:	f105 0128 	add.w	r1, r5, #40	; 0x28
   16200:	4638      	mov	r0, r7
   16202:	f00c fc95 	bl	22b30 <lv_style_list_copy>
        lv_area_copy(&new_obj->coords, &copy->coords);
   16206:	f105 0110 	add.w	r1, r5, #16
   1620a:	f104 0010 	add.w	r0, r4, #16
   1620e:	f00b f83e 	bl	2128e <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
   16212:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
   16216:	8623      	strh	r3, [r4, #48]	; 0x30
        _lv_memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
   16218:	2204      	movs	r2, #4
   1621a:	f105 0138 	add.w	r1, r5, #56	; 0x38
   1621e:	4640      	mov	r0, r8
   16220:	f00b f833 	bl	2128a <_lv_memcpy>
        new_obj->base_dir = copy->base_dir;
   16224:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   16228:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   1622c:	f3c3 1341 	ubfx	r3, r3, #5, #2
   16230:	f363 1246 	bfi	r2, r3, #5, #2
   16234:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        new_obj->event_cb = copy->event_cb;
   16238:	69ab      	ldr	r3, [r5, #24]
   1623a:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
   1623c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   16240:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   16244:	09db      	lsrs	r3, r3, #7
   16246:	f363 12c7 	bfi	r2, r3, #7, #1
   1624a:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->click        = copy->click;
   1624e:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
   16252:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   16256:	f362 0300 	bfi	r3, r2, #0, #1
   1625a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->drag         = copy->drag;
   1625e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   16262:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   16266:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1626a:	f363 0241 	bfi	r2, r3, #1, #1
   1626e:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->drag_dir     = copy->drag_dir;
   16272:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   16276:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   1627a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1627e:	f363 0284 	bfi	r2, r3, #2, #3
   16282:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        new_obj->drag_throw   = copy->drag_throw;
   16286:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1628a:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   1628e:	f3c3 0380 	ubfx	r3, r3, #2, #1
   16292:	f363 0282 	bfi	r2, r3, #2, #1
   16296:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->drag_parent  = copy->drag_parent;
   1629a:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1629e:	b2d2      	uxtb	r2, r2
   162a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   162a4:	f363 02c3 	bfi	r2, r3, #3, #1
   162a8:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->hidden       = copy->hidden;
   162ac:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   162b0:	b2d2      	uxtb	r2, r2
   162b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
   162b6:	f363 1204 	bfi	r2, r3, #4, #1
   162ba:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->top          = copy->top;
   162be:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   162c2:	b2d2      	uxtb	r2, r2
   162c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
   162c8:	f363 1245 	bfi	r2, r3, #5, #1
   162cc:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->parent_event = copy->parent_event;
   162d0:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   162d4:	b2d2      	uxtb	r2, r2
   162d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   162da:	f363 1286 	bfi	r2, r3, #6, #1
   162de:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->protect      = copy->protect;
   162e2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   162e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->gesture_parent = copy->gesture_parent;
   162ea:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
   162ee:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   162f2:	f362 0300 	bfi	r3, r2, #0, #1
   162f6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->focus_parent = copy->focus_parent;
   162fa:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   162fe:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   16302:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16306:	f363 0241 	bfi	r2, r3, #1, #1
   1630a:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
   1630e:	682b      	ldr	r3, [r5, #0]
   16310:	b173      	cbz	r3, 16330 <lv_obj_create+0x29c>
   16312:	2e00      	cmp	r6, #0
   16314:	f43f aec8 	beq.w	160a8 <lv_obj_create+0x14>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
   16318:	4628      	mov	r0, r5
   1631a:	f00b f989 	bl	21630 <lv_obj_get_x>
   1631e:	4601      	mov	r1, r0
   16320:	4628      	mov	r0, r5
   16322:	f00b f98d 	bl	21640 <lv_obj_get_y>
   16326:	4602      	mov	r2, r0
   16328:	4620      	mov	r0, r4
   1632a:	f00b f86e 	bl	2140a <lv_obj_set_pos>
    if(parent != NULL) {
   1632e:	e704      	b.n	1613a <lv_obj_create+0xa6>
   16330:	2e00      	cmp	r6, #0
   16332:	f47f af02 	bne.w	1613a <lv_obj_create+0xa6>
   16336:	e6b7      	b.n	160a8 <lv_obj_create+0x14>
   16338:	00016969 	.word	0x00016969
   1633c:	00021ab1 	.word	0x00021ab1

00016340 <_lv_obj_get_style_int>:
{
   16340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16344:	4606      	mov	r6, r0
   16346:	b085      	sub	sp, #20
   16348:	468b      	mov	fp, r1
   1634a:	4617      	mov	r7, r2
    attr = prop_ori >> 8;
   1634c:	ea4f 2812 	mov.w	r8, r2, lsr #8
    while(parent) {
   16350:	4615      	mov	r5, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   16352:	f248 0982 	movw	r9, #32898	; 0x8082
   16356:	f248 0a83 	movw	sl, #32899	; 0x8083
    while(parent) {
   1635a:	2e00      	cmp	r6, #0
   1635c:	f000 80ae 	beq.w	164bc <_lv_obj_get_style_int+0x17c>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   16360:	4659      	mov	r1, fp
   16362:	4630      	mov	r0, r6
   16364:	f00b f974 	bl	21650 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
   16368:	7942      	ldrb	r2, [r0, #5]
   1636a:	0711      	lsls	r1, r2, #28
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1636c:	4604      	mov	r4, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
   1636e:	d414      	bmi.n	1639a <_lv_obj_get_style_int+0x5a>
   16370:	7901      	ldrb	r1, [r0, #4]
   16372:	068b      	lsls	r3, r1, #26
   16374:	d011      	beq.n	1639a <_lv_obj_get_style_int+0x5a>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
   16376:	f012 0f04 	tst.w	r2, #4
   1637a:	f425 42fe 	bic.w	r2, r5, #32512	; 0x7f00
   1637e:	d105      	bne.n	1638c <_lv_obj_get_style_int+0x4c>
   16380:	4659      	mov	r1, fp
   16382:	4630      	mov	r0, r6
   16384:	9201      	str	r2, [sp, #4]
   16386:	f000 f8d7 	bl	16538 <update_style_cache>
   1638a:	9a01      	ldr	r2, [sp, #4]
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1638c:	2a33      	cmp	r2, #51	; 0x33
   1638e:	dc68      	bgt.n	16462 <_lv_obj_get_style_int+0x122>
   16390:	2a2f      	cmp	r2, #47	; 0x2f
   16392:	dc20      	bgt.n	163d6 <_lv_obj_get_style_int+0x96>
   16394:	2a18      	cmp	r2, #24
   16396:	dc61      	bgt.n	1645c <_lv_obj_get_style_int+0x11c>
   16398:	bb52      	cbnz	r2, 163f0 <_lv_obj_get_style_int+0xb0>
        lv_state_t state = lv_obj_get_state(parent, part);
   1639a:	4659      	mov	r1, fp
   1639c:	4630      	mov	r0, r6
   1639e:	f00b f991 	bl	216c4 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   163a2:	eb07 2500 	add.w	r5, r7, r0, lsl #8
   163a6:	b2ad      	uxth	r5, r5
        res = _lv_style_list_get_int(list, prop, &value_act);
   163a8:	f10d 020e 	add.w	r2, sp, #14
   163ac:	4629      	mov	r1, r5
   163ae:	4620      	mov	r0, r4
   163b0:	f00c fc2e 	bl	22c10 <_lv_style_list_get_int>
        if(res == LV_RES_OK) return value_act;
   163b4:	2801      	cmp	r0, #1
   163b6:	f040 80a6 	bne.w	16506 <_lv_obj_get_style_int+0x1c6>
   163ba:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
}
   163be:	b005      	add	sp, #20
   163c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163c4:	f1a2 0154 	sub.w	r1, r2, #84	; 0x54
   163c8:	4b5a      	ldr	r3, [pc, #360]	; (16534 <_lv_obj_get_style_int+0x1f4>)
   163ca:	2201      	movs	r2, #1
   163cc:	408a      	lsls	r2, r1
   163ce:	421a      	tst	r2, r3
   163d0:	d0e3      	beq.n	1639a <_lv_obj_get_style_int+0x5a>
                    if(list->blend_mode_all_normal) def = true;
   163d2:	79a2      	ldrb	r2, [r4, #6]
   163d4:	e08c      	b.n	164f0 <_lv_obj_get_style_int+0x1b0>
   163d6:	3a31      	subs	r2, #49	; 0x31
   163d8:	2a02      	cmp	r2, #2
   163da:	d87d      	bhi.n	164d8 <_lv_obj_get_style_int+0x198>
   163dc:	a301      	add	r3, pc, #4	; (adr r3, 163e4 <_lv_obj_get_style_int+0xa4>)
   163de:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   163e2:	bf00      	nop
   163e4:	000164dd 	.word	0x000164dd
   163e8:	000163d3 	.word	0x000163d3
   163ec:	000164e1 	.word	0x000164e1
   163f0:	3a01      	subs	r2, #1
   163f2:	2a17      	cmp	r2, #23
   163f4:	d8d1      	bhi.n	1639a <_lv_obj_get_style_int+0x5a>
   163f6:	a301      	add	r3, pc, #4	; (adr r3, 163fc <_lv_obj_get_style_int+0xbc>)
   163f8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   163fc:	000164e7 	.word	0x000164e7
   16400:	000164ab 	.word	0x000164ab
   16404:	0001639b 	.word	0x0001639b
   16408:	000164b3 	.word	0x000164b3
   1640c:	000164b3 	.word	0x000164b3
   16410:	000164b3 	.word	0x000164b3
   16414:	000164b3 	.word	0x000164b3
   16418:	0001639b 	.word	0x0001639b
   1641c:	0001639b 	.word	0x0001639b
   16420:	0001639b 	.word	0x0001639b
   16424:	0001639b 	.word	0x0001639b
   16428:	0001639b 	.word	0x0001639b
   1642c:	0001639b 	.word	0x0001639b
   16430:	0001639b 	.word	0x0001639b
   16434:	0001639b 	.word	0x0001639b
   16438:	000164f7 	.word	0x000164f7
   1643c:	000164f7 	.word	0x000164f7
   16440:	000164f7 	.word	0x000164f7
   16444:	000164f7 	.word	0x000164f7
   16448:	0001639b 	.word	0x0001639b
   1644c:	000164fb 	.word	0x000164fb
   16450:	000164fb 	.word	0x000164fb
   16454:	000164fb 	.word	0x000164fb
   16458:	000164fb 	.word	0x000164fb
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1645c:	2a20      	cmp	r2, #32
   1645e:	d0b8      	beq.n	163d2 <_lv_obj_get_style_int+0x92>
   16460:	e79b      	b.n	1639a <_lv_obj_get_style_int+0x5a>
   16462:	2a72      	cmp	r2, #114	; 0x72
   16464:	dc0b      	bgt.n	1647e <_lv_obj_get_style_int+0x13e>
   16466:	2a53      	cmp	r2, #83	; 0x53
   16468:	dcac      	bgt.n	163c4 <_lv_obj_get_style_int+0x84>
   1646a:	2a42      	cmp	r2, #66	; 0x42
   1646c:	d0b1      	beq.n	163d2 <_lv_obj_get_style_int+0x92>
   1646e:	2a50      	cmp	r2, #80	; 0x50
   16470:	d03d      	beq.n	164ee <_lv_obj_get_style_int+0x1ae>
   16472:	2a40      	cmp	r2, #64	; 0x40
   16474:	d191      	bne.n	1639a <_lv_obj_get_style_int+0x5a>
                    if(list->outline_width_zero) def = true;
   16476:	79e2      	ldrb	r2, [r4, #7]
                    if(list->pad_all_zero) def = true;
   16478:	f012 0f01 	tst.w	r2, #1
   1647c:	e00c      	b.n	16498 <_lv_obj_get_style_int+0x158>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1647e:	454a      	cmp	r2, r9
   16480:	d03f      	beq.n	16502 <_lv_obj_get_style_int+0x1c2>
   16482:	dc0c      	bgt.n	1649e <_lv_obj_get_style_int+0x15e>
   16484:	2a91      	cmp	r2, #145	; 0x91
   16486:	d0a4      	beq.n	163d2 <_lv_obj_get_style_int+0x92>
   16488:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
   1648c:	3a80      	subs	r2, #128	; 0x80
   1648e:	2a01      	cmp	r2, #1
   16490:	d883      	bhi.n	1639a <_lv_obj_get_style_int+0x5a>
                    if(list->text_space_zero) def = true;
   16492:	79e2      	ldrb	r2, [r4, #7]
                    if(list->border_width_zero) def = true;
   16494:	f012 0f20 	tst.w	r2, #32
                    if(list->text_decor_none) def = true;
   16498:	f43f af7f 	beq.w	1639a <_lv_obj_get_style_int+0x5a>
   1649c:	e00e      	b.n	164bc <_lv_obj_get_style_int+0x17c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1649e:	4552      	cmp	r2, sl
   164a0:	d097      	beq.n	163d2 <_lv_obj_get_style_int+0x92>
   164a2:	f248 01a0 	movw	r1, #32928	; 0x80a0
   164a6:	428a      	cmp	r2, r1
   164a8:	e7d9      	b.n	1645e <_lv_obj_get_style_int+0x11e>
                    if(list->clip_corner_off) def = true;
   164aa:	7962      	ldrb	r2, [r4, #5]
                    if(list->text_decor_none) def = true;
   164ac:	f012 0f40 	tst.w	r2, #64	; 0x40
   164b0:	e7f2      	b.n	16498 <_lv_obj_get_style_int+0x158>
                    if(list->transform_all_zero) def = true;
   164b2:	f994 2005 	ldrsb.w	r2, [r4, #5]
                    if(list->border_post_off) def = true;
   164b6:	2a00      	cmp	r2, #0
   164b8:	f6bf af6f 	bge.w	1639a <_lv_obj_get_style_int+0x5a>
    prop = prop & (~LV_STYLE_STATE_MASK);
   164bc:	f425 45fe 	bic.w	r5, r5, #32512	; 0x7f00
    switch(prop) {
   164c0:	2d22      	cmp	r5, #34	; 0x22
    prop = prop & (~LV_STYLE_STATE_MASK);
   164c2:	b2ab      	uxth	r3, r5
    switch(prop) {
   164c4:	d030      	beq.n	16528 <_lv_obj_get_style_int+0x1e8>
   164c6:	d828      	bhi.n	1651a <_lv_obj_get_style_int+0x1da>
   164c8:	2b03      	cmp	r3, #3
   164ca:	d02f      	beq.n	1652c <_lv_obj_get_style_int+0x1ec>
            return LV_IMG_ZOOM_NONE;
   164cc:	2b07      	cmp	r3, #7
   164ce:	bf14      	ite	ne
   164d0:	2000      	movne	r0, #0
   164d2:	f44f 7080 	moveq.w	r0, #256	; 0x100
   164d6:	e772      	b.n	163be <_lv_obj_get_style_int+0x7e>
                    if(list->border_width_zero) def = true;
   164d8:	79a2      	ldrb	r2, [r4, #6]
   164da:	e7db      	b.n	16494 <_lv_obj_get_style_int+0x154>
                    if(list->border_side_full) def = true;
   164dc:	79a2      	ldrb	r2, [r4, #6]
   164de:	e7e5      	b.n	164ac <_lv_obj_get_style_int+0x16c>
                    if(list->border_post_off) def = true;
   164e0:	f994 2006 	ldrsb.w	r2, [r4, #6]
   164e4:	e7e7      	b.n	164b6 <_lv_obj_get_style_int+0x176>
                    if(list->radius_zero) def = true;
   164e6:	7962      	ldrb	r2, [r4, #5]
   164e8:	f012 0f10 	tst.w	r2, #16
   164ec:	e7d4      	b.n	16498 <_lv_obj_get_style_int+0x158>
                    if(list->shadow_width_zero) def = true;
   164ee:	79e2      	ldrb	r2, [r4, #7]
                    if(list->blend_mode_all_normal) def = true;
   164f0:	f012 0f04 	tst.w	r2, #4
   164f4:	e7d0      	b.n	16498 <_lv_obj_get_style_int+0x158>
                    if(list->pad_all_zero) def = true;
   164f6:	79a2      	ldrb	r2, [r4, #6]
   164f8:	e7be      	b.n	16478 <_lv_obj_get_style_int+0x138>
                    if(list->margin_all_zero) def = true;
   164fa:	79a2      	ldrb	r2, [r4, #6]
   164fc:	f012 0f02 	tst.w	r2, #2
   16500:	e7ca      	b.n	16498 <_lv_obj_get_style_int+0x158>
                    if(list->text_decor_none) def = true;
   16502:	79e2      	ldrb	r2, [r4, #7]
   16504:	e7d2      	b.n	164ac <_lv_obj_get_style_int+0x16c>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   16506:	f018 0f80 	tst.w	r8, #128	; 0x80
   1650a:	d0d7      	beq.n	164bc <_lv_obj_get_style_int+0x17c>
        if(part != LV_OBJ_PART_MAIN) {
   1650c:	f1bb 0f00 	cmp.w	fp, #0
   16510:	d100      	bne.n	16514 <_lv_obj_get_style_int+0x1d4>
    return obj->parent;
   16512:	6836      	ldr	r6, [r6, #0]
{
   16514:	f04f 0b00 	mov.w	fp, #0
   16518:	e71f      	b.n	1635a <_lv_obj_get_style_int+0x1a>
    switch(prop) {
   1651a:	2b31      	cmp	r3, #49	; 0x31
   1651c:	d008      	beq.n	16530 <_lv_obj_get_style_int+0x1f0>
            return LV_DPI / 8;
   1651e:	2bc0      	cmp	r3, #192	; 0xc0
   16520:	bf14      	ite	ne
   16522:	2000      	movne	r0, #0
   16524:	2010      	moveq	r0, #16
   16526:	e74a      	b.n	163be <_lv_obj_get_style_int+0x7e>
            return 255;
   16528:	20ff      	movs	r0, #255	; 0xff
   1652a:	e748      	b.n	163be <_lv_obj_get_style_int+0x7e>
    switch(prop) {
   1652c:	2006      	movs	r0, #6
   1652e:	e746      	b.n	163be <_lv_obj_get_style_int+0x7e>
            return LV_BORDER_SIDE_FULL;
   16530:	200f      	movs	r0, #15
   16532:	e744      	b.n	163be <_lv_obj_get_style_int+0x7e>
   16534:	40001001 	.word	0x40001001

00016538 <update_style_cache>:
 * @param obj pointer to an obejct
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
   16538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1653a:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
   1653c:	4610      	mov	r0, r2
{
   1653e:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
   16540:	f7ff fc2e 	bl	15da0 <style_prop_is_cacheble>
   16544:	2800      	cmp	r0, #0
   16546:	f000 80fe 	beq.w	16746 <update_style_cache+0x20e>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1654a:	4628      	mov	r0, r5
   1654c:	f00b f880 	bl	21650 <lv_obj_get_style_list>

    bool ignore_cache_ori = list->ignore_cache;
   16550:	7943      	ldrb	r3, [r0, #5]
   16552:	f3c3 07c0 	ubfx	r7, r3, #3, #1
    list->ignore_cache = 1;
   16556:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1655a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1655e:	4604      	mov	r4, r0
    list->ignore_cache = 1;
   16560:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   16562:	f248 0282 	movw	r2, #32898	; 0x8082
   16566:	4631      	mov	r1, r6
   16568:	4628      	mov	r0, r5
   1656a:	f7ff fee9 	bl	16340 <_lv_obj_get_style_int>
#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
   1656e:	b2c0      	uxtb	r0, r0
   16570:	79e3      	ldrb	r3, [r4, #7]
   16572:	fab0 f080 	clz	r0, r0
   16576:	0940      	lsrs	r0, r0, #5
   16578:	f360 1386 	bfi	r3, r0, #6, #1
   1657c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1657e:	f248 028e 	movw	r2, #32910	; 0x808e
   16582:	4631      	mov	r1, r6
   16584:	4628      	mov	r0, r5
   16586:	f00b f94e 	bl	21826 <_lv_obj_get_style_ptr>
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;

    list->text_space_zero = 1;
   1658a:	4b96      	ldr	r3, [pc, #600]	; (167e4 <update_style_cache+0x2ac>)
   1658c:	4283      	cmp	r3, r0
   1658e:	bf0c      	ite	eq
   16590:	23a0      	moveq	r3, #160	; 0xa0
   16592:	2320      	movne	r3, #32
   16594:	79e0      	ldrb	r0, [r4, #7]
   16596:	f000 005f 	and.w	r0, r0, #95	; 0x5f
   1659a:	4303      	orrs	r3, r0
   1659c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1659e:	f248 0280 	movw	r2, #32896	; 0x8080
   165a2:	4631      	mov	r1, r6
   165a4:	4628      	mov	r0, r5
   165a6:	f7ff fecb 	bl	16340 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   165aa:	2800      	cmp	r0, #0
   165ac:	f000 80cc 	beq.w	16748 <update_style_cache+0x210>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
        list->text_space_zero = 0;
   165b0:	79e3      	ldrb	r3, [r4, #7]
   165b2:	f36f 1345 	bfc	r3, #5, #1
   165b6:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   165b8:	222c      	movs	r2, #44	; 0x2c
   165ba:	4631      	mov	r1, r6
   165bc:	4628      	mov	r0, r5
   165be:	f00b f8cd 	bl	2175c <_lv_obj_get_style_opa>
    }


    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
   165c2:	f1a0 02ff 	sub.w	r2, r0, #255	; 0xff
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
   165c6:	fab0 f080 	clz	r0, r0
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
   165ca:	4253      	negs	r3, r2
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
   165cc:	ea4f 1050 	mov.w	r0, r0, lsr #5
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
   165d0:	4153      	adcs	r3, r2
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
   165d2:	00c0      	lsls	r0, r0, #3
   165d4:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
   165d8:	79a3      	ldrb	r3, [r4, #6]
   165da:	f023 0318 	bic.w	r3, r3, #24
   165de:	4318      	orrs	r0, r3
   165e0:	71a0      	strb	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   165e2:	2230      	movs	r2, #48	; 0x30
   165e4:	4631      	mov	r1, r6
   165e6:	4628      	mov	r0, r5
   165e8:	f7ff feaa 	bl	16340 <_lv_obj_get_style_int>

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
   165ec:	79a3      	ldrb	r3, [r4, #6]
   165ee:	fab0 f080 	clz	r0, r0
   165f2:	0940      	lsrs	r0, r0, #5
   165f4:	f360 1345 	bfi	r3, r0, #5, #1
   165f8:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   165fa:	2231      	movs	r2, #49	; 0x31
   165fc:	4631      	mov	r1, r6
   165fe:	4628      	mov	r0, r5
   16600:	f7ff fe9e 	bl	16340 <_lv_obj_get_style_int>
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
   16604:	b2c0      	uxtb	r0, r0
   16606:	f1a0 010f 	sub.w	r1, r0, #15
   1660a:	4248      	negs	r0, r1
   1660c:	79a3      	ldrb	r3, [r4, #6]
   1660e:	4148      	adcs	r0, r1
   16610:	f360 1386 	bfi	r3, r0, #6, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   16614:	2233      	movs	r2, #51	; 0x33
   16616:	71a3      	strb	r3, [r4, #6]
   16618:	4631      	mov	r1, r6
   1661a:	4628      	mov	r0, r5
   1661c:	f7ff fe90 	bl	16340 <_lv_obj_get_style_int>
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
   16620:	79a3      	ldrb	r3, [r4, #6]
   16622:	fab0 f080 	clz	r0, r0
   16626:	0940      	lsrs	r0, r0, #5
   16628:	f360 13c7 	bfi	r3, r0, #7, #1
   1662c:	71a3      	strb	r3, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
   1662e:	4631      	mov	r1, r6
   16630:	4628      	mov	r0, r5
   16632:	f00b f88b 	bl	2174c <lv_obj_get_style_clip_corner>
   16636:	7963      	ldrb	r3, [r4, #5]
   16638:	f080 0001 	eor.w	r0, r0, #1
   1663c:	f360 1386 	bfi	r3, r0, #6, #1
   16640:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
   16642:	f248 02ad 	movw	r2, #32941	; 0x80ad
   16646:	4631      	mov	r1, r6
   16648:	4628      	mov	r0, r5
   1664a:	f00b f887 	bl	2175c <_lv_obj_get_style_opa>
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
   1664e:	79e3      	ldrb	r3, [r4, #7]
   16650:	fab0 f080 	clz	r0, r0
   16654:	0940      	lsrs	r0, r0, #5
   16656:	f360 1304 	bfi	r3, r0, #4, #1
   1665a:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   1665c:	2240      	movs	r2, #64	; 0x40
   1665e:	4631      	mov	r1, r6
   16660:	4628      	mov	r0, r5
   16662:	f7ff fe6d 	bl	16340 <_lv_obj_get_style_int>
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
   16666:	79e3      	ldrb	r3, [r4, #7]
   16668:	fab0 f080 	clz	r0, r0
   1666c:	0940      	lsrs	r0, r0, #5
   1666e:	f360 0300 	bfi	r3, r0, #0, #1
   16672:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
   16674:	226e      	movs	r2, #110	; 0x6e
   16676:	4631      	mov	r1, r6
   16678:	4628      	mov	r0, r5
   1667a:	f00b f8d4 	bl	21826 <_lv_obj_get_style_ptr>
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
   1667e:	79e3      	ldrb	r3, [r4, #7]
   16680:	fab0 f080 	clz	r0, r0
   16684:	0940      	lsrs	r0, r0, #5
   16686:	f360 0341 	bfi	r3, r0, #1, #1
   1668a:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1668c:	2201      	movs	r2, #1
   1668e:	4631      	mov	r1, r6
   16690:	4628      	mov	r0, r5
   16692:	f7ff fe55 	bl	16340 <_lv_obj_get_style_int>
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
   16696:	7963      	ldrb	r3, [r4, #5]
   16698:	fab0 f080 	clz	r0, r0
   1669c:	0940      	lsrs	r0, r0, #5
   1669e:	f360 1304 	bfi	r3, r0, #4, #1
   166a2:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   166a4:	2250      	movs	r2, #80	; 0x50
   166a6:	4631      	mov	r1, r6
   166a8:	4628      	mov	r0, r5
   166aa:	f7ff fe49 	bl	16340 <_lv_obj_get_style_int>
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
   166ae:	79e3      	ldrb	r3, [r4, #7]
   166b0:	fab0 f080 	clz	r0, r0
   166b4:	0940      	lsrs	r0, r0, #5
   166b6:	f360 0382 	bfi	r3, r0, #2, #1
   166ba:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
   166bc:	227f      	movs	r2, #127	; 0x7f
   166be:	4631      	mov	r1, r6
   166c0:	4628      	mov	r0, r5
   166c2:	f00b f8b0 	bl	21826 <_lv_obj_get_style_ptr>
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;


    list->transform_all_zero  = 1;
   166c6:	6863      	ldr	r3, [r4, #4]
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
   166c8:	fab0 f080 	clz	r0, r0
   166cc:	0940      	lsrs	r0, r0, #5
    list->transform_all_zero  = 1;
   166ce:	06c0      	lsls	r0, r0, #27
   166d0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   166d4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
   166d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   166dc:	4318      	orrs	r0, r3
   166de:	6060      	str	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
   166e0:	2206      	movs	r2, #6
   166e2:	4631      	mov	r1, r6
   166e4:	4628      	mov	r0, r5
   166e6:	f7ff fe2b 	bl	16340 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
   166ea:	2800      	cmp	r0, #0
   166ec:	d036      	beq.n	1675c <update_style_cache+0x224>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
       lv_obj_get_style_transform_height(obj, part) != 0 ||
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
        list->transform_all_zero  = 0;
   166ee:	7963      	ldrb	r3, [r4, #5]
   166f0:	f36f 13c7 	bfc	r3, #7, #1
   166f4:	7163      	strb	r3, [r4, #5]
    }

    list->pad_all_zero  = 1;
   166f6:	79a3      	ldrb	r3, [r4, #6]
   166f8:	f043 0301 	orr.w	r3, r3, #1
   166fc:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   166fe:	2210      	movs	r2, #16
   16700:	4631      	mov	r1, r6
   16702:	4628      	mov	r0, r5
   16704:	f7ff fe1c 	bl	16340 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
   16708:	2800      	cmp	r0, #0
   1670a:	d03e      	beq.n	1678a <update_style_cache+0x252>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
       lv_obj_get_style_pad_left(obj, part) != 0 ||
       lv_obj_get_style_pad_right(obj, part) != 0) {
        list->pad_all_zero  = 0;
   1670c:	79a3      	ldrb	r3, [r4, #6]
   1670e:	f36f 0300 	bfc	r3, #0, #1
   16712:	71a3      	strb	r3, [r4, #6]
    }

    list->margin_all_zero  = 1;
   16714:	79a3      	ldrb	r3, [r4, #6]
   16716:	f043 0302 	orr.w	r3, r3, #2
   1671a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   1671c:	2215      	movs	r2, #21
   1671e:	4631      	mov	r1, r6
   16720:	4628      	mov	r0, r5
   16722:	f7ff fe0d 	bl	16340 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
   16726:	2800      	cmp	r0, #0
   16728:	d045      	beq.n	167b6 <update_style_cache+0x27e>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
       lv_obj_get_style_margin_left(obj, part) != 0 ||
       lv_obj_get_style_margin_right(obj, part) != 0) {
        list->margin_all_zero  = 0;
   1672a:	79a3      	ldrb	r3, [r4, #6]
   1672c:	f36f 0341 	bfc	r3, #1, #1
   16730:	71a3      	strb	r3, [r4, #6]
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
        list->blend_mode_all_normal = 0;
    }
#endif
    list->ignore_cache = ignore_cache_ori;
    list->valid_cache = 1;
   16732:	4b2d      	ldr	r3, [pc, #180]	; (167e8 <update_style_cache+0x2b0>)
   16734:	ea43 27c7 	orr.w	r7, r3, r7, lsl #11
   16738:	6863      	ldr	r3, [r4, #4]
   1673a:	f423 2381 	bic.w	r3, r3, #264192	; 0x40800
   1673e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   16742:	431f      	orrs	r7, r3
   16744:	6067      	str	r7, [r4, #4]
}
   16746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   16748:	f248 0281 	movw	r2, #32897	; 0x8081
   1674c:	4631      	mov	r1, r6
   1674e:	4628      	mov	r0, r5
   16750:	f7ff fdf6 	bl	16340 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   16754:	2800      	cmp	r0, #0
   16756:	f47f af2b 	bne.w	165b0 <update_style_cache+0x78>
   1675a:	e72d      	b.n	165b8 <update_style_cache+0x80>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1675c:	2204      	movs	r2, #4
   1675e:	4631      	mov	r1, r6
   16760:	4628      	mov	r0, r5
   16762:	f7ff fded 	bl	16340 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
   16766:	2800      	cmp	r0, #0
   16768:	d1c1      	bne.n	166ee <update_style_cache+0x1b6>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1676a:	2205      	movs	r2, #5
   1676c:	4631      	mov	r1, r6
   1676e:	4628      	mov	r0, r5
   16770:	f7ff fde6 	bl	16340 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
   16774:	2800      	cmp	r0, #0
   16776:	d1ba      	bne.n	166ee <update_style_cache+0x1b6>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
   16778:	2207      	movs	r2, #7
   1677a:	4631      	mov	r1, r6
   1677c:	4628      	mov	r0, r5
   1677e:	f7ff fddf 	bl	16340 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
   16782:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   16786:	d1b2      	bne.n	166ee <update_style_cache+0x1b6>
   16788:	e7b5      	b.n	166f6 <update_style_cache+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1678a:	2211      	movs	r2, #17
   1678c:	4631      	mov	r1, r6
   1678e:	4628      	mov	r0, r5
   16790:	f7ff fdd6 	bl	16340 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
   16794:	2800      	cmp	r0, #0
   16796:	d1b9      	bne.n	1670c <update_style_cache+0x1d4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   16798:	2212      	movs	r2, #18
   1679a:	4631      	mov	r1, r6
   1679c:	4628      	mov	r0, r5
   1679e:	f7ff fdcf 	bl	16340 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
   167a2:	2800      	cmp	r0, #0
   167a4:	d1b2      	bne.n	1670c <update_style_cache+0x1d4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   167a6:	2213      	movs	r2, #19
   167a8:	4631      	mov	r1, r6
   167aa:	4628      	mov	r0, r5
   167ac:	f7ff fdc8 	bl	16340 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
   167b0:	2800      	cmp	r0, #0
   167b2:	d1ab      	bne.n	1670c <update_style_cache+0x1d4>
   167b4:	e7ae      	b.n	16714 <update_style_cache+0x1dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   167b6:	2216      	movs	r2, #22
   167b8:	4631      	mov	r1, r6
   167ba:	4628      	mov	r0, r5
   167bc:	f7ff fdc0 	bl	16340 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
   167c0:	2800      	cmp	r0, #0
   167c2:	d1b2      	bne.n	1672a <update_style_cache+0x1f2>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   167c4:	2217      	movs	r2, #23
   167c6:	4631      	mov	r1, r6
   167c8:	4628      	mov	r0, r5
   167ca:	f7ff fdb9 	bl	16340 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
   167ce:	2800      	cmp	r0, #0
   167d0:	d1ab      	bne.n	1672a <update_style_cache+0x1f2>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   167d2:	2218      	movs	r2, #24
   167d4:	4631      	mov	r1, r6
   167d6:	4628      	mov	r0, r5
   167d8:	f7ff fdb2 	bl	16340 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
   167dc:	2800      	cmp	r0, #0
   167de:	d1a4      	bne.n	1672a <update_style_cache+0x1f2>
   167e0:	e7a7      	b.n	16732 <update_style_cache+0x1fa>
   167e2:	bf00      	nop
   167e4:	20000974 	.word	0x20000974
   167e8:	00040400 	.word	0x00040400

000167ec <lv_obj_refresh_style>:
{
   167ec:	b570      	push	{r4, r5, r6, lr}
   167ee:	4605      	mov	r5, r0
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
    if(style_prop_is_cacheble(prop) == false) return;
   167f0:	4610      	mov	r0, r2
{
   167f2:	4614      	mov	r4, r2
    if(style_prop_is_cacheble(prop) == false) return;
   167f4:	f7ff fad4 	bl	15da0 <style_prop_is_cacheble>
   167f8:	2800      	cmp	r0, #0
   167fa:	d16d      	bne.n	168d8 <lv_obj_refresh_style+0xec>
    switch(prop) {
   167fc:	2c7f      	cmp	r4, #127	; 0x7f
   167fe:	d85a      	bhi.n	168b6 <lv_obj_refresh_style+0xca>
   16800:	2c6f      	cmp	r4, #111	; 0x6f
   16802:	d81e      	bhi.n	16842 <lv_obj_refresh_style+0x56>
   16804:	2c5c      	cmp	r4, #92	; 0x5c
   16806:	d84c      	bhi.n	168a2 <lv_obj_refresh_style+0xb6>
   16808:	2c3f      	cmp	r4, #63	; 0x3f
   1680a:	d841      	bhi.n	16890 <lv_obj_refresh_style+0xa4>
   1680c:	2c07      	cmp	r4, #7
   1680e:	d84d      	bhi.n	168ac <lv_obj_refresh_style+0xc0>
   16810:	2c01      	cmp	r4, #1
   16812:	d946      	bls.n	168a2 <lv_obj_refresh_style+0xb6>
        lv_obj_invalidate(obj);
   16814:	4628      	mov	r0, r5
   16816:	f00a fdd5 	bl	213c4 <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
   1681a:	69eb      	ldr	r3, [r5, #28]
   1681c:	2200      	movs	r2, #0
   1681e:	2104      	movs	r1, #4
   16820:	4628      	mov	r0, r5
   16822:	4798      	blx	r3
        switch(prop) {
   16824:	2c18      	cmp	r4, #24
   16826:	f200 808d 	bhi.w	16944 <lv_obj_refresh_style+0x158>
   1682a:	2c14      	cmp	r4, #20
   1682c:	f240 808d 	bls.w	1694a <lv_obj_refresh_style+0x15e>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
   16830:	6828      	ldr	r0, [r5, #0]
   16832:	2800      	cmp	r0, #0
   16834:	f000 8089 	beq.w	1694a <lv_obj_refresh_style+0x15e>
   16838:	69c3      	ldr	r3, [r0, #28]
   1683a:	2200      	movs	r2, #0
   1683c:	2101      	movs	r1, #1
   1683e:	4798      	blx	r3
   16840:	e083      	b.n	1694a <lv_obj_refresh_style+0x15e>
   16842:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
   16846:	2b0f      	cmp	r3, #15
   16848:	d82b      	bhi.n	168a2 <lv_obj_refresh_style+0xb6>
   1684a:	a201      	add	r2, pc, #4	; (adr r2, 16850 <lv_obj_refresh_style+0x64>)
   1684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16850:	00016815 	.word	0x00016815
   16854:	00016815 	.word	0x00016815
   16858:	000168a3 	.word	0x000168a3
   1685c:	00016815 	.word	0x00016815
   16860:	00016815 	.word	0x00016815
   16864:	00016815 	.word	0x00016815
   16868:	000168a3 	.word	0x000168a3
   1686c:	000168a3 	.word	0x000168a3
   16870:	000168a3 	.word	0x000168a3
   16874:	000168a3 	.word	0x000168a3
   16878:	000168a3 	.word	0x000168a3
   1687c:	000168a3 	.word	0x000168a3
   16880:	00016815 	.word	0x00016815
   16884:	000168a3 	.word	0x000168a3
   16888:	00016815 	.word	0x00016815
   1688c:	00016815 	.word	0x00016815
   16890:	f1a4 0240 	sub.w	r2, r4, #64	; 0x40
   16894:	b293      	uxth	r3, r2
   16896:	2201      	movs	r2, #1
   16898:	409a      	lsls	r2, r3
   1689a:	4b32      	ldr	r3, [pc, #200]	; (16964 <lv_obj_refresh_style+0x178>)
   1689c:	4013      	ands	r3, r2
   1689e:	2b00      	cmp	r3, #0
   168a0:	d1b8      	bne.n	16814 <lv_obj_refresh_style+0x28>
        lv_obj_invalidate(obj);
   168a2:	4628      	mov	r0, r5
}
   168a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_invalidate(obj);
   168a8:	f00a bd8c 	b.w	213c4 <lv_obj_invalidate>
    switch(prop) {
   168ac:	f1a4 0310 	sub.w	r3, r4, #16
   168b0:	2b08      	cmp	r3, #8
   168b2:	d8f6      	bhi.n	168a2 <lv_obj_refresh_style+0xb6>
   168b4:	e7ae      	b.n	16814 <lv_obj_refresh_style+0x28>
   168b6:	f248 0381 	movw	r3, #32897	; 0x8081
   168ba:	429c      	cmp	r4, r3
   168bc:	d808      	bhi.n	168d0 <lv_obj_refresh_style+0xe4>
   168be:	f248 037f 	movw	r3, #32895	; 0x807f
   168c2:	429c      	cmp	r4, r3
   168c4:	d8a6      	bhi.n	16814 <lv_obj_refresh_style+0x28>
   168c6:	2c90      	cmp	r4, #144	; 0x90
   168c8:	d0a4      	beq.n	16814 <lv_obj_refresh_style+0x28>
   168ca:	2cff      	cmp	r4, #255	; 0xff
   168cc:	d1e9      	bne.n	168a2 <lv_obj_refresh_style+0xb6>
   168ce:	e7a1      	b.n	16814 <lv_obj_refresh_style+0x28>
   168d0:	f248 038e 	movw	r3, #32910	; 0x808e
   168d4:	429c      	cmp	r4, r3
   168d6:	e7f9      	b.n	168cc <lv_obj_refresh_style+0xe0>

    if(part != LV_OBJ_PART_ALL) {
   168d8:	29ff      	cmp	r1, #255	; 0xff
   168da:	d016      	beq.n	1690a <lv_obj_refresh_style+0x11e>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   168dc:	4628      	mov	r0, r5
   168de:	f00a feb7 	bl	21650 <lv_obj_get_style_list>
        if(list == NULL) return;
   168e2:	2800      	cmp	r0, #0
   168e4:	d08a      	beq.n	167fc <lv_obj_refresh_style+0x10>
        list->valid_cache = 0;
   168e6:	7943      	ldrb	r3, [r0, #5]
   168e8:	f36f 0382 	bfc	r3, #2, #1
   168ec:	7143      	strb	r3, [r0, #5]
        result = _lv_ll_get_head(&obj->child_ll);
   168ee:	1d28      	adds	r0, r5, #4
   168f0:	f00e ff48 	bl	25784 <_lv_ll_get_head>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
   168f4:	4606      	mov	r6, r0
    while(child) {
   168f6:	2800      	cmp	r0, #0
   168f8:	d080      	beq.n	167fc <lv_obj_refresh_style+0x10>
        update_style_cache_children(child);
   168fa:	4630      	mov	r0, r6
   168fc:	f00a ffef 	bl	218de <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
   16900:	4631      	mov	r1, r6
   16902:	4628      	mov	r0, r5
   16904:	f00a fe6d 	bl	215e2 <lv_obj_get_child>
   16908:	e7f4      	b.n	168f4 <lv_obj_refresh_style+0x108>
   1690a:	2600      	movs	r6, #0
            lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1690c:	b2f1      	uxtb	r1, r6
   1690e:	4628      	mov	r0, r5
   16910:	f00a fe9e 	bl	21650 <lv_obj_get_style_list>
            if(list == NULL) break;
   16914:	b130      	cbz	r0, 16924 <lv_obj_refresh_style+0x138>
            list->valid_cache = 0;
   16916:	7943      	ldrb	r3, [r0, #5]
   16918:	3601      	adds	r6, #1
   1691a:	f36f 0382 	bfc	r3, #2, #1
        for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   1691e:	2e40      	cmp	r6, #64	; 0x40
            list->valid_cache = 0;
   16920:	7143      	strb	r3, [r0, #5]
        for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   16922:	d1f3      	bne.n	1690c <lv_obj_refresh_style+0x120>
   16924:	2640      	movs	r6, #64	; 0x40
            lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   16926:	4631      	mov	r1, r6
   16928:	4628      	mov	r0, r5
   1692a:	f00a fe91 	bl	21650 <lv_obj_get_style_list>
            if(list == NULL) break;
   1692e:	2800      	cmp	r0, #0
   16930:	d0dd      	beq.n	168ee <lv_obj_refresh_style+0x102>
            list->valid_cache = 0;
   16932:	7943      	ldrb	r3, [r0, #5]
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   16934:	3601      	adds	r6, #1
   16936:	b2f6      	uxtb	r6, r6
            list->valid_cache = 0;
   16938:	f36f 0382 	bfc	r3, #2, #1
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1693c:	2eff      	cmp	r6, #255	; 0xff
            list->valid_cache = 0;
   1693e:	7143      	strb	r3, [r0, #5]
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   16940:	d1f1      	bne.n	16926 <lv_obj_refresh_style+0x13a>
   16942:	e7d4      	b.n	168ee <lv_obj_refresh_style+0x102>
        switch(prop) {
   16944:	2cff      	cmp	r4, #255	; 0xff
   16946:	f43f af73 	beq.w	16830 <lv_obj_refresh_style+0x44>
        lv_obj_invalidate(obj);
   1694a:	4628      	mov	r0, r5
   1694c:	f00a fd3a 	bl	213c4 <lv_obj_invalidate>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
   16950:	2cff      	cmp	r4, #255	; 0xff
   16952:	d001      	beq.n	16958 <lv_obj_refresh_style+0x16c>
   16954:	0423      	lsls	r3, r4, #16
   16956:	d504      	bpl.n	16962 <lv_obj_refresh_style+0x176>
   16958:	4628      	mov	r0, r5
}
   1695a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
   1695e:	f00a be46 	b.w	215ee <refresh_children_style>
}
   16962:	bd70      	pop	{r4, r5, r6, pc}
   16964:	100f1003 	.word	0x100f1003

00016968 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
   16968:	2908      	cmp	r1, #8
{
   1696a:	b510      	push	{r4, lr}
   1696c:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_GET_STYLE) {
   1696e:	d108      	bne.n	16982 <lv_obj_signal+0x1a>
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
   16970:	7813      	ldrb	r3, [r2, #0]
   16972:	b91b      	cbnz	r3, 1697c <lv_obj_signal+0x14>
   16974:	3428      	adds	r4, #40	; 0x28
   16976:	6054      	str	r4, [r2, #4]
   16978:	2001      	movs	r0, #1
   1697a:	e011      	b.n	169a0 <lv_obj_signal+0x38>
        else info->result = NULL;
   1697c:	2300      	movs	r3, #0
   1697e:	6053      	str	r3, [r2, #4]
   16980:	e7fa      	b.n	16978 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   16982:	2907      	cmp	r1, #7
   16984:	d105      	bne.n	16992 <lv_obj_signal+0x2a>
}
   16986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1698a:	4920      	ldr	r1, [pc, #128]	; (16a0c <lv_obj_signal+0xa4>)
   1698c:	4610      	mov	r0, r2
   1698e:	f00b b830 	b.w	219f2 <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_CHILD_CHG) {
   16992:	2901      	cmp	r1, #1
   16994:	d105      	bne.n	169a2 <lv_obj_signal+0x3a>
    return (obj->protect & prot) == 0 ? false : true;
   16996:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
   1699a:	43c0      	mvns	r0, r0
   1699c:	f000 0001 	and.w	r0, r0, #1
}
   169a0:	bd10      	pop	{r4, pc}
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
   169a2:	2906      	cmp	r1, #6
   169a4:	d109      	bne.n	169ba <lv_obj_signal+0x52>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
   169a6:	2100      	movs	r1, #0
   169a8:	f00b fc19 	bl	221de <lv_obj_get_draw_rect_ext_pad_size>
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
   169ac:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
   169b0:	4283      	cmp	r3, r0
   169b2:	bfb8      	it	lt
   169b4:	4603      	movlt	r3, r0
   169b6:	8623      	strh	r3, [r4, #48]	; 0x30
   169b8:	e7de      	b.n	16978 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
   169ba:	2904      	cmp	r1, #4
   169bc:	d102      	bne.n	169c4 <lv_obj_signal+0x5c>
        lv_obj_refresh_ext_draw_pad(obj);
   169be:	f00a fc8f 	bl	212e0 <lv_obj_refresh_ext_draw_pad>
   169c2:	e7d9      	b.n	16978 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_PRESSED) {
   169c4:	290b      	cmp	r1, #11
   169c6:	d103      	bne.n	169d0 <lv_obj_signal+0x68>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
   169c8:	2110      	movs	r1, #16
   169ca:	f00b fbf4 	bl	221b6 <lv_obj_add_state>
   169ce:	e7d3      	b.n	16978 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
   169d0:	f1a1 030d 	sub.w	r3, r1, #13
   169d4:	2b01      	cmp	r3, #1
   169d6:	d803      	bhi.n	169e0 <lv_obj_signal+0x78>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
   169d8:	2110      	movs	r1, #16
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
   169da:	f00b fbf6 	bl	221ca <lv_obj_clear_state>
   169de:	e7cb      	b.n	16978 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_FOCUS) {
   169e0:	2916      	cmp	r1, #22
   169e2:	d108      	bne.n	169f6 <lv_obj_signal+0x8e>
            obj = lv_obj_get_focused_obj(obj);
   169e4:	f00b fcf2 	bl	223cc <lv_obj_get_focused_obj>
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
   169e8:	2102      	movs	r1, #2
            obj = lv_obj_get_focused_obj(obj);
   169ea:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
   169ec:	f00b fbe3 	bl	221b6 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
   169f0:	2104      	movs	r1, #4
   169f2:	4620      	mov	r0, r4
   169f4:	e7f1      	b.n	169da <lv_obj_signal+0x72>
    else if(sign == LV_SIGNAL_DEFOCUS) {
   169f6:	2917      	cmp	r1, #23
   169f8:	d103      	bne.n	16a02 <lv_obj_signal+0x9a>
        obj = lv_obj_get_focused_obj(obj);
   169fa:	f00b fce7 	bl	223cc <lv_obj_get_focused_obj>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
   169fe:	2106      	movs	r1, #6
   16a00:	e7eb      	b.n	169da <lv_obj_signal+0x72>
    else if(sign == LV_SIGNAL_CLEANUP) {
   16a02:	2900      	cmp	r1, #0
   16a04:	d1b8      	bne.n	16978 <lv_obj_signal+0x10>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   16a06:	f00a fe35 	bl	21674 <lv_obj_clean_style_list>
   16a0a:	e7b5      	b.n	16978 <lv_obj_signal+0x10>
   16a0c:	00028acf 	.word	0x00028acf

00016a10 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
   16a10:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   16a12:	4d19      	ldr	r5, [pc, #100]	; (16a78 <lv_refr_vdb_flush+0x68>)
   16a14:	6828      	ldr	r0, [r5, #0]
   16a16:	f00e fba3 	bl	25160 <lv_disp_get_buf>
   16a1a:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
   16a1c:	6828      	ldr	r0, [r5, #0]
   16a1e:	f00e fba1 	bl	25164 <lv_disp_is_double_buf>
   16a22:	b958      	cbnz	r0, 16a3c <lv_refr_vdb_flush+0x2c>
        }
    }

    vdb->flushing = 1;

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   16a24:	682d      	ldr	r5, [r5, #0]
    vdb->flushing = 1;
   16a26:	2301      	movs	r3, #1
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   16a28:	686a      	ldr	r2, [r5, #4]
    vdb->flushing = 1;
   16a2a:	61a3      	str	r3, [r4, #24]
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   16a2c:	6a11      	ldr	r1, [r2, #32]
   16a2e:	07c9      	lsls	r1, r1, #31
   16a30:	d409      	bmi.n	16a46 <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
   16a32:	2300      	movs	r3, #0
   16a34:	e00a      	b.n	16a4c <lv_refr_vdb_flush+0x3c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
   16a36:	69c3      	ldr	r3, [r0, #28]
   16a38:	b10b      	cbz	r3, 16a3e <lv_refr_vdb_flush+0x2e>
   16a3a:	4798      	blx	r3
   16a3c:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
   16a3e:	69a3      	ldr	r3, [r4, #24]
   16a40:	2b00      	cmp	r3, #0
   16a42:	d1f8      	bne.n	16a36 <lv_refr_vdb_flush+0x26>
   16a44:	e7ee      	b.n	16a24 <lv_refr_vdb_flush+0x14>
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   16a46:	6a12      	ldr	r2, [r2, #32]
   16a48:	0792      	lsls	r2, r2, #30
   16a4a:	d5f2      	bpl.n	16a32 <lv_refr_vdb_flush+0x22>
    else vdb->flushing_last = 0;
   16a4c:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   16a4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16a50:	b10b      	cbz	r3, 16a56 <lv_refr_vdb_flush+0x46>
   16a52:	4628      	mov	r0, r5
   16a54:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
   16a56:	68eb      	ldr	r3, [r5, #12]
   16a58:	b123      	cbz	r3, 16a64 <lv_refr_vdb_flush+0x54>
   16a5a:	68a2      	ldr	r2, [r4, #8]
   16a5c:	f104 0110 	add.w	r1, r4, #16
   16a60:	4628      	mov	r0, r5
   16a62:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
   16a64:	6823      	ldr	r3, [r4, #0]
   16a66:	b133      	cbz	r3, 16a76 <lv_refr_vdb_flush+0x66>
   16a68:	6862      	ldr	r2, [r4, #4]
   16a6a:	b122      	cbz	r2, 16a76 <lv_refr_vdb_flush+0x66>
        if(vdb->buf_act == vdb->buf1)
   16a6c:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
   16a6e:	428b      	cmp	r3, r1
   16a70:	bf08      	it	eq
   16a72:	4613      	moveq	r3, r2
   16a74:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
   16a76:	bd38      	pop	{r3, r4, r5, pc}
   16a78:	20002cec 	.word	0x20002cec

00016a7c <lv_refr_obj_and_children>:
{
   16a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a7e:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
   16a80:	4604      	mov	r4, r0
   16a82:	b928      	cbnz	r0, 16a90 <lv_refr_obj_and_children+0x14>
   16a84:	4b13      	ldr	r3, [pc, #76]	; (16ad4 <lv_refr_obj_and_children+0x58>)
   16a86:	6818      	ldr	r0, [r3, #0]
   16a88:	f00a fbbc 	bl	21204 <lv_disp_get_scr_act>
    if(top_p == NULL) return;  /*Shouldn't happen*/
   16a8c:	4604      	mov	r4, r0
   16a8e:	b140      	cbz	r0, 16aa2 <lv_refr_obj_and_children+0x26>
    lv_refr_obj(top_p, mask_p);
   16a90:	4620      	mov	r0, r4
   16a92:	4631      	mov	r1, r6
   16a94:	f00b fcd2 	bl	2243c <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
   16a98:	4620      	mov	r0, r4
   16a9a:	f00a fda0 	bl	215de <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
   16a9e:	4605      	mov	r5, r0
    while(par != NULL) {
   16aa0:	b900      	cbnz	r0, 16aa4 <lv_refr_obj_and_children+0x28>
}
   16aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
   16aa4:	1d2f      	adds	r7, r5, #4
            i = _lv_ll_get_prev(&(par->child_ll), i);
   16aa6:	4621      	mov	r1, r4
   16aa8:	4638      	mov	r0, r7
   16aaa:	f00e fe76 	bl	2579a <_lv_ll_get_prev>
   16aae:	4604      	mov	r4, r0
        while(i != NULL) {
   16ab0:	b950      	cbnz	r0, 16ac8 <lv_refr_obj_and_children+0x4c>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
   16ab2:	6a2b      	ldr	r3, [r5, #32]
   16ab4:	b11b      	cbz	r3, 16abe <lv_refr_obj_and_children+0x42>
   16ab6:	2201      	movs	r2, #1
   16ab8:	4631      	mov	r1, r6
   16aba:	4628      	mov	r0, r5
   16abc:	4798      	blx	r3
        par = lv_obj_get_parent(par);
   16abe:	4628      	mov	r0, r5
   16ac0:	f00a fd8d 	bl	215de <lv_obj_get_parent>
   16ac4:	462c      	mov	r4, r5
   16ac6:	e7ea      	b.n	16a9e <lv_refr_obj_and_children+0x22>
            lv_refr_obj(i, mask_p);
   16ac8:	4631      	mov	r1, r6
   16aca:	4620      	mov	r0, r4
   16acc:	f00b fcb6 	bl	2243c <lv_refr_obj>
   16ad0:	e7e9      	b.n	16aa6 <lv_refr_obj_and_children+0x2a>
   16ad2:	bf00      	nop
   16ad4:	20002cec 	.word	0x20002cec

00016ad8 <lv_refr_area_part>:
{
   16ad8:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   16ada:	4c46      	ldr	r4, [pc, #280]	; (16bf4 <lv_refr_area_part+0x11c>)
{
   16adc:	b09a      	sub	sp, #104	; 0x68
   16ade:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   16ae0:	6820      	ldr	r0, [r4, #0]
   16ae2:	f00e fb3d 	bl	25160 <lv_disp_get_buf>
   16ae6:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
   16ae8:	6820      	ldr	r0, [r4, #0]
   16aea:	f00e fb3b 	bl	25164 <lv_disp_is_double_buf>
   16aee:	b1b0      	cbz	r0, 16b1e <lv_refr_area_part+0x46>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
   16af0:	f105 0210 	add.w	r2, r5, #16
   16af4:	4631      	mov	r1, r6
   16af6:	a803      	add	r0, sp, #12
   16af8:	f00e fb9d 	bl	25236 <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
   16afc:	6820      	ldr	r0, [r4, #0]
   16afe:	f00a fb81 	bl	21204 <lv_disp_get_scr_act>
   16b02:	4601      	mov	r1, r0
   16b04:	a803      	add	r0, sp, #12
   16b06:	f00b fc6b 	bl	223e0 <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
   16b0a:	6823      	ldr	r3, [r4, #0]
   16b0c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
   16b0e:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
   16b10:	b955      	cbnz	r5, 16b28 <lv_refr_area_part+0x50>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
   16b12:	2800      	cmp	r0, #0
   16b14:	d138      	bne.n	16b88 <lv_refr_area_part+0xb0>
   16b16:	e00e      	b.n	16b36 <lv_refr_area_part+0x5e>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
   16b18:	69c3      	ldr	r3, [r0, #28]
   16b1a:	b10b      	cbz	r3, 16b20 <lv_refr_area_part+0x48>
   16b1c:	4798      	blx	r3
   16b1e:	6820      	ldr	r0, [r4, #0]
        while(vdb->flushing) {
   16b20:	69ab      	ldr	r3, [r5, #24]
   16b22:	2b00      	cmp	r3, #0
   16b24:	d1f8      	bne.n	16b18 <lv_refr_area_part+0x40>
   16b26:	e7e3      	b.n	16af0 <lv_refr_area_part+0x18>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
   16b28:	4629      	mov	r1, r5
   16b2a:	a803      	add	r0, sp, #12
   16b2c:	f00b fc58 	bl	223e0 <lv_refr_get_top_obj>
   16b30:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
   16b32:	bb4e      	cbnz	r6, 16b88 <lv_refr_area_part+0xb0>
   16b34:	bb40      	cbnz	r0, 16b88 <lv_refr_area_part+0xb0>
        if(disp_refr->bg_img) {
   16b36:	6823      	ldr	r3, [r4, #0]
   16b38:	6d5d      	ldr	r5, [r3, #84]	; 0x54
            lv_draw_img_dsc_init(&dsc);
   16b3a:	a807      	add	r0, sp, #28
        if(disp_refr->bg_img) {
   16b3c:	2d00      	cmp	r5, #0
   16b3e:	d047      	beq.n	16bd0 <lv_refr_area_part+0xf8>
            lv_draw_img_dsc_init(&dsc);
   16b40:	f00c ffbb 	bl	23aba <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
   16b44:	6823      	ldr	r3, [r4, #0]
   16b46:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   16b4a:	f88d 201c 	strb.w	r2, [sp, #28]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
   16b4e:	6d58      	ldr	r0, [r3, #84]	; 0x54
   16b50:	a902      	add	r1, sp, #8
   16b52:	f001 ff23 	bl	1899c <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
   16b56:	2801      	cmp	r0, #1
   16b58:	d115      	bne.n	16b86 <lv_refr_area_part+0xae>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
   16b5a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   16b5e:	9b02      	ldr	r3, [sp, #8]
   16b60:	f3c2 124a 	ubfx	r2, r2, #5, #11
   16b64:	3a01      	subs	r2, #1
   16b66:	9200      	str	r2, [sp, #0]
   16b68:	f3c3 238a 	ubfx	r3, r3, #10, #11
   16b6c:	2200      	movs	r2, #0
   16b6e:	4611      	mov	r1, r2
   16b70:	3b01      	subs	r3, #1
   16b72:	a805      	add	r0, sp, #20
   16b74:	f00e fb45 	bl	25202 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
   16b78:	6822      	ldr	r2, [r4, #0]
   16b7a:	ab07      	add	r3, sp, #28
   16b7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
   16b7e:	a903      	add	r1, sp, #12
   16b80:	a805      	add	r0, sp, #20
   16b82:	f000 fa59 	bl	17038 <lv_draw_img>
            }
   16b86:	2500      	movs	r5, #0
    if(disp_refr->prev_scr) {
   16b88:	6823      	ldr	r3, [r4, #0]
   16b8a:	6c58      	ldr	r0, [r3, #68]	; 0x44
   16b8c:	b128      	cbz	r0, 16b9a <lv_refr_area_part+0xc2>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
   16b8e:	a903      	add	r1, sp, #12
   16b90:	2d00      	cmp	r5, #0
   16b92:	bf18      	it	ne
   16b94:	4628      	movne	r0, r5
   16b96:	f7ff ff71 	bl	16a7c <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
   16b9a:	b90e      	cbnz	r6, 16ba0 <lv_refr_area_part+0xc8>
        top_act_scr = disp_refr->act_scr;
   16b9c:	6823      	ldr	r3, [r4, #0]
   16b9e:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    lv_refr_obj_and_children(top_act_scr, &start_mask);
   16ba0:	a903      	add	r1, sp, #12
   16ba2:	4630      	mov	r0, r6
   16ba4:	f7ff ff6a 	bl	16a7c <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
   16ba8:	6820      	ldr	r0, [r4, #0]
   16baa:	f00a fb39 	bl	21220 <lv_disp_get_layer_top>
   16bae:	a903      	add	r1, sp, #12
   16bb0:	f7ff ff64 	bl	16a7c <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
   16bb4:	6820      	ldr	r0, [r4, #0]
   16bb6:	f00a fb3a 	bl	2122e <lv_disp_get_layer_sys>
   16bba:	a903      	add	r1, sp, #12
   16bbc:	f7ff ff5e 	bl	16a7c <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
   16bc0:	6820      	ldr	r0, [r4, #0]
   16bc2:	f00e fad7 	bl	25174 <lv_disp_is_true_double_buf>
   16bc6:	b908      	cbnz	r0, 16bcc <lv_refr_area_part+0xf4>
        lv_refr_vdb_flush();
   16bc8:	f7ff ff22 	bl	16a10 <lv_refr_vdb_flush>
}
   16bcc:	b01a      	add	sp, #104	; 0x68
   16bce:	bd70      	pop	{r4, r5, r6, pc}
            lv_draw_rect_dsc_init(&dsc);
   16bd0:	f001 fc7a 	bl	184c8 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
   16bd4:	6823      	ldr	r3, [r4, #0]
   16bd6:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
   16bda:	f88d 201e 	strb.w	r2, [sp, #30]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
   16bde:	a903      	add	r1, sp, #12
            dsc.bg_opa = disp_refr->bg_opa;
   16be0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   16be4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
            lv_draw_rect(&start_mask, &start_mask, &dsc);
   16be8:	aa07      	add	r2, sp, #28
   16bea:	4608      	mov	r0, r1
   16bec:	f00d fbee 	bl	243cc <lv_draw_rect>
   16bf0:	e7ca      	b.n	16b88 <lv_refr_area_part+0xb0>
   16bf2:	bf00      	nop
   16bf4:	20002cec 	.word	0x20002cec

00016bf8 <_lv_refr_get_disp_refreshing>:
}
   16bf8:	4b01      	ldr	r3, [pc, #4]	; (16c00 <_lv_refr_get_disp_refreshing+0x8>)
   16bfa:	6818      	ldr	r0, [r3, #0]
   16bfc:	4770      	bx	lr
   16bfe:	bf00      	nop
   16c00:	20002cec 	.word	0x20002cec

00016c04 <_lv_disp_refr_task>:
{
   16c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c08:	b089      	sub	sp, #36	; 0x24
   16c0a:	4604      	mov	r4, r0
    uint32_t start = lv_tick_get();
   16c0c:	f00e fac1 	bl	25192 <lv_tick_get>
    disp_refr = task->user_data;
   16c10:	4d99      	ldr	r5, [pc, #612]	; (16e78 <_lv_disp_refr_task+0x274>)
   16c12:	68e3      	ldr	r3, [r4, #12]
    uint32_t start = lv_tick_get();
   16c14:	9003      	str	r0, [sp, #12]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
   16c16:	2100      	movs	r1, #0
   16c18:	4620      	mov	r0, r4
    disp_refr = task->user_data;
   16c1a:	602b      	str	r3, [r5, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
   16c1c:	f002 fa52 	bl	190c4 <lv_task_set_prio>
    if(disp_refr->act_scr == NULL) {
   16c20:	682b      	ldr	r3, [r5, #0]
   16c22:	6c19      	ldr	r1, [r3, #64]	; 0x40
   16c24:	46aa      	mov	sl, r5
   16c26:	2900      	cmp	r1, #0
   16c28:	f040 80bb 	bne.w	16da2 <_lv_disp_refr_task+0x19e>
        disp_refr->inv_p = 0;
   16c2c:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
   16c30:	f361 0209 	bfi	r2, r1, #0, #10
   16c34:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
}
   16c38:	b009      	add	sp, #36	; 0x24
   16c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
   16c3e:	442b      	add	r3, r5
   16c40:	f893 415a 	ldrb.w	r4, [r3, #346]	; 0x15a
   16c44:	2c00      	cmp	r4, #0
   16c46:	d06a      	beq.n	16d1e <_lv_disp_refr_task+0x11a>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   16c48:	3501      	adds	r5, #1
   16c4a:	f8da 3000 	ldr.w	r3, [sl]
   16c4e:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
   16c52:	f3c2 0609 	ubfx	r6, r2, #0, #10
   16c56:	42b5      	cmp	r5, r6
   16c58:	d3f1      	bcc.n	16c3e <_lv_disp_refr_task+0x3a>
    px_num = 0;
   16c5a:	4988      	ldr	r1, [pc, #544]	; (16e7c <_lv_disp_refr_task+0x278>)
   16c5c:	2000      	movs	r0, #0
   16c5e:	6008      	str	r0, [r1, #0]
    if(disp_refr->inv_p == 0) return;
   16c60:	2e00      	cmp	r6, #0
   16c62:	f040 80a0 	bne.w	16da6 <_lv_disp_refr_task+0x1a2>
    if(disp_refr->inv_p != 0) {
   16c66:	4d84      	ldr	r5, [pc, #528]	; (16e78 <_lv_disp_refr_task+0x274>)
   16c68:	6828      	ldr	r0, [r5, #0]
   16c6a:	f8b0 317a 	ldrh.w	r3, [r0, #378]	; 0x17a
   16c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16c72:	2b00      	cmp	r3, #0
   16c74:	d04e      	beq.n	16d14 <_lv_disp_refr_task+0x110>
        if(lv_disp_is_true_double_buf(disp_refr)) {
   16c76:	f00e fa7d 	bl	25174 <lv_disp_is_true_double_buf>
   16c7a:	b368      	cbz	r0, 16cd8 <_lv_disp_refr_task+0xd4>
            if(disp_refr->driver.set_px_cb) {
   16c7c:	6828      	ldr	r0, [r5, #0]
   16c7e:	6943      	ldr	r3, [r0, #20]
   16c80:	bb53      	cbnz	r3, 16cd8 <_lv_disp_refr_task+0xd4>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   16c82:	f00e fa6d 	bl	25160 <lv_disp_get_buf>
   16c86:	4604      	mov	r4, r0
                lv_refr_vdb_flush();
   16c88:	f7ff fec2 	bl	16a10 <lv_refr_vdb_flush>
                while(vdb->flushing);
   16c8c:	69a3      	ldr	r3, [r4, #24]
   16c8e:	2b00      	cmp	r3, #0
   16c90:	d1fc      	bne.n	16c8c <_lv_disp_refr_task+0x88>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
   16c92:	682b      	ldr	r3, [r5, #0]
   16c94:	f9b3 0000 	ldrsh.w	r0, [r3]
   16c98:	f002 f808 	bl	18cac <_lv_mem_buf_get>
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
   16c9c:	68a3      	ldr	r3, [r4, #8]
   16c9e:	9301      	str	r3, [sp, #4]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   16ca0:	9a01      	ldr	r2, [sp, #4]
   16ca2:	6823      	ldr	r3, [r4, #0]
   16ca4:	9300      	str	r3, [sp, #0]
   16ca6:	4293      	cmp	r3, r2
   16ca8:	bf04      	itt	eq
   16caa:	6863      	ldreq	r3, [r4, #4]
   16cac:	9300      	streq	r3, [sp, #0]
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
   16cae:	4606      	mov	r6, r0
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   16cb0:	6828      	ldr	r0, [r5, #0]
   16cb2:	f001 ff25 	bl	18b00 <lv_disp_get_hor_res>
                for(a = 0; a < disp_refr->inv_p; a++) {
   16cb6:	f04f 0900 	mov.w	r9, #0
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   16cba:	4683      	mov	fp, r0
                for(a = 0; a < disp_refr->inv_p; a++) {
   16cbc:	682c      	ldr	r4, [r5, #0]
   16cbe:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   16cc2:	fa1f f289 	uxth.w	r2, r9
   16cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16cca:	4293      	cmp	r3, r2
   16ccc:	f200 8177 	bhi.w	16fbe <_lv_disp_refr_task+0x3ba>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
   16cd0:	b116      	cbz	r6, 16cd8 <_lv_disp_refr_task+0xd4>
   16cd2:	4630      	mov	r0, r6
   16cd4:	f002 f84c 	bl	18d70 <_lv_mem_buf_release>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
   16cd8:	f8da 4000 	ldr.w	r4, [sl]
   16cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
   16ce0:	f104 005a 	add.w	r0, r4, #90	; 0x5a
   16ce4:	f00b fc19 	bl	2251a <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
   16ce8:	2120      	movs	r1, #32
   16cea:	f504 70ad 	add.w	r0, r4, #346	; 0x15a
   16cee:	f00b fc14 	bl	2251a <_lv_memset_00>
        disp_refr->inv_p = 0;
   16cf2:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
        elaps = lv_tick_elaps(start);
   16cf6:	9803      	ldr	r0, [sp, #12]
        disp_refr->inv_p = 0;
   16cf8:	f36f 0309 	bfc	r3, #0, #10
   16cfc:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        elaps = lv_tick_elaps(start);
   16d00:	f00e fa54 	bl	251ac <lv_tick_elaps>
   16d04:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
   16d06:	f8da 0000 	ldr.w	r0, [sl]
   16d0a:	6983      	ldr	r3, [r0, #24]
   16d0c:	b113      	cbz	r3, 16d14 <_lv_disp_refr_task+0x110>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
   16d0e:	4a5b      	ldr	r2, [pc, #364]	; (16e7c <_lv_disp_refr_task+0x278>)
   16d10:	6812      	ldr	r2, [r2, #0]
   16d12:	4798      	blx	r3
    _lv_mem_buf_free_all();
   16d14:	f002 f854 	bl	18dc0 <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
   16d18:	f002 fc3c 	bl	19594 <_lv_font_clean_up_fmt_txt>
    LV_LOG_TRACE("lv_refr_task: ready");
   16d1c:	e78c      	b.n	16c38 <_lv_disp_refr_task+0x34>
   16d1e:	00ee      	lsls	r6, r5, #3
   16d20:	365a      	adds	r6, #90	; 0x5a
                disp_refr->inv_area_joined[join_from] = 1;
   16d22:	f04f 0801 	mov.w	r8, #1
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   16d26:	f8da 0000 	ldr.w	r0, [sl]
   16d2a:	f8b0 317a 	ldrh.w	r3, [r0, #378]	; 0x17a
   16d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16d32:	429c      	cmp	r4, r3
   16d34:	d288      	bcs.n	16c48 <_lv_disp_refr_task+0x44>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
   16d36:	1903      	adds	r3, r0, r4
   16d38:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
   16d3c:	bb7b      	cbnz	r3, 16d9e <_lv_disp_refr_task+0x19a>
   16d3e:	42a5      	cmp	r5, r4
   16d40:	d02d      	beq.n	16d9e <_lv_disp_refr_task+0x19a>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
   16d42:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   16d46:	f109 095a 	add.w	r9, r9, #90	; 0x5a
   16d4a:	eb00 0109 	add.w	r1, r0, r9
   16d4e:	4430      	add	r0, r6
   16d50:	f00e fb47 	bl	253e2 <_lv_area_is_on>
   16d54:	b318      	cbz	r0, 16d9e <_lv_disp_refr_task+0x19a>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
   16d56:	f8da 1000 	ldr.w	r1, [sl]
   16d5a:	a806      	add	r0, sp, #24
   16d5c:	eb01 0209 	add.w	r2, r1, r9
   16d60:	4431      	add	r1, r6
   16d62:	f00e fa93 	bl	2528c <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   16d66:	a806      	add	r0, sp, #24
   16d68:	f00e fa57 	bl	2521a <lv_area_get_size>
   16d6c:	4683      	mov	fp, r0
   16d6e:	f8da 0000 	ldr.w	r0, [sl]
   16d72:	4430      	add	r0, r6
   16d74:	f00e fa51 	bl	2521a <lv_area_get_size>
   16d78:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
   16d7a:	f8da 0000 	ldr.w	r0, [sl]
   16d7e:	4448      	add	r0, r9
   16d80:	f00e fa4b 	bl	2521a <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   16d84:	4407      	add	r7, r0
   16d86:	45bb      	cmp	fp, r7
   16d88:	d209      	bcs.n	16d9e <_lv_disp_refr_task+0x19a>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
   16d8a:	f8da 7000 	ldr.w	r7, [sl]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   16d8e:	19b8      	adds	r0, r7, r6
                disp_refr->inv_area_joined[join_from] = 1;
   16d90:	4427      	add	r7, r4
   16d92:	2208      	movs	r2, #8
   16d94:	a906      	add	r1, sp, #24
   16d96:	f00b fb21 	bl	223dc <_lv_memcpy>
   16d9a:	f887 815a 	strb.w	r8, [r7, #346]	; 0x15a
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   16d9e:	3401      	adds	r4, #1
   16da0:	e7c1      	b.n	16d26 <_lv_disp_refr_task+0x122>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   16da2:	2500      	movs	r5, #0
   16da4:	e751      	b.n	16c4a <_lv_disp_refr_task+0x46>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   16da6:	3e01      	subs	r6, #1
        if(disp_refr->inv_area_joined[i] == 0) {
   16da8:	f503 72ad 	add.w	r2, r3, #346	; 0x15a
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   16dac:	1c71      	adds	r1, r6, #1
   16dae:	d15e      	bne.n	16e6e <_lv_disp_refr_task+0x26a>
    int32_t last_i = 0;
   16db0:	2600      	movs	r6, #0
    disp_refr->driver.buffer->last_area = 0;
   16db2:	685b      	ldr	r3, [r3, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
   16db4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 16e78 <_lv_disp_refr_task+0x274>
    disp_refr->driver.buffer->last_area = 0;
   16db8:	f893 2020 	ldrb.w	r2, [r3, #32]
   16dbc:	f36f 0200 	bfc	r2, #0, #1
   16dc0:	f883 2020 	strb.w	r2, [r3, #32]
    disp_refr->driver.buffer->last_part = 0;
   16dc4:	f893 2020 	ldrb.w	r2, [r3, #32]
   16dc8:	f36f 0241 	bfc	r2, #1, #1
   16dcc:	f883 2020 	strb.w	r2, [r3, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
   16dd0:	2300      	movs	r3, #0
   16dd2:	9300      	str	r3, [sp, #0]
   16dd4:	f8d8 7000 	ldr.w	r7, [r8]
   16dd8:	9a00      	ldr	r2, [sp, #0]
   16dda:	f8b7 317a 	ldrh.w	r3, [r7, #378]	; 0x17a
   16dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16de2:	429a      	cmp	r2, r3
   16de4:	f6bf af3f 	bge.w	16c66 <_lv_disp_refr_task+0x62>
        if(disp_refr->inv_area_joined[i] == 0) {
   16de8:	9b00      	ldr	r3, [sp, #0]
   16dea:	18fb      	adds	r3, r7, r3
   16dec:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
   16df0:	2b00      	cmp	r3, #0
   16df2:	f040 809d 	bne.w	16f30 <_lv_disp_refr_task+0x32c>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
   16df6:	9a00      	ldr	r2, [sp, #0]
   16df8:	687b      	ldr	r3, [r7, #4]
   16dfa:	42b2      	cmp	r2, r6
   16dfc:	bf02      	ittt	eq
   16dfe:	f893 2020 	ldrbeq.w	r2, [r3, #32]
   16e02:	f042 0201 	orreq.w	r2, r2, #1
   16e06:	f883 2020 	strbeq.w	r2, [r3, #32]
            disp_refr->driver.buffer->last_part = 0;
   16e0a:	f893 2020 	ldrb.w	r2, [r3, #32]
   16e0e:	f36f 0241 	bfc	r2, #1, #1
   16e12:	f883 2020 	strb.w	r2, [r3, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
   16e16:	9b00      	ldr	r3, [sp, #0]
   16e18:	00dc      	lsls	r4, r3, #3
   16e1a:	f104 035a 	add.w	r3, r4, #90	; 0x5a
   16e1e:	9302      	str	r3, [sp, #8]
    if(lv_disp_is_true_double_buf(disp_refr)) {
   16e20:	4638      	mov	r0, r7
            lv_refr_area(&disp_refr->inv_areas[i]);
   16e22:	18fb      	adds	r3, r7, r3
   16e24:	9301      	str	r3, [sp, #4]
    if(lv_disp_is_true_double_buf(disp_refr)) {
   16e26:	f00e f9a5 	bl	25174 <lv_disp_is_true_double_buf>
   16e2a:	b348      	cbz	r0, 16e80 <_lv_disp_refr_task+0x27c>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   16e2c:	f8da 0000 	ldr.w	r0, [sl]
   16e30:	f00e f996 	bl	25160 <lv_disp_get_buf>
        vdb->area.x1        = 0;
   16e34:	2500      	movs	r5, #0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   16e36:	4604      	mov	r4, r0
        vdb->area.x1        = 0;
   16e38:	8205      	strh	r5, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
   16e3a:	f8da 0000 	ldr.w	r0, [sl]
   16e3e:	f001 fe5f 	bl	18b00 <lv_disp_get_hor_res>
   16e42:	3801      	subs	r0, #1
   16e44:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
   16e46:	8265      	strh	r5, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   16e48:	f8da 0000 	ldr.w	r0, [sl]
   16e4c:	f001 fe68 	bl	18b20 <lv_disp_get_ver_res>
        disp_refr->driver.buffer->last_part = 1;
   16e50:	f8da 3000 	ldr.w	r3, [sl]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   16e54:	3801      	subs	r0, #1
   16e56:	82e0      	strh	r0, [r4, #22]
            disp_refr->driver.buffer->last_part = 1;
   16e58:	685a      	ldr	r2, [r3, #4]
            lv_refr_area_part(area_p);
   16e5a:	9801      	ldr	r0, [sp, #4]
            disp_refr->driver.buffer->last_part = 1;
   16e5c:	f892 3020 	ldrb.w	r3, [r2, #32]
   16e60:	f043 0302 	orr.w	r3, r3, #2
   16e64:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
   16e68:	f7ff fe36 	bl	16ad8 <lv_refr_area_part>
   16e6c:	e054      	b.n	16f18 <_lv_disp_refr_task+0x314>
        if(disp_refr->inv_area_joined[i] == 0) {
   16e6e:	5d91      	ldrb	r1, [r2, r6]
   16e70:	2900      	cmp	r1, #0
   16e72:	d09e      	beq.n	16db2 <_lv_disp_refr_task+0x1ae>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   16e74:	3e01      	subs	r6, #1
   16e76:	e799      	b.n	16dac <_lv_disp_refr_task+0x1a8>
   16e78:	20002cec 	.word	0x20002cec
   16e7c:	20002cf0 	.word	0x20002cf0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   16e80:	443c      	add	r4, r7
   16e82:	f8da 0000 	ldr.w	r0, [sl]
   16e86:	f00e f96b 	bl	25160 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   16e8a:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
   16e8e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   16e92:	f9b4 b060 	ldrsh.w	fp, [r4, #96]	; 0x60
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   16e96:	3701      	adds	r7, #1
   16e98:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   16e9a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   16e9e:	4605      	mov	r5, r0
   16ea0:	f10b 0901 	add.w	r9, fp, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   16ea4:	f8da 0000 	ldr.w	r0, [sl]
   16ea8:	eba9 0903 	sub.w	r9, r9, r3
   16eac:	f001 fe38 	bl	18b20 <lv_disp_get_ver_res>
        lv_coord_t y2 =
   16eb0:	4583      	cmp	fp, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   16eb2:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   16eb4:	fa0f f989 	sxth.w	r9, r9
   16eb8:	db3e      	blt.n	16f38 <_lv_disp_refr_task+0x334>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   16eba:	f8da 0000 	ldr.w	r0, [sl]
   16ebe:	f001 fe2f 	bl	18b20 <lv_disp_get_ver_res>
        lv_coord_t y2 =
   16ec2:	f100 3bff 	add.w	fp, r0, #4294967295	; 0xffffffff
   16ec6:	fa0f fb8b 	sxth.w	fp, fp
        if(disp_refr->driver.rounder_cb) {
   16eca:	4b54      	ldr	r3, [pc, #336]	; (1701c <_lv_disp_refr_task+0x418>)
        int32_t max_row = (uint32_t)vdb->size / w;
   16ecc:	68ea      	ldr	r2, [r5, #12]
        if(disp_refr->driver.rounder_cb) {
   16ece:	681b      	ldr	r3, [r3, #0]
        int32_t max_row = (uint32_t)vdb->size / w;
   16ed0:	fbb2 f2f7 	udiv	r2, r2, r7
        if(disp_refr->driver.rounder_cb) {
   16ed4:	691b      	ldr	r3, [r3, #16]
   16ed6:	454a      	cmp	r2, r9
   16ed8:	bfa8      	it	ge
   16eda:	464a      	movge	r2, r9
   16edc:	2b00      	cmp	r3, #0
   16ede:	d032      	beq.n	16f46 <_lv_disp_refr_task+0x342>
            tmp.x1 = 0;
   16ee0:	2300      	movs	r3, #0
   16ee2:	9306      	str	r3, [sp, #24]
            tmp.x2 = 0;
   16ee4:	f8ad 301c 	strh.w	r3, [sp, #28]
            lv_coord_t h_tmp = max_row;
   16ee8:	b217      	sxth	r7, r2
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   16eea:	f8d8 0000 	ldr.w	r0, [r8]
   16eee:	9204      	str	r2, [sp, #16]
                tmp.y2 = h_tmp - 1;
   16ef0:	46b9      	mov	r9, r7
   16ef2:	3f01      	subs	r7, #1
   16ef4:	b23f      	sxth	r7, r7
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   16ef6:	6903      	ldr	r3, [r0, #16]
                tmp.y2 = h_tmp - 1;
   16ef8:	f8ad 701e 	strh.w	r7, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   16efc:	a906      	add	r1, sp, #24
   16efe:	4798      	blx	r3
   16f00:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
   16f04:	f8bd 301a 	ldrh.w	r3, [sp, #26]
                if(lv_area_get_height(&tmp) <= max_row) break;
   16f08:	9a04      	ldr	r2, [sp, #16]
   16f0a:	3101      	adds	r1, #1
   16f0c:	1acb      	subs	r3, r1, r3
   16f0e:	b21b      	sxth	r3, r3
   16f10:	429a      	cmp	r2, r3
   16f12:	da14      	bge.n	16f3e <_lv_disp_refr_task+0x33a>
            } while(h_tmp > 0);
   16f14:	2f00      	cmp	r7, #0
   16f16:	dce8      	bgt.n	16eea <_lv_disp_refr_task+0x2e6>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
   16f18:	f8d8 0000 	ldr.w	r0, [r8]
   16f1c:	6983      	ldr	r3, [r0, #24]
   16f1e:	b13b      	cbz	r3, 16f30 <_lv_disp_refr_task+0x32c>
   16f20:	9b02      	ldr	r3, [sp, #8]
   16f22:	4418      	add	r0, r3
   16f24:	f00e f979 	bl	2521a <lv_area_get_size>
   16f28:	4a3d      	ldr	r2, [pc, #244]	; (17020 <_lv_disp_refr_task+0x41c>)
   16f2a:	6813      	ldr	r3, [r2, #0]
   16f2c:	4403      	add	r3, r0
   16f2e:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
   16f30:	9b00      	ldr	r3, [sp, #0]
   16f32:	3301      	adds	r3, #1
   16f34:	9300      	str	r3, [sp, #0]
   16f36:	e74d      	b.n	16dd4 <_lv_disp_refr_task+0x1d0>
        lv_coord_t y2 =
   16f38:	f9b4 b060 	ldrsh.w	fp, [r4, #96]	; 0x60
   16f3c:	e7c5      	b.n	16eca <_lv_disp_refr_task+0x2c6>
            if(h_tmp <= 0) {
   16f3e:	f1b9 0f00 	cmp.w	r9, #0
   16f42:	dde9      	ble.n	16f18 <_lv_disp_refr_task+0x314>
                max_row = tmp.y2 + 1;
   16f44:	460a      	mov	r2, r1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   16f46:	f9b4 905c 	ldrsh.w	r9, [r4, #92]	; 0x5c
        lv_coord_t row_last = 0;
   16f4a:	2700      	movs	r7, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   16f4c:	1e53      	subs	r3, r2, #1
   16f4e:	eb03 0109 	add.w	r1, r3, r9
   16f52:	4559      	cmp	r1, fp
   16f54:	dd0e      	ble.n	16f74 <_lv_disp_refr_task+0x370>
        if(y2 != row_last) {
   16f56:	45bb      	cmp	fp, r7
   16f58:	d0de      	beq.n	16f18 <_lv_disp_refr_task+0x314>
            vdb->area.x1 = area_p->x1;
   16f5a:	f9b4 205a 	ldrsh.w	r2, [r4, #90]	; 0x5a
   16f5e:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
   16f60:	f9b4 205e 	ldrsh.w	r2, [r4, #94]	; 0x5e
   16f64:	f8da 3000 	ldr.w	r3, [sl]
   16f68:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
   16f6a:	f8a5 9012 	strh.w	r9, [r5, #18]
            vdb->area.y2 = y2;
   16f6e:	f8a5 b016 	strh.w	fp, [r5, #22]
   16f72:	e771      	b.n	16e58 <_lv_disp_refr_task+0x254>
            vdb->area.x1 = area_p->x1;
   16f74:	f9b4 105a 	ldrsh.w	r1, [r4, #90]	; 0x5a
   16f78:	8229      	strh	r1, [r5, #16]
            vdb->area.x2 = area_p->x2;
   16f7a:	f9b4 105e 	ldrsh.w	r1, [r4, #94]	; 0x5e
            vdb->area.y1 = row;
   16f7e:	f8a5 9012 	strh.w	r9, [r5, #18]
            vdb->area.y2 = row + max_row - 1;
   16f82:	4491      	add	r9, r2
   16f84:	fa0f f989 	sxth.w	r9, r9
   16f88:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
   16f8c:	b23f      	sxth	r7, r7
   16f8e:	455f      	cmp	r7, fp
   16f90:	bfa8      	it	ge
   16f92:	465f      	movge	r7, fp
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
   16f94:	45bb      	cmp	fp, r7
            vdb->area.x2 = area_p->x2;
   16f96:	82a9      	strh	r1, [r5, #20]
            vdb->area.y2 = row + max_row - 1;
   16f98:	82ef      	strh	r7, [r5, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
   16f9a:	d108      	bne.n	16fae <_lv_disp_refr_task+0x3aa>
   16f9c:	f8d8 1000 	ldr.w	r1, [r8]
   16fa0:	6848      	ldr	r0, [r1, #4]
   16fa2:	f890 1020 	ldrb.w	r1, [r0, #32]
   16fa6:	f041 0102 	orr.w	r1, r1, #2
   16faa:	f880 1020 	strb.w	r1, [r0, #32]
            lv_refr_area_part(area_p);
   16fae:	9801      	ldr	r0, [sp, #4]
   16fb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   16fb4:	f7ff fd90 	bl	16ad8 <lv_refr_area_part>
   16fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   16fbc:	e7c7      	b.n	16f4e <_lv_disp_refr_task+0x34a>
                    if(disp_refr->inv_area_joined[a] == 0) {
   16fbe:	eb04 0309 	add.w	r3, r4, r9
   16fc2:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
   16fc6:	b113      	cbz	r3, 16fce <_lv_disp_refr_task+0x3ca>
                for(a = 0; a < disp_refr->inv_p; a++) {
   16fc8:	f109 0901 	add.w	r9, r9, #1
   16fcc:	e676      	b.n	16cbc <_lv_disp_refr_task+0xb8>
                        uint32_t start_offs =
   16fce:	eb04 04c9 	add.w	r4, r4, r9, lsl #3
   16fd2:	9901      	ldr	r1, [sp, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   16fd4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
   16fd8:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
   16fdc:	f9b4 705c 	ldrsh.w	r7, [r4, #92]	; 0x5c
   16fe0:	3201      	adds	r2, #1
   16fe2:	fb0b 3807 	mla	r8, fp, r7, r3
   16fe6:	1ad2      	subs	r2, r2, r3
   16fe8:	9b00      	ldr	r3, [sp, #0]
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
   16fea:	b212      	sxth	r2, r2
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   16fec:	4443      	add	r3, r8
   16fee:	4488      	add	r8, r1
   16ff0:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	; 0x60
   16ff4:	42b9      	cmp	r1, r7
   16ff6:	dbe7      	blt.n	16fc8 <_lv_disp_refr_task+0x3c4>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
   16ff8:	4619      	mov	r1, r3
   16ffa:	4630      	mov	r0, r6
   16ffc:	9304      	str	r3, [sp, #16]
   16ffe:	9202      	str	r2, [sp, #8]
   17000:	f00b f9ec 	bl	223dc <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
   17004:	9a02      	ldr	r2, [sp, #8]
   17006:	4640      	mov	r0, r8
   17008:	4631      	mov	r1, r6
   1700a:	f00b f9e7 	bl	223dc <_lv_memcpy>
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   1700e:	9b04      	ldr	r3, [sp, #16]
   17010:	9a02      	ldr	r2, [sp, #8]
   17012:	3701      	adds	r7, #1
   17014:	b23f      	sxth	r7, r7
   17016:	445b      	add	r3, fp
   17018:	44d8      	add	r8, fp
   1701a:	e7e9      	b.n	16ff0 <_lv_disp_refr_task+0x3ec>
   1701c:	20002cec 	.word	0x20002cec
   17020:	20002cf0 	.word	0x20002cf0

00017024 <lv_img_cf_get_px_size>:
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
    uint8_t px_size = 0;

    switch(cf) {
   17024:	3804      	subs	r0, #4
   17026:	b2c0      	uxtb	r0, r0
   17028:	280a      	cmp	r0, #10
   1702a:	bf9a      	itte	ls
   1702c:	4b01      	ldrls	r3, [pc, #4]	; (17034 <lv_img_cf_get_px_size+0x10>)
   1702e:	5c18      	ldrbls	r0, [r3, r0]
{
   17030:	2000      	movhi	r0, #0
            px_size = 0;
            break;
    }

    return px_size;
}
   17032:	4770      	bx	lr
   17034:	00028ade 	.word	0x00028ade

00017038 <lv_draw_img>:
{
   17038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1703c:	4604      	mov	r4, r0
   1703e:	b08d      	sub	sp, #52	; 0x34
   17040:	460f      	mov	r7, r1
   17042:	461e      	mov	r6, r3
    if(src == NULL) {
   17044:	4610      	mov	r0, r2
   17046:	b93a      	cbnz	r2, 17058 <lv_draw_img+0x20>
        show_error(coords, mask, "No\ndata");
   17048:	4a66      	ldr	r2, [pc, #408]	; (171e4 <lv_draw_img+0x1ac>)
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);

    if(cdsc->dec_dsc.error_msg != NULL) {
        LV_LOG_WARN("Image draw error");

        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
   1704a:	4639      	mov	r1, r7
   1704c:	4620      	mov	r0, r4
   1704e:	f00c fad0 	bl	235f2 <show_error>
}
   17052:	b00d      	add	sp, #52	; 0x34
   17054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(dsc->opa <= LV_OPA_MIN) return;
   17058:	781b      	ldrb	r3, [r3, #0]
   1705a:	2b02      	cmp	r3, #2
   1705c:	d9f9      	bls.n	17052 <lv_draw_img+0x1a>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
   1705e:	7af1      	ldrb	r1, [r6, #11]
   17060:	f001 fa4e 	bl	18500 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
   17064:	4605      	mov	r5, r0
   17066:	2800      	cmp	r0, #0
   17068:	d0ee      	beq.n	17048 <lv_draw_img+0x10>
    if(cdsc->dec_dsc.error_msg != NULL) {
   1706a:	6982      	ldr	r2, [r0, #24]
   1706c:	2a00      	cmp	r2, #0
   1706e:	d1ec      	bne.n	1704a <lv_draw_img+0x12>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
   17070:	7b03      	ldrb	r3, [r0, #12]
   17072:	f003 031f 	and.w	r3, r3, #31
   17076:	4618      	mov	r0, r3
   17078:	f00c fd30 	bl	23adc <lv_img_cf_is_chroma_keyed>
   1707c:	9002      	str	r0, [sp, #8]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
   1707e:	4618      	mov	r0, r3
   17080:	f00c fd36 	bl	23af0 <lv_img_cf_has_alpha>
    }
    /* The decoder could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
   17084:	692b      	ldr	r3, [r5, #16]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
   17086:	9003      	str	r0, [sp, #12]
    else if(cdsc->dec_dsc.img_data) {
   17088:	2b00      	cmp	r3, #0
   1708a:	d047      	beq.n	1711c <lv_draw_img+0xe4>
        lv_area_t map_area_rot;
        lv_area_copy(&map_area_rot, coords);
   1708c:	a808      	add	r0, sp, #32
   1708e:	4621      	mov	r1, r4
   17090:	f00c fad4 	bl	2363c <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
   17094:	8873      	ldrh	r3, [r6, #2]
   17096:	8930      	ldrh	r0, [r6, #8]
   17098:	b913      	cbnz	r3, 170a0 <lv_draw_img+0x68>
   1709a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1709e:	d02b      	beq.n	170f8 <lv_draw_img+0xc0>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   170a0:	88e2      	ldrh	r2, [r4, #6]
   170a2:	8861      	ldrh	r1, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   170a4:	f8b4 c000 	ldrh.w	ip, [r4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   170a8:	3201      	adds	r2, #1
   170aa:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   170ac:	88a1      	ldrh	r1, [r4, #4]
   170ae:	3101      	adds	r1, #1
   170b0:	eba1 010c 	sub.w	r1, r1, ip
            int32_t w = lv_area_get_width(coords);
            int32_t h = lv_area_get_height(coords);

            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
   170b4:	f106 0c04 	add.w	ip, r6, #4
   170b8:	e9cd 0c00 	strd	r0, ip, [sp]
   170bc:	b21b      	sxth	r3, r3
   170be:	b212      	sxth	r2, r2
   170c0:	b209      	sxth	r1, r1
   170c2:	a808      	add	r0, sp, #32
   170c4:	f00d ff91 	bl	24fea <_lv_img_buf_get_transformed_area>

            map_area_rot.x1 += coords->x1;
   170c8:	f9b4 2000 	ldrsh.w	r2, [r4]
   170cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
   170d0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
   170d4:	4413      	add	r3, r2
   170d6:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
   170da:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   170de:	4419      	add	r1, r3
   170e0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
   170e4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   170e8:	440a      	add	r2, r1
   170ea:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
   170ee:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   170f2:	4413      	add	r3, r2
   170f4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        }

        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
   170f8:	aa08      	add	r2, sp, #32
   170fa:	4639      	mov	r1, r7
   170fc:	a80a      	add	r0, sp, #40	; 0x28
   170fe:	f00e f89a 	bl	25236 <_lv_area_intersect>
        if(union_ok == false) {
   17102:	2800      	cmp	r0, #0
   17104:	d0a5      	beq.n	17052 <lv_draw_img+0x1a>
            return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
                                 successfully.*/
        }

        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
   17106:	9b03      	ldr	r3, [sp, #12]
   17108:	9301      	str	r3, [sp, #4]
   1710a:	9b02      	ldr	r3, [sp, #8]
   1710c:	9300      	str	r3, [sp, #0]
   1710e:	692a      	ldr	r2, [r5, #16]
   17110:	4633      	mov	r3, r6
   17112:	a90a      	add	r1, sp, #40	; 0x28
   17114:	4620      	mov	r0, r4
   17116:	f00c fa96 	bl	23646 <lv_draw_map>
    if(res == LV_RES_INV) {
   1711a:	e79a      	b.n	17052 <lv_draw_img+0x1a>
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
   1711c:	4622      	mov	r2, r4
   1711e:	4639      	mov	r1, r7
   17120:	a806      	add	r0, sp, #24
   17122:	f00e f888 	bl	25236 <_lv_area_intersect>
        if(union_ok == false) {
   17126:	2800      	cmp	r0, #0
   17128:	d093      	beq.n	17052 <lv_draw_img+0x1a>
   1712a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1712e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   17132:	3301      	adds	r3, #1
   17134:	1a9b      	subs	r3, r3, r2
   17136:	b21b      	sxth	r3, r3
                                 successfully.*/
        }

        int32_t width = lv_area_get_width(&mask_com);

        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
   17138:	0058      	lsls	r0, r3, #1
   1713a:	9304      	str	r3, [sp, #16]
   1713c:	f001 fdb6 	bl	18cac <_lv_mem_buf_get>
                                         LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible alpha byte*/

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
   17140:	f10d 0920 	add.w	r9, sp, #32
   17144:	a906      	add	r1, sp, #24
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
   17146:	4680      	mov	r8, r0
        lv_area_copy(&line, &mask_com);
   17148:	4648      	mov	r0, r9
   1714a:	f00c fa77 	bl	2363c <lv_area_copy>
        lv_area_set_height(&line, 1);
   1714e:	2101      	movs	r1, #1
   17150:	4648      	mov	r0, r9
   17152:	f00e f85d 	bl	25210 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
   17156:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   1715a:	f9b4 2000 	ldrsh.w	r2, [r4]
        int32_t y = mask_com.y1 - coords->y1;
   1715e:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
   17162:	f9b4 a002 	ldrsh.w	sl, [r4, #2]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
            lv_area_t mask_line;
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
            if(union_ok == false) continue;

            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   17166:	1a9b      	subs	r3, r3, r2
   17168:	b21b      	sxth	r3, r3
        int32_t y = mask_com.y1 - coords->y1;
   1716a:	ebab 0a0a 	sub.w	sl, fp, sl
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   1716e:	9305      	str	r3, [sp, #20]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
   17170:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   17174:	459b      	cmp	fp, r3
   17176:	dd03      	ble.n	17180 <lv_draw_img+0x148>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
            line.y1++;
            line.y2++;
            y++;
        }
        _lv_mem_buf_release(buf);
   17178:	4640      	mov	r0, r8
   1717a:	f001 fdf9 	bl	18d70 <_lv_mem_buf_release>
    if(res == LV_RES_INV) {
   1717e:	e768      	b.n	17052 <lv_draw_img+0x1a>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
   17180:	464a      	mov	r2, r9
   17182:	4639      	mov	r1, r7
   17184:	a80a      	add	r0, sp, #40	; 0x28
   17186:	f00e f856 	bl	25236 <_lv_area_intersect>
            if(union_ok == false) continue;
   1718a:	b338      	cbz	r0, 171dc <lv_draw_img+0x1a4>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   1718c:	9b04      	ldr	r3, [sp, #16]
   1718e:	9905      	ldr	r1, [sp, #20]
   17190:	f8cd 8000 	str.w	r8, [sp]
   17194:	fa0f f28a 	sxth.w	r2, sl
   17198:	4628      	mov	r0, r5
   1719a:	f00d ffaa 	bl	250f2 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
   1719e:	2801      	cmp	r0, #1
   171a0:	d006      	beq.n	171b0 <lv_draw_img+0x178>
                lv_img_decoder_close(&cdsc->dec_dsc);
   171a2:	4628      	mov	r0, r5
   171a4:	f00d ffb5 	bl	25112 <lv_img_decoder_close>
                _lv_mem_buf_release(buf);
   171a8:	4640      	mov	r0, r8
   171aa:	f001 fde1 	bl	18d70 <_lv_mem_buf_release>
    if(res == LV_RES_INV) {
   171ae:	e74b      	b.n	17048 <lv_draw_img+0x10>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
   171b0:	9b03      	ldr	r3, [sp, #12]
   171b2:	9301      	str	r3, [sp, #4]
   171b4:	9b02      	ldr	r3, [sp, #8]
   171b6:	9300      	str	r3, [sp, #0]
   171b8:	4642      	mov	r2, r8
   171ba:	4633      	mov	r3, r6
   171bc:	a90a      	add	r1, sp, #40	; 0x28
   171be:	4648      	mov	r0, r9
   171c0:	f00c fa41 	bl	23646 <lv_draw_map>
            line.y1++;
   171c4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   171c8:	3301      	adds	r3, #1
   171ca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
   171ce:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   171d2:	3301      	adds	r3, #1
   171d4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            y++;
   171d8:	f10a 0a01 	add.w	sl, sl, #1
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
   171dc:	f10b 0b01 	add.w	fp, fp, #1
   171e0:	e7c6      	b.n	17170 <lv_draw_img+0x138>
   171e2:	bf00      	nop
   171e4:	00028ad6 	.word	0x00028ad6

000171e8 <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
   171e8:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
   171ea:	2120      	movs	r1, #32
{
   171ec:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
   171ee:	f00c fcaf 	bl	23b50 <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
   171f2:	23ff      	movs	r3, #255	; 0xff
   171f4:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
   171f6:	4b06      	ldr	r3, [pc, #24]	; (17210 <lv_draw_label_dsc_init+0x28>)
   171f8:	6063      	str	r3, [r4, #4]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
   171fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
   171fe:	e9c4 3304 	strd	r3, r3, [r4, #16]
    dsc->color = LV_COLOR_BLACK;
   17202:	f44f 7380 	mov.w	r3, #256	; 0x100
   17206:	8023      	strh	r3, [r4, #0]
    dsc->sel_color = LV_COLOR_BLUE;
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
   17208:	2300      	movs	r3, #0
   1720a:	7723      	strb	r3, [r4, #28]
}
   1720c:	bd10      	pop	{r4, pc}
   1720e:	bf00      	nop
   17210:	20000974 	.word	0x20000974

00017214 <lv_draw_label>:
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask,
                                         const lv_draw_label_dsc_t * dsc,
                                         const char * txt,
                                         lv_draw_label_hint_t * hint)
{
   17214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17218:	b0c9      	sub	sp, #292	; 0x124
   1721a:	4688      	mov	r8, r1
   1721c:	9308      	str	r3, [sp, #32]
   1721e:	2300      	movs	r3, #0
   17220:	931b      	str	r3, [sp, #108]	; 0x6c

    if(dsc->opa <= LV_OPA_MIN) return;
   17222:	7a13      	ldrb	r3, [r2, #8]
{
   17224:	9e52      	ldr	r6, [sp, #328]	; 0x148
   17226:	9005      	str	r0, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
   17228:	2b02      	cmp	r3, #2
{
   1722a:	4614      	mov	r4, r2
    if(dsc->opa <= LV_OPA_MIN) return;
   1722c:	f240 80d1 	bls.w	173d2 <lv_draw_label+0x1be>
    const lv_font_t * font = dsc->font;
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt[0] == '\0')  return;
   17230:	9b08      	ldr	r3, [sp, #32]
   17232:	781b      	ldrb	r3, [r3, #0]
   17234:	2b00      	cmp	r3, #0
   17236:	f000 80cc 	beq.w	173d2 <lv_draw_label+0x1be>
    const lv_font_t * font = dsc->font;
   1723a:	f8d2 b004 	ldr.w	fp, [r2, #4]

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
   1723e:	460a      	mov	r2, r1
   17240:	4601      	mov	r1, r0
   17242:	a82b      	add	r0, sp, #172	; 0xac
   17244:	f00d fff7 	bl	25236 <_lv_area_intersect>
    if(!clip_ok) return;
   17248:	2800      	cmp	r0, #0
   1724a:	f000 80c2 	beq.w	173d2 <lv_draw_label+0x1be>


    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
   1724e:	7f63      	ldrb	r3, [r4, #29]
   17250:	079f      	lsls	r7, r3, #30
   17252:	f100 80c1 	bmi.w	173d8 <lv_draw_label+0x1c4>
   17256:	9b05      	ldr	r3, [sp, #20]
   17258:	9a05      	ldr	r2, [sp, #20]
   1725a:	889b      	ldrh	r3, [r3, #4]
   1725c:	8812      	ldrh	r2, [r2, #0]
   1725e:	3301      	adds	r3, #1
   17260:	1a9b      	subs	r3, r3, r2
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
   17262:	b21b      	sxth	r3, r3
                         dsc->flag);
        w = p.x;
    }

    int32_t line_height_font = lv_font_get_line_height(font);
    int32_t line_height = line_height_font + dsc->line_space;
   17264:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   17268:	9207      	str	r2, [sp, #28]

    /*Init variables for the first line*/
    int32_t line_width = 0;
    lv_point_t pos;
    pos.x = coords->x1;
   1726a:	9a05      	ldr	r2, [sp, #20]

    int32_t x_ofs = 0;
    int32_t y_ofs = 0;
    x_ofs = dsc->ofs_x;
    y_ofs = dsc->ofs_y;
    pos.y += y_ofs;
   1726c:	9905      	ldr	r1, [sp, #20]
    pos.x = coords->x1;
   1726e:	f9b2 2000 	ldrsh.w	r2, [r2]
   17272:	9209      	str	r2, [sp, #36]	; 0x24
    x_ofs = dsc->ofs_x;
   17274:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    pos.y += y_ofs;
   17278:	884d      	ldrh	r5, [r1, #2]
    x_ofs = dsc->ofs_x;
   1727a:	9223      	str	r2, [sp, #140]	; 0x8c
    y_ofs = dsc->ofs_y;
   1727c:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
    int32_t line_height_font = lv_font_get_line_height(font);
   17280:	f9bb a008 	ldrsh.w	sl, [fp, #8]
    pos.y += y_ofs;
   17284:	4415      	add	r5, r2
   17286:	b22d      	sxth	r5, r5

    uint32_t line_start     = 0;
    int32_t last_line_start = -1;

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
   17288:	2e00      	cmp	r6, #0
   1728a:	f000 80b6 	beq.w	173fa <lv_draw_label+0x1e6>
   1728e:	2a00      	cmp	r2, #0
   17290:	f040 80b5 	bne.w	173fe <lv_draw_label+0x1ea>
   17294:	2d00      	cmp	r5, #0
   17296:	f280 80b3 	bge.w	17400 <lv_draw_label+0x1ec>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
   1729a:	68b2      	ldr	r2, [r6, #8]
   1729c:	9907      	ldr	r1, [sp, #28]
   1729e:	1b52      	subs	r2, r2, r5
   172a0:	2a00      	cmp	r2, #0
   172a2:	f5c1 7100 	rsb	r1, r1, #512	; 0x200
   172a6:	bfb8      	it	lt
   172a8:	4252      	neglt	r2, r2
   172aa:	eba1 010a 	sub.w	r1, r1, sl
   172ae:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
            hint->line_start = -1;
   172b2:	bfc4      	itt	gt
   172b4:	f04f 32ff 	movgt.w	r2, #4294967295	; 0xffffffff
   172b8:	6032      	strgt	r2, [r6, #0]
        }
        last_line_start = hint->line_start;
   172ba:	6832      	ldr	r2, [r6, #0]
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
   172bc:	2a00      	cmp	r2, #0
   172be:	f2c0 809e 	blt.w	173fe <lv_draw_label+0x1ea>
        line_start = last_line_start;
   172c2:	9204      	str	r2, [sp, #16]
        pos.y += hint->y;
   172c4:	6872      	ldr	r2, [r6, #4]
   172c6:	4415      	add	r5, r2
   172c8:	b22d      	sxth	r5, r5
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   172ca:	9f04      	ldr	r7, [sp, #16]
   172cc:	9808      	ldr	r0, [sp, #32]
   172ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   172d2:	b21b      	sxth	r3, r3
   172d4:	931a      	str	r3, [sp, #104]	; 0x68
   172d6:	7f63      	ldrb	r3, [r4, #29]
   172d8:	9300      	str	r3, [sp, #0]
   172da:	4438      	add	r0, r7
   172dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   172de:	4659      	mov	r1, fp
   172e0:	f001 ff6e 	bl	191c0 <_lv_txt_get_next_line>
   172e4:	9b04      	ldr	r3, [sp, #16]
   172e6:	18c3      	adds	r3, r0, r3
   172e8:	9306      	str	r3, [sp, #24]
    /*Go the first visible line*/
    while(pos.y + line_height_font < mask->y1) {
        /*Go to next line*/
        line_start = line_end;
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
        pos.y += line_height;
   172ea:	9b07      	ldr	r3, [sp, #28]
   172ec:	4453      	add	r3, sl
   172ee:	461f      	mov	r7, r3
    while(pos.y + line_height_font < mask->y1) {
   172f0:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
   172f4:	7f63      	ldrb	r3, [r4, #29]
   172f6:	eb05 020a 	add.w	r2, r5, sl
   172fa:	428a      	cmp	r2, r1
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   172fc:	9a08      	ldr	r2, [sp, #32]
    while(pos.y + line_height_font < mask->y1) {
   172fe:	f2c0 8081 	blt.w	17404 <lv_draw_label+0x1f0>

        if(txt[line_start] == '\0') return;
    }

    /*Align to middle*/
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
   17302:	9904      	ldr	r1, [sp, #16]
   17304:	075e      	lsls	r6, r3, #29
   17306:	eb02 0001 	add.w	r0, r2, r1
   1730a:	f140 80a1 	bpl.w	17450 <lv_draw_label+0x23c>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   1730e:	9906      	ldr	r1, [sp, #24]
   17310:	9e04      	ldr	r6, [sp, #16]
   17312:	9300      	str	r3, [sp, #0]
   17314:	465a      	mov	r2, fp
   17316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1731a:	1b89      	subs	r1, r1, r6
   1731c:	f001 fefe 	bl	1911c <_lv_txt_get_width>
   17320:	9b05      	ldr	r3, [sp, #20]
   17322:	9a05      	ldr	r2, [sp, #20]
   17324:	889b      	ldrh	r3, [r3, #4]
   17326:	8812      	ldrh	r2, [r2, #0]
   17328:	3301      	adds	r3, #1
   1732a:	1a9b      	subs	r3, r3, r2

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
   1732c:	b21b      	sxth	r3, r3
   1732e:	1a18      	subs	r0, r3, r0
   17330:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17332:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   17336:	eb03 0060 	add.w	r0, r3, r0, asr #1
   1733a:	b203      	sxth	r3, r0

    }
    /*Align to the right*/
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
        pos.x += lv_area_get_width(coords) - line_width;
   1733c:	9309      	str	r3, [sp, #36]	; 0x24
    }

    lv_opa_t opa = dsc->opa;
   1733e:	7a23      	ldrb	r3, [r4, #8]
   17340:	931d      	str	r3, [sp, #116]	; 0x74

    uint32_t sel_start = dsc->sel_start;
   17342:	6923      	ldr	r3, [r4, #16]
   17344:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t sel_end = dsc->sel_end;
   17346:	6963      	ldr	r3, [r4, #20]
   17348:	930d      	str	r3, [sp, #52]	; 0x34
    if(sel_start > sel_end) {
   1734a:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
   1734e:	4293      	cmp	r3, r2
   17350:	bf88      	it	hi
   17352:	e9cd 230c 	strdhi	r2, r3, [sp, #48]	; 0x30
        sel_start = sel_end;
        sel_end = tmp;
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
   17356:	7fa3      	ldrb	r3, [r4, #30]
   17358:	079a      	lsls	r2, r3, #30
   1735a:	d016      	beq.n	1738a <lv_draw_label+0x176>
        lv_draw_line_dsc_init(&line_dsc);
   1735c:	a82f      	add	r0, sp, #188	; 0xbc
   1735e:	f00c fc03 	bl	23b68 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
   17362:	7823      	ldrb	r3, [r4, #0]
   17364:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
   17368:	f99b 300e 	ldrsb.w	r3, [fp, #14]
        line_dsc.opa = dsc->opa;
        line_dsc.blend_mode = dsc->blend_mode;
   1736c:	7fe2      	ldrb	r2, [r4, #31]
   1736e:	2b00      	cmp	r3, #0
   17370:	bf08      	it	eq
   17372:	2301      	moveq	r3, #1
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
   17374:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
        line_dsc.opa = dsc->opa;
   17378:	7a23      	ldrb	r3, [r4, #8]
   1737a:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
        line_dsc.blend_mode = dsc->blend_mode;
   1737e:	f89d 30c5 	ldrb.w	r3, [sp, #197]	; 0xc5
   17382:	f362 0301 	bfi	r3, r2, #0, #2
   17386:	f88d 30c5 	strb.w	r3, [sp, #197]	; 0xc5
    lv_color_t recolor;
    int32_t letter_w;


    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
   1738a:	a835      	add	r0, sp, #212	; 0xd4
   1738c:	f001 f89c 	bl	184c8 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_color;
   17390:	7863      	ldrb	r3, [r4, #1]
   17392:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6

    int32_t pos_x_start = pos.x;
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
   17396:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17398:	2bfd      	cmp	r3, #253	; 0xfd
   1739a:	bf88      	it	hi
   1739c:	23ff      	movhi	r3, #255	; 0xff
   1739e:	9313      	str	r3, [sp, #76]	; 0x4c
   173a0:	9b07      	ldr	r3, [sp, #28]
   173a2:	4453      	add	r3, sl
   173a4:	b29b      	uxth	r3, r3
   173a6:	9324      	str	r3, [sp, #144]	; 0x90
   173a8:	b2ab      	uxth	r3, r5
   173aa:	9316      	str	r3, [sp, #88]	; 0x58
    uint32_t par_start = 0;
   173ac:	2300      	movs	r3, #0
   173ae:	9315      	str	r3, [sp, #84]	; 0x54
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
                    sel_coords.y1 = pos.y;
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
                    sel_coords.y2 = pos.y + line_height - 1;
   173b0:	9b07      	ldr	r3, [sp, #28]
    while(txt[line_start] != '\0') {
   173b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
                    sel_coords.y2 = pos.y + line_height - 1;
   173b4:	1e5f      	subs	r7, r3, #1
   173b6:	eb07 030a 	add.w	r3, r7, sl
   173ba:	9329      	str	r3, [sp, #164]	; 0xa4
   173bc:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    while(txt[line_start] != '\0') {
   173c0:	9a04      	ldr	r2, [sp, #16]
   173c2:	9319      	str	r3, [sp, #100]	; 0x64
   173c4:	9b08      	ldr	r3, [sp, #32]
   173c6:	4413      	add	r3, r2
   173c8:	9314      	str	r3, [sp, #80]	; 0x50
   173ca:	9b08      	ldr	r3, [sp, #32]
   173cc:	5c9b      	ldrb	r3, [r3, r2]
   173ce:	2b00      	cmp	r3, #0
   173d0:	d156      	bne.n	17480 <lv_draw_label+0x26c>

        if(pos.y > mask->y2) return;
    }

    LV_ASSERT_MEM_INTEGRITY();
}
   173d2:	b049      	add	sp, #292	; 0x124
   173d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
   173d8:	9302      	str	r3, [sp, #8]
   173da:	f647 4318 	movw	r3, #31768	; 0x7c18
   173de:	9301      	str	r3, [sp, #4]
   173e0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   173e4:	9300      	str	r3, [sp, #0]
   173e6:	6862      	ldr	r2, [r4, #4]
   173e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   173ec:	9908      	ldr	r1, [sp, #32]
   173ee:	a835      	add	r0, sp, #212	; 0xd4
   173f0:	f00e faf9 	bl	259e6 <_lv_txt_get_size>
        w = p.x;
   173f4:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
   173f8:	e734      	b.n	17264 <lv_draw_label+0x50>
    uint32_t line_start     = 0;
   173fa:	9604      	str	r6, [sp, #16]
   173fc:	e765      	b.n	172ca <lv_draw_label+0xb6>
   173fe:	2200      	movs	r2, #0
   17400:	9204      	str	r2, [sp, #16]
   17402:	e762      	b.n	172ca <lv_draw_label+0xb6>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   17404:	9906      	ldr	r1, [sp, #24]
   17406:	9300      	str	r3, [sp, #0]
   17408:	eb02 0901 	add.w	r9, r2, r1
   1740c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1740e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   17412:	4659      	mov	r1, fp
   17414:	4648      	mov	r0, r9
   17416:	f001 fed3 	bl	191c0 <_lv_txt_get_next_line>
   1741a:	9b06      	ldr	r3, [sp, #24]
        pos.y += line_height;
   1741c:	443d      	add	r5, r7
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1741e:	4418      	add	r0, r3
        pos.y += line_height;
   17420:	b22d      	sxth	r5, r5
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
   17422:	b16e      	cbz	r6, 17440 <lv_draw_label+0x22c>
   17424:	f515 6f80 	cmn.w	r5, #1024	; 0x400
   17428:	db0a      	blt.n	17440 <lv_draw_label+0x22c>
   1742a:	6833      	ldr	r3, [r6, #0]
   1742c:	2b00      	cmp	r3, #0
   1742e:	da07      	bge.n	17440 <lv_draw_label+0x22c>
            hint->line_start = line_start;
   17430:	9b06      	ldr	r3, [sp, #24]
   17432:	6033      	str	r3, [r6, #0]
            hint->y          = pos.y - coords->y1;
   17434:	9b05      	ldr	r3, [sp, #20]
   17436:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   1743a:	1aea      	subs	r2, r5, r3
            hint->coord_y    = coords->y1;
   1743c:	e9c6 2301 	strd	r2, r3, [r6, #4]
        if(txt[line_start] == '\0') return;
   17440:	9b06      	ldr	r3, [sp, #24]
   17442:	9304      	str	r3, [sp, #16]
   17444:	f899 3000 	ldrb.w	r3, [r9]
   17448:	2b00      	cmp	r3, #0
   1744a:	d0c2      	beq.n	173d2 <lv_draw_label+0x1be>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1744c:	9006      	str	r0, [sp, #24]
   1744e:	e74f      	b.n	172f0 <lv_draw_label+0xdc>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
   17450:	0719      	lsls	r1, r3, #28
   17452:	f57f af74 	bpl.w	1733e <lv_draw_label+0x12a>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   17456:	9906      	ldr	r1, [sp, #24]
   17458:	9e04      	ldr	r6, [sp, #16]
   1745a:	9300      	str	r3, [sp, #0]
   1745c:	465a      	mov	r2, fp
   1745e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17462:	1b89      	subs	r1, r1, r6
   17464:	f001 fe5a 	bl	1911c <_lv_txt_get_width>
        pos.x += lv_area_get_width(coords) - line_width;
   17468:	9b05      	ldr	r3, [sp, #20]
   1746a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1746c:	889b      	ldrh	r3, [r3, #4]
   1746e:	441a      	add	r2, r3
   17470:	4613      	mov	r3, r2
   17472:	9a05      	ldr	r2, [sp, #20]
   17474:	8812      	ldrh	r2, [r2, #0]
   17476:	3301      	adds	r3, #1
   17478:	1a9b      	subs	r3, r3, r2
   1747a:	1a1b      	subs	r3, r3, r0
   1747c:	b21b      	sxth	r3, r3
   1747e:	e75d      	b.n	1733c <lv_draw_label+0x128>
        pos.x += x_ofs;
   17480:	9b23      	ldr	r3, [sp, #140]	; 0x8c
                    sel_coords.y2 = pos.y + line_height - 1;
   17482:	9a29      	ldr	r2, [sp, #164]	; 0xa4
        pos.x += x_ofs;
   17484:	441d      	add	r5, r3
   17486:	b22b      	sxth	r3, r5
   17488:	930a      	str	r3, [sp, #40]	; 0x28
        i         = 0;
   1748a:	2300      	movs	r3, #0
   1748c:	932a      	str	r3, [sp, #168]	; 0xa8
        cmd_state = CMD_STATE_WAIT;
   1748e:	9307      	str	r3, [sp, #28]
                    sel_coords.y2 = pos.y + line_height - 1;
   17490:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17492:	4413      	add	r3, r2
   17494:	9328      	str	r3, [sp, #160]	; 0xa0
        while(i < line_end - line_start) {
   17496:	9b06      	ldr	r3, [sp, #24]
   17498:	9a04      	ldr	r2, [sp, #16]
   1749a:	992a      	ldr	r1, [sp, #168]	; 0xa8
   1749c:	1a9b      	subs	r3, r3, r2
   1749e:	428b      	cmp	r3, r1
   174a0:	d877      	bhi.n	17592 <lv_draw_label+0x37e>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
   174a2:	7fa3      	ldrb	r3, [r4, #30]
   174a4:	079e      	lsls	r6, r3, #30
   174a6:	d51e      	bpl.n	174e6 <lv_draw_label+0x2d2>
            p1.x = pos_x_start;
   174a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   174aa:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
   174ae:	6863      	ldr	r3, [r4, #4]
   174b0:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
   174b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
   174b8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   174bc:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   174c0:	1053      	asrs	r3, r2, #1
   174c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   174c4:	eb03 0361 	add.w	r3, r3, r1, asr #1
   174c8:	4413      	add	r3, r2
   174ca:	b21b      	sxth	r3, r3
            p2.x = pos.x;
   174cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
   174ce:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
            p2.x = pos.x;
   174d2:	f8ad 20c8 	strh.w	r2, [sp, #200]	; 0xc8
            p2.y = p1.y;
   174d6:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   174da:	4642      	mov	r2, r8
   174dc:	ab2f      	add	r3, sp, #188	; 0xbc
   174de:	a932      	add	r1, sp, #200	; 0xc8
   174e0:	a82d      	add	r0, sp, #180	; 0xb4
   174e2:	f000 fad9 	bl	17a98 <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
   174e6:	7fa3      	ldrb	r3, [r4, #30]
   174e8:	07dd      	lsls	r5, r3, #31
   174ea:	d519      	bpl.n	17520 <lv_draw_label+0x30c>
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   174ec:	6862      	ldr	r2, [r4, #4]
            p1.x = pos_x_start;
   174ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   174f0:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   174f4:	8913      	ldrh	r3, [r2, #8]
   174f6:	8952      	ldrh	r2, [r2, #10]
   174f8:	1a9b      	subs	r3, r3, r2
   174fa:	f99b 200d 	ldrsb.w	r2, [fp, #13]
   174fe:	1a9b      	subs	r3, r3, r2
   17500:	9a19      	ldr	r2, [sp, #100]	; 0x64
   17502:	441a      	add	r2, r3
   17504:	b213      	sxth	r3, r2
            p2.x = pos.x;
   17506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   17508:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
            p2.x = pos.x;
   1750c:	f8ad 20c8 	strh.w	r2, [sp, #200]	; 0xc8
            p2.y = p1.y;
   17510:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   17514:	4642      	mov	r2, r8
   17516:	ab2f      	add	r3, sp, #188	; 0xbc
   17518:	a932      	add	r1, sp, #200	; 0xc8
   1751a:	a82d      	add	r0, sp, #180	; 0xb4
   1751c:	f000 fabc 	bl	17a98 <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   17520:	9b08      	ldr	r3, [sp, #32]
   17522:	9a06      	ldr	r2, [sp, #24]
   17524:	189f      	adds	r7, r3, r2
   17526:	7f63      	ldrb	r3, [r4, #29]
   17528:	9300      	str	r3, [sp, #0]
   1752a:	4659      	mov	r1, fp
   1752c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1752e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   17532:	4638      	mov	r0, r7
   17534:	f001 fe44 	bl	191c0 <_lv_txt_get_next_line>
   17538:	9b06      	ldr	r3, [sp, #24]
   1753a:	181e      	adds	r6, r3, r0
        pos.x = coords->x1;
   1753c:	9b05      	ldr	r3, [sp, #20]
   1753e:	f9b3 5000 	ldrsh.w	r5, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
   17542:	7f63      	ldrb	r3, [r4, #29]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   17544:	4601      	mov	r1, r0
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
   17546:	0758      	lsls	r0, r3, #29
   17548:	f140 8226 	bpl.w	17998 <lv_draw_label+0x784>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   1754c:	9300      	str	r3, [sp, #0]
   1754e:	465a      	mov	r2, fp
   17550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17554:	4638      	mov	r0, r7
   17556:	f001 fde1 	bl	1911c <_lv_txt_get_width>
   1755a:	9b05      	ldr	r3, [sp, #20]
   1755c:	9a05      	ldr	r2, [sp, #20]
   1755e:	889b      	ldrh	r3, [r3, #4]
   17560:	8812      	ldrh	r2, [r2, #0]
   17562:	3301      	adds	r3, #1
   17564:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
   17566:	b21b      	sxth	r3, r3
   17568:	1a18      	subs	r0, r3, r0
   1756a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1756e:	eb05 0560 	add.w	r5, r5, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
   17572:	b22d      	sxth	r5, r5
        if(pos.y > mask->y2) return;
   17574:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17576:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17578:	4413      	add	r3, r2
   1757a:	b29a      	uxth	r2, r3
   1757c:	9216      	str	r2, [sp, #88]	; 0x58
        line_start = line_end;
   1757e:	9a06      	ldr	r2, [sp, #24]
   17580:	9204      	str	r2, [sp, #16]
        if(pos.y > mask->y2) return;
   17582:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   17586:	b21b      	sxth	r3, r3
   17588:	429a      	cmp	r2, r3
   1758a:	f6ff af22 	blt.w	173d2 <lv_draw_label+0x1be>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1758e:	9606      	str	r6, [sp, #24]
   17590:	e714      	b.n	173bc <lv_draw_label+0x1a8>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   17592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17594:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17598:	429a      	cmp	r2, r3
   1759a:	d023      	beq.n	175e4 <lv_draw_label+0x3d0>
   1759c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1759e:	429a      	cmp	r2, r3
   175a0:	d020      	beq.n	175e4 <lv_draw_label+0x3d0>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
   175a2:	9a04      	ldr	r2, [sp, #16]
   175a4:	4bac      	ldr	r3, [pc, #688]	; (17858 <lv_draw_label+0x644>)
   175a6:	9808      	ldr	r0, [sp, #32]
   175a8:	681b      	ldr	r3, [r3, #0]
   175aa:	4411      	add	r1, r2
   175ac:	4798      	blx	r3
   175ae:	4607      	mov	r7, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
   175b0:	4daa      	ldr	r5, [pc, #680]	; (1785c <lv_draw_label+0x648>)
   175b2:	9814      	ldr	r0, [sp, #80]	; 0x50
   175b4:	682b      	ldr	r3, [r5, #0]
   175b6:	a92a      	add	r1, sp, #168	; 0xa8
   175b8:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   175ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
   175bc:	682b      	ldr	r3, [r5, #0]
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
   175be:	4606      	mov	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   175c0:	982a      	ldr	r0, [sp, #168]	; 0xa8
   175c2:	2100      	movs	r1, #0
   175c4:	4410      	add	r0, r2
   175c6:	4798      	blx	r3
   175c8:	7f63      	ldrb	r3, [r4, #29]
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
   175ca:	f013 0301 	ands.w	r3, r3, #1
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   175ce:	4602      	mov	r2, r0
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
   175d0:	f000 808b 	beq.w	176ea <lv_draw_label+0x4d6>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   175d4:	2e23      	cmp	r6, #35	; 0x23
   175d6:	d10e      	bne.n	175f6 <lv_draw_label+0x3e2>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
   175d8:	9907      	ldr	r1, [sp, #28]
   175da:	b929      	cbnz	r1, 175e8 <lv_draw_label+0x3d4>
                        par_start = i;
   175dc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   175de:	9215      	str	r2, [sp, #84]	; 0x54
                        cmd_state = CMD_STATE_WAIT;
   175e0:	9307      	str	r3, [sp, #28]
   175e2:	e758      	b.n	17496 <lv_draw_label+0x282>
            uint32_t logical_char_pos = 0;
   175e4:	2700      	movs	r7, #0
   175e6:	e7e3      	b.n	175b0 <lv_draw_label+0x39c>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
   175e8:	9b07      	ldr	r3, [sp, #28]
   175ea:	2b01      	cmp	r3, #1
   175ec:	d042      	beq.n	17674 <lv_draw_label+0x460>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
   175ee:	2b02      	cmp	r3, #2
   175f0:	d17b      	bne.n	176ea <lv_draw_label+0x4d6>
                        cmd_state = CMD_STATE_WAIT;
   175f2:	2300      	movs	r3, #0
   175f4:	e7f4      	b.n	175e0 <lv_draw_label+0x3cc>
                if(cmd_state == CMD_STATE_PAR) {
   175f6:	9b07      	ldr	r3, [sp, #28]
   175f8:	2b01      	cmp	r3, #1
   175fa:	d176      	bne.n	176ea <lv_draw_label+0x4d6>
                    if(letter == ' ') {
   175fc:	2e20      	cmp	r6, #32
   175fe:	f47f af4a 	bne.w	17496 <lv_draw_label+0x282>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
   17602:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   17604:	9a15      	ldr	r2, [sp, #84]	; 0x54
   17606:	1a9b      	subs	r3, r3, r2
   17608:	2b07      	cmp	r3, #7
   1760a:	d131      	bne.n	17670 <lv_draw_label+0x45c>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
   1760c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    return memcpy(dst, src, len);
   1760e:	9915      	ldr	r1, [sp, #84]	; 0x54
   17610:	189a      	adds	r2, r3, r2
   17612:	5858      	ldr	r0, [r3, r1]
   17614:	9032      	str	r0, [sp, #200]	; 0xc8
   17616:	8893      	ldrh	r3, [r2, #4]
   17618:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
   1761c:	f3c0 4607 	ubfx	r6, r0, #16, #8
   17620:	f3c0 6507 	ubfx	r5, r0, #24, #8
   17624:	f3c0 2707 	ubfx	r7, r0, #8, #8
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
   17628:	b2c0      	uxtb	r0, r0
   1762a:	f00c fa7f 	bl	23b2c <hex_char_to_num>
   1762e:	4601      	mov	r1, r0
   17630:	4638      	mov	r0, r7
   17632:	f00c fa7b 	bl	23b2c <hex_char_to_num>
   17636:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
   1763a:	4630      	mov	r0, r6
   1763c:	f00c fa76 	bl	23b2c <hex_char_to_num>
   17640:	4606      	mov	r6, r0
   17642:	4628      	mov	r0, r5
   17644:	f00c fa72 	bl	23b2c <hex_char_to_num>
   17648:	eb00 1506 	add.w	r5, r0, r6, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
   1764c:	f89d 00cc 	ldrb.w	r0, [sp, #204]	; 0xcc
   17650:	f00c fa6c 	bl	23b2c <hex_char_to_num>
   17654:	4606      	mov	r6, r0
   17656:	f89d 00cd 	ldrb.w	r0, [sp, #205]	; 0xcd
   1765a:	f00c fa67 	bl	23b2c <hex_char_to_num>
   1765e:	eb00 1006 	add.w	r0, r0, r6, lsl #4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
   17662:	4305      	orrs	r5, r0
   17664:	4329      	orrs	r1, r5
   17666:	f3c1 13c0 	ubfx	r3, r1, #7, #1
                            recolor.full = dsc->color.full;
   1766a:	931b      	str	r3, [sp, #108]	; 0x6c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
   1766c:	2302      	movs	r3, #2
   1766e:	e7b7      	b.n	175e0 <lv_draw_label+0x3cc>
                            recolor.full = dsc->color.full;
   17670:	7823      	ldrb	r3, [r4, #0]
   17672:	e7fa      	b.n	1766a <lv_draw_label+0x456>
                        cmd_state = CMD_STATE_WAIT;
   17674:	2300      	movs	r3, #0
            lv_color_t color = dsc->color;
   17676:	7825      	ldrb	r5, [r4, #0]
                        cmd_state = CMD_STATE_WAIT;
   17678:	9307      	str	r3, [sp, #28]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   1767a:	4631      	mov	r1, r6
   1767c:	4658      	mov	r0, fp
   1767e:	f00e fa39 	bl	25af4 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   17682:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   17684:	901c      	str	r0, [sp, #112]	; 0x70
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   17686:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1768a:	429a      	cmp	r2, r3
   1768c:	d01c      	beq.n	176c8 <lv_draw_label+0x4b4>
   1768e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17690:	429a      	cmp	r2, r3
   17692:	d019      	beq.n	176c8 <lv_draw_label+0x4b4>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
   17694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17696:	42bb      	cmp	r3, r7
   17698:	d816      	bhi.n	176c8 <lv_draw_label+0x4b4>
   1769a:	42ba      	cmp	r2, r7
   1769c:	d914      	bls.n	176c8 <lv_draw_label+0x4b4>
                    sel_coords.x1 = pos.x;
   1769e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   176a0:	f8ad 30c8 	strh.w	r3, [sp, #200]	; 0xc8
                    sel_coords.y1 = pos.y;
   176a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   176a6:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
   176aa:	89a3      	ldrh	r3, [r4, #12]
   176ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   176ae:	3b01      	subs	r3, #1
   176b0:	4413      	add	r3, r2
   176b2:	4403      	add	r3, r0
   176b4:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
   176b8:	aa35      	add	r2, sp, #212	; 0xd4
                    sel_coords.y2 = pos.y + line_height - 1;
   176ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   176bc:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
   176c0:	4641      	mov	r1, r8
   176c2:	a832      	add	r0, sp, #200	; 0xc8
   176c4:	f00c fe82 	bl	243cc <lv_draw_rect>
LV_ATTRIBUTE_FAST_MEM static void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * clip_area,
                                                 const lv_font_t * font_p,
                                                 uint32_t letter,
                                                 lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    if(opa < LV_OPA_MIN) return;
   176c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   176ca:	2b01      	cmp	r3, #1
   176cc:	f200 8177 	bhi.w	179be <lv_draw_label+0x7aa>
            if(letter_w > 0) {
   176d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   176d2:	2b00      	cmp	r3, #0
   176d4:	f43f aedf 	beq.w	17496 <lv_draw_label+0x282>
                pos.x += letter_w + dsc->letter_space;
   176d8:	89a5      	ldrh	r5, [r4, #12]
   176da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   176dc:	442b      	add	r3, r5
   176de:	461d      	mov	r5, r3
   176e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   176e2:	441d      	add	r5, r3
   176e4:	b22b      	sxth	r3, r5
   176e6:	930a      	str	r3, [sp, #40]	; 0x28
   176e8:	e6d5      	b.n	17496 <lv_draw_label+0x282>
            lv_color_t color = dsc->color;
   176ea:	7825      	ldrb	r5, [r4, #0]
            if(cmd_state == CMD_STATE_IN) color = recolor;
   176ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   176ee:	9907      	ldr	r1, [sp, #28]
   176f0:	2902      	cmp	r1, #2
   176f2:	bf08      	it	eq
   176f4:	461d      	moveq	r5, r3
   176f6:	e7c0      	b.n	1767a <lv_draw_label+0x466>
    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
    uint32_t shades;
    if(bpp == 3) bpp = 4;
   176f8:	2280      	movs	r2, #128	; 0x80
   176fa:	9210      	str	r2, [sp, #64]	; 0x40
   176fc:	4a58      	ldr	r2, [pc, #352]	; (17860 <lv_draw_label+0x64c>)
   176fe:	2601      	movs	r6, #1
   17700:	2302      	movs	r3, #2
            bpp_opa_table_p = _lv_bpp1_opa_table;
            bitmask_init  = 0x80;
            shades = 2;
            break;
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
   17702:	920b      	str	r2, [sp, #44]	; 0x2c
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
   17704:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17706:	2afc      	cmp	r2, #252	; 0xfc
   17708:	d811      	bhi.n	1772e <lv_draw_label+0x51a>
        if(prev_opa != opa || prev_bpp != bpp) {
   1770a:	4a56      	ldr	r2, [pc, #344]	; (17864 <lv_draw_label+0x650>)
   1770c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1770e:	7812      	ldrb	r2, [r2, #0]
   17710:	428a      	cmp	r2, r1
   17712:	f040 80b3 	bne.w	1787c <lv_draw_label+0x668>
   17716:	4a54      	ldr	r2, [pc, #336]	; (17868 <lv_draw_label+0x654>)
   17718:	6812      	ldr	r2, [r2, #0]
   1771a:	42b2      	cmp	r2, r6
   1771c:	f040 80ae 	bne.w	1787c <lv_draw_label+0x668>
            for(i = 0; i < shades; i++) {
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
            }
        }
        bpp_opa_table_p = opa_table;
        prev_opa = opa;
   17720:	4b50      	ldr	r3, [pc, #320]	; (17864 <lv_draw_label+0x650>)
   17722:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17724:	701a      	strb	r2, [r3, #0]
        prev_bpp = bpp;
   17726:	4b50      	ldr	r3, [pc, #320]	; (17868 <lv_draw_label+0x654>)
   17728:	601e      	str	r6, [r3, #0]
        bpp_opa_table_p = opa_table;
   1772a:	4b50      	ldr	r3, [pc, #320]	; (1786c <lv_draw_label+0x658>)
   1772c:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
   1772e:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	; 0xca
   17732:	9311      	str	r3, [sp, #68]	; 0x44
    int32_t box_h = g->box_h;
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/

    /* Calculate the col/row start/end on the map*/
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   17734:	f9b8 7000 	ldrsh.w	r7, [r8]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   17738:	9911      	ldr	r1, [sp, #68]	; 0x44
    int32_t box_h = g->box_h;
   1773a:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
   1773e:	fb06 f503 	mul.w	r5, r6, r3
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   17742:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   17746:	45ba      	cmp	sl, r7
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   17748:	4451      	add	r1, sl
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   1774a:	bfb4      	ite	lt
   1774c:	eba7 070a 	sublt.w	r7, r7, sl
   17750:	2700      	movge	r7, #0
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   17752:	4299      	cmp	r1, r3
   17754:	bfca      	itet	gt
   17756:	3301      	addgt	r3, #1
   17758:	9b11      	ldrle	r3, [sp, #68]	; 0x44
   1775a:	eba3 030a 	subgt.w	r3, r3, sl
   1775e:	930f      	str	r3, [sp, #60]	; 0x3c
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
   17760:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
   17764:	4599      	cmp	r9, r3
   17766:	bfb4      	ite	lt
   17768:	eba3 0309 	sublt.w	r3, r3, r9
   1776c:	2300      	movge	r3, #0
   1776e:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
   17770:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
   17774:	eb02 0109 	add.w	r1, r2, r9
   17778:	4299      	cmp	r1, r3
   1777a:	bfc4      	itt	gt
   1777c:	3301      	addgt	r3, #1
   1777e:	eba3 0309 	subgt.w	r3, r3, r9

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
   17782:	990e      	ldr	r1, [sp, #56]	; 0x38
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
   17784:	bfc8      	it	gt
   17786:	9320      	strgt	r3, [sp, #128]	; 0x80
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
   17788:	fb07 f306 	mul.w	r3, r7, r6
   1778c:	fb01 3505 	mla	r5, r1, r5, r3
    map_p += bit_ofs >> 3;
   17790:	eb00 03d5 	add.w	r3, r0, r5, lsr #3
   17794:	9312      	str	r3, [sp, #72]	; 0x48

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */

    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   17796:	9b11      	ldr	r3, [sp, #68]	; 0x44
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
   17798:	bfd8      	it	le
   1779a:	9220      	strle	r2, [sp, #128]	; 0x80
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   1779c:	4353      	muls	r3, r2
   1779e:	2b80      	cmp	r3, #128	; 0x80
   177a0:	bfa8      	it	ge
   177a2:	2380      	movge	r3, #128	; 0x80
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   177a4:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   177a6:	9317      	str	r3, [sp, #92]	; 0x5c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   177a8:	f001 fa80 	bl	18cac <_lv_mem_buf_get>
    int32_t mask_p = 0;

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos_x;
   177ac:	eb0a 0307 	add.w	r3, sl, r7
   177b0:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
    fill_area.x2 = col_end  + pos_x - 1;
   177b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   177b6:	9018      	str	r0, [sp, #96]	; 0x60
    fill_area.x2 = col_end  + pos_x - 1;
   177b8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   177bc:	449a      	add	sl, r3
    fill_area.y1 = row_start + pos_y;
   177be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fill_area.x2 = col_end  + pos_x - 1;
   177c0:	f8ad a0b8 	strh.w	sl, [sp, #184]	; 0xb8
    fill_area.y1 = row_start + pos_y;
   177c4:	4499      	add	r9, r3
   177c6:	fa0f f989 	sxth.w	r9, r9
   177ca:	f8ad 90b6 	strh.w	r9, [sp, #182]	; 0xb6
    fill_area.y2 = fill_area.y1;
   177ce:	f8ad 90ba 	strh.w	r9, [sp, #186]	; 0xba

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   177d2:	f000 fdbd 	bl	18350 <lv_draw_mask_get_cnt>

    uint32_t col_bit_max = 8 - bpp;
   177d6:	f1c6 0308 	rsb	r3, r6, #8
   177da:	931f      	str	r3, [sp, #124]	; 0x7c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
   177dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   177de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   177e0:	9025      	str	r0, [sp, #148]	; 0x94
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
   177e2:	443b      	add	r3, r7
   177e4:	1a9b      	subs	r3, r3, r2
   177e6:	4373      	muls	r3, r6
   177e8:	9326      	str	r3, [sp, #152]	; 0x98
   177ea:	1bd3      	subs	r3, r2, r7
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
   177ec:	f005 0507 	and.w	r5, r5, #7
    int32_t mask_p = 0;
   177f0:	f04f 0a00 	mov.w	sl, #0
   177f4:	9322      	str	r3, [sp, #136]	; 0x88

    for(row = row_start ; row < row_end; row++) {
   177f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   177f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   177fa:	4293      	cmp	r3, r2
   177fc:	db4f      	blt.n	1789e <lv_draw_label+0x68a>
        map_p += (col_bit >> 3);
        col_bit = col_bit & 0x7;
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
   177fe:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
   17802:	f9bd 20b6 	ldrsh.w	r2, [sp, #182]	; 0xb6
   17806:	429a      	cmp	r2, r3
   17808:	d00f      	beq.n	1782a <lv_draw_label+0x616>
        fill_area.y2--;
   1780a:	3b01      	subs	r3, #1
   1780c:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        _lv_blend_fill(clip_area, &fill_area,
   17810:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17812:	9302      	str	r3, [sp, #8]
   17814:	27ff      	movs	r7, #255	; 0xff
   17816:	2302      	movs	r3, #2
   17818:	e9cd 3700 	strd	r3, r7, [sp]
   1781c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   17820:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17822:	a92d      	add	r1, sp, #180	; 0xb4
   17824:	4640      	mov	r0, r8
   17826:	f00b faf5 	bl	22e14 <_lv_blend_fill>
                       color, mask_buf, LV_DRAW_MASK_RES_CHANGED, LV_OPA_COVER,
                       blend_mode);
        mask_p = 0;
    }

    _lv_mem_buf_release(mask_buf);
   1782a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1782c:	f001 faa0 	bl	18d70 <_lv_mem_buf_release>
   17830:	e74e      	b.n	176d0 <lv_draw_label+0x4bc>
            bitmask_init  = 0xFF;
   17832:	22ff      	movs	r2, #255	; 0xff
   17834:	9210      	str	r2, [sp, #64]	; 0x40
            break;       /*No opa table, pixel value will be used directly*/
   17836:	2608      	movs	r6, #8
            bpp_opa_table_p = _lv_bpp8_opa_table;
   17838:	4a0d      	ldr	r2, [pc, #52]	; (17870 <lv_draw_label+0x65c>)
            shades = 256;
   1783a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1783e:	e760      	b.n	17702 <lv_draw_label+0x4ee>
            bitmask_init  = 0xF0;
   17840:	22f0      	movs	r2, #240	; 0xf0
   17842:	9210      	str	r2, [sp, #64]	; 0x40
    if(bpp == 3) bpp = 4;
   17844:	2604      	movs	r6, #4
            bpp_opa_table_p = _lv_bpp4_opa_table;
   17846:	4a0b      	ldr	r2, [pc, #44]	; (17874 <lv_draw_label+0x660>)
            shades = 16;
   17848:	2310      	movs	r3, #16
   1784a:	e75a      	b.n	17702 <lv_draw_label+0x4ee>
            bitmask_init  = 0xC0;
   1784c:	22c0      	movs	r2, #192	; 0xc0
   1784e:	9210      	str	r2, [sp, #64]	; 0x40
    if(bpp == 3) bpp = 4;
   17850:	2602      	movs	r6, #2
            bpp_opa_table_p = _lv_bpp2_opa_table;
   17852:	4a09      	ldr	r2, [pc, #36]	; (17878 <lv_draw_label+0x664>)
            shades = 4;
   17854:	2304      	movs	r3, #4
   17856:	e754      	b.n	17702 <lv_draw_label+0x4ee>
   17858:	20000940 	.word	0x20000940
   1785c:	20000944 	.word	0x20000944
   17860:	00028ae9 	.word	0x00028ae9
   17864:	20003088 	.word	0x20003088
   17868:	20002cf4 	.word	0x20002cf4
   1786c:	20002f88 	.word	0x20002f88
   17870:	00028aff 	.word	0x00028aff
   17874:	00028aef 	.word	0x00028aef
   17878:	00028aeb 	.word	0x00028aeb
   1787c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1787e:	4d85      	ldr	r5, [pc, #532]	; (17a94 <lv_draw_label+0x880>)
   17880:	440b      	add	r3, r1
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
   17882:	f811 2b01 	ldrb.w	r2, [r1], #1
   17886:	2aff      	cmp	r2, #255	; 0xff
   17888:	bf17      	itett	ne
   1788a:	9f13      	ldrne	r7, [sp, #76]	; 0x4c
   1788c:	9a13      	ldreq	r2, [sp, #76]	; 0x4c
   1788e:	fb12 f207 	smulbbne	r2, r2, r7
   17892:	0a12      	lsrne	r2, r2, #8
            for(i = 0; i < shades; i++) {
   17894:	428b      	cmp	r3, r1
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
   17896:	f805 2b01 	strb.w	r2, [r5], #1
            for(i = 0; i < shades; i++) {
   1789a:	d1f2      	bne.n	17882 <lv_draw_label+0x66e>
   1789c:	e740      	b.n	17720 <lv_draw_label+0x50c>
        bitmask = bitmask_init >> col_bit;
   1789e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   178a0:	f8cd a09c 	str.w	sl, [sp, #156]	; 0x9c
   178a4:	fa23 f205 	lsr.w	r2, r3, r5
        for(col = col_start; col < col_end; col++) {
   178a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   178aa:	eb03 090a 	add.w	r9, r3, sl
   178ae:	4649      	mov	r1, r9
   178b0:	46be      	mov	lr, r7
   178b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   178b4:	4573      	cmp	r3, lr
   178b6:	dc39      	bgt.n	1792c <lv_draw_label+0x718>
   178b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   178ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   178bc:	4297      	cmp	r7, r2
   178be:	bfc8      	it	gt
   178c0:	2300      	movgt	r3, #0
   178c2:	9311      	str	r3, [sp, #68]	; 0x44
   178c4:	449a      	add	sl, r3
        if(other_mask_cnt) {
   178c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   178c8:	b1b3      	cbz	r3, 178f8 <lv_draw_label+0x6e4>
   178ca:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
   178ce:	f9bd 10b4 	ldrsh.w	r1, [sp, #180]	; 0xb4
   178d2:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
   178d6:	3301      	adds	r3, #1
   178d8:	1a5b      	subs	r3, r3, r1
   178da:	b21b      	sxth	r3, r3
   178dc:	4648      	mov	r0, r9
   178de:	f000 fced 	bl	182bc <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
   178e2:	b948      	cbnz	r0, 178f8 <lv_draw_label+0x6e4>
   178e4:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
   178e8:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
   178ec:	3101      	adds	r1, #1
   178ee:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
   178f0:	b209      	sxth	r1, r1
   178f2:	4648      	mov	r0, r9
   178f4:	f00c f92c 	bl	23b50 <_lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
   178f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   178fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
   178fc:	4413      	add	r3, r2
   178fe:	4699      	mov	r9, r3
   17900:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   17902:	4499      	add	r9, r3
   17904:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17906:	454b      	cmp	r3, r9
   17908:	d92d      	bls.n	17966 <lv_draw_label+0x752>
            fill_area.y2 ++;
   1790a:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
   1790e:	3301      	adds	r3, #1
   17910:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        col_bit += col_bit_row_ofs;
   17914:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17916:	441d      	add	r5, r3
        map_p += (col_bit >> 3);
   17918:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1791a:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
   1791e:	9312      	str	r3, [sp, #72]	; 0x48
    for(row = row_start ; row < row_end; row++) {
   17920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17922:	3301      	adds	r3, #1
        col_bit = col_bit & 0x7;
   17924:	f005 0507 	and.w	r5, r5, #7
    for(row = row_start ; row < row_end; row++) {
   17928:	930e      	str	r3, [sp, #56]	; 0x38
   1792a:	e764      	b.n	177f6 <lv_draw_label+0x5e2>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
   1792c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1792e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   17930:	781b      	ldrb	r3, [r3, #0]
   17932:	eba0 0c05 	sub.w	ip, r0, r5
   17936:	4013      	ands	r3, r2
   17938:	fa23 f30c 	lsr.w	r3, r3, ip
            if(letter_px) {
   1793c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
   17940:	bf1c      	itt	ne
   17942:	980b      	ldrne	r0, [sp, #44]	; 0x2c
   17944:	5cc3      	ldrbne	r3, [r0, r3]
                mask_buf[mask_p] = 0;
   17946:	700b      	strb	r3, [r1, #0]
            if(col_bit < col_bit_max) {
   17948:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1794a:	42ab      	cmp	r3, r5
                map_p++;
   1794c:	bf9d      	ittte	ls
   1794e:	9b12      	ldrls	r3, [sp, #72]	; 0x48
                bitmask = bitmask_init;
   17950:	9a10      	ldrls	r2, [sp, #64]	; 0x40
                map_p++;
   17952:	3301      	addls	r3, #1
                col_bit += bpp;
   17954:	19ad      	addhi	r5, r5, r6
                bitmask = bitmask >> bpp;
   17956:	bf8e      	itee	hi
   17958:	40f2      	lsrhi	r2, r6
                map_p++;
   1795a:	9312      	strls	r3, [sp, #72]	; 0x48
                col_bit = 0;
   1795c:	2500      	movls	r5, #0
        for(col = col_start; col < col_end; col++) {
   1795e:	f10e 0e01 	add.w	lr, lr, #1
   17962:	3101      	adds	r1, #1
   17964:	e7a5      	b.n	178b2 <lv_draw_label+0x69e>
            _lv_blend_fill(clip_area, &fill_area,
   17966:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17968:	9302      	str	r3, [sp, #8]
   1796a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1796e:	2302      	movs	r3, #2
   17970:	e9cd 3c00 	strd	r3, ip, [sp]
   17974:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   17978:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1797a:	a92d      	add	r1, sp, #180	; 0xb4
   1797c:	4640      	mov	r0, r8
   1797e:	f00b fa49 	bl	22e14 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
   17982:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
   17986:	3301      	adds	r3, #1
   17988:	b21b      	sxth	r3, r3
   1798a:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
            fill_area.y2 = fill_area.y1;
   1798e:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            mask_p = 0;
   17992:	f04f 0a00 	mov.w	sl, #0
   17996:	e7bd      	b.n	17914 <lv_draw_label+0x700>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
   17998:	071a      	lsls	r2, r3, #28
   1799a:	f57f adeb 	bpl.w	17574 <lv_draw_label+0x360>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   1799e:	9300      	str	r3, [sp, #0]
   179a0:	465a      	mov	r2, fp
   179a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   179a6:	4638      	mov	r0, r7
   179a8:	f001 fbb8 	bl	1911c <_lv_txt_get_width>
            pos.x += lv_area_get_width(coords) - line_width;
   179ac:	9b05      	ldr	r3, [sp, #20]
   179ae:	889b      	ldrh	r3, [r3, #4]
   179b0:	441d      	add	r5, r3
   179b2:	9b05      	ldr	r3, [sp, #20]
   179b4:	881b      	ldrh	r3, [r3, #0]
   179b6:	3501      	adds	r5, #1
   179b8:	1aed      	subs	r5, r5, r3
   179ba:	1a2d      	subs	r5, r5, r0
   179bc:	e5d9      	b.n	17572 <lv_draw_label+0x35e>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
   179be:	7fe3      	ldrb	r3, [r4, #31]
   179c0:	931e      	str	r3, [sp, #120]	; 0x78
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
   179c2:	4632      	mov	r2, r6
   179c4:	2300      	movs	r3, #0
   179c6:	a932      	add	r1, sp, #200	; 0xc8
   179c8:	4658      	mov	r0, fp
   179ca:	f00e f88e 	bl	25aea <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
   179ce:	2800      	cmp	r0, #0
   179d0:	f43f ae7e 	beq.w	176d0 <lv_draw_label+0x4bc>
    if((g.box_h == 0) || (g.box_w == 0)) return;
   179d4:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   179d8:	2b00      	cmp	r3, #0
   179da:	f43f ae79 	beq.w	176d0 <lv_draw_label+0x4bc>
   179de:	f8bd 20ca 	ldrh.w	r2, [sp, #202]	; 0xca
   179e2:	2a00      	cmp	r2, #0
   179e4:	f43f ae74 	beq.w	176d0 <lv_draw_label+0x4bc>
    int32_t pos_x = pos_p->x + g.ofs_x;
   179e8:	990a      	ldr	r1, [sp, #40]	; 0x28
   179ea:	f9bd a0ce 	ldrsh.w	sl, [sp, #206]	; 0xce
   179ee:	448a      	add	sl, r1
    if(pos_x + g.box_w < clip_area->x1 ||
   179f0:	f9b8 1000 	ldrsh.w	r1, [r8]
   179f4:	4452      	add	r2, sl
   179f6:	428a      	cmp	r2, r1
   179f8:	f6ff ae6a 	blt.w	176d0 <lv_draw_label+0x4bc>
       pos_x > clip_area->x2 ||
   179fc:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
   17a00:	4592      	cmp	sl, r2
   17a02:	f73f ae65 	bgt.w	176d0 <lv_draw_label+0x4bc>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   17a06:	f9bd 20d0 	ldrsh.w	r2, [sp, #208]	; 0xd0
   17a0a:	f9bb 9008 	ldrsh.w	r9, [fp, #8]
   17a0e:	441a      	add	r2, r3
   17a10:	eba9 0902 	sub.w	r9, r9, r2
   17a14:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
   17a18:	eba9 0902 	sub.w	r9, r9, r2
   17a1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   17a1e:	4491      	add	r9, r2
       pos_y + g.box_h < clip_area->y1 ||
   17a20:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
   17a24:	444b      	add	r3, r9
       pos_x > clip_area->x2 ||
   17a26:	4293      	cmp	r3, r2
   17a28:	f6ff ae52 	blt.w	176d0 <lv_draw_label+0x4bc>
       pos_y > clip_area->y2)  {
   17a2c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
       pos_y + g.box_h < clip_area->y1 ||
   17a30:	4599      	cmp	r9, r3
   17a32:	f73f ae4d 	bgt.w	176d0 <lv_draw_label+0x4bc>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
   17a36:	4631      	mov	r1, r6
   17a38:	4658      	mov	r0, fp
   17a3a:	f00e f854 	bl	25ae6 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
   17a3e:	2800      	cmp	r0, #0
   17a40:	f43f ae46 	beq.w	176d0 <lv_draw_label+0x4bc>
    if(font_p->subpx) {
   17a44:	f89b 300c 	ldrb.w	r3, [fp, #12]
   17a48:	079b      	lsls	r3, r3, #30
   17a4a:	f47f ae41 	bne.w	176d0 <lv_draw_label+0x4bc>
    uint32_t bpp = g->bpp;
   17a4e:	f89d 30d2 	ldrb.w	r3, [sp, #210]	; 0xd2
   17a52:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
    if(bpp == 3) bpp = 4;
   17a56:	2b03      	cmp	r3, #3
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
   17a58:	fa0f fa8a 	sxth.w	sl, sl
   17a5c:	fa0f f989 	sxth.w	r9, r9
    if(bpp == 3) bpp = 4;
   17a60:	f43f aeee 	beq.w	17840 <lv_draw_label+0x62c>
    switch(bpp) {
   17a64:	3b01      	subs	r3, #1
   17a66:	2b07      	cmp	r3, #7
   17a68:	f63f ae32 	bhi.w	176d0 <lv_draw_label+0x4bc>
   17a6c:	a201      	add	r2, pc, #4	; (adr r2, 17a74 <lv_draw_label+0x860>)
   17a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17a72:	bf00      	nop
   17a74:	000176f9 	.word	0x000176f9
   17a78:	0001784d 	.word	0x0001784d
   17a7c:	000176d1 	.word	0x000176d1
   17a80:	00017841 	.word	0x00017841
   17a84:	000176d1 	.word	0x000176d1
   17a88:	000176d1 	.word	0x000176d1
   17a8c:	000176d1 	.word	0x000176d1
   17a90:	00017833 	.word	0x00017833
   17a94:	20002f88 	.word	0x20002f88

00017a98 <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
   17a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a9c:	b0c7      	sub	sp, #284	; 0x11c
   17a9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   17aa2:	9206      	str	r2, [sp, #24]
    if(dsc->width == 0) return;
   17aa4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
{
   17aa8:	469b      	mov	fp, r3
    if(dsc->width == 0) return;
   17aaa:	2a00      	cmp	r2, #0
   17aac:	f000 80e8 	beq.w	17c80 <lv_draw_line+0x1e8>
    if(dsc->opa <= LV_OPA_MIN) return;
   17ab0:	7a1b      	ldrb	r3, [r3, #8]
   17ab2:	2b02      	cmp	r3, #2
   17ab4:	f240 80e4 	bls.w	17c80 <lv_draw_line+0x1e8>

    if(point1->x == point2->x && point1->y == point2->y) return;
   17ab8:	9b05      	ldr	r3, [sp, #20]
   17aba:	f9b0 1000 	ldrsh.w	r1, [r0]
   17abe:	f9b3 5000 	ldrsh.w	r5, [r3]
   17ac2:	9b05      	ldr	r3, [sp, #20]
   17ac4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   17ac8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   17acc:	42a9      	cmp	r1, r5
   17ace:	d102      	bne.n	17ad6 <lv_draw_line+0x3e>
   17ad0:	42a3      	cmp	r3, r4
   17ad2:	f000 80d5 	beq.w	17c80 <lv_draw_line+0x1e8>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   17ad6:	42a9      	cmp	r1, r5
   17ad8:	460e      	mov	r6, r1
   17ada:	bfa8      	it	ge
   17adc:	462e      	movge	r6, r5
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
   17ade:	42a9      	cmp	r1, r5
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   17ae0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
   17ae4:	bfb8      	it	lt
   17ae6:	4629      	movlt	r1, r5
   17ae8:	eb01 0162 	add.w	r1, r1, r2, asr #1
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   17aec:	42a3      	cmp	r3, r4
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   17aee:	ea4f 0062 	mov.w	r0, r2, asr #1
   17af2:	f1c0 0000 	rsb	r0, r0, #0
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
   17af6:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   17afa:	4619      	mov	r1, r3
   17afc:	bfa8      	it	ge
   17afe:	4621      	movge	r1, r4
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   17b00:	42a3      	cmp	r3, r4
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   17b02:	fa06 f680 	sxtah	r6, r6, r0
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   17b06:	bfb8      	it	lt
   17b08:	4623      	movlt	r3, r4
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   17b0a:	fa01 f080 	sxtah	r0, r1, r0

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   17b0e:	a90c      	add	r1, sp, #48	; 0x30
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   17b10:	eb03 0362 	add.w	r3, r3, r2, asr #1
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   17b14:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   17b18:	9a06      	ldr	r2, [sp, #24]
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   17b1a:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   17b1e:	4608      	mov	r0, r1
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   17b20:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   17b24:	f00d fb87 	bl	25236 <_lv_area_intersect>
    if(!is_common) return;
   17b28:	2800      	cmp	r0, #0
   17b2a:	f000 80a9 	beq.w	17c80 <lv_draw_line+0x1e8>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
   17b2e:	9b04      	ldr	r3, [sp, #16]
   17b30:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   17b34:	9b05      	ldr	r3, [sp, #20]
   17b36:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
   17b3a:	45c1      	cmp	r9, r8
   17b3c:	f040 813c 	bne.w	17db8 <lv_draw_line+0x320>

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;
   17b40:	f89b 5008 	ldrb.w	r5, [fp, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   17b44:	f7ff f858 	bl	16bf8 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   17b48:	f00d fb0a 	bl	25160 <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
   17b4c:	f9bb 6002 	ldrsh.w	r6, [fp, #2]
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   17b50:	f9bb 4006 	ldrsh.w	r4, [fp, #6]
    int32_t w = dsc->width - 1;
   17b54:	1e73      	subs	r3, r6, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   17b56:	f003 0601 	and.w	r6, r3, #1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   17b5a:	4607      	mov	r7, r0
    int32_t w_half0 = w >> 1;
   17b5c:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   17b60:	eb06 0663 	add.w	r6, r6, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   17b64:	b124      	cbz	r4, 17b70 <lv_draw_line+0xd8>
   17b66:	f9bb 4004 	ldrsh.w	r4, [fp, #4]
   17b6a:	3c00      	subs	r4, #0
   17b6c:	bf18      	it	ne
   17b6e:	2401      	movne	r4, #1

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   17b70:	f000 fbee 	bl	18350 <lv_draw_mask_get_cnt>
   17b74:	2800      	cmp	r0, #0
   17b76:	f040 8086 	bne.w	17c86 <lv_draw_line+0x1ee>
    else if(dashed) simple_mode = false;
   17b7a:	f084 0201 	eor.w	r2, r4, #1

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
   17b7e:	9b05      	ldr	r3, [sp, #20]
   17b80:	9904      	ldr	r1, [sp, #16]
   17b82:	f9b3 3000 	ldrsh.w	r3, [r3]
   17b86:	f9b1 1000 	ldrsh.w	r1, [r1]
   17b8a:	428b      	cmp	r3, r1
   17b8c:	4618      	mov	r0, r3
   17b8e:	bfa8      	it	ge
   17b90:	4608      	movge	r0, r1
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
   17b92:	428b      	cmp	r3, r1
   17b94:	bfb8      	it	lt
   17b96:	460b      	movlt	r3, r1
   17b98:	3b01      	subs	r3, #1
   17b9a:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
   17b9e:	9b04      	ldr	r3, [sp, #16]
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
   17ba0:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
    draw_area.y1 = point1->y - w_half1;
   17ba4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   17ba8:	1b9e      	subs	r6, r3, r6
    draw_area.y2 = point1->y + w_half0;
   17baa:	4498      	add	r8, r3
    draw_area.y1 = point1->y - w_half1;
   17bac:	f8ad 60a2 	strh.w	r6, [sp, #162]	; 0xa2
    draw_area.y2 = point1->y + w_half0;
   17bb0:	f8ad 80a6 	strh.w	r8, [sp, #166]	; 0xa6

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
   17bb4:	2a00      	cmp	r2, #0
   17bb6:	d068      	beq.n	17c8a <lv_draw_line+0x1f2>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
   17bb8:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(clip, &draw_area,
   17bbc:	f003 0303 	and.w	r3, r3, #3
   17bc0:	e9cd 5301 	strd	r5, r3, [sp, #4]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
   17bc4:	2301      	movs	r3, #1
   17bc6:	9300      	str	r3, [sp, #0]
   17bc8:	f89b 2000 	ldrb.w	r2, [fp]
   17bcc:	2300      	movs	r3, #0
   17bce:	a928      	add	r1, sp, #160	; 0xa0
   17bd0:	a80c      	add	r0, sp, #48	; 0x30
   17bd2:	f00b f91f 	bl	22e14 <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
   17bd6:	f89b 3009 	ldrb.w	r3, [fp, #9]
   17bda:	f013 0f0c 	tst.w	r3, #12
   17bde:	d04f      	beq.n	17c80 <lv_draw_line+0x1e8>
        lv_draw_rect_dsc_init(&cir_dsc);
   17be0:	a833      	add	r0, sp, #204	; 0xcc
   17be2:	f000 fc71 	bl	184c8 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
   17be6:	f89b 3000 	ldrb.w	r3, [fp]
   17bea:	f88d 30ce 	strb.w	r3, [sp, #206]	; 0xce
        cir_dsc.radius = LV_RADIUS_CIRCLE;
   17bee:	f647 73ff 	movw	r3, #32767	; 0x7fff
   17bf2:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        cir_dsc.bg_opa = dsc->opa;
   17bf6:	f89b 3008 	ldrb.w	r3, [fp, #8]
        int32_t r = (dsc->width >> 1);
   17bfa:	f9bb 5002 	ldrsh.w	r5, [fp, #2]
        cir_dsc.bg_opa = dsc->opa;
   17bfe:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
        if(dsc->round_start) {
   17c02:	f89b 3009 	ldrb.w	r3, [fp, #9]
        int32_t r = (dsc->width >> 1);
   17c06:	106c      	asrs	r4, r5, #1
        if(dsc->round_start) {
   17c08:	075a      	lsls	r2, r3, #29
   17c0a:	ea6f 0505 	mvn.w	r5, r5
   17c0e:	f005 0501 	and.w	r5, r5, #1
   17c12:	d518      	bpl.n	17c46 <lv_draw_line+0x1ae>
            cir_area.x1 = point1->x - r;
   17c14:	9b04      	ldr	r3, [sp, #16]
   17c16:	f9b3 2000 	ldrsh.w	r2, [r3]
   17c1a:	1b13      	subs	r3, r2, r4
   17c1c:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
            cir_area.y1 = point1->y - r;
   17c20:	9b04      	ldr	r3, [sp, #16]
   17c22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
            cir_area.x2 = point1->x + r - r_corr;
   17c26:	4422      	add	r2, r4
            cir_area.y1 = point1->y - r;
   17c28:	1b19      	subs	r1, r3, r4
            cir_area.x2 = point1->x + r - r_corr;
   17c2a:	1b52      	subs	r2, r2, r5
            cir_area.y2 = point1->y + r - r_corr ;
   17c2c:	4423      	add	r3, r4
            cir_area.y1 = point1->y - r;
   17c2e:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point1->x + r - r_corr;
   17c32:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
   17c36:	1b5b      	subs	r3, r3, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   17c38:	9906      	ldr	r1, [sp, #24]
            cir_area.y2 = point1->y + r - r_corr ;
   17c3a:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   17c3e:	aa33      	add	r2, sp, #204	; 0xcc
   17c40:	a828      	add	r0, sp, #160	; 0xa0
   17c42:	f00c fbc3 	bl	243cc <lv_draw_rect>
        if(dsc->round_end) {
   17c46:	f89b 3009 	ldrb.w	r3, [fp, #9]
   17c4a:	071b      	lsls	r3, r3, #28
   17c4c:	d518      	bpl.n	17c80 <lv_draw_line+0x1e8>
            cir_area.x1 = point2->x - r;
   17c4e:	9b05      	ldr	r3, [sp, #20]
   17c50:	f9b3 3000 	ldrsh.w	r3, [r3]
   17c54:	1b1a      	subs	r2, r3, r4
   17c56:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
            cir_area.y1 = point2->y - r;
   17c5a:	9a05      	ldr	r2, [sp, #20]
   17c5c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
            cir_area.x2 = point2->x + r - r_corr;
   17c60:	4423      	add	r3, r4
            cir_area.y1 = point2->y - r;
   17c62:	1b11      	subs	r1, r2, r4
            cir_area.y2 = point2->y + r - r_corr ;
   17c64:	4414      	add	r4, r2
            cir_area.y1 = point2->y - r;
   17c66:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point2->x + r - r_corr;
   17c6a:	1b5b      	subs	r3, r3, r5
            cir_area.y2 = point2->y + r - r_corr ;
   17c6c:	1b64      	subs	r4, r4, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   17c6e:	9906      	ldr	r1, [sp, #24]
            cir_area.x2 = point2->x + r - r_corr;
   17c70:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   17c74:	aa33      	add	r2, sp, #204	; 0xcc
   17c76:	a828      	add	r0, sp, #160	; 0xa0
            cir_area.y2 = point2->y + r - r_corr ;
   17c78:	f8ad 40a6 	strh.w	r4, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   17c7c:	f00c fba6 	bl	243cc <lv_draw_rect>
}
   17c80:	b047      	add	sp, #284	; 0x11c
   17c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   17c86:	2200      	movs	r2, #0
   17c88:	e779      	b.n	17b7e <lv_draw_line+0xe6>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
   17c8a:	aa28      	add	r2, sp, #160	; 0xa0
   17c8c:	a90c      	add	r1, sp, #48	; 0x30
   17c8e:	4610      	mov	r0, r2
   17c90:	f00d fad1 	bl	25236 <_lv_area_intersect>
        if(!is_common) return;
   17c94:	2800      	cmp	r0, #0
   17c96:	d09e      	beq.n	17bd6 <lv_draw_line+0x13e>
        draw_area.y1 -= disp_area->y1;
   17c98:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
   17c9c:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
        draw_area.x1 -= disp_area->x1;
   17ca0:	f9b7 8010 	ldrsh.w	r8, [r7, #16]
   17ca4:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
        fill_area.x1 = draw_area.x1 + disp_area->x1;
   17ca8:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        draw_area.y1 -= disp_area->y1;
   17cac:	1b91      	subs	r1, r2, r6
   17cae:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= disp_area->x1;
   17cb2:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
        fill_area.x2 = draw_area.x2 + disp_area->x1;
   17cb6:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        draw_area.x2 -= disp_area->x1;
   17cba:	eba1 0508 	sub.w	r5, r1, r8
   17cbe:	f8ad 50a4 	strh.w	r5, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
   17cc2:	f8bd 50a6 	ldrh.w	r5, [sp, #166]	; 0xa6
        fill_area.y1 = draw_area.y1 + disp_area->y1;
   17cc6:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        draw_area.y2 -= disp_area->y1;
   17cca:	1bad      	subs	r5, r5, r6
        draw_area.x1 -= disp_area->x1;
   17ccc:	eba0 0308 	sub.w	r3, r0, r8
        draw_area.y2 -= disp_area->y1;
   17cd0:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
   17cd4:	1c4d      	adds	r5, r1, #1
        draw_area.x1 -= disp_area->x1;
   17cd6:	b21b      	sxth	r3, r3
   17cd8:	1a2d      	subs	r5, r5, r0
   17cda:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
   17cde:	b22d      	sxth	r5, r5
        fill_area.y2 = fill_area.y1;
   17ce0:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        if(dashed) {
   17ce4:	b1dc      	cbz	r4, 17d1e <lv_draw_line+0x286>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
   17ce6:	4498      	add	r8, r3
   17ce8:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
   17cec:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
   17cf0:	4413      	add	r3, r2
   17cf2:	fb98 f2f3 	sdiv	r2, r8, r3
   17cf6:	fb03 8812 	mls	r8, r3, r2, r8
   17cfa:	fa0f f888 	sxth.w	r8, r8
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   17cfe:	4628      	mov	r0, r5
   17d00:	f000 ffd4 	bl	18cac <_lv_mem_buf_get>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   17d04:	f9bd 90a2 	ldrsh.w	r9, [sp, #162]	; 0xa2
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   17d08:	4606      	mov	r6, r0
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   17d0a:	f04f 0a00 	mov.w	sl, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   17d0e:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
   17d12:	4599      	cmp	r9, r3
   17d14:	dd05      	ble.n	17d22 <lv_draw_line+0x28a>
        _lv_mem_buf_release(mask_buf);
   17d16:	4630      	mov	r0, r6
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
   17d18:	f001 f82a 	bl	18d70 <_lv_mem_buf_release>
   17d1c:	e75b      	b.n	17bd6 <lv_draw_line+0x13e>
        lv_style_int_t dash_start = 0;
   17d1e:	46a0      	mov	r8, r4
   17d20:	e7ed      	b.n	17cfe <lv_draw_line+0x266>
            _lv_memset_ff(mask_buf, draw_area_w);
   17d22:	4629      	mov	r1, r5
   17d24:	4630      	mov	r0, r6
   17d26:	f00b ff1b 	bl	23b60 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   17d2a:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
   17d2e:	8a7a      	ldrh	r2, [r7, #18]
   17d30:	8a39      	ldrh	r1, [r7, #16]
   17d32:	444a      	add	r2, r9
   17d34:	4419      	add	r1, r3
   17d36:	b212      	sxth	r2, r2
   17d38:	462b      	mov	r3, r5
   17d3a:	b209      	sxth	r1, r1
   17d3c:	4630      	mov	r0, r6
   17d3e:	f000 fabd 	bl	182bc <lv_draw_mask_apply>
   17d42:	4602      	mov	r2, r0
            if(dashed) {
   17d44:	b18c      	cbz	r4, 17d6a <lv_draw_line+0x2d2>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
   17d46:	b180      	cbz	r0, 17d6a <lv_draw_line+0x2d2>
                    lv_style_int_t dash_cnt = dash_start;
   17d48:	4641      	mov	r1, r8
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   17d4a:	2300      	movs	r3, #0
   17d4c:	e00a      	b.n	17d64 <lv_draw_line+0x2cc>
                        if(dash_cnt <= dsc->dash_width) {
   17d4e:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
   17d52:	428a      	cmp	r2, r1
   17d54:	db26      	blt.n	17da4 <lv_draw_line+0x30c>
                            i += diff;
   17d56:	4413      	add	r3, r2
   17d58:	1a5b      	subs	r3, r3, r1
   17d5a:	b21b      	sxth	r3, r3
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   17d5c:	3301      	adds	r3, #1
   17d5e:	3201      	adds	r2, #1
   17d60:	b21b      	sxth	r3, r3
   17d62:	b211      	sxth	r1, r2
   17d64:	429d      	cmp	r5, r3
   17d66:	dcf2      	bgt.n	17d4e <lv_draw_line+0x2b6>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
   17d68:	2202      	movs	r2, #2
                           dsc->blend_mode);
   17d6a:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(clip, &fill_area,
   17d6e:	f003 0303 	and.w	r3, r3, #3
   17d72:	9302      	str	r3, [sp, #8]
   17d74:	f89b 3008 	ldrb.w	r3, [fp, #8]
   17d78:	a933      	add	r1, sp, #204	; 0xcc
   17d7a:	e9cd 2300 	strd	r2, r3, [sp]
   17d7e:	a80c      	add	r0, sp, #48	; 0x30
   17d80:	4633      	mov	r3, r6
   17d82:	f89b 2000 	ldrb.w	r2, [fp]
   17d86:	f00b f845 	bl	22e14 <_lv_blend_fill>
            fill_area.y1++;
   17d8a:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
   17d8e:	3301      	adds	r3, #1
   17d90:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
   17d94:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
   17d98:	3301      	adds	r3, #1
   17d9a:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   17d9e:	f109 0901 	add.w	r9, r9, #1
   17da2:	e7b4      	b.n	17d0e <lv_draw_line+0x276>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
   17da4:	f9bb 0006 	ldrsh.w	r0, [fp, #6]
   17da8:	4402      	add	r2, r0
   17daa:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
   17dac:	bfba      	itte	lt
   17dae:	f806 a003 	strblt.w	sl, [r6, r3]
   17db2:	460a      	movlt	r2, r1
                            dash_cnt = 0;
   17db4:	2200      	movge	r2, #0
   17db6:	e7d1      	b.n	17d5c <lv_draw_line+0x2c4>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
   17db8:	9b04      	ldr	r3, [sp, #16]
   17dba:	f9b3 7000 	ldrsh.w	r7, [r3]
   17dbe:	9b05      	ldr	r3, [sp, #20]
   17dc0:	f9b3 6000 	ldrsh.w	r6, [r3]
   17dc4:	42b7      	cmp	r7, r6
   17dc6:	f040 80c6 	bne.w	17f56 <lv_draw_line+0x4be>
    lv_opa_t opa = dsc->opa;
   17dca:	f89b 4008 	ldrb.w	r4, [fp, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   17dce:	f7fe ff13 	bl	16bf8 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   17dd2:	f00d f9c5 	bl	25160 <lv_disp_get_buf>
    int32_t w = dsc->width - 1;
   17dd6:	f9bb 6002 	ldrsh.w	r6, [fp, #2]
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   17dda:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
    int32_t w = dsc->width - 1;
   17dde:	1e73      	subs	r3, r6, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   17de0:	f003 0601 	and.w	r6, r3, #1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   17de4:	4607      	mov	r7, r0
    int32_t w_half0 = w >> 1;
   17de6:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   17dea:	eb06 0663 	add.w	r6, r6, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   17dee:	b125      	cbz	r5, 17dfa <lv_draw_line+0x362>
   17df0:	f9bb 5004 	ldrsh.w	r5, [fp, #4]
   17df4:	3d00      	subs	r5, #0
   17df6:	bf18      	it	ne
   17df8:	2501      	movne	r5, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   17dfa:	f000 faa9 	bl	18350 <lv_draw_mask_get_cnt>
   17dfe:	bb20      	cbnz	r0, 17e4a <lv_draw_line+0x3b2>
    else if(dashed) simple_mode = false;
   17e00:	f085 0201 	eor.w	r2, r5, #1
    draw_area.x1 = point1->x - w_half1;
   17e04:	9b04      	ldr	r3, [sp, #16]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   17e06:	9904      	ldr	r1, [sp, #16]
    draw_area.x1 = point1->x - w_half1;
   17e08:	f9b3 3000 	ldrsh.w	r3, [r3]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   17e0c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    draw_area.x1 = point1->x - w_half1;
   17e10:	1b9e      	subs	r6, r3, r6
    draw_area.x2 = point1->x + w_half0;
   17e12:	4443      	add	r3, r8
   17e14:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   17e18:	9b05      	ldr	r3, [sp, #20]
    draw_area.x1 = point1->x - w_half1;
   17e1a:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   17e1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   17e22:	428b      	cmp	r3, r1
   17e24:	4618      	mov	r0, r3
   17e26:	bfa8      	it	ge
   17e28:	4608      	movge	r0, r1
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
   17e2a:	428b      	cmp	r3, r1
   17e2c:	bfb8      	it	lt
   17e2e:	460b      	movlt	r3, r1
   17e30:	3b01      	subs	r3, #1
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   17e32:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
   17e36:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
   17e3a:	b142      	cbz	r2, 17e4e <lv_draw_line+0x3b6>
                       dsc->blend_mode);
   17e3c:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(clip, &draw_area,
   17e40:	f003 0303 	and.w	r3, r3, #3
   17e44:	e9cd 4301 	strd	r4, r3, [sp, #4]
   17e48:	e6bc      	b.n	17bc4 <lv_draw_line+0x12c>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   17e4a:	2200      	movs	r2, #0
   17e4c:	e7da      	b.n	17e04 <lv_draw_line+0x36c>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
   17e4e:	aa28      	add	r2, sp, #160	; 0xa0
   17e50:	a90c      	add	r1, sp, #48	; 0x30
   17e52:	4610      	mov	r0, r2
   17e54:	f00d f9ef 	bl	25236 <_lv_area_intersect>
        if(!is_common) return;
   17e58:	2800      	cmp	r0, #0
   17e5a:	f43f aebc 	beq.w	17bd6 <lv_draw_line+0x13e>
        draw_area.x1 -= vdb->area.x1;
   17e5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
   17e62:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
   17e66:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
        fill_area.x1 = draw_area.x1 + disp_area->x1;
   17e6a:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        draw_area.x1 -= vdb->area.x1;
   17e6e:	1ac2      	subs	r2, r0, r3
   17e70:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
   17e74:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
        fill_area.y1 = draw_area.y1 + disp_area->y1;
   17e78:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        draw_area.y1 -= vdb->area.y1;
   17e7c:	1b11      	subs	r1, r2, r4
   17e7e:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= vdb->area.x1;
   17e82:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
        fill_area.x2 = draw_area.x2 + disp_area->x1;
   17e86:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        draw_area.x2 -= vdb->area.x1;
   17e8a:	1acb      	subs	r3, r1, r3
   17e8c:	f101 0801 	add.w	r8, r1, #1
   17e90:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
   17e94:	eba8 0800 	sub.w	r8, r8, r0
        draw_area.y2 -= vdb->area.y1;
   17e98:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
        fill_area.y2 = fill_area.y1;
   17e9c:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
   17ea0:	fa0f f888 	sxth.w	r8, r8
        draw_area.y2 -= vdb->area.y1;
   17ea4:	1b1b      	subs	r3, r3, r4
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   17ea6:	4640      	mov	r0, r8
        draw_area.y2 -= vdb->area.y1;
   17ea8:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   17eac:	f000 fefe 	bl	18cac <_lv_mem_buf_get>
   17eb0:	f9bd 60a2 	ldrsh.w	r6, [sp, #162]	; 0xa2
   17eb4:	4681      	mov	r9, r0
        if(dashed) {
   17eb6:	b1a5      	cbz	r5, 17ee2 <lv_draw_line+0x44a>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
   17eb8:	f9bb 4004 	ldrsh.w	r4, [fp, #4]
   17ebc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
   17ec0:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
   17ec4:	4432      	add	r2, r6
   17ec6:	4423      	add	r3, r4
   17ec8:	fb92 f4f3 	sdiv	r4, r2, r3
   17ecc:	fb03 2414 	mls	r4, r3, r4, r2
   17ed0:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
   17ed2:	f04f 0a00 	mov.w	sl, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   17ed6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
   17eda:	429e      	cmp	r6, r3
   17edc:	dd03      	ble.n	17ee6 <lv_draw_line+0x44e>
        _lv_mem_buf_release(mask_buf);
   17ede:	4648      	mov	r0, r9
   17ee0:	e71a      	b.n	17d18 <lv_draw_line+0x280>
        lv_style_int_t dash_start = 0;
   17ee2:	462c      	mov	r4, r5
   17ee4:	e7f5      	b.n	17ed2 <lv_draw_line+0x43a>
            _lv_memset_ff(mask_buf, draw_area_w);
   17ee6:	4641      	mov	r1, r8
   17ee8:	4648      	mov	r0, r9
   17eea:	f00b fe39 	bl	23b60 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   17eee:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
   17ef2:	8a7a      	ldrh	r2, [r7, #18]
   17ef4:	8a39      	ldrh	r1, [r7, #16]
   17ef6:	4432      	add	r2, r6
   17ef8:	4419      	add	r1, r3
   17efa:	b212      	sxth	r2, r2
   17efc:	4643      	mov	r3, r8
   17efe:	b209      	sxth	r1, r1
   17f00:	4648      	mov	r0, r9
   17f02:	f000 f9db 	bl	182bc <lv_draw_mask_apply>
            if(dashed) {
   17f06:	b16d      	cbz	r5, 17f24 <lv_draw_line+0x48c>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
   17f08:	b150      	cbz	r0, 17f20 <lv_draw_line+0x488>
                    if(dash_cnt > dsc->dash_width) {
   17f0a:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
   17f0e:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
   17f12:	4413      	add	r3, r2
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
   17f14:	42a2      	cmp	r2, r4
   17f16:	bfb8      	it	lt
   17f18:	2000      	movlt	r0, #0
                        dash_cnt = 0;
   17f1a:	429c      	cmp	r4, r3
   17f1c:	bfa8      	it	ge
   17f1e:	2400      	movge	r4, #0
                dash_cnt ++;
   17f20:	3401      	adds	r4, #1
   17f22:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
   17f24:	f89b 3008 	ldrb.w	r3, [fp, #8]
   17f28:	f89b 2000 	ldrb.w	r2, [fp]
   17f2c:	f8cd a008 	str.w	sl, [sp, #8]
   17f30:	e9cd 0300 	strd	r0, r3, [sp]
   17f34:	a933      	add	r1, sp, #204	; 0xcc
   17f36:	464b      	mov	r3, r9
   17f38:	a80c      	add	r0, sp, #48	; 0x30
   17f3a:	f00a ff6b 	bl	22e14 <_lv_blend_fill>
            fill_area.y1++;
   17f3e:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
   17f42:	3301      	adds	r3, #1
   17f44:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
   17f48:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
   17f4c:	3301      	adds	r3, #1
   17f4e:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   17f52:	3601      	adds	r6, #1
   17f54:	e7bf      	b.n	17ed6 <lv_draw_line+0x43e>
                                                 const lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
   17f56:	45c1      	cmp	r9, r8
   17f58:	db05      	blt.n	17f66 <lv_draw_line+0x4ce>
   17f5a:	464b      	mov	r3, r9
   17f5c:	46c1      	mov	r9, r8
   17f5e:	4698      	mov	r8, r3
   17f60:	463b      	mov	r3, r7
   17f62:	4637      	mov	r7, r6
   17f64:	461e      	mov	r6, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
   17f66:	1bf3      	subs	r3, r6, r7
    int32_t ydiff = p2.y - p1.y;
   17f68:	eba8 0a09 	sub.w	sl, r8, r9
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
   17f6c:	2b00      	cmp	r3, #0
    int32_t xdiff = p2.x - p1.x;
   17f6e:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
   17f70:	bfb8      	it	lt
   17f72:	425b      	neglt	r3, r3
   17f74:	f1ba 0f00 	cmp.w	sl, #0
   17f78:	bfb8      	it	lt
   17f7a:	f1ca 0a00 	rsblt	sl, sl, #0
        181,
    };

    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
   17f7e:	4553      	cmp	r3, sl
   17f80:	bfcc      	ite	gt
   17f82:	ea4f 124a 	movgt.w	r2, sl, lsl #5
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
   17f86:	015a      	lslle	r2, r3, #5

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   17f88:	49c0      	ldr	r1, [pc, #768]	; (1828c <lv_draw_line+0x7f4>)
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
   17f8a:	bfcc      	ite	gt
   17f8c:	fbb2 f2f3 	udivgt	r2, r2, r3
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
   17f90:	fbb2 f2fa 	udivle	r2, r2, sl
    int32_t w = dsc->width;
   17f94:	f9bb 4002 	ldrsh.w	r4, [fp, #2]
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   17f98:	5c89      	ldrb	r1, [r1, r2]
   17f9a:	9307      	str	r3, [sp, #28]
   17f9c:	223f      	movs	r2, #63	; 0x3f
   17f9e:	fb14 2401 	smlabb	r4, r4, r1, r2
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
   17fa2:	f344 12cf 	sbfx	r2, r4, #7, #16
   17fa6:	42be      	cmp	r6, r7
   17fa8:	bfd4      	ite	le
   17faa:	ebc2 0106 	rsble	r1, r2, r6
   17fae:	ebc2 0107 	rsbgt	r1, r2, r7
   17fb2:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
   17fb6:	42be      	cmp	r6, r7
   17fb8:	bfac      	ite	ge
   17fba:	1991      	addge	r1, r2, r6
   17fbc:	19d1      	addlt	r1, r2, r7
   17fbe:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
   17fc2:	45c8      	cmp	r8, r9
   17fc4:	bfd4      	ite	le
   17fc6:	ebc2 0108 	rsble	r1, r2, r8
   17fca:	ebc2 0109 	rsbgt	r1, r2, r9
   17fce:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
   17fd2:	45c8      	cmp	r8, r9
   17fd4:	bfac      	ite	ge
   17fd6:	4442      	addge	r2, r8
   17fd8:	444a      	addlt	r2, r9

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   17fda:	a90e      	add	r1, sp, #56	; 0x38
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
   17fdc:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   17fe0:	4608      	mov	r0, r1
   17fe2:	aa0c      	add	r2, sp, #48	; 0x30
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   17fe4:	11e5      	asrs	r5, r4, #7
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   17fe6:	f00d f926 	bl	25236 <_lv_area_intersect>
    if(is_common == false) return;
   17fea:	2800      	cmp	r0, #0
   17fec:	f43f adf3 	beq.w	17bd6 <lv_draw_line+0x13e>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
   17ff0:	9b07      	ldr	r3, [sp, #28]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   17ff2:	f005 0501 	and.w	r5, r5, #1
   17ff6:	eb05 2524 	add.w	r5, r5, r4, asr #8
    if(flat) {
   17ffa:	4553      	cmp	r3, sl
   17ffc:	b22d      	sxth	r5, r5
   17ffe:	f344 240f 	sbfx	r4, r4, #8, #16
   18002:	f340 80ed 	ble.w	181e0 <lv_draw_line+0x748>
        if(xdiff > 0) {
   18006:	eb09 0305 	add.w	r3, r9, r5
   1800a:	b21b      	sxth	r3, r3
   1800c:	9307      	str	r3, [sp, #28]
   1800e:	1bf3      	subs	r3, r6, r7
   18010:	eba9 0a04 	sub.w	sl, r9, r4
   18014:	4445      	add	r5, r8
   18016:	eba8 0404 	sub.w	r4, r8, r4
   1801a:	2b00      	cmp	r3, #0
   1801c:	f04f 0300 	mov.w	r3, #0
   18020:	b22d      	sxth	r5, r5
   18022:	fa0f fa8a 	sxth.w	sl, sl
   18026:	b224      	sxth	r4, r4
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   18028:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
   1802a:	f340 80cc 	ble.w	181c6 <lv_draw_line+0x72e>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   1802e:	4633      	mov	r3, r6
   18030:	4652      	mov	r2, sl
   18032:	9400      	str	r4, [sp, #0]
   18034:	4639      	mov	r1, r7
   18036:	a812      	add	r0, sp, #72	; 0x48
   18038:	f000 f998 	bl	1836c <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
   1803c:	2301      	movs	r3, #1
   1803e:	9a07      	ldr	r2, [sp, #28]
   18040:	e9cd 5300 	strd	r5, r3, [sp]
   18044:	4633      	mov	r3, r6
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   18046:	4639      	mov	r1, r7
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
   18048:	a81d      	add	r0, sp, #116	; 0x74
   1804a:	f000 f98f 	bl	1836c <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
   1804e:	2100      	movs	r1, #0
   18050:	a812      	add	r0, sp, #72	; 0x48
   18052:	f000 f91d 	bl	18290 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   18056:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
   18058:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   1805a:	a81d      	add	r0, sp, #116	; 0x74
   1805c:	f000 f918 	bl	18290 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
   18060:	f89b 4009 	ldrb.w	r4, [fp, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   18064:	900a      	str	r0, [sp, #40]	; 0x28
    if(!dsc->raw_end) {
   18066:	f014 0410 	ands.w	r4, r4, #16
   1806a:	f040 80cd 	bne.w	18208 <lv_draw_line+0x770>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
   1806e:	1bf2      	subs	r2, r6, r7
   18070:	eba9 0308 	sub.w	r3, r9, r8
   18074:	b215      	sxth	r5, r2
   18076:	fa09 f282 	sxtah	r2, r9, r2
   1807a:	fa0f fa83 	sxth.w	sl, r3
   1807e:	2103      	movs	r1, #3
   18080:	b212      	sxth	r2, r2
   18082:	fa07 f383 	sxtah	r3, r7, r3
   18086:	9101      	str	r1, [sp, #4]
   18088:	9200      	str	r2, [sp, #0]
   1808a:	b21b      	sxth	r3, r3
   1808c:	464a      	mov	r2, r9
   1808e:	4639      	mov	r1, r7
   18090:	a828      	add	r0, sp, #160	; 0xa0
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
   18092:	4445      	add	r5, r8
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
   18094:	f000 f96a 	bl	1836c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
   18098:	b22d      	sxth	r5, r5
   1809a:	2202      	movs	r2, #2
   1809c:	eb06 030a 	add.w	r3, r6, sl
   180a0:	b21b      	sxth	r3, r3
   180a2:	9201      	str	r2, [sp, #4]
   180a4:	4631      	mov	r1, r6
   180a6:	4642      	mov	r2, r8
   180a8:	a833      	add	r0, sp, #204	; 0xcc
   180aa:	9500      	str	r5, [sp, #0]
   180ac:	f000 f95e 	bl	1836c <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
   180b0:	4621      	mov	r1, r4
   180b2:	a828      	add	r0, sp, #160	; 0xa0
   180b4:	f000 f8ec 	bl	18290 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
   180b8:	4621      	mov	r1, r4
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
   180ba:	9008      	str	r0, [sp, #32]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
   180bc:	a833      	add	r0, sp, #204	; 0xcc
   180be:	f000 f8e7 	bl	18290 <lv_draw_mask_add>
   180c2:	4680      	mov	r8, r0
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   180c4:	f7fe fd98 	bl	16bf8 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   180c8:	f00d f84a 	bl	25160 <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
   180cc:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
   180d0:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   180d4:	1a8b      	subs	r3, r1, r2
   180d6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   180da:	4604      	mov	r4, r0
    draw_area.y1 -= disp_area->y1;
   180dc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   180e0:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
   180e4:	1a1b      	subs	r3, r3, r0
   180e6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
   180ea:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
   180ee:	1a9a      	subs	r2, r3, r2
   180f0:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
   180f4:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
   180f8:	f103 0901 	add.w	r9, r3, #1
   180fc:	1a12      	subs	r2, r2, r0
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   180fe:	a80e      	add	r0, sp, #56	; 0x38
   18100:	eba9 0901 	sub.w	r9, r9, r1
    draw_area.y2 -= disp_area->y1;
   18104:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   18108:	f00d f887 	bl	2521a <lv_area_get_size>
   1810c:	287f      	cmp	r0, #127	; 0x7f
   1810e:	fa0f f989 	sxth.w	r9, r9
   18112:	d87e      	bhi.n	18212 <lv_draw_line+0x77a>
   18114:	a80e      	add	r0, sp, #56	; 0x38
   18116:	f00d f880 	bl	2521a <lv_area_get_size>
   1811a:	4606      	mov	r6, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1811c:	4630      	mov	r0, r6
   1811e:	f000 fdc5 	bl	18cac <_lv_mem_buf_get>

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
   18122:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
   18126:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1812a:	441a      	add	r2, r3
   1812c:	b212      	sxth	r2, r2
   1812e:	9207      	str	r2, [sp, #28]
   18130:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = draw_area.x2 + disp_area->x1;
   18134:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
   18138:	4413      	add	r3, r2
   1813a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = draw_area.y1 + disp_area->y1;
   1813e:	8a62      	ldrh	r2, [r4, #18]
   18140:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   18144:	4413      	add	r3, r2
   18146:	b21b      	sxth	r3, r3

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
   18148:	4631      	mov	r1, r6
    fill_area.y1 = draw_area.y1 + disp_area->y1;
   1814a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
   1814e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   18152:	4605      	mov	r5, r0
    _lv_memset_ff(mask_buf, mask_buf_size);
   18154:	f00b fd04 	bl	23b60 <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
   18158:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
   1815c:	f9b4 a012 	ldrsh.w	sl, [r4, #18]
    uint32_t mask_p = 0;
   18160:	2700      	movs	r7, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
   18162:	449a      	add	sl, r3
   18164:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
   18168:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   1816c:	4413      	add	r3, r2
   1816e:	459a      	cmp	sl, r3
   18170:	dd51      	ble.n	18216 <lv_draw_line+0x77e>
            _lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
   18172:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
   18176:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
   1817a:	429a      	cmp	r2, r3
   1817c:	d013      	beq.n	181a6 <lv_draw_line+0x70e>
        fill_area.y2--;
   1817e:	3b01      	subs	r3, #1
   18180:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
   18184:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(&fill_area, clip,
   18188:	f89b 2000 	ldrb.w	r2, [fp]
   1818c:	f003 0303 	and.w	r3, r3, #3
   18190:	9302      	str	r3, [sp, #8]
   18192:	f89b 3008 	ldrb.w	r3, [fp, #8]
   18196:	9301      	str	r3, [sp, #4]
   18198:	2302      	movs	r3, #2
   1819a:	9300      	str	r3, [sp, #0]
   1819c:	a90c      	add	r1, sp, #48	; 0x30
   1819e:	462b      	mov	r3, r5
   181a0:	a810      	add	r0, sp, #64	; 0x40
   181a2:	f00a fe37 	bl	22e14 <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
   181a6:	4628      	mov	r0, r5
   181a8:	f000 fde2 	bl	18d70 <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
   181ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   181ae:	f000 f8a7 	bl	18300 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
   181b2:	980a      	ldr	r0, [sp, #40]	; 0x28
   181b4:	f000 f8a4 	bl	18300 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
   181b8:	9808      	ldr	r0, [sp, #32]
   181ba:	f000 f8a1 	bl	18300 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
   181be:	4640      	mov	r0, r8
   181c0:	f000 f89e 	bl	18300 <lv_draw_mask_remove_id>
   181c4:	e507      	b.n	17bd6 <lv_draw_line+0x13e>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
   181c6:	9a07      	ldr	r2, [sp, #28]
   181c8:	9500      	str	r5, [sp, #0]
   181ca:	4633      	mov	r3, r6
   181cc:	4639      	mov	r1, r7
   181ce:	a812      	add	r0, sp, #72	; 0x48
   181d0:	f000 f8cc 	bl	1836c <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   181d4:	2301      	movs	r3, #1
   181d6:	e9cd 4300 	strd	r4, r3, [sp]
   181da:	4652      	mov	r2, sl
   181dc:	4633      	mov	r3, r6
   181de:	e732      	b.n	18046 <lv_draw_line+0x5ae>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
   181e0:	1973      	adds	r3, r6, r5
   181e2:	2200      	movs	r2, #0
   181e4:	443d      	add	r5, r7
   181e6:	e9cd 8200 	strd	r8, r2, [sp]
   181ea:	b21b      	sxth	r3, r3
   181ec:	464a      	mov	r2, r9
   181ee:	b229      	sxth	r1, r5
   181f0:	a812      	add	r0, sp, #72	; 0x48
   181f2:	f000 f8bb 	bl	1836c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
   181f6:	2201      	movs	r2, #1
   181f8:	1b33      	subs	r3, r6, r4
   181fa:	1b39      	subs	r1, r7, r4
   181fc:	e9cd 8200 	strd	r8, r2, [sp]
   18200:	b21b      	sxth	r3, r3
   18202:	464a      	mov	r2, r9
   18204:	b209      	sxth	r1, r1
   18206:	e71f      	b.n	18048 <lv_draw_line+0x5b0>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
   18208:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    int16_t mask_top_id = LV_MASK_ID_INV;
   1820c:	f8cd 8020 	str.w	r8, [sp, #32]
   18210:	e758      	b.n	180c4 <lv_draw_line+0x62c>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   18212:	2680      	movs	r6, #128	; 0x80
   18214:	e782      	b.n	1811c <lv_draw_line+0x684>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
   18216:	19eb      	adds	r3, r5, r7
   18218:	930b      	str	r3, [sp, #44]	; 0x2c
   1821a:	9907      	ldr	r1, [sp, #28]
   1821c:	464b      	mov	r3, r9
   1821e:	fa0f f28a 	sxth.w	r2, sl
   18222:	19e8      	adds	r0, r5, r7
   18224:	f000 f84a 	bl	182bc <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
   18228:	b918      	cbnz	r0, 18232 <lv_draw_line+0x79a>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
   1822a:	4649      	mov	r1, r9
   1822c:	19e8      	adds	r0, r5, r7
   1822e:	f00b fc93 	bl	23b58 <_lv_memset_00>
        mask_p += draw_area_w;
   18232:	444f      	add	r7, r9
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
   18234:	eb07 0309 	add.w	r3, r7, r9
   18238:	429e      	cmp	r6, r3
   1823a:	d907      	bls.n	1824c <lv_draw_line+0x7b4>
            fill_area.y2 ++;
   1823c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   18240:	3301      	adds	r3, #1
   18242:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
   18246:	f10a 0a01 	add.w	sl, sl, #1
   1824a:	e78b      	b.n	18164 <lv_draw_line+0x6cc>
                           dsc->blend_mode);
   1824c:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(&fill_area, clip,
   18250:	f89b 2000 	ldrb.w	r2, [fp]
   18254:	f003 0303 	and.w	r3, r3, #3
   18258:	9302      	str	r3, [sp, #8]
   1825a:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1825e:	9301      	str	r3, [sp, #4]
   18260:	2302      	movs	r3, #2
   18262:	9300      	str	r3, [sp, #0]
   18264:	a90c      	add	r1, sp, #48	; 0x30
   18266:	462b      	mov	r3, r5
   18268:	a810      	add	r0, sp, #64	; 0x40
   1826a:	f00a fdd3 	bl	22e14 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
   1826e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   18272:	3301      	adds	r3, #1
   18274:	b21b      	sxth	r3, r3
            _lv_memset_ff(mask_buf, mask_buf_size);
   18276:	4631      	mov	r1, r6
   18278:	4628      	mov	r0, r5
            fill_area.y1 = fill_area.y2 + 1;
   1827a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
   1827e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
   18282:	2700      	movs	r7, #0
            _lv_memset_ff(mask_buf, mask_buf_size);
   18284:	f00b fc6c 	bl	23b60 <_lv_memset_ff>
   18288:	e7dd      	b.n	18246 <lv_draw_line+0x7ae>
   1828a:	bf00      	nop
   1828c:	00028bff 	.word	0x00028bff

00018290 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
   18290:	b570      	push	{r4, r5, r6, lr}
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
   18292:	4c09      	ldr	r4, [pc, #36]	; (182b8 <lv_draw_mask_add+0x28>)
{
   18294:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
   18296:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
   1829a:	b2da      	uxtb	r2, r3
   1829c:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
   182a0:	b12e      	cbz	r6, 182ae <lv_draw_mask_add+0x1e>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   182a2:	3301      	adds	r3, #1
   182a4:	2b10      	cmp	r3, #16
   182a6:	d1f6      	bne.n	18296 <lv_draw_mask_add+0x6>
    }

    if(i >= _LV_MASK_MAX_NUM) {
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
   182a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;

    return i;
}
   182ac:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
   182ae:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
   182b2:	6069      	str	r1, [r5, #4]
    return i;
   182b4:	b210      	sxth	r0, r2
   182b6:	e7f9      	b.n	182ac <lv_draw_mask_add+0x1c>
   182b8:	20002d08 	.word	0x20002d08

000182bc <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
   182bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    bool changed = false;
    lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
   182c0:	4e0e      	ldr	r6, [pc, #56]	; (182fc <lv_draw_mask_apply+0x40>)
{
   182c2:	4607      	mov	r7, r0
   182c4:	4688      	mov	r8, r1
   182c6:	4691      	mov	r9, r2
   182c8:	469a      	mov	sl, r3
    bool changed = false;
   182ca:	2500      	movs	r5, #0

    while(m->param) {
   182cc:	6834      	ldr	r4, [r6, #0]
   182ce:	b934      	cbnz	r4, 182de <lv_draw_mask_apply+0x22>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;

        m++;
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
   182d0:	2d00      	cmp	r5, #0
   182d2:	bf14      	ite	ne
   182d4:	2002      	movne	r0, #2
   182d6:	2001      	moveq	r0, #1
}
   182d8:	b002      	add	sp, #8
   182da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
   182de:	9400      	str	r4, [sp, #0]
   182e0:	6824      	ldr	r4, [r4, #0]
   182e2:	4653      	mov	r3, sl
   182e4:	464a      	mov	r2, r9
   182e6:	4641      	mov	r1, r8
   182e8:	4638      	mov	r0, r7
   182ea:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
   182ec:	2800      	cmp	r0, #0
   182ee:	d0f3      	beq.n	182d8 <lv_draw_mask_apply+0x1c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
   182f0:	2802      	cmp	r0, #2
   182f2:	bf08      	it	eq
   182f4:	2501      	moveq	r5, #1
        m++;
   182f6:	3608      	adds	r6, #8
   182f8:	e7e8      	b.n	182cc <lv_draw_mask_apply+0x10>
   182fa:	bf00      	nop
   182fc:	20002d08 	.word	0x20002d08

00018300 <lv_draw_mask_remove_id>:
 */
void * lv_draw_mask_remove_id(int16_t id)
{
    void * p = NULL;

    if(id != LV_MASK_ID_INV) {
   18300:	1c42      	adds	r2, r0, #1
{
   18302:	4603      	mov	r3, r0
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
   18304:	bf18      	it	ne
   18306:	4a07      	ldrne	r2, [pc, #28]	; (18324 <lv_draw_mask_remove_id+0x24>)
   18308:	f04f 0100 	mov.w	r1, #0
   1830c:	bf1d      	ittte	ne
   1830e:	f852 0030 	ldrne.w	r0, [r2, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
   18312:	f842 1033 	strne.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
   18316:	eb02 03c3 	addne.w	r3, r2, r3, lsl #3
    void * p = NULL;
   1831a:	4608      	moveq	r0, r1
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
   1831c:	bf18      	it	ne
   1831e:	6059      	strne	r1, [r3, #4]
    }

    return p;
}
   18320:	4770      	bx	lr
   18322:	bf00      	nop
   18324:	20002d08 	.word	0x20002d08

00018328 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
   18328:	2200      	movs	r2, #0
   1832a:	4b08      	ldr	r3, [pc, #32]	; (1834c <lv_draw_mask_remove_custom+0x24>)
   1832c:	b530      	push	{r4, r5, lr}
   1832e:	4601      	mov	r1, r0
    void * p = NULL;
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
   18330:	4614      	mov	r4, r2
    void * p = NULL;
   18332:	4610      	mov	r0, r2
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
   18334:	685d      	ldr	r5, [r3, #4]
   18336:	3201      	adds	r2, #1
   18338:	428d      	cmp	r5, r1
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
   1833a:	bf04      	itt	eq
   1833c:	6818      	ldreq	r0, [r3, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
   1833e:	e9c3 4400 	strdeq	r4, r4, [r3]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   18342:	2a10      	cmp	r2, #16
   18344:	f103 0308 	add.w	r3, r3, #8
   18348:	d1f4      	bne.n	18334 <lv_draw_mask_remove_custom+0xc>
        }
    }
    return p;
}
   1834a:	bd30      	pop	{r4, r5, pc}
   1834c:	20002d08 	.word	0x20002d08

00018350 <lv_draw_mask_get_cnt>:
/**
 * Count the currently added masks
 * @return number of active masks
 */
LV_ATTRIBUTE_FAST_MEM uint8_t lv_draw_mask_get_cnt(void)
{
   18350:	2300      	movs	r3, #0
    uint8_t cnt = 0;
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
   18352:	4a05      	ldr	r2, [pc, #20]	; (18368 <lv_draw_mask_get_cnt+0x18>)
    uint8_t cnt = 0;
   18354:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
   18356:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   1835a:	b109      	cbz	r1, 18360 <lv_draw_mask_get_cnt+0x10>
   1835c:	3001      	adds	r0, #1
   1835e:	b2c0      	uxtb	r0, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   18360:	3301      	adds	r3, #1
   18362:	2b10      	cmp	r3, #16
   18364:	d1f7      	bne.n	18356 <lv_draw_mask_get_cnt+0x6>
    }
    return cnt;
}
   18366:	4770      	bx	lr
   18368:	20002d08 	.word	0x20002d08

0001836c <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
   1836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18370:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
   18374:	4615      	mov	r5, r2
   18376:	460e      	mov	r6, r1
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
   18378:	212c      	movs	r1, #44	; 0x2c
{
   1837a:	4604      	mov	r4, r0
   1837c:	461f      	mov	r7, r3
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
   1837e:	f00b fc0d 	bl	23b9c <_lv_memset_00>

    if(p1y > p2y) {
   18382:	4545      	cmp	r5, r8
   18384:	dd05      	ble.n	18392 <lv_draw_mask_line_points_init+0x26>
   18386:	462b      	mov	r3, r5
   18388:	4645      	mov	r5, r8
   1838a:	4698      	mov	r8, r3
   1838c:	4633      	mov	r3, r6
        lv_coord_t t;
        t = p2x;
        p2x = p1x;
        p1x = t;
   1838e:	463e      	mov	r6, r7
        p2x = p1x;
   18390:	461f      	mov	r7, r3

    param->cfg.p1.x = p1x;
    param->cfg.p1.y = p1y;
    param->cfg.p2.x = p2x;
    param->cfg.p2.y = p2y;
    param->cfg.side = side;
   18392:	7c23      	ldrb	r3, [r4, #16]
   18394:	f89d 201c 	ldrb.w	r2, [sp, #28]
    param->cfg.p1.y = p1y;
   18398:	8165      	strh	r5, [r4, #10]
    param->cfg.side = side;
   1839a:	f362 0301 	bfi	r3, r2, #0, #2
   1839e:	7423      	strb	r3, [r4, #16]

    param->origo.x = p1x;
    param->origo.y = p1y;
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   183a0:	eba8 0205 	sub.w	r2, r8, r5
   183a4:	1bbb      	subs	r3, r7, r6
   183a6:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
   183aa:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   183ae:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
   183b2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
   183b6:	4288      	cmp	r0, r1
   183b8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    param->origo.y = p1y;
   183bc:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   183be:	bfd4      	ite	le
   183c0:	2000      	movle	r0, #0
   183c2:	2001      	movgt	r0, #1
   183c4:	f360 0100 	bfi	r1, r0, #0, #1
    param->yx_steep = 0;
    param->xy_steep = 0;
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
   183c8:	4d29      	ldr	r5, [pc, #164]	; (18470 <lv_draw_mask_line_points_init+0x104>)
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   183ca:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    param->yx_steep = 0;
   183ce:	2000      	movs	r0, #0
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;

    int32_t dx = p2x - p1x;
    int32_t dy = p2y - p1y;

    if(param->flat) {
   183d0:	07c9      	lsls	r1, r1, #31
    param->xy_steep = 0;
   183d2:	e9c4 0006 	strd	r0, r0, [r4, #24]
    param->cfg.p1.x = p1x;
   183d6:	8126      	strh	r6, [r4, #8]
    param->cfg.p2.x = p2x;
   183d8:	81a7      	strh	r7, [r4, #12]
    param->cfg.p2.y = p2y;
   183da:	f8a4 800e 	strh.w	r8, [r4, #14]
    param->origo.x = p1x;
   183de:	8266      	strh	r6, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
   183e0:	6025      	str	r5, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
   183e2:	7120      	strb	r0, [r4, #4]
    if(param->flat) {
   183e4:	d524      	bpl.n	18430 <lv_draw_mask_line_points_init+0xc4>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
   183e6:	b133      	cbz	r3, 183f6 <lv_draw_mask_line_points_init+0x8a>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
   183e8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   183ec:	fb91 f1f3 	sdiv	r1, r1, r3
            param->yx_steep = (m * dy) >> 10;
   183f0:	4351      	muls	r1, r2
   183f2:	1289      	asrs	r1, r1, #10
   183f4:	61e1      	str	r1, [r4, #28]
        }

        if(dy) {
   183f6:	b132      	cbz	r2, 18406 <lv_draw_mask_line_points_init+0x9a>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
   183f8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   183fc:	fb91 f2f2 	sdiv	r2, r1, r2
            param->xy_steep = (m * dx) >> 10;
   18400:	4353      	muls	r3, r2
   18402:	129b      	asrs	r3, r3, #10
   18404:	61a3      	str	r3, [r4, #24]
        }
        param->steep = param->yx_steep;
   18406:	69e3      	ldr	r3, [r4, #28]
            param->yx_steep = (m * dy) >> 10;
        }
        param->steep = param->xy_steep;
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
   18408:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
   1840a:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
   1840c:	f012 0203 	ands.w	r2, r2, #3
   18410:	6a21      	ldr	r1, [r4, #32]
   18412:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   18416:	d11d      	bne.n	18454 <lv_draw_mask_line_points_init+0xe8>
   18418:	f36f 0341 	bfc	r3, #1, #1
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
   1841c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if(param->steep > 0) param->inv = 0;
        else param->inv = 1;
    }

    param->spx = param->steep >> 2;
    if(param->steep < 0) param->spx = -param->spx;
   18420:	2900      	cmp	r1, #0
    param->spx = param->steep >> 2;
   18422:	ea4f 03a1 	mov.w	r3, r1, asr #2
    if(param->steep < 0) param->spx = -param->spx;
   18426:	bfb8      	it	lt
   18428:	425b      	neglt	r3, r3
   1842a:	6263      	str	r3, [r4, #36]	; 0x24
}
   1842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
   18430:	b132      	cbz	r2, 18440 <lv_draw_mask_line_points_init+0xd4>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
   18432:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   18436:	fb91 f1f2 	sdiv	r1, r1, r2
            param->xy_steep = (m * dx) >> 10;
   1843a:	4359      	muls	r1, r3
   1843c:	1289      	asrs	r1, r1, #10
   1843e:	61a1      	str	r1, [r4, #24]
        if(dx) {
   18440:	b133      	cbz	r3, 18450 <lv_draw_mask_line_points_init+0xe4>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
   18442:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   18446:	fb91 f3f3 	sdiv	r3, r1, r3
            param->yx_steep = (m * dy) >> 10;
   1844a:	435a      	muls	r2, r3
   1844c:	1292      	asrs	r2, r2, #10
   1844e:	61e2      	str	r2, [r4, #28]
        param->steep = param->xy_steep;
   18450:	69a3      	ldr	r3, [r4, #24]
   18452:	e7d9      	b.n	18408 <lv_draw_mask_line_points_init+0x9c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
   18454:	2a01      	cmp	r2, #1
   18456:	d102      	bne.n	1845e <lv_draw_mask_line_points_init+0xf2>
   18458:	f043 0302 	orr.w	r3, r3, #2
   1845c:	e7de      	b.n	1841c <lv_draw_mask_line_points_init+0xb0>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
   1845e:	2a02      	cmp	r2, #2
   18460:	d102      	bne.n	18468 <lv_draw_mask_line_points_init+0xfc>
        if(param->steep > 0) param->inv = 1;
   18462:	2900      	cmp	r1, #0
   18464:	dcf8      	bgt.n	18458 <lv_draw_mask_line_points_init+0xec>
   18466:	e7d7      	b.n	18418 <lv_draw_mask_line_points_init+0xac>
        if(param->steep > 0) param->inv = 0;
   18468:	2900      	cmp	r1, #0
   1846a:	dcd5      	bgt.n	18418 <lv_draw_mask_line_points_init+0xac>
   1846c:	e7f4      	b.n	18458 <lv_draw_mask_line_points_init+0xec>
   1846e:	bf00      	nop
   18470:	00023ba5 	.word	0x00023ba5

00018474 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv: true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
   18474:	b570      	push	{r4, r5, r6, lr}
   18476:	4604      	mov	r4, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   18478:	88c8      	ldrh	r0, [r1, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1847a:	888d      	ldrh	r5, [r1, #4]
   1847c:	4616      	mov	r6, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1847e:	884a      	ldrh	r2, [r1, #2]
   18480:	3001      	adds	r0, #1
   18482:	1a80      	subs	r0, r0, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   18484:	880a      	ldrh	r2, [r1, #0]
   18486:	3501      	adds	r5, #1
   18488:	1aad      	subs	r5, r5, r2
    lv_coord_t w = lv_area_get_width(rect);
    lv_coord_t h = lv_area_get_height(rect);
    int32_t short_side = LV_MATH_MIN(w, h);
   1848a:	b200      	sxth	r0, r0
   1848c:	b22d      	sxth	r5, r5
   1848e:	42a8      	cmp	r0, r5
   18490:	bfa8      	it	ge
   18492:	4628      	movge	r0, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
   18494:	1042      	asrs	r2, r0, #1
   18496:	ebb6 0f60 	cmp.w	r6, r0, asr #1
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   1849a:	f104 0008 	add.w	r0, r4, #8
   1849e:	bfc8      	it	gt
   184a0:	b216      	sxthgt	r6, r2
   184a2:	f00b fd31 	bl	23f08 <_lv_memcpy_small.constprop.0>

    lv_area_copy(&param->cfg.rect, rect);
    param->cfg.radius = radius;
    param->cfg.outer = inv ? 1 : 0;
   184a6:	7ca2      	ldrb	r2, [r4, #18]
    param->cfg.radius = radius;
   184a8:	8226      	strh	r6, [r4, #16]
    param->cfg.outer = inv ? 1 : 0;
   184aa:	f363 0200 	bfi	r2, r3, #0, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
   184ae:	4b05      	ldr	r3, [pc, #20]	; (184c4 <lv_draw_mask_radius_init+0x50>)
   184b0:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
   184b2:	2302      	movs	r3, #2
    param->cfg.outer = inv ? 1 : 0;
   184b4:	74a2      	strb	r2, [r4, #18]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
   184b6:	7123      	strb	r3, [r4, #4]
    param->y_prev = INT32_MIN;
    param->y_prev_x.f = 0;
    param->y_prev_x.i = 0;
   184b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   184bc:	2300      	movs	r3, #0
   184be:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
   184c2:	bd70      	pop	{r4, r5, r6, pc}
   184c4:	00023f13 	.word	0x00023f13

000184c8 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
   184c8:	b510      	push	{r4, lr}
   184ca:	224c      	movs	r2, #76	; 0x4c
   184cc:	4604      	mov	r4, r0
   184ce:	2100      	movs	r1, #0
   184d0:	f00e fadc 	bl	26a8c <memset>
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
    dsc->bg_color = LV_COLOR_WHITE;
   184d4:	2301      	movs	r3, #1
   184d6:	70a3      	strb	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
    dsc->border_color = LV_COLOR_BLACK;
    dsc->pattern_recolor = LV_COLOR_BLACK;
    dsc->value_color = LV_COLOR_BLACK;
    dsc->shadow_color = LV_COLOR_BLACK;
    dsc->bg_grad_color_stop = 0xFF;
   184d8:	23ff      	movs	r3, #255	; 0xff
    dsc->bg_opa = LV_OPA_COVER;
    dsc->outline_opa = LV_OPA_COVER;
    dsc->border_opa = LV_OPA_COVER;
    dsc->pattern_opa = LV_OPA_COVER;
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
   184da:	4a08      	ldr	r2, [pc, #32]	; (184fc <lv_draw_rect_dsc_init+0x34>)
    dsc->bg_grad_color_stop = 0xFF;
   184dc:	8123      	strh	r3, [r4, #8]
    dsc->bg_opa = LV_OPA_COVER;
   184de:	72a3      	strb	r3, [r4, #10]
    dsc->outline_opa = LV_OPA_COVER;
   184e0:	76a3      	strb	r3, [r4, #26]
    dsc->border_opa = LV_OPA_COVER;
   184e2:	74a3      	strb	r3, [r4, #18]
    dsc->pattern_opa = LV_OPA_COVER;
   184e4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    dsc->value_opa = LV_OPA_COVER;
   184e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
    dsc->shadow_opa = LV_OPA_COVER;
   184ec:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    dsc->border_side = LV_BORDER_SIDE_FULL;
   184f0:	230f      	movs	r3, #15
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
   184f2:	62e2      	str	r2, [r4, #44]	; 0x2c
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
   184f4:	63e2      	str	r2, [r4, #60]	; 0x3c
    dsc->border_side = LV_BORDER_SIDE_FULL;
   184f6:	8223      	strh	r3, [r4, #16]

}
   184f8:	bd10      	pop	{r4, pc}
   184fa:	bf00      	nop
   184fc:	20000974 	.word	0x20000974

00018500 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
   18500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(entry_cnt == 0) {
   18504:	4b45      	ldr	r3, [pc, #276]	; (1861c <_lv_img_cache_open+0x11c>)
   18506:	881c      	ldrh	r4, [r3, #0]
{
   18508:	4605      	mov	r5, r0
   1850a:	460e      	mov	r6, r1
   1850c:	4699      	mov	r9, r3
    if(entry_cnt == 0) {
   1850e:	2c00      	cmp	r4, #0
   18510:	d05b      	beq.n	185ca <_lv_img_cache_open+0xca>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   18512:	4b43      	ldr	r3, [pc, #268]	; (18620 <_lv_img_cache_open+0x120>)

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
   18514:	4843      	ldr	r0, [pc, #268]	; (18624 <_lv_img_cache_open+0x124>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   18516:	681f      	ldr	r7, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
   18518:	2100      	movs	r1, #0
   1851a:	463b      	mov	r3, r7
   1851c:	b28a      	uxth	r2, r1
   1851e:	4294      	cmp	r4, r2
   18520:	d835      	bhi.n	1858e <_lv_img_cache_open+0x8e>
   18522:	f04f 0800 	mov.w	r8, #0

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
   18526:	f04f 0a24 	mov.w	sl, #36	; 0x24
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
   1852a:	fa5f fb86 	uxtb.w	fp, r6
    for(i = 0; i < entry_cnt; i++) {
   1852e:	f8b9 1000 	ldrh.w	r1, [r9]
   18532:	fa1f f388 	uxth.w	r3, r8
   18536:	4299      	cmp	r1, r3
   18538:	d832      	bhi.n	185a0 <_lv_img_cache_open+0xa0>
   1853a:	f107 0224 	add.w	r2, r7, #36	; 0x24
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
        /*Find an entry to reuse. Select the entry with the least life*/
        cached_src = &cache[0];
   1853e:	463c      	mov	r4, r7
        for(i = 1; i < entry_cnt; i++) {
   18540:	2301      	movs	r3, #1
   18542:	4299      	cmp	r1, r3
   18544:	d852      	bhi.n	185ec <_lv_img_cache_open+0xec>
                cached_src = &cache[i];
            }
        }

        /*Close the decoder to reuse if it was opened (has a valid source)*/
        if(cached_src->dec_dsc.src) {
   18546:	6863      	ldr	r3, [r4, #4]
   18548:	b113      	cbz	r3, 18550 <_lv_img_cache_open+0x50>
            lv_img_decoder_close(&cached_src->dec_dsc);
   1854a:	4620      	mov	r0, r4
   1854c:	f00c fde1 	bl	25112 <lv_img_decoder_close>
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
        }

        /*Open the image and measure the time to open*/
        uint32_t t_start;
        t_start                          = lv_tick_get();
   18550:	f00c fe1f 	bl	25192 <lv_tick_get>
        cached_src->dec_dsc.time_to_open = 0;
   18554:	f04f 0800 	mov.w	r8, #0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
   18558:	4629      	mov	r1, r5
        t_start                          = lv_tick_get();
   1855a:	4607      	mov	r7, r0
        cached_src->dec_dsc.time_to_open = 0;
   1855c:	f8c4 8014 	str.w	r8, [r4, #20]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
   18560:	4632      	mov	r2, r6
   18562:	4620      	mov	r0, r4
   18564:	f000 fa3e 	bl	189e4 <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
   18568:	4605      	mov	r5, r0
   1856a:	2800      	cmp	r0, #0
   1856c:	d147      	bne.n	185fe <_lv_img_cache_open+0xfe>
            LV_LOG_WARN("Image draw cannot open the image resource");
            lv_img_decoder_close(&cached_src->dec_dsc);
   1856e:	4620      	mov	r0, r4
   18570:	f00c fdcf 	bl	25112 <lv_img_decoder_close>
            _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
   18574:	4620      	mov	r0, r4
   18576:	2120      	movs	r1, #32
   18578:	f00c fd3f 	bl	24ffa <_lv_memset_00>
            _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
   1857c:	4620      	mov	r0, r4
   1857e:	2124      	movs	r1, #36	; 0x24
   18580:	f00c fd3b 	bl	24ffa <_lv_memset_00>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
   18584:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   18588:	6223      	str	r3, [r4, #32]
            return NULL;
   1858a:	462c      	mov	r4, r5
   1858c:	e01d      	b.n	185ca <_lv_img_cache_open+0xca>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
   1858e:	6a1a      	ldr	r2, [r3, #32]
   18590:	4282      	cmp	r2, r0
            cache[i].life -= LV_IMG_CACHE_AGING;
   18592:	bfa4      	itt	ge
   18594:	f102 32ff 	addge.w	r2, r2, #4294967295	; 0xffffffff
   18598:	621a      	strge	r2, [r3, #32]
    for(i = 0; i < entry_cnt; i++) {
   1859a:	3101      	adds	r1, #1
   1859c:	3324      	adds	r3, #36	; 0x24
   1859e:	e7bd      	b.n	1851c <_lv_img_cache_open+0x1c>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
   185a0:	fa1f f488 	uxth.w	r4, r8
   185a4:	fb0a 7404 	mla	r4, sl, r4, r7
   185a8:	6860      	ldr	r0, [r4, #4]
   185aa:	f00b faaf 	bl	23b0c <lv_img_src_get_type>
        if(src_type == LV_IMG_SRC_VARIABLE) {
   185ae:	b978      	cbnz	r0, 185d0 <_lv_img_cache_open+0xd0>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
   185b0:	6863      	ldr	r3, [r4, #4]
   185b2:	42ab      	cmp	r3, r5
   185b4:	d114      	bne.n	185e0 <_lv_img_cache_open+0xe0>
   185b6:	7a23      	ldrb	r3, [r4, #8]
   185b8:	455b      	cmp	r3, fp
   185ba:	d111      	bne.n	185e0 <_lv_img_cache_open+0xe0>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
   185bc:	6a23      	ldr	r3, [r4, #32]
   185be:	6962      	ldr	r2, [r4, #20]
   185c0:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
   185c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   185c6:	dc0e      	bgt.n	185e6 <_lv_img_cache_open+0xe6>
   185c8:	6223      	str	r3, [r4, #32]

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
   185ca:	4620      	mov	r0, r4
   185cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(src_type == LV_IMG_SRC_FILE) {
   185d0:	2801      	cmp	r0, #1
   185d2:	d105      	bne.n	185e0 <_lv_img_cache_open+0xe0>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
   185d4:	6860      	ldr	r0, [r4, #4]
   185d6:	4629      	mov	r1, r5
   185d8:	f7e7 ff4e 	bl	478 <strcmp>
   185dc:	2800      	cmp	r0, #0
   185de:	d0ed      	beq.n	185bc <_lv_img_cache_open+0xbc>
    for(i = 0; i < entry_cnt; i++) {
   185e0:	f108 0801 	add.w	r8, r8, #1
   185e4:	e7a3      	b.n	1852e <_lv_img_cache_open+0x2e>
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
   185e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   185ea:	e7ed      	b.n	185c8 <_lv_img_cache_open+0xc8>
            if(cache[i].life < cached_src->life) {
   185ec:	6a17      	ldr	r7, [r2, #32]
   185ee:	6a20      	ldr	r0, [r4, #32]
        for(i = 1; i < entry_cnt; i++) {
   185f0:	3301      	adds	r3, #1
            if(cache[i].life < cached_src->life) {
   185f2:	4287      	cmp	r7, r0
   185f4:	bfb8      	it	lt
   185f6:	4614      	movlt	r4, r2
        for(i = 1; i < entry_cnt; i++) {
   185f8:	b29b      	uxth	r3, r3
   185fa:	3224      	adds	r2, #36	; 0x24
   185fc:	e7a1      	b.n	18542 <_lv_img_cache_open+0x42>
        if(cached_src->dec_dsc.time_to_open == 0) {
   185fe:	6963      	ldr	r3, [r4, #20]
        cached_src->life = 0;
   18600:	f8c4 8020 	str.w	r8, [r4, #32]
        if(cached_src->dec_dsc.time_to_open == 0) {
   18604:	2b00      	cmp	r3, #0
   18606:	d1e0      	bne.n	185ca <_lv_img_cache_open+0xca>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
   18608:	4638      	mov	r0, r7
   1860a:	f00c fdcf 	bl	251ac <lv_tick_elaps>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
   1860e:	b108      	cbz	r0, 18614 <_lv_img_cache_open+0x114>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
   18610:	6160      	str	r0, [r4, #20]
   18612:	e7da      	b.n	185ca <_lv_img_cache_open+0xca>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
   18614:	2301      	movs	r3, #1
   18616:	6163      	str	r3, [r4, #20]
   18618:	e7d7      	b.n	185ca <_lv_img_cache_open+0xca>
   1861a:	bf00      	nop
   1861c:	20002f34 	.word	0x20002f34
   18620:	20002d8c 	.word	0x20002d8c
   18624:	80000002 	.word	0x80000002

00018628 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
   18628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   1862c:	4b11      	ldr	r3, [pc, #68]	; (18674 <lv_img_cache_invalidate_src+0x4c>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
   1862e:	4f12      	ldr	r7, [pc, #72]	; (18678 <lv_img_cache_invalidate_src+0x50>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   18630:	f8d3 8000 	ldr.w	r8, [r3]
{
   18634:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
   18636:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
   18638:	f04f 0924 	mov.w	r9, #36	; 0x24
    for(i = 0; i < entry_cnt; i++) {
   1863c:	883a      	ldrh	r2, [r7, #0]
   1863e:	b2ab      	uxth	r3, r5
   18640:	429a      	cmp	r2, r3
   18642:	d801      	bhi.n	18648 <lv_img_cache_invalidate_src+0x20>

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
        }
    }
}
   18644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
   18648:	b2ac      	uxth	r4, r5
   1864a:	fb09 8404 	mla	r4, r9, r4, r8
   1864e:	6863      	ldr	r3, [r4, #4]
   18650:	42b3      	cmp	r3, r6
   18652:	d000      	beq.n	18656 <lv_img_cache_invalidate_src+0x2e>
   18654:	b95e      	cbnz	r6, 1866e <lv_img_cache_invalidate_src+0x46>
            if(cache[i].dec_dsc.src != NULL) {
   18656:	b113      	cbz	r3, 1865e <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
   18658:	4620      	mov	r0, r4
   1865a:	f00c fd5a 	bl	25112 <lv_img_decoder_close>
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
   1865e:	2120      	movs	r1, #32
   18660:	4620      	mov	r0, r4
   18662:	f00c fcca 	bl	24ffa <_lv_memset_00>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
   18666:	2124      	movs	r1, #36	; 0x24
   18668:	4620      	mov	r0, r4
   1866a:	f00c fcc6 	bl	24ffa <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
   1866e:	3501      	adds	r5, #1
   18670:	e7e4      	b.n	1863c <lv_img_cache_invalidate_src+0x14>
   18672:	bf00      	nop
   18674:	20002d8c 	.word	0x20002d8c
   18678:	20002f34 	.word	0x20002f34

0001867c <lv_img_cache_set_size>:
{
   1867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   18680:	4c13      	ldr	r4, [pc, #76]	; (186d0 <lv_img_cache_set_size+0x54>)
   18682:	6823      	ldr	r3, [r4, #0]
{
   18684:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   18686:	b12b      	cbz	r3, 18694 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
   18688:	2000      	movs	r0, #0
   1868a:	f7ff ffcd 	bl	18628 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
   1868e:	6820      	ldr	r0, [r4, #0]
   18690:	f000 faee 	bl	18c70 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
   18694:	2724      	movs	r7, #36	; 0x24
   18696:	fb07 f005 	mul.w	r0, r7, r5
   1869a:	f000 fad5 	bl	18c48 <lv_mem_alloc>
   1869e:	4b0d      	ldr	r3, [pc, #52]	; (186d4 <lv_img_cache_set_size+0x58>)
   186a0:	6020      	str	r0, [r4, #0]
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
   186a2:	b910      	cbnz	r0, 186aa <lv_img_cache_set_size+0x2e>
        entry_cnt = 0;
   186a4:	8018      	strh	r0, [r3, #0]
}
   186a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry_cnt = new_entry_cnt;
   186aa:	801d      	strh	r5, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
   186ac:	2600      	movs	r6, #0
   186ae:	42b5      	cmp	r5, r6
   186b0:	d0f9      	beq.n	186a6 <lv_img_cache_set_size+0x2a>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
   186b2:	6820      	ldr	r0, [r4, #0]
   186b4:	fb07 f806 	mul.w	r8, r7, r6
   186b8:	2120      	movs	r1, #32
   186ba:	4440      	add	r0, r8
   186bc:	f00c fc9d 	bl	24ffa <_lv_memset_00>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
   186c0:	6820      	ldr	r0, [r4, #0]
   186c2:	2124      	movs	r1, #36	; 0x24
   186c4:	4440      	add	r0, r8
   186c6:	f00c fc98 	bl	24ffa <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
   186ca:	3601      	adds	r6, #1
   186cc:	e7ef      	b.n	186ae <lv_img_cache_set_size+0x32>
   186ce:	bf00      	nop
   186d0:	20002d8c 	.word	0x20002d8c
   186d4:	20002f34 	.word	0x20002f34

000186d8 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
   186d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   186dc:	7b08      	ldrb	r0, [r1, #12]
{
   186de:	b086      	sub	sp, #24
   186e0:	461e      	mov	r6, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   186e2:	f000 031e 	and.w	r3, r0, #30
   186e6:	2b04      	cmp	r3, #4
{
   186e8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   186ec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   186ee:	460d      	mov	r5, r1
   186f0:	4614      	mov	r4, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   186f2:	d103      	bne.n	186fc <lv_img_decoder_built_in_read_line+0x24>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
#else
        LV_LOG_WARN("Image built-in alpha line reader can't read file because LV_USE_FILESYSTEM = 0");
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
   186f4:	2000      	movs	r0, #0
}
   186f6:	b006      	add	sp, #24
   186f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   186fc:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   18700:	2b06      	cmp	r3, #6
   18702:	d0f7      	beq.n	186f4 <lv_img_decoder_built_in_read_line+0x1c>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
   18704:	f1a3 020b 	sub.w	r2, r3, #11
   18708:	2a03      	cmp	r2, #3
   1870a:	f200 809a 	bhi.w	18842 <lv_img_decoder_built_in_read_line+0x16a>
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
   1870e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   18712:	f8ad 3000 	strh.w	r3, [sp]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
   18716:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
   1871a:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
   1871e:	9301      	str	r3, [sp, #4]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   18720:	4b86      	ldr	r3, [pc, #536]	; (1893c <lv_img_decoder_built_in_read_line+0x264>)
   18722:	aa02      	add	r2, sp, #8
   18724:	f103 0e10 	add.w	lr, r3, #16
   18728:	4691      	mov	r9, r2
   1872a:	6818      	ldr	r0, [r3, #0]
   1872c:	6859      	ldr	r1, [r3, #4]
   1872e:	4694      	mov	ip, r2
   18730:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   18734:	3308      	adds	r3, #8
   18736:	4573      	cmp	r3, lr
   18738:	4662      	mov	r2, ip
   1873a:	d1f6      	bne.n	1872a <lv_img_decoder_built_in_read_line+0x52>
    lv_color_t bg_color = dsc->color;
   1873c:	7a29      	ldrb	r1, [r5, #8]
    for(i = 0; i < len; i++) {
   1873e:	2300      	movs	r3, #0
   18740:	b21a      	sxth	r2, r3
   18742:	4590      	cmp	r8, r2
   18744:	dc0e      	bgt.n	18764 <lv_img_decoder_built_in_read_line+0x8c>
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
   18746:	7b28      	ldrb	r0, [r5, #12]
   18748:	f000 001f 	and.w	r0, r0, #31
   1874c:	f7fe fc6a 	bl	17024 <lv_img_cf_get_px_size>
    switch(dsc->header.cf) {
   18750:	7b2b      	ldrb	r3, [r5, #12]
   18752:	f003 031f 	and.w	r3, r3, #31
   18756:	3b0b      	subs	r3, #11
   18758:	2b03      	cmp	r3, #3
   1875a:	d855      	bhi.n	18808 <lv_img_decoder_built_in_read_line+0x130>
   1875c:	e8df f003 	tbb	[pc, r3]
   18760:	4c3c2906 	.word	0x4c3c2906
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
   18764:	f807 1013 	strb.w	r1, [r7, r3, lsl #1]
    for(i = 0; i < len; i++) {
   18768:	3301      	adds	r3, #1
   1876a:	e7e9      	b.n	18740 <lv_img_decoder_built_in_read_line+0x68>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   1876c:	68ea      	ldr	r2, [r5, #12]
   1876e:	f3c2 3347 	ubfx	r3, r2, #13, #8
            if(dsc->header.w & 0x7) w++;
   18772:	f412 5fe0 	tst.w	r2, #7168	; 0x1c00
   18776:	bf18      	it	ne
   18778:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   1877a:	10e2      	asrs	r2, r4, #3
            pos       = 7 - (x & 0x7);
   1877c:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
   1877e:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 7 - (x & 0x7);
   18782:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
   18786:	46ec      	mov	ip, sp
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   18788:	7a69      	ldrb	r1, [r5, #9]
   1878a:	2900      	cmp	r1, #0
   1878c:	d1b2      	bne.n	186f4 <lv_img_decoder_built_in_read_line+0x1c>
        data_tmp = img_dsc->data + ofs;
   1878e:	686a      	ldr	r2, [r5, #4]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   18790:	2601      	movs	r6, #1
   18792:	4086      	lsls	r6, r0
        data_tmp = img_dsc->data + ofs;
   18794:	6892      	ldr	r2, [r2, #8]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
   18796:	b240      	sxtb	r0, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   18798:	3e01      	subs	r6, #1
        if(pos < 0) {
            pos = 8 - px_size;
   1879a:	f1c0 0e08 	rsb	lr, r0, #8
        data_tmp = img_dsc->data + ofs;
   1879e:	4413      	add	r3, r2
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   187a0:	b2b6      	uxth	r6, r6
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   187a2:	3701      	adds	r7, #1
            pos = 8 - px_size;
   187a4:	fa4f fe8e 	sxtb.w	lr, lr
    for(i = 0; i < len; i++) {
   187a8:	b20a      	sxth	r2, r1
   187aa:	4590      	cmp	r8, r2
   187ac:	dc2f      	bgt.n	1880e <lv_img_decoder_built_in_read_line+0x136>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
#endif
    return LV_RES_OK;
   187ae:	2001      	movs	r0, #1
   187b0:	e7a1      	b.n	186f6 <lv_img_decoder_built_in_read_line+0x1e>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   187b2:	68ea      	ldr	r2, [r5, #12]
   187b4:	f3c2 3308 	ubfx	r3, r2, #12, #9
            if(dsc->header.w & 0x3) w++;
   187b8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
            ofs += w * y + (x >> 2); /*First pixel*/
   187bc:	ea4f 02a4 	mov.w	r2, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
   187c0:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x3) w++;
   187c4:	bf18      	it	ne
   187c6:	3301      	addne	r3, #1
            pos       = 6 - ((x & 0x3) * 2);
   187c8:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
   187cc:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 6 - ((x & 0x3) * 2);
   187d0:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
   187d2:	f10d 0c04 	add.w	ip, sp, #4
            break;
   187d6:	e7d7      	b.n	18788 <lv_img_decoder_built_in_read_line+0xb0>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   187d8:	68ea      	ldr	r2, [r5, #12]
   187da:	f3c2 23c9 	ubfx	r3, r2, #11, #10
            if(dsc->header.w & 0x1) w++;
   187de:	0551      	lsls	r1, r2, #21
   187e0:	bf48      	it	mi
   187e2:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   187e4:	1062      	asrs	r2, r4, #1
            pos       = 4 - ((x & 0x1) * 4);
   187e6:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   187ea:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 4 - ((x & 0x1) * 4);
   187ee:	bf0c      	ite	eq
   187f0:	2404      	moveq	r4, #4
   187f2:	2400      	movne	r4, #0
   187f4:	46cc      	mov	ip, r9
   187f6:	e7c7      	b.n	18788 <lv_img_decoder_built_in_read_line+0xb0>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   187f8:	68eb      	ldr	r3, [r5, #12]
   187fa:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   187fe:	fb16 4303 	smlabb	r3, r6, r3, r4
            pos = 0;
   18802:	2400      	movs	r4, #0
    switch(dsc->header.cf) {
   18804:	46a4      	mov	ip, r4
   18806:	e7bf      	b.n	18788 <lv_img_decoder_built_in_read_line+0xb0>
   18808:	2400      	movs	r4, #0
   1880a:	4623      	mov	r3, r4
   1880c:	e7fa      	b.n	18804 <lv_img_decoder_built_in_read_line+0x12c>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1880e:	781a      	ldrb	r2, [r3, #0]
   18810:	fa06 f904 	lsl.w	r9, r6, r4
   18814:	ea02 0209 	and.w	r2, r2, r9
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
   18818:	f895 900c 	ldrb.w	r9, [r5, #12]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1881c:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1881e:	b2d2      	uxtb	r2, r2
   18820:	f009 091f 	and.w	r9, r9, #31
        pos -= px_size;
   18824:	1a24      	subs	r4, r4, r0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   18826:	f1b9 0f0e 	cmp.w	r9, #14
        pos -= px_size;
   1882a:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1882c:	bf18      	it	ne
   1882e:	f81c 2002 	ldrbne.w	r2, [ip, r2]
   18832:	f807 2011 	strb.w	r2, [r7, r1, lsl #1]
        if(pos < 0) {
   18836:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
   18838:	bfbc      	itt	lt
   1883a:	4674      	movlt	r4, lr
            data_tmp++;
   1883c:	3301      	addlt	r3, #1
    for(i = 0; i < len; i++) {
   1883e:	3101      	adds	r1, #1
   18840:	e7b2      	b.n	187a8 <lv_img_decoder_built_in_read_line+0xd0>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
   18842:	3b07      	subs	r3, #7
   18844:	2b03      	cmp	r3, #3
   18846:	f63f af55 	bhi.w	186f4 <lv_img_decoder_built_in_read_line+0x1c>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
   1884a:	f000 001f 	and.w	r0, r0, #31
   1884e:	f7fe fbe9 	bl	17024 <lv_img_cf_get_px_size>
    switch(dsc->header.cf) {
   18852:	7b2b      	ldrb	r3, [r5, #12]
   18854:	f003 031f 	and.w	r3, r3, #31
   18858:	3b07      	subs	r3, #7
   1885a:	2b03      	cmp	r3, #3
   1885c:	d86b      	bhi.n	18936 <lv_img_decoder_built_in_read_line+0x25e>
   1885e:	e8df f003 	tbb	[pc, r3]
   18862:	4002      	.short	0x4002
   18864:	6150      	.short	0x6150
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   18866:	68ea      	ldr	r2, [r5, #12]
   18868:	f3c2 3347 	ubfx	r3, r2, #13, #8
            if(dsc->header.w & 0x7) w++;
   1886c:	f412 5fe0 	tst.w	r2, #7168	; 0x1c00
   18870:	bf18      	it	ne
   18872:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   18874:	10e2      	asrs	r2, r4, #3
   18876:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 7 - (x & 0x7);
   1887a:	43e4      	mvns	r4, r4
            ofs += 8;                /*Skip the palette*/
   1887c:	3308      	adds	r3, #8
            pos = 7 - (x & 0x7);
   1887e:	f004 0407 	and.w	r4, r4, #7
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   18882:	7a69      	ldrb	r1, [r5, #9]
   18884:	2900      	cmp	r1, #0
   18886:	f47f af35 	bne.w	186f4 <lv_img_decoder_built_in_read_line+0x1c>
        data_tmp                     = img_dsc->data + ofs;
   1888a:	686a      	ldr	r2, [r5, #4]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   1888c:	69ee      	ldr	r6, [r5, #28]
        data_tmp                     = img_dsc->data + ofs;
   1888e:	6892      	ldr	r2, [r2, #8]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   18890:	2501      	movs	r5, #1
   18892:	4085      	lsls	r5, r0
        pos -= px_size;
   18894:	b240      	sxtb	r0, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   18896:	3d01      	subs	r5, #1
            pos = 8 - px_size;
   18898:	f1c0 0c08 	rsb	ip, r0, #8
        data_tmp                     = img_dsc->data + ofs;
   1889c:	4413      	add	r3, r2
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1889e:	fa1f fa85 	uxth.w	sl, r5
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   188a2:	f107 0e01 	add.w	lr, r7, #1
            pos = 8 - px_size;
   188a6:	fa4f fc8c 	sxtb.w	ip, ip
    for(i = 0; i < len; i++) {
   188aa:	b20a      	sxth	r2, r1
   188ac:	4590      	cmp	r8, r2
   188ae:	f77f af7e 	ble.w	187ae <lv_img_decoder_built_in_read_line+0xd6>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   188b2:	781a      	ldrb	r2, [r3, #0]
        lv_color_t color = user_data->palette[val_act];
   188b4:	6835      	ldr	r5, [r6, #0]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   188b6:	fa0a f904 	lsl.w	r9, sl, r4
   188ba:	ea02 0209 	and.w	r2, r2, r9
   188be:	4122      	asrs	r2, r4
        lv_color_t color = user_data->palette[val_act];
   188c0:	b2d2      	uxtb	r2, r2
        pos -= px_size;
   188c2:	1a24      	subs	r4, r4, r0
        lv_color_t color = user_data->palette[val_act];
   188c4:	f815 9002 	ldrb.w	r9, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
   188c8:	f807 9011 	strb.w	r9, [r7, r1, lsl #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   188cc:	6875      	ldr	r5, [r6, #4]
        pos -= px_size;
   188ce:	b264      	sxtb	r4, r4
        if(pos < 0) {
   188d0:	2c00      	cmp	r4, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   188d2:	5caa      	ldrb	r2, [r5, r2]
   188d4:	f80e 2011 	strb.w	r2, [lr, r1, lsl #1]
            pos = 8 - px_size;
   188d8:	bfbc      	itt	lt
   188da:	4664      	movlt	r4, ip
            data_tmp++;
   188dc:	3301      	addlt	r3, #1
    for(i = 0; i < len; i++) {
   188de:	3101      	adds	r1, #1
   188e0:	e7e3      	b.n	188aa <lv_img_decoder_built_in_read_line+0x1d2>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   188e2:	68ea      	ldr	r2, [r5, #12]
   188e4:	f3c2 3308 	ubfx	r3, r2, #12, #9
            if(dsc->header.w & 0x3) w++;
   188e8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   188ec:	bf18      	it	ne
   188ee:	3301      	addne	r3, #1
            ofs += w * y + (x >> 2); /*First pixel*/
   188f0:	10a2      	asrs	r2, r4, #2
            pos = 6 - ((x & 0x3) * 2);
   188f2:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
   188f4:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 6 - ((x & 0x3) * 2);
   188f8:	f004 0403 	and.w	r4, r4, #3
            ofs += 16;               /*Skip the palette*/
   188fc:	3310      	adds	r3, #16
            pos = 6 - ((x & 0x3) * 2);
   188fe:	0064      	lsls	r4, r4, #1
            break;
   18900:	e7bf      	b.n	18882 <lv_img_decoder_built_in_read_line+0x1aa>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   18902:	68ea      	ldr	r2, [r5, #12]
   18904:	f3c2 23c9 	ubfx	r3, r2, #11, #10
            if(dsc->header.w & 0x1) w++;
   18908:	0552      	lsls	r2, r2, #21
   1890a:	bf48      	it	mi
   1890c:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1890e:	1062      	asrs	r2, r4, #1
            pos = 4 - ((x & 0x1) * 4);
   18910:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   18914:	fb03 2306 	mla	r3, r3, r6, r2
            ofs += 64;               /*Skip the palette*/
   18918:	f103 0340 	add.w	r3, r3, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
   1891c:	bf0c      	ite	eq
   1891e:	2404      	moveq	r4, #4
   18920:	2400      	movne	r4, #0
   18922:	e7ae      	b.n	18882 <lv_img_decoder_built_in_read_line+0x1aa>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   18924:	68eb      	ldr	r3, [r5, #12]
   18926:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   1892a:	fb16 4303 	smlabb	r3, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
   1892e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
            pos = 0;
   18932:	2400      	movs	r4, #0
            break;
   18934:	e7a5      	b.n	18882 <lv_img_decoder_built_in_read_line+0x1aa>
    switch(dsc->header.cf) {
   18936:	2300      	movs	r3, #0
   18938:	461c      	mov	r4, r3
   1893a:	e7a2      	b.n	18882 <lv_img_decoder_built_in_read_line+0x1aa>
   1893c:	000271f2 	.word	0x000271f2

00018940 <lv_img_decoder_built_in_info>:
{
   18940:	b538      	push	{r3, r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
   18942:	4608      	mov	r0, r1
{
   18944:	460d      	mov	r5, r1
   18946:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
   18948:	f00b f8e0 	bl	23b0c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
   1894c:	b9c0      	cbnz	r0, 18980 <lv_img_decoder_built_in_info+0x40>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   1894e:	782b      	ldrb	r3, [r5, #0]
   18950:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
   18954:	3b04      	subs	r3, #4
   18956:	b2db      	uxtb	r3, r3
   18958:	2b0a      	cmp	r3, #10
   1895a:	d810      	bhi.n	1897e <lv_img_decoder_built_in_info+0x3e>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   1895c:	886b      	ldrh	r3, [r5, #2]
   1895e:	8862      	ldrh	r2, [r4, #2]
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   18960:	6829      	ldr	r1, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   18962:	095b      	lsrs	r3, r3, #5
   18964:	f363 124f 	bfi	r2, r3, #5, #11
   18968:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
   1896a:	6823      	ldr	r3, [r4, #0]
   1896c:	4a09      	ldr	r2, [pc, #36]	; (18994 <lv_img_decoder_built_in_info+0x54>)
   1896e:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
   18972:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
   18976:	400a      	ands	r2, r1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   18978:	4313      	orrs	r3, r2
   1897a:	6023      	str	r3, [r4, #0]
    return LV_RES_OK;
   1897c:	2001      	movs	r0, #1
}
   1897e:	bd38      	pop	{r3, r4, r5, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
   18980:	2802      	cmp	r0, #2
   18982:	d104      	bne.n	1898e <lv_img_decoder_built_in_info+0x4e>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   18984:	6823      	ldr	r3, [r4, #0]
   18986:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
   1898a:	4b03      	ldr	r3, [pc, #12]	; (18998 <lv_img_decoder_built_in_info+0x58>)
   1898c:	e7f4      	b.n	18978 <lv_img_decoder_built_in_info+0x38>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
   1898e:	2000      	movs	r0, #0
   18990:	e7f5      	b.n	1897e <lv_img_decoder_built_in_info+0x3e>
   18992:	bf00      	nop
   18994:	001ffc1f 	.word	0x001ffc1f
   18998:	0020040b 	.word	0x0020040b

0001899c <lv_img_decoder_get_info>:
    header->cf = LV_IMG_CF_UNKNOWN;
   1899c:	680b      	ldr	r3, [r1, #0]
   1899e:	f403 7340 	and.w	r3, r3, #768	; 0x300
{
   189a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   189a6:	4607      	mov	r7, r0
    header->cf = LV_IMG_CF_UNKNOWN;
   189a8:	600b      	str	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   189aa:	480d      	ldr	r0, [pc, #52]	; (189e0 <lv_img_decoder_get_info+0x44>)
   189ac:	f8df 8030 	ldr.w	r8, [pc, #48]	; 189e0 <lv_img_decoder_get_info+0x44>
{
   189b0:	460e      	mov	r6, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   189b2:	f00c fee7 	bl	25784 <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
   189b6:	2400      	movs	r4, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   189b8:	4605      	mov	r5, r0
   189ba:	b915      	cbnz	r5, 189c2 <lv_img_decoder_get_info+0x26>
}
   189bc:	4620      	mov	r0, r4
   189be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
   189c2:	682c      	ldr	r4, [r5, #0]
   189c4:	b134      	cbz	r4, 189d4 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
   189c6:	4632      	mov	r2, r6
   189c8:	4639      	mov	r1, r7
   189ca:	4628      	mov	r0, r5
   189cc:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
   189ce:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
   189d0:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
   189d2:	d0f3      	beq.n	189bc <lv_img_decoder_get_info+0x20>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   189d4:	4629      	mov	r1, r5
   189d6:	4640      	mov	r0, r8
   189d8:	f00c feda 	bl	25790 <_lv_ll_get_next>
   189dc:	4605      	mov	r5, r0
   189de:	e7ec      	b.n	189ba <lv_img_decoder_get_info+0x1e>
   189e0:	20002d90 	.word	0x20002d90

000189e4 <lv_img_decoder_open>:
{
   189e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   189e8:	4605      	mov	r5, r0
    dsc->color     = color;
   189ea:	7202      	strb	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
   189ec:	4608      	mov	r0, r1
{
   189ee:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
   189f0:	f00b f88c 	bl	23b0c <lv_img_src_get_type>
    dsc->user_data = NULL;
   189f4:	2300      	movs	r3, #0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   189f6:	2801      	cmp	r0, #1
    dsc->src_type  = lv_img_src_get_type(src);
   189f8:	7268      	strb	r0, [r5, #9]
    dsc->user_data = NULL;
   189fa:	61eb      	str	r3, [r5, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   189fc:	d117      	bne.n	18a2e <lv_img_decoder_open+0x4a>
        size_t fnlen = strlen(src);
   189fe:	4638      	mov	r0, r7
   18a00:	f7e7 fd44 	bl	48c <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
   18a04:	3001      	adds	r0, #1
   18a06:	f000 f91f 	bl	18c48 <lv_mem_alloc>
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   18a0a:	4639      	mov	r1, r7
   18a0c:	6068      	str	r0, [r5, #4]
   18a0e:	f00e f847 	bl	26aa0 <strcpy>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   18a12:	4816      	ldr	r0, [pc, #88]	; (18a6c <lv_img_decoder_open+0x88>)
   18a14:	f8df a054 	ldr.w	sl, [pc, #84]	; 18a6c <lv_img_decoder_open+0x88>
   18a18:	f00c feb4 	bl	25784 <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
   18a1c:	2600      	movs	r6, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   18a1e:	4604      	mov	r4, r0
        res = d->info_cb(d, src, &dsc->header);
   18a20:	f105 090c 	add.w	r9, r5, #12
        dsc->error_msg = NULL;
   18a24:	46b0      	mov	r8, r6
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   18a26:	b924      	cbnz	r4, 18a32 <lv_img_decoder_open+0x4e>
}
   18a28:	4630      	mov	r0, r6
   18a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        dsc->src       = src;
   18a2e:	606f      	str	r7, [r5, #4]
   18a30:	e7ef      	b.n	18a12 <lv_img_decoder_open+0x2e>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
   18a32:	6823      	ldr	r3, [r4, #0]
   18a34:	b1a3      	cbz	r3, 18a60 <lv_img_decoder_open+0x7c>
   18a36:	6862      	ldr	r2, [r4, #4]
   18a38:	b192      	cbz	r2, 18a60 <lv_img_decoder_open+0x7c>
        res = d->info_cb(d, src, &dsc->header);
   18a3a:	464a      	mov	r2, r9
   18a3c:	4639      	mov	r1, r7
   18a3e:	4620      	mov	r0, r4
   18a40:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
   18a42:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
   18a44:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
   18a46:	d10b      	bne.n	18a60 <lv_img_decoder_open+0x7c>
        res = d->open_cb(d, dsc);
   18a48:	6863      	ldr	r3, [r4, #4]
        dsc->error_msg = NULL;
   18a4a:	f8c5 8018 	str.w	r8, [r5, #24]
        dsc->img_data  = NULL;
   18a4e:	f8c5 8010 	str.w	r8, [r5, #16]
        dsc->decoder   = d;
   18a52:	602c      	str	r4, [r5, #0]
        res = d->open_cb(d, dsc);
   18a54:	4629      	mov	r1, r5
   18a56:	4620      	mov	r0, r4
   18a58:	4798      	blx	r3
        if(res == LV_RES_OK) break;
   18a5a:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
   18a5c:	4606      	mov	r6, r0
        if(res == LV_RES_OK) break;
   18a5e:	d0e3      	beq.n	18a28 <lv_img_decoder_open+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   18a60:	4621      	mov	r1, r4
   18a62:	4650      	mov	r0, sl
   18a64:	f00c fe94 	bl	25790 <_lv_ll_get_next>
   18a68:	4604      	mov	r4, r0
   18a6a:	e7dc      	b.n	18a26 <lv_img_decoder_open+0x42>
   18a6c:	20002d90 	.word	0x20002d90

00018a70 <lv_img_decoder_create>:
{
   18a70:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
   18a72:	4805      	ldr	r0, [pc, #20]	; (18a88 <lv_img_decoder_create+0x18>)
   18a74:	f00c fe4f 	bl	25716 <_lv_ll_ins_head>
    if(decoder == NULL) return NULL;
   18a78:	4604      	mov	r4, r0
   18a7a:	b110      	cbz	r0, 18a82 <lv_img_decoder_create+0x12>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
   18a7c:	2114      	movs	r1, #20
   18a7e:	f00c fad2 	bl	25026 <_lv_memset_00>
}
   18a82:	4620      	mov	r0, r4
   18a84:	bd10      	pop	{r4, pc}
   18a86:	bf00      	nop
   18a88:	20002d90 	.word	0x20002d90

00018a8c <_lv_img_decoder_init>:
{
   18a8c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
   18a8e:	4808      	ldr	r0, [pc, #32]	; (18ab0 <_lv_img_decoder_init+0x24>)
   18a90:	2114      	movs	r1, #20
   18a92:	f00c fe38 	bl	25706 <_lv_ll_init>
    decoder = lv_img_decoder_create();
   18a96:	f7ff ffeb 	bl	18a70 <lv_img_decoder_create>
    if(decoder == NULL) {
   18a9a:	b138      	cbz	r0, 18aac <_lv_img_decoder_init+0x20>
    decoder->info_cb = info_cb;
   18a9c:	4b05      	ldr	r3, [pc, #20]	; (18ab4 <_lv_img_decoder_init+0x28>)
   18a9e:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
   18aa0:	4b05      	ldr	r3, [pc, #20]	; (18ab8 <_lv_img_decoder_init+0x2c>)
   18aa2:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
   18aa4:	4b05      	ldr	r3, [pc, #20]	; (18abc <_lv_img_decoder_init+0x30>)
   18aa6:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
   18aa8:	4b05      	ldr	r3, [pc, #20]	; (18ac0 <_lv_img_decoder_init+0x34>)
   18aaa:	60c3      	str	r3, [r0, #12]
}
   18aac:	bd08      	pop	{r3, pc}
   18aae:	bf00      	nop
   18ab0:	20002d90 	.word	0x20002d90
   18ab4:	00018941 	.word	0x00018941
   18ab8:	0002502f 	.word	0x0002502f
   18abc:	000186d9 	.word	0x000186d9
   18ac0:	00025003 	.word	0x00025003

00018ac4 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
   18ac4:	b510      	push	{r4, lr}
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
   18ac6:	2130      	movs	r1, #48	; 0x30
{
   18ac8:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
   18aca:	f00c fb33 	bl	25134 <_lv_memset_00>
    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
    driver->ver_res          = LV_VER_RES_MAX;
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
   18ace:	2301      	movs	r3, #1
   18ad0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    driver->hor_res          = LV_HOR_RES_MAX;
   18ad4:	4b06      	ldr	r3, [pc, #24]	; (18af0 <lv_disp_drv_init+0x2c>)
    driver->flush_cb         = NULL;
   18ad6:	2200      	movs	r2, #0
    driver->buffer           = NULL;
   18ad8:	e9c4 3200 	strd	r3, r2, [r4]
    driver->rotated          = 0;
   18adc:	8923      	ldrh	r3, [r4, #8]
    driver->flush_cb         = NULL;
   18ade:	60e2      	str	r2, [r4, #12]
    driver->rotated          = 0;
   18ae0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
   18ae4:	f443 7382 	orr.w	r3, r3, #260	; 0x104
   18ae8:	8123      	strh	r3, [r4, #8]
    driver->gpu_blend_cb = NULL;
    driver->gpu_fill_cb  = NULL;
#endif

#if LV_USE_USER_DATA
    driver->user_data = NULL;
   18aea:	62e2      	str	r2, [r4, #44]	; 0x2c
#endif

    driver->set_px_cb = NULL;
   18aec:	6162      	str	r2, [r4, #20]
}
   18aee:	bd10      	pop	{r4, pc}
   18af0:	00200080 	.word	0x00200080

00018af4 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
   18af4:	4b01      	ldr	r3, [pc, #4]	; (18afc <lv_disp_get_default+0x8>)
   18af6:	6818      	ldr	r0, [r3, #0]
   18af8:	4770      	bx	lr
   18afa:	bf00      	nop
   18afc:	20002cf8 	.word	0x20002cf8

00018b00 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   18b00:	b910      	cbnz	r0, 18b08 <lv_disp_get_hor_res+0x8>
    return disp_def;
   18b02:	4b06      	ldr	r3, [pc, #24]	; (18b1c <lv_disp_get_hor_res+0x1c>)
   18b04:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   18b06:	b138      	cbz	r0, 18b18 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
   18b08:	7a03      	ldrb	r3, [r0, #8]
   18b0a:	07db      	lsls	r3, r3, #31
   18b0c:	bf54      	ite	pl
   18b0e:	f9b0 0000 	ldrshpl.w	r0, [r0]
   18b12:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
   18b16:	4770      	bx	lr
        return LV_HOR_RES_MAX;
   18b18:	2080      	movs	r0, #128	; 0x80
}
   18b1a:	4770      	bx	lr
   18b1c:	20002cf8 	.word	0x20002cf8

00018b20 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   18b20:	b910      	cbnz	r0, 18b28 <lv_disp_get_ver_res+0x8>
    return disp_def;
   18b22:	4b06      	ldr	r3, [pc, #24]	; (18b3c <lv_disp_get_ver_res+0x1c>)
   18b24:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   18b26:	b138      	cbz	r0, 18b38 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
   18b28:	7a03      	ldrb	r3, [r0, #8]
   18b2a:	07db      	lsls	r3, r3, #31
   18b2c:	bf54      	ite	pl
   18b2e:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
   18b32:	f9b0 0000 	ldrshmi.w	r0, [r0]
   18b36:	4770      	bx	lr
        return LV_VER_RES_MAX;
   18b38:	2020      	movs	r0, #32
}
   18b3a:	4770      	bx	lr
   18b3c:	20002cf8 	.word	0x20002cf8

00018b40 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   18b40:	b910      	cbnz	r0, 18b48 <lv_disp_get_dpi+0x8>
    return disp_def;
   18b42:	4b04      	ldr	r3, [pc, #16]	; (18b54 <lv_disp_get_dpi+0x14>)
   18b44:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   18b46:	b118      	cbz	r0, 18b50 <lv_disp_get_dpi+0x10>
    return disp->driver.dpi;
   18b48:	8900      	ldrh	r0, [r0, #8]
   18b4a:	f3c0 0049 	ubfx	r0, r0, #1, #10
   18b4e:	4770      	bx	lr
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   18b50:	2082      	movs	r0, #130	; 0x82
}
   18b52:	4770      	bx	lr
   18b54:	20002cf8 	.word	0x20002cf8

00018b58 <lv_disp_drv_register>:
{
   18b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b5a:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
   18b5c:	4832      	ldr	r0, [pc, #200]	; (18c28 <lv_disp_drv_register+0xd0>)
   18b5e:	f00c fdda 	bl	25716 <_lv_ll_ins_head>
    if(!disp) {
   18b62:	4604      	mov	r4, r0
   18b64:	b910      	cbnz	r0, 18b6c <lv_disp_drv_register+0x14>
        return NULL;
   18b66:	2400      	movs	r4, #0
}
   18b68:	4620      	mov	r0, r4
   18b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _lv_memset_00(disp, sizeof(lv_disp_t));
   18b6c:	f44f 71c0 	mov.w	r1, #384	; 0x180
   18b70:	f00c fae0 	bl	25134 <_lv_memset_00>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18b74:	4628      	mov	r0, r5
   18b76:	4623      	mov	r3, r4
   18b78:	f105 0230 	add.w	r2, r5, #48	; 0x30
   18b7c:	f850 1b04 	ldr.w	r1, [r0], #4
   18b80:	f843 1b04 	str.w	r1, [r3], #4
   18b84:	4290      	cmp	r0, r2
   18b86:	d1f9      	bne.n	18b7c <lv_disp_drv_register+0x24>
    if(disp_def == NULL) disp_def = disp;
   18b88:	4e28      	ldr	r6, [pc, #160]	; (18c2c <lv_disp_drv_register+0xd4>)
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
   18b8a:	213c      	movs	r1, #60	; 0x3c
   18b8c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18b90:	f00c fdb9 	bl	25706 <_lv_ll_init>
    disp->last_activity_time = 0;
   18b94:	2300      	movs	r3, #0
   18b96:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
    if(disp_def == NULL) disp_def = disp;
   18b9a:	6833      	ldr	r3, [r6, #0]
   18b9c:	b903      	cbnz	r3, 18ba0 <lv_disp_drv_register+0x48>
   18b9e:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   18ba0:	4823      	ldr	r0, [pc, #140]	; (18c30 <lv_disp_drv_register+0xd8>)
    lv_disp_t * disp_def_tmp = disp_def;
   18ba2:	6837      	ldr	r7, [r6, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
   18ba4:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   18ba6:	4623      	mov	r3, r4
   18ba8:	2203      	movs	r2, #3
   18baa:	211e      	movs	r1, #30
   18bac:	f00c feca 	bl	25944 <lv_task_create>
   18bb0:	6320      	str	r0, [r4, #48]	; 0x30
    if(disp->refr_task == NULL) return NULL;
   18bb2:	2800      	cmp	r0, #0
   18bb4:	d0d7      	beq.n	18b66 <lv_disp_drv_register+0xe>
    disp->inv_p = 0;
   18bb6:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   18bba:	f36f 0309 	bfc	r3, #0, #10
   18bbe:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
    disp->bg_color = LV_COLOR_WHITE;
   18bc2:	2301      	movs	r3, #1
    disp->last_activity_time = 0;
   18bc4:	2500      	movs	r5, #0
    disp->bg_color = LV_COLOR_WHITE;
   18bc6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    disp->bg_opa = LV_OPA_COVER;
   18bca:	23ff      	movs	r3, #255	; 0xff
   18bcc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   18bd0:	4629      	mov	r1, r5
    disp->last_activity_time = 0;
   18bd2:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
    disp->bg_img = NULL;
   18bd6:	6565      	str	r5, [r4, #84]	; 0x54
    disp->prev_scr  = NULL;
   18bd8:	6465      	str	r5, [r4, #68]	; 0x44
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   18bda:	4628      	mov	r0, r5
   18bdc:	f7fd fa5a 	bl	16094 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   18be0:	4629      	mov	r1, r5
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   18be2:	6420      	str	r0, [r4, #64]	; 0x40
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   18be4:	4628      	mov	r0, r5
   18be6:	f7fd fa55 	bl	16094 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   18bea:	4629      	mov	r1, r5
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   18bec:	64a0      	str	r0, [r4, #72]	; 0x48
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   18bee:	4628      	mov	r0, r5
   18bf0:	f7fd fa50 	bl	16094 <lv_obj_create>
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   18bf4:	4629      	mov	r1, r5
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   18bf6:	64e0      	str	r0, [r4, #76]	; 0x4c
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   18bf8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   18bfa:	f008 feea 	bl	219d2 <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
   18bfe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   18c00:	4629      	mov	r1, r5
   18c02:	f008 fee6 	bl	219d2 <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
   18c06:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   18c08:	4629      	mov	r1, r5
   18c0a:	f008 fb43 	bl	21294 <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
   18c0e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   18c10:	4629      	mov	r1, r5
   18c12:	f008 fb3f 	bl	21294 <lv_obj_set_click>
    lv_obj_invalidate(disp->act_scr);
   18c16:	6c20      	ldr	r0, [r4, #64]	; 0x40
   18c18:	f008 fbd4 	bl	213c4 <lv_obj_invalidate>
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   18c1c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    disp_def = disp_def_tmp; /*Revert the default display*/
   18c1e:	6037      	str	r7, [r6, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   18c20:	f00c fea4 	bl	2596c <lv_task_ready>
    if(lv_disp_is_true_double_buf(disp) && disp->driver.set_px_cb) {
   18c24:	e7a0      	b.n	18b68 <lv_disp_drv_register+0x10>
   18c26:	bf00      	nop
   18c28:	20002cfc 	.word	0x20002cfc
   18c2c:	20002cf8 	.word	0x20002cf8
   18c30:	00016c05 	.word	0x00016c05

00018c34 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
   18c34:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   18c36:	4803      	ldr	r0, [pc, #12]	; (18c44 <lv_indev_get_next+0x10>)
    if(indev == NULL)
   18c38:	b909      	cbnz	r1, 18c3e <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   18c3a:	f00c bda3 	b.w	25784 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
   18c3e:	f00c bda7 	b.w	25790 <_lv_ll_get_next>
   18c42:	bf00      	nop
   18c44:	20002d9c 	.word	0x20002d9c

00018c48 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
   18c48:	b510      	push	{r4, lr}
    if(size == 0) {
   18c4a:	b160      	cbz	r0, 18c66 <lv_mem_alloc+0x1e>
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    size = (size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    size = (size + 3) & (~0x3);
   18c4c:	3003      	adds	r0, #3
   18c4e:	f020 0403 	bic.w	r4, r0, #3
    /*Use custom, user defined malloc function*/
#if LV_ENABLE_GC == 1 /*gc must not include header*/
    alloc = LV_MEM_CUSTOM_ALLOC(size);
#else                 /* LV_ENABLE_GC */
    /*Allocate a header too to store the size*/
    alloc = LV_MEM_CUSTOM_ALLOC(size + sizeof(lv_mem_header_t));
   18c52:	1d20      	adds	r0, r4, #4
   18c54:	f002 fda8 	bl	1b7a8 <malloc>
    if(alloc != NULL) {
   18c58:	b120      	cbz	r0, 18c64 <lv_mem_alloc+0x1c>
        ((lv_mem_ent_t *)alloc)->header.s.d_size = size;
        ((lv_mem_ent_t *)alloc)->header.s.used   = 1;
   18c5a:	0064      	lsls	r4, r4, #1
   18c5c:	f044 0401 	orr.w	r4, r4, #1
   18c60:	f840 4b04 	str.w	r4, [r0], #4
        }
#endif
    }

    return alloc;
}
   18c64:	bd10      	pop	{r4, pc}
        return &zero_mem;
   18c66:	4801      	ldr	r0, [pc, #4]	; (18c6c <lv_mem_alloc+0x24>)
   18c68:	e7fc      	b.n	18c64 <lv_mem_alloc+0x1c>
   18c6a:	bf00      	nop
   18c6c:	20002e48 	.word	0x20002e48

00018c70 <lv_mem_free>:
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
    if(data == &zero_mem) return;
   18c70:	4b06      	ldr	r3, [pc, #24]	; (18c8c <lv_mem_free+0x1c>)
   18c72:	4298      	cmp	r0, r3
   18c74:	d008      	beq.n	18c88 <lv_mem_free+0x18>
    if(data == NULL) return;
   18c76:	b138      	cbz	r0, 18c88 <lv_mem_free+0x18>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
    e->header.s.used = 0;
   18c78:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   18c7c:	f36f 0300 	bfc	r3, #0, #1
   18c80:	f800 3d04 	strb.w	r3, [r0, #-4]!


#endif /*LV_MEM_AUTO_DEFRAG*/
#else /*Use custom, user defined free function*/
#if LV_ENABLE_GC == 0
    LV_MEM_CUSTOM_FREE(e);
   18c84:	f002 bd98 	b.w	1b7b8 <free>
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
   18c88:	4770      	bx	lr
   18c8a:	bf00      	nop
   18c8c:	20002e48 	.word	0x20002e48

00018c90 <_lv_mem_get_size>:

#if LV_ENABLE_GC == 0

uint32_t _lv_mem_get_size(const void * data)
{
    if(data == NULL) return 0;
   18c90:	b140      	cbz	r0, 18ca4 <_lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
   18c92:	4b05      	ldr	r3, [pc, #20]	; (18ca8 <_lv_mem_get_size+0x18>)
   18c94:	4298      	cmp	r0, r3
   18c96:	d004      	beq.n	18ca2 <_lv_mem_get_size+0x12>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));

    return e->header.s.d_size;
   18c98:	f850 0c04 	ldr.w	r0, [r0, #-4]
   18c9c:	f3c0 005e 	ubfx	r0, r0, #1, #31
   18ca0:	4770      	bx	lr
    if(data == NULL) return 0;
   18ca2:	2000      	movs	r0, #0
}
   18ca4:	4770      	bx	lr
   18ca6:	bf00      	nop
   18ca8:	20002e48 	.word	0x20002e48

00018cac <_lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * _lv_mem_buf_get(uint32_t size)
{
   18cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
   18cae:	4601      	mov	r1, r0
   18cb0:	b190      	cbz	r0, 18cd8 <_lv_mem_buf_get+0x2c>

    /*Try small static buffers first*/
    uint8_t i;
    if(size <= MEM_BUF_SMALL_SIZE) {
   18cb2:	2810      	cmp	r0, #16
   18cb4:	d811      	bhi.n	18cda <_lv_mem_buf_get+0x2e>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
            if(mem_buf_small[i].used == 0) {
   18cb6:	4a2c      	ldr	r2, [pc, #176]	; (18d68 <_lv_mem_buf_get+0xbc>)
   18cb8:	7993      	ldrb	r3, [r2, #6]
   18cba:	f013 0301 	ands.w	r3, r3, #1
   18cbe:	d003      	beq.n	18cc8 <_lv_mem_buf_get+0x1c>
   18cc0:	7b93      	ldrb	r3, [r2, #14]
   18cc2:	07df      	lsls	r7, r3, #31
   18cc4:	d409      	bmi.n	18cda <_lv_mem_buf_get+0x2e>
   18cc6:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
   18cc8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   18ccc:	7981      	ldrb	r1, [r0, #6]
   18cce:	f041 0101 	orr.w	r1, r1, #1
   18cd2:	7181      	strb	r1, [r0, #6]
                return mem_buf_small[i].p;
   18cd4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
        }
    }

    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_DRAW_BUF_MAX_NUM.", 0x00);
    return NULL;
}
   18cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   18cda:	4824      	ldr	r0, [pc, #144]	; (18d6c <_lv_mem_buf_get+0xc0>)
            if(mem_buf_small[i].used == 0) {
   18cdc:	2300      	movs	r3, #0
   18cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18ce2:	4605      	mov	r5, r0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   18ce4:	f100 0c04 	add.w	ip, r0, #4
   18ce8:	eb00 07c3 	add.w	r7, r0, r3, lsl #3
   18cec:	79be      	ldrb	r6, [r7, #6]
   18cee:	4634      	mov	r4, r6
   18cf0:	07f6      	lsls	r6, r6, #31
   18cf2:	d413      	bmi.n	18d1c <_lv_mem_buf_get+0x70>
   18cf4:	f83c 6033 	ldrh.w	r6, [ip, r3, lsl #3]
   18cf8:	428e      	cmp	r6, r1
   18cfa:	d30f      	bcc.n	18d1c <_lv_mem_buf_get+0x70>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
   18cfc:	d105      	bne.n	18d0a <_lv_mem_buf_get+0x5e>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   18cfe:	f044 0401 	orr.w	r4, r4, #1
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   18d02:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   18d06:	71bc      	strb	r4, [r7, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   18d08:	e7e6      	b.n	18cd8 <_lv_mem_buf_get+0x2c>
            else if(i_guess < 0) {
   18d0a:	1c57      	adds	r7, r2, #1
   18d0c:	d101      	bne.n	18d12 <_lv_mem_buf_get+0x66>
                i_guess = i;
   18d0e:	b25a      	sxtb	r2, r3
   18d10:	e004      	b.n	18d1c <_lv_mem_buf_get+0x70>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
   18d12:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
   18d16:	88a4      	ldrh	r4, [r4, #4]
   18d18:	42b4      	cmp	r4, r6
   18d1a:	d8f8      	bhi.n	18d0e <_lv_mem_buf_get+0x62>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   18d1c:	3301      	adds	r3, #1
   18d1e:	2b10      	cmp	r3, #16
   18d20:	d1e2      	bne.n	18ce8 <_lv_mem_buf_get+0x3c>
    if(i_guess >= 0) {
   18d22:	1c54      	adds	r4, r2, #1
   18d24:	d008      	beq.n	18d38 <_lv_mem_buf_get+0x8c>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   18d26:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   18d2a:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   18d2e:	798b      	ldrb	r3, [r1, #6]
   18d30:	f043 0301 	orr.w	r3, r3, #1
   18d34:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   18d36:	e7cf      	b.n	18cd8 <_lv_mem_buf_get+0x2c>
   18d38:	2400      	movs	r4, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
   18d3a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   18d3e:	7998      	ldrb	r0, [r3, #6]
   18d40:	4602      	mov	r2, r0
   18d42:	07c0      	lsls	r0, r0, #31
   18d44:	d40a      	bmi.n	18d5c <_lv_mem_buf_get+0xb0>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   18d46:	f042 0201 	orr.w	r2, r2, #1
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   18d4a:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   18d4e:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
   18d50:	8099      	strh	r1, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   18d52:	f00c fdcf 	bl	258f4 <lv_mem_realloc>
   18d56:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
            return  LV_GC_ROOT(_lv_mem_buf[i]).p;
   18d5a:	e7bd      	b.n	18cd8 <_lv_mem_buf_get+0x2c>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   18d5c:	3401      	adds	r4, #1
   18d5e:	2c10      	cmp	r4, #16
   18d60:	d1eb      	bne.n	18d3a <_lv_mem_buf_get+0x8e>
    if(size == 0) return NULL;
   18d62:	2000      	movs	r0, #0
   18d64:	e7b8      	b.n	18cd8 <_lv_mem_buf_get+0x2c>
   18d66:	bf00      	nop
   18d68:	2000092c 	.word	0x2000092c
   18d6c:	20002da8 	.word	0x20002da8

00018d70 <_lv_mem_buf_release>:
{
    uint8_t i;

    /*Try small static buffers first*/
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
        if(mem_buf_small[i].p == p) {
   18d70:	4b11      	ldr	r3, [pc, #68]	; (18db8 <_lv_mem_buf_release+0x48>)
   18d72:	681a      	ldr	r2, [r3, #0]
   18d74:	4290      	cmp	r0, r2
{
   18d76:	b510      	push	{r4, lr}
        if(mem_buf_small[i].p == p) {
   18d78:	d00a      	beq.n	18d90 <_lv_mem_buf_release+0x20>
   18d7a:	689a      	ldr	r2, [r3, #8]
   18d7c:	4290      	cmp	r0, r2
   18d7e:	d109      	bne.n	18d94 <_lv_mem_buf_release+0x24>
   18d80:	2201      	movs	r2, #1
            mem_buf_small[i].used = 0;
   18d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   18d86:	799a      	ldrb	r2, [r3, #6]
   18d88:	f36f 0200 	bfc	r2, #0, #1
   18d8c:	719a      	strb	r2, [r3, #6]
            return;
        }
    }

    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
}
   18d8e:	bd10      	pop	{r4, pc}
        if(mem_buf_small[i].p == p) {
   18d90:	2200      	movs	r2, #0
   18d92:	e7f6      	b.n	18d82 <_lv_mem_buf_release+0x12>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   18d94:	4a09      	ldr	r2, [pc, #36]	; (18dbc <_lv_mem_buf_release+0x4c>)
        if(mem_buf_small[i].p == p) {
   18d96:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   18d98:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   18d9c:	4284      	cmp	r4, r0
   18d9e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   18da2:	d104      	bne.n	18dae <_lv_mem_buf_release+0x3e>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   18da4:	798b      	ldrb	r3, [r1, #6]
   18da6:	f36f 0300 	bfc	r3, #0, #1
   18daa:	718b      	strb	r3, [r1, #6]
            return;
   18dac:	e7ef      	b.n	18d8e <_lv_mem_buf_release+0x1e>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   18dae:	3301      	adds	r3, #1
   18db0:	2b10      	cmp	r3, #16
   18db2:	d1f1      	bne.n	18d98 <_lv_mem_buf_release+0x28>
   18db4:	e7eb      	b.n	18d8e <_lv_mem_buf_release+0x1e>
   18db6:	bf00      	nop
   18db8:	2000092c 	.word	0x2000092c
   18dbc:	20002da8 	.word	0x20002da8

00018dc0 <_lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void _lv_mem_buf_free_all(void)
{
   18dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
        mem_buf_small[i].used = 0;
   18dc2:	4b0f      	ldr	r3, [pc, #60]	; (18e00 <_lv_mem_buf_free_all+0x40>)
   18dc4:	4c0f      	ldr	r4, [pc, #60]	; (18e04 <_lv_mem_buf_free_all+0x44>)
   18dc6:	799a      	ldrb	r2, [r3, #6]
   18dc8:	f36f 0200 	bfc	r2, #0, #1
   18dcc:	719a      	strb	r2, [r3, #6]
   18dce:	7b9a      	ldrb	r2, [r3, #14]
   18dd0:	2500      	movs	r5, #0
   18dd2:	f36f 0200 	bfc	r2, #0, #1
   18dd6:	739a      	strb	r2, [r3, #14]
    }

    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   18dd8:	4627      	mov	r7, r4
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   18dda:	462e      	mov	r6, r5
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
   18ddc:	6820      	ldr	r0, [r4, #0]
   18dde:	b148      	cbz	r0, 18df4 <_lv_mem_buf_free_all+0x34>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   18de0:	f7ff ff46 	bl	18c70 <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   18de4:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   18de8:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   18dea:	799a      	ldrb	r2, [r3, #6]
   18dec:	f366 0200 	bfi	r2, r6, #0, #1
   18df0:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
   18df2:	80a6      	strh	r6, [r4, #4]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   18df4:	3501      	adds	r5, #1
   18df6:	2d10      	cmp	r5, #16
   18df8:	f104 0408 	add.w	r4, r4, #8
   18dfc:	d1ee      	bne.n	18ddc <_lv_mem_buf_free_all+0x1c>
        }
    }
}
   18dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18e00:	2000092c 	.word	0x2000092c
   18e04:	20002da8 	.word	0x20002da8

00018e08 <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
   18e08:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
   18e0a:	4805      	ldr	r0, [pc, #20]	; (18e20 <_lv_task_core_init+0x18>)
   18e0c:	2118      	movs	r1, #24
   18e0e:	f00c fc7a 	bl	25706 <_lv_ll_init>

    task_list_changed = false;
   18e12:	4b04      	ldr	r3, [pc, #16]	; (18e24 <_lv_task_core_init+0x1c>)
   18e14:	2200      	movs	r2, #0
   18e16:	701a      	strb	r2, [r3, #0]
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
   18e18:	4b03      	ldr	r3, [pc, #12]	; (18e28 <_lv_task_core_init+0x20>)
   18e1a:	2201      	movs	r2, #1
   18e1c:	701a      	strb	r2, [r3, #0]
}
   18e1e:	bd08      	pop	{r3, pc}
   18e20:	20002e38 	.word	0x20002e38
   18e24:	200030ae 	.word	0x200030ae
   18e28:	200030ab 	.word	0x200030ab

00018e2c <lv_task_create_basic>:
{
   18e2c:	b570      	push	{r4, r5, r6, lr}
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   18e2e:	481c      	ldr	r0, [pc, #112]	; (18ea0 <lv_task_create_basic+0x74>)
   18e30:	f00c fca8 	bl	25784 <_lv_ll_get_head>
    if(NULL == tmp) {
   18e34:	4601      	mov	r1, r0
   18e36:	b148      	cbz	r0, 18e4c <lv_task_create_basic+0x20>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   18e38:	4c19      	ldr	r4, [pc, #100]	; (18ea0 <lv_task_create_basic+0x74>)
            if(tmp->prio <= DEF_PRIO) {
   18e3a:	7d0b      	ldrb	r3, [r1, #20]
   18e3c:	f003 0307 	and.w	r3, r3, #7
   18e40:	2b03      	cmp	r3, #3
   18e42:	d80b      	bhi.n	18e5c <lv_task_create_basic+0x30>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
   18e44:	4816      	ldr	r0, [pc, #88]	; (18ea0 <lv_task_create_basic+0x74>)
   18e46:	f00c fcac 	bl	257a2 <_lv_ll_ins_prev>
   18e4a:	e002      	b.n	18e52 <lv_task_create_basic+0x26>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
   18e4c:	4814      	ldr	r0, [pc, #80]	; (18ea0 <lv_task_create_basic+0x74>)
   18e4e:	f00c fc62 	bl	25716 <_lv_ll_ins_head>
        if(new_task == NULL) return NULL;
   18e52:	4604      	mov	r4, r0
   18e54:	b960      	cbnz	r0, 18e70 <lv_task_create_basic+0x44>
   18e56:	2400      	movs	r4, #0
}
   18e58:	4620      	mov	r0, r4
   18e5a:	bd70      	pop	{r4, r5, r6, pc}
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   18e5c:	4620      	mov	r0, r4
   18e5e:	f00c fc97 	bl	25790 <_lv_ll_get_next>
        } while(tmp != NULL);
   18e62:	4601      	mov	r1, r0
   18e64:	2800      	cmp	r0, #0
   18e66:	d1e8      	bne.n	18e3a <lv_task_create_basic+0xe>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
   18e68:	480d      	ldr	r0, [pc, #52]	; (18ea0 <lv_task_create_basic+0x74>)
   18e6a:	f00c fc6f 	bl	2574c <_lv_ll_ins_tail>
   18e6e:	e7f0      	b.n	18e52 <lv_task_create_basic+0x26>
    task_list_changed = true;
   18e70:	4b0c      	ldr	r3, [pc, #48]	; (18ea4 <lv_task_create_basic+0x78>)
   18e72:	2501      	movs	r5, #1
   18e74:	701d      	strb	r5, [r3, #0]
    new_task->period  = DEF_PERIOD;
   18e76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   18e7a:	6003      	str	r3, [r0, #0]
    new_task->prio    = DEF_PRIO;
   18e7c:	7d03      	ldrb	r3, [r0, #20]
   18e7e:	2203      	movs	r2, #3
   18e80:	f362 0302 	bfi	r3, r2, #0, #3
    new_task->task_cb = NULL;
   18e84:	2600      	movs	r6, #0
    new_task->prio    = DEF_PRIO;
   18e86:	7503      	strb	r3, [r0, #20]
    new_task->repeat_count = -1;
   18e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18e8c:	6103      	str	r3, [r0, #16]
    new_task->task_cb = NULL;
   18e8e:	6086      	str	r6, [r0, #8]
    new_task->last_run = lv_tick_get();
   18e90:	f00c f97f 	bl	25192 <lv_tick_get>
    task_created = true;
   18e94:	4b04      	ldr	r3, [pc, #16]	; (18ea8 <lv_task_create_basic+0x7c>)
    new_task->last_run = lv_tick_get();
   18e96:	6060      	str	r0, [r4, #4]
    new_task->user_data = NULL;
   18e98:	60e6      	str	r6, [r4, #12]
    task_created = true;
   18e9a:	701d      	strb	r5, [r3, #0]
    return new_task;
   18e9c:	e7dc      	b.n	18e58 <lv_task_create_basic+0x2c>
   18e9e:	bf00      	nop
   18ea0:	20002e38 	.word	0x20002e38
   18ea4:	200030ae 	.word	0x200030ae
   18ea8:	200030ac 	.word	0x200030ac

00018eac <lv_task_del>:
{
   18eac:	b538      	push	{r3, r4, r5, lr}
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
   18eae:	4601      	mov	r1, r0
{
   18eb0:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
   18eb2:	4808      	ldr	r0, [pc, #32]	; (18ed4 <lv_task_del+0x28>)
   18eb4:	f00c fca7 	bl	25806 <_lv_ll_remove>
    task_list_changed = true;
   18eb8:	4b07      	ldr	r3, [pc, #28]	; (18ed8 <lv_task_del+0x2c>)
   18eba:	2501      	movs	r5, #1
    lv_mem_free(task);
   18ebc:	4620      	mov	r0, r4
    task_list_changed = true;
   18ebe:	701d      	strb	r5, [r3, #0]
    lv_mem_free(task);
   18ec0:	f7ff fed6 	bl	18c70 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
   18ec4:	4b05      	ldr	r3, [pc, #20]	; (18edc <lv_task_del+0x30>)
   18ec6:	681b      	ldr	r3, [r3, #0]
   18ec8:	42a3      	cmp	r3, r4
   18eca:	bf04      	itt	eq
   18ecc:	4b04      	ldreq	r3, [pc, #16]	; (18ee0 <lv_task_del+0x34>)
   18ece:	701d      	strbeq	r5, [r3, #0]
}
   18ed0:	bd38      	pop	{r3, r4, r5, pc}
   18ed2:	bf00      	nop
   18ed4:	20002e38 	.word	0x20002e38
   18ed8:	200030ae 	.word	0x200030ae
   18edc:	20002e34 	.word	0x20002e34
   18ee0:	200030ad 	.word	0x200030ad

00018ee4 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
   18ee4:	b538      	push	{r3, r4, r5, lr}
   18ee6:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
   18ee8:	6840      	ldr	r0, [r0, #4]
   18eea:	f00c f95f 	bl	251ac <lv_tick_elaps>
    if(elp >= task->period)
   18eee:	6823      	ldr	r3, [r4, #0]
   18ef0:	4298      	cmp	r0, r3
   18ef2:	d31c      	bcc.n	18f2e <lv_task_exec+0x4a>
        task->last_run = lv_tick_get();
   18ef4:	f00c f94d 	bl	25192 <lv_tick_get>
        task_deleted   = false;
   18ef8:	4d0e      	ldr	r5, [pc, #56]	; (18f34 <lv_task_exec+0x50>)
        task_created   = false;
   18efa:	4a0f      	ldr	r2, [pc, #60]	; (18f38 <lv_task_exec+0x54>)
        task->last_run = lv_tick_get();
   18efc:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
   18efe:	2300      	movs	r3, #0
   18f00:	702b      	strb	r3, [r5, #0]
        task_created   = false;
   18f02:	7013      	strb	r3, [r2, #0]
        if(task->task_cb) task->task_cb(task);
   18f04:	68a3      	ldr	r3, [r4, #8]
   18f06:	b943      	cbnz	r3, 18f1a <lv_task_exec+0x36>
            if(task->repeat_count > 0) {
   18f08:	6923      	ldr	r3, [r4, #16]
   18f0a:	2b00      	cmp	r3, #0
   18f0c:	dc0c      	bgt.n	18f28 <lv_task_exec+0x44>
            if(task->repeat_count == 0) {
   18f0e:	6923      	ldr	r3, [r4, #16]
   18f10:	b943      	cbnz	r3, 18f24 <lv_task_exec+0x40>
                lv_task_del(task);
   18f12:	4620      	mov	r0, r4
   18f14:	f7ff ffca 	bl	18eac <lv_task_del>
   18f18:	e004      	b.n	18f24 <lv_task_exec+0x40>
        if(task->task_cb) task->task_cb(task);
   18f1a:	4620      	mov	r0, r4
   18f1c:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
   18f1e:	782b      	ldrb	r3, [r5, #0]
   18f20:	2b00      	cmp	r3, #0
   18f22:	d0f1      	beq.n	18f08 <lv_task_exec+0x24>
                lv_task_del(task);
   18f24:	2001      	movs	r0, #1
}
   18f26:	bd38      	pop	{r3, r4, r5, pc}
                task->repeat_count--;
   18f28:	3b01      	subs	r3, #1
   18f2a:	6123      	str	r3, [r4, #16]
   18f2c:	e7ef      	b.n	18f0e <lv_task_exec+0x2a>
    bool exec = false;
   18f2e:	2000      	movs	r0, #0
   18f30:	e7f9      	b.n	18f26 <lv_task_exec+0x42>
   18f32:	bf00      	nop
   18f34:	200030ad 	.word	0x200030ad
   18f38:	200030ac 	.word	0x200030ac

00018f3c <lv_task_handler>:
    if(already_running) return 1;
   18f3c:	4b55      	ldr	r3, [pc, #340]	; (19094 <lv_task_handler+0x158>)
{
   18f3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return 1;
   18f42:	781c      	ldrb	r4, [r3, #0]
   18f44:	2001      	movs	r0, #1
   18f46:	b924      	cbnz	r4, 18f52 <lv_task_handler+0x16>
    if(lv_task_run == false) {
   18f48:	4a53      	ldr	r2, [pc, #332]	; (19098 <lv_task_handler+0x15c>)
    already_running = true;
   18f4a:	7018      	strb	r0, [r3, #0]
    if(lv_task_run == false) {
   18f4c:	7812      	ldrb	r2, [r2, #0]
   18f4e:	b91a      	cbnz	r2, 18f58 <lv_task_handler+0x1c>
        already_running = false; /*Release mutex*/
   18f50:	701a      	strb	r2, [r3, #0]
}
   18f52:	b003      	add	sp, #12
   18f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
   18f58:	f00c f91b 	bl	25192 <lv_tick_get>
   18f5c:	4b4f      	ldr	r3, [pc, #316]	; (1909c <lv_task_handler+0x160>)
        task_deleted             = false;
   18f5e:	4d50      	ldr	r5, [pc, #320]	; (190a0 <lv_task_handler+0x164>)
    handler_start = lv_tick_get();
   18f60:	6018      	str	r0, [r3, #0]
    lv_task_t * task_interrupter = NULL;
   18f62:	9301      	str	r3, [sp, #4]
        task_deleted             = false;
   18f64:	46a3      	mov	fp, r4
        task_created             = false;
   18f66:	4f4f      	ldr	r7, [pc, #316]	; (190a4 <lv_task_handler+0x168>)
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   18f68:	484f      	ldr	r0, [pc, #316]	; (190a8 <lv_task_handler+0x16c>)
        task_deleted             = false;
   18f6a:	f885 b000 	strb.w	fp, [r5]
        task_created             = false;
   18f6e:	f887 b000 	strb.w	fp, [r7]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   18f72:	f00c fc07 	bl	25784 <_lv_ll_get_head>
   18f76:	f8df 8144 	ldr.w	r8, [pc, #324]	; 190bc <lv_task_handler+0x180>
            if(task_list_changed) {
   18f7a:	f8df a144 	ldr.w	sl, [pc, #324]	; 190c0 <lv_task_handler+0x184>
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   18f7e:	f8c8 0000 	str.w	r0, [r8]
        while(LV_GC_ROOT(_lv_task_act)) {
   18f82:	46c1      	mov	r9, r8
   18f84:	f8d9 1000 	ldr.w	r1, [r9]
   18f88:	b1b9      	cbz	r1, 18fba <lv_task_handler+0x7e>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   18f8a:	4847      	ldr	r0, [pc, #284]	; (190a8 <lv_task_handler+0x16c>)
   18f8c:	f00c fc00 	bl	25790 <_lv_ll_get_next>
   18f90:	4606      	mov	r6, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
   18f92:	f8d9 0000 	ldr.w	r0, [r9]
   18f96:	7d03      	ldrb	r3, [r0, #20]
   18f98:	f013 0207 	ands.w	r2, r3, #7
   18f9c:	d00d      	beq.n	18fba <lv_task_handler+0x7e>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
   18f9e:	42a0      	cmp	r0, r4
   18fa0:	d103      	bne.n	18faa <lv_task_handler+0x6e>
                LV_GC_ROOT(_lv_task_act) = next;
   18fa2:	f8c9 6000 	str.w	r6, [r9]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
   18fa6:	2400      	movs	r4, #0
                continue; /*Load the next task*/
   18fa8:	e7ec      	b.n	18f84 <lv_task_handler+0x48>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
   18faa:	2a05      	cmp	r2, #5
   18fac:	d138      	bne.n	19020 <lv_task_handler+0xe4>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
   18fae:	f7ff ff99 	bl	18ee4 <lv_task_exec>
            if(task_created || task_deleted) {
   18fb2:	4b3c      	ldr	r3, [pc, #240]	; (190a4 <lv_task_handler+0x168>)
   18fb4:	781b      	ldrb	r3, [r3, #0]
   18fb6:	2b00      	cmp	r3, #0
   18fb8:	d060      	beq.n	1907c <lv_task_handler+0x140>
    busy_time += lv_tick_elaps(handler_start);
   18fba:	9b01      	ldr	r3, [sp, #4]
   18fbc:	4c3b      	ldr	r4, [pc, #236]	; (190ac <lv_task_handler+0x170>)
   18fbe:	6818      	ldr	r0, [r3, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   18fc0:	4d3b      	ldr	r5, [pc, #236]	; (190b0 <lv_task_handler+0x174>)
    busy_time += lv_tick_elaps(handler_start);
   18fc2:	f00c f8f3 	bl	251ac <lv_tick_elaps>
   18fc6:	6823      	ldr	r3, [r4, #0]
   18fc8:	4403      	add	r3, r0
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   18fca:	6828      	ldr	r0, [r5, #0]
    busy_time += lv_tick_elaps(handler_start);
   18fcc:	6023      	str	r3, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   18fce:	f00c f8ed 	bl	251ac <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
   18fd2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   18fd6:	d315      	bcc.n	19004 <lv_task_handler+0xc8>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
   18fd8:	6822      	ldr	r2, [r4, #0]
   18fda:	2364      	movs	r3, #100	; 0x64
   18fdc:	4353      	muls	r3, r2
   18fde:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   18fe2:	fbb3 f3f2 	udiv	r3, r3, r2
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
   18fe6:	b2da      	uxtb	r2, r3
   18fe8:	2a64      	cmp	r2, #100	; 0x64
   18fea:	bf98      	it	ls
   18fec:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
   18ff0:	4a30      	ldr	r2, [pc, #192]	; (190b4 <lv_task_handler+0x178>)
   18ff2:	bf94      	ite	ls
   18ff4:	b2db      	uxtbls	r3, r3
   18ff6:	2300      	movhi	r3, #0
   18ff8:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
   18ffa:	2300      	movs	r3, #0
   18ffc:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
   18ffe:	f00c f8c8 	bl	25192 <lv_tick_get>
   19002:	6028      	str	r0, [r5, #0]
    time_till_next = LV_NO_TASK_READY;
   19004:	4d2c      	ldr	r5, [pc, #176]	; (190b8 <lv_task_handler+0x17c>)
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   19006:	4828      	ldr	r0, [pc, #160]	; (190a8 <lv_task_handler+0x16c>)
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   19008:	4e27      	ldr	r6, [pc, #156]	; (190a8 <lv_task_handler+0x16c>)
    time_till_next = LV_NO_TASK_READY;
   1900a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1900e:	602b      	str	r3, [r5, #0]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   19010:	f00c fbb8 	bl	25784 <_lv_ll_get_head>
   19014:	4604      	mov	r4, r0
    while(next) {
   19016:	b9dc      	cbnz	r4, 19050 <lv_task_handler+0x114>
    already_running = false; /*Release the mutex*/
   19018:	4b1e      	ldr	r3, [pc, #120]	; (19094 <lv_task_handler+0x158>)
    return time_till_next;
   1901a:	6828      	ldr	r0, [r5, #0]
    already_running = false; /*Release the mutex*/
   1901c:	701c      	strb	r4, [r3, #0]
    return time_till_next;
   1901e:	e798      	b.n	18f52 <lv_task_handler+0x16>
            else if(task_interrupter) {
   19020:	b134      	cbz	r4, 19030 <lv_task_handler+0xf4>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
   19022:	7d22      	ldrb	r2, [r4, #20]
   19024:	f003 0307 	and.w	r3, r3, #7
   19028:	f002 0207 	and.w	r2, r2, #7
   1902c:	4293      	cmp	r3, r2
   1902e:	d9c0      	bls.n	18fb2 <lv_task_handler+0x76>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   19030:	f7ff ff58 	bl	18ee4 <lv_task_exec>
   19034:	2800      	cmp	r0, #0
   19036:	d0bc      	beq.n	18fb2 <lv_task_handler+0x76>
                    if(!task_created && !task_deleted) {
   19038:	783b      	ldrb	r3, [r7, #0]
   1903a:	2b00      	cmp	r3, #0
   1903c:	d1bd      	bne.n	18fba <lv_task_handler+0x7e>
   1903e:	782b      	ldrb	r3, [r5, #0]
   19040:	2b00      	cmp	r3, #0
   19042:	d1ba      	bne.n	18fba <lv_task_handler+0x7e>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
   19044:	f8d8 4000 	ldr.w	r4, [r8]
    } while(!end_flag);
   19048:	e78d      	b.n	18f66 <lv_task_handler+0x2a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
   1904a:	f8c9 6000 	str.w	r6, [r9]
   1904e:	e799      	b.n	18f84 <lv_task_handler+0x48>
        if(next->prio != LV_TASK_PRIO_OFF) {
   19050:	7d23      	ldrb	r3, [r4, #20]
   19052:	075b      	lsls	r3, r3, #29
   19054:	d00c      	beq.n	19070 <lv_task_handler+0x134>
    uint32_t elp = lv_tick_elaps(task->last_run);
   19056:	6860      	ldr	r0, [r4, #4]
   19058:	f00c f8a8 	bl	251ac <lv_tick_elaps>
    if(elp >= task->period)
   1905c:	6823      	ldr	r3, [r4, #0]
   1905e:	4298      	cmp	r0, r3
        return 0;
    return task->period - elp;
   19060:	bf38      	it	cc
   19062:	1a18      	subcc	r0, r3, r0
            if(delay < time_till_next)
   19064:	682b      	ldr	r3, [r5, #0]
        return 0;
   19066:	bf28      	it	cs
   19068:	2000      	movcs	r0, #0
            if(delay < time_till_next)
   1906a:	4283      	cmp	r3, r0
                time_till_next = delay;
   1906c:	bf88      	it	hi
   1906e:	6028      	strhi	r0, [r5, #0]
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   19070:	4621      	mov	r1, r4
   19072:	4630      	mov	r0, r6
   19074:	f00c fb8c 	bl	25790 <_lv_ll_get_next>
   19078:	4604      	mov	r4, r0
   1907a:	e7cc      	b.n	19016 <lv_task_handler+0xda>
            if(task_created || task_deleted) {
   1907c:	782b      	ldrb	r3, [r5, #0]
   1907e:	2b00      	cmp	r3, #0
   19080:	d19b      	bne.n	18fba <lv_task_handler+0x7e>
            if(task_list_changed) {
   19082:	f89a 2000 	ldrb.w	r2, [sl]
   19086:	2a00      	cmp	r2, #0
   19088:	d0df      	beq.n	1904a <lv_task_handler+0x10e>
                task_list_changed = false;
   1908a:	f88a 3000 	strb.w	r3, [sl]
                task_interrupter = NULL;
   1908e:	461c      	mov	r4, r3
   19090:	e769      	b.n	18f66 <lv_task_handler+0x2a>
   19092:	bf00      	nop
   19094:	200030a9 	.word	0x200030a9
   19098:	200030ab 	.word	0x200030ab
   1909c:	20002e50 	.word	0x20002e50
   190a0:	200030ad 	.word	0x200030ad
   190a4:	200030ac 	.word	0x200030ac
   190a8:	20002e38 	.word	0x20002e38
   190ac:	20002e4c 	.word	0x20002e4c
   190b0:	20002e54 	.word	0x20002e54
   190b4:	200030aa 	.word	0x200030aa
   190b8:	20002e58 	.word	0x20002e58
   190bc:	20002e34 	.word	0x20002e34
   190c0:	200030ae 	.word	0x200030ae

000190c4 <lv_task_set_prio>:
    if(task->prio == prio) return;
   190c4:	7d03      	ldrb	r3, [r0, #20]
   190c6:	f003 0307 	and.w	r3, r3, #7
   190ca:	428b      	cmp	r3, r1
{
   190cc:	b570      	push	{r4, r5, r6, lr}
   190ce:	4604      	mov	r4, r0
   190d0:	460d      	mov	r5, r1
    if(task->prio == prio) return;
   190d2:	d017      	beq.n	19104 <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   190d4:	480f      	ldr	r0, [pc, #60]	; (19114 <lv_task_set_prio+0x50>)
   190d6:	4e0f      	ldr	r6, [pc, #60]	; (19114 <lv_task_set_prio+0x50>)
   190d8:	f00c fb54 	bl	25784 <_lv_ll_get_head>
   190dc:	4602      	mov	r2, r0
   190de:	b132      	cbz	r2, 190ee <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
   190e0:	7d13      	ldrb	r3, [r2, #20]
   190e2:	f003 0307 	and.w	r3, r3, #7
   190e6:	429d      	cmp	r5, r3
   190e8:	db0d      	blt.n	19106 <lv_task_set_prio+0x42>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
   190ea:	42a2      	cmp	r2, r4
   190ec:	d003      	beq.n	190f6 <lv_task_set_prio+0x32>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
   190ee:	4809      	ldr	r0, [pc, #36]	; (19114 <lv_task_set_prio+0x50>)
   190f0:	4621      	mov	r1, r4
   190f2:	f00c fbc1 	bl	25878 <_lv_ll_move_before>
    task_list_changed = true;
   190f6:	4b08      	ldr	r3, [pc, #32]	; (19118 <lv_task_set_prio+0x54>)
   190f8:	2201      	movs	r2, #1
   190fa:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
   190fc:	7d23      	ldrb	r3, [r4, #20]
   190fe:	f365 0302 	bfi	r3, r5, #0, #3
   19102:	7523      	strb	r3, [r4, #20]
}
   19104:	bd70      	pop	{r4, r5, r6, pc}
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   19106:	4611      	mov	r1, r2
   19108:	4630      	mov	r0, r6
   1910a:	f00c fb41 	bl	25790 <_lv_ll_get_next>
   1910e:	4602      	mov	r2, r0
   19110:	e7e5      	b.n	190de <lv_task_set_prio+0x1a>
   19112:	bf00      	nop
   19114:	20002e38 	.word	0x20002e38
   19118:	200030ae 	.word	0x200030ae

0001911c <_lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t _lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
                             lv_txt_flag_t flag)
{
   1911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19120:	4688      	mov	r8, r1
   19122:	b085      	sub	sp, #20
   19124:	4617      	mov	r7, r2
   19126:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
   19128:	4605      	mov	r5, r0
   1912a:	2400      	movs	r4, #0
   1912c:	2800      	cmp	r0, #0
   1912e:	d040      	beq.n	191b2 <_lv_txt_get_width+0x96>
    if(font == NULL) return 0;
   19130:	2a00      	cmp	r2, #0
   19132:	d040      	beq.n	191b6 <_lv_txt_get_width+0x9a>

    uint32_t i                   = 0;
   19134:	9403      	str	r4, [sp, #12]
    lv_coord_t width             = 0;
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   19136:	f88d 400b 	strb.w	r4, [sp, #11]

    if(length != 0) {
   1913a:	2900      	cmp	r1, #0
   1913c:	d132      	bne.n	191a4 <_lv_txt_get_width+0x88>
    lv_coord_t width             = 0;
   1913e:	460c      	mov	r4, r1
                                      aligned */
        }
    }

    return width;
}
   19140:	4620      	mov	r0, r4
   19142:	b005      	add	sp, #20
   19144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   19148:	f8da 3000 	ldr.w	r3, [sl]
   1914c:	a903      	add	r1, sp, #12
   1914e:	4628      	mov	r0, r5
   19150:	4798      	blx	r3
   19152:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
   19154:	9803      	ldr	r0, [sp, #12]
   19156:	f8da 3000 	ldr.w	r3, [sl]
   1915a:	2100      	movs	r1, #0
   1915c:	4428      	add	r0, r5
   1915e:	4798      	blx	r3
   19160:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19162:	f1b9 0f00 	cmp.w	r9, #0
   19166:	d10e      	bne.n	19186 <_lv_txt_get_width+0x6a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
   19168:	4659      	mov	r1, fp
   1916a:	4638      	mov	r0, r7
   1916c:	f00c fcc2 	bl	25af4 <lv_font_get_glyph_width>
   19170:	b200      	sxth	r0, r0
            if(char_width > 0) {
   19172:	2800      	cmp	r0, #0
   19174:	dc11      	bgt.n	1919a <_lv_txt_get_width+0x7e>
        while(i < length) {
   19176:	9b03      	ldr	r3, [sp, #12]
   19178:	4598      	cmp	r8, r3
   1917a:	d8e5      	bhi.n	19148 <_lv_txt_get_width+0x2c>
        if(width > 0) {
   1917c:	2c00      	cmp	r4, #0
   1917e:	dddf      	ble.n	19140 <_lv_txt_get_width+0x24>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
   19180:	1ba4      	subs	r4, r4, r6
   19182:	b224      	sxth	r4, r4
   19184:	e7dc      	b.n	19140 <_lv_txt_get_width+0x24>
   19186:	9001      	str	r0, [sp, #4]
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
   19188:	4659      	mov	r1, fp
   1918a:	f10d 000b 	add.w	r0, sp, #11
   1918e:	f00c fc0f 	bl	259b0 <_lv_txt_is_cmd>
   19192:	9a01      	ldr	r2, [sp, #4]
   19194:	2800      	cmp	r0, #0
   19196:	d0e7      	beq.n	19168 <_lv_txt_get_width+0x4c>
   19198:	e7ed      	b.n	19176 <_lv_txt_get_width+0x5a>
                width += letter_space;
   1919a:	4434      	add	r4, r6
   1919c:	fa00 f484 	sxtah	r4, r0, r4
   191a0:	b224      	sxth	r4, r4
   191a2:	e7e8      	b.n	19176 <_lv_txt_get_width+0x5a>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   191a4:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   191a8:	f8df a010 	ldr.w	sl, [pc, #16]	; 191bc <_lv_txt_get_width+0xa0>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   191ac:	f009 0901 	and.w	r9, r9, #1
   191b0:	e7e1      	b.n	19176 <_lv_txt_get_width+0x5a>
    if(txt == NULL) return 0;
   191b2:	4604      	mov	r4, r0
   191b4:	e7c4      	b.n	19140 <_lv_txt_get_width+0x24>
   191b6:	4614      	mov	r4, r2
   191b8:	e7c2      	b.n	19140 <_lv_txt_get_width+0x24>
   191ba:	bf00      	nop
   191bc:	20000944 	.word	0x20000944

000191c0 <_lv_txt_get_next_line>:
{
   191c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191c4:	b08f      	sub	sp, #60	; 0x3c
   191c6:	4699      	mov	r9, r3
   191c8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   191cc:	9102      	str	r1, [sp, #8]
   191ce:	9204      	str	r2, [sp, #16]
   191d0:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
   191d2:	4606      	mov	r6, r0
   191d4:	b190      	cbz	r0, 191fc <_lv_txt_get_next_line+0x3c>
    if(font == NULL) return 0;
   191d6:	2900      	cmp	r1, #0
   191d8:	f000 80cd 	beq.w	19376 <_lv_txt_get_next_line+0x1b6>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
   191dc:	9b03      	ldr	r3, [sp, #12]
   191de:	f013 0312 	ands.w	r3, r3, #18
   191e2:	d00e      	beq.n	19202 <_lv_txt_get_next_line+0x42>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   191e4:	2000      	movs	r0, #0
   191e6:	e000      	b.n	191ea <_lv_txt_get_next_line+0x2a>
   191e8:	3001      	adds	r0, #1
   191ea:	5c33      	ldrb	r3, [r6, r0]
   191ec:	2b0a      	cmp	r3, #10
   191ee:	f000 80c4 	beq.w	1937a <_lv_txt_get_next_line+0x1ba>
   191f2:	2b0d      	cmp	r3, #13
   191f4:	f000 80c1 	beq.w	1937a <_lv_txt_get_next_line+0x1ba>
   191f8:	2b00      	cmp	r3, #0
   191fa:	d1f5      	bne.n	191e8 <_lv_txt_get_next_line+0x28>
}
   191fc:	b00f      	add	sp, #60	; 0x3c
   191fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   19202:	9a03      	ldr	r2, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   19204:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   19208:	f012 0202 	ands.w	r2, r2, #2
   1920c:	9205      	str	r2, [sp, #20]
   1920e:	f647 4218 	movw	r2, #31768	; 0x7c18
   19212:	bf18      	it	ne
   19214:	4691      	movne	r9, r2
    uint32_t i = 0;                                        /* Iterating index into txt */
   19216:	930b      	str	r3, [sp, #44]	; 0x2c
    while(txt[i] != '\0' && max_width > 0) {
   19218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1921a:	9300      	str	r3, [sp, #0]
   1921c:	eb06 0a03 	add.w	sl, r6, r3
   19220:	5cf3      	ldrb	r3, [r6, r3]
   19222:	2b00      	cmp	r3, #0
   19224:	f000 808e 	beq.w	19344 <_lv_txt_get_next_line+0x184>
   19228:	f1b9 0f00 	cmp.w	r9, #0
   1922c:	f340 808a 	ble.w	19344 <_lv_txt_get_next_line+0x184>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   19230:	9a05      	ldr	r2, [sp, #20]
   19232:	f647 4318 	movw	r3, #31768	; 0x7c18
   19236:	2a00      	cmp	r2, #0
   19238:	bf08      	it	eq
   1923a:	464b      	moveq	r3, r9
   1923c:	9307      	str	r3, [sp, #28]
    letter = _lv_txt_encoded_next(txt, &i_next);
   1923e:	4b50      	ldr	r3, [pc, #320]	; (19380 <_lv_txt_get_next_line+0x1c0>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   19240:	2400      	movs	r4, #0
    letter = _lv_txt_encoded_next(txt, &i_next);
   19242:	681a      	ldr	r2, [r3, #0]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   19244:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
   19248:	a90c      	add	r1, sp, #48	; 0x30
   1924a:	4650      	mov	r0, sl
   1924c:	4790      	blx	r2
    i_next_next = i_next;
   1924e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19250:	930d      	str	r3, [sp, #52]	; 0x34
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19252:	9b03      	ldr	r3, [sp, #12]
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
   19254:	9401      	str	r4, [sp, #4]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19256:	f003 0301 	and.w	r3, r3, #1
    letter = _lv_txt_encoded_next(txt, &i_next);
   1925a:	4680      	mov	r8, r0
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
   1925c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
   19260:	4627      	mov	r7, r4
    uint32_t letter_next = 0; /* Letter at i_next */
   19262:	4622      	mov	r2, r4
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   19264:	4625      	mov	r5, r4
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19266:	9308      	str	r3, [sp, #32]
    while(txt[i] != '\0') {
   19268:	f81a 1005 	ldrb.w	r1, [sl, r5]
   1926c:	b949      	cbnz	r1, 19282 <_lv_txt_get_next_line+0xc2>
    if(break_index == NO_BREAK_FOUND) {
   1926e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   19272:	d053      	beq.n	1931c <_lv_txt_get_next_line+0x15c>
    if(force) return break_index;
   19274:	9b00      	ldr	r3, [sp, #0]
   19276:	465d      	mov	r5, fp
   19278:	2b00      	cmp	r3, #0
   1927a:	d057      	beq.n	1932c <_lv_txt_get_next_line+0x16c>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
   1927c:	2400      	movs	r4, #0
    return 0;
   1927e:	4625      	mov	r5, r4
   19280:	e054      	b.n	1932c <_lv_txt_get_next_line+0x16c>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   19282:	4b3f      	ldr	r3, [pc, #252]	; (19380 <_lv_txt_get_next_line+0x1c0>)
   19284:	a90d      	add	r1, sp, #52	; 0x34
   19286:	681a      	ldr	r2, [r3, #0]
   19288:	4650      	mov	r0, sl
   1928a:	4790      	blx	r2
        word_len++;
   1928c:	9b01      	ldr	r3, [sp, #4]
   1928e:	3301      	adds	r3, #1
   19290:	9306      	str	r3, [sp, #24]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19292:	9b08      	ldr	r3, [sp, #32]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   19294:	4602      	mov	r2, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19296:	b173      	cbz	r3, 192b6 <_lv_txt_get_next_line+0xf6>
   19298:	9009      	str	r0, [sp, #36]	; 0x24
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
   1929a:	4641      	mov	r1, r8
   1929c:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   192a0:	f00c fb86 	bl	259b0 <_lv_txt_is_cmd>
   192a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   192a6:	b130      	cbz	r0, 192b6 <_lv_txt_get_next_line+0xf6>
        i_next = i_next_next;
   192a8:	e9dd 510c 	ldrd	r5, r1, [sp, #48]	; 0x30
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   192ac:	9b06      	ldr	r3, [sp, #24]
        i_next = i_next_next;
   192ae:	910c      	str	r1, [sp, #48]	; 0x30
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   192b0:	9301      	str	r3, [sp, #4]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   192b2:	4690      	mov	r8, r2
   192b4:	e7d8      	b.n	19268 <_lv_txt_get_next_line+0xa8>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   192b6:	4641      	mov	r1, r8
   192b8:	9802      	ldr	r0, [sp, #8]
   192ba:	9209      	str	r2, [sp, #36]	; 0x24
   192bc:	f00c fc1a 	bl	25af4 <lv_font_get_glyph_width>
   192c0:	b201      	sxth	r1, r0
        if(letter_w > 0) {
   192c2:	2900      	cmp	r1, #0
            cur_w += letter_space;
   192c4:	bfc8      	it	gt
   192c6:	9b04      	ldrgt	r3, [sp, #16]
        if(letter_w > 0) {
   192c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
        cur_w += letter_w;
   192ca:	fa07 f780 	sxtah	r7, r7, r0
   192ce:	b23f      	sxth	r7, r7
            cur_w += letter_space;
   192d0:	bfc4      	itt	gt
   192d2:	18ff      	addgt	r7, r7, r3
   192d4:	b23f      	sxthgt	r7, r7
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   192d6:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   192da:	d105      	bne.n	192e8 <_lv_txt_get_next_line+0x128>
   192dc:	9b04      	ldr	r3, [sp, #16]
   192de:	1af9      	subs	r1, r7, r3
   192e0:	9b07      	ldr	r3, [sp, #28]
   192e2:	4299      	cmp	r1, r3
   192e4:	bfc8      	it	gt
   192e6:	46ab      	movgt	fp, r5
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   192e8:	f1b8 0f0a 	cmp.w	r8, #10
   192ec:	d010      	beq.n	19310 <_lv_txt_get_next_line+0x150>
   192ee:	f1b8 0f0d 	cmp.w	r8, #13
   192f2:	d00d      	beq.n	19310 <_lv_txt_get_next_line+0x150>
   192f4:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   192f6:	4b23      	ldr	r3, [pc, #140]	; (19384 <_lv_txt_get_next_line+0x1c4>)
   192f8:	b2c8      	uxtb	r0, r1
   192fa:	5c18      	ldrb	r0, [r3, r0]
   192fc:	b920      	cbnz	r0, 19308 <_lv_txt_get_next_line+0x148>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
   192fe:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   19302:	bf08      	it	eq
   19304:	463c      	moveq	r4, r7
   19306:	e7cf      	b.n	192a8 <_lv_txt_get_next_line+0xe8>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   19308:	4580      	cmp	r8, r0
   1930a:	f101 0101 	add.w	r1, r1, #1
   1930e:	d1f2      	bne.n	192f6 <_lv_txt_get_next_line+0x136>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
   19310:	2d00      	cmp	r5, #0
   19312:	d1ac      	bne.n	1926e <_lv_txt_get_next_line+0xae>
   19314:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   19318:	d1ac      	bne.n	19274 <_lv_txt_get_next_line+0xb4>
   1931a:	463c      	mov	r4, r7
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
   1931c:	9b01      	ldr	r3, [sp, #4]
   1931e:	b123      	cbz	r3, 1932a <_lv_txt_get_next_line+0x16a>
   19320:	f1b8 0f0d 	cmp.w	r8, #13
   19324:	d102      	bne.n	1932c <_lv_txt_get_next_line+0x16c>
   19326:	2a0a      	cmp	r2, #10
   19328:	d100      	bne.n	1932c <_lv_txt_get_next_line+0x16c>
   1932a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
        max_width -= word_w;
   1932c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1932e:	eba9 0904 	sub.w	r9, r9, r4
   19332:	fa0f f989 	sxth.w	r9, r9
        if(advance == 0) {
   19336:	b975      	cbnz	r5, 19356 <_lv_txt_get_next_line+0x196>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
   19338:	b95b      	cbnz	r3, 19352 <_lv_txt_get_next_line+0x192>
   1933a:	4b11      	ldr	r3, [pc, #68]	; (19380 <_lv_txt_get_next_line+0x1c0>)
   1933c:	a90b      	add	r1, sp, #44	; 0x2c
   1933e:	681b      	ldr	r3, [r3, #0]
   19340:	4630      	mov	r0, r6
   19342:	4798      	blx	r3
    if(i == 0) {
   19344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19346:	b923      	cbnz	r3, 19352 <_lv_txt_get_next_line+0x192>
        _lv_txt_encoded_next(txt, &i);
   19348:	4b0d      	ldr	r3, [pc, #52]	; (19380 <_lv_txt_get_next_line+0x1c0>)
   1934a:	a90b      	add	r1, sp, #44	; 0x2c
   1934c:	681b      	ldr	r3, [r3, #0]
   1934e:	4630      	mov	r0, r6
   19350:	4798      	blx	r3
    return i;
   19352:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19354:	e752      	b.n	191fc <_lv_txt_get_next_line+0x3c>
        i += advance;
   19356:	441d      	add	r5, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
   19358:	7833      	ldrb	r3, [r6, #0]
        i += advance;
   1935a:	950b      	str	r5, [sp, #44]	; 0x2c
        if(txt[0] == '\n' || txt[0] == '\r') break;
   1935c:	2b0a      	cmp	r3, #10
   1935e:	d0f1      	beq.n	19344 <_lv_txt_get_next_line+0x184>
   19360:	2b0d      	cmp	r3, #13
   19362:	d0ef      	beq.n	19344 <_lv_txt_get_next_line+0x184>
        if(txt[i] == '\n' || txt[i] == '\r') {
   19364:	5d73      	ldrb	r3, [r6, r5]
   19366:	2b0a      	cmp	r3, #10
   19368:	d002      	beq.n	19370 <_lv_txt_get_next_line+0x1b0>
   1936a:	2b0d      	cmp	r3, #13
   1936c:	f47f af54 	bne.w	19218 <_lv_txt_get_next_line+0x58>
            i++;  /* Include the following newline in the current line */
   19370:	3501      	adds	r5, #1
   19372:	950b      	str	r5, [sp, #44]	; 0x2c
            break;
   19374:	e7e6      	b.n	19344 <_lv_txt_get_next_line+0x184>
    if(txt == NULL) return 0;
   19376:	9802      	ldr	r0, [sp, #8]
   19378:	e740      	b.n	191fc <_lv_txt_get_next_line+0x3c>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
   1937a:	3001      	adds	r0, #1
   1937c:	e73e      	b.n	191fc <_lv_txt_get_next_line+0x3c>
   1937e:	bf00      	nop
   19380:	20000944 	.word	0x20000944
   19384:	00028c20 	.word	0x00028c20

00019388 <get_glyph_dsc_id.isra.0.part.0>:

/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   19388:	b5f0      	push	{r4, r5, r6, r7, lr}
{
    if(letter == '\0') return 0;

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   1938a:	6804      	ldr	r4, [r0, #0]

    /*Check the cache first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   1938c:	69a3      	ldr	r3, [r4, #24]
   1938e:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   19390:	b085      	sub	sp, #20
   19392:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   19394:	d00b      	beq.n	193ae <get_glyph_dsc_id.isra.0.part.0+0x26>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
   19396:	8a67      	ldrh	r7, [r4, #18]
   19398:	2300      	movs	r3, #0
   1939a:	f3c7 0709 	ubfx	r7, r7, #0, #10
   1939e:	f04f 0c14 	mov.w	ip, #20
   193a2:	b29a      	uxth	r2, r3
   193a4:	4297      	cmp	r7, r2
   193a6:	d805      	bhi.n	193b4 <get_glyph_dsc_id.isra.0.part.0+0x2c>
        fdsc->last_letter = letter;
        fdsc->last_glyph_id = glyph_id;
        return glyph_id;
    }

    fdsc->last_letter = letter;
   193a8:	61a5      	str	r5, [r4, #24]
    fdsc->last_glyph_id = 0;
   193aa:	2000      	movs	r0, #0
   193ac:	e012      	b.n	193d4 <get_glyph_dsc_id.isra.0.part.0+0x4c>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   193ae:	69e0      	ldr	r0, [r4, #28]
    return 0;

}
   193b0:	b005      	add	sp, #20
   193b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   193b4:	68a2      	ldr	r2, [r4, #8]
   193b6:	fb0c f603 	mul.w	r6, ip, r3
   193ba:	1991      	adds	r1, r2, r6
   193bc:	5992      	ldr	r2, [r2, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   193be:	8888      	ldrh	r0, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   193c0:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
   193c2:	4282      	cmp	r2, r0
   193c4:	f103 0301 	add.w	r3, r3, #1
   193c8:	d8eb      	bhi.n	193a2 <get_glyph_dsc_id.isra.0.part.0+0x1a>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
   193ca:	7c8b      	ldrb	r3, [r1, #18]
   193cc:	b923      	cbnz	r3, 193d8 <get_glyph_dsc_id.isra.0.part.0+0x50>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
   193ce:	88c8      	ldrh	r0, [r1, #6]
   193d0:	4410      	add	r0, r2
        fdsc->last_letter = letter;
   193d2:	61a5      	str	r5, [r4, #24]
    fdsc->last_glyph_id = 0;
   193d4:	61e0      	str	r0, [r4, #28]
    return 0;
   193d6:	e7eb      	b.n	193b0 <get_glyph_dsc_id.isra.0.part.0+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
   193d8:	2b01      	cmp	r3, #1
   193da:	d104      	bne.n	193e6 <get_glyph_dsc_id.isra.0.part.0+0x5e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
   193dc:	68cb      	ldr	r3, [r1, #12]
   193de:	5c98      	ldrb	r0, [r3, r2]
   193e0:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   193e2:	4418      	add	r0, r3
   193e4:	e7f5      	b.n	193d2 <get_glyph_dsc_id.isra.0.part.0+0x4a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
   193e6:	2b02      	cmp	r3, #2
   193e8:	d113      	bne.n	19412 <get_glyph_dsc_id.isra.0.part.0+0x8a>
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   193ea:	4817      	ldr	r0, [pc, #92]	; (19448 <get_glyph_dsc_id.isra.0.part.0+0xc0>)
            uint16_t key = rcp;
   193ec:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   193f0:	8a0a      	ldrh	r2, [r1, #16]
   193f2:	9000      	str	r0, [sp, #0]
   193f4:	6889      	ldr	r1, [r1, #8]
   193f6:	f10d 000e 	add.w	r0, sp, #14
   193fa:	f00c fb54 	bl	25aa6 <_lv_utils_bsearch>
            if(p) {
   193fe:	2800      	cmp	r0, #0
   19400:	d0e7      	beq.n	193d2 <get_glyph_dsc_id.isra.0.part.0+0x4a>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   19402:	68a3      	ldr	r3, [r4, #8]
   19404:	441e      	add	r6, r3
   19406:	68b3      	ldr	r3, [r6, #8]
   19408:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
   1940a:	88f3      	ldrh	r3, [r6, #6]
   1940c:	eb03 0050 	add.w	r0, r3, r0, lsr #1
   19410:	e7df      	b.n	193d2 <get_glyph_dsc_id.isra.0.part.0+0x4a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
   19412:	2b03      	cmp	r3, #3
   19414:	d115      	bne.n	19442 <get_glyph_dsc_id.isra.0.part.0+0xba>
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   19416:	4b0c      	ldr	r3, [pc, #48]	; (19448 <get_glyph_dsc_id.isra.0.part.0+0xc0>)
            uint16_t key = rcp;
   19418:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1941c:	8a0a      	ldrh	r2, [r1, #16]
   1941e:	9300      	str	r3, [sp, #0]
   19420:	6889      	ldr	r1, [r1, #8]
   19422:	2302      	movs	r3, #2
   19424:	f10d 000e 	add.w	r0, sp, #14
   19428:	f00c fb3d 	bl	25aa6 <_lv_utils_bsearch>
            if(p) {
   1942c:	2800      	cmp	r0, #0
   1942e:	d0d0      	beq.n	193d2 <get_glyph_dsc_id.isra.0.part.0+0x4a>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   19430:	68a3      	ldr	r3, [r4, #8]
   19432:	441e      	add	r6, r3
   19434:	68b3      	ldr	r3, [r6, #8]
   19436:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
   19438:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   1943a:	68f3      	ldr	r3, [r6, #12]
   1943c:	5c18      	ldrb	r0, [r3, r0]
   1943e:	88f3      	ldrh	r3, [r6, #6]
   19440:	e7cf      	b.n	193e2 <get_glyph_dsc_id.isra.0.part.0+0x5a>
        uint32_t glyph_id = 0;
   19442:	2000      	movs	r0, #0
   19444:	e7c5      	b.n	193d2 <get_glyph_dsc_id.isra.0.part.0+0x4a>
   19446:	bf00      	nop
   19448:	00025b31 	.word	0x00025b31

0001944c <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
   1944c:	2a09      	cmp	r2, #9
{
   1944e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   19452:	460c      	mov	r4, r1
   19454:	4680      	mov	r8, r0
   19456:	4611      	mov	r1, r2
   19458:	469a      	mov	sl, r3
    if(unicode_letter == '\t') {
   1945a:	d006      	beq.n	1946a <lv_font_get_glyph_dsc_fmt_txt+0x1e>
    if(letter == '\0') return 0;
   1945c:	2a00      	cmp	r2, #0
   1945e:	d135      	bne.n	194cc <lv_font_get_glyph_dsc_fmt_txt+0x80>
    if(!gid) return false;
   19460:	2600      	movs	r6, #0
}
   19462:	4630      	mov	r0, r6
   19464:	b004      	add	sp, #16
   19466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        is_tab = true;
   1946a:	2601      	movs	r6, #1
        unicode_letter = ' ';
   1946c:	2120      	movs	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   1946e:	46c1      	mov	r9, r8
   19470:	f859 7f10 	ldr.w	r7, [r9, #16]!
   19474:	4648      	mov	r0, r9
   19476:	f7ff ff87 	bl	19388 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return false;
   1947a:	4605      	mov	r5, r0
   1947c:	2800      	cmp	r0, #0
   1947e:	d0ef      	beq.n	19460 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(fdsc->kern_dsc) {
   19480:	68fb      	ldr	r3, [r7, #12]
   19482:	bb2b      	cbnz	r3, 194d0 <lv_font_get_glyph_dsc_fmt_txt+0x84>
    int8_t kvalue = 0;
   19484:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   19486:	687b      	ldr	r3, [r7, #4]
   19488:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   1948c:	8a3b      	ldrh	r3, [r7, #16]
   1948e:	4343      	muls	r3, r0
    uint32_t adv_w = gdsc->adv_w;
   19490:	8868      	ldrh	r0, [r5, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   19492:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
   19494:	f3c0 120b 	ubfx	r2, r0, #4, #12
   19498:	0900      	lsrs	r0, r0, #4
    if(is_tab) adv_w *= 2;
   1949a:	b106      	cbz	r6, 1949e <lv_font_get_glyph_dsc_fmt_txt+0x52>
   1949c:	0050      	lsls	r0, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
   1949e:	3308      	adds	r3, #8
   194a0:	4403      	add	r3, r0
   194a2:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
   194a4:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
   194a6:	796b      	ldrb	r3, [r5, #5]
   194a8:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
   194aa:	792b      	ldrb	r3, [r5, #4]
   194ac:	8063      	strh	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
   194ae:	f995 2006 	ldrsb.w	r2, [r5, #6]
   194b2:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
   194b4:	f995 2007 	ldrsb.w	r2, [r5, #7]
   194b8:	8122      	strh	r2, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
   194ba:	7cfa      	ldrb	r2, [r7, #19]
   194bc:	f3c2 0283 	ubfx	r2, r2, #2, #4
   194c0:	72a2      	strb	r2, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
   194c2:	2e00      	cmp	r6, #0
   194c4:	d060      	beq.n	19588 <lv_font_get_glyph_dsc_fmt_txt+0x13c>
   194c6:	005b      	lsls	r3, r3, #1
   194c8:	8063      	strh	r3, [r4, #2]
   194ca:	e7ca      	b.n	19462 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    bool is_tab = false;
   194cc:	2600      	movs	r6, #0
   194ce:	e7ce      	b.n	1946e <lv_font_get_glyph_dsc_fmt_txt+0x22>
    if(letter == '\0') return 0;
   194d0:	f1ba 0f00 	cmp.w	sl, #0
   194d4:	d0d6      	beq.n	19484 <lv_font_get_glyph_dsc_fmt_txt+0x38>
   194d6:	4651      	mov	r1, sl
   194d8:	4648      	mov	r0, r9
   194da:	f7ff ff55 	bl	19388 <get_glyph_dsc_id.isra.0.part.0>
        if(gid_next) {
   194de:	2800      	cmp	r0, #0
   194e0:	d0d0      	beq.n	19484 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
   194e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
{
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;

    int8_t value = 0;

    if(fdsc->kern_classes == 0) {
   194e6:	f8d3 800c 	ldr.w	r8, [r3, #12]
   194ea:	7cdb      	ldrb	r3, [r3, #19]
   194ec:	065b      	lsls	r3, r3, #25
   194ee:	d436      	bmi.n	1955e <lv_font_get_glyph_dsc_fmt_txt+0x112>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
        if(kdsc->glyph_ids_size == 0) {
   194f0:	f898 300b 	ldrb.w	r3, [r8, #11]
   194f4:	f013 0303 	ands.w	r3, r3, #3
   194f8:	d119      	bne.n	1952e <lv_font_get_glyph_dsc_fmt_txt+0xe2>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint8_t * g_ids = kdsc->glyph_ids;
   194fa:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   194fe:	f8d8 2008 	ldr.w	r2, [r8, #8]
   19502:	4b22      	ldr	r3, [pc, #136]	; (1958c <lv_font_get_glyph_dsc_fmt_txt+0x140>)
   19504:	9300      	str	r3, [sp, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
   19506:	eb05 2000 	add.w	r0, r5, r0, lsl #8
   1950a:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   1950e:	2302      	movs	r3, #2
   19510:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   19514:	4649      	mov	r1, r9
   19516:	a803      	add	r0, sp, #12
   19518:	f00c fac5 	bl	25aa6 <_lv_utils_bsearch>

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
   1951c:	2800      	cmp	r0, #0
   1951e:	d0b2      	beq.n	19486 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
   19520:	eba0 0009 	sub.w	r0, r0, r9
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
   19524:	0840      	lsrs	r0, r0, #1

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
                value = kdsc->values[ofs];
   19526:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1952a:	5618      	ldrsb	r0, [r3, r0]
   1952c:	e7ab      	b.n	19486 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
   1952e:	2b01      	cmp	r3, #1
   19530:	d1a8      	bne.n	19484 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint16_t * g_ids = kdsc->glyph_ids;
   19532:	f8d8 9000 	ldr.w	r9, [r8]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   19536:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1953a:	4b15      	ldr	r3, [pc, #84]	; (19590 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
   1953c:	9300      	str	r3, [sp, #0]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
   1953e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
   19542:	9003      	str	r0, [sp, #12]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   19544:	2304      	movs	r3, #4
   19546:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1954a:	4649      	mov	r1, r9
   1954c:	a803      	add	r0, sp, #12
   1954e:	f00c faaa 	bl	25aa6 <_lv_utils_bsearch>
            if(kid_p) {
   19552:	2800      	cmp	r0, #0
   19554:	d097      	beq.n	19486 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
   19556:	eba0 0009 	sub.w	r0, r0, r9
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
   1955a:	0900      	lsrs	r0, r0, #4
   1955c:	e7e3      	b.n	19526 <lv_font_get_glyph_dsc_fmt_txt+0xda>
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
   1955e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19562:	5d5b      	ldrb	r3, [r3, r5]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
   19564:	2b00      	cmp	r3, #0
   19566:	d08d      	beq.n	19484 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
   19568:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1956c:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
   1956e:	2900      	cmp	r1, #0
   19570:	d088      	beq.n	19484 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
   19572:	f8d8 2000 	ldr.w	r2, [r8]
   19576:	f898 000d 	ldrb.w	r0, [r8, #13]
   1957a:	3b01      	subs	r3, #1
   1957c:	440a      	add	r2, r1
   1957e:	fb00 2303 	mla	r3, r0, r3, r2
   19582:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
   19586:	e77e      	b.n	19486 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
   19588:	2601      	movs	r6, #1
   1958a:	e76a      	b.n	19462 <lv_font_get_glyph_dsc_fmt_txt+0x16>
   1958c:	00025b0d 	.word	0x00025b0d
   19590:	00025b1f 	.word	0x00025b1f

00019594 <_lv_font_clean_up_fmt_txt>:
{
   19594:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
   19596:	4c04      	ldr	r4, [pc, #16]	; (195a8 <_lv_font_clean_up_fmt_txt+0x14>)
   19598:	6820      	ldr	r0, [r4, #0]
   1959a:	b118      	cbz	r0, 195a4 <_lv_font_clean_up_fmt_txt+0x10>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
   1959c:	f7ff fb68 	bl	18c70 <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
   195a0:	2300      	movs	r3, #0
   195a2:	6023      	str	r3, [r4, #0]
}
   195a4:	bd10      	pop	{r4, pc}
   195a6:	bf00      	nop
   195a8:	20002d88 	.word	0x20002d88

000195ac <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
   195ac:	b570      	push	{r4, r5, r6, lr}
   195ae:	4604      	mov	r4, r0
    if(th->base) {
   195b0:	6880      	ldr	r0, [r0, #8]
{
   195b2:	460d      	mov	r5, r1
   195b4:	4616      	mov	r6, r2
    if(th->base) {
   195b6:	b108      	cbz	r0, 195bc <apply_theme+0x10>
        apply_theme(th->base, obj, name);
   195b8:	f7ff fff8 	bl	195ac <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
   195bc:	6863      	ldr	r3, [r4, #4]
   195be:	b123      	cbz	r3, 195ca <apply_theme+0x1e>
        th->apply_xcb(obj, name);
   195c0:	4631      	mov	r1, r6
   195c2:	4628      	mov	r0, r5
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
   195c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_xcb(obj, name);
   195c8:	4718      	bx	r3
    else if(th->apply_cb) {
   195ca:	6823      	ldr	r3, [r4, #0]
   195cc:	b133      	cbz	r3, 195dc <apply_theme+0x30>
        th->apply_cb(act_theme, obj, name);
   195ce:	4804      	ldr	r0, [pc, #16]	; (195e0 <apply_theme+0x34>)
   195d0:	4632      	mov	r2, r6
   195d2:	4629      	mov	r1, r5
   195d4:	6800      	ldr	r0, [r0, #0]
}
   195d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_cb(act_theme, obj, name);
   195da:	4718      	bx	r3
}
   195dc:	bd70      	pop	{r4, r5, r6, pc}
   195de:	bf00      	nop
   195e0:	20002e5c 	.word	0x20002e5c

000195e4 <lv_theme_set_act>:
    act_theme = th;
   195e4:	4b01      	ldr	r3, [pc, #4]	; (195ec <lv_theme_set_act+0x8>)
   195e6:	6018      	str	r0, [r3, #0]
}
   195e8:	4770      	bx	lr
   195ea:	bf00      	nop
   195ec:	20002e5c 	.word	0x20002e5c

000195f0 <lv_theme_apply>:
{
   195f0:	b538      	push	{r3, r4, r5, lr}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
    switch(name) {
   195f2:	1e4b      	subs	r3, r1, #1
   195f4:	2b02      	cmp	r3, #2
{
   195f6:	4605      	mov	r5, r0
   195f8:	460c      	mov	r4, r1
    switch(name) {
   195fa:	d802      	bhi.n	19602 <lv_theme_apply+0x12>
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   195fc:	2100      	movs	r1, #0
   195fe:	f008 f839 	bl	21674 <lv_obj_clean_style_list>
    apply_theme(act_theme, obj, name);
   19602:	4b04      	ldr	r3, [pc, #16]	; (19614 <lv_theme_apply+0x24>)
   19604:	4622      	mov	r2, r4
   19606:	6818      	ldr	r0, [r3, #0]
   19608:	4629      	mov	r1, r5
}
   1960a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(act_theme, obj, name);
   1960e:	f7ff bfcd 	b.w	195ac <apply_theme>
   19612:	bf00      	nop
   19614:	20002e5c 	.word	0x20002e5c

00019618 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
   19618:	4b01      	ldr	r3, [pc, #4]	; (19620 <lv_theme_get_font_normal+0x8>)
   1961a:	681b      	ldr	r3, [r3, #0]
}
   1961c:	6958      	ldr	r0, [r3, #20]
   1961e:	4770      	bx	lr
   19620:	20002e5c 	.word	0x20002e5c

00019624 <theme_apply>:
{
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
   19624:	2a02      	cmp	r2, #2
{
   19626:	b510      	push	{r4, lr}
   19628:	460c      	mov	r4, r1
    switch(name) {
   1962a:	d012      	beq.n	19652 <theme_apply+0x2e>
   1962c:	2a03      	cmp	r2, #3
   1962e:	d018      	beq.n	19662 <theme_apply+0x3e>
   19630:	2a01      	cmp	r2, #1
   19632:	d107      	bne.n	19644 <theme_apply+0x20>
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   19634:	2100      	movs	r1, #0
   19636:	4620      	mov	r0, r4
   19638:	f008 f80a 	bl	21650 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
   1963c:	4b0b      	ldr	r3, [pc, #44]	; (1966c <theme_apply+0x48>)
   1963e:	6819      	ldr	r1, [r3, #0]
            break;
        case LV_THEME_OBJ:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
            _lv_style_list_add_style(list, &styles->bg);
   19640:	f009 f892 	bl	22768 <_lv_style_list_add_style>
        default:
            break;
    }


    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   19644:	22ff      	movs	r2, #255	; 0xff
   19646:	4620      	mov	r0, r4
   19648:	4611      	mov	r1, r2


}
   1964a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   1964e:	f7fd b8cd 	b.w	167ec <lv_obj_refresh_style>
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   19652:	2100      	movs	r1, #0
   19654:	4620      	mov	r0, r4
   19656:	f007 fffb 	bl	21650 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
   1965a:	4b04      	ldr	r3, [pc, #16]	; (1966c <theme_apply+0x48>)
   1965c:	6819      	ldr	r1, [r3, #0]
   1965e:	3104      	adds	r1, #4
   19660:	e7ee      	b.n	19640 <theme_apply+0x1c>
            list = lv_obj_get_style_list(obj, LV_LABEL_PART_MAIN);
   19662:	2100      	movs	r1, #0
   19664:	4620      	mov	r0, r4
   19666:	f007 fff3 	bl	21650 <lv_obj_get_style_list>
            break;
   1966a:	e7eb      	b.n	19644 <theme_apply+0x20>
   1966c:	20002e60 	.word	0x20002e60

00019670 <lv_theme_mono_init>:
{
   19670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19674:	4680      	mov	r8, r0
        LV_GC_ROOT(_lv_theme_mono_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   19676:	2038      	movs	r0, #56	; 0x38
{
   19678:	4689      	mov	r9, r1
   1967a:	4616      	mov	r6, r2
   1967c:	461f      	mov	r7, r3
        LV_GC_ROOT(_lv_theme_mono_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   1967e:	f7ff fae3 	bl	18c48 <lv_mem_alloc>
   19682:	4bd0      	ldr	r3, [pc, #832]	; (199c4 <lv_theme_mono_init+0x354>)
    theme.color_primary = color_primary;
   19684:	4dd0      	ldr	r5, [pc, #832]	; (199c8 <lv_theme_mono_init+0x358>)
        LV_GC_ROOT(_lv_theme_mono_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   19686:	6018      	str	r0, [r3, #0]
    theme.font_normal = font_normal;
   19688:	9b08      	ldr	r3, [sp, #32]
   1968a:	616b      	str	r3, [r5, #20]
    theme.font_subtitle = font_subtitle;
   1968c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_mono_styles);
   1968e:	4ccf      	ldr	r4, [pc, #828]	; (199cc <lv_theme_mono_init+0x35c>)
    theme.font_subtitle = font_subtitle;
   19690:	61ab      	str	r3, [r5, #24]
    theme.font_title = font_title;
   19692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_mono_styles);
   19694:	6020      	str	r0, [r4, #0]
    theme.flags = flags;
   19696:	e9c5 3607 	strd	r3, r6, [r5, #28]
    theme.color_primary = color_primary;
   1969a:	f885 800c 	strb.w	r8, [r5, #12]
    theme.color_secondary = color_secondary;
   1969e:	f885 900d 	strb.w	r9, [r5, #13]
    theme.font_small = font_small;
   196a2:	612f      	str	r7, [r5, #16]
    style_init_reset(&styles->scr);
   196a4:	f00c fa64 	bl	25b70 <style_init_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   196a8:	6820      	ldr	r0, [r4, #0]
   196aa:	22ff      	movs	r2, #255	; 0xff
   196ac:	212c      	movs	r1, #44	; 0x2c
   196ae:	f009 f95e 	bl	2296e <_lv_style_set_opa>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   196b2:	7b2a      	ldrb	r2, [r5, #12]
   196b4:	6820      	ldr	r0, [r4, #0]
   196b6:	43d2      	mvns	r2, r2
   196b8:	f002 0201 	and.w	r2, r2, #1
   196bc:	2129      	movs	r1, #41	; 0x29
   196be:	f009 f912 	bl	228e6 <_lv_style_set_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, FG_COLOR);
   196c2:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   196c4:	6820      	ldr	r0, [r4, #0]
   196c6:	f002 0201 	and.w	r2, r2, #1
   196ca:	f248 0189 	movw	r1, #32905	; 0x8089
   196ce:	f009 f90a 	bl	228e6 <_lv_style_set_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, FG_COLOR);
   196d2:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   196d4:	6820      	ldr	r0, [r4, #0]
   196d6:	f002 0201 	and.w	r2, r2, #1
   196da:	2179      	movs	r1, #121	; 0x79
   196dc:	f009 f903 	bl	228e6 <_lv_style_set_color>
    style_init_reset(&styles->bg);
   196e0:	6820      	ldr	r0, [r4, #0]
   196e2:	3004      	adds	r0, #4
   196e4:	f00c fa44 	bl	25b70 <style_init_reset>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
   196e8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   196ea:	2201      	movs	r2, #1
   196ec:	2133      	movs	r1, #51	; 0x33
   196ee:	3004      	adds	r0, #4
   196f0:	f009 f8b5 	bl	2285e <_lv_style_set_int>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, RADIUS);
   196f4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   196f6:	2204      	movs	r2, #4
   196f8:	4410      	add	r0, r2
   196fa:	2101      	movs	r1, #1
   196fc:	f009 f8af 	bl	2285e <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   19700:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   19702:	22ff      	movs	r2, #255	; 0xff
   19704:	212c      	movs	r1, #44	; 0x2c
   19706:	3004      	adds	r0, #4
   19708:	f009 f931 	bl	2296e <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, BG_COLOR);
   1970c:	7b2a      	ldrb	r2, [r5, #12]
   1970e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   19710:	43d2      	mvns	r2, r2
   19712:	f002 0201 	and.w	r2, r2, #1
   19716:	2129      	movs	r1, #41	; 0x29
   19718:	3004      	adds	r0, #4
   1971a:	f009 f8e4 	bl	228e6 <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   1971e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   19720:	2202      	movs	r2, #2
   19722:	2130      	movs	r1, #48	; 0x30
   19724:	3004      	adds	r0, #4
   19726:	f009 f89a 	bl	2285e <_lv_style_set_int>
    lv_style_set_border_width(&styles->bg, LV_STATE_FOCUSED, BORDER_WIDTH * 2);
   1972a:	6820      	ldr	r0, [r4, #0]
   1972c:	2204      	movs	r2, #4
   1972e:	4410      	add	r0, r2
   19730:	f44f 710c 	mov.w	r1, #560	; 0x230
   19734:	f009 f893 	bl	2285e <_lv_style_set_int>
    lv_style_set_border_width(&styles->bg, LV_STATE_FOCUSED | LV_STATE_EDITED, BORDER_WIDTH * 3);
   19738:	6820      	ldr	r0, [r4, #0]
   1973a:	2206      	movs	r2, #6
   1973c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
   19740:	3004      	adds	r0, #4
   19742:	f009 f88c 	bl	2285e <_lv_style_set_int>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   19746:	6820      	ldr	r0, [r4, #0]
   19748:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   1974a:	2139      	movs	r1, #57	; 0x39
   1974c:	f002 0201 	and.w	r2, r2, #1
   19750:	3004      	adds	r0, #4
   19752:	f009 f8c8 	bl	228e6 <_lv_style_set_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, LV_MATH_MAX(LV_DPI / 100, 1));
   19756:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   19758:	2201      	movs	r2, #1
   1975a:	2190      	movs	r1, #144	; 0x90
   1975c:	3004      	adds	r0, #4
   1975e:	f009 f87e 	bl	2285e <_lv_style_set_int>
    lv_style_set_scale_end_line_width(&styles->bg, LV_STATE_DEFAULT, LV_MATH_MAX(LV_DPI / 100, 1));
   19762:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   19764:	2201      	movs	r2, #1
   19766:	21c3      	movs	r1, #195	; 0xc3
   19768:	3004      	adds	r0, #4
   1976a:	f009 f878 	bl	2285e <_lv_style_set_int>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1976e:	6820      	ldr	r0, [r4, #0]
   19770:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   19772:	2199      	movs	r1, #153	; 0x99
   19774:	f002 0201 	and.w	r2, r2, #1
   19778:	3004      	adds	r0, #4
   1977a:	f009 f8b4 	bl	228e6 <_lv_style_set_color>
    lv_style_set_scale_grad_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1977e:	6820      	ldr	r0, [r4, #0]
   19780:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   19782:	21c9      	movs	r1, #201	; 0xc9
   19784:	f002 0201 	and.w	r2, r2, #1
   19788:	3004      	adds	r0, #4
   1978a:	f009 f8ac 	bl	228e6 <_lv_style_set_color>
    lv_style_set_scale_end_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1978e:	6820      	ldr	r0, [r4, #0]
   19790:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   19792:	21ca      	movs	r1, #202	; 0xca
   19794:	f002 0201 	and.w	r2, r2, #1
   19798:	3004      	adds	r0, #4
   1979a:	f009 f8a4 	bl	228e6 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1979e:	6820      	ldr	r0, [r4, #0]
   197a0:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   197a2:	f248 0189 	movw	r1, #32905	; 0x8089
   197a6:	f002 0201 	and.w	r2, r2, #1
   197aa:	3004      	adds	r0, #4
   197ac:	f009 f89b 	bl	228e6 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   197b0:	6820      	ldr	r0, [r4, #0]
   197b2:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   197b4:	2179      	movs	r1, #121	; 0x79
   197b6:	f002 0201 	and.w	r2, r2, #1
   197ba:	3004      	adds	r0, #4
   197bc:	f009 f893 	bl	228e6 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   197c0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   197c2:	220d      	movs	r2, #13
   197c4:	2112      	movs	r1, #18
   197c6:	3004      	adds	r0, #4
   197c8:	f009 f849 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   197cc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   197ce:	220d      	movs	r2, #13
   197d0:	2113      	movs	r1, #19
   197d2:	3004      	adds	r0, #4
   197d4:	f009 f843 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   197d8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   197da:	220d      	movs	r2, #13
   197dc:	2110      	movs	r1, #16
   197de:	3004      	adds	r0, #4
   197e0:	f009 f83d 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   197e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   197e6:	220d      	movs	r2, #13
   197e8:	2111      	movs	r1, #17
   197ea:	3004      	adds	r0, #4
   197ec:	f009 f837 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   197f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   197f2:	220d      	movs	r2, #13
   197f4:	2114      	movs	r1, #20
   197f6:	3004      	adds	r0, #4
   197f8:	f009 f831 	bl	2285e <_lv_style_set_int>
    style_init_reset(&styles->clip_corner);
   197fc:	6820      	ldr	r0, [r4, #0]
   197fe:	3008      	adds	r0, #8
   19800:	f00c f9b6 	bl	25b70 <style_init_reset>
    lv_style_set_clip_corner(&styles->clip_corner, LV_STATE_DEFAULT, true);
   19804:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   19806:	2201      	movs	r2, #1
   19808:	2102      	movs	r1, #2
   1980a:	3008      	adds	r0, #8
   1980c:	f009 f827 	bl	2285e <_lv_style_set_int>
    style_init_reset(&styles->btn);
   19810:	6820      	ldr	r0, [r4, #0]
   19812:	300c      	adds	r0, #12
   19814:	f00c f9ac 	bl	25b70 <style_init_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, RADIUS);
   19818:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1981a:	2204      	movs	r2, #4
   1981c:	2101      	movs	r1, #1
   1981e:	300c      	adds	r0, #12
   19820:	f009 f81d 	bl	2285e <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   19824:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   19826:	2202      	movs	r2, #2
   19828:	2130      	movs	r1, #48	; 0x30
   1982a:	300c      	adds	r0, #12
   1982c:	f009 f817 	bl	2285e <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_FOCUSED, BORDER_WIDTH + 1);
   19830:	6820      	ldr	r0, [r4, #0]
   19832:	2203      	movs	r2, #3
   19834:	f44f 710c 	mov.w	r1, #560	; 0x230
   19838:	300c      	adds	r0, #12
   1983a:	f009 f810 	bl	2285e <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_FOCUSED | LV_STATE_EDITED, BORDER_WIDTH + 2);
   1983e:	6820      	ldr	r0, [r4, #0]
   19840:	2204      	movs	r2, #4
   19842:	f44f 61c6 	mov.w	r1, #1584	; 0x630
   19846:	300c      	adds	r0, #12
   19848:	f009 f809 	bl	2285e <_lv_style_set_int>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1984c:	6820      	ldr	r0, [r4, #0]
   1984e:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   19850:	2139      	movs	r1, #57	; 0x39
   19852:	f002 0201 	and.w	r2, r2, #1
   19856:	300c      	adds	r0, #12
   19858:	f009 f845 	bl	228e6 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, BG_COLOR);
   1985c:	7b2a      	ldrb	r2, [r5, #12]
   1985e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   19860:	43d2      	mvns	r2, r2
   19862:	f002 0201 	and.w	r2, r2, #1
   19866:	2129      	movs	r1, #41	; 0x29
   19868:	300c      	adds	r0, #12
   1986a:	f009 f83c 	bl	228e6 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, FG_COLOR);
   1986e:	6820      	ldr	r0, [r4, #0]
   19870:	7b2a      	ldrb	r2, [r5, #12]
   19872:	f241 0129 	movw	r1, #4137	; 0x1029
   19876:	f002 0201 	and.w	r2, r2, #1
   1987a:	300c      	adds	r0, #12
   1987c:	f009 f833 	bl	228e6 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, FG_COLOR);
   19880:	6820      	ldr	r0, [r4, #0]
   19882:	7b2a      	ldrb	r2, [r5, #12]
   19884:	f240 1129 	movw	r1, #297	; 0x129
   19888:	f002 0201 	and.w	r2, r2, #1
   1988c:	300c      	adds	r0, #12
   1988e:	f009 f82a 	bl	228e6 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, BG_COLOR);
   19892:	7b2a      	ldrb	r2, [r5, #12]
   19894:	6820      	ldr	r0, [r4, #0]
   19896:	43d2      	mvns	r2, r2
   19898:	f002 0201 	and.w	r2, r2, #1
   1989c:	f241 1129 	movw	r1, #4393	; 0x1129
   198a0:	300c      	adds	r0, #12
   198a2:	f009 f820 	bl	228e6 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   198a6:	6820      	ldr	r0, [r4, #0]
   198a8:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   198aa:	f248 0189 	movw	r1, #32905	; 0x8089
   198ae:	f002 0201 	and.w	r2, r2, #1
   198b2:	300c      	adds	r0, #12
   198b4:	f009 f817 	bl	228e6 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, BG_COLOR);
   198b8:	7b2a      	ldrb	r2, [r5, #12]
   198ba:	6820      	ldr	r0, [r4, #0]
   198bc:	43d2      	mvns	r2, r2
   198be:	f002 0201 	and.w	r2, r2, #1
   198c2:	f249 0189 	movw	r1, #37001	; 0x9089
   198c6:	300c      	adds	r0, #12
   198c8:	f009 f80d 	bl	228e6 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED, BG_COLOR);
   198cc:	7b2a      	ldrb	r2, [r5, #12]
   198ce:	6820      	ldr	r0, [r4, #0]
   198d0:	43d2      	mvns	r2, r2
   198d2:	f002 0201 	and.w	r2, r2, #1
   198d6:	f248 1189 	movw	r1, #33161	; 0x8189
   198da:	300c      	adds	r0, #12
   198dc:	f009 f803 	bl	228e6 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   198e0:	6820      	ldr	r0, [r4, #0]
   198e2:	7b2a      	ldrb	r2, [r5, #12]
   198e4:	f249 1189 	movw	r1, #37257	; 0x9189
   198e8:	f002 0201 	and.w	r2, r2, #1
   198ec:	300c      	adds	r0, #12
   198ee:	f008 fffa 	bl	228e6 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   198f2:	6820      	ldr	r0, [r4, #0]
   198f4:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   198f6:	2179      	movs	r1, #121	; 0x79
   198f8:	f002 0201 	and.w	r2, r2, #1
   198fc:	300c      	adds	r0, #12
   198fe:	f008 fff2 	bl	228e6 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, BG_COLOR);
   19902:	7b2a      	ldrb	r2, [r5, #12]
   19904:	6820      	ldr	r0, [r4, #0]
   19906:	43d2      	mvns	r2, r2
   19908:	f002 0201 	and.w	r2, r2, #1
   1990c:	f241 0179 	movw	r1, #4217	; 0x1079
   19910:	300c      	adds	r0, #12
   19912:	f008 ffe8 	bl	228e6 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED, BG_COLOR);
   19916:	7b2a      	ldrb	r2, [r5, #12]
   19918:	6820      	ldr	r0, [r4, #0]
   1991a:	43d2      	mvns	r2, r2
   1991c:	f002 0201 	and.w	r2, r2, #1
   19920:	f240 1179 	movw	r1, #377	; 0x179
   19924:	300c      	adds	r0, #12
   19926:	f008 ffde 	bl	228e6 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1992a:	6820      	ldr	r0, [r4, #0]
   1992c:	7b2a      	ldrb	r2, [r5, #12]
   1992e:	f241 1179 	movw	r1, #4473	; 0x1179
   19932:	f002 0201 	and.w	r2, r2, #1
   19936:	300c      	adds	r0, #12
   19938:	f008 ffd5 	bl	228e6 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1993c:	6820      	ldr	r0, [r4, #0]
   1993e:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   19940:	f248 01a9 	movw	r1, #32937	; 0x80a9
   19944:	f002 0201 	and.w	r2, r2, #1
   19948:	300c      	adds	r0, #12
   1994a:	f008 ffcc 	bl	228e6 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, BG_COLOR);
   1994e:	7b2a      	ldrb	r2, [r5, #12]
   19950:	6820      	ldr	r0, [r4, #0]
   19952:	43d2      	mvns	r2, r2
   19954:	f002 0201 	and.w	r2, r2, #1
   19958:	f249 01a9 	movw	r1, #37033	; 0x90a9
   1995c:	300c      	adds	r0, #12
   1995e:	f008 ffc2 	bl	228e6 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED, BG_COLOR);
   19962:	7b2a      	ldrb	r2, [r5, #12]
   19964:	6820      	ldr	r0, [r4, #0]
   19966:	43d2      	mvns	r2, r2
   19968:	f002 0201 	and.w	r2, r2, #1
   1996c:	f248 11a9 	movw	r1, #33193	; 0x81a9
   19970:	300c      	adds	r0, #12
   19972:	f008 ffb8 	bl	228e6 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   19976:	6820      	ldr	r0, [r4, #0]
   19978:	7b2a      	ldrb	r2, [r5, #12]
   1997a:	f249 11a9 	movw	r1, #37289	; 0x91a9
   1997e:	f002 0201 	and.w	r2, r2, #1
   19982:	300c      	adds	r0, #12
   19984:	f008 ffaf 	bl	228e6 <_lv_style_set_color>
    style_init_reset(&styles->round);
   19988:	6820      	ldr	r0, [r4, #0]
   1998a:	3010      	adds	r0, #16
   1998c:	f00c f8f0 	bl	25b70 <style_init_reset>
    lv_style_set_radius(&styles->round, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   19990:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   19992:	f647 72ff 	movw	r2, #32767	; 0x7fff
   19996:	2101      	movs	r1, #1
   19998:	3010      	adds	r0, #16
   1999a:	f008 ff60 	bl	2285e <_lv_style_set_int>
    style_init_reset(&styles->no_radius);
   1999e:	6820      	ldr	r0, [r4, #0]
   199a0:	3014      	adds	r0, #20
   199a2:	f00c f8e5 	bl	25b70 <style_init_reset>
    lv_style_set_radius(&styles->no_radius, LV_STATE_DEFAULT, 0);
   199a6:	6820      	ldr	r0, [r4, #0]
   199a8:	2200      	movs	r2, #0
   199aa:	2101      	movs	r1, #1
   199ac:	3014      	adds	r0, #20
   199ae:	f008 ff56 	bl	2285e <_lv_style_set_int>
    style_init_reset(&styles->border_none);
   199b2:	6820      	ldr	r0, [r4, #0]
   199b4:	301c      	adds	r0, #28
   199b6:	f00c f8db 	bl	25b70 <style_init_reset>
    lv_style_set_border_width(&styles->border_none, LV_STATE_DEFAULT, 0);
   199ba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   199bc:	2200      	movs	r2, #0
   199be:	2130      	movs	r1, #48	; 0x30
   199c0:	e006      	b.n	199d0 <lv_theme_mono_init+0x360>
   199c2:	bf00      	nop
   199c4:	20002e44 	.word	0x20002e44
   199c8:	20002e64 	.word	0x20002e64
   199cc:	20002e60 	.word	0x20002e60
   199d0:	301c      	adds	r0, #28
   199d2:	f008 ff44 	bl	2285e <_lv_style_set_int>
    style_init_reset(&styles->fg_color);
   199d6:	6820      	ldr	r0, [r4, #0]
   199d8:	3018      	adds	r0, #24
   199da:	f00c f8c9 	bl	25b70 <style_init_reset>
    lv_style_set_bg_color(&styles->fg_color, LV_STATE_DEFAULT, FG_COLOR);
   199de:	6820      	ldr	r0, [r4, #0]
   199e0:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   199e2:	2129      	movs	r1, #41	; 0x29
   199e4:	f002 0201 	and.w	r2, r2, #1
   199e8:	3018      	adds	r0, #24
   199ea:	f008 ff7c 	bl	228e6 <_lv_style_set_color>
    lv_style_set_text_color(&styles->fg_color, LV_STATE_DEFAULT, BG_COLOR);
   199ee:	7b2a      	ldrb	r2, [r5, #12]
   199f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   199f2:	43d2      	mvns	r2, r2
   199f4:	f002 0201 	and.w	r2, r2, #1
   199f8:	f248 0189 	movw	r1, #32905	; 0x8089
   199fc:	3018      	adds	r0, #24
   199fe:	f008 ff72 	bl	228e6 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->fg_color, LV_STATE_DEFAULT, BG_COLOR);
   19a02:	7b2a      	ldrb	r2, [r5, #12]
   19a04:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   19a06:	43d2      	mvns	r2, r2
   19a08:	f002 0201 	and.w	r2, r2, #1
   19a0c:	f248 01a9 	movw	r1, #32937	; 0x80a9
   19a10:	3018      	adds	r0, #24
   19a12:	f008 ff68 	bl	228e6 <_lv_style_set_color>
    lv_style_set_line_color(&styles->fg_color, LV_STATE_DEFAULT, FG_COLOR);
   19a16:	6820      	ldr	r0, [r4, #0]
   19a18:	7b2a      	ldrb	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   19a1a:	2199      	movs	r1, #153	; 0x99
   19a1c:	f002 0201 	and.w	r2, r2, #1
   19a20:	3018      	adds	r0, #24
   19a22:	f008 ff60 	bl	228e6 <_lv_style_set_color>
    style_init_reset(&styles->big_line_space);
   19a26:	6820      	ldr	r0, [r4, #0]
   19a28:	3020      	adds	r0, #32
   19a2a:	f00c f8a1 	bl	25b70 <style_init_reset>
    lv_style_set_text_line_space(&styles->big_line_space, LV_STATE_DEFAULT, LV_DPI / 10);
   19a2e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   19a30:	220d      	movs	r2, #13
   19a32:	f248 0181 	movw	r1, #32897	; 0x8081
   19a36:	3020      	adds	r0, #32
   19a38:	f008 ff11 	bl	2285e <_lv_style_set_int>
    style_init_reset(&styles->pad_none);
   19a3c:	6820      	ldr	r0, [r4, #0]
   19a3e:	3024      	adds	r0, #36	; 0x24
   19a40:	f00c f896 	bl	25b70 <style_init_reset>
    lv_style_set_pad_left(&styles->pad_none, LV_STATE_DEFAULT, 0);
   19a44:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   19a46:	2200      	movs	r2, #0
   19a48:	2112      	movs	r1, #18
   19a4a:	3024      	adds	r0, #36	; 0x24
   19a4c:	f008 ff07 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_none, LV_STATE_DEFAULT, 0);
   19a50:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   19a52:	2200      	movs	r2, #0
   19a54:	2113      	movs	r1, #19
   19a56:	3024      	adds	r0, #36	; 0x24
   19a58:	f008 ff01 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_none, LV_STATE_DEFAULT, 0);
   19a5c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19a5e:	2200      	movs	r2, #0
   19a60:	2110      	movs	r1, #16
   19a62:	3024      	adds	r0, #36	; 0x24
   19a64:	f008 fefb 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_none, LV_STATE_DEFAULT, 0);
   19a68:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   19a6a:	2200      	movs	r2, #0
   19a6c:	2111      	movs	r1, #17
   19a6e:	3024      	adds	r0, #36	; 0x24
   19a70:	f008 fef5 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_none, LV_STATE_DEFAULT, 0);
   19a74:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   19a76:	2200      	movs	r2, #0
   19a78:	2114      	movs	r1, #20
   19a7a:	3024      	adds	r0, #36	; 0x24
   19a7c:	f008 feef 	bl	2285e <_lv_style_set_int>
    style_init_reset(&styles->pad_normal);
   19a80:	6820      	ldr	r0, [r4, #0]
   19a82:	3028      	adds	r0, #40	; 0x28
   19a84:	f00c f874 	bl	25b70 <style_init_reset>
    lv_style_set_pad_left(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   19a88:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   19a8a:	220d      	movs	r2, #13
   19a8c:	2112      	movs	r1, #18
   19a8e:	3028      	adds	r0, #40	; 0x28
   19a90:	f008 fee5 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   19a94:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   19a96:	220d      	movs	r2, #13
   19a98:	2113      	movs	r1, #19
   19a9a:	3028      	adds	r0, #40	; 0x28
   19a9c:	f008 fedf 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   19aa0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19aa2:	220d      	movs	r2, #13
   19aa4:	2110      	movs	r1, #16
   19aa6:	3028      	adds	r0, #40	; 0x28
   19aa8:	f008 fed9 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   19aac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   19aae:	220d      	movs	r2, #13
   19ab0:	2111      	movs	r1, #17
   19ab2:	3028      	adds	r0, #40	; 0x28
   19ab4:	f008 fed3 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   19ab8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   19aba:	220d      	movs	r2, #13
   19abc:	2114      	movs	r1, #20
   19abe:	3028      	adds	r0, #40	; 0x28
   19ac0:	f008 fecd 	bl	2285e <_lv_style_set_int>
    style_init_reset(&styles->pad_small);
   19ac4:	6820      	ldr	r0, [r4, #0]
   19ac6:	302c      	adds	r0, #44	; 0x2c
   19ac8:	f00c f852 	bl	25b70 <style_init_reset>
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   19acc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   19ace:	2206      	movs	r2, #6
   19ad0:	2112      	movs	r1, #18
   19ad2:	302c      	adds	r0, #44	; 0x2c
   19ad4:	f008 fec3 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   19ad8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   19ada:	2206      	movs	r2, #6
   19adc:	2113      	movs	r1, #19
   19ade:	302c      	adds	r0, #44	; 0x2c
   19ae0:	f008 febd 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   19ae4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19ae6:	2206      	movs	r2, #6
   19ae8:	2110      	movs	r1, #16
   19aea:	302c      	adds	r0, #44	; 0x2c
   19aec:	f008 feb7 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   19af0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   19af2:	2206      	movs	r2, #6
   19af4:	2111      	movs	r1, #17
   19af6:	302c      	adds	r0, #44	; 0x2c
   19af8:	f008 feb1 	bl	2285e <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   19afc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   19afe:	2206      	movs	r2, #6
   19b00:	2114      	movs	r1, #20
   19b02:	302c      	adds	r0, #44	; 0x2c
   19b04:	f008 feab 	bl	2285e <_lv_style_set_int>
    style_init_reset(&styles->pad_inner);
   19b08:	6820      	ldr	r0, [r4, #0]
   19b0a:	3030      	adds	r0, #48	; 0x30
   19b0c:	f00c f830 	bl	25b70 <style_init_reset>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT, LV_DPI / 15);
   19b10:	6820      	ldr	r0, [r4, #0]
   19b12:	2208      	movs	r2, #8
   19b14:	2114      	movs	r1, #20
   19b16:	3030      	adds	r0, #48	; 0x30
   19b18:	f008 fea1 	bl	2285e <_lv_style_set_int>
    style_init_reset(&styles->txt_underline);
   19b1c:	6820      	ldr	r0, [r4, #0]
   19b1e:	3034      	adds	r0, #52	; 0x34
   19b20:	f00c f826 	bl	25b70 <style_init_reset>
    lv_style_set_text_decor(&styles->txt_underline, LV_STATE_FOCUSED, LV_TEXT_DECOR_UNDERLINE);
   19b24:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   19b26:	2201      	movs	r2, #1
   19b28:	f248 2182 	movw	r1, #33410	; 0x8282
   19b2c:	3034      	adds	r0, #52	; 0x34
   19b2e:	f008 fe96 	bl	2285e <_lv_style_set_int>
    theme.apply_xcb = NULL;
   19b32:	2300      	movs	r3, #0
   19b34:	606b      	str	r3, [r5, #4]
    theme.apply_cb = theme_apply;
   19b36:	4b02      	ldr	r3, [pc, #8]	; (19b40 <lv_theme_mono_init+0x4d0>)
   19b38:	602b      	str	r3, [r5, #0]
}
   19b3a:	4628      	mov	r0, r5
   19b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19b40:	00019625 	.word	0x00019625

00019b44 <lv_label_revert_dots>:

    lv_obj_invalidate(label);
}

static void lv_label_revert_dots(lv_obj_t * label)
{
   19b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19b46:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19b48:	f007 ff51 	bl	219ee <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   19b4c:	7c03      	ldrb	r3, [r0, #16]
   19b4e:	f003 0307 	and.w	r3, r3, #7
   19b52:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19b54:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   19b56:	d129      	bne.n	19bac <lv_label_revert_dots+0x68>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
   19b58:	6881      	ldr	r1, [r0, #8]
   19b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19b5e:	4299      	cmp	r1, r3
   19b60:	d024      	beq.n	19bac <lv_label_revert_dots+0x68>
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
   19b62:	4b14      	ldr	r3, [pc, #80]	; (19bb4 <lv_label_revert_dots+0x70>)
   19b64:	6800      	ldr	r0, [r0, #0]
   19b66:	681b      	ldr	r3, [r3, #0]
   19b68:	3903      	subs	r1, #3
   19b6a:	4798      	blx	r3
   19b6c:	4607      	mov	r7, r0
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19b6e:	4628      	mov	r0, r5
   19b70:	f007 ff3d 	bl	219ee <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
   19b74:	7c42      	ldrb	r2, [r0, #17]
   19b76:	07d2      	lsls	r2, r2, #31
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19b78:	4603      	mov	r3, r0
        return ext->dot.tmp_ptr;
   19b7a:	bf4c      	ite	mi
   19b7c:	6843      	ldrmi	r3, [r0, #4]
    }
    else {
        return ext->dot.tmp;
   19b7e:	3304      	addpl	r3, #4
    while(ext->text[byte_i + i] != '\0') {
   19b80:	2200      	movs	r2, #0
   19b82:	fa57 f182 	uxtab	r1, r7, r2
   19b86:	6826      	ldr	r6, [r4, #0]
   19b88:	b2d0      	uxtb	r0, r2
   19b8a:	f816 e001 	ldrb.w	lr, [r6, r1]
   19b8e:	5c18      	ldrb	r0, [r3, r0]
   19b90:	eb06 0c01 	add.w	ip, r6, r1
   19b94:	3201      	adds	r2, #1
   19b96:	f1be 0f00 	cmp.w	lr, #0
   19b9a:	d108      	bne.n	19bae <lv_label_revert_dots+0x6a>
    ext->text[byte_i + i] = dot_tmp[i];
   19b9c:	f88c 0000 	strb.w	r0, [ip]
    lv_label_dot_tmp_free(label);
   19ba0:	4628      	mov	r0, r5
   19ba2:	f00b ffe7 	bl	25b74 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
   19ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19baa:	60a3      	str	r3, [r4, #8]
}
   19bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->text[byte_i + i] = dot_tmp[i];
   19bae:	5470      	strb	r0, [r6, r1]
        i++;
   19bb0:	e7e7      	b.n	19b82 <lv_label_revert_dots+0x3e>
   19bb2:	bf00      	nop
   19bb4:	2000093c 	.word	0x2000093c

00019bb8 <lv_label_get_letter_on>:
{
   19bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bbc:	b08f      	sub	sp, #60	; 0x3c
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
   19bbe:	f9b1 3000 	ldrsh.w	r3, [r1]
   19bc2:	9305      	str	r3, [sp, #20]
{
   19bc4:	460c      	mov	r4, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   19bc6:	2212      	movs	r2, #18
   19bc8:	2100      	movs	r1, #0
   19bca:	4606      	mov	r6, r0
   19bcc:	f7fc fbb8 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19bd0:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   19bd2:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19bd4:	2100      	movs	r1, #0
   19bd6:	4630      	mov	r0, r6
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
   19bd8:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
   19bdc:	f7fc fbb0 	bl	16340 <_lv_obj_get_style_int>
   19be0:	1a24      	subs	r4, r4, r0
   19be2:	b223      	sxth	r3, r4
    get_txt_coords(label, &txt_coords);
   19be4:	a90c      	add	r1, sp, #48	; 0x30
   19be6:	4630      	mov	r0, r6
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
   19be8:	9306      	str	r3, [sp, #24]
    get_txt_coords(label, &txt_coords);
   19bea:	f00b ffff 	bl	25bec <get_txt_coords>
    const char * txt         = lv_label_get_text(label);
   19bee:	4630      	mov	r0, r6
   19bf0:	f00c f83b 	bl	25c6a <lv_label_get_text>
   19bf4:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
   19bf6:	4630      	mov	r0, r6
   19bf8:	f007 fef9 	bl	219ee <lv_obj_get_ext_attr>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   19bfc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   19c00:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   19c04:	3301      	adds	r3, #1
   19c06:	1a9b      	subs	r3, r3, r2
   19c08:	b21b      	sxth	r3, r3
   19c0a:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   19c0c:	f248 028e 	movw	r2, #32910	; 0x808e
   19c10:	2100      	movs	r1, #0
   19c12:	4630      	mov	r0, r6
   19c14:	9307      	str	r3, [sp, #28]
   19c16:	f007 fe06 	bl	21826 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   19c1a:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   19c1e:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   19c20:	2100      	movs	r1, #0
   19c22:	4630      	mov	r0, r6
   19c24:	f7fc fb8c 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   19c28:	f248 0280 	movw	r2, #32896	; 0x8080
   19c2c:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   19c2e:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   19c30:	4630      	mov	r0, r6
   19c32:	f7fc fb85 	bl	16340 <_lv_obj_get_style_int>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
   19c36:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
   19c3a:	9304      	str	r3, [sp, #16]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   19c3c:	7c2b      	ldrb	r3, [r5, #16]
   19c3e:	9003      	str	r0, [sp, #12]
   19c40:	f3c3 1580 	ubfx	r5, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   19c44:	061a      	lsls	r2, r3, #24
   19c46:	bf48      	it	mi
   19c48:	f045 0502 	orrmi.w	r5, r5, #2
    lv_label_align_t align = lv_label_get_align(label);
   19c4c:	4630      	mov	r0, r6
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   19c4e:	075b      	lsls	r3, r3, #29
   19c50:	bf08      	it	eq
   19c52:	f045 0510 	orreq.w	r5, r5, #16
    lv_label_align_t align = lv_label_get_align(label);
   19c56:	f00c f814 	bl	25c82 <lv_label_get_align>
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   19c5a:	2801      	cmp	r0, #1
    lv_label_align_t align = lv_label_get_align(label);
   19c5c:	4682      	mov	sl, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   19c5e:	d108      	bne.n	19c72 <lv_label_get_letter_on+0xba>
   19c60:	f045 0504 	orr.w	r5, r5, #4
        y += letter_height + line_space;
   19c64:	9b04      	ldr	r3, [sp, #16]
{
   19c66:	f04f 0b00 	mov.w	fp, #0
        y += letter_height + line_space;
   19c6a:	4423      	add	r3, r4
{
   19c6c:	465e      	mov	r6, fp
        y += letter_height + line_space;
   19c6e:	9309      	str	r3, [sp, #36]	; 0x24
   19c70:	e051      	b.n	19d16 <lv_label_get_letter_on+0x15e>
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   19c72:	2802      	cmp	r0, #2
   19c74:	d1f6      	bne.n	19c64 <lv_label_get_letter_on+0xac>
   19c76:	f045 0508 	orr.w	r5, r5, #8
   19c7a:	e7f3      	b.n	19c64 <lv_label_get_letter_on+0xac>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   19c7c:	9b07      	ldr	r3, [sp, #28]
   19c7e:	9a03      	ldr	r2, [sp, #12]
   19c80:	9500      	str	r5, [sp, #0]
   19c82:	4649      	mov	r1, r9
   19c84:	4640      	mov	r0, r8
   19c86:	f7ff fa9b 	bl	191c0 <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
   19c8a:	9b04      	ldr	r3, [sp, #16]
   19c8c:	9a06      	ldr	r2, [sp, #24]
   19c8e:	445b      	add	r3, fp
   19c90:	429a      	cmp	r2, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   19c92:	eb06 0400 	add.w	r4, r6, r0
        if(pos.y <= y + letter_height) {
   19c96:	dc39      	bgt.n	19d0c <lv_label_get_letter_on+0x154>
            letter = _lv_txt_encoded_prev(txt, &tmp);
   19c98:	4b50      	ldr	r3, [pc, #320]	; (19ddc <lv_label_get_letter_on+0x224>)
            uint32_t tmp = new_line_start;
   19c9a:	940b      	str	r4, [sp, #44]	; 0x2c
            letter = _lv_txt_encoded_prev(txt, &tmp);
   19c9c:	681b      	ldr	r3, [r3, #0]
   19c9e:	a90b      	add	r1, sp, #44	; 0x2c
   19ca0:	4638      	mov	r0, r7
   19ca2:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
   19ca4:	280a      	cmp	r0, #10
   19ca6:	d002      	beq.n	19cae <lv_label_get_letter_on+0xf6>
   19ca8:	5d3b      	ldrb	r3, [r7, r4]
   19caa:	b903      	cbnz	r3, 19cae <lv_label_get_letter_on+0xf6>
   19cac:	3401      	adds	r4, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
   19cae:	f1ba 0f01 	cmp.w	sl, #1
   19cb2:	d137      	bne.n	19d24 <lv_label_get_letter_on+0x16c>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
   19cb4:	9b03      	ldr	r3, [sp, #12]
   19cb6:	9500      	str	r5, [sp, #0]
   19cb8:	464a      	mov	r2, r9
   19cba:	1ba1      	subs	r1, r4, r6
   19cbc:	4640      	mov	r0, r8
   19cbe:	f7ff fa2d 	bl	1911c <_lv_txt_get_width>
   19cc2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   19cc6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   19cca:	3301      	adds	r3, #1
   19ccc:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
   19cce:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   19cd2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   19cd6:	fa02 f283 	sxtah	r2, r2, r3
   19cda:	1043      	asrs	r3, r0, #1
   19cdc:	ebc3 0362 	rsb	r3, r3, r2, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
   19ce0:	fa0f fb83 	sxth.w	fp, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   19ce4:	2200      	movs	r2, #0
   19ce6:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    uint32_t i = 0;
   19cea:	920b      	str	r2, [sp, #44]	; 0x2c
    if(new_line_start > 0) {
   19cec:	2c00      	cmp	r4, #0
   19cee:	d16d      	bne.n	19dcc <lv_label_get_letter_on+0x214>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
   19cf0:	4d3b      	ldr	r5, [pc, #236]	; (19de0 <lv_label_get_letter_on+0x228>)
   19cf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19cf4:	682b      	ldr	r3, [r5, #0]
   19cf6:	4640      	mov	r0, r8
   19cf8:	4798      	blx	r3
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
   19cfa:	682b      	ldr	r3, [r5, #0]
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
   19cfc:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
   19cfe:	4631      	mov	r1, r6
   19d00:	4638      	mov	r0, r7
   19d02:	4798      	blx	r3
}
   19d04:	4420      	add	r0, r4
   19d06:	b00f      	add	sp, #60	; 0x3c
   19d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + line_space;
   19d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19d0e:	449b      	add	fp, r3
   19d10:	fa0f fb8b 	sxth.w	fp, fp
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   19d14:	4626      	mov	r6, r4
    while(txt[line_start] != '\0') {
   19d16:	5dbb      	ldrb	r3, [r7, r6]
   19d18:	eb07 0806 	add.w	r8, r7, r6
   19d1c:	2b00      	cmp	r3, #0
   19d1e:	d1ad      	bne.n	19c7c <lv_label_get_letter_on+0xc4>
   19d20:	4634      	mov	r4, r6
   19d22:	e7c4      	b.n	19cae <lv_label_get_letter_on+0xf6>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
   19d24:	f1ba 0f02 	cmp.w	sl, #2
   19d28:	d10e      	bne.n	19d48 <lv_label_get_letter_on+0x190>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
   19d2a:	9b03      	ldr	r3, [sp, #12]
   19d2c:	9500      	str	r5, [sp, #0]
   19d2e:	464a      	mov	r2, r9
   19d30:	1ba1      	subs	r1, r4, r6
   19d32:	4640      	mov	r0, r8
   19d34:	f7ff f9f2 	bl	1911c <_lv_txt_get_width>
   19d38:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   19d3c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   19d40:	3301      	adds	r3, #1
   19d42:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
   19d44:	1a1b      	subs	r3, r3, r0
   19d46:	e7cb      	b.n	19ce0 <lv_label_get_letter_on+0x128>
    lv_coord_t x = 0;
   19d48:	f04f 0b00 	mov.w	fp, #0
   19d4c:	e7ca      	b.n	19ce4 <lv_label_get_letter_on+0x12c>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
   19d4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19d50:	9007      	str	r0, [sp, #28]
   19d52:	f818 1001 	ldrb.w	r1, [r8, r1]
   19d56:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   19d5a:	f00b fe29 	bl	259b0 <_lv_txt_is_cmd>
   19d5e:	9a07      	ldr	r2, [sp, #28]
   19d60:	b198      	cbz	r0, 19d8a <lv_label_get_letter_on+0x1d2>
        while(i + line_start < new_line_start) {
   19d62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19d64:	4432      	add	r2, r6
   19d66:	42a2      	cmp	r2, r4
   19d68:	d2c2      	bcs.n	19cf0 <lv_label_get_letter_on+0x138>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
   19d6a:	f8da 2000 	ldr.w	r2, [sl]
   19d6e:	a90b      	add	r1, sp, #44	; 0x2c
   19d70:	4640      	mov	r0, r8
   19d72:	4790      	blx	r2
   19d74:	4605      	mov	r5, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   19d76:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19d78:	f8da 2000 	ldr.w	r2, [sl]
   19d7c:	2100      	movs	r1, #0
   19d7e:	4440      	add	r0, r8
   19d80:	4790      	blx	r2
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19d82:	9b06      	ldr	r3, [sp, #24]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   19d84:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19d86:	2b00      	cmp	r3, #0
   19d88:	d1e1      	bne.n	19d4e <lv_label_get_letter_on+0x196>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
   19d8a:	4629      	mov	r1, r5
   19d8c:	4648      	mov	r0, r9
   19d8e:	f00b feb1 	bl	25af4 <lv_font_get_glyph_width>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
   19d92:	9b05      	ldr	r3, [sp, #20]
   19d94:	9a08      	ldr	r2, [sp, #32]
   19d96:	1a9a      	subs	r2, r3, r2
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
   19d98:	b201      	sxth	r1, r0
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
   19d9a:	b212      	sxth	r2, r2
   19d9c:	fa0b f080 	sxtah	r0, fp, r0
   19da0:	4282      	cmp	r2, r0
   19da2:	da02      	bge.n	19daa <lv_label_get_letter_on+0x1f2>
                i = i_act;
   19da4:	9b04      	ldr	r3, [sp, #16]
   19da6:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
   19da8:	e7a2      	b.n	19cf0 <lv_label_get_letter_on+0x138>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
   19daa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19dac:	1990      	adds	r0, r2, r6
   19dae:	42a0      	cmp	r0, r4
   19db0:	d0f8      	beq.n	19da4 <lv_label_get_letter_on+0x1ec>
   19db2:	9b04      	ldr	r3, [sp, #16]
   19db4:	19b8      	adds	r0, r7, r6
   19db6:	5cc0      	ldrb	r0, [r0, r3]
   19db8:	2800      	cmp	r0, #0
   19dba:	d0f3      	beq.n	19da4 <lv_label_get_letter_on+0x1ec>
            x += letter_space;
   19dbc:	9b03      	ldr	r3, [sp, #12]
            i_act = i;
   19dbe:	9204      	str	r2, [sp, #16]
   19dc0:	445b      	add	r3, fp
            x += letter_space;
   19dc2:	fa01 f383 	sxtah	r3, r1, r3
   19dc6:	fa0f fb83 	sxth.w	fp, r3
            i_act = i;
   19dca:	e7ca      	b.n	19d62 <lv_label_get_letter_on+0x1aa>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19dcc:	f005 0301 	and.w	r3, r5, #1
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
   19dd0:	f8df a010 	ldr.w	sl, [pc, #16]	; 19de4 <lv_label_get_letter_on+0x22c>
    uint32_t i_act = i;
   19dd4:	9204      	str	r2, [sp, #16]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19dd6:	9306      	str	r3, [sp, #24]
   19dd8:	e7c3      	b.n	19d62 <lv_label_get_letter_on+0x1aa>
   19dda:	bf00      	nop
   19ddc:	20000948 	.word	0x20000948
   19de0:	20000940 	.word	0x20000940
   19de4:	20000944 	.word	0x20000944

00019de8 <lv_label_refr_text>:
{
   19de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dec:	b08b      	sub	sp, #44	; 0x2c
   19dee:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19df0:	f007 fdfd 	bl	219ee <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
   19df4:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19df6:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
   19df8:	2b00      	cmp	r3, #0
   19dfa:	d062      	beq.n	19ec2 <lv_label_refr_text+0xda>
    get_txt_coords(label, &txt_coords);
   19dfc:	a908      	add	r1, sp, #32
   19dfe:	4628      	mov	r0, r5
   19e00:	f00b fef4 	bl	25bec <get_txt_coords>
   19e04:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
   19e08:	f8bd 3020 	ldrh.w	r3, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   19e0c:	f248 028e 	movw	r2, #32910	; 0x808e
   19e10:	2100      	movs	r1, #0
   19e12:	3601      	adds	r6, #1
   19e14:	4628      	mov	r0, r5
   19e16:	1af6      	subs	r6, r6, r3
   19e18:	f007 fd05 	bl	21826 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   19e1c:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   19e20:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   19e22:	2100      	movs	r1, #0
   19e24:	4628      	mov	r0, r5
   19e26:	f7fc fa8b 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   19e2a:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   19e2c:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   19e2e:	f248 0280 	movw	r2, #32896	; 0x8080
   19e32:	4628      	mov	r0, r5
   19e34:	f7fc fa84 	bl	16340 <_lv_obj_get_style_int>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   19e38:	7c22      	ldrb	r2, [r4, #16]
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
   19e3a:	9700      	str	r7, [sp, #0]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   19e3c:	f3c2 1380 	ubfx	r3, r2, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   19e40:	0611      	lsls	r1, r2, #24
   19e42:	bf48      	it	mi
   19e44:	f043 0302 	orrmi.w	r3, r3, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   19e48:	0752      	lsls	r2, r2, #29
   19e4a:	bf08      	it	eq
   19e4c:	f043 0310 	orreq.w	r3, r3, #16
   19e50:	b236      	sxth	r6, r6
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
   19e52:	e9cd 6301 	strd	r6, r3, [sp, #4]
   19e56:	4681      	mov	r9, r0
   19e58:	4603      	mov	r3, r0
   19e5a:	6821      	ldr	r1, [r4, #0]
   19e5c:	4642      	mov	r2, r8
   19e5e:	a805      	add	r0, sp, #20
   19e60:	f00b fdc1 	bl	259e6 <_lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   19e64:	7c26      	ldrb	r6, [r4, #16]
   19e66:	f016 0607 	ands.w	r6, r6, #7
   19e6a:	d12d      	bne.n	19ec8 <lv_label_refr_text+0xe0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   19e6c:	2212      	movs	r2, #18
   19e6e:	4631      	mov	r1, r6
   19e70:	4628      	mov	r0, r5
   19e72:	f7fc fa65 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   19e76:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   19e78:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   19e7a:	4631      	mov	r1, r6
   19e7c:	4628      	mov	r0, r5
   19e7e:	f7fc fa5f 	bl	16340 <_lv_obj_get_style_int>
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
   19e82:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   19e86:	4420      	add	r0, r4
   19e88:	4418      	add	r0, r3
   19e8a:	f8ad 0014 	strh.w	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19e8e:	2210      	movs	r2, #16
   19e90:	4631      	mov	r1, r6
   19e92:	4628      	mov	r0, r5
   19e94:	f7fc fa54 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   19e98:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19e9a:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   19e9c:	4631      	mov	r1, r6
   19e9e:	4628      	mov	r0, r5
   19ea0:	f7fc fa4e 	bl	16340 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   19ea4:	1902      	adds	r2, r0, r4
   19ea6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
        lv_obj_set_size(label, size.x, size.y);
   19eaa:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   19eae:	4402      	add	r2, r0
   19eb0:	b212      	sxth	r2, r2
        lv_obj_set_size(label, size.x, size.y);
   19eb2:	4628      	mov	r0, r5
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   19eb4:	f8ad 2016 	strh.w	r2, [sp, #22]
        lv_obj_set_size(label, size.x, size.y);
   19eb8:	f007 fb25 	bl	21506 <lv_obj_set_size>
    lv_obj_invalidate(label);
   19ebc:	4628      	mov	r0, r5
   19ebe:	f007 fa81 	bl	213c4 <lv_obj_invalidate>
}
   19ec2:	b00b      	add	sp, #44	; 0x2c
   19ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
   19ec8:	1ef3      	subs	r3, r6, #3
   19eca:	2b01      	cmp	r3, #1
   19ecc:	d9f6      	bls.n	19ebc <lv_label_refr_text+0xd4>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
   19ece:	2e02      	cmp	r6, #2
   19ed0:	f040 8086 	bne.w	19fe0 <lv_label_refr_text+0x1f8>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   19ed4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   19ed8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   19edc:	3301      	adds	r3, #1
   19ede:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
   19ee0:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   19ee4:	b21b      	sxth	r3, r3
   19ee6:	429a      	cmp	r2, r3
   19ee8:	dc03      	bgt.n	19ef2 <lv_label_refr_text+0x10a>
            ext->dot_end = LV_LABEL_DOT_END_INV;
   19eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19eee:	60a3      	str	r3, [r4, #8]
   19ef0:	e7e4      	b.n	19ebc <lv_label_refr_text+0xd4>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
   19ef2:	4b48      	ldr	r3, [pc, #288]	; (1a014 <lv_label_refr_text+0x22c>)
   19ef4:	6820      	ldr	r0, [r4, #0]
   19ef6:	681b      	ldr	r3, [r3, #0]
   19ef8:	4798      	blx	r3
   19efa:	2803      	cmp	r0, #3
   19efc:	d9f5      	bls.n	19eea <lv_label_refr_text+0x102>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   19efe:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
   19f02:	f8bd 3020 	ldrh.w	r3, [sp, #32]
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
   19f06:	222e      	movs	r2, #46	; 0x2e
   19f08:	4611      	mov	r1, r2
   19f0a:	4640      	mov	r0, r8
   19f0c:	3601      	adds	r6, #1
   19f0e:	1af6      	subs	r6, r6, r3
   19f10:	f00b fdf0 	bl	25af4 <lv_font_get_glyph_width>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   19f14:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   19f18:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   19f1c:	3301      	adds	r3, #1
   19f1e:	4481      	add	r9, r0
   19f20:	1a9b      	subs	r3, r3, r2
                   (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
   19f22:	f9b8 0008 	ldrsh.w	r0, [r8, #8]
   19f26:	b21b      	sxth	r3, r3
            p.y -= line_space;                                               /*Trim the last line space*/
   19f28:	1bda      	subs	r2, r3, r7
                   (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
   19f2a:	4407      	add	r7, r0
            p.x = lv_area_get_width(&txt_coords) -
   19f2c:	eba9 0989 	sub.w	r9, r9, r9, lsl #2
            p.y -= p.y %
   19f30:	fb93 f0f7 	sdiv	r0, r3, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   19f34:	b236      	sxth	r6, r6
   19f36:	fb07 3710 	mls	r7, r7, r0, r3
            p.y -= line_space;                                               /*Trim the last line space*/
   19f3a:	1bd7      	subs	r7, r2, r7
            p.x = lv_area_get_width(&txt_coords) -
   19f3c:	444e      	add	r6, r9
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   19f3e:	a906      	add	r1, sp, #24
   19f40:	4628      	mov	r0, r5
            p.x = lv_area_get_width(&txt_coords) -
   19f42:	f8ad 6018 	strh.w	r6, [sp, #24]
            p.y -= line_space;                                               /*Trim the last line space*/
   19f46:	f8ad 701a 	strh.w	r7, [sp, #26]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   19f4a:	f7ff fe35 	bl	19bb8 <lv_label_get_letter_on>
   19f4e:	4606      	mov	r6, r0
            size_t txt_len = strlen(ext->text);
   19f50:	6820      	ldr	r0, [r4, #0]
   19f52:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1a020 <lv_label_refr_text+0x238>
   19f56:	f7e6 fa99 	bl	48c <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
   19f5a:	4b2f      	ldr	r3, [pc, #188]	; (1a018 <lv_label_refr_text+0x230>)
            size_t txt_len = strlen(ext->text);
   19f5c:	4680      	mov	r8, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
   19f5e:	681b      	ldr	r3, [r3, #0]
   19f60:	6820      	ldr	r0, [r4, #0]
   19f62:	4631      	mov	r1, r6
   19f64:	4798      	blx	r3
   19f66:	46ca      	mov	sl, r9
   19f68:	9007      	str	r0, [sp, #28]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
   19f6a:	9f07      	ldr	r7, [sp, #28]
   19f6c:	6820      	ldr	r0, [r4, #0]
   19f6e:	f8d9 3000 	ldr.w	r3, [r9]
   19f72:	f107 0b03 	add.w	fp, r7, #3
   19f76:	45c3      	cmp	fp, r8
   19f78:	4438      	add	r0, r7
   19f7a:	d82b      	bhi.n	19fd4 <lv_label_refr_text+0x1ec>
   19f7c:	f04f 0804 	mov.w	r8, #4
            uint8_t len          = 0;
   19f80:	f04f 0900 	mov.w	r9, #0
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
   19f84:	9907      	ldr	r1, [sp, #28]
   19f86:	6820      	ldr	r0, [r4, #0]
   19f88:	f8da 3000 	ldr.w	r3, [sl]
   19f8c:	4408      	add	r0, r1
   19f8e:	4798      	blx	r3
                _lv_txt_encoded_next(ext->text, &byte_id);
   19f90:	4b22      	ldr	r3, [pc, #136]	; (1a01c <lv_label_refr_text+0x234>)
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
   19f92:	4481      	add	r9, r0
                _lv_txt_encoded_next(ext->text, &byte_id);
   19f94:	681b      	ldr	r3, [r3, #0]
   19f96:	6820      	ldr	r0, [r4, #0]
   19f98:	a907      	add	r1, sp, #28
   19f9a:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   19f9c:	f1b8 0801 	subs.w	r8, r8, #1
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
   19fa0:	fa5f f989 	uxtb.w	r9, r9
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   19fa4:	d1ee      	bne.n	19f84 <lv_label_refr_text+0x19c>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
   19fa6:	6821      	ldr	r1, [r4, #0]
   19fa8:	464a      	mov	r2, r9
   19faa:	4439      	add	r1, r7
   19fac:	4628      	mov	r0, r5
   19fae:	f00b fdf5 	bl	25b9c <lv_label_set_dot_tmp>
   19fb2:	2800      	cmp	r0, #0
   19fb4:	d082      	beq.n	19ebc <lv_label_refr_text+0xd4>
                    ext->text[byte_id_ori + i] = '.';
   19fb6:	6823      	ldr	r3, [r4, #0]
   19fb8:	222e      	movs	r2, #46	; 0x2e
   19fba:	55da      	strb	r2, [r3, r7]
   19fbc:	6823      	ldr	r3, [r4, #0]
   19fbe:	443b      	add	r3, r7
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   19fc0:	3603      	adds	r6, #3
                    ext->text[byte_id_ori + i] = '.';
   19fc2:	705a      	strb	r2, [r3, #1]
   19fc4:	6823      	ldr	r3, [r4, #0]
   19fc6:	441f      	add	r7, r3
   19fc8:	70ba      	strb	r2, [r7, #2]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
   19fca:	6823      	ldr	r3, [r4, #0]
   19fcc:	f803 800b 	strb.w	r8, [r3, fp]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   19fd0:	60a6      	str	r6, [r4, #8]
   19fd2:	e773      	b.n	19ebc <lv_label_refr_text+0xd4>
                byte_id -= _lv_txt_encoded_size(&ext->text[byte_id]);
   19fd4:	4798      	blx	r3
   19fd6:	9b07      	ldr	r3, [sp, #28]
   19fd8:	1a1b      	subs	r3, r3, r0
   19fda:	9307      	str	r3, [sp, #28]
                letter_id--;
   19fdc:	3e01      	subs	r6, #1
   19fde:	e7c4      	b.n	19f6a <lv_label_refr_text+0x182>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
   19fe0:	2e01      	cmp	r6, #1
   19fe2:	f47f af6b 	bne.w	19ebc <lv_label_refr_text+0xd4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19fe6:	2210      	movs	r2, #16
   19fe8:	2100      	movs	r1, #0
   19fea:	4628      	mov	r0, r5
   19fec:	f7fc f9a8 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   19ff0:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19ff2:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   19ff4:	2100      	movs	r1, #0
   19ff6:	4628      	mov	r0, r5
   19ff8:	f7fc f9a2 	bl	16340 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   19ffc:	1901      	adds	r1, r0, r4
   19ffe:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   1a002:	4401      	add	r1, r0
   1a004:	b209      	sxth	r1, r1
        lv_obj_set_height(label, size.y);
   1a006:	4628      	mov	r0, r5
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1a008:	f8ad 1016 	strh.w	r1, [sp, #22]
        lv_obj_set_height(label, size.y);
   1a00c:	f007 fabd 	bl	2158a <lv_obj_set_height>
   1a010:	e754      	b.n	19ebc <lv_label_refr_text+0xd4>
   1a012:	bf00      	nop
   1a014:	20000950 	.word	0x20000950
   1a018:	2000093c 	.word	0x2000093c
   1a01c:	20000944 	.word	0x20000944
   1a020:	2000094c 	.word	0x2000094c

0001a024 <lv_label_create>:
{
   1a024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a028:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
   1a02a:	f7fc f833 	bl	16094 <lv_obj_create>
    if(new_label == NULL) return NULL;
   1a02e:	4604      	mov	r4, r0
   1a030:	b918      	cbnz	r0, 1a03a <lv_label_create+0x16>
   1a032:	2400      	movs	r4, #0
}
   1a034:	4620      	mov	r0, r4
   1a036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
   1a03a:	4d50      	ldr	r5, [pc, #320]	; (1a17c <lv_label_create+0x158>)
   1a03c:	682b      	ldr	r3, [r5, #0]
   1a03e:	b913      	cbnz	r3, 1a046 <lv_label_create+0x22>
   1a040:	f007 fcd3 	bl	219ea <lv_obj_get_signal_cb>
   1a044:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
   1a046:	2114      	movs	r1, #20
   1a048:	4620      	mov	r0, r4
   1a04a:	f007 f941 	bl	212d0 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
   1a04e:	4620      	mov	r0, r4
   1a050:	f007 fccd 	bl	219ee <lv_obj_get_ext_attr>
    if(ext == NULL) {
   1a054:	2300      	movs	r3, #0
   1a056:	4605      	mov	r5, r0
   1a058:	b918      	cbnz	r0, 1a062 <lv_label_create+0x3e>
        lv_obj_del(new_label);
   1a05a:	4620      	mov	r0, r4
   1a05c:	f007 fa9f 	bl	2159e <lv_obj_del>
        return NULL;
   1a060:	e7e7      	b.n	1a032 <lv_label_create+0xe>
    ext->dot_end    = LV_LABEL_DOT_END_INV;
   1a062:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ext->dot.tmp_ptr   = NULL;
   1a066:	e9c0 3300 	strd	r3, r3, [r0]
    ext->offset.x = 0;
   1a06a:	e9c0 2302 	strd	r2, r3, [r0, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
   1a06e:	8a03      	ldrh	r3, [r0, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
   1a070:	4943      	ldr	r1, [pc, #268]	; (1a180 <lv_label_create+0x15c>)
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
   1a072:	f423 73bf 	bic.w	r3, r3, #382	; 0x17e
   1a076:	f023 0301 	bic.w	r3, r3, #1
   1a07a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1a07e:	8203      	strh	r3, [r0, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
   1a080:	4620      	mov	r0, r4
   1a082:	f007 f923 	bl	212cc <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
   1a086:	493f      	ldr	r1, [pc, #252]	; (1a184 <lv_label_create+0x160>)
   1a088:	4620      	mov	r0, r4
   1a08a:	f007 f917 	bl	212bc <lv_obj_set_signal_cb>
    if(copy == NULL) {
   1a08e:	b987      	cbnz	r7, 1a0b2 <lv_label_create+0x8e>
        lv_theme_apply(new_label, LV_THEME_LABEL);
   1a090:	4620      	mov	r0, r4
   1a092:	2103      	movs	r1, #3
   1a094:	f7ff faac 	bl	195f0 <lv_theme_apply>
        lv_obj_set_click(new_label, false);
   1a098:	4639      	mov	r1, r7
   1a09a:	4620      	mov	r0, r4
   1a09c:	f007 f8fa 	bl	21294 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
   1a0a0:	4639      	mov	r1, r7
   1a0a2:	4620      	mov	r0, r4
   1a0a4:	f00b ff5b 	bl	25f5e <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
   1a0a8:	4937      	ldr	r1, [pc, #220]	; (1a188 <lv_label_create+0x164>)
   1a0aa:	4620      	mov	r0, r4
   1a0ac:	f00b ff00 	bl	25eb0 <lv_label_set_text>
   1a0b0:	e7c0      	b.n	1a034 <lv_label_create+0x10>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
   1a0b2:	4638      	mov	r0, r7
   1a0b4:	f007 fc9b 	bl	219ee <lv_obj_get_ext_attr>
   1a0b8:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
   1a0ba:	4638      	mov	r0, r7
   1a0bc:	f00b fdda 	bl	25c74 <lv_label_get_long_mode>
   1a0c0:	4601      	mov	r1, r0
   1a0c2:	4620      	mov	r0, r4
   1a0c4:	f00b ff4b 	bl	25f5e <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
   1a0c8:	4638      	mov	r0, r7
   1a0ca:	f00b feea 	bl	25ea2 <lv_label_get_recolor>
   1a0ce:	4601      	mov	r1, r0
   1a0d0:	4620      	mov	r0, r4
   1a0d2:	f00b ff6a 	bl	25faa <lv_label_set_recolor>
        lv_label_set_align(new_label, lv_label_get_align(copy));
   1a0d6:	4638      	mov	r0, r7
   1a0d8:	f00b fdd3 	bl	25c82 <lv_label_get_align>
   1a0dc:	4601      	mov	r1, r0
   1a0de:	4620      	mov	r0, r4
   1a0e0:	f00b fdb0 	bl	25c44 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
   1a0e4:	7c33      	ldrb	r3, [r6, #16]
   1a0e6:	071a      	lsls	r2, r3, #28
            lv_label_set_text(new_label, lv_label_get_text(copy));
   1a0e8:	4638      	mov	r0, r7
        if(copy_ext->static_txt == 0)
   1a0ea:	d439      	bmi.n	1a160 <lv_label_create+0x13c>
            lv_label_set_text(new_label, lv_label_get_text(copy));
   1a0ec:	f00b fdbd 	bl	25c6a <lv_label_get_text>
   1a0f0:	4601      	mov	r1, r0
   1a0f2:	4620      	mov	r0, r4
   1a0f4:	f00b fedc 	bl	25eb0 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
   1a0f8:	7c33      	ldrb	r3, [r6, #16]
   1a0fa:	f003 0307 	and.w	r3, r3, #7
   1a0fe:	2b02      	cmp	r3, #2
   1a100:	d115      	bne.n	1a12e <lv_label_create+0x10a>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
   1a102:	6830      	ldr	r0, [r6, #0]
   1a104:	682f      	ldr	r7, [r5, #0]
   1a106:	f7fe fdc3 	bl	18c90 <_lv_mem_get_size>
   1a10a:	4601      	mov	r1, r0
   1a10c:	4638      	mov	r0, r7
   1a10e:	f00b fbf1 	bl	258f4 <lv_mem_realloc>
   1a112:	4607      	mov	r7, r0
   1a114:	6028      	str	r0, [r5, #0]
            if(ext->text == NULL) return NULL;
   1a116:	2800      	cmp	r0, #0
   1a118:	d08b      	beq.n	1a032 <lv_label_create+0xe>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
   1a11a:	f8d6 8000 	ldr.w	r8, [r6]
   1a11e:	4640      	mov	r0, r8
   1a120:	f7fe fdb6 	bl	18c90 <_lv_mem_get_size>
   1a124:	4641      	mov	r1, r8
   1a126:	4602      	mov	r2, r0
   1a128:	4638      	mov	r0, r7
   1a12a:	f00b fd35 	bl	25b98 <_lv_memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
   1a12e:	7c73      	ldrb	r3, [r6, #17]
   1a130:	07db      	lsls	r3, r3, #31
   1a132:	d51c      	bpl.n	1a16e <lv_label_create+0x14a>
   1a134:	6870      	ldr	r0, [r6, #4]
   1a136:	b1d0      	cbz	r0, 1a16e <lv_label_create+0x14a>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
   1a138:	f7e6 f9a8 	bl	48c <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
   1a13c:	6869      	ldr	r1, [r5, #4]
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
   1a13e:	4602      	mov	r2, r0
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
   1a140:	4620      	mov	r0, r4
   1a142:	f00b fd2b 	bl	25b9c <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
   1a146:	7c72      	ldrb	r2, [r6, #17]
   1a148:	7c6b      	ldrb	r3, [r5, #17]
   1a14a:	f362 0300 	bfi	r3, r2, #0, #1
   1a14e:	746b      	strb	r3, [r5, #17]
        ext->dot_end       = copy_ext->dot_end;
   1a150:	68b3      	ldr	r3, [r6, #8]
   1a152:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   1a154:	22ff      	movs	r2, #255	; 0xff
   1a156:	4611      	mov	r1, r2
   1a158:	4620      	mov	r0, r4
   1a15a:	f7fc fb47 	bl	167ec <lv_obj_refresh_style>
   1a15e:	e769      	b.n	1a034 <lv_label_create+0x10>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
   1a160:	f00b fd83 	bl	25c6a <lv_label_get_text>
   1a164:	4601      	mov	r1, r0
   1a166:	4620      	mov	r0, r4
   1a168:	f00b fedf 	bl	25f2a <lv_label_set_text_static>
   1a16c:	e7c4      	b.n	1a0f8 <lv_label_create+0xd4>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
   1a16e:	2204      	movs	r2, #4
   1a170:	18b1      	adds	r1, r6, r2
   1a172:	18a8      	adds	r0, r5, r2
   1a174:	f00b fd10 	bl	25b98 <_lv_memcpy>
   1a178:	e7e5      	b.n	1a146 <lv_label_create+0x122>
   1a17a:	bf00      	nop
   1a17c:	20002e8c 	.word	0x20002e8c
   1a180:	00025c97 	.word	0x00025c97
   1a184:	0001a18d 	.word	0x0001a18d
   1a188:	00028dcd 	.word	0x00028dcd

0001a18c <lv_label_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
   1a18c:	2908      	cmp	r1, #8
{
   1a18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a192:	4604      	mov	r4, r0
   1a194:	460e      	mov	r6, r1
   1a196:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
   1a198:	d114      	bne.n	1a1c4 <lv_label_signal+0x38>
    switch(type) {
   1a19a:	7813      	ldrb	r3, [r2, #0]
   1a19c:	b14b      	cbz	r3, 1a1b2 <lv_label_signal+0x26>
        info->result = lv_label_get_style(label, info->part);
   1a19e:	2300      	movs	r3, #0
   1a1a0:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(label, sign, param);
   1a1a2:	4b28      	ldr	r3, [pc, #160]	; (1a244 <lv_label_signal+0xb8>)
   1a1a4:	462a      	mov	r2, r5
   1a1a6:	4620      	mov	r0, r4
   1a1a8:	681b      	ldr	r3, [r3, #0]
}
   1a1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(label, sign, param);
   1a1ae:	2108      	movs	r1, #8
   1a1b0:	4718      	bx	r3
            style_dsc_p = &label->style_list;
   1a1b2:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_label_get_style(label, info->part);
   1a1b6:	6053      	str	r3, [r2, #4]
        if(info->result != NULL) return LV_RES_OK;
   1a1b8:	2b00      	cmp	r3, #0
   1a1ba:	d0f2      	beq.n	1a1a2 <lv_label_signal+0x16>
   1a1bc:	2701      	movs	r7, #1
}
   1a1be:	4638      	mov	r0, r7
   1a1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    res = ancestor_signal(label, sign, param);
   1a1c4:	4b1f      	ldr	r3, [pc, #124]	; (1a244 <lv_label_signal+0xb8>)
   1a1c6:	681b      	ldr	r3, [r3, #0]
   1a1c8:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
   1a1ca:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
   1a1cc:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
   1a1ce:	d1f6      	bne.n	1a1be <lv_label_signal+0x32>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1a1d0:	2e07      	cmp	r6, #7
   1a1d2:	d105      	bne.n	1a1e0 <lv_label_signal+0x54>
   1a1d4:	4628      	mov	r0, r5
   1a1d6:	491c      	ldr	r1, [pc, #112]	; (1a248 <lv_label_signal+0xbc>)
}
   1a1d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1a1dc:	f007 bc09 	b.w	219f2 <lv_obj_handle_get_type_signal>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1a1e0:	4620      	mov	r0, r4
   1a1e2:	f007 fc04 	bl	219ee <lv_obj_get_ext_attr>
   1a1e6:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
   1a1e8:	b966      	cbnz	r6, 1a204 <lv_label_signal+0x78>
        if(ext->static_txt == 0) {
   1a1ea:	7c03      	ldrb	r3, [r0, #16]
   1a1ec:	f013 0508 	ands.w	r5, r3, #8
   1a1f0:	d104      	bne.n	1a1fc <lv_label_signal+0x70>
            lv_mem_free(ext->text);
   1a1f2:	6800      	ldr	r0, [r0, #0]
   1a1f4:	f7fe fd3c 	bl	18c70 <lv_mem_free>
            ext->text = NULL;
   1a1f8:	f8c8 5000 	str.w	r5, [r8]
        lv_label_dot_tmp_free(label);
   1a1fc:	4620      	mov	r0, r4
   1a1fe:	f00b fcb9 	bl	25b74 <lv_label_dot_tmp_free>
   1a202:	e7dc      	b.n	1a1be <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
   1a204:	2e04      	cmp	r6, #4
   1a206:	d106      	bne.n	1a216 <lv_label_signal+0x8a>
        lv_label_revert_dots(label);
   1a208:	4620      	mov	r0, r4
   1a20a:	f7ff fc9b 	bl	19b44 <lv_label_revert_dots>
        lv_label_refr_text(label);
   1a20e:	4620      	mov	r0, r4
   1a210:	f7ff fdea 	bl	19de8 <lv_label_refr_text>
   1a214:	e7d3      	b.n	1a1be <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_COORD_CHG) {
   1a216:	2e02      	cmp	r6, #2
   1a218:	d1d0      	bne.n	1a1bc <lv_label_signal+0x30>
   1a21a:	8a23      	ldrh	r3, [r4, #16]
   1a21c:	8aa2      	ldrh	r2, [r4, #20]
   1a21e:	8829      	ldrh	r1, [r5, #0]
   1a220:	1ad2      	subs	r2, r2, r3
   1a222:	88ab      	ldrh	r3, [r5, #4]
   1a224:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
   1a226:	b212      	sxth	r2, r2
   1a228:	b21b      	sxth	r3, r3
   1a22a:	429a      	cmp	r2, r3
   1a22c:	d1ec      	bne.n	1a208 <lv_label_signal+0x7c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1a22e:	8a63      	ldrh	r3, [r4, #18]
   1a230:	8ae2      	ldrh	r2, [r4, #22]
   1a232:	8869      	ldrh	r1, [r5, #2]
   1a234:	1ad2      	subs	r2, r2, r3
   1a236:	88eb      	ldrh	r3, [r5, #6]
   1a238:	1a5b      	subs	r3, r3, r1
   1a23a:	b212      	sxth	r2, r2
   1a23c:	b21b      	sxth	r3, r3
   1a23e:	429a      	cmp	r2, r3
   1a240:	d1e2      	bne.n	1a208 <lv_label_signal+0x7c>
   1a242:	e7bb      	b.n	1a1bc <lv_label_signal+0x30>
   1a244:	20002e8c 	.word	0x20002e8c
   1a248:	00028dd2 	.word	0x00028dd2

0001a24c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a24e:	4b11      	ldr	r3, [pc, #68]	; (1a294 <z_sys_init_run_level+0x48>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1a250:	4f11      	ldr	r7, [pc, #68]	; (1a298 <z_sys_init_run_level+0x4c>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a252:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1a256:	3001      	adds	r0, #1
   1a258:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1a25c:	42ae      	cmp	r6, r5
   1a25e:	d800      	bhi.n	1a262 <z_sys_init_run_level+0x16>
		}
	}
}
   1a260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1a262:	e9d5 3400 	ldrd	r3, r4, [r5]
   1a266:	4620      	mov	r0, r4
   1a268:	4798      	blx	r3
   1a26a:	b180      	cbz	r0, 1a28e <z_sys_init_run_level+0x42>
   1a26c:	b17c      	cbz	r4, 1a28e <z_sys_init_run_level+0x42>
				(dev - __device_start));
   1a26e:	4b0b      	ldr	r3, [pc, #44]	; (1a29c <z_sys_init_run_level+0x50>)
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1a270:	4a0b      	ldr	r2, [pc, #44]	; (1a2a0 <z_sys_init_run_level+0x54>)
   1a272:	1be4      	subs	r4, r4, r7
   1a274:	10e4      	asrs	r4, r4, #3
   1a276:	435c      	muls	r4, r3
   1a278:	0961      	lsrs	r1, r4, #5
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1a27a:	2301      	movs	r3, #1
	uint32_t temp = *(volatile uint32_t *)addr;
   1a27c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1a280:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1a284:	fa03 f404 	lsl.w	r4, r3, r4
   1a288:	4304      	orrs	r4, r0
   1a28a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a28e:	3508      	adds	r5, #8
   1a290:	e7e4      	b.n	1a25c <z_sys_init_run_level+0x10>
   1a292:	bf00      	nop
   1a294:	000284ec 	.word	0x000284ec
   1a298:	20000bbc 	.word	0x20000bbc
   1a29c:	aaaaaaab 	.word	0xaaaaaaab
   1a2a0:	20000c7c 	.word	0x20000c7c

0001a2a4 <z_device_get_all_static>:
#include <syscalls/device_get_binding_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   1a2a4:	4a03      	ldr	r2, [pc, #12]	; (1a2b4 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   1a2a6:	4b04      	ldr	r3, [pc, #16]	; (1a2b8 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   1a2a8:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   1a2aa:	1a9b      	subs	r3, r3, r2
}
   1a2ac:	4803      	ldr	r0, [pc, #12]	; (1a2bc <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   1a2ae:	10db      	asrs	r3, r3, #3
}
   1a2b0:	4358      	muls	r0, r3
   1a2b2:	4770      	bx	lr
   1a2b4:	20000bbc 	.word	0x20000bbc
   1a2b8:	20000c7c 	.word	0x20000c7c
   1a2bc:	aaaaaaab 	.word	0xaaaaaaab

0001a2c0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1a2c0:	4b09      	ldr	r3, [pc, #36]	; (1a2e8 <z_device_ready+0x28>)
   1a2c2:	1ac0      	subs	r0, r0, r3
   1a2c4:	10c3      	asrs	r3, r0, #3
   1a2c6:	4809      	ldr	r0, [pc, #36]	; (1a2ec <z_device_ready+0x2c>)
   1a2c8:	4358      	muls	r0, r3
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1a2ca:	0942      	lsrs	r2, r0, #5
   1a2cc:	4b08      	ldr	r3, [pc, #32]	; (1a2f0 <z_device_ready+0x30>)
   1a2ce:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1a2d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1a2d6:	2301      	movs	r3, #1
   1a2d8:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1a2dc:	4210      	tst	r0, r2
}
   1a2de:	bf0c      	ite	eq
   1a2e0:	4618      	moveq	r0, r3
   1a2e2:	2000      	movne	r0, #0
   1a2e4:	4770      	bx	lr
   1a2e6:	bf00      	nop
   1a2e8:	20000bbc 	.word	0x20000bbc
   1a2ec:	aaaaaaab 	.word	0xaaaaaaab
   1a2f0:	20000c7c 	.word	0x20000c7c

0001a2f4 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1a2f4:	4911      	ldr	r1, [pc, #68]	; (1a33c <z_impl_device_get_binding+0x48>)
{
   1a2f6:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1a2f8:	4c11      	ldr	r4, [pc, #68]	; (1a340 <z_impl_device_get_binding+0x4c>)
{
   1a2fa:	4605      	mov	r5, r0
   1a2fc:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1a2fe:	428c      	cmp	r4, r1
   1a300:	d104      	bne.n	1a30c <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a302:	4c0f      	ldr	r4, [pc, #60]	; (1a340 <z_impl_device_get_binding+0x4c>)
   1a304:	42b4      	cmp	r4, r6
   1a306:	d10a      	bne.n	1a31e <z_impl_device_get_binding+0x2a>
	return NULL;
   1a308:	2400      	movs	r4, #0
   1a30a:	e014      	b.n	1a336 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1a30c:	4620      	mov	r0, r4
   1a30e:	f7ff ffd7 	bl	1a2c0 <z_device_ready>
   1a312:	b110      	cbz	r0, 1a31a <z_impl_device_get_binding+0x26>
   1a314:	6823      	ldr	r3, [r4, #0]
   1a316:	42ab      	cmp	r3, r5
   1a318:	d00d      	beq.n	1a336 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a31a:	3418      	adds	r4, #24
   1a31c:	e7ef      	b.n	1a2fe <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a31e:	4620      	mov	r0, r4
   1a320:	f7ff ffce 	bl	1a2c0 <z_device_ready>
   1a324:	b908      	cbnz	r0, 1a32a <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a326:	3418      	adds	r4, #24
   1a328:	e7ec      	b.n	1a304 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a32a:	6821      	ldr	r1, [r4, #0]
   1a32c:	4628      	mov	r0, r5
   1a32e:	f7e6 f8a3 	bl	478 <strcmp>
   1a332:	2800      	cmp	r0, #0
   1a334:	d1f7      	bne.n	1a326 <z_impl_device_get_binding+0x32>
}
   1a336:	4620      	mov	r0, r4
   1a338:	bd70      	pop	{r4, r5, r6, pc}
   1a33a:	bf00      	nop
   1a33c:	20000c7c 	.word	0x20000c7c
   1a340:	20000bbc 	.word	0x20000bbc

0001a344 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1a344:	4b01      	ldr	r3, [pc, #4]	; (1a34c <z_impl_z_errno+0x8>)
   1a346:	6898      	ldr	r0, [r3, #8]
}
   1a348:	3068      	adds	r0, #104	; 0x68
   1a34a:	4770      	bx	lr
   1a34c:	20002e90 	.word	0x20002e90

0001a350 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
   1a352:	4e1c      	ldr	r6, [pc, #112]	; (1a3c4 <idle+0x74>)
{
   1a354:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   1a356:	2700      	movs	r7, #0
	__asm__ volatile(
   1a358:	f04f 0220 	mov.w	r2, #32
   1a35c:	f3ef 8311 	mrs	r3, BASEPRI
   1a360:	f382 8811 	msr	BASEPRI, r2
   1a364:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1a368:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1a36a:	b188      	cbz	r0, 1a390 <idle+0x40>
			cpu->pending_abort = NULL;
   1a36c:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1a36e:	f383 8811 	msr	BASEPRI, r3
   1a372:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   1a376:	f000 fc3d 	bl	1abf4 <z_thread_single_abort>
	__asm__ volatile(
   1a37a:	f04f 0320 	mov.w	r3, #32
   1a37e:	f3ef 8011 	mrs	r0, BASEPRI
   1a382:	f383 8811 	msr	BASEPRI, r3
   1a386:	f3bf 8f6f 	isb	sy
   1a38a:	f00b ffd0 	bl	2632e <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   1a38e:	e7e3      	b.n	1a358 <idle+0x8>
	__asm__ volatile(
   1a390:	f383 8811 	msr	BASEPRI, r3
   1a394:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a398:	f04f 0220 	mov.w	r2, #32
   1a39c:	f3ef 8311 	mrs	r3, BASEPRI
   1a3a0:	f382 8811 	msr	BASEPRI, r2
   1a3a4:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1a3a8:	f00c f946 	bl	26638 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1a3ac:	2101      	movs	r1, #1
   1a3ae:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1a3b0:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1a3b2:	bfd8      	it	le
   1a3b4:	4608      	movle	r0, r1
   1a3b6:	f00c f94f 	bl	26658 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1a3ba:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   1a3bc:	f7ea f9b6 	bl	472c <arch_cpu_idle>
}
   1a3c0:	e7ca      	b.n	1a358 <idle+0x8>
   1a3c2:	bf00      	nop
   1a3c4:	20002e90 	.word	0x20002e90

0001a3c8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1a3c8:	4802      	ldr	r0, [pc, #8]	; (1a3d4 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   1a3ca:	4a03      	ldr	r2, [pc, #12]	; (1a3d8 <z_bss_zero+0x10>)
   1a3cc:	2100      	movs	r1, #0
   1a3ce:	1a12      	subs	r2, r2, r0
   1a3d0:	f00c bb5c 	b.w	26a8c <memset>
   1a3d4:	20000ea0 	.word	0x20000ea0
   1a3d8:	200030cc 	.word	0x200030cc

0001a3dc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1a3dc:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a3de:	4806      	ldr	r0, [pc, #24]	; (1a3f8 <z_data_copy+0x1c>)
   1a3e0:	4a06      	ldr	r2, [pc, #24]	; (1a3fc <z_data_copy+0x20>)
   1a3e2:	4907      	ldr	r1, [pc, #28]	; (1a400 <z_data_copy+0x24>)
   1a3e4:	1a12      	subs	r2, r2, r0
   1a3e6:	f00c fb30 	bl	26a4a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1a3ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a3ee:	4a05      	ldr	r2, [pc, #20]	; (1a404 <z_data_copy+0x28>)
   1a3f0:	4905      	ldr	r1, [pc, #20]	; (1a408 <z_data_copy+0x2c>)
   1a3f2:	4806      	ldr	r0, [pc, #24]	; (1a40c <z_data_copy+0x30>)
   1a3f4:	f00c bb29 	b.w	26a4a <memcpy>
   1a3f8:	20000000 	.word	0x20000000
   1a3fc:	20000ea0 	.word	0x20000ea0
   1a400:	00029150 	.word	0x00029150
   1a404:	00000000 	.word	0x00000000
   1a408:	00029150 	.word	0x00029150
   1a40c:	20000000 	.word	0x20000000

0001a410 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1a410:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1a412:	4b0c      	ldr	r3, [pc, #48]	; (1a444 <bg_thread_main+0x34>)
   1a414:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a416:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1a418:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a41a:	f7ff ff17 	bl	1a24c <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1a41e:	4a0a      	ldr	r2, [pc, #40]	; (1a448 <bg_thread_main+0x38>)
   1a420:	490a      	ldr	r1, [pc, #40]	; (1a44c <bg_thread_main+0x3c>)
   1a422:	480b      	ldr	r0, [pc, #44]	; (1a450 <bg_thread_main+0x40>)
   1a424:	f003 fc63 	bl	1dcee <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1a428:	2003      	movs	r0, #3
   1a42a:	f7ff ff0f 	bl	1a24c <z_sys_init_run_level>

	z_init_static_threads();
   1a42e:	f000 fe6d 	bl	1b10c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1a432:	f003 fb95 	bl	1db60 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1a436:	4a07      	ldr	r2, [pc, #28]	; (1a454 <bg_thread_main+0x44>)
   1a438:	7b13      	ldrb	r3, [r2, #12]
   1a43a:	f023 0301 	bic.w	r3, r3, #1
   1a43e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1a440:	bd08      	pop	{r3, pc}
   1a442:	bf00      	nop
   1a444:	200030af 	.word	0x200030af
   1a448:	00028e22 	.word	0x00028e22
   1a44c:	00028ddb 	.word	0x00028ddb
   1a450:	00028dfc 	.word	0x00028dfc
   1a454:	20001400 	.word	0x20001400

0001a458 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1a458:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1a45c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1a554 <z_cstart+0xfc>
   1a460:	b0a9      	sub	sp, #164	; 0xa4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1a462:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1a466:	4d33      	ldr	r5, [pc, #204]	; (1a534 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1a468:	4e33      	ldr	r6, [pc, #204]	; (1a538 <z_cstart+0xe0>)
   1a46a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a46c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1a558 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   1a470:	4f32      	ldr	r7, [pc, #200]	; (1a53c <z_cstart+0xe4>)
   1a472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a476:	2400      	movs	r4, #0
   1a478:	616b      	str	r3, [r5, #20]
   1a47a:	23e0      	movs	r3, #224	; 0xe0
   1a47c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1a480:	77ec      	strb	r4, [r5, #31]
   1a482:	762c      	strb	r4, [r5, #24]
   1a484:	766c      	strb	r4, [r5, #25]
   1a486:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1a488:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a48a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1a48e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1a490:	f7ea fa94 	bl	49bc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1a494:	f7ea f944 	bl	4720 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1a498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a49c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1a49e:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1a4a0:	4d27      	ldr	r5, [pc, #156]	; (1a540 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1a4a2:	f240 1301 	movw	r3, #257	; 0x101
   1a4a6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1a4aa:	ab06      	add	r3, sp, #24
   1a4ac:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1a4ae:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1a4b0:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1a4b4:	f7ff feca 	bl	1a24c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1a4b8:	2001      	movs	r0, #1
   1a4ba:	f7ff fec7 	bl	1a24c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a4be:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1a4c2:	f000 fcdf 	bl	1ae84 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a4c6:	4b1f      	ldr	r3, [pc, #124]	; (1a544 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   1a4c8:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a4ca:	491f      	ldr	r1, [pc, #124]	; (1a548 <z_cstart+0xf0>)
   1a4cc:	9305      	str	r3, [sp, #20]
   1a4ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a4d2:	4653      	mov	r3, sl
   1a4d4:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1a4d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a4dc:	9400      	str	r4, [sp, #0]
   1a4de:	4630      	mov	r0, r6
   1a4e0:	f000 fdb8 	bl	1b054 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a4e4:	7b73      	ldrb	r3, [r6, #13]
   1a4e6:	4680      	mov	r8, r0
   1a4e8:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1a4ec:	4630      	mov	r0, r6
   1a4ee:	7373      	strb	r3, [r6, #13]
   1a4f0:	f00b ff5f 	bl	263b2 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1a4f4:	230f      	movs	r3, #15
   1a4f6:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1a4fa:	4914      	ldr	r1, [pc, #80]	; (1a54c <z_cstart+0xf4>)
   1a4fc:	4b14      	ldr	r3, [pc, #80]	; (1a550 <z_cstart+0xf8>)
   1a4fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1a502:	e9cd b404 	strd	fp, r4, [sp, #16]
   1a506:	e9cd 5400 	strd	r5, r4, [sp]
   1a50a:	4638      	mov	r0, r7
   1a50c:	f000 fda2 	bl	1b054 <z_setup_new_thread>
   1a510:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1a512:	60ef      	str	r7, [r5, #12]
   1a514:	f023 0304 	bic.w	r3, r3, #4
   1a518:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1a51a:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1a51e:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1a522:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1a524:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1a528:	4652      	mov	r2, sl
   1a52a:	4641      	mov	r1, r8
   1a52c:	4630      	mov	r0, r6
   1a52e:	f7ea f8df 	bl	46f0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1a532:	bf00      	nop
   1a534:	e000ed00 	.word	0xe000ed00
   1a538:	20001400 	.word	0x20001400
   1a53c:	20001378 	.word	0x20001378
   1a540:	20002e90 	.word	0x20002e90
   1a544:	00028e23 	.word	0x00028e23
   1a548:	20003f78 	.word	0x20003f78
   1a54c:	20004378 	.word	0x20004378
   1a550:	0001a351 	.word	0x0001a351
   1a554:	20004cb8 	.word	0x20004cb8
   1a558:	0001a411 	.word	0x0001a411

0001a55c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1a55c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1a55e:	4c06      	ldr	r4, [pc, #24]	; (1a578 <statics_init+0x1c>)
   1a560:	4d06      	ldr	r5, [pc, #24]	; (1a57c <statics_init+0x20>)
   1a562:	42ac      	cmp	r4, r5
   1a564:	d301      	bcc.n	1a56a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1a566:	2000      	movs	r0, #0
   1a568:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1a56a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1a56e:	4620      	mov	r0, r4
   1a570:	f00b fd5a 	bl	26028 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1a574:	3414      	adds	r4, #20
   1a576:	e7f4      	b.n	1a562 <statics_init+0x6>
   1a578:	20000d14 	.word	0x20000d14
   1a57c:	20000d14 	.word	0x20000d14

0001a580 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1a580:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a582:	4b0e      	ldr	r3, [pc, #56]	; (1a5bc <init_mem_slab_module+0x3c>)
   1a584:	4c0e      	ldr	r4, [pc, #56]	; (1a5c0 <init_mem_slab_module+0x40>)
   1a586:	42a3      	cmp	r3, r4
   1a588:	d301      	bcc.n	1a58e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1a58a:	2000      	movs	r0, #0
	return rc;
}
   1a58c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1a58e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1a592:	ea41 0200 	orr.w	r2, r1, r0
   1a596:	f012 0203 	ands.w	r2, r2, #3
   1a59a:	d10b      	bne.n	1a5b4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1a59c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1a59e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a5a0:	42aa      	cmp	r2, r5
   1a5a2:	d101      	bne.n	1a5a8 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a5a4:	331c      	adds	r3, #28
   1a5a6:	e7ee      	b.n	1a586 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1a5a8:	695e      	ldr	r6, [r3, #20]
   1a5aa:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a5ac:	3201      	adds	r2, #1
		slab->free_list = p;
   1a5ae:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1a5b0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1a5b2:	e7f5      	b.n	1a5a0 <init_mem_slab_module+0x20>
		return -EINVAL;
   1a5b4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1a5b8:	e7e8      	b.n	1a58c <init_mem_slab_module+0xc>
   1a5ba:	bf00      	nop
   1a5bc:	20000cc0 	.word	0x20000cc0
   1a5c0:	20000d14 	.word	0x20000d14

0001a5c4 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1a5c4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1a5c6:	460c      	mov	r4, r1
   1a5c8:	4616      	mov	r6, r2
   1a5ca:	461f      	mov	r7, r3
   1a5cc:	f04f 0320 	mov.w	r3, #32
   1a5d0:	f3ef 8111 	mrs	r1, BASEPRI
   1a5d4:	f383 8811 	msr	BASEPRI, r3
   1a5d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1a5dc:	6943      	ldr	r3, [r0, #20]
   1a5de:	b15b      	cbz	r3, 1a5f8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1a5e0:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1a5e2:	681b      	ldr	r3, [r3, #0]
   1a5e4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1a5e6:	6983      	ldr	r3, [r0, #24]
   1a5e8:	3301      	adds	r3, #1
   1a5ea:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1a5ec:	2000      	movs	r0, #0
	__asm__ volatile(
   1a5ee:	f381 8811 	msr	BASEPRI, r1
   1a5f2:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1a5f6:	e011      	b.n	1a61c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a5f8:	ea56 0207 	orrs.w	r2, r6, r7
   1a5fc:	d103      	bne.n	1a606 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1a5fe:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1a600:	f06f 000b 	mvn.w	r0, #11
   1a604:	e7f3      	b.n	1a5ee <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1a606:	4602      	mov	r2, r0
   1a608:	e9cd 6700 	strd	r6, r7, [sp]
   1a60c:	4804      	ldr	r0, [pc, #16]	; (1a620 <k_mem_slab_alloc+0x5c>)
   1a60e:	f000 fbb3 	bl	1ad78 <z_pend_curr>
		if (result == 0) {
   1a612:	b918      	cbnz	r0, 1a61c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1a614:	4b03      	ldr	r3, [pc, #12]	; (1a624 <k_mem_slab_alloc+0x60>)
   1a616:	689b      	ldr	r3, [r3, #8]
   1a618:	695b      	ldr	r3, [r3, #20]
   1a61a:	6023      	str	r3, [r4, #0]
}
   1a61c:	b002      	add	sp, #8
   1a61e:	bdd0      	pop	{r4, r6, r7, pc}
   1a620:	200030b0 	.word	0x200030b0
   1a624:	20002e90 	.word	0x20002e90

0001a628 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1a628:	b570      	push	{r4, r5, r6, lr}
   1a62a:	4604      	mov	r4, r0
   1a62c:	460d      	mov	r5, r1
	__asm__ volatile(
   1a62e:	f04f 0320 	mov.w	r3, #32
   1a632:	f3ef 8611 	mrs	r6, BASEPRI
   1a636:	f383 8811 	msr	BASEPRI, r3
   1a63a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1a63e:	f00b ff13 	bl	26468 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1a642:	b160      	cbz	r0, 1a65e <k_mem_slab_free+0x36>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1a644:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1a646:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1a648:	2100      	movs	r1, #0
   1a64a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
		z_ready_thread(pending_thread);
   1a64e:	f00b feb0 	bl	263b2 <z_ready_thread>
		z_reschedule(&lock, key);
   1a652:	4631      	mov	r1, r6
   1a654:	4808      	ldr	r0, [pc, #32]	; (1a678 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1a656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1a65a:	f000 b945 	b.w	1a8e8 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1a65e:	682b      	ldr	r3, [r5, #0]
   1a660:	6962      	ldr	r2, [r4, #20]
   1a662:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1a664:	682b      	ldr	r3, [r5, #0]
   1a666:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1a668:	69a3      	ldr	r3, [r4, #24]
   1a66a:	3b01      	subs	r3, #1
   1a66c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1a66e:	f386 8811 	msr	BASEPRI, r6
   1a672:	f3bf 8f6f 	isb	sy
}
   1a676:	bd70      	pop	{r4, r5, r6, pc}
   1a678:	200030b0 	.word	0x200030b0

0001a67c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1a67c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a680:	4604      	mov	r4, r0
   1a682:	4616      	mov	r6, r2
   1a684:	461f      	mov	r7, r3
	__asm__ volatile(
   1a686:	f04f 0320 	mov.w	r3, #32
   1a68a:	f3ef 8811 	mrs	r8, BASEPRI
   1a68e:	f383 8811 	msr	BASEPRI, r3
   1a692:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1a696:	68c3      	ldr	r3, [r0, #12]
   1a698:	4a32      	ldr	r2, [pc, #200]	; (1a764 <z_impl_k_mutex_lock+0xe8>)
   1a69a:	b16b      	cbz	r3, 1a6b8 <z_impl_k_mutex_lock+0x3c>
   1a69c:	6880      	ldr	r0, [r0, #8]
   1a69e:	6891      	ldr	r1, [r2, #8]
   1a6a0:	4288      	cmp	r0, r1
   1a6a2:	d019      	beq.n	1a6d8 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1a6a4:	ea56 0307 	orrs.w	r3, r6, r7
   1a6a8:	d118      	bne.n	1a6dc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1a6aa:	f388 8811 	msr	BASEPRI, r8
   1a6ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1a6b2:	f06f 000f 	mvn.w	r0, #15
   1a6b6:	e00c      	b.n	1a6d2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1a6b8:	6891      	ldr	r1, [r2, #8]
   1a6ba:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1a6be:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1a6c0:	3301      	adds	r3, #1
   1a6c2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1a6c4:	6893      	ldr	r3, [r2, #8]
   1a6c6:	60a3      	str	r3, [r4, #8]
   1a6c8:	f388 8811 	msr	BASEPRI, r8
   1a6cc:	f3bf 8f6f 	isb	sy
		return 0;
   1a6d0:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1a6d2:	b002      	add	sp, #8
   1a6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1a6d8:	6921      	ldr	r1, [r4, #16]
   1a6da:	e7f0      	b.n	1a6be <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1a6dc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a6e0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1a6e4:	4299      	cmp	r1, r3
   1a6e6:	bfa8      	it	ge
   1a6e8:	4619      	movge	r1, r3
   1a6ea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1a6ee:	4299      	cmp	r1, r3
   1a6f0:	da2c      	bge.n	1a74c <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1a6f2:	f000 fb83 	bl	1adfc <z_set_prio>
   1a6f6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1a6f8:	e9cd 6700 	strd	r6, r7, [sp]
   1a6fc:	481a      	ldr	r0, [pc, #104]	; (1a768 <z_impl_k_mutex_lock+0xec>)
   1a6fe:	4622      	mov	r2, r4
   1a700:	4641      	mov	r1, r8
   1a702:	f000 fb39 	bl	1ad78 <z_pend_curr>
	if (got_mutex == 0) {
   1a706:	2800      	cmp	r0, #0
   1a708:	d0e3      	beq.n	1a6d2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1a70a:	f04f 0320 	mov.w	r3, #32
   1a70e:	f3ef 8611 	mrs	r6, BASEPRI
   1a712:	f383 8811 	msr	BASEPRI, r3
   1a716:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1a71a:	6823      	ldr	r3, [r4, #0]
   1a71c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a71e:	42a3      	cmp	r3, r4
   1a720:	d007      	beq.n	1a732 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1a722:	b133      	cbz	r3, 1a732 <z_impl_k_mutex_lock+0xb6>
   1a724:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1a728:	4299      	cmp	r1, r3
   1a72a:	bfa8      	it	ge
   1a72c:	4619      	movge	r1, r3
   1a72e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a732:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1a734:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a738:	4299      	cmp	r1, r3
   1a73a:	d109      	bne.n	1a750 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1a73c:	b16d      	cbz	r5, 1a75a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1a73e:	480a      	ldr	r0, [pc, #40]	; (1a768 <z_impl_k_mutex_lock+0xec>)
   1a740:	4631      	mov	r1, r6
   1a742:	f000 f8d1 	bl	1a8e8 <z_reschedule>
	return -EAGAIN;
   1a746:	f06f 000a 	mvn.w	r0, #10
   1a74a:	e7c2      	b.n	1a6d2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1a74c:	2500      	movs	r5, #0
   1a74e:	e7d3      	b.n	1a6f8 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1a750:	f000 fb54 	bl	1adfc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a754:	2800      	cmp	r0, #0
   1a756:	d1f2      	bne.n	1a73e <z_impl_k_mutex_lock+0xc2>
   1a758:	e7f0      	b.n	1a73c <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1a75a:	f386 8811 	msr	BASEPRI, r6
   1a75e:	f3bf 8f6f 	isb	sy
   1a762:	e7f0      	b.n	1a746 <z_impl_k_mutex_lock+0xca>
   1a764:	20002e90 	.word	0x20002e90
   1a768:	200030b0 	.word	0x200030b0

0001a76c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1a76c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1a76e:	6883      	ldr	r3, [r0, #8]
{
   1a770:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1a772:	2b00      	cmp	r3, #0
   1a774:	d037      	beq.n	1a7e6 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1a776:	4a1f      	ldr	r2, [pc, #124]	; (1a7f4 <z_impl_k_mutex_unlock+0x88>)
   1a778:	6892      	ldr	r2, [r2, #8]
   1a77a:	4293      	cmp	r3, r2
   1a77c:	d136      	bne.n	1a7ec <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1a77e:	7bda      	ldrb	r2, [r3, #15]
   1a780:	3a01      	subs	r2, #1
   1a782:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1a784:	68c3      	ldr	r3, [r0, #12]
   1a786:	2b01      	cmp	r3, #1
   1a788:	d005      	beq.n	1a796 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1a78a:	3b01      	subs	r3, #1
   1a78c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1a78e:	f000 f90f 	bl	1a9b0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1a792:	2000      	movs	r0, #0
}
   1a794:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1a796:	f04f 0320 	mov.w	r3, #32
   1a79a:	f3ef 8511 	mrs	r5, BASEPRI
   1a79e:	f383 8811 	msr	BASEPRI, r3
   1a7a2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1a7a6:	6901      	ldr	r1, [r0, #16]
   1a7a8:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1a7aa:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a7ae:	4299      	cmp	r1, r3
   1a7b0:	d001      	beq.n	1a7b6 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1a7b2:	f000 fb23 	bl	1adfc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1a7b6:	4620      	mov	r0, r4
   1a7b8:	f00b fe56 	bl	26468 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1a7bc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1a7be:	b160      	cbz	r0, 1a7da <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   1a7c0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1a7c4:	6122      	str	r2, [r4, #16]
   1a7c6:	2200      	movs	r2, #0
   1a7c8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   1a7cc:	f00b fdf1 	bl	263b2 <z_ready_thread>
		z_reschedule(&lock, key);
   1a7d0:	4809      	ldr	r0, [pc, #36]	; (1a7f8 <z_impl_k_mutex_unlock+0x8c>)
   1a7d2:	4629      	mov	r1, r5
   1a7d4:	f000 f888 	bl	1a8e8 <z_reschedule>
   1a7d8:	e7d9      	b.n	1a78e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1a7da:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1a7dc:	f385 8811 	msr	BASEPRI, r5
   1a7e0:	f3bf 8f6f 	isb	sy
   1a7e4:	e7d3      	b.n	1a78e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1a7e6:	f06f 0015 	mvn.w	r0, #21
   1a7ea:	e7d3      	b.n	1a794 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1a7ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a7f0:	e7d0      	b.n	1a794 <z_impl_k_mutex_unlock+0x28>
   1a7f2:	bf00      	nop
   1a7f4:	20002e90 	.word	0x20002e90
   1a7f8:	200030b0 	.word	0x200030b0

0001a7fc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1a7fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a7fe:	4616      	mov	r6, r2
   1a800:	461f      	mov	r7, r3
	__asm__ volatile(
   1a802:	f04f 0320 	mov.w	r3, #32
   1a806:	f3ef 8511 	mrs	r5, BASEPRI
   1a80a:	f383 8811 	msr	BASEPRI, r3
   1a80e:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1a812:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1a814:	b19c      	cbz	r4, 1a83e <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a816:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a818:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a81a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a81e:	4294      	cmp	r4, r2
	list->head = node;
   1a820:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1a822:	bf08      	it	eq
   1a824:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1a826:	2101      	movs	r1, #1
   1a828:	4620      	mov	r0, r4
   1a82a:	f00b fcee 	bl	2620a <z_queue_node_peek>
   1a82e:	4604      	mov	r4, r0
	__asm__ volatile(
   1a830:	f385 8811 	msr	BASEPRI, r5
   1a834:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1a838:	4620      	mov	r0, r4
   1a83a:	b003      	add	sp, #12
   1a83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a83e:	ea56 0307 	orrs.w	r3, r6, r7
   1a842:	d0f5      	beq.n	1a830 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a844:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1a848:	e9cd 6700 	strd	r6, r7, [sp]
   1a84c:	4629      	mov	r1, r5
   1a84e:	4610      	mov	r0, r2
   1a850:	f000 fa92 	bl	1ad78 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1a854:	2800      	cmp	r0, #0
   1a856:	d1ef      	bne.n	1a838 <z_impl_k_queue_get+0x3c>
   1a858:	4b01      	ldr	r3, [pc, #4]	; (1a860 <z_impl_k_queue_get+0x64>)
   1a85a:	689b      	ldr	r3, [r3, #8]
   1a85c:	695c      	ldr	r4, [r3, #20]
   1a85e:	e7eb      	b.n	1a838 <z_impl_k_queue_get+0x3c>
   1a860:	20002e90 	.word	0x20002e90

0001a864 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1a864:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1a866:	4c08      	ldr	r4, [pc, #32]	; (1a888 <z_reset_time_slice+0x24>)
   1a868:	6823      	ldr	r3, [r4, #0]
   1a86a:	b15b      	cbz	r3, 1a884 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a86c:	f7e9 fe62 	bl	4534 <z_clock_elapsed>
   1a870:	4603      	mov	r3, r0
   1a872:	6820      	ldr	r0, [r4, #0]
   1a874:	4a05      	ldr	r2, [pc, #20]	; (1a88c <z_reset_time_slice+0x28>)
   1a876:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1a878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a87c:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1a87e:	2100      	movs	r1, #0
   1a880:	f00b beea 	b.w	26658 <z_set_timeout_expiry>
}
   1a884:	bd10      	pop	{r4, pc}
   1a886:	bf00      	nop
   1a888:	20002ecc 	.word	0x20002ecc
   1a88c:	20002e90 	.word	0x20002e90

0001a890 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a892:	4605      	mov	r5, r0
   1a894:	460c      	mov	r4, r1
	__asm__ volatile(
   1a896:	f04f 0320 	mov.w	r3, #32
   1a89a:	f3ef 8611 	mrs	r6, BASEPRI
   1a89e:	f383 8811 	msr	BASEPRI, r3
   1a8a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1a8a6:	4b0d      	ldr	r3, [pc, #52]	; (1a8dc <k_sched_time_slice_set+0x4c>)
   1a8a8:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1a8aa:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1a8ae:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a8b2:	2100      	movs	r1, #0
   1a8b4:	615a      	str	r2, [r3, #20]
   1a8b6:	fbe7 0105 	umlal	r0, r1, r7, r5
   1a8ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a8be:	2300      	movs	r3, #0
   1a8c0:	f7e5 fc5e 	bl	180 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1a8c4:	4b06      	ldr	r3, [pc, #24]	; (1a8e0 <k_sched_time_slice_set+0x50>)
   1a8c6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1a8c8:	4b06      	ldr	r3, [pc, #24]	; (1a8e4 <k_sched_time_slice_set+0x54>)
   1a8ca:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1a8cc:	f7ff ffca 	bl	1a864 <z_reset_time_slice>
	__asm__ volatile(
   1a8d0:	f386 8811 	msr	BASEPRI, r6
   1a8d4:	f3bf 8f6f 	isb	sy
	}
}
   1a8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a8da:	bf00      	nop
   1a8dc:	20002e90 	.word	0x20002e90
   1a8e0:	20002ecc 	.word	0x20002ecc
   1a8e4:	20002ec8 	.word	0x20002ec8

0001a8e8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a8e8:	b949      	cbnz	r1, 1a8fe <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a8ea:	f3ef 8005 	mrs	r0, IPSR
   1a8ee:	b930      	cbnz	r0, 1a8fe <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1a8f0:	4b05      	ldr	r3, [pc, #20]	; (1a908 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1a8f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a8f4:	689b      	ldr	r3, [r3, #8]
   1a8f6:	429a      	cmp	r2, r3
   1a8f8:	d001      	beq.n	1a8fe <z_reschedule+0x16>
	ret = arch_swap(key);
   1a8fa:	f7e9 be35 	b.w	4568 <arch_swap>
   1a8fe:	f381 8811 	msr	BASEPRI, r1
   1a902:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1a906:	4770      	bx	lr
   1a908:	20002e90 	.word	0x20002e90

0001a90c <k_sched_lock>:
	__asm__ volatile(
   1a90c:	f04f 0320 	mov.w	r3, #32
   1a910:	f3ef 8111 	mrs	r1, BASEPRI
   1a914:	f383 8811 	msr	BASEPRI, r3
   1a918:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1a91c:	4b04      	ldr	r3, [pc, #16]	; (1a930 <k_sched_lock+0x24>)
   1a91e:	689a      	ldr	r2, [r3, #8]
   1a920:	7bd3      	ldrb	r3, [r2, #15]
   1a922:	3b01      	subs	r3, #1
   1a924:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1a926:	f381 8811 	msr	BASEPRI, r1
   1a92a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1a92e:	4770      	bx	lr
   1a930:	20002e90 	.word	0x20002e90

0001a934 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a934:	4b09      	ldr	r3, [pc, #36]	; (1a95c <z_priq_dumb_remove+0x28>)
   1a936:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1a93a:	4282      	cmp	r2, r0
   1a93c:	d105      	bne.n	1a94a <z_priq_dumb_remove+0x16>
   1a93e:	689b      	ldr	r3, [r3, #8]
   1a940:	428b      	cmp	r3, r1
   1a942:	d102      	bne.n	1a94a <z_priq_dumb_remove+0x16>
   1a944:	7b4b      	ldrb	r3, [r1, #13]
   1a946:	06db      	lsls	r3, r3, #27
   1a948:	d106      	bne.n	1a958 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1a94a:	e9d1 3200 	ldrd	r3, r2, [r1]
   1a94e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a950:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a952:	2300      	movs	r3, #0
	node->prev = NULL;
   1a954:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1a958:	4770      	bx	lr
   1a95a:	bf00      	nop
   1a95c:	20002e90 	.word	0x20002e90

0001a960 <update_cache>:
{
   1a960:	b538      	push	{r3, r4, r5, lr}
   1a962:	4c12      	ldr	r4, [pc, #72]	; (1a9ac <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1a964:	6923      	ldr	r3, [r4, #16]
   1a966:	68a2      	ldr	r2, [r4, #8]
{
   1a968:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1a96a:	b10b      	cbz	r3, 1a970 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1a96c:	68e5      	ldr	r5, [r4, #12]
   1a96e:	e00c      	b.n	1a98a <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1a970:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1a974:	f00b fd13 	bl	2639e <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1a978:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1a97a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1a97c:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1a97e:	bf44      	itt	mi
   1a980:	f043 0308 	orrmi.w	r3, r3, #8
   1a984:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1a986:	2d00      	cmp	r5, #0
   1a988:	d0f0      	beq.n	1a96c <update_cache+0xc>
	if (preempt_ok != 0) {
   1a98a:	b949      	cbnz	r1, 1a9a0 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1a98c:	7b53      	ldrb	r3, [r2, #13]
   1a98e:	06db      	lsls	r3, r3, #27
   1a990:	d106      	bne.n	1a9a0 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1a992:	69ab      	ldr	r3, [r5, #24]
   1a994:	b923      	cbnz	r3, 1a9a0 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1a996:	89d3      	ldrh	r3, [r2, #14]
   1a998:	2b7f      	cmp	r3, #127	; 0x7f
   1a99a:	d901      	bls.n	1a9a0 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1a99c:	62a2      	str	r2, [r4, #40]	; 0x28
}
   1a99e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1a9a0:	4295      	cmp	r5, r2
   1a9a2:	d001      	beq.n	1a9a8 <update_cache+0x48>
			z_reset_time_slice();
   1a9a4:	f7ff ff5e 	bl	1a864 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1a9a8:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1a9aa:	e7f8      	b.n	1a99e <update_cache+0x3e>
   1a9ac:	20002e90 	.word	0x20002e90

0001a9b0 <k_sched_unlock>:
{
   1a9b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a9b2:	f04f 0320 	mov.w	r3, #32
   1a9b6:	f3ef 8411 	mrs	r4, BASEPRI
   1a9ba:	f383 8811 	msr	BASEPRI, r3
   1a9be:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1a9c2:	4b08      	ldr	r3, [pc, #32]	; (1a9e4 <k_sched_unlock+0x34>)
   1a9c4:	689a      	ldr	r2, [r3, #8]
   1a9c6:	7bd3      	ldrb	r3, [r2, #15]
   1a9c8:	3301      	adds	r3, #1
   1a9ca:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1a9cc:	2000      	movs	r0, #0
   1a9ce:	f7ff ffc7 	bl	1a960 <update_cache>
	__asm__ volatile(
   1a9d2:	f384 8811 	msr	BASEPRI, r4
   1a9d6:	f3bf 8f6f 	isb	sy
}
   1a9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1a9de:	f00b bcb2 	b.w	26346 <z_reschedule_unlocked>
   1a9e2:	bf00      	nop
   1a9e4:	20002e90 	.word	0x20002e90

0001a9e8 <ready_thread>:
{
   1a9e8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1a9ea:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1a9ee:	7b43      	ldrb	r3, [r0, #13]
   1a9f0:	2a00      	cmp	r2, #0
   1a9f2:	db2c      	blt.n	1aa4e <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a9f4:	06db      	lsls	r3, r3, #27
   1a9f6:	d12a      	bne.n	1aa4e <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1a9f8:	6983      	ldr	r3, [r0, #24]
   1a9fa:	bb43      	cbnz	r3, 1aa4e <ready_thread+0x66>
	return list->head == list;
   1a9fc:	4a15      	ldr	r2, [pc, #84]	; (1aa54 <ready_thread+0x6c>)
   1a9fe:	4611      	mov	r1, r2
   1aa00:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aa04:	428c      	cmp	r4, r1
   1aa06:	bf18      	it	ne
   1aa08:	4623      	movne	r3, r4
   1aa0a:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1aa0c:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1aa0e:	bf38      	it	cc
   1aa10:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1aa12:	b1b3      	cbz	r3, 1aa42 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1aa14:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1aa18:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1aa1c:	42ae      	cmp	r6, r5
   1aa1e:	db03      	blt.n	1aa28 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   1aa20:	42a3      	cmp	r3, r4
   1aa22:	d00e      	beq.n	1aa42 <ready_thread+0x5a>
   1aa24:	681b      	ldr	r3, [r3, #0]
   1aa26:	e7f4      	b.n	1aa12 <ready_thread+0x2a>
	node->prev = successor->prev;
   1aa28:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1aa2a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1aa2e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1aa30:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1aa32:	7b43      	ldrb	r3, [r0, #13]
   1aa34:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1aa38:	7343      	strb	r3, [r0, #13]
}
   1aa3a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1aa3c:	2000      	movs	r0, #0
   1aa3e:	f7ff bf8f 	b.w	1a960 <update_cache>
	node->prev = list->tail;
   1aa42:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1aa46:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1aa48:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1aa4a:	6310      	str	r0, [r2, #48]	; 0x30
}
   1aa4c:	e7f1      	b.n	1aa32 <ready_thread+0x4a>
}
   1aa4e:	bc70      	pop	{r4, r5, r6}
   1aa50:	4770      	bx	lr
   1aa52:	bf00      	nop
   1aa54:	20002e90 	.word	0x20002e90

0001aa58 <z_sched_start>:
{
   1aa58:	b510      	push	{r4, lr}
	__asm__ volatile(
   1aa5a:	f04f 0220 	mov.w	r2, #32
   1aa5e:	f3ef 8411 	mrs	r4, BASEPRI
   1aa62:	f382 8811 	msr	BASEPRI, r2
   1aa66:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1aa6a:	7b42      	ldrb	r2, [r0, #13]
   1aa6c:	0751      	lsls	r1, r2, #29
   1aa6e:	d404      	bmi.n	1aa7a <z_sched_start+0x22>
	__asm__ volatile(
   1aa70:	f384 8811 	msr	BASEPRI, r4
   1aa74:	f3bf 8f6f 	isb	sy
}
   1aa78:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1aa7a:	f022 0204 	bic.w	r2, r2, #4
   1aa7e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1aa80:	f7ff ffb2 	bl	1a9e8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1aa84:	4621      	mov	r1, r4
   1aa86:	4802      	ldr	r0, [pc, #8]	; (1aa90 <z_sched_start+0x38>)
}
   1aa88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1aa8c:	f7ff bf2c 	b.w	1a8e8 <z_reschedule>
   1aa90:	200030b0 	.word	0x200030b0

0001aa94 <move_thread_to_end_of_prio_q>:
{
   1aa94:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1aa96:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1aa9a:	2b00      	cmp	r3, #0
{
   1aa9c:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1aa9e:	da02      	bge.n	1aaa6 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1aaa0:	4817      	ldr	r0, [pc, #92]	; (1ab00 <move_thread_to_end_of_prio_q+0x6c>)
   1aaa2:	f7ff ff47 	bl	1a934 <z_priq_dumb_remove>
	return list->head == list;
   1aaa6:	4a17      	ldr	r2, [pc, #92]	; (1ab04 <move_thread_to_end_of_prio_q+0x70>)
   1aaa8:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1aaaa:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
   1aaac:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aab0:	4283      	cmp	r3, r0
   1aab2:	bf08      	it	eq
   1aab4:	2300      	moveq	r3, #0
   1aab6:	2b00      	cmp	r3, #0
   1aab8:	bf38      	it	cc
   1aaba:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1aabc:	b1d3      	cbz	r3, 1aaf4 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1aabe:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1aac2:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1aac6:	42ae      	cmp	r6, r5
   1aac8:	db03      	blt.n	1aad2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1aaca:	42a3      	cmp	r3, r4
   1aacc:	d012      	beq.n	1aaf4 <move_thread_to_end_of_prio_q+0x60>
   1aace:	681b      	ldr	r3, [r3, #0]
   1aad0:	e7f4      	b.n	1aabc <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1aad2:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1aad4:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1aad8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1aada:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1aadc:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1aade:	6890      	ldr	r0, [r2, #8]
   1aae0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1aae4:	734b      	strb	r3, [r1, #13]
   1aae6:	1a43      	subs	r3, r0, r1
   1aae8:	4258      	negs	r0, r3
}
   1aaea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1aaee:	4158      	adcs	r0, r3
   1aaf0:	f7ff bf36 	b.w	1a960 <update_cache>
	node->prev = list->tail;
   1aaf4:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1aaf8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1aafa:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1aafc:	6311      	str	r1, [r2, #48]	; 0x30
}
   1aafe:	e7ed      	b.n	1aadc <move_thread_to_end_of_prio_q+0x48>
   1ab00:	20002ebc 	.word	0x20002ebc
   1ab04:	20002e90 	.word	0x20002e90

0001ab08 <z_time_slice>:
{
   1ab08:	b570      	push	{r4, r5, r6, lr}
   1ab0a:	4601      	mov	r1, r0
	__asm__ volatile(
   1ab0c:	f04f 0320 	mov.w	r3, #32
   1ab10:	f3ef 8411 	mrs	r4, BASEPRI
   1ab14:	f383 8811 	msr	BASEPRI, r3
   1ab18:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1ab1c:	4b16      	ldr	r3, [pc, #88]	; (1ab78 <z_time_slice+0x70>)
   1ab1e:	4a17      	ldr	r2, [pc, #92]	; (1ab7c <z_time_slice+0x74>)
   1ab20:	6898      	ldr	r0, [r3, #8]
   1ab22:	6815      	ldr	r5, [r2, #0]
   1ab24:	42a8      	cmp	r0, r5
   1ab26:	461d      	mov	r5, r3
   1ab28:	d106      	bne.n	1ab38 <z_time_slice+0x30>
			z_reset_time_slice();
   1ab2a:	f7ff fe9b 	bl	1a864 <z_reset_time_slice>
	__asm__ volatile(
   1ab2e:	f384 8811 	msr	BASEPRI, r4
   1ab32:	f3bf 8f6f 	isb	sy
}
   1ab36:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1ab38:	2600      	movs	r6, #0
   1ab3a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1ab3c:	4a10      	ldr	r2, [pc, #64]	; (1ab80 <z_time_slice+0x78>)
   1ab3e:	6812      	ldr	r2, [r2, #0]
   1ab40:	b1ba      	cbz	r2, 1ab72 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1ab42:	89c2      	ldrh	r2, [r0, #14]
   1ab44:	2a7f      	cmp	r2, #127	; 0x7f
   1ab46:	d814      	bhi.n	1ab72 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1ab48:	7b42      	ldrb	r2, [r0, #13]
   1ab4a:	06d2      	lsls	r2, r2, #27
   1ab4c:	d111      	bne.n	1ab72 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1ab4e:	4a0d      	ldr	r2, [pc, #52]	; (1ab84 <z_time_slice+0x7c>)
   1ab50:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1ab54:	6812      	ldr	r2, [r2, #0]
   1ab56:	4296      	cmp	r6, r2
   1ab58:	db0b      	blt.n	1ab72 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1ab5a:	4a0b      	ldr	r2, [pc, #44]	; (1ab88 <z_time_slice+0x80>)
   1ab5c:	4290      	cmp	r0, r2
   1ab5e:	d008      	beq.n	1ab72 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1ab60:	695a      	ldr	r2, [r3, #20]
   1ab62:	428a      	cmp	r2, r1
   1ab64:	dc02      	bgt.n	1ab6c <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1ab66:	f7ff ff95 	bl	1aa94 <move_thread_to_end_of_prio_q>
   1ab6a:	e7de      	b.n	1ab2a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1ab6c:	1a52      	subs	r2, r2, r1
   1ab6e:	615a      	str	r2, [r3, #20]
   1ab70:	e7dd      	b.n	1ab2e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1ab72:	2300      	movs	r3, #0
   1ab74:	616b      	str	r3, [r5, #20]
   1ab76:	e7da      	b.n	1ab2e <z_time_slice+0x26>
   1ab78:	20002e90 	.word	0x20002e90
   1ab7c:	20002ec4 	.word	0x20002ec4
   1ab80:	20002ecc 	.word	0x20002ecc
   1ab84:	20002ec8 	.word	0x20002ec8
   1ab88:	20001378 	.word	0x20001378

0001ab8c <z_impl_k_thread_suspend>:
{
   1ab8c:	b570      	push	{r4, r5, r6, lr}
   1ab8e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1ab90:	3018      	adds	r0, #24
   1ab92:	f00b fd3b 	bl	2660c <z_abort_timeout>
	__asm__ volatile(
   1ab96:	f04f 0320 	mov.w	r3, #32
   1ab9a:	f3ef 8611 	mrs	r6, BASEPRI
   1ab9e:	f383 8811 	msr	BASEPRI, r3
   1aba2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1aba6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1abaa:	2b00      	cmp	r3, #0
   1abac:	da07      	bge.n	1abbe <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1abae:	480f      	ldr	r0, [pc, #60]	; (1abec <z_impl_k_thread_suspend+0x60>)
   1abb0:	4621      	mov	r1, r4
   1abb2:	f7ff febf 	bl	1a934 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1abb6:	7b63      	ldrb	r3, [r4, #13]
   1abb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1abbc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1abbe:	4d0c      	ldr	r5, [pc, #48]	; (1abf0 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1abc0:	7b63      	ldrb	r3, [r4, #13]
   1abc2:	68a8      	ldr	r0, [r5, #8]
   1abc4:	f043 0310 	orr.w	r3, r3, #16
   1abc8:	7363      	strb	r3, [r4, #13]
   1abca:	1b03      	subs	r3, r0, r4
   1abcc:	4258      	negs	r0, r3
   1abce:	4158      	adcs	r0, r3
   1abd0:	f7ff fec6 	bl	1a960 <update_cache>
	__asm__ volatile(
   1abd4:	f386 8811 	msr	BASEPRI, r6
   1abd8:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1abdc:	68ab      	ldr	r3, [r5, #8]
   1abde:	42a3      	cmp	r3, r4
   1abe0:	d103      	bne.n	1abea <z_impl_k_thread_suspend+0x5e>
}
   1abe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1abe6:	f00b bbae 	b.w	26346 <z_reschedule_unlocked>
}
   1abea:	bd70      	pop	{r4, r5, r6, pc}
   1abec:	20002ebc 	.word	0x20002ebc
   1abf0:	20002e90 	.word	0x20002e90

0001abf4 <z_thread_single_abort>:
{
   1abf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abf8:	4604      	mov	r4, r0
	__asm__ volatile(
   1abfa:	f04f 0320 	mov.w	r3, #32
   1abfe:	f3ef 8211 	mrs	r2, BASEPRI
   1ac02:	f383 8811 	msr	BASEPRI, r3
   1ac06:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1ac0a:	7b43      	ldrb	r3, [r0, #13]
   1ac0c:	f013 0f28 	tst.w	r3, #40	; 0x28
   1ac10:	d005      	beq.n	1ac1e <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1ac12:	f382 8811 	msr	BASEPRI, r2
   1ac16:	f3bf 8f6f 	isb	sy
}
   1ac1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1ac1e:	f043 0320 	orr.w	r3, r3, #32
   1ac22:	7343      	strb	r3, [r0, #13]
   1ac24:	f382 8811 	msr	BASEPRI, r2
   1ac28:	f3bf 8f6f 	isb	sy
   1ac2c:	3018      	adds	r0, #24
   1ac2e:	f00b fced 	bl	2660c <z_abort_timeout>
	__asm__ volatile(
   1ac32:	f04f 0320 	mov.w	r3, #32
   1ac36:	f3ef 8611 	mrs	r6, BASEPRI
   1ac3a:	f383 8811 	msr	BASEPRI, r3
   1ac3e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ac42:	7b63      	ldrb	r3, [r4, #13]
   1ac44:	06d8      	lsls	r0, r3, #27
   1ac46:	d116      	bne.n	1ac76 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1ac48:	69a2      	ldr	r2, [r4, #24]
   1ac4a:	b9a2      	cbnz	r2, 1ac76 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1ac4c:	0619      	lsls	r1, r3, #24
   1ac4e:	d507      	bpl.n	1ac60 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1ac50:	4826      	ldr	r0, [pc, #152]	; (1acec <z_thread_single_abort+0xf8>)
   1ac52:	4621      	mov	r1, r4
   1ac54:	f7ff fe6e 	bl	1a934 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1ac58:	7b63      	ldrb	r3, [r4, #13]
   1ac5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ac5e:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1ac60:	4b23      	ldr	r3, [pc, #140]	; (1acf0 <z_thread_single_abort+0xfc>)
   1ac62:	6898      	ldr	r0, [r3, #8]
   1ac64:	1b02      	subs	r2, r0, r4
   1ac66:	4250      	negs	r0, r2
   1ac68:	4150      	adcs	r0, r2
   1ac6a:	f7ff fe79 	bl	1a960 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1ac6e:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1ac72:	2700      	movs	r7, #0
   1ac74:	e01e      	b.n	1acb4 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1ac76:	079b      	lsls	r3, r3, #30
   1ac78:	d5f9      	bpl.n	1ac6e <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1ac7a:	68a0      	ldr	r0, [r4, #8]
   1ac7c:	4621      	mov	r1, r4
   1ac7e:	f7ff fe59 	bl	1a934 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ac82:	7b63      	ldrb	r3, [r4, #13]
   1ac84:	f023 0302 	bic.w	r3, r3, #2
   1ac88:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1ac8a:	2300      	movs	r3, #0
   1ac8c:	60a3      	str	r3, [r4, #8]
   1ac8e:	e7ee      	b.n	1ac6e <z_thread_single_abort+0x7a>
   1ac90:	f105 0018 	add.w	r0, r5, #24
   1ac94:	f00b fcba 	bl	2660c <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1ac98:	68a8      	ldr	r0, [r5, #8]
   1ac9a:	4629      	mov	r1, r5
   1ac9c:	f7ff fe4a 	bl	1a934 <z_priq_dumb_remove>
   1aca0:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1aca2:	60af      	str	r7, [r5, #8]
   1aca4:	f023 0302 	bic.w	r3, r3, #2
   1aca8:	736b      	strb	r3, [r5, #13]
   1acaa:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   1acae:	4628      	mov	r0, r5
   1acb0:	f7ff fe9a 	bl	1a9e8 <ready_thread>
	return list->head == list;
   1acb4:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1acb6:	4545      	cmp	r5, r8
   1acb8:	d001      	beq.n	1acbe <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1acba:	2d00      	cmp	r5, #0
   1acbc:	d1e8      	bne.n	1ac90 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1acbe:	4b0c      	ldr	r3, [pc, #48]	; (1acf0 <z_thread_single_abort+0xfc>)
   1acc0:	689a      	ldr	r2, [r3, #8]
   1acc2:	4b0c      	ldr	r3, [pc, #48]	; (1acf4 <z_thread_single_abort+0x100>)
   1acc4:	429a      	cmp	r2, r3
   1acc6:	d102      	bne.n	1acce <z_thread_single_abort+0xda>
			update_cache(1);
   1acc8:	2001      	movs	r0, #1
   1acca:	f7ff fe49 	bl	1a960 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1acce:	7b63      	ldrb	r3, [r4, #13]
   1acd0:	f043 0308 	orr.w	r3, r3, #8
   1acd4:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1acd6:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1acd8:	f386 8811 	msr	BASEPRI, r6
   1acdc:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1ace0:	2b00      	cmp	r3, #0
   1ace2:	d09a      	beq.n	1ac1a <z_thread_single_abort+0x26>
		fn_abort(thread);
   1ace4:	4620      	mov	r0, r4
}
   1ace6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1acea:	4718      	bx	r3
   1acec:	20002ebc 	.word	0x20002ebc
   1acf0:	20002e90 	.word	0x20002e90
   1acf4:	20001378 	.word	0x20001378

0001acf8 <unready_thread>:
{
   1acf8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1acfa:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1acfe:	2b00      	cmp	r3, #0
{
   1ad00:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ad02:	da06      	bge.n	1ad12 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ad04:	4807      	ldr	r0, [pc, #28]	; (1ad24 <unready_thread+0x2c>)
   1ad06:	f7ff fe15 	bl	1a934 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1ad0a:	7b4b      	ldrb	r3, [r1, #13]
   1ad0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ad10:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1ad12:	4b05      	ldr	r3, [pc, #20]	; (1ad28 <unready_thread+0x30>)
   1ad14:	6898      	ldr	r0, [r3, #8]
   1ad16:	1a43      	subs	r3, r0, r1
   1ad18:	4258      	negs	r0, r3
   1ad1a:	4158      	adcs	r0, r3
}
   1ad1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1ad20:	f7ff be1e 	b.w	1a960 <update_cache>
   1ad24:	20002ebc 	.word	0x20002ebc
   1ad28:	20002e90 	.word	0x20002e90

0001ad2c <pend>:
{
   1ad2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad30:	4606      	mov	r6, r0
   1ad32:	4614      	mov	r4, r2
   1ad34:	461d      	mov	r5, r3
	__asm__ volatile(
   1ad36:	f04f 0320 	mov.w	r3, #32
   1ad3a:	f3ef 8711 	mrs	r7, BASEPRI
   1ad3e:	f383 8811 	msr	BASEPRI, r3
   1ad42:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1ad46:	f00b fb64 	bl	26412 <add_to_waitq_locked>
	__asm__ volatile(
   1ad4a:	f387 8811 	msr	BASEPRI, r7
   1ad4e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ad52:	1c6b      	adds	r3, r5, #1
   1ad54:	bf08      	it	eq
   1ad56:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1ad5a:	d008      	beq.n	1ad6e <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1ad5c:	4622      	mov	r2, r4
   1ad5e:	462b      	mov	r3, r5
   1ad60:	f106 0018 	add.w	r0, r6, #24
   1ad64:	4903      	ldr	r1, [pc, #12]	; (1ad74 <pend+0x48>)
}
   1ad66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ad6a:	f000 baf7 	b.w	1b35c <z_add_timeout>
   1ad6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad72:	bf00      	nop
   1ad74:	000263d3 	.word	0x000263d3

0001ad78 <z_pend_curr>:
{
   1ad78:	b510      	push	{r4, lr}
	pending_current = _current;
   1ad7a:	4b07      	ldr	r3, [pc, #28]	; (1ad98 <z_pend_curr+0x20>)
   1ad7c:	6898      	ldr	r0, [r3, #8]
   1ad7e:	4b07      	ldr	r3, [pc, #28]	; (1ad9c <z_pend_curr+0x24>)
{
   1ad80:	460c      	mov	r4, r1
	pending_current = _current;
   1ad82:	6018      	str	r0, [r3, #0]
{
   1ad84:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1ad86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ad8a:	f7ff ffcf 	bl	1ad2c <pend>
   1ad8e:	4620      	mov	r0, r4
}
   1ad90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad94:	f7e9 bbe8 	b.w	4568 <arch_swap>
   1ad98:	20002e90 	.word	0x20002e90
   1ad9c:	20002ec4 	.word	0x20002ec4

0001ada0 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   1ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ada2:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1ada4:	f00b fc72 	bl	2668c <z_tick_get_32>
   1ada8:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1adaa:	f04f 0320 	mov.w	r3, #32
   1adae:	f3ef 8711 	mrs	r7, BASEPRI
   1adb2:	f383 8811 	msr	BASEPRI, r3
   1adb6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1adba:	4e0d      	ldr	r6, [pc, #52]	; (1adf0 <z_tick_sleep.part.0+0x50>)
   1adbc:	4b0d      	ldr	r3, [pc, #52]	; (1adf4 <z_tick_sleep.part.0+0x54>)
   1adbe:	68b0      	ldr	r0, [r6, #8]
   1adc0:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1adc2:	f7ff ff99 	bl	1acf8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1adc6:	68b0      	ldr	r0, [r6, #8]
   1adc8:	490b      	ldr	r1, [pc, #44]	; (1adf8 <z_tick_sleep.part.0+0x58>)
   1adca:	462a      	mov	r2, r5
   1adcc:	17eb      	asrs	r3, r5, #31
   1adce:	3018      	adds	r0, #24
   1add0:	f000 fac4 	bl	1b35c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1add4:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1add6:	7b53      	ldrb	r3, [r2, #13]
   1add8:	f043 0310 	orr.w	r3, r3, #16
   1addc:	7353      	strb	r3, [r2, #13]
   1adde:	4638      	mov	r0, r7
   1ade0:	f7e9 fbc2 	bl	4568 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1ade4:	f00b fc52 	bl	2668c <z_tick_get_32>
   1ade8:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1adea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1adee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1adf0:	20002e90 	.word	0x20002e90
   1adf4:	20002ec4 	.word	0x20002ec4
   1adf8:	000263d3 	.word	0x000263d3

0001adfc <z_set_prio>:
{
   1adfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae00:	4604      	mov	r4, r0
   1ae02:	f04f 0320 	mov.w	r3, #32
   1ae06:	f3ef 8811 	mrs	r8, BASEPRI
   1ae0a:	f383 8811 	msr	BASEPRI, r3
   1ae0e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ae12:	7b43      	ldrb	r3, [r0, #13]
   1ae14:	06db      	lsls	r3, r3, #27
   1ae16:	b24e      	sxtb	r6, r1
   1ae18:	d12e      	bne.n	1ae78 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1ae1a:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1ae1c:	bb65      	cbnz	r5, 1ae78 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ae1e:	4f18      	ldr	r7, [pc, #96]	; (1ae80 <z_set_prio+0x84>)
   1ae20:	4621      	mov	r1, r4
   1ae22:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1ae26:	f7ff fd85 	bl	1a934 <z_priq_dumb_remove>
	return list->head == list;
   1ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ae2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
				thread->base.prio = prio;
   1ae2e:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ae30:	4283      	cmp	r3, r0
   1ae32:	bf18      	it	ne
   1ae34:	461d      	movne	r5, r3
   1ae36:	2d00      	cmp	r5, #0
   1ae38:	bf38      	it	cc
   1ae3a:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ae3c:	b1b5      	cbz	r5, 1ae6c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1ae3e:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1ae42:	42b1      	cmp	r1, r6
   1ae44:	dc03      	bgt.n	1ae4e <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1ae46:	42aa      	cmp	r2, r5
   1ae48:	d010      	beq.n	1ae6c <z_set_prio+0x70>
   1ae4a:	682d      	ldr	r5, [r5, #0]
   1ae4c:	e7f6      	b.n	1ae3c <z_set_prio+0x40>
	node->prev = successor->prev;
   1ae4e:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1ae50:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1ae54:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ae56:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1ae58:	2001      	movs	r0, #1
   1ae5a:	f7ff fd81 	bl	1a960 <update_cache>
   1ae5e:	2001      	movs	r0, #1
	__asm__ volatile(
   1ae60:	f388 8811 	msr	BASEPRI, r8
   1ae64:	f3bf 8f6f 	isb	sy
}
   1ae68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1ae6c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ae72:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ae74:	633c      	str	r4, [r7, #48]	; 0x30
}
   1ae76:	e7ef      	b.n	1ae58 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1ae78:	73a6      	strb	r6, [r4, #14]
   1ae7a:	2000      	movs	r0, #0
   1ae7c:	e7f0      	b.n	1ae60 <z_set_prio+0x64>
   1ae7e:	bf00      	nop
   1ae80:	20002e90 	.word	0x20002e90

0001ae84 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1ae84:	4b04      	ldr	r3, [pc, #16]	; (1ae98 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1ae86:	2100      	movs	r1, #0
   1ae88:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1ae8c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1ae90:	4608      	mov	r0, r1
   1ae92:	f7ff bcfd 	b.w	1a890 <k_sched_time_slice_set>
   1ae96:	bf00      	nop
   1ae98:	20002e90 	.word	0x20002e90

0001ae9c <z_impl_k_yield>:
{
   1ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1ae9e:	4c24      	ldr	r4, [pc, #144]	; (1af30 <z_impl_k_yield+0x94>)
   1aea0:	4b24      	ldr	r3, [pc, #144]	; (1af34 <z_impl_k_yield+0x98>)
   1aea2:	68a2      	ldr	r2, [r4, #8]
   1aea4:	429a      	cmp	r2, r3
   1aea6:	d030      	beq.n	1af0a <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1aea8:	f04f 0320 	mov.w	r3, #32
   1aeac:	f3ef 8511 	mrs	r5, BASEPRI
   1aeb0:	f383 8811 	msr	BASEPRI, r3
   1aeb4:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1aeb8:	68a1      	ldr	r1, [r4, #8]
   1aeba:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1aebe:	f7ff fd39 	bl	1a934 <z_priq_dumb_remove>
	return list->head == list;
   1aec2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1aec4:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1aec6:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aec8:	4283      	cmp	r3, r0
   1aeca:	bf08      	it	eq
   1aecc:	2300      	moveq	r3, #0
   1aece:	2b00      	cmp	r3, #0
   1aed0:	bf38      	it	cc
   1aed2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1aed4:	b32b      	cbz	r3, 1af22 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1aed6:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1aeda:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1aede:	42b7      	cmp	r7, r6
   1aee0:	db03      	blt.n	1aeea <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1aee2:	428b      	cmp	r3, r1
   1aee4:	d01d      	beq.n	1af22 <z_impl_k_yield+0x86>
   1aee6:	681b      	ldr	r3, [r3, #0]
   1aee8:	e7f4      	b.n	1aed4 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1aeea:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1aeec:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1aef0:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1aef2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1aef4:	7b53      	ldrb	r3, [r2, #13]
   1aef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1aefa:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1aefc:	2001      	movs	r0, #1
   1aefe:	f7ff fd2f 	bl	1a960 <update_cache>
	__asm__ volatile(
   1af02:	f385 8811 	msr	BASEPRI, r5
   1af06:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1af0a:	f04f 0320 	mov.w	r3, #32
   1af0e:	f3ef 8011 	mrs	r0, BASEPRI
   1af12:	f383 8811 	msr	BASEPRI, r3
   1af16:	f3bf 8f6f 	isb	sy
}
   1af1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1af1e:	f7e9 bb23 	b.w	4568 <arch_swap>
	node->prev = list->tail;
   1af22:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1af26:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1af28:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1af2a:	6322      	str	r2, [r4, #48]	; 0x30
}
   1af2c:	e7e2      	b.n	1aef4 <z_impl_k_yield+0x58>
   1af2e:	bf00      	nop
   1af30:	20002e90 	.word	0x20002e90
   1af34:	20001378 	.word	0x20001378

0001af38 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1af38:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1af3a:	3301      	adds	r3, #1
   1af3c:	bf08      	it	eq
   1af3e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1af42:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1af44:	d106      	bne.n	1af54 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1af46:	4b0b      	ldr	r3, [pc, #44]	; (1af74 <z_impl_k_sleep+0x3c>)
   1af48:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1af4a:	f7ff fe1f 	bl	1ab8c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1af4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1af52:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1af54:	4604      	mov	r4, r0
	if (ticks == 0) {
   1af56:	b948      	cbnz	r0, 1af6c <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1af58:	f7ff ffa0 	bl	1ae9c <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   1af5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1af60:	fb84 3400 	smull	r3, r4, r4, r0
   1af64:	0bd8      	lsrs	r0, r3, #15
   1af66:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1af6a:	e7f2      	b.n	1af52 <z_impl_k_sleep+0x1a>
   1af6c:	f7ff ff18 	bl	1ada0 <z_tick_sleep.part.0>
   1af70:	4604      	mov	r4, r0
   1af72:	e7f3      	b.n	1af5c <z_impl_k_sleep+0x24>
   1af74:	20002e90 	.word	0x20002e90

0001af78 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1af78:	4b01      	ldr	r3, [pc, #4]	; (1af80 <z_impl_k_current_get+0x8>)
   1af7a:	6898      	ldr	r0, [r3, #8]
   1af7c:	4770      	bx	lr
   1af7e:	bf00      	nop
   1af80:	20002e90 	.word	0x20002e90

0001af84 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1af84:	b538      	push	{r3, r4, r5, lr}
   1af86:	4604      	mov	r4, r0
   1af88:	f04f 0320 	mov.w	r3, #32
   1af8c:	f3ef 8511 	mrs	r5, BASEPRI
   1af90:	f383 8811 	msr	BASEPRI, r3
   1af94:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1af98:	f00b fa66 	bl	26468 <z_unpend_first_thread>

	if (thread != NULL) {
   1af9c:	b150      	cbz	r0, 1afb4 <z_impl_k_sem_give+0x30>
   1af9e:	2200      	movs	r2, #0
   1afa0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1afa4:	f00b fa05 	bl	263b2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1afa8:	4629      	mov	r1, r5
   1afaa:	4808      	ldr	r0, [pc, #32]	; (1afcc <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1afac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1afb0:	f7ff bc9a 	b.w	1a8e8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1afb4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1afb8:	429a      	cmp	r2, r3
   1afba:	bf18      	it	ne
   1afbc:	3301      	addne	r3, #1
   1afbe:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1afc0:	2102      	movs	r1, #2
   1afc2:	f104 0010 	add.w	r0, r4, #16
   1afc6:	f00b fd02 	bl	269ce <z_handle_obj_poll_events>
}
   1afca:	e7ed      	b.n	1afa8 <z_impl_k_sem_give+0x24>
   1afcc:	200030b0 	.word	0x200030b0

0001afd0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1afd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1afd2:	4614      	mov	r4, r2
   1afd4:	461d      	mov	r5, r3
   1afd6:	f04f 0320 	mov.w	r3, #32
   1afda:	f3ef 8111 	mrs	r1, BASEPRI
   1afde:	f383 8811 	msr	BASEPRI, r3
   1afe2:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1afe6:	6883      	ldr	r3, [r0, #8]
   1afe8:	b143      	cbz	r3, 1affc <z_impl_k_sem_take+0x2c>
		sem->count--;
   1afea:	3b01      	subs	r3, #1
   1afec:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1afee:	f381 8811 	msr	BASEPRI, r1
   1aff2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1aff6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1aff8:	b003      	add	sp, #12
   1affa:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1affc:	ea54 0305 	orrs.w	r3, r4, r5
   1b000:	d106      	bne.n	1b010 <z_impl_k_sem_take+0x40>
   1b002:	f381 8811 	msr	BASEPRI, r1
   1b006:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b00a:	f06f 000f 	mvn.w	r0, #15
   1b00e:	e7f3      	b.n	1aff8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b010:	4602      	mov	r2, r0
   1b012:	e9cd 4500 	strd	r4, r5, [sp]
   1b016:	4802      	ldr	r0, [pc, #8]	; (1b020 <z_impl_k_sem_take+0x50>)
   1b018:	f7ff feae 	bl	1ad78 <z_pend_curr>
	return ret;
   1b01c:	e7ec      	b.n	1aff8 <z_impl_k_sem_take+0x28>
   1b01e:	bf00      	nop
   1b020:	200030b0 	.word	0x200030b0

0001b024 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1b024:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1b026:	4c08      	ldr	r4, [pc, #32]	; (1b048 <k_sys_work_q_init+0x24>)
   1b028:	4908      	ldr	r1, [pc, #32]	; (1b04c <k_sys_work_q_init+0x28>)
   1b02a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b02e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b032:	4620      	mov	r0, r4
   1b034:	f000 f8dc 	bl	1b1f0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1b038:	4905      	ldr	r1, [pc, #20]	; (1b050 <k_sys_work_q_init+0x2c>)
   1b03a:	f104 0018 	add.w	r0, r4, #24
   1b03e:	f00b fa62 	bl	26506 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1b042:	2000      	movs	r0, #0
   1b044:	bd10      	pop	{r4, pc}
   1b046:	bf00      	nop
   1b048:	20001488 	.word	0x20001488
   1b04c:	20004cb8 	.word	0x20004cb8
   1b050:	00028e28 	.word	0x00028e28

0001b054 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1b054:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1b058:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1b05c:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1b060:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b062:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1b064:	2504      	movs	r5, #4
   1b066:	7345      	strb	r5, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b068:	1dd6      	adds	r6, r2, #7

	thread_base->prio = priority;
   1b06a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b06c:	7385      	strb	r5, [r0, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b06e:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->sched_locked = 0U;
   1b070:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b072:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   1b076:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1b07a:	e9c0 161b 	strd	r1, r6, [r0, #108]	; 0x6c
	thread_base->sched_locked = 0U;
   1b07e:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1b080:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b082:	9202      	str	r2, [sp, #8]
   1b084:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b086:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1b088:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b08c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b08e:	9200      	str	r2, [sp, #0]
   1b090:	4642      	mov	r2, r8
{
   1b092:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b094:	f7e9 fb10 	bl	46b8 <arch_new_thread>
	if (!_current) {
   1b098:	4b05      	ldr	r3, [pc, #20]	; (1b0b0 <z_setup_new_thread+0x5c>)
   1b09a:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1b09c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1b0a0:	b103      	cbz	r3, 1b0a4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1b0a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   1b0a4:	67a3      	str	r3, [r4, #120]	; 0x78
}
   1b0a6:	4640      	mov	r0, r8
   1b0a8:	b004      	add	sp, #16
   1b0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b0ae:	bf00      	nop
   1b0b0:	20002e90 	.word	0x20002e90

0001b0b4 <z_impl_k_thread_create>:
{
   1b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0b6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b0b8:	2500      	movs	r5, #0
   1b0ba:	9505      	str	r5, [sp, #20]
   1b0bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1b0be:	9504      	str	r5, [sp, #16]
   1b0c0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1b0c2:	9503      	str	r5, [sp, #12]
   1b0c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b0c6:	9502      	str	r5, [sp, #8]
{
   1b0c8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b0cc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b0ce:	9501      	str	r5, [sp, #4]
   1b0d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1b0d2:	9500      	str	r5, [sp, #0]
{
   1b0d4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b0d6:	f7ff ffbd 	bl	1b054 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1b0da:	1c7b      	adds	r3, r7, #1
   1b0dc:	bf08      	it	eq
   1b0de:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1b0e2:	d005      	beq.n	1b0f0 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b0e4:	ea56 0307 	orrs.w	r3, r6, r7
   1b0e8:	d105      	bne.n	1b0f6 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1b0ea:	4620      	mov	r0, r4
   1b0ec:	f7ff fcb4 	bl	1aa58 <z_sched_start>
}
   1b0f0:	4620      	mov	r0, r4
   1b0f2:	b007      	add	sp, #28
   1b0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b0f6:	4904      	ldr	r1, [pc, #16]	; (1b108 <z_impl_k_thread_create+0x54>)
   1b0f8:	4632      	mov	r2, r6
   1b0fa:	463b      	mov	r3, r7
   1b0fc:	f104 0018 	add.w	r0, r4, #24
   1b100:	f000 f92c 	bl	1b35c <z_add_timeout>
   1b104:	e7f4      	b.n	1b0f0 <z_impl_k_thread_create+0x3c>
   1b106:	bf00      	nop
   1b108:	000263d3 	.word	0x000263d3

0001b10c <z_init_static_threads>:
{
   1b10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1b110:	4e2a      	ldr	r6, [pc, #168]	; (1b1bc <z_init_static_threads+0xb0>)
   1b112:	4d2b      	ldr	r5, [pc, #172]	; (1b1c0 <z_init_static_threads+0xb4>)
{
   1b114:	b086      	sub	sp, #24
   1b116:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1b118:	42b5      	cmp	r5, r6
   1b11a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1b11e:	d310      	bcc.n	1b142 <z_init_static_threads+0x36>
	k_sched_lock();
   1b120:	f7ff fbf4 	bl	1a90c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b124:	4c26      	ldr	r4, [pc, #152]	; (1b1c0 <z_init_static_threads+0xb4>)
   1b126:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1b1c4 <z_init_static_threads+0xb8>
   1b12a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1b12e:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b132:	2700      	movs	r7, #0
   1b134:	4544      	cmp	r4, r8
   1b136:	d321      	bcc.n	1b17c <z_init_static_threads+0x70>
}
   1b138:	b006      	add	sp, #24
   1b13a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1b13e:	f7ff bc37 	b.w	1a9b0 <k_sched_unlock>
		z_setup_new_thread(
   1b142:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b146:	9305      	str	r3, [sp, #20]
   1b148:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1b14c:	9304      	str	r3, [sp, #16]
   1b14e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1b152:	9303      	str	r3, [sp, #12]
   1b154:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1b158:	9302      	str	r3, [sp, #8]
   1b15a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1b15e:	9301      	str	r3, [sp, #4]
   1b160:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1b164:	9300      	str	r3, [sp, #0]
   1b166:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1b16a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1b16e:	f7ff ff71 	bl	1b054 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1b172:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1b176:	65dd      	str	r5, [r3, #92]	; 0x5c
   1b178:	4625      	mov	r5, r4
   1b17a:	e7cd      	b.n	1b118 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1b17c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b17e:	1c5a      	adds	r2, r3, #1
   1b180:	d00d      	beq.n	1b19e <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1b182:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b186:	4630      	mov	r0, r6
   1b188:	4639      	mov	r1, r7
   1b18a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b18e:	42b9      	cmp	r1, r7
   1b190:	bf08      	it	eq
   1b192:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1b194:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b196:	d104      	bne.n	1b1a2 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1b198:	4628      	mov	r0, r5
   1b19a:	f7ff fc5d 	bl	1aa58 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b19e:	3430      	adds	r4, #48	; 0x30
   1b1a0:	e7c8      	b.n	1b134 <z_init_static_threads+0x28>
   1b1a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b1a6:	2300      	movs	r3, #0
   1b1a8:	f7e4 ffea 	bl	180 <__aeabi_uldivmod>
   1b1ac:	4602      	mov	r2, r0
   1b1ae:	460b      	mov	r3, r1
   1b1b0:	f105 0018 	add.w	r0, r5, #24
   1b1b4:	4651      	mov	r1, sl
   1b1b6:	f000 f8d1 	bl	1b35c <z_add_timeout>
   1b1ba:	e7f0      	b.n	1b19e <z_init_static_threads+0x92>
   1b1bc:	20000c84 	.word	0x20000c84
   1b1c0:	20000c84 	.word	0x20000c84
   1b1c4:	000263d3 	.word	0x000263d3

0001b1c8 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   1b1c8:	b508      	push	{r3, lr}
	__asm__ volatile(
   1b1ca:	f04f 0320 	mov.w	r3, #32
   1b1ce:	f3ef 8411 	mrs	r4, BASEPRI
   1b1d2:	f383 8811 	msr	BASEPRI, r3
   1b1d6:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   1b1da:	4b04      	ldr	r3, [pc, #16]	; (1b1ec <z_self_abort+0x24>)
   1b1dc:	6898      	ldr	r0, [r3, #8]
   1b1de:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   1b1e0:	f7ff fcd4 	bl	1ab8c <z_impl_k_thread_suspend>
   1b1e4:	4620      	mov	r0, r4
   1b1e6:	f7e9 f9bf 	bl	4568 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   1b1ea:	bf00      	nop
   1b1ec:	20002e90 	.word	0x20002e90

0001b1f0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b1f4:	4604      	mov	r4, r0
   1b1f6:	b088      	sub	sp, #32
   1b1f8:	460d      	mov	r5, r1
   1b1fa:	4616      	mov	r6, r2
   1b1fc:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1b1fe:	f00b f810 	bl	26222 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1b202:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b206:	2200      	movs	r2, #0
   1b208:	2300      	movs	r3, #0
   1b20a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b20e:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1b212:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1b216:	4b07      	ldr	r3, [pc, #28]	; (1b234 <k_work_q_start+0x44>)
   1b218:	9400      	str	r4, [sp, #0]
   1b21a:	4632      	mov	r2, r6
   1b21c:	4629      	mov	r1, r5
   1b21e:	4640      	mov	r0, r8
   1b220:	f7ff ff48 	bl	1b0b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1b224:	4904      	ldr	r1, [pc, #16]	; (1b238 <k_work_q_start+0x48>)
   1b226:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1b228:	b008      	add	sp, #32
   1b22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b22e:	f00b b96a 	b.w	26506 <z_impl_k_thread_name_set>
   1b232:	bf00      	nop
   1b234:	0001deff 	.word	0x0001deff
   1b238:	00028e31 	.word	0x00028e31

0001b23c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b240:	4606      	mov	r6, r0
   1b242:	460d      	mov	r5, r1
   1b244:	4690      	mov	r8, r2
   1b246:	4699      	mov	r9, r3
   1b248:	f04f 0320 	mov.w	r3, #32
   1b24c:	f3ef 8711 	mrs	r7, BASEPRI
   1b250:	f383 8811 	msr	BASEPRI, r3
   1b254:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1b258:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1b25a:	b17b      	cbz	r3, 1b27c <k_delayed_work_submit_to_queue+0x40>
   1b25c:	4283      	cmp	r3, r0
   1b25e:	d128      	bne.n	1b2b2 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1b260:	4628      	mov	r0, r5
   1b262:	f00b f970 	bl	26546 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1b266:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   1b26a:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1b26c:	d008      	beq.n	1b280 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1b26e:	2800      	cmp	r0, #0
   1b270:	da07      	bge.n	1b282 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1b272:	f387 8811 	msr	BASEPRI, r7
   1b276:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1b27a:	e00f      	b.n	1b29c <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1b27c:	2800      	cmp	r0, #0
   1b27e:	d0ef      	beq.n	1b260 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1b280:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b282:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1b286:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b288:	d10b      	bne.n	1b2a2 <k_delayed_work_submit_to_queue+0x66>
   1b28a:	f387 8811 	msr	BASEPRI, r7
   1b28e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1b292:	4629      	mov	r1, r5
   1b294:	4630      	mov	r0, r6
   1b296:	f00b f939 	bl	2650c <k_work_submit_to_queue>
		return 0;
   1b29a:	2400      	movs	r4, #0
}
   1b29c:	4620      	mov	r0, r4
   1b29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1b2a2:	4905      	ldr	r1, [pc, #20]	; (1b2b8 <k_delayed_work_submit_to_queue+0x7c>)
   1b2a4:	4642      	mov	r2, r8
   1b2a6:	464b      	mov	r3, r9
   1b2a8:	f105 0010 	add.w	r0, r5, #16
   1b2ac:	f000 f856 	bl	1b35c <z_add_timeout>
   1b2b0:	e7df      	b.n	1b272 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1b2b2:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1b2b6:	e7dc      	b.n	1b272 <k_delayed_work_submit_to_queue+0x36>
   1b2b8:	0002653d 	.word	0x0002653d

0001b2bc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1b2bc:	4b03      	ldr	r3, [pc, #12]	; (1b2cc <elapsed+0x10>)
   1b2be:	681b      	ldr	r3, [r3, #0]
   1b2c0:	b90b      	cbnz	r3, 1b2c6 <elapsed+0xa>
   1b2c2:	f7e9 b937 	b.w	4534 <z_clock_elapsed>
}
   1b2c6:	2000      	movs	r0, #0
   1b2c8:	4770      	bx	lr
   1b2ca:	bf00      	nop
   1b2cc:	20002ed0 	.word	0x20002ed0

0001b2d0 <remove_timeout>:
{
   1b2d0:	b530      	push	{r4, r5, lr}
   1b2d2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b2d4:	b168      	cbz	r0, 1b2f2 <remove_timeout+0x22>
   1b2d6:	4a0a      	ldr	r2, [pc, #40]	; (1b300 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1b2d8:	6852      	ldr	r2, [r2, #4]
   1b2da:	4290      	cmp	r0, r2
   1b2dc:	d009      	beq.n	1b2f2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1b2de:	b143      	cbz	r3, 1b2f2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1b2e0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1b2e4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1b2e8:	1912      	adds	r2, r2, r4
   1b2ea:	eb45 0101 	adc.w	r1, r5, r1
   1b2ee:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1b2f2:	6842      	ldr	r2, [r0, #4]
   1b2f4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b2f6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b2f8:	2300      	movs	r3, #0
	node->prev = NULL;
   1b2fa:	e9c0 3300 	strd	r3, r3, [r0]
}
   1b2fe:	bd30      	pop	{r4, r5, pc}
   1b300:	2000098c 	.word	0x2000098c

0001b304 <next_timeout>:

static int32_t next_timeout(void)
{
   1b304:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1b306:	4b13      	ldr	r3, [pc, #76]	; (1b354 <next_timeout+0x50>)
   1b308:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b30a:	429c      	cmp	r4, r3
   1b30c:	bf08      	it	eq
   1b30e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1b310:	f7ff ffd4 	bl	1b2bc <elapsed>
   1b314:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1b316:	b1bc      	cbz	r4, 1b348 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1b318:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1b31c:	1b40      	subs	r0, r0, r5
   1b31e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1b322:	2801      	cmp	r0, #1
   1b324:	f171 0300 	sbcs.w	r3, r1, #0
   1b328:	db11      	blt.n	1b34e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1b32a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b32e:	2300      	movs	r3, #0
   1b330:	4282      	cmp	r2, r0
   1b332:	eb73 0401 	sbcs.w	r4, r3, r1
   1b336:	da00      	bge.n	1b33a <next_timeout+0x36>
   1b338:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1b33a:	4b07      	ldr	r3, [pc, #28]	; (1b358 <next_timeout+0x54>)
   1b33c:	695b      	ldr	r3, [r3, #20]
   1b33e:	b113      	cbz	r3, 1b346 <next_timeout+0x42>
   1b340:	4298      	cmp	r0, r3
   1b342:	bfa8      	it	ge
   1b344:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1b346:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1b348:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b34c:	e7f5      	b.n	1b33a <next_timeout+0x36>
   1b34e:	2000      	movs	r0, #0
   1b350:	e7f3      	b.n	1b33a <next_timeout+0x36>
   1b352:	bf00      	nop
   1b354:	2000098c 	.word	0x2000098c
   1b358:	20002e90 	.word	0x20002e90

0001b35c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1b35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b360:	9101      	str	r1, [sp, #4]
   1b362:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b364:	1c4b      	adds	r3, r1, #1
   1b366:	bf08      	it	eq
   1b368:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1b36c:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b36e:	d06c      	beq.n	1b44a <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1b370:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1b372:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1b376:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1b37a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1b37e:	ebb3 0804 	subs.w	r8, r3, r4
   1b382:	eb6b 0905 	sbc.w	r9, fp, r5
   1b386:	f1b8 0f00 	cmp.w	r8, #0
   1b38a:	f179 0300 	sbcs.w	r3, r9, #0
   1b38e:	db0f      	blt.n	1b3b0 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1b390:	f7ff ff94 	bl	1b2bc <elapsed>
   1b394:	4a33      	ldr	r2, [pc, #204]	; (1b464 <z_add_timeout+0x108>)
   1b396:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1b39a:	f06f 0301 	mvn.w	r3, #1
   1b39e:	1a5b      	subs	r3, r3, r1
   1b3a0:	eb6b 020c 	sbc.w	r2, fp, ip
   1b3a4:	1b1e      	subs	r6, r3, r4
   1b3a6:	eb62 0705 	sbc.w	r7, r2, r5
   1b3aa:	1a34      	subs	r4, r6, r0
   1b3ac:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1b3b0:	9b01      	ldr	r3, [sp, #4]
   1b3b2:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1b3b6:	f04f 0320 	mov.w	r3, #32
   1b3ba:	f3ef 8611 	mrs	r6, BASEPRI
   1b3be:	f383 8811 	msr	BASEPRI, r3
   1b3c2:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1b3c6:	f7ff ff79 	bl	1b2bc <elapsed>
	ticks = MAX(1, ticks);
   1b3ca:	2c01      	cmp	r4, #1
   1b3cc:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   1b3d0:	4b25      	ldr	r3, [pc, #148]	; (1b468 <z_add_timeout+0x10c>)
   1b3d2:	bfb8      	it	lt
   1b3d4:	2401      	movlt	r4, #1
   1b3d6:	681a      	ldr	r2, [r3, #0]
   1b3d8:	bfb8      	it	lt
   1b3da:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   1b3dc:	1824      	adds	r4, r4, r0
   1b3de:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b3e2:	429a      	cmp	r2, r3
   1b3e4:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1b3e8:	d001      	beq.n	1b3ee <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b3ea:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1b3ec:	b952      	cbnz	r2, 1b404 <z_add_timeout+0xa8>
	node->prev = list->tail;
   1b3ee:	685a      	ldr	r2, [r3, #4]
   1b3f0:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1b3f4:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1b3f6:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   1b3fa:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1b3fe:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1b402:	e014      	b.n	1b42e <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   1b404:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1b408:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1b40c:	4544      	cmp	r4, r8
   1b40e:	eb75 0109 	sbcs.w	r1, r5, r9
   1b412:	da1d      	bge.n	1b450 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   1b414:	ebb8 0004 	subs.w	r0, r8, r4
   1b418:	eb69 0105 	sbc.w	r1, r9, r5
   1b41c:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1b420:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1b422:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1b426:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1b42a:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1b42e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b430:	429a      	cmp	r2, r3
   1b432:	d006      	beq.n	1b442 <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1b434:	4592      	cmp	sl, r2
   1b436:	d104      	bne.n	1b442 <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   1b438:	f7ff ff64 	bl	1b304 <next_timeout>
   1b43c:	2100      	movs	r1, #0
   1b43e:	f7e9 f813 	bl	4468 <z_clock_set_timeout>
	__asm__ volatile(
   1b442:	f386 8811 	msr	BASEPRI, r6
   1b446:	f3bf 8f6f 	isb	sy
		}
	}
}
   1b44a:	b003      	add	sp, #12
   1b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1b450:	ebb4 0008 	subs.w	r0, r4, r8
   1b454:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1b458:	42ba      	cmp	r2, r7
   1b45a:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1b45e:	d0c6      	beq.n	1b3ee <z_add_timeout+0x92>
   1b460:	6812      	ldr	r2, [r2, #0]
   1b462:	e7c3      	b.n	1b3ec <z_add_timeout+0x90>
   1b464:	20001528 	.word	0x20001528
   1b468:	2000098c 	.word	0x2000098c

0001b46c <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1b46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b470:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1b472:	f7ff fb49 	bl	1ab08 <z_time_slice>
	__asm__ volatile(
   1b476:	f04f 0320 	mov.w	r3, #32
   1b47a:	f3ef 8411 	mrs	r4, BASEPRI
   1b47e:	f383 8811 	msr	BASEPRI, r3
   1b482:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1b486:	4d2c      	ldr	r5, [pc, #176]	; (1b538 <z_clock_announce+0xcc>)
   1b488:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1b53c <z_clock_announce+0xd0>
	return list->head == list;
   1b48c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1b540 <z_clock_announce+0xd4>
   1b490:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1b492:	4651      	mov	r1, sl
   1b494:	f8d5 c000 	ldr.w	ip, [r5]
   1b498:	f8db 0000 	ldr.w	r0, [fp]
   1b49c:	4662      	mov	r2, ip
   1b49e:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b4a0:	4558      	cmp	r0, fp
   1b4a2:	e9da 8900 	ldrd	r8, r9, [sl]
   1b4a6:	e9cd 2300 	strd	r2, r3, [sp]
   1b4aa:	d00d      	beq.n	1b4c8 <z_clock_announce+0x5c>
   1b4ac:	b160      	cbz	r0, 1b4c8 <z_clock_announce+0x5c>
   1b4ae:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1b4b2:	45b4      	cmp	ip, r6
   1b4b4:	41bb      	sbcs	r3, r7
   1b4b6:	da1e      	bge.n	1b4f6 <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1b4b8:	9b00      	ldr	r3, [sp, #0]
   1b4ba:	ebb6 0c03 	subs.w	ip, r6, r3
   1b4be:	9b01      	ldr	r3, [sp, #4]
   1b4c0:	eb67 0603 	sbc.w	r6, r7, r3
   1b4c4:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1b4c8:	9b00      	ldr	r3, [sp, #0]
   1b4ca:	eb13 0208 	adds.w	r2, r3, r8
   1b4ce:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1b4d0:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1b4d4:	eb43 0309 	adc.w	r3, r3, r9
   1b4d8:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1b4dc:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1b4de:	f7ff ff11 	bl	1b304 <next_timeout>
   1b4e2:	4631      	mov	r1, r6
   1b4e4:	f7e8 ffc0 	bl	4468 <z_clock_set_timeout>
	__asm__ volatile(
   1b4e8:	f384 8811 	msr	BASEPRI, r4
   1b4ec:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1b4f0:	b003      	add	sp, #12
   1b4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1b4f6:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1b4fa:	f04f 0200 	mov.w	r2, #0
   1b4fe:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1b502:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1b506:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1b50a:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1b50e:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1b512:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1b514:	f7ff fedc 	bl	1b2d0 <remove_timeout>
   1b518:	f384 8811 	msr	BASEPRI, r4
   1b51c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1b520:	6883      	ldr	r3, [r0, #8]
   1b522:	4798      	blx	r3
	__asm__ volatile(
   1b524:	f04f 0320 	mov.w	r3, #32
   1b528:	f3ef 8411 	mrs	r4, BASEPRI
   1b52c:	f383 8811 	msr	BASEPRI, r3
   1b530:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1b534:	4901      	ldr	r1, [pc, #4]	; (1b53c <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1b536:	e7ad      	b.n	1b494 <z_clock_announce+0x28>
   1b538:	20002ed0 	.word	0x20002ed0
   1b53c:	20001528 	.word	0x20001528
   1b540:	2000098c 	.word	0x2000098c

0001b544 <z_tick_get>:

int64_t z_tick_get(void)
{
   1b544:	b510      	push	{r4, lr}
   1b546:	f04f 0320 	mov.w	r3, #32
   1b54a:	f3ef 8411 	mrs	r4, BASEPRI
   1b54e:	f383 8811 	msr	BASEPRI, r3
   1b552:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1b556:	f7e8 ffed 	bl	4534 <z_clock_elapsed>
   1b55a:	4b06      	ldr	r3, [pc, #24]	; (1b574 <z_tick_get+0x30>)
   1b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b560:	1812      	adds	r2, r2, r0
   1b562:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1b566:	f384 8811 	msr	BASEPRI, r4
   1b56a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1b56e:	4610      	mov	r0, r2
   1b570:	4619      	mov	r1, r3
   1b572:	bd10      	pop	{r4, pc}
   1b574:	20001528 	.word	0x20001528

0001b578 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1b578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1b57a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1b57e:	1c56      	adds	r6, r2, #1
   1b580:	f143 0700 	adc.w	r7, r3, #0
   1b584:	2f00      	cmp	r7, #0
   1b586:	bf08      	it	eq
   1b588:	2e02      	cmpeq	r6, #2
{
   1b58a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1b58c:	d302      	bcc.n	1b594 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b58e:	490c      	ldr	r1, [pc, #48]	; (1b5c0 <z_timer_expiration_handler+0x48>)
   1b590:	f7ff fee4 	bl	1b35c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1b594:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1b596:	3301      	adds	r3, #1
   1b598:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1b59a:	6a23      	ldr	r3, [r4, #32]
   1b59c:	b10b      	cbz	r3, 1b5a2 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1b59e:	4620      	mov	r0, r4
   1b5a0:	4798      	blx	r3
	return list->head == list;
   1b5a2:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b5a6:	42a5      	cmp	r5, r4
   1b5a8:	d009      	beq.n	1b5be <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1b5aa:	b145      	cbz	r5, 1b5be <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1b5ac:	4628      	mov	r0, r5
   1b5ae:	f00a feae 	bl	2630e <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1b5b2:	4628      	mov	r0, r5
   1b5b4:	f00a fefd 	bl	263b2 <z_ready_thread>
   1b5b8:	2300      	movs	r3, #0
   1b5ba:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   1b5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b5c0:	0001b579 	.word	0x0001b579

0001b5c4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1b5c4:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1b5c8:	4619      	mov	r1, r3
   1b5ca:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1b5cc:	1c4c      	adds	r4, r1, #1
{
   1b5ce:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1b5d0:	bf08      	it	eq
   1b5d2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1b5d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1b5da:	4680      	mov	r8, r0
   1b5dc:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1b5de:	d047      	beq.n	1b670 <z_impl_k_timer_start+0xac>
   1b5e0:	4614      	mov	r4, r2
   1b5e2:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1b5e4:	ea54 0305 	orrs.w	r3, r4, r5
   1b5e8:	d016      	beq.n	1b618 <z_impl_k_timer_start+0x54>
   1b5ea:	f06f 0301 	mvn.w	r3, #1
   1b5ee:	ebb3 0a02 	subs.w	sl, r3, r2
   1b5f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b5f6:	eb63 0b05 	sbc.w	fp, r3, r5
   1b5fa:	f1ba 0f00 	cmp.w	sl, #0
   1b5fe:	f17b 0300 	sbcs.w	r3, fp, #0
   1b602:	da09      	bge.n	1b618 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1b604:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1b608:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1b60c:	2c01      	cmp	r4, #1
   1b60e:	f175 0300 	sbcs.w	r3, r5, #0
   1b612:	bfbc      	itt	lt
   1b614:	2401      	movlt	r4, #1
   1b616:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1b618:	f06f 0301 	mvn.w	r3, #1
   1b61c:	1a1b      	subs	r3, r3, r0
   1b61e:	9300      	str	r3, [sp, #0]
   1b620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b624:	eb63 0301 	sbc.w	r3, r3, r1
   1b628:	9301      	str	r3, [sp, #4]
   1b62a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b62e:	2a00      	cmp	r2, #0
   1b630:	f173 0300 	sbcs.w	r3, r3, #0
   1b634:	da0c      	bge.n	1b650 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1b636:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1b63a:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1b63e:	f1b8 0f00 	cmp.w	r8, #0
   1b642:	f179 0300 	sbcs.w	r3, r9, #0
   1b646:	bfbc      	itt	lt
   1b648:	f04f 0800 	movlt.w	r8, #0
   1b64c:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   1b650:	4630      	mov	r0, r6
   1b652:	f00a ffdb 	bl	2660c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1b656:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b658:	4907      	ldr	r1, [pc, #28]	; (1b678 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   1b65a:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b65c:	4642      	mov	r2, r8
   1b65e:	464b      	mov	r3, r9
   1b660:	4630      	mov	r0, r6
	timer->period = period;
   1b662:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1b666:	b002      	add	sp, #8
   1b668:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b66c:	f7ff be76 	b.w	1b35c <z_add_timeout>
}
   1b670:	b002      	add	sp, #8
   1b672:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1b676:	bf00      	nop
   1b678:	0001b579 	.word	0x0001b579

0001b67c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1b67c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1b680:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1b682:	4b2a      	ldr	r3, [pc, #168]	; (1b72c <z_impl_k_poll+0xb0>)
   1b684:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1b686:	2301      	movs	r3, #1
   1b688:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   1b68c:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   1b690:	ea52 0307 	orrs.w	r3, r2, r7
{
   1b694:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1b696:	bf0c      	ite	eq
   1b698:	2301      	moveq	r3, #1
   1b69a:	2300      	movne	r3, #0
   1b69c:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   1b6a0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1b6a2:	f00b f924 	bl	268ee <register_events>
   1b6a6:	4681      	mov	r9, r0
	__asm__ volatile(
   1b6a8:	f04f 0320 	mov.w	r3, #32
   1b6ac:	f3ef 8a11 	mrs	sl, BASEPRI
   1b6b0:	f383 8811 	msr	BASEPRI, r3
   1b6b4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1b6b8:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   1b6bc:	b964      	cbnz	r4, 1b6d8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1b6be:	4601      	mov	r1, r0
   1b6c0:	4652      	mov	r2, sl
   1b6c2:	4640      	mov	r0, r8
   1b6c4:	f00b f83f 	bl	26746 <clear_event_registrations>
	__asm__ volatile(
   1b6c8:	f38a 8811 	msr	BASEPRI, sl
   1b6cc:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1b6d0:	4620      	mov	r0, r4
   1b6d2:	b004      	add	sp, #16
   1b6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1b6d8:	2300      	movs	r3, #0
   1b6da:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b6de:	ea56 0307 	orrs.w	r3, r6, r7
   1b6e2:	d106      	bne.n	1b6f2 <z_impl_k_poll+0x76>
   1b6e4:	f38a 8811 	msr	BASEPRI, sl
   1b6e8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1b6ec:	f06f 040a 	mvn.w	r4, #10
   1b6f0:	e7ee      	b.n	1b6d0 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1b6f2:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1b6f4:	e9cd 6700 	strd	r6, r7, [sp]
   1b6f8:	4651      	mov	r1, sl
   1b6fa:	480d      	ldr	r0, [pc, #52]	; (1b730 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1b6fc:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1b700:	f7ff fb3a 	bl	1ad78 <z_pend_curr>
   1b704:	4604      	mov	r4, r0
	__asm__ volatile(
   1b706:	f04f 0320 	mov.w	r3, #32
   1b70a:	f3ef 8511 	mrs	r5, BASEPRI
   1b70e:	f383 8811 	msr	BASEPRI, r3
   1b712:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1b716:	462a      	mov	r2, r5
   1b718:	4649      	mov	r1, r9
   1b71a:	4640      	mov	r0, r8
   1b71c:	f00b f813 	bl	26746 <clear_event_registrations>
	__asm__ volatile(
   1b720:	f385 8811 	msr	BASEPRI, r5
   1b724:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1b728:	e7d2      	b.n	1b6d0 <z_impl_k_poll+0x54>
   1b72a:	bf00      	nop
   1b72c:	20002e90 	.word	0x20002e90
   1b730:	200030b0 	.word	0x200030b0

0001b734 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1b734:	b538      	push	{r3, r4, r5, lr}
   1b736:	4603      	mov	r3, r0
	__asm__ volatile(
   1b738:	f04f 0220 	mov.w	r2, #32
   1b73c:	f3ef 8511 	mrs	r5, BASEPRI
   1b740:	f382 8811 	msr	BASEPRI, r2
   1b744:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1b748:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1b74a:	2101      	movs	r1, #1
   1b74c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1b74e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1b750:	4283      	cmp	r3, r0
   1b752:	d106      	bne.n	1b762 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1b754:	f385 8811 	msr	BASEPRI, r5
   1b758:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1b75c:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1b75e:	4620      	mov	r0, r4
   1b760:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1b762:	e9d0 3200 	ldrd	r3, r2, [r0]
   1b766:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b768:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b76a:	2300      	movs	r3, #0
	node->prev = NULL;
   1b76c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b770:	f00b f82c 	bl	267cc <signal_poll_event>
	z_reschedule(&lock, key);
   1b774:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b776:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1b778:	4801      	ldr	r0, [pc, #4]	; (1b780 <z_impl_k_poll_signal_raise+0x4c>)
   1b77a:	f7ff f8b5 	bl	1a8e8 <z_reschedule>
	return rc;
   1b77e:	e7ee      	b.n	1b75e <z_impl_k_poll_signal_raise+0x2a>
   1b780:	200030b0 	.word	0x200030b0

0001b784 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1b784:	b510      	push	{r4, lr}
   1b786:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1b788:	f00a feb3 	bl	264f2 <k_is_in_isr>
   1b78c:	b940      	cbnz	r0, 1b7a0 <z_thread_malloc+0x1c>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1b78e:	4b05      	ldr	r3, [pc, #20]	; (1b7a4 <z_thread_malloc+0x20>)
   1b790:	689b      	ldr	r3, [r3, #8]
   1b792:	6f98      	ldr	r0, [r3, #120]	; 0x78
	}

	if (pool) {
   1b794:	b120      	cbz	r0, 1b7a0 <z_thread_malloc+0x1c>
		ret = k_mem_pool_malloc(pool, size);
   1b796:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   1b798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1b79c:	f00b b925 	b.w	269ea <k_mem_pool_malloc>
}
   1b7a0:	2000      	movs	r0, #0
   1b7a2:	bd10      	pop	{r4, pc}
   1b7a4:	20002e90 	.word	0x20002e90

0001b7a8 <malloc>:
   1b7a8:	4b02      	ldr	r3, [pc, #8]	; (1b7b4 <malloc+0xc>)
   1b7aa:	4601      	mov	r1, r0
   1b7ac:	6818      	ldr	r0, [r3, #0]
   1b7ae:	f000 bad3 	b.w	1bd58 <_malloc_r>
   1b7b2:	bf00      	nop
   1b7b4:	2000099c 	.word	0x2000099c

0001b7b8 <free>:
   1b7b8:	4b02      	ldr	r3, [pc, #8]	; (1b7c4 <free+0xc>)
   1b7ba:	4601      	mov	r1, r0
   1b7bc:	6818      	ldr	r0, [r3, #0]
   1b7be:	f000 ba7d 	b.w	1bcbc <_free_r>
   1b7c2:	bf00      	nop
   1b7c4:	2000099c 	.word	0x2000099c

0001b7c8 <validate_structure>:
   1b7c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b7ca:	6801      	ldr	r1, [r0, #0]
   1b7cc:	293b      	cmp	r1, #59	; 0x3b
   1b7ce:	4604      	mov	r4, r0
   1b7d0:	d911      	bls.n	1b7f6 <validate_structure+0x2e>
   1b7d2:	223c      	movs	r2, #60	; 0x3c
   1b7d4:	4668      	mov	r0, sp
   1b7d6:	f00b f996 	bl	26b06 <div>
   1b7da:	9a01      	ldr	r2, [sp, #4]
   1b7dc:	6863      	ldr	r3, [r4, #4]
   1b7de:	9900      	ldr	r1, [sp, #0]
   1b7e0:	2a00      	cmp	r2, #0
   1b7e2:	440b      	add	r3, r1
   1b7e4:	6063      	str	r3, [r4, #4]
   1b7e6:	bfbb      	ittet	lt
   1b7e8:	323c      	addlt	r2, #60	; 0x3c
   1b7ea:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   1b7ee:	6022      	strge	r2, [r4, #0]
   1b7f0:	6022      	strlt	r2, [r4, #0]
   1b7f2:	bfb8      	it	lt
   1b7f4:	6063      	strlt	r3, [r4, #4]
   1b7f6:	6861      	ldr	r1, [r4, #4]
   1b7f8:	293b      	cmp	r1, #59	; 0x3b
   1b7fa:	d911      	bls.n	1b820 <validate_structure+0x58>
   1b7fc:	223c      	movs	r2, #60	; 0x3c
   1b7fe:	4668      	mov	r0, sp
   1b800:	f00b f981 	bl	26b06 <div>
   1b804:	9a01      	ldr	r2, [sp, #4]
   1b806:	68a3      	ldr	r3, [r4, #8]
   1b808:	9900      	ldr	r1, [sp, #0]
   1b80a:	2a00      	cmp	r2, #0
   1b80c:	440b      	add	r3, r1
   1b80e:	60a3      	str	r3, [r4, #8]
   1b810:	bfbb      	ittet	lt
   1b812:	323c      	addlt	r2, #60	; 0x3c
   1b814:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   1b818:	6062      	strge	r2, [r4, #4]
   1b81a:	6062      	strlt	r2, [r4, #4]
   1b81c:	bfb8      	it	lt
   1b81e:	60a3      	strlt	r3, [r4, #8]
   1b820:	68a1      	ldr	r1, [r4, #8]
   1b822:	2917      	cmp	r1, #23
   1b824:	d911      	bls.n	1b84a <validate_structure+0x82>
   1b826:	2218      	movs	r2, #24
   1b828:	4668      	mov	r0, sp
   1b82a:	f00b f96c 	bl	26b06 <div>
   1b82e:	9a01      	ldr	r2, [sp, #4]
   1b830:	68e3      	ldr	r3, [r4, #12]
   1b832:	9900      	ldr	r1, [sp, #0]
   1b834:	2a00      	cmp	r2, #0
   1b836:	440b      	add	r3, r1
   1b838:	60e3      	str	r3, [r4, #12]
   1b83a:	bfbb      	ittet	lt
   1b83c:	3218      	addlt	r2, #24
   1b83e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   1b842:	60a2      	strge	r2, [r4, #8]
   1b844:	60a2      	strlt	r2, [r4, #8]
   1b846:	bfb8      	it	lt
   1b848:	60e3      	strlt	r3, [r4, #12]
   1b84a:	6921      	ldr	r1, [r4, #16]
   1b84c:	290b      	cmp	r1, #11
   1b84e:	d911      	bls.n	1b874 <validate_structure+0xac>
   1b850:	220c      	movs	r2, #12
   1b852:	4668      	mov	r0, sp
   1b854:	f00b f957 	bl	26b06 <div>
   1b858:	9a01      	ldr	r2, [sp, #4]
   1b85a:	6963      	ldr	r3, [r4, #20]
   1b85c:	9900      	ldr	r1, [sp, #0]
   1b85e:	2a00      	cmp	r2, #0
   1b860:	440b      	add	r3, r1
   1b862:	6163      	str	r3, [r4, #20]
   1b864:	bfbb      	ittet	lt
   1b866:	320c      	addlt	r2, #12
   1b868:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   1b86c:	6122      	strge	r2, [r4, #16]
   1b86e:	6122      	strlt	r2, [r4, #16]
   1b870:	bfb8      	it	lt
   1b872:	6163      	strlt	r3, [r4, #20]
   1b874:	6963      	ldr	r3, [r4, #20]
   1b876:	0799      	lsls	r1, r3, #30
   1b878:	d120      	bne.n	1b8bc <validate_structure+0xf4>
   1b87a:	2164      	movs	r1, #100	; 0x64
   1b87c:	fb93 f2f1 	sdiv	r2, r3, r1
   1b880:	fb01 3212 	mls	r2, r1, r2, r3
   1b884:	b9e2      	cbnz	r2, 1b8c0 <validate_structure+0xf8>
   1b886:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   1b88a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1b88e:	fb93 f2f1 	sdiv	r2, r3, r1
   1b892:	fb01 3312 	mls	r3, r1, r2, r3
   1b896:	2b00      	cmp	r3, #0
   1b898:	bf14      	ite	ne
   1b89a:	231c      	movne	r3, #28
   1b89c:	231d      	moveq	r3, #29
   1b89e:	68e2      	ldr	r2, [r4, #12]
   1b8a0:	2a00      	cmp	r2, #0
   1b8a2:	dc0f      	bgt.n	1b8c4 <validate_structure+0xfc>
   1b8a4:	4f33      	ldr	r7, [pc, #204]	; (1b974 <validate_structure+0x1ac>)
   1b8a6:	260b      	movs	r6, #11
   1b8a8:	2064      	movs	r0, #100	; 0x64
   1b8aa:	f44f 75c8 	mov.w	r5, #400	; 0x190
   1b8ae:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   1b8b2:	f1bc 0f00 	cmp.w	ip, #0
   1b8b6:	dd31      	ble.n	1b91c <validate_structure+0x154>
   1b8b8:	b003      	add	sp, #12
   1b8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b8bc:	231c      	movs	r3, #28
   1b8be:	e7ee      	b.n	1b89e <validate_structure+0xd6>
   1b8c0:	231d      	movs	r3, #29
   1b8c2:	e7ec      	b.n	1b89e <validate_structure+0xd6>
   1b8c4:	4f2b      	ldr	r7, [pc, #172]	; (1b974 <validate_structure+0x1ac>)
   1b8c6:	f04f 0c00 	mov.w	ip, #0
   1b8ca:	2564      	movs	r5, #100	; 0x64
   1b8cc:	f44f 76c8 	mov.w	r6, #400	; 0x190
   1b8d0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1b8d4:	2a01      	cmp	r2, #1
   1b8d6:	bf14      	ite	ne
   1b8d8:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
   1b8dc:	4618      	moveq	r0, r3
   1b8de:	4281      	cmp	r1, r0
   1b8e0:	ddea      	ble.n	1b8b8 <validate_structure+0xf0>
   1b8e2:	3201      	adds	r2, #1
   1b8e4:	1a09      	subs	r1, r1, r0
   1b8e6:	2a0c      	cmp	r2, #12
   1b8e8:	60e1      	str	r1, [r4, #12]
   1b8ea:	6122      	str	r2, [r4, #16]
   1b8ec:	d1f0      	bne.n	1b8d0 <validate_structure+0x108>
   1b8ee:	6963      	ldr	r3, [r4, #20]
   1b8f0:	1c5a      	adds	r2, r3, #1
   1b8f2:	0791      	lsls	r1, r2, #30
   1b8f4:	e9c4 c204 	strd	ip, r2, [r4, #16]
   1b8f8:	d137      	bne.n	1b96a <validate_structure+0x1a2>
   1b8fa:	fb92 f1f5 	sdiv	r1, r2, r5
   1b8fe:	fb05 2211 	mls	r2, r5, r1, r2
   1b902:	2a00      	cmp	r2, #0
   1b904:	d133      	bne.n	1b96e <validate_structure+0x1a6>
   1b906:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   1b90a:	fb93 f2f6 	sdiv	r2, r3, r6
   1b90e:	fb06 3312 	mls	r3, r6, r2, r3
   1b912:	2b00      	cmp	r3, #0
   1b914:	bf14      	ite	ne
   1b916:	231c      	movne	r3, #28
   1b918:	231d      	moveq	r3, #29
   1b91a:	e7d9      	b.n	1b8d0 <validate_structure+0x108>
   1b91c:	6921      	ldr	r1, [r4, #16]
   1b91e:	3901      	subs	r1, #1
   1b920:	6121      	str	r1, [r4, #16]
   1b922:	3101      	adds	r1, #1
   1b924:	d114      	bne.n	1b950 <validate_structure+0x188>
   1b926:	6963      	ldr	r3, [r4, #20]
   1b928:	1e59      	subs	r1, r3, #1
   1b92a:	078a      	lsls	r2, r1, #30
   1b92c:	e9c4 6104 	strd	r6, r1, [r4, #16]
   1b930:	d117      	bne.n	1b962 <validate_structure+0x19a>
   1b932:	fb91 f2f0 	sdiv	r2, r1, r0
   1b936:	fb00 1112 	mls	r1, r0, r2, r1
   1b93a:	b9a1      	cbnz	r1, 1b966 <validate_structure+0x19e>
   1b93c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   1b940:	fb93 f2f5 	sdiv	r2, r3, r5
   1b944:	fb05 3312 	mls	r3, r5, r2, r3
   1b948:	2b00      	cmp	r3, #0
   1b94a:	bf14      	ite	ne
   1b94c:	231c      	movne	r3, #28
   1b94e:	231d      	moveq	r3, #29
   1b950:	6922      	ldr	r2, [r4, #16]
   1b952:	2a01      	cmp	r2, #1
   1b954:	bf14      	ite	ne
   1b956:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   1b95a:	461a      	moveq	r2, r3
   1b95c:	4462      	add	r2, ip
   1b95e:	60e2      	str	r2, [r4, #12]
   1b960:	e7a5      	b.n	1b8ae <validate_structure+0xe6>
   1b962:	231c      	movs	r3, #28
   1b964:	e7f4      	b.n	1b950 <validate_structure+0x188>
   1b966:	231d      	movs	r3, #29
   1b968:	e7f2      	b.n	1b950 <validate_structure+0x188>
   1b96a:	231c      	movs	r3, #28
   1b96c:	e7b0      	b.n	1b8d0 <validate_structure+0x108>
   1b96e:	231d      	movs	r3, #29
   1b970:	e7ae      	b.n	1b8d0 <validate_structure+0x108>
   1b972:	bf00      	nop
   1b974:	00028504 	.word	0x00028504

0001b978 <mktime>:
   1b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b97c:	b08b      	sub	sp, #44	; 0x2c
   1b97e:	4605      	mov	r5, r0
   1b980:	f001 fb42 	bl	1d008 <__gettzinfo>
   1b984:	4607      	mov	r7, r0
   1b986:	4628      	mov	r0, r5
   1b988:	f7ff ff1e 	bl	1b7c8 <validate_structure>
   1b98c:	e9d5 2300 	ldrd	r2, r3, [r5]
   1b990:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   1b994:	68a8      	ldr	r0, [r5, #8]
   1b996:	696e      	ldr	r6, [r5, #20]
   1b998:	fb0a 2303 	mla	r3, sl, r3, r2
   1b99c:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
   1b9a0:	fb0a 3a00 	mla	sl, sl, r0, r3
   1b9a4:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
   1b9a8:	4abb      	ldr	r2, [pc, #748]	; (1bc98 <mktime+0x320>)
   1b9aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1b9ae:	3c01      	subs	r4, #1
   1b9b0:	2b01      	cmp	r3, #1
   1b9b2:	4414      	add	r4, r2
   1b9b4:	dd11      	ble.n	1b9da <mktime+0x62>
   1b9b6:	07b1      	lsls	r1, r6, #30
   1b9b8:	d10f      	bne.n	1b9da <mktime+0x62>
   1b9ba:	2264      	movs	r2, #100	; 0x64
   1b9bc:	fb96 f3f2 	sdiv	r3, r6, r2
   1b9c0:	fb02 6313 	mls	r3, r2, r3, r6
   1b9c4:	b943      	cbnz	r3, 1b9d8 <mktime+0x60>
   1b9c6:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   1b9ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1b9ce:	fb91 f3f2 	sdiv	r3, r1, r2
   1b9d2:	fb02 1313 	mls	r3, r2, r3, r1
   1b9d6:	b903      	cbnz	r3, 1b9da <mktime+0x62>
   1b9d8:	3401      	adds	r4, #1
   1b9da:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
   1b9de:	3310      	adds	r3, #16
   1b9e0:	f644 6220 	movw	r2, #20000	; 0x4e20
   1b9e4:	4293      	cmp	r3, r2
   1b9e6:	61ec      	str	r4, [r5, #28]
   1b9e8:	f200 8162 	bhi.w	1bcb0 <mktime+0x338>
   1b9ec:	2e46      	cmp	r6, #70	; 0x46
   1b9ee:	dd75      	ble.n	1badc <mktime+0x164>
   1b9f0:	2346      	movs	r3, #70	; 0x46
   1b9f2:	f240 1e6d 	movw	lr, #365	; 0x16d
   1b9f6:	2164      	movs	r1, #100	; 0x64
   1b9f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1b9fc:	079a      	lsls	r2, r3, #30
   1b9fe:	d167      	bne.n	1bad0 <mktime+0x158>
   1ba00:	fb93 f2f1 	sdiv	r2, r3, r1
   1ba04:	fb01 3212 	mls	r2, r1, r2, r3
   1ba08:	2a00      	cmp	r2, #0
   1ba0a:	d164      	bne.n	1bad6 <mktime+0x15e>
   1ba0c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   1ba10:	fb9c f2f0 	sdiv	r2, ip, r0
   1ba14:	fb00 c212 	mls	r2, r0, r2, ip
   1ba18:	2a00      	cmp	r2, #0
   1ba1a:	bf14      	ite	ne
   1ba1c:	4672      	movne	r2, lr
   1ba1e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   1ba22:	3301      	adds	r3, #1
   1ba24:	429e      	cmp	r6, r3
   1ba26:	4414      	add	r4, r2
   1ba28:	d1e8      	bne.n	1b9fc <mktime+0x84>
   1ba2a:	4b9c      	ldr	r3, [pc, #624]	; (1bc9c <mktime+0x324>)
   1ba2c:	ea4f 7bea 	mov.w	fp, sl, asr #31
   1ba30:	fbc3 ab04 	smlal	sl, fp, r3, r4
   1ba34:	f00b f865 	bl	26b02 <_tzset_unlocked>
   1ba38:	4b99      	ldr	r3, [pc, #612]	; (1bca0 <mktime+0x328>)
   1ba3a:	f8d3 9000 	ldr.w	r9, [r3]
   1ba3e:	f1b9 0f00 	cmp.w	r9, #0
   1ba42:	d03f      	beq.n	1bac4 <mktime+0x14c>
   1ba44:	f8d5 9020 	ldr.w	r9, [r5, #32]
   1ba48:	6968      	ldr	r0, [r5, #20]
   1ba4a:	687b      	ldr	r3, [r7, #4]
   1ba4c:	f1b9 0f01 	cmp.w	r9, #1
   1ba50:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   1ba54:	46c8      	mov	r8, r9
   1ba56:	bfa8      	it	ge
   1ba58:	f04f 0801 	movge.w	r8, #1
   1ba5c:	4283      	cmp	r3, r0
   1ba5e:	d17f      	bne.n	1bb60 <mktime+0x1e8>
   1ba60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ba62:	4619      	mov	r1, r3
   1ba64:	17da      	asrs	r2, r3, #31
   1ba66:	e9cd 1200 	strd	r1, r2, [sp]
   1ba6a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
   1ba6e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   1ba72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ba76:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ba78:	1a80      	subs	r0, r0, r2
   1ba7a:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
   1ba7e:	4582      	cmp	sl, r0
   1ba80:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ba84:	eb7b 0101 	sbcs.w	r1, fp, r1
   1ba88:	da71      	bge.n	1bb6e <mktime+0x1f6>
   1ba8a:	9800      	ldr	r0, [sp, #0]
   1ba8c:	6a39      	ldr	r1, [r7, #32]
   1ba8e:	1a09      	subs	r1, r1, r0
   1ba90:	9104      	str	r1, [sp, #16]
   1ba92:	9801      	ldr	r0, [sp, #4]
   1ba94:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ba96:	eb61 0100 	sbc.w	r1, r1, r0
   1ba9a:	9105      	str	r1, [sp, #20]
   1ba9c:	6839      	ldr	r1, [r7, #0]
   1ba9e:	2900      	cmp	r1, #0
   1baa0:	d075      	beq.n	1bb8e <mktime+0x216>
   1baa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1baa6:	4582      	cmp	sl, r0
   1baa8:	eb7b 0101 	sbcs.w	r1, fp, r1
   1baac:	db05      	blt.n	1baba <mktime+0x142>
   1baae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1bab2:	4582      	cmp	sl, r0
   1bab4:	eb7b 0101 	sbcs.w	r1, fp, r1
   1bab8:	db6f      	blt.n	1bb9a <mktime+0x222>
   1baba:	f1b9 0f00 	cmp.w	r9, #0
   1babe:	f04f 0900 	mov.w	r9, #0
   1bac2:	da6f      	bge.n	1bba4 <mktime+0x22c>
   1bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bac6:	eb1a 0003 	adds.w	r0, sl, r3
   1baca:	eb4b 71e3 	adc.w	r1, fp, r3, asr #31
   1bace:	e0ae      	b.n	1bc2e <mktime+0x2b6>
   1bad0:	f240 126d 	movw	r2, #365	; 0x16d
   1bad4:	e7a5      	b.n	1ba22 <mktime+0xaa>
   1bad6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   1bada:	e7a2      	b.n	1ba22 <mktime+0xaa>
   1badc:	d0a5      	beq.n	1ba2a <mktime+0xb2>
   1bade:	2345      	movs	r3, #69	; 0x45
   1bae0:	f240 1e6d 	movw	lr, #365	; 0x16d
   1bae4:	2164      	movs	r1, #100	; 0x64
   1bae6:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1baea:	e012      	b.n	1bb12 <mktime+0x19a>
   1baec:	bb62      	cbnz	r2, 1bb48 <mktime+0x1d0>
   1baee:	fb93 f2f1 	sdiv	r2, r3, r1
   1baf2:	fb01 3212 	mls	r2, r1, r2, r3
   1baf6:	bb52      	cbnz	r2, 1bb4e <mktime+0x1d6>
   1baf8:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   1bafc:	fb9c f2f0 	sdiv	r2, ip, r0
   1bb00:	fb00 c212 	mls	r2, r0, r2, ip
   1bb04:	2a00      	cmp	r2, #0
   1bb06:	bf14      	ite	ne
   1bb08:	4672      	movne	r2, lr
   1bb0a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   1bb0e:	1aa4      	subs	r4, r4, r2
   1bb10:	3b01      	subs	r3, #1
   1bb12:	429e      	cmp	r6, r3
   1bb14:	f003 0203 	and.w	r2, r3, #3
   1bb18:	dbe8      	blt.n	1baec <mktime+0x174>
   1bb1a:	b9da      	cbnz	r2, 1bb54 <mktime+0x1dc>
   1bb1c:	2264      	movs	r2, #100	; 0x64
   1bb1e:	fb96 f3f2 	sdiv	r3, r6, r2
   1bb22:	fb02 6313 	mls	r3, r2, r3, r6
   1bb26:	b9c3      	cbnz	r3, 1bb5a <mktime+0x1e2>
   1bb28:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   1bb2c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1bb30:	fb91 f3f2 	sdiv	r3, r1, r2
   1bb34:	fb02 1313 	mls	r3, r2, r3, r1
   1bb38:	2b00      	cmp	r3, #0
   1bb3a:	f240 136d 	movw	r3, #365	; 0x16d
   1bb3e:	bf08      	it	eq
   1bb40:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   1bb44:	1ae4      	subs	r4, r4, r3
   1bb46:	e770      	b.n	1ba2a <mktime+0xb2>
   1bb48:	f240 126d 	movw	r2, #365	; 0x16d
   1bb4c:	e7df      	b.n	1bb0e <mktime+0x196>
   1bb4e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   1bb52:	e7dc      	b.n	1bb0e <mktime+0x196>
   1bb54:	f240 136d 	movw	r3, #365	; 0x16d
   1bb58:	e7f4      	b.n	1bb44 <mktime+0x1cc>
   1bb5a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1bb5e:	e7f1      	b.n	1bb44 <mktime+0x1cc>
   1bb60:	f000 ffee 	bl	1cb40 <__tzcalc_limits>
   1bb64:	2800      	cmp	r0, #0
   1bb66:	f47f af7b 	bne.w	1ba60 <mktime+0xe8>
   1bb6a:	46c1      	mov	r9, r8
   1bb6c:	e054      	b.n	1bc18 <mktime+0x2a0>
   1bb6e:	9800      	ldr	r0, [sp, #0]
   1bb70:	9902      	ldr	r1, [sp, #8]
   1bb72:	1a09      	subs	r1, r1, r0
   1bb74:	9108      	str	r1, [sp, #32]
   1bb76:	9801      	ldr	r0, [sp, #4]
   1bb78:	9903      	ldr	r1, [sp, #12]
   1bb7a:	eb61 0100 	sbc.w	r1, r1, r0
   1bb7e:	9109      	str	r1, [sp, #36]	; 0x24
   1bb80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1bb84:	4582      	cmp	sl, r0
   1bb86:	eb7b 0101 	sbcs.w	r1, fp, r1
   1bb8a:	dbee      	blt.n	1bb6a <mktime+0x1f2>
   1bb8c:	e77d      	b.n	1ba8a <mktime+0x112>
   1bb8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1bb92:	4582      	cmp	sl, r0
   1bb94:	eb7b 0101 	sbcs.w	r1, fp, r1
   1bb98:	db89      	blt.n	1baae <mktime+0x136>
   1bb9a:	f1b9 0f00 	cmp.w	r9, #0
   1bb9e:	db3f      	blt.n	1bc20 <mktime+0x2a8>
   1bba0:	f04f 0901 	mov.w	r9, #1
   1bba4:	ea88 0809 	eor.w	r8, r8, r9
   1bba8:	f1b8 0f01 	cmp.w	r8, #1
   1bbac:	d134      	bne.n	1bc18 <mktime+0x2a0>
   1bbae:	f1b9 0f00 	cmp.w	r9, #0
   1bbb2:	d04b      	beq.n	1bc4c <mktime+0x2d4>
   1bbb4:	1ad3      	subs	r3, r2, r3
   1bbb6:	682a      	ldr	r2, [r5, #0]
   1bbb8:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1bbbc:	441a      	add	r2, r3
   1bbbe:	eb1a 0a03 	adds.w	sl, sl, r3
   1bbc2:	602a      	str	r2, [r5, #0]
   1bbc4:	4628      	mov	r0, r5
   1bbc6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   1bbca:	f7ff fdfd 	bl	1b7c8 <validate_structure>
   1bbce:	68ea      	ldr	r2, [r5, #12]
   1bbd0:	ebb2 0208 	subs.w	r2, r2, r8
   1bbd4:	d020      	beq.n	1bc18 <mktime+0x2a0>
   1bbd6:	2a01      	cmp	r2, #1
   1bbd8:	dc3a      	bgt.n	1bc50 <mktime+0x2d8>
   1bbda:	1c90      	adds	r0, r2, #2
   1bbdc:	bfd8      	it	le
   1bbde:	2201      	movle	r2, #1
   1bbe0:	69eb      	ldr	r3, [r5, #28]
   1bbe2:	18d3      	adds	r3, r2, r3
   1bbe4:	4414      	add	r4, r2
   1bbe6:	d53c      	bpl.n	1bc62 <mktime+0x2ea>
   1bbe8:	1e72      	subs	r2, r6, #1
   1bbea:	0791      	lsls	r1, r2, #30
   1bbec:	d133      	bne.n	1bc56 <mktime+0x2de>
   1bbee:	2164      	movs	r1, #100	; 0x64
   1bbf0:	fb92 f3f1 	sdiv	r3, r2, r1
   1bbf4:	fb01 2313 	mls	r3, r1, r3, r2
   1bbf8:	bb83      	cbnz	r3, 1bc5c <mktime+0x2e4>
   1bbfa:	f206 766b 	addw	r6, r6, #1899	; 0x76b
   1bbfe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1bc02:	fb96 f3f2 	sdiv	r3, r6, r2
   1bc06:	fb02 6613 	mls	r6, r2, r3, r6
   1bc0a:	2e00      	cmp	r6, #0
   1bc0c:	f240 136d 	movw	r3, #365	; 0x16d
   1bc10:	bf18      	it	ne
   1bc12:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   1bc16:	61eb      	str	r3, [r5, #28]
   1bc18:	f1b9 0f01 	cmp.w	r9, #1
   1bc1c:	f47f af52 	bne.w	1bac4 <mktime+0x14c>
   1bc20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1bc22:	eb1a 0003 	adds.w	r0, sl, r3
   1bc26:	eb4b 71e3 	adc.w	r1, fp, r3, asr #31
   1bc2a:	f04f 0901 	mov.w	r9, #1
   1bc2e:	3404      	adds	r4, #4
   1bc30:	2307      	movs	r3, #7
   1bc32:	fb94 f3f3 	sdiv	r3, r4, r3
   1bc36:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1bc3a:	1ae4      	subs	r4, r4, r3
   1bc3c:	bf48      	it	mi
   1bc3e:	3407      	addmi	r4, #7
   1bc40:	f8c5 9020 	str.w	r9, [r5, #32]
   1bc44:	61ac      	str	r4, [r5, #24]
   1bc46:	b00b      	add	sp, #44	; 0x2c
   1bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc4c:	1a9b      	subs	r3, r3, r2
   1bc4e:	e7b2      	b.n	1bbb6 <mktime+0x23e>
   1bc50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bc54:	e7c4      	b.n	1bbe0 <mktime+0x268>
   1bc56:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   1bc5a:	e7dc      	b.n	1bc16 <mktime+0x29e>
   1bc5c:	f240 136d 	movw	r3, #365	; 0x16d
   1bc60:	e7d9      	b.n	1bc16 <mktime+0x29e>
   1bc62:	07b2      	lsls	r2, r6, #30
   1bc64:	d11e      	bne.n	1bca4 <mktime+0x32c>
   1bc66:	2164      	movs	r1, #100	; 0x64
   1bc68:	fb96 f2f1 	sdiv	r2, r6, r1
   1bc6c:	fb01 6212 	mls	r2, r1, r2, r6
   1bc70:	b9da      	cbnz	r2, 1bcaa <mktime+0x332>
   1bc72:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1bc76:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1bc7a:	fb96 f2f1 	sdiv	r2, r6, r1
   1bc7e:	fb01 6612 	mls	r6, r1, r2, r6
   1bc82:	2e00      	cmp	r6, #0
   1bc84:	f240 126d 	movw	r2, #365	; 0x16d
   1bc88:	bf08      	it	eq
   1bc8a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   1bc8e:	4293      	cmp	r3, r2
   1bc90:	bfa8      	it	ge
   1bc92:	1a9b      	subge	r3, r3, r2
   1bc94:	e7bf      	b.n	1bc16 <mktime+0x29e>
   1bc96:	bf00      	nop
   1bc98:	00028534 	.word	0x00028534
   1bc9c:	00015180 	.word	0x00015180
   1bca0:	20002ee0 	.word	0x20002ee0
   1bca4:	f240 126d 	movw	r2, #365	; 0x16d
   1bca8:	e7f1      	b.n	1bc8e <mktime+0x316>
   1bcaa:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   1bcae:	e7ee      	b.n	1bc8e <mktime+0x316>
   1bcb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bcb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bcb8:	e7c5      	b.n	1bc46 <mktime+0x2ce>
   1bcba:	bf00      	nop

0001bcbc <_free_r>:
   1bcbc:	b538      	push	{r3, r4, r5, lr}
   1bcbe:	4605      	mov	r5, r0
   1bcc0:	2900      	cmp	r1, #0
   1bcc2:	d045      	beq.n	1bd50 <_free_r+0x94>
   1bcc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1bcc8:	1f0c      	subs	r4, r1, #4
   1bcca:	2b00      	cmp	r3, #0
   1bccc:	bfb8      	it	lt
   1bcce:	18e4      	addlt	r4, r4, r3
   1bcd0:	f00a ff4a 	bl	26b68 <__malloc_lock>
   1bcd4:	4a1f      	ldr	r2, [pc, #124]	; (1bd54 <_free_r+0x98>)
   1bcd6:	6813      	ldr	r3, [r2, #0]
   1bcd8:	4610      	mov	r0, r2
   1bcda:	b933      	cbnz	r3, 1bcea <_free_r+0x2e>
   1bcdc:	6063      	str	r3, [r4, #4]
   1bcde:	6014      	str	r4, [r2, #0]
   1bce0:	4628      	mov	r0, r5
   1bce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bce6:	f00a bf40 	b.w	26b6a <__malloc_unlock>
   1bcea:	42a3      	cmp	r3, r4
   1bcec:	d90b      	bls.n	1bd06 <_free_r+0x4a>
   1bcee:	6821      	ldr	r1, [r4, #0]
   1bcf0:	1862      	adds	r2, r4, r1
   1bcf2:	4293      	cmp	r3, r2
   1bcf4:	bf04      	itt	eq
   1bcf6:	681a      	ldreq	r2, [r3, #0]
   1bcf8:	685b      	ldreq	r3, [r3, #4]
   1bcfa:	6063      	str	r3, [r4, #4]
   1bcfc:	bf04      	itt	eq
   1bcfe:	1852      	addeq	r2, r2, r1
   1bd00:	6022      	streq	r2, [r4, #0]
   1bd02:	6004      	str	r4, [r0, #0]
   1bd04:	e7ec      	b.n	1bce0 <_free_r+0x24>
   1bd06:	461a      	mov	r2, r3
   1bd08:	685b      	ldr	r3, [r3, #4]
   1bd0a:	b10b      	cbz	r3, 1bd10 <_free_r+0x54>
   1bd0c:	42a3      	cmp	r3, r4
   1bd0e:	d9fa      	bls.n	1bd06 <_free_r+0x4a>
   1bd10:	6811      	ldr	r1, [r2, #0]
   1bd12:	1850      	adds	r0, r2, r1
   1bd14:	42a0      	cmp	r0, r4
   1bd16:	d10b      	bne.n	1bd30 <_free_r+0x74>
   1bd18:	6820      	ldr	r0, [r4, #0]
   1bd1a:	4401      	add	r1, r0
   1bd1c:	1850      	adds	r0, r2, r1
   1bd1e:	4283      	cmp	r3, r0
   1bd20:	6011      	str	r1, [r2, #0]
   1bd22:	d1dd      	bne.n	1bce0 <_free_r+0x24>
   1bd24:	6818      	ldr	r0, [r3, #0]
   1bd26:	685b      	ldr	r3, [r3, #4]
   1bd28:	6053      	str	r3, [r2, #4]
   1bd2a:	4401      	add	r1, r0
   1bd2c:	6011      	str	r1, [r2, #0]
   1bd2e:	e7d7      	b.n	1bce0 <_free_r+0x24>
   1bd30:	d902      	bls.n	1bd38 <_free_r+0x7c>
   1bd32:	230c      	movs	r3, #12
   1bd34:	602b      	str	r3, [r5, #0]
   1bd36:	e7d3      	b.n	1bce0 <_free_r+0x24>
   1bd38:	6820      	ldr	r0, [r4, #0]
   1bd3a:	1821      	adds	r1, r4, r0
   1bd3c:	428b      	cmp	r3, r1
   1bd3e:	bf04      	itt	eq
   1bd40:	6819      	ldreq	r1, [r3, #0]
   1bd42:	685b      	ldreq	r3, [r3, #4]
   1bd44:	6063      	str	r3, [r4, #4]
   1bd46:	bf04      	itt	eq
   1bd48:	1809      	addeq	r1, r1, r0
   1bd4a:	6021      	streq	r1, [r4, #0]
   1bd4c:	6054      	str	r4, [r2, #4]
   1bd4e:	e7c7      	b.n	1bce0 <_free_r+0x24>
   1bd50:	bd38      	pop	{r3, r4, r5, pc}
   1bd52:	bf00      	nop
   1bd54:	20002ed4 	.word	0x20002ed4

0001bd58 <_malloc_r>:
   1bd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd5a:	1ccd      	adds	r5, r1, #3
   1bd5c:	f025 0503 	bic.w	r5, r5, #3
   1bd60:	3508      	adds	r5, #8
   1bd62:	2d0c      	cmp	r5, #12
   1bd64:	bf38      	it	cc
   1bd66:	250c      	movcc	r5, #12
   1bd68:	2d00      	cmp	r5, #0
   1bd6a:	4606      	mov	r6, r0
   1bd6c:	db01      	blt.n	1bd72 <_malloc_r+0x1a>
   1bd6e:	42a9      	cmp	r1, r5
   1bd70:	d903      	bls.n	1bd7a <_malloc_r+0x22>
   1bd72:	230c      	movs	r3, #12
   1bd74:	6033      	str	r3, [r6, #0]
   1bd76:	2000      	movs	r0, #0
   1bd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd7a:	f00a fef5 	bl	26b68 <__malloc_lock>
   1bd7e:	4921      	ldr	r1, [pc, #132]	; (1be04 <_malloc_r+0xac>)
   1bd80:	680a      	ldr	r2, [r1, #0]
   1bd82:	4614      	mov	r4, r2
   1bd84:	b99c      	cbnz	r4, 1bdae <_malloc_r+0x56>
   1bd86:	4f20      	ldr	r7, [pc, #128]	; (1be08 <_malloc_r+0xb0>)
   1bd88:	683b      	ldr	r3, [r7, #0]
   1bd8a:	b923      	cbnz	r3, 1bd96 <_malloc_r+0x3e>
   1bd8c:	4621      	mov	r1, r4
   1bd8e:	4630      	mov	r0, r6
   1bd90:	f000 f83c 	bl	1be0c <_sbrk_r>
   1bd94:	6038      	str	r0, [r7, #0]
   1bd96:	4629      	mov	r1, r5
   1bd98:	4630      	mov	r0, r6
   1bd9a:	f000 f837 	bl	1be0c <_sbrk_r>
   1bd9e:	1c43      	adds	r3, r0, #1
   1bda0:	d123      	bne.n	1bdea <_malloc_r+0x92>
   1bda2:	230c      	movs	r3, #12
   1bda4:	6033      	str	r3, [r6, #0]
   1bda6:	4630      	mov	r0, r6
   1bda8:	f00a fedf 	bl	26b6a <__malloc_unlock>
   1bdac:	e7e3      	b.n	1bd76 <_malloc_r+0x1e>
   1bdae:	6823      	ldr	r3, [r4, #0]
   1bdb0:	1b5b      	subs	r3, r3, r5
   1bdb2:	d417      	bmi.n	1bde4 <_malloc_r+0x8c>
   1bdb4:	2b0b      	cmp	r3, #11
   1bdb6:	d903      	bls.n	1bdc0 <_malloc_r+0x68>
   1bdb8:	6023      	str	r3, [r4, #0]
   1bdba:	441c      	add	r4, r3
   1bdbc:	6025      	str	r5, [r4, #0]
   1bdbe:	e004      	b.n	1bdca <_malloc_r+0x72>
   1bdc0:	6863      	ldr	r3, [r4, #4]
   1bdc2:	42a2      	cmp	r2, r4
   1bdc4:	bf0c      	ite	eq
   1bdc6:	600b      	streq	r3, [r1, #0]
   1bdc8:	6053      	strne	r3, [r2, #4]
   1bdca:	4630      	mov	r0, r6
   1bdcc:	f00a fecd 	bl	26b6a <__malloc_unlock>
   1bdd0:	f104 000b 	add.w	r0, r4, #11
   1bdd4:	1d23      	adds	r3, r4, #4
   1bdd6:	f020 0007 	bic.w	r0, r0, #7
   1bdda:	1ac2      	subs	r2, r0, r3
   1bddc:	d0cc      	beq.n	1bd78 <_malloc_r+0x20>
   1bdde:	1a1b      	subs	r3, r3, r0
   1bde0:	50a3      	str	r3, [r4, r2]
   1bde2:	e7c9      	b.n	1bd78 <_malloc_r+0x20>
   1bde4:	4622      	mov	r2, r4
   1bde6:	6864      	ldr	r4, [r4, #4]
   1bde8:	e7cc      	b.n	1bd84 <_malloc_r+0x2c>
   1bdea:	1cc4      	adds	r4, r0, #3
   1bdec:	f024 0403 	bic.w	r4, r4, #3
   1bdf0:	42a0      	cmp	r0, r4
   1bdf2:	d0e3      	beq.n	1bdbc <_malloc_r+0x64>
   1bdf4:	1a21      	subs	r1, r4, r0
   1bdf6:	4630      	mov	r0, r6
   1bdf8:	f000 f808 	bl	1be0c <_sbrk_r>
   1bdfc:	3001      	adds	r0, #1
   1bdfe:	d1dd      	bne.n	1bdbc <_malloc_r+0x64>
   1be00:	e7cf      	b.n	1bda2 <_malloc_r+0x4a>
   1be02:	bf00      	nop
   1be04:	20002ed4 	.word	0x20002ed4
   1be08:	20002ed8 	.word	0x20002ed8

0001be0c <_sbrk_r>:
   1be0c:	b538      	push	{r3, r4, r5, lr}
   1be0e:	4d06      	ldr	r5, [pc, #24]	; (1be28 <_sbrk_r+0x1c>)
   1be10:	2300      	movs	r3, #0
   1be12:	4604      	mov	r4, r0
   1be14:	4608      	mov	r0, r1
   1be16:	602b      	str	r3, [r5, #0]
   1be18:	f7e8 fec8 	bl	4bac <_sbrk>
   1be1c:	1c43      	adds	r3, r0, #1
   1be1e:	d102      	bne.n	1be26 <_sbrk_r+0x1a>
   1be20:	682b      	ldr	r3, [r5, #0]
   1be22:	b103      	cbz	r3, 1be26 <_sbrk_r+0x1a>
   1be24:	6023      	str	r3, [r4, #0]
   1be26:	bd38      	pop	{r3, r4, r5, pc}
   1be28:	200030c8 	.word	0x200030c8

0001be2c <siscanf>:
   1be2c:	b40e      	push	{r1, r2, r3}
   1be2e:	b530      	push	{r4, r5, lr}
   1be30:	b09a      	sub	sp, #104	; 0x68
   1be32:	ac1d      	add	r4, sp, #116	; 0x74
   1be34:	f44f 7201 	mov.w	r2, #516	; 0x204
   1be38:	f854 5b04 	ldr.w	r5, [r4], #4
   1be3c:	f8ad 2010 	strh.w	r2, [sp, #16]
   1be40:	9001      	str	r0, [sp, #4]
   1be42:	9005      	str	r0, [sp, #20]
   1be44:	f7e4 fb22 	bl	48c <strlen>
   1be48:	4b0b      	ldr	r3, [pc, #44]	; (1be78 <siscanf+0x4c>)
   1be4a:	9002      	str	r0, [sp, #8]
   1be4c:	9006      	str	r0, [sp, #24]
   1be4e:	930a      	str	r3, [sp, #40]	; 0x28
   1be50:	480a      	ldr	r0, [pc, #40]	; (1be7c <siscanf+0x50>)
   1be52:	9400      	str	r4, [sp, #0]
   1be54:	2300      	movs	r3, #0
   1be56:	930e      	str	r3, [sp, #56]	; 0x38
   1be58:	9313      	str	r3, [sp, #76]	; 0x4c
   1be5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1be5e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1be62:	462a      	mov	r2, r5
   1be64:	4623      	mov	r3, r4
   1be66:	a901      	add	r1, sp, #4
   1be68:	6800      	ldr	r0, [r0, #0]
   1be6a:	f001 f9d1 	bl	1d210 <__ssvfiscanf_r>
   1be6e:	b01a      	add	sp, #104	; 0x68
   1be70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1be74:	b003      	add	sp, #12
   1be76:	4770      	bx	lr
   1be78:	00026a9d 	.word	0x00026a9d
   1be7c:	2000099c 	.word	0x2000099c

0001be80 <iso_year_adjust>:
   1be80:	6941      	ldr	r1, [r0, #20]
   1be82:	2900      	cmp	r1, #0
   1be84:	f240 736c 	movw	r3, #1900	; 0x76c
   1be88:	bfa8      	it	ge
   1be8a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   1be8e:	18ca      	adds	r2, r1, r3
   1be90:	078b      	lsls	r3, r1, #30
   1be92:	d105      	bne.n	1bea0 <iso_year_adjust+0x20>
   1be94:	2164      	movs	r1, #100	; 0x64
   1be96:	fb92 f3f1 	sdiv	r3, r2, r1
   1be9a:	fb01 2313 	mls	r3, r1, r3, r2
   1be9e:	b9db      	cbnz	r3, 1bed8 <iso_year_adjust+0x58>
   1bea0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1bea4:	fb92 f3f1 	sdiv	r3, r2, r1
   1bea8:	fb01 2313 	mls	r3, r1, r3, r2
   1beac:	fab3 f383 	clz	r3, r3
   1beb0:	095b      	lsrs	r3, r3, #5
   1beb2:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
   1beb6:	0040      	lsls	r0, r0, #1
   1beb8:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   1bebc:	4418      	add	r0, r3
   1bebe:	f241 63a2 	movw	r3, #5794	; 0x16a2
   1bec2:	4298      	cmp	r0, r3
   1bec4:	d03a      	beq.n	1bf3c <iso_year_adjust+0xbc>
   1bec6:	dc21      	bgt.n	1bf0c <iso_year_adjust+0x8c>
   1bec8:	2801      	cmp	r0, #1
   1beca:	dc1a      	bgt.n	1bf02 <iso_year_adjust+0x82>
   1becc:	2800      	cmp	r0, #0
   1bece:	bfb4      	ite	lt
   1bed0:	2000      	movlt	r0, #0
   1bed2:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   1bed6:	4770      	bx	lr
   1bed8:	2301      	movs	r3, #1
   1beda:	e7ea      	b.n	1beb2 <iso_year_adjust+0x32>
   1bedc:	2817      	cmp	r0, #23
   1bede:	d813      	bhi.n	1bf08 <iso_year_adjust+0x88>
   1bee0:	e8df f000 	tbb	[pc, r0]
   1bee4:	0c0c0c0c 	.word	0x0c0c0c0c
   1bee8:	0c0c1212 	.word	0x0c0c1212
   1beec:	12121212 	.word	0x12121212
   1bef0:	12121212 	.word	0x12121212
   1bef4:	0c0c1212 	.word	0x0c0c1212
   1bef8:	0c0c1212 	.word	0x0c0c1212
   1befc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bf00:	4770      	bx	lr
   1bf02:	380a      	subs	r0, #10
   1bf04:	2817      	cmp	r0, #23
   1bf06:	d9e9      	bls.n	1bedc <iso_year_adjust+0x5c>
   1bf08:	2000      	movs	r0, #0
   1bf0a:	4770      	bx	lr
   1bf0c:	f241 63b4 	movw	r3, #5812	; 0x16b4
   1bf10:	4298      	cmp	r0, r3
   1bf12:	dc06      	bgt.n	1bf22 <iso_year_adjust+0xa2>
   1bf14:	f241 63b1 	movw	r3, #5809	; 0x16b1
   1bf18:	4298      	cmp	r0, r3
   1bf1a:	bfd4      	ite	le
   1bf1c:	2000      	movle	r0, #0
   1bf1e:	2001      	movgt	r0, #1
   1bf20:	4770      	bx	lr
   1bf22:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
   1bf26:	3802      	subs	r0, #2
   1bf28:	2815      	cmp	r0, #21
   1bf2a:	d8ed      	bhi.n	1bf08 <iso_year_adjust+0x88>
   1bf2c:	2301      	movs	r3, #1
   1bf2e:	4083      	lsls	r3, r0
   1bf30:	4803      	ldr	r0, [pc, #12]	; (1bf40 <iso_year_adjust+0xc0>)
   1bf32:	4018      	ands	r0, r3
   1bf34:	3800      	subs	r0, #0
   1bf36:	bf18      	it	ne
   1bf38:	2001      	movne	r0, #1
   1bf3a:	4770      	bx	lr
   1bf3c:	2001      	movs	r0, #1
   1bf3e:	4770      	bx	lr
   1bf40:	002a001f 	.word	0x002a001f

0001bf44 <__strftime>:
   1bf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf48:	b091      	sub	sp, #68	; 0x44
   1bf4a:	461e      	mov	r6, r3
   1bf4c:	2300      	movs	r3, #0
   1bf4e:	4607      	mov	r7, r0
   1bf50:	460d      	mov	r5, r1
   1bf52:	9304      	str	r3, [sp, #16]
   1bf54:	461c      	mov	r4, r3
   1bf56:	7813      	ldrb	r3, [r2, #0]
   1bf58:	2b00      	cmp	r3, #0
   1bf5a:	f000 84cd 	beq.w	1c8f8 <__strftime+0x9b4>
   1bf5e:	2b25      	cmp	r3, #37	; 0x25
   1bf60:	d11f      	bne.n	1bfa2 <__strftime+0x5e>
   1bf62:	f892 9001 	ldrb.w	r9, [r2, #1]
   1bf66:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   1bf6a:	d024      	beq.n	1bfb6 <__strftime+0x72>
   1bf6c:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   1bf70:	d021      	beq.n	1bfb6 <__strftime+0x72>
   1bf72:	f102 0a01 	add.w	sl, r2, #1
   1bf76:	f04f 0900 	mov.w	r9, #0
   1bf7a:	f89a 3000 	ldrb.w	r3, [sl]
   1bf7e:	3b31      	subs	r3, #49	; 0x31
   1bf80:	2b08      	cmp	r3, #8
   1bf82:	d81b      	bhi.n	1bfbc <__strftime+0x78>
   1bf84:	4650      	mov	r0, sl
   1bf86:	220a      	movs	r2, #10
   1bf88:	a908      	add	r1, sp, #32
   1bf8a:	f000 fdcf 	bl	1cb2c <strtoul>
   1bf8e:	f8dd a020 	ldr.w	sl, [sp, #32]
   1bf92:	4680      	mov	r8, r0
   1bf94:	f89a 3000 	ldrb.w	r3, [sl]
   1bf98:	2b45      	cmp	r3, #69	; 0x45
   1bf9a:	d112      	bne.n	1bfc2 <__strftime+0x7e>
   1bf9c:	f10a 0a01 	add.w	sl, sl, #1
   1bfa0:	e011      	b.n	1bfc6 <__strftime+0x82>
   1bfa2:	1e69      	subs	r1, r5, #1
   1bfa4:	42a1      	cmp	r1, r4
   1bfa6:	d802      	bhi.n	1bfae <__strftime+0x6a>
   1bfa8:	2400      	movs	r4, #0
   1bfaa:	f000 bca8 	b.w	1c8fe <__strftime+0x9ba>
   1bfae:	553b      	strb	r3, [r7, r4]
   1bfb0:	3201      	adds	r2, #1
   1bfb2:	3401      	adds	r4, #1
   1bfb4:	e7cf      	b.n	1bf56 <__strftime+0x12>
   1bfb6:	f102 0a02 	add.w	sl, r2, #2
   1bfba:	e7de      	b.n	1bf7a <__strftime+0x36>
   1bfbc:	f04f 0800 	mov.w	r8, #0
   1bfc0:	e7e8      	b.n	1bf94 <__strftime+0x50>
   1bfc2:	2b4f      	cmp	r3, #79	; 0x4f
   1bfc4:	d0ea      	beq.n	1bf9c <__strftime+0x58>
   1bfc6:	f89a 0000 	ldrb.w	r0, [sl]
   1bfca:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   1bfce:	2b55      	cmp	r3, #85	; 0x55
   1bfd0:	d8ea      	bhi.n	1bfa8 <__strftime+0x64>
   1bfd2:	a201      	add	r2, pc, #4	; (adr r2, 1bfd8 <__strftime+0x94>)
   1bfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1bfd8:	0001c8ed 	.word	0x0001c8ed
   1bfdc:	0001bfa9 	.word	0x0001bfa9
   1bfe0:	0001bfa9 	.word	0x0001bfa9
   1bfe4:	0001bfa9 	.word	0x0001bfa9
   1bfe8:	0001bfa9 	.word	0x0001bfa9
   1bfec:	0001bfa9 	.word	0x0001bfa9
   1bff0:	0001bfa9 	.word	0x0001bfa9
   1bff4:	0001bfa9 	.word	0x0001bfa9
   1bff8:	0001bfa9 	.word	0x0001bfa9
   1bffc:	0001bfa9 	.word	0x0001bfa9
   1c000:	0001bfa9 	.word	0x0001bfa9
   1c004:	0001bfa9 	.word	0x0001bfa9
   1c008:	0001bfa9 	.word	0x0001bfa9
   1c00c:	0001bfa9 	.word	0x0001bfa9
   1c010:	0001bfa9 	.word	0x0001bfa9
   1c014:	0001bfa9 	.word	0x0001bfa9
   1c018:	0001bfa9 	.word	0x0001bfa9
   1c01c:	0001bfa9 	.word	0x0001bfa9
   1c020:	0001bfa9 	.word	0x0001bfa9
   1c024:	0001bfa9 	.word	0x0001bfa9
   1c028:	0001bfa9 	.word	0x0001bfa9
   1c02c:	0001bfa9 	.word	0x0001bfa9
   1c030:	0001bfa9 	.word	0x0001bfa9
   1c034:	0001bfa9 	.word	0x0001bfa9
   1c038:	0001bfa9 	.word	0x0001bfa9
   1c03c:	0001bfa9 	.word	0x0001bfa9
   1c040:	0001bfa9 	.word	0x0001bfa9
   1c044:	0001bfa9 	.word	0x0001bfa9
   1c048:	0001c16d 	.word	0x0001c16d
   1c04c:	0001c1c5 	.word	0x0001c1c5
   1c050:	0001c237 	.word	0x0001c237
   1c054:	0001c2cf 	.word	0x0001c2cf
   1c058:	0001bfa9 	.word	0x0001bfa9
   1c05c:	0001c319 	.word	0x0001c319
   1c060:	0001c40d 	.word	0x0001c40d
   1c064:	0001c519 	.word	0x0001c519
   1c068:	0001c527 	.word	0x0001c527
   1c06c:	0001bfa9 	.word	0x0001bfa9
   1c070:	0001bfa9 	.word	0x0001bfa9
   1c074:	0001bfa9 	.word	0x0001bfa9
   1c078:	0001c557 	.word	0x0001c557
   1c07c:	0001bfa9 	.word	0x0001bfa9
   1c080:	0001bfa9 	.word	0x0001bfa9
   1c084:	0001c56b 	.word	0x0001c56b
   1c088:	0001bfa9 	.word	0x0001bfa9
   1c08c:	0001c5bb 	.word	0x0001c5bb
   1c090:	0001c6c9 	.word	0x0001c6c9
   1c094:	0001c6d9 	.word	0x0001c6d9
   1c098:	0001c72f 	.word	0x0001c72f
   1c09c:	0001c73f 	.word	0x0001c73f
   1c0a0:	0001c7b3 	.word	0x0001c7b3
   1c0a4:	0001c22f 	.word	0x0001c22f
   1c0a8:	0001c7e7 	.word	0x0001c7e7
   1c0ac:	0001c8ab 	.word	0x0001c8ab
   1c0b0:	0001bfa9 	.word	0x0001bfa9
   1c0b4:	0001bfa9 	.word	0x0001bfa9
   1c0b8:	0001bfa9 	.word	0x0001bfa9
   1c0bc:	0001bfa9 	.word	0x0001bfa9
   1c0c0:	0001bfa9 	.word	0x0001bfa9
   1c0c4:	0001bfa9 	.word	0x0001bfa9
   1c0c8:	0001c131 	.word	0x0001c131
   1c0cc:	0001c19b 	.word	0x0001c19b
   1c0d0:	0001c1f1 	.word	0x0001c1f1
   1c0d4:	0001c2ab 	.word	0x0001c2ab
   1c0d8:	0001c2ab 	.word	0x0001c2ab
   1c0dc:	0001bfa9 	.word	0x0001bfa9
   1c0e0:	0001c36f 	.word	0x0001c36f
   1c0e4:	0001c19b 	.word	0x0001c19b
   1c0e8:	0001bfa9 	.word	0x0001bfa9
   1c0ec:	0001c549 	.word	0x0001c549
   1c0f0:	0001c519 	.word	0x0001c519
   1c0f4:	0001c527 	.word	0x0001c527
   1c0f8:	0001c551 	.word	0x0001c551
   1c0fc:	0001c55b 	.word	0x0001c55b
   1c100:	0001bfa9 	.word	0x0001bfa9
   1c104:	0001c56b 	.word	0x0001c56b
   1c108:	0001bfa9 	.word	0x0001bfa9
   1c10c:	0001c21f 	.word	0x0001c21f
   1c110:	0001c5cd 	.word	0x0001c5cd
   1c114:	0001c6cd 	.word	0x0001c6cd
   1c118:	0001c715 	.word	0x0001c715
   1c11c:	0001bfa9 	.word	0x0001bfa9
   1c120:	0001c7a5 	.word	0x0001c7a5
   1c124:	0001c227 	.word	0x0001c227
   1c128:	0001c7cb 	.word	0x0001c7cb
   1c12c:	0001c843 	.word	0x0001c843
   1c130:	69b3      	ldr	r3, [r6, #24]
   1c132:	4aa9      	ldr	r2, [pc, #676]	; (1c3d8 <__strftime+0x494>)
   1c134:	3318      	adds	r3, #24
   1c136:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   1c13a:	4640      	mov	r0, r8
   1c13c:	f7e4 f9a6 	bl	48c <strlen>
   1c140:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1c144:	4420      	add	r0, r4
   1c146:	1e6b      	subs	r3, r5, #1
   1c148:	42a0      	cmp	r0, r4
   1c14a:	d107      	bne.n	1c15c <__strftime+0x218>
   1c14c:	f89a 3000 	ldrb.w	r3, [sl]
   1c150:	2b00      	cmp	r3, #0
   1c152:	f000 83d1 	beq.w	1c8f8 <__strftime+0x9b4>
   1c156:	f10a 0201 	add.w	r2, sl, #1
   1c15a:	e6fc      	b.n	1bf56 <__strftime+0x12>
   1c15c:	42a3      	cmp	r3, r4
   1c15e:	f67f af23 	bls.w	1bfa8 <__strftime+0x64>
   1c162:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   1c166:	553a      	strb	r2, [r7, r4]
   1c168:	3401      	adds	r4, #1
   1c16a:	e7ed      	b.n	1c148 <__strftime+0x204>
   1c16c:	69b2      	ldr	r2, [r6, #24]
   1c16e:	4b9a      	ldr	r3, [pc, #616]	; (1c3d8 <__strftime+0x494>)
   1c170:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1c174:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   1c178:	4640      	mov	r0, r8
   1c17a:	f7e4 f987 	bl	48c <strlen>
   1c17e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1c182:	4420      	add	r0, r4
   1c184:	1e6b      	subs	r3, r5, #1
   1c186:	42a0      	cmp	r0, r4
   1c188:	d0e0      	beq.n	1c14c <__strftime+0x208>
   1c18a:	42a3      	cmp	r3, r4
   1c18c:	f67f af0c 	bls.w	1bfa8 <__strftime+0x64>
   1c190:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   1c194:	553a      	strb	r2, [r7, r4]
   1c196:	3401      	adds	r4, #1
   1c198:	e7f5      	b.n	1c186 <__strftime+0x242>
   1c19a:	4b8f      	ldr	r3, [pc, #572]	; (1c3d8 <__strftime+0x494>)
   1c19c:	6932      	ldr	r2, [r6, #16]
   1c19e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
   1c1a2:	4640      	mov	r0, r8
   1c1a4:	f7e4 f972 	bl	48c <strlen>
   1c1a8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1c1ac:	4420      	add	r0, r4
   1c1ae:	1e6b      	subs	r3, r5, #1
   1c1b0:	42a0      	cmp	r0, r4
   1c1b2:	d0cb      	beq.n	1c14c <__strftime+0x208>
   1c1b4:	42a3      	cmp	r3, r4
   1c1b6:	f67f aef7 	bls.w	1bfa8 <__strftime+0x64>
   1c1ba:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   1c1be:	553a      	strb	r2, [r7, r4]
   1c1c0:	3401      	adds	r4, #1
   1c1c2:	e7f5      	b.n	1c1b0 <__strftime+0x26c>
   1c1c4:	6933      	ldr	r3, [r6, #16]
   1c1c6:	4a84      	ldr	r2, [pc, #528]	; (1c3d8 <__strftime+0x494>)
   1c1c8:	330c      	adds	r3, #12
   1c1ca:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   1c1ce:	4640      	mov	r0, r8
   1c1d0:	f7e4 f95c 	bl	48c <strlen>
   1c1d4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1c1d8:	4420      	add	r0, r4
   1c1da:	1e6b      	subs	r3, r5, #1
   1c1dc:	42a0      	cmp	r0, r4
   1c1de:	d0b5      	beq.n	1c14c <__strftime+0x208>
   1c1e0:	42a3      	cmp	r3, r4
   1c1e2:	f67f aee1 	bls.w	1bfa8 <__strftime+0x64>
   1c1e6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   1c1ea:	553a      	strb	r2, [r7, r4]
   1c1ec:	3401      	adds	r4, #1
   1c1ee:	e7f5      	b.n	1c1dc <__strftime+0x298>
   1c1f0:	4b79      	ldr	r3, [pc, #484]	; (1c3d8 <__strftime+0x494>)
   1c1f2:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   1c1f6:	4640      	mov	r0, r8
   1c1f8:	f7e4 f948 	bl	48c <strlen>
   1c1fc:	f898 3000 	ldrb.w	r3, [r8]
   1c200:	2b00      	cmp	r3, #0
   1c202:	d0a3      	beq.n	1c14c <__strftime+0x208>
   1c204:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1c206:	9300      	str	r3, [sp, #0]
   1c208:	4642      	mov	r2, r8
   1c20a:	4633      	mov	r3, r6
   1c20c:	1b29      	subs	r1, r5, r4
   1c20e:	1938      	adds	r0, r7, r4
   1c210:	f7ff fe98 	bl	1bf44 <__strftime>
   1c214:	2800      	cmp	r0, #0
   1c216:	f77f aec7 	ble.w	1bfa8 <__strftime+0x64>
   1c21a:	4404      	add	r4, r0
   1c21c:	e796      	b.n	1c14c <__strftime+0x208>
   1c21e:	4b6e      	ldr	r3, [pc, #440]	; (1c3d8 <__strftime+0x494>)
   1c220:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   1c224:	e7e7      	b.n	1c1f6 <__strftime+0x2b2>
   1c226:	4b6c      	ldr	r3, [pc, #432]	; (1c3d8 <__strftime+0x494>)
   1c228:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   1c22c:	e7e3      	b.n	1c1f6 <__strftime+0x2b2>
   1c22e:	4b6a      	ldr	r3, [pc, #424]	; (1c3d8 <__strftime+0x494>)
   1c230:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   1c234:	e7df      	b.n	1c1f6 <__strftime+0x2b2>
   1c236:	4969      	ldr	r1, [pc, #420]	; (1c3dc <__strftime+0x498>)
   1c238:	f8d6 b014 	ldr.w	fp, [r6, #20]
   1c23c:	458b      	cmp	fp, r1
   1c23e:	bfac      	ite	ge
   1c240:	2100      	movge	r1, #0
   1c242:	2101      	movlt	r1, #1
   1c244:	f1bb 0f00 	cmp.w	fp, #0
   1c248:	db10      	blt.n	1c26c <__strftime+0x328>
   1c24a:	2064      	movs	r0, #100	; 0x64
   1c24c:	fb9b f0f0 	sdiv	r0, fp, r0
   1c250:	3013      	adds	r0, #19
   1c252:	f1b9 0f00 	cmp.w	r9, #0
   1c256:	d013      	beq.n	1c280 <__strftime+0x33c>
   1c258:	2863      	cmp	r0, #99	; 0x63
   1c25a:	dd24      	ble.n	1c2a6 <__strftime+0x362>
   1c25c:	4a60      	ldr	r2, [pc, #384]	; (1c3e0 <__strftime+0x49c>)
   1c25e:	4b61      	ldr	r3, [pc, #388]	; (1c3e4 <__strftime+0x4a0>)
   1c260:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   1c264:	bf18      	it	ne
   1c266:	4613      	movne	r3, r2
   1c268:	4a5f      	ldr	r2, [pc, #380]	; (1c3e8 <__strftime+0x4a4>)
   1c26a:	e00b      	b.n	1c284 <__strftime+0x340>
   1c26c:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   1c270:	9105      	str	r1, [sp, #20]
   1c272:	f00a fbd8 	bl	26a26 <abs>
   1c276:	2364      	movs	r3, #100	; 0x64
   1c278:	9905      	ldr	r1, [sp, #20]
   1c27a:	fb90 f0f3 	sdiv	r0, r0, r3
   1c27e:	e7e8      	b.n	1c252 <__strftime+0x30e>
   1c280:	4b57      	ldr	r3, [pc, #348]	; (1c3e0 <__strftime+0x49c>)
   1c282:	4a5a      	ldr	r2, [pc, #360]	; (1c3ec <__strftime+0x4a8>)
   1c284:	9001      	str	r0, [sp, #4]
   1c286:	f1b8 0f02 	cmp.w	r8, #2
   1c28a:	bf2c      	ite	cs
   1c28c:	ebc1 0108 	rsbcs	r1, r1, r8
   1c290:	f1c1 0102 	rsbcc	r1, r1, #2
   1c294:	4851      	ldr	r0, [pc, #324]	; (1c3dc <__strftime+0x498>)
   1c296:	9100      	str	r1, [sp, #0]
   1c298:	4955      	ldr	r1, [pc, #340]	; (1c3f0 <__strftime+0x4ac>)
   1c29a:	4583      	cmp	fp, r0
   1c29c:	bfb8      	it	lt
   1c29e:	460b      	movlt	r3, r1
   1c2a0:	1b29      	subs	r1, r5, r4
   1c2a2:	1938      	adds	r0, r7, r4
   1c2a4:	e029      	b.n	1c2fa <__strftime+0x3b6>
   1c2a6:	4b4e      	ldr	r3, [pc, #312]	; (1c3e0 <__strftime+0x49c>)
   1c2a8:	e7de      	b.n	1c268 <__strftime+0x324>
   1c2aa:	4952      	ldr	r1, [pc, #328]	; (1c3f4 <__strftime+0x4b0>)
   1c2ac:	4a52      	ldr	r2, [pc, #328]	; (1c3f8 <__strftime+0x4b4>)
   1c2ae:	68f3      	ldr	r3, [r6, #12]
   1c2b0:	2864      	cmp	r0, #100	; 0x64
   1c2b2:	bf08      	it	eq
   1c2b4:	460a      	moveq	r2, r1
   1c2b6:	1b29      	subs	r1, r5, r4
   1c2b8:	1938      	adds	r0, r7, r4
   1c2ba:	f001 fb93 	bl	1d9e4 <sniprintf>
   1c2be:	2800      	cmp	r0, #0
   1c2c0:	f6ff ae72 	blt.w	1bfa8 <__strftime+0x64>
   1c2c4:	4404      	add	r4, r0
   1c2c6:	42a5      	cmp	r5, r4
   1c2c8:	f63f af40 	bhi.w	1c14c <__strftime+0x208>
   1c2cc:	e66c      	b.n	1bfa8 <__strftime+0x64>
   1c2ce:	6970      	ldr	r0, [r6, #20]
   1c2d0:	6933      	ldr	r3, [r6, #16]
   1c2d2:	2800      	cmp	r0, #0
   1c2d4:	f103 0b01 	add.w	fp, r3, #1
   1c2d8:	eb07 0804 	add.w	r8, r7, r4
   1c2dc:	68f3      	ldr	r3, [r6, #12]
   1c2de:	eba5 0904 	sub.w	r9, r5, r4
   1c2e2:	db0d      	blt.n	1c300 <__strftime+0x3bc>
   1c2e4:	2164      	movs	r1, #100	; 0x64
   1c2e6:	fb90 f2f1 	sdiv	r2, r0, r1
   1c2ea:	fb01 0212 	mls	r2, r1, r2, r0
   1c2ee:	e9cd 3200 	strd	r3, r2, [sp]
   1c2f2:	4a42      	ldr	r2, [pc, #264]	; (1c3fc <__strftime+0x4b8>)
   1c2f4:	465b      	mov	r3, fp
   1c2f6:	4649      	mov	r1, r9
   1c2f8:	4640      	mov	r0, r8
   1c2fa:	f001 fb73 	bl	1d9e4 <sniprintf>
   1c2fe:	e7de      	b.n	1c2be <__strftime+0x37a>
   1c300:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   1c304:	9305      	str	r3, [sp, #20]
   1c306:	f00a fb8e 	bl	26a26 <abs>
   1c30a:	2264      	movs	r2, #100	; 0x64
   1c30c:	9b05      	ldr	r3, [sp, #20]
   1c30e:	fb90 f1f2 	sdiv	r1, r0, r2
   1c312:	fb01 0212 	mls	r2, r1, r2, r0
   1c316:	e7ea      	b.n	1c2ee <__strftime+0x3aa>
   1c318:	2325      	movs	r3, #37	; 0x25
   1c31a:	f88d 3020 	strb.w	r3, [sp, #32]
   1c31e:	f1b9 0f00 	cmp.w	r9, #0
   1c322:	d013      	beq.n	1c34c <__strftime+0x408>
   1c324:	f1b8 0f06 	cmp.w	r8, #6
   1c328:	bf38      	it	cc
   1c32a:	f04f 0806 	movcc.w	r8, #6
   1c32e:	f1b8 0306 	subs.w	r3, r8, #6
   1c332:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
   1c336:	d10e      	bne.n	1c356 <__strftime+0x412>
   1c338:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   1c33c:	4930      	ldr	r1, [pc, #192]	; (1c400 <__strftime+0x4bc>)
   1c33e:	f00a fbaf 	bl	26aa0 <strcpy>
   1c342:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1c344:	9300      	str	r3, [sp, #0]
   1c346:	aa08      	add	r2, sp, #32
   1c348:	4633      	mov	r3, r6
   1c34a:	e75f      	b.n	1c20c <__strftime+0x2c8>
   1c34c:	f04f 092b 	mov.w	r9, #43	; 0x2b
   1c350:	f04f 080a 	mov.w	r8, #10
   1c354:	e7eb      	b.n	1c32e <__strftime+0x3ea>
   1c356:	4a2b      	ldr	r2, [pc, #172]	; (1c404 <__strftime+0x4c0>)
   1c358:	211e      	movs	r1, #30
   1c35a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   1c35e:	f001 fb41 	bl	1d9e4 <sniprintf>
   1c362:	2800      	cmp	r0, #0
   1c364:	dde8      	ble.n	1c338 <__strftime+0x3f4>
   1c366:	f10d 0322 	add.w	r3, sp, #34	; 0x22
   1c36a:	4418      	add	r0, r3
   1c36c:	e7e6      	b.n	1c33c <__strftime+0x3f8>
   1c36e:	4630      	mov	r0, r6
   1c370:	f7ff fd86 	bl	1be80 <iso_year_adjust>
   1c374:	4680      	mov	r8, r0
   1c376:	6970      	ldr	r0, [r6, #20]
   1c378:	2800      	cmp	r0, #0
   1c37a:	db11      	blt.n	1c3a0 <__strftime+0x45c>
   1c37c:	2264      	movs	r2, #100	; 0x64
   1c37e:	fb90 f3f2 	sdiv	r3, r0, r2
   1c382:	fb02 0313 	mls	r3, r2, r3, r0
   1c386:	4498      	add	r8, r3
   1c388:	2364      	movs	r3, #100	; 0x64
   1c38a:	fb98 f0f3 	sdiv	r0, r8, r3
   1c38e:	fb03 8810 	mls	r8, r3, r0, r8
   1c392:	4498      	add	r8, r3
   1c394:	fbb8 f2f3 	udiv	r2, r8, r3
   1c398:	fb03 8312 	mls	r3, r3, r2, r8
   1c39c:	4a15      	ldr	r2, [pc, #84]	; (1c3f4 <__strftime+0x4b0>)
   1c39e:	e78a      	b.n	1c2b6 <__strftime+0x372>
   1c3a0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   1c3a4:	f00a fb3f 	bl	26a26 <abs>
   1c3a8:	2364      	movs	r3, #100	; 0x64
   1c3aa:	f1b8 0f00 	cmp.w	r8, #0
   1c3ae:	fb90 f2f3 	sdiv	r2, r0, r3
   1c3b2:	fb02 0313 	mls	r3, r2, r3, r0
   1c3b6:	da06      	bge.n	1c3c6 <__strftime+0x482>
   1c3b8:	6971      	ldr	r1, [r6, #20]
   1c3ba:	4a13      	ldr	r2, [pc, #76]	; (1c408 <__strftime+0x4c4>)
   1c3bc:	4291      	cmp	r1, r2
   1c3be:	bfb8      	it	lt
   1c3c0:	f04f 0801 	movlt.w	r8, #1
   1c3c4:	e7df      	b.n	1c386 <__strftime+0x442>
   1c3c6:	d0de      	beq.n	1c386 <__strftime+0x442>
   1c3c8:	6971      	ldr	r1, [r6, #20]
   1c3ca:	4a04      	ldr	r2, [pc, #16]	; (1c3dc <__strftime+0x498>)
   1c3cc:	4291      	cmp	r1, r2
   1c3ce:	bfb8      	it	lt
   1c3d0:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   1c3d4:	e7d7      	b.n	1c386 <__strftime+0x442>
   1c3d6:	bf00      	nop
   1c3d8:	00028564 	.word	0x00028564
   1c3dc:	fffff894 	.word	0xfffff894
   1c3e0:	00028e22 	.word	0x00028e22
   1c3e4:	00028f4b 	.word	0x00028f4b
   1c3e8:	00028f43 	.word	0x00028f43
   1c3ec:	00028f3c 	.word	0x00028f3c
   1c3f0:	00029136 	.word	0x00029136
   1c3f4:	00028f5b 	.word	0x00028f5b
   1c3f8:	00028f4d 	.word	0x00028f4d
   1c3fc:	00028f51 	.word	0x00028f51
   1c400:	00028f64 	.word	0x00028f64
   1c404:	00028f60 	.word	0x00028f60
   1c408:	fffff895 	.word	0xfffff895
   1c40c:	4bb6      	ldr	r3, [pc, #728]	; (1c6e8 <__strftime+0x7a4>)
   1c40e:	6971      	ldr	r1, [r6, #20]
   1c410:	4299      	cmp	r1, r3
   1c412:	bfac      	ite	ge
   1c414:	2300      	movge	r3, #0
   1c416:	2301      	movlt	r3, #1
   1c418:	4630      	mov	r0, r6
   1c41a:	e9cd 3105 	strd	r3, r1, [sp, #20]
   1c41e:	f7ff fd2f 	bl	1be80 <iso_year_adjust>
   1c422:	9906      	ldr	r1, [sp, #24]
   1c424:	2900      	cmp	r1, #0
   1c426:	4683      	mov	fp, r0
   1c428:	db2a      	blt.n	1c480 <__strftime+0x53c>
   1c42a:	2264      	movs	r2, #100	; 0x64
   1c42c:	fb91 f2f2 	sdiv	r2, r1, r2
   1c430:	3213      	adds	r2, #19
   1c432:	6970      	ldr	r0, [r6, #20]
   1c434:	2800      	cmp	r0, #0
   1c436:	db2d      	blt.n	1c494 <__strftime+0x550>
   1c438:	f04f 0c64 	mov.w	ip, #100	; 0x64
   1c43c:	fb90 fefc 	sdiv	lr, r0, ip
   1c440:	fb0c 001e 	mls	r0, ip, lr, r0
   1c444:	f1bb 0f00 	cmp.w	fp, #0
   1c448:	da33      	bge.n	1c4b2 <__strftime+0x56e>
   1c44a:	6971      	ldr	r1, [r6, #20]
   1c44c:	4ba7      	ldr	r3, [pc, #668]	; (1c6ec <__strftime+0x7a8>)
   1c44e:	4299      	cmp	r1, r3
   1c450:	db3a      	blt.n	1c4c8 <__strftime+0x584>
   1c452:	eb0b 0300 	add.w	r3, fp, r0
   1c456:	1c59      	adds	r1, r3, #1
   1c458:	d13b      	bne.n	1c4d2 <__strftime+0x58e>
   1c45a:	3a01      	subs	r2, #1
   1c45c:	2363      	movs	r3, #99	; 0x63
   1c45e:	2064      	movs	r0, #100	; 0x64
   1c460:	fb00 3202 	mla	r2, r0, r2, r3
   1c464:	9b05      	ldr	r3, [sp, #20]
   1c466:	2b00      	cmp	r3, #0
   1c468:	d038      	beq.n	1c4dc <__strftime+0x598>
   1c46a:	232d      	movs	r3, #45	; 0x2d
   1c46c:	f88d 3020 	strb.w	r3, [sp, #32]
   1c470:	f1b8 0f00 	cmp.w	r8, #0
   1c474:	d001      	beq.n	1c47a <__strftime+0x536>
   1c476:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1c47a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   1c47e:	e038      	b.n	1c4f2 <__strftime+0x5ae>
   1c480:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   1c484:	9106      	str	r1, [sp, #24]
   1c486:	f00a face 	bl	26a26 <abs>
   1c48a:	2264      	movs	r2, #100	; 0x64
   1c48c:	9906      	ldr	r1, [sp, #24]
   1c48e:	fb90 f2f2 	sdiv	r2, r0, r2
   1c492:	e7ce      	b.n	1c432 <__strftime+0x4ee>
   1c494:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   1c498:	e9cd 1206 	strd	r1, r2, [sp, #24]
   1c49c:	f00a fac3 	bl	26a26 <abs>
   1c4a0:	f04f 0c64 	mov.w	ip, #100	; 0x64
   1c4a4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   1c4a8:	fb90 fefc 	sdiv	lr, r0, ip
   1c4ac:	fb0e 001c 	mls	r0, lr, ip, r0
   1c4b0:	e7c8      	b.n	1c444 <__strftime+0x500>
   1c4b2:	d0ce      	beq.n	1c452 <__strftime+0x50e>
   1c4b4:	4b8c      	ldr	r3, [pc, #560]	; (1c6e8 <__strftime+0x7a4>)
   1c4b6:	4299      	cmp	r1, r3
   1c4b8:	bfb4      	ite	lt
   1c4ba:	2301      	movlt	r3, #1
   1c4bc:	2300      	movge	r3, #0
   1c4be:	9305      	str	r3, [sp, #20]
   1c4c0:	bfb8      	it	lt
   1c4c2:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   1c4c6:	e7c4      	b.n	1c452 <__strftime+0x50e>
   1c4c8:	f04f 0b01 	mov.w	fp, #1
   1c4cc:	f8cd b014 	str.w	fp, [sp, #20]
   1c4d0:	e7bf      	b.n	1c452 <__strftime+0x50e>
   1c4d2:	2b64      	cmp	r3, #100	; 0x64
   1c4d4:	bf04      	itt	eq
   1c4d6:	3201      	addeq	r2, #1
   1c4d8:	2300      	moveq	r3, #0
   1c4da:	e7c0      	b.n	1c45e <__strftime+0x51a>
   1c4dc:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   1c4e0:	d106      	bne.n	1c4f0 <__strftime+0x5ac>
   1c4e2:	f242 730f 	movw	r3, #9999	; 0x270f
   1c4e6:	429a      	cmp	r2, r3
   1c4e8:	d902      	bls.n	1c4f0 <__strftime+0x5ac>
   1c4ea:	f88d 9020 	strb.w	r9, [sp, #32]
   1c4ee:	e7bf      	b.n	1c470 <__strftime+0x52c>
   1c4f0:	ab08      	add	r3, sp, #32
   1c4f2:	2125      	movs	r1, #37	; 0x25
   1c4f4:	7019      	strb	r1, [r3, #0]
   1c4f6:	f1b9 0f00 	cmp.w	r9, #0
   1c4fa:	d109      	bne.n	1c510 <__strftime+0x5cc>
   1c4fc:	1c58      	adds	r0, r3, #1
   1c4fe:	497c      	ldr	r1, [pc, #496]	; (1c6f0 <__strftime+0x7ac>)
   1c500:	9205      	str	r2, [sp, #20]
   1c502:	f00a facd 	bl	26aa0 <strcpy>
   1c506:	9a05      	ldr	r2, [sp, #20]
   1c508:	9200      	str	r2, [sp, #0]
   1c50a:	4643      	mov	r3, r8
   1c50c:	aa08      	add	r2, sp, #32
   1c50e:	e058      	b.n	1c5c2 <__strftime+0x67e>
   1c510:	2130      	movs	r1, #48	; 0x30
   1c512:	1c98      	adds	r0, r3, #2
   1c514:	7059      	strb	r1, [r3, #1]
   1c516:	e7f2      	b.n	1c4fe <__strftime+0x5ba>
   1c518:	4976      	ldr	r1, [pc, #472]	; (1c6f4 <__strftime+0x7b0>)
   1c51a:	4a77      	ldr	r2, [pc, #476]	; (1c6f8 <__strftime+0x7b4>)
   1c51c:	68b3      	ldr	r3, [r6, #8]
   1c51e:	286b      	cmp	r0, #107	; 0x6b
   1c520:	bf08      	it	eq
   1c522:	460a      	moveq	r2, r1
   1c524:	e6c7      	b.n	1c2b6 <__strftime+0x372>
   1c526:	68b3      	ldr	r3, [r6, #8]
   1c528:	b163      	cbz	r3, 1c544 <__strftime+0x600>
   1c52a:	2b0c      	cmp	r3, #12
   1c52c:	d004      	beq.n	1c538 <__strftime+0x5f4>
   1c52e:	210c      	movs	r1, #12
   1c530:	fb93 f2f1 	sdiv	r2, r3, r1
   1c534:	fb01 3312 	mls	r3, r1, r2, r3
   1c538:	496f      	ldr	r1, [pc, #444]	; (1c6f8 <__strftime+0x7b4>)
   1c53a:	4a6e      	ldr	r2, [pc, #440]	; (1c6f4 <__strftime+0x7b0>)
   1c53c:	2849      	cmp	r0, #73	; 0x49
   1c53e:	bf08      	it	eq
   1c540:	460a      	moveq	r2, r1
   1c542:	e6b8      	b.n	1c2b6 <__strftime+0x372>
   1c544:	230c      	movs	r3, #12
   1c546:	e7f7      	b.n	1c538 <__strftime+0x5f4>
   1c548:	69f3      	ldr	r3, [r6, #28]
   1c54a:	4a6c      	ldr	r2, [pc, #432]	; (1c6fc <__strftime+0x7b8>)
   1c54c:	3301      	adds	r3, #1
   1c54e:	e6b2      	b.n	1c2b6 <__strftime+0x372>
   1c550:	6933      	ldr	r3, [r6, #16]
   1c552:	3301      	adds	r3, #1
   1c554:	e722      	b.n	1c39c <__strftime+0x458>
   1c556:	6873      	ldr	r3, [r6, #4]
   1c558:	e720      	b.n	1c39c <__strftime+0x458>
   1c55a:	1e6b      	subs	r3, r5, #1
   1c55c:	42a3      	cmp	r3, r4
   1c55e:	f67f ad23 	bls.w	1bfa8 <__strftime+0x64>
   1c562:	230a      	movs	r3, #10
   1c564:	553b      	strb	r3, [r7, r4]
   1c566:	3401      	adds	r4, #1
   1c568:	e5f0      	b.n	1c14c <__strftime+0x208>
   1c56a:	68b3      	ldr	r3, [r6, #8]
   1c56c:	2b0b      	cmp	r3, #11
   1c56e:	bfcc      	ite	gt
   1c570:	22a4      	movgt	r2, #164	; 0xa4
   1c572:	22a0      	movle	r2, #160	; 0xa0
   1c574:	4b62      	ldr	r3, [pc, #392]	; (1c700 <__strftime+0x7bc>)
   1c576:	4413      	add	r3, r2
   1c578:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1c57c:	4640      	mov	r0, r8
   1c57e:	f7e3 ff85 	bl	48c <strlen>
   1c582:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   1c586:	4420      	add	r0, r4
   1c588:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   1c58c:	42a0      	cmp	r0, r4
   1c58e:	f43f addd 	beq.w	1c14c <__strftime+0x208>
   1c592:	45a4      	cmp	ip, r4
   1c594:	f67f ad08 	bls.w	1bfa8 <__strftime+0x64>
   1c598:	f89a 1000 	ldrb.w	r1, [sl]
   1c59c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1c5a0:	2950      	cmp	r1, #80	; 0x50
   1c5a2:	d107      	bne.n	1c5b4 <__strftime+0x670>
   1c5a4:	4957      	ldr	r1, [pc, #348]	; (1c704 <__strftime+0x7c0>)
   1c5a6:	5cc9      	ldrb	r1, [r1, r3]
   1c5a8:	f001 0103 	and.w	r1, r1, #3
   1c5ac:	2901      	cmp	r1, #1
   1c5ae:	bf08      	it	eq
   1c5b0:	3320      	addeq	r3, #32
   1c5b2:	b2db      	uxtb	r3, r3
   1c5b4:	553b      	strb	r3, [r7, r4]
   1c5b6:	3401      	adds	r4, #1
   1c5b8:	e7e8      	b.n	1c58c <__strftime+0x648>
   1c5ba:	6873      	ldr	r3, [r6, #4]
   1c5bc:	9300      	str	r3, [sp, #0]
   1c5be:	4a52      	ldr	r2, [pc, #328]	; (1c708 <__strftime+0x7c4>)
   1c5c0:	68b3      	ldr	r3, [r6, #8]
   1c5c2:	1b29      	subs	r1, r5, r4
   1c5c4:	1938      	adds	r0, r7, r4
   1c5c6:	f001 fa0d 	bl	1d9e4 <sniprintf>
   1c5ca:	e678      	b.n	1c2be <__strftime+0x37a>
   1c5cc:	6a33      	ldr	r3, [r6, #32]
   1c5ce:	2b00      	cmp	r3, #0
   1c5d0:	db77      	blt.n	1c6c2 <__strftime+0x77e>
   1c5d2:	9b04      	ldr	r3, [sp, #16]
   1c5d4:	b90b      	cbnz	r3, 1c5da <__strftime+0x696>
   1c5d6:	f00a fa94 	bl	26b02 <_tzset_unlocked>
   1c5da:	f000 fd15 	bl	1d008 <__gettzinfo>
   1c5de:	6a33      	ldr	r3, [r6, #32]
   1c5e0:	2b00      	cmp	r3, #0
   1c5e2:	bfcc      	ite	gt
   1c5e4:	2350      	movgt	r3, #80	; 0x50
   1c5e6:	2328      	movle	r3, #40	; 0x28
   1c5e8:	58c3      	ldr	r3, [r0, r3]
   1c5ea:	f1c3 0900 	rsb	r9, r3, #0
   1c5ee:	2301      	movs	r3, #1
   1c5f0:	9304      	str	r3, [sp, #16]
   1c5f2:	f8d6 c014 	ldr.w	ip, [r6, #20]
   1c5f6:	4662      	mov	r2, ip
   1c5f8:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
   1c5fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1c600:	9102      	str	r1, [sp, #8]
   1c602:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff
   1c606:	9103      	str	r1, [sp, #12]
   1c608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c60c:	2800      	cmp	r0, #0
   1c60e:	f171 0100 	sbcs.w	r1, r1, #0
   1c612:	eba5 0e04 	sub.w	lr, r5, r4
   1c616:	eb07 0804 	add.w	r8, r7, r4
   1c61a:	da05      	bge.n	1c628 <__strftime+0x6e4>
   1c61c:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
   1c620:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   1c624:	9102      	str	r1, [sp, #8]
   1c626:	9303      	str	r3, [sp, #12]
   1c628:	9b02      	ldr	r3, [sp, #8]
   1c62a:	0898      	lsrs	r0, r3, #2
   1c62c:	9b03      	ldr	r3, [sp, #12]
   1c62e:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
   1c632:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   1c636:	1099      	asrs	r1, r3, #2
   1c638:	2364      	movs	r3, #100	; 0x64
   1c63a:	fb92 f3f3 	sdiv	r3, r2, r3
   1c63e:	1ac0      	subs	r0, r0, r3
   1c640:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   1c644:	f20c 122b 	addw	r2, ip, #299	; 0x12b
   1c648:	f44f 73c8 	mov.w	r3, #400	; 0x190
   1c64c:	fb92 f3f3 	sdiv	r3, r2, r3
   1c650:	18c0      	adds	r0, r0, r3
   1c652:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1c656:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
   1c65a:	f240 136d 	movw	r3, #365	; 0x16d
   1c65e:	fb03 fc0c 	mul.w	ip, r3, ip
   1c662:	69f3      	ldr	r3, [r6, #28]
   1c664:	eb10 000c 	adds.w	r0, r0, ip
   1c668:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
   1c66c:	18c0      	adds	r0, r0, r3
   1c66e:	f04f 0c18 	mov.w	ip, #24
   1c672:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1c676:	fba0 230c 	umull	r2, r3, r0, ip
   1c67a:	fb0c 3301 	mla	r3, ip, r1, r3
   1c67e:	68b1      	ldr	r1, [r6, #8]
   1c680:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   1c684:	1852      	adds	r2, r2, r1
   1c686:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1c68a:	fba2 010c 	umull	r0, r1, r2, ip
   1c68e:	fb0c 1103 	mla	r1, ip, r3, r1
   1c692:	6873      	ldr	r3, [r6, #4]
   1c694:	18c0      	adds	r0, r0, r3
   1c696:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1c69a:	fba0 230c 	umull	r2, r3, r0, ip
   1c69e:	fb0c 3301 	mla	r3, ip, r1, r3
   1c6a2:	6831      	ldr	r1, [r6, #0]
   1c6a4:	1852      	adds	r2, r2, r1
   1c6a6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1c6aa:	ebb2 0209 	subs.w	r2, r2, r9
   1c6ae:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
   1c6b2:	e9cd 2300 	strd	r2, r3, [sp]
   1c6b6:	4671      	mov	r1, lr
   1c6b8:	4a14      	ldr	r2, [pc, #80]	; (1c70c <__strftime+0x7c8>)
   1c6ba:	4640      	mov	r0, r8
   1c6bc:	f001 f992 	bl	1d9e4 <sniprintf>
   1c6c0:	e5fd      	b.n	1c2be <__strftime+0x37a>
   1c6c2:	f04f 0900 	mov.w	r9, #0
   1c6c6:	e794      	b.n	1c5f2 <__strftime+0x6ae>
   1c6c8:	6833      	ldr	r3, [r6, #0]
   1c6ca:	e667      	b.n	1c39c <__strftime+0x458>
   1c6cc:	1e6b      	subs	r3, r5, #1
   1c6ce:	42a3      	cmp	r3, r4
   1c6d0:	f67f ac6a 	bls.w	1bfa8 <__strftime+0x64>
   1c6d4:	2309      	movs	r3, #9
   1c6d6:	e745      	b.n	1c564 <__strftime+0x620>
   1c6d8:	6833      	ldr	r3, [r6, #0]
   1c6da:	9301      	str	r3, [sp, #4]
   1c6dc:	6873      	ldr	r3, [r6, #4]
   1c6de:	9300      	str	r3, [sp, #0]
   1c6e0:	4a0b      	ldr	r2, [pc, #44]	; (1c710 <__strftime+0x7cc>)
   1c6e2:	68b3      	ldr	r3, [r6, #8]
   1c6e4:	e5dc      	b.n	1c2a0 <__strftime+0x35c>
   1c6e6:	bf00      	nop
   1c6e8:	fffff894 	.word	0xfffff894
   1c6ec:	fffff895 	.word	0xfffff895
   1c6f0:	00028f6c 	.word	0x00028f6c
   1c6f4:	00028f4d 	.word	0x00028f4d
   1c6f8:	00028f5b 	.word	0x00028f5b
   1c6fc:	00028f70 	.word	0x00028f70
   1c700:	00028564 	.word	0x00028564
   1c704:	00028e3c 	.word	0x00028e3c
   1c708:	00028f7f 	.word	0x00028f7f
   1c70c:	00028f75 	.word	0x00028f75
   1c710:	00028f7a 	.word	0x00028f7a
   1c714:	1e6b      	subs	r3, r5, #1
   1c716:	42a3      	cmp	r3, r4
   1c718:	f67f ac46 	bls.w	1bfa8 <__strftime+0x64>
   1c71c:	69b3      	ldr	r3, [r6, #24]
   1c71e:	193a      	adds	r2, r7, r4
   1c720:	3401      	adds	r4, #1
   1c722:	b913      	cbnz	r3, 1c72a <__strftime+0x7e6>
   1c724:	2337      	movs	r3, #55	; 0x37
   1c726:	7013      	strb	r3, [r2, #0]
   1c728:	e510      	b.n	1c14c <__strftime+0x208>
   1c72a:	3330      	adds	r3, #48	; 0x30
   1c72c:	e7fb      	b.n	1c726 <__strftime+0x7e2>
   1c72e:	69f3      	ldr	r3, [r6, #28]
   1c730:	69b2      	ldr	r2, [r6, #24]
   1c732:	3307      	adds	r3, #7
   1c734:	1a9b      	subs	r3, r3, r2
   1c736:	2207      	movs	r2, #7
   1c738:	fb93 f3f2 	sdiv	r3, r3, r2
   1c73c:	e62e      	b.n	1c39c <__strftime+0x458>
   1c73e:	4630      	mov	r0, r6
   1c740:	f7ff fb9e 	bl	1be80 <iso_year_adjust>
   1c744:	69b2      	ldr	r2, [r6, #24]
   1c746:	b132      	cbz	r2, 1c756 <__strftime+0x812>
   1c748:	3a01      	subs	r2, #1
   1c74a:	2800      	cmp	r0, #0
   1c74c:	dc28      	bgt.n	1c7a0 <__strftime+0x85c>
   1c74e:	69f3      	ldr	r3, [r6, #28]
   1c750:	d103      	bne.n	1c75a <__strftime+0x816>
   1c752:	330a      	adds	r3, #10
   1c754:	e7ee      	b.n	1c734 <__strftime+0x7f0>
   1c756:	2206      	movs	r2, #6
   1c758:	e7f7      	b.n	1c74a <__strftime+0x806>
   1c75a:	6970      	ldr	r0, [r6, #20]
   1c75c:	2800      	cmp	r0, #0
   1c75e:	eba2 0303 	sub.w	r3, r2, r3
   1c762:	f240 726b 	movw	r2, #1899	; 0x76b
   1c766:	bfa8      	it	ge
   1c768:	f06f 0264 	mvnge.w	r2, #100	; 0x64
   1c76c:	4410      	add	r0, r2
   1c76e:	0782      	lsls	r2, r0, #30
   1c770:	d105      	bne.n	1c77e <__strftime+0x83a>
   1c772:	2264      	movs	r2, #100	; 0x64
   1c774:	fb90 f1f2 	sdiv	r1, r0, r2
   1c778:	fb02 0111 	mls	r1, r2, r1, r0
   1c77c:	b971      	cbnz	r1, 1c79c <__strftime+0x858>
   1c77e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1c782:	fb90 f2f1 	sdiv	r2, r0, r1
   1c786:	fb01 0212 	mls	r2, r1, r2, r0
   1c78a:	fab2 f282 	clz	r2, r2
   1c78e:	0952      	lsrs	r2, r2, #5
   1c790:	1a9a      	subs	r2, r3, r2
   1c792:	2a05      	cmp	r2, #5
   1c794:	bfb4      	ite	lt
   1c796:	2335      	movlt	r3, #53	; 0x35
   1c798:	2334      	movge	r3, #52	; 0x34
   1c79a:	e5ff      	b.n	1c39c <__strftime+0x458>
   1c79c:	2201      	movs	r2, #1
   1c79e:	e7f7      	b.n	1c790 <__strftime+0x84c>
   1c7a0:	2301      	movs	r3, #1
   1c7a2:	e5fb      	b.n	1c39c <__strftime+0x458>
   1c7a4:	1e6b      	subs	r3, r5, #1
   1c7a6:	42a3      	cmp	r3, r4
   1c7a8:	f67f abfe 	bls.w	1bfa8 <__strftime+0x64>
   1c7ac:	69b3      	ldr	r3, [r6, #24]
   1c7ae:	3330      	adds	r3, #48	; 0x30
   1c7b0:	e6d8      	b.n	1c564 <__strftime+0x620>
   1c7b2:	69b3      	ldr	r3, [r6, #24]
   1c7b4:	b13b      	cbz	r3, 1c7c6 <__strftime+0x882>
   1c7b6:	3b01      	subs	r3, #1
   1c7b8:	69f2      	ldr	r2, [r6, #28]
   1c7ba:	3207      	adds	r2, #7
   1c7bc:	1ad2      	subs	r2, r2, r3
   1c7be:	2307      	movs	r3, #7
   1c7c0:	fb92 f3f3 	sdiv	r3, r2, r3
   1c7c4:	e5ea      	b.n	1c39c <__strftime+0x458>
   1c7c6:	2306      	movs	r3, #6
   1c7c8:	e7f6      	b.n	1c7b8 <__strftime+0x874>
   1c7ca:	6970      	ldr	r0, [r6, #20]
   1c7cc:	2800      	cmp	r0, #0
   1c7ce:	db05      	blt.n	1c7dc <__strftime+0x898>
   1c7d0:	2264      	movs	r2, #100	; 0x64
   1c7d2:	fb90 f3f2 	sdiv	r3, r0, r2
   1c7d6:	fb03 0312 	mls	r3, r3, r2, r0
   1c7da:	e5df      	b.n	1c39c <__strftime+0x458>
   1c7dc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   1c7e0:	f00a f921 	bl	26a26 <abs>
   1c7e4:	e7f4      	b.n	1c7d0 <__strftime+0x88c>
   1c7e6:	6973      	ldr	r3, [r6, #20]
   1c7e8:	4a47      	ldr	r2, [pc, #284]	; (1c908 <__strftime+0x9c4>)
   1c7ea:	4293      	cmp	r3, r2
   1c7ec:	da0c      	bge.n	1c808 <__strftime+0x8c4>
   1c7ee:	212d      	movs	r1, #45	; 0x2d
   1c7f0:	f88d 1020 	strb.w	r1, [sp, #32]
   1c7f4:	eba2 0b03 	sub.w	fp, r2, r3
   1c7f8:	f1b8 0f00 	cmp.w	r8, #0
   1c7fc:	d001      	beq.n	1c802 <__strftime+0x8be>
   1c7fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1c802:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   1c806:	e00c      	b.n	1c822 <__strftime+0x8de>
   1c808:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   1c80c:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   1c810:	d106      	bne.n	1c820 <__strftime+0x8dc>
   1c812:	f242 730f 	movw	r3, #9999	; 0x270f
   1c816:	459b      	cmp	fp, r3
   1c818:	d902      	bls.n	1c820 <__strftime+0x8dc>
   1c81a:	f88d 9020 	strb.w	r9, [sp, #32]
   1c81e:	e7eb      	b.n	1c7f8 <__strftime+0x8b4>
   1c820:	ab08      	add	r3, sp, #32
   1c822:	2225      	movs	r2, #37	; 0x25
   1c824:	701a      	strb	r2, [r3, #0]
   1c826:	f1b9 0f00 	cmp.w	r9, #0
   1c82a:	d106      	bne.n	1c83a <__strftime+0x8f6>
   1c82c:	1c58      	adds	r0, r3, #1
   1c82e:	4937      	ldr	r1, [pc, #220]	; (1c90c <__strftime+0x9c8>)
   1c830:	f00a f936 	bl	26aa0 <strcpy>
   1c834:	f8cd b000 	str.w	fp, [sp]
   1c838:	e667      	b.n	1c50a <__strftime+0x5c6>
   1c83a:	2230      	movs	r2, #48	; 0x30
   1c83c:	1c98      	adds	r0, r3, #2
   1c83e:	705a      	strb	r2, [r3, #1]
   1c840:	e7f5      	b.n	1c82e <__strftime+0x8ea>
   1c842:	6a33      	ldr	r3, [r6, #32]
   1c844:	2b00      	cmp	r3, #0
   1c846:	f6ff ac81 	blt.w	1c14c <__strftime+0x208>
   1c84a:	9b04      	ldr	r3, [sp, #16]
   1c84c:	b90b      	cbnz	r3, 1c852 <__strftime+0x90e>
   1c84e:	f00a f958 	bl	26b02 <_tzset_unlocked>
   1c852:	f000 fbd9 	bl	1d008 <__gettzinfo>
   1c856:	6a33      	ldr	r3, [r6, #32]
   1c858:	2b00      	cmp	r3, #0
   1c85a:	bfcc      	ite	gt
   1c85c:	2350      	movgt	r3, #80	; 0x50
   1c85e:	2328      	movle	r3, #40	; 0x28
   1c860:	eb07 0804 	add.w	r8, r7, r4
   1c864:	58c3      	ldr	r3, [r0, r3]
   1c866:	f1c3 0b00 	rsb	fp, r3, #0
   1c86a:	233c      	movs	r3, #60	; 0x3c
   1c86c:	fb9b f0f3 	sdiv	r0, fp, r3
   1c870:	f00a f964 	bl	26b3c <labs>
   1c874:	233c      	movs	r3, #60	; 0x3c
   1c876:	eba5 0904 	sub.w	r9, r5, r4
   1c87a:	fb90 f2f3 	sdiv	r2, r0, r3
   1c87e:	fb02 0013 	mls	r0, r2, r3, r0
   1c882:	9000      	str	r0, [sp, #0]
   1c884:	4a22      	ldr	r2, [pc, #136]	; (1c910 <__strftime+0x9cc>)
   1c886:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   1c88a:	4649      	mov	r1, r9
   1c88c:	4640      	mov	r0, r8
   1c88e:	fb9b f3f3 	sdiv	r3, fp, r3
   1c892:	f001 f8a7 	bl	1d9e4 <sniprintf>
   1c896:	2800      	cmp	r0, #0
   1c898:	f6ff ab86 	blt.w	1bfa8 <__strftime+0x64>
   1c89c:	4404      	add	r4, r0
   1c89e:	42a5      	cmp	r5, r4
   1c8a0:	f67f ab82 	bls.w	1bfa8 <__strftime+0x64>
   1c8a4:	2301      	movs	r3, #1
   1c8a6:	9304      	str	r3, [sp, #16]
   1c8a8:	e450      	b.n	1c14c <__strftime+0x208>
   1c8aa:	6a33      	ldr	r3, [r6, #32]
   1c8ac:	2b00      	cmp	r3, #0
   1c8ae:	f6ff ac4d 	blt.w	1c14c <__strftime+0x208>
   1c8b2:	9b04      	ldr	r3, [sp, #16]
   1c8b4:	b90b      	cbnz	r3, 1c8ba <__strftime+0x976>
   1c8b6:	f00a f924 	bl	26b02 <_tzset_unlocked>
   1c8ba:	6a33      	ldr	r3, [r6, #32]
   1c8bc:	4a15      	ldr	r2, [pc, #84]	; (1c914 <__strftime+0x9d0>)
   1c8be:	2b00      	cmp	r3, #0
   1c8c0:	bfd4      	ite	le
   1c8c2:	2300      	movle	r3, #0
   1c8c4:	2301      	movgt	r3, #1
   1c8c6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   1c8ca:	4640      	mov	r0, r8
   1c8cc:	f7e3 fdde 	bl	48c <strlen>
   1c8d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1c8d4:	4420      	add	r0, r4
   1c8d6:	1e6b      	subs	r3, r5, #1
   1c8d8:	42a0      	cmp	r0, r4
   1c8da:	d0e3      	beq.n	1c8a4 <__strftime+0x960>
   1c8dc:	42a3      	cmp	r3, r4
   1c8de:	f67f ab63 	bls.w	1bfa8 <__strftime+0x64>
   1c8e2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   1c8e6:	553a      	strb	r2, [r7, r4]
   1c8e8:	3401      	adds	r4, #1
   1c8ea:	e7f5      	b.n	1c8d8 <__strftime+0x994>
   1c8ec:	1e6b      	subs	r3, r5, #1
   1c8ee:	42a3      	cmp	r3, r4
   1c8f0:	f67f ab5a 	bls.w	1bfa8 <__strftime+0x64>
   1c8f4:	2325      	movs	r3, #37	; 0x25
   1c8f6:	e635      	b.n	1c564 <__strftime+0x620>
   1c8f8:	b10d      	cbz	r5, 1c8fe <__strftime+0x9ba>
   1c8fa:	2300      	movs	r3, #0
   1c8fc:	553b      	strb	r3, [r7, r4]
   1c8fe:	4620      	mov	r0, r4
   1c900:	b011      	add	sp, #68	; 0x44
   1c902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c906:	bf00      	nop
   1c908:	fffff894 	.word	0xfffff894
   1c90c:	00028f6c 	.word	0x00028f6c
   1c910:	00028f89 	.word	0x00028f89
   1c914:	20000994 	.word	0x20000994

0001c918 <strftime>:
   1c918:	b513      	push	{r0, r1, r4, lr}
   1c91a:	4c03      	ldr	r4, [pc, #12]	; (1c928 <strftime+0x10>)
   1c91c:	9400      	str	r4, [sp, #0]
   1c91e:	f7ff fb11 	bl	1bf44 <__strftime>
   1c922:	b002      	add	sp, #8
   1c924:	bd10      	pop	{r4, pc}
   1c926:	bf00      	nop
   1c928:	20000a00 	.word	0x20000a00

0001c92c <_strtol_l.isra.0>:
   1c92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c930:	4e3a      	ldr	r6, [pc, #232]	; (1ca1c <_strtol_l.isra.0+0xf0>)
   1c932:	4686      	mov	lr, r0
   1c934:	468c      	mov	ip, r1
   1c936:	4660      	mov	r0, ip
   1c938:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1c93c:	5da5      	ldrb	r5, [r4, r6]
   1c93e:	f015 0508 	ands.w	r5, r5, #8
   1c942:	d1f8      	bne.n	1c936 <_strtol_l.isra.0+0xa>
   1c944:	2c2d      	cmp	r4, #45	; 0x2d
   1c946:	d133      	bne.n	1c9b0 <_strtol_l.isra.0+0x84>
   1c948:	f89c 4000 	ldrb.w	r4, [ip]
   1c94c:	f04f 0801 	mov.w	r8, #1
   1c950:	f100 0c02 	add.w	ip, r0, #2
   1c954:	2b00      	cmp	r3, #0
   1c956:	d05c      	beq.n	1ca12 <_strtol_l.isra.0+0xe6>
   1c958:	2b10      	cmp	r3, #16
   1c95a:	d10c      	bne.n	1c976 <_strtol_l.isra.0+0x4a>
   1c95c:	2c30      	cmp	r4, #48	; 0x30
   1c95e:	d10a      	bne.n	1c976 <_strtol_l.isra.0+0x4a>
   1c960:	f89c 0000 	ldrb.w	r0, [ip]
   1c964:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1c968:	2858      	cmp	r0, #88	; 0x58
   1c96a:	d14d      	bne.n	1ca08 <_strtol_l.isra.0+0xdc>
   1c96c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1c970:	2310      	movs	r3, #16
   1c972:	f10c 0c02 	add.w	ip, ip, #2
   1c976:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   1c97a:	3f01      	subs	r7, #1
   1c97c:	2600      	movs	r6, #0
   1c97e:	fbb7 f9f3 	udiv	r9, r7, r3
   1c982:	4630      	mov	r0, r6
   1c984:	fb03 7a19 	mls	sl, r3, r9, r7
   1c988:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   1c98c:	2d09      	cmp	r5, #9
   1c98e:	d818      	bhi.n	1c9c2 <_strtol_l.isra.0+0x96>
   1c990:	462c      	mov	r4, r5
   1c992:	42a3      	cmp	r3, r4
   1c994:	dd24      	ble.n	1c9e0 <_strtol_l.isra.0+0xb4>
   1c996:	1c75      	adds	r5, r6, #1
   1c998:	d007      	beq.n	1c9aa <_strtol_l.isra.0+0x7e>
   1c99a:	4581      	cmp	r9, r0
   1c99c:	d31d      	bcc.n	1c9da <_strtol_l.isra.0+0xae>
   1c99e:	d101      	bne.n	1c9a4 <_strtol_l.isra.0+0x78>
   1c9a0:	45a2      	cmp	sl, r4
   1c9a2:	db1a      	blt.n	1c9da <_strtol_l.isra.0+0xae>
   1c9a4:	fb00 4003 	mla	r0, r0, r3, r4
   1c9a8:	2601      	movs	r6, #1
   1c9aa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1c9ae:	e7eb      	b.n	1c988 <_strtol_l.isra.0+0x5c>
   1c9b0:	2c2b      	cmp	r4, #43	; 0x2b
   1c9b2:	bf08      	it	eq
   1c9b4:	f89c 4000 	ldrbeq.w	r4, [ip]
   1c9b8:	46a8      	mov	r8, r5
   1c9ba:	bf08      	it	eq
   1c9bc:	f100 0c02 	addeq.w	ip, r0, #2
   1c9c0:	e7c8      	b.n	1c954 <_strtol_l.isra.0+0x28>
   1c9c2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   1c9c6:	2d19      	cmp	r5, #25
   1c9c8:	d801      	bhi.n	1c9ce <_strtol_l.isra.0+0xa2>
   1c9ca:	3c37      	subs	r4, #55	; 0x37
   1c9cc:	e7e1      	b.n	1c992 <_strtol_l.isra.0+0x66>
   1c9ce:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   1c9d2:	2d19      	cmp	r5, #25
   1c9d4:	d804      	bhi.n	1c9e0 <_strtol_l.isra.0+0xb4>
   1c9d6:	3c57      	subs	r4, #87	; 0x57
   1c9d8:	e7db      	b.n	1c992 <_strtol_l.isra.0+0x66>
   1c9da:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c9de:	e7e4      	b.n	1c9aa <_strtol_l.isra.0+0x7e>
   1c9e0:	1c73      	adds	r3, r6, #1
   1c9e2:	d106      	bne.n	1c9f2 <_strtol_l.isra.0+0xc6>
   1c9e4:	2322      	movs	r3, #34	; 0x22
   1c9e6:	f8ce 3000 	str.w	r3, [lr]
   1c9ea:	4638      	mov	r0, r7
   1c9ec:	b942      	cbnz	r2, 1ca00 <_strtol_l.isra.0+0xd4>
   1c9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c9f2:	f1b8 0f00 	cmp.w	r8, #0
   1c9f6:	d000      	beq.n	1c9fa <_strtol_l.isra.0+0xce>
   1c9f8:	4240      	negs	r0, r0
   1c9fa:	2a00      	cmp	r2, #0
   1c9fc:	d0f7      	beq.n	1c9ee <_strtol_l.isra.0+0xc2>
   1c9fe:	b10e      	cbz	r6, 1ca04 <_strtol_l.isra.0+0xd8>
   1ca00:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   1ca04:	6011      	str	r1, [r2, #0]
   1ca06:	e7f2      	b.n	1c9ee <_strtol_l.isra.0+0xc2>
   1ca08:	2430      	movs	r4, #48	; 0x30
   1ca0a:	2b00      	cmp	r3, #0
   1ca0c:	d1b3      	bne.n	1c976 <_strtol_l.isra.0+0x4a>
   1ca0e:	2308      	movs	r3, #8
   1ca10:	e7b1      	b.n	1c976 <_strtol_l.isra.0+0x4a>
   1ca12:	2c30      	cmp	r4, #48	; 0x30
   1ca14:	d0a4      	beq.n	1c960 <_strtol_l.isra.0+0x34>
   1ca16:	230a      	movs	r3, #10
   1ca18:	e7ad      	b.n	1c976 <_strtol_l.isra.0+0x4a>
   1ca1a:	bf00      	nop
   1ca1c:	00028e3c 	.word	0x00028e3c

0001ca20 <strtol>:
   1ca20:	4613      	mov	r3, r2
   1ca22:	460a      	mov	r2, r1
   1ca24:	4601      	mov	r1, r0
   1ca26:	4802      	ldr	r0, [pc, #8]	; (1ca30 <strtol+0x10>)
   1ca28:	6800      	ldr	r0, [r0, #0]
   1ca2a:	f7ff bf7f 	b.w	1c92c <_strtol_l.isra.0>
   1ca2e:	bf00      	nop
   1ca30:	2000099c 	.word	0x2000099c

0001ca34 <_strtoul_l.isra.0>:
   1ca34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ca38:	4e3b      	ldr	r6, [pc, #236]	; (1cb28 <_strtoul_l.isra.0+0xf4>)
   1ca3a:	4686      	mov	lr, r0
   1ca3c:	468c      	mov	ip, r1
   1ca3e:	4660      	mov	r0, ip
   1ca40:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1ca44:	5da5      	ldrb	r5, [r4, r6]
   1ca46:	f015 0508 	ands.w	r5, r5, #8
   1ca4a:	d1f8      	bne.n	1ca3e <_strtoul_l.isra.0+0xa>
   1ca4c:	2c2d      	cmp	r4, #45	; 0x2d
   1ca4e:	d134      	bne.n	1caba <_strtoul_l.isra.0+0x86>
   1ca50:	f89c 4000 	ldrb.w	r4, [ip]
   1ca54:	f04f 0801 	mov.w	r8, #1
   1ca58:	f100 0c02 	add.w	ip, r0, #2
   1ca5c:	2b00      	cmp	r3, #0
   1ca5e:	d05e      	beq.n	1cb1e <_strtoul_l.isra.0+0xea>
   1ca60:	2b10      	cmp	r3, #16
   1ca62:	d10c      	bne.n	1ca7e <_strtoul_l.isra.0+0x4a>
   1ca64:	2c30      	cmp	r4, #48	; 0x30
   1ca66:	d10a      	bne.n	1ca7e <_strtoul_l.isra.0+0x4a>
   1ca68:	f89c 0000 	ldrb.w	r0, [ip]
   1ca6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1ca70:	2858      	cmp	r0, #88	; 0x58
   1ca72:	d14f      	bne.n	1cb14 <_strtoul_l.isra.0+0xe0>
   1ca74:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1ca78:	2310      	movs	r3, #16
   1ca7a:	f10c 0c02 	add.w	ip, ip, #2
   1ca7e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1ca82:	2500      	movs	r5, #0
   1ca84:	fbb7 f7f3 	udiv	r7, r7, r3
   1ca88:	fb03 f907 	mul.w	r9, r3, r7
   1ca8c:	ea6f 0909 	mvn.w	r9, r9
   1ca90:	4628      	mov	r0, r5
   1ca92:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   1ca96:	2e09      	cmp	r6, #9
   1ca98:	d818      	bhi.n	1cacc <_strtoul_l.isra.0+0x98>
   1ca9a:	4634      	mov	r4, r6
   1ca9c:	42a3      	cmp	r3, r4
   1ca9e:	dd24      	ble.n	1caea <_strtoul_l.isra.0+0xb6>
   1caa0:	2d00      	cmp	r5, #0
   1caa2:	db1f      	blt.n	1cae4 <_strtoul_l.isra.0+0xb0>
   1caa4:	4287      	cmp	r7, r0
   1caa6:	d31d      	bcc.n	1cae4 <_strtoul_l.isra.0+0xb0>
   1caa8:	d101      	bne.n	1caae <_strtoul_l.isra.0+0x7a>
   1caaa:	45a1      	cmp	r9, r4
   1caac:	db1a      	blt.n	1cae4 <_strtoul_l.isra.0+0xb0>
   1caae:	fb00 4003 	mla	r0, r0, r3, r4
   1cab2:	2501      	movs	r5, #1
   1cab4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1cab8:	e7eb      	b.n	1ca92 <_strtoul_l.isra.0+0x5e>
   1caba:	2c2b      	cmp	r4, #43	; 0x2b
   1cabc:	bf08      	it	eq
   1cabe:	f89c 4000 	ldrbeq.w	r4, [ip]
   1cac2:	46a8      	mov	r8, r5
   1cac4:	bf08      	it	eq
   1cac6:	f100 0c02 	addeq.w	ip, r0, #2
   1caca:	e7c7      	b.n	1ca5c <_strtoul_l.isra.0+0x28>
   1cacc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   1cad0:	2e19      	cmp	r6, #25
   1cad2:	d801      	bhi.n	1cad8 <_strtoul_l.isra.0+0xa4>
   1cad4:	3c37      	subs	r4, #55	; 0x37
   1cad6:	e7e1      	b.n	1ca9c <_strtoul_l.isra.0+0x68>
   1cad8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   1cadc:	2e19      	cmp	r6, #25
   1cade:	d804      	bhi.n	1caea <_strtoul_l.isra.0+0xb6>
   1cae0:	3c57      	subs	r4, #87	; 0x57
   1cae2:	e7db      	b.n	1ca9c <_strtoul_l.isra.0+0x68>
   1cae4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1cae8:	e7e4      	b.n	1cab4 <_strtoul_l.isra.0+0x80>
   1caea:	2d00      	cmp	r5, #0
   1caec:	da07      	bge.n	1cafe <_strtoul_l.isra.0+0xca>
   1caee:	2322      	movs	r3, #34	; 0x22
   1caf0:	f8ce 3000 	str.w	r3, [lr]
   1caf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1caf8:	b942      	cbnz	r2, 1cb0c <_strtoul_l.isra.0+0xd8>
   1cafa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cafe:	f1b8 0f00 	cmp.w	r8, #0
   1cb02:	d000      	beq.n	1cb06 <_strtoul_l.isra.0+0xd2>
   1cb04:	4240      	negs	r0, r0
   1cb06:	2a00      	cmp	r2, #0
   1cb08:	d0f7      	beq.n	1cafa <_strtoul_l.isra.0+0xc6>
   1cb0a:	b10d      	cbz	r5, 1cb10 <_strtoul_l.isra.0+0xdc>
   1cb0c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   1cb10:	6011      	str	r1, [r2, #0]
   1cb12:	e7f2      	b.n	1cafa <_strtoul_l.isra.0+0xc6>
   1cb14:	2430      	movs	r4, #48	; 0x30
   1cb16:	2b00      	cmp	r3, #0
   1cb18:	d1b1      	bne.n	1ca7e <_strtoul_l.isra.0+0x4a>
   1cb1a:	2308      	movs	r3, #8
   1cb1c:	e7af      	b.n	1ca7e <_strtoul_l.isra.0+0x4a>
   1cb1e:	2c30      	cmp	r4, #48	; 0x30
   1cb20:	d0a2      	beq.n	1ca68 <_strtoul_l.isra.0+0x34>
   1cb22:	230a      	movs	r3, #10
   1cb24:	e7ab      	b.n	1ca7e <_strtoul_l.isra.0+0x4a>
   1cb26:	bf00      	nop
   1cb28:	00028e3c 	.word	0x00028e3c

0001cb2c <strtoul>:
   1cb2c:	4613      	mov	r3, r2
   1cb2e:	460a      	mov	r2, r1
   1cb30:	4601      	mov	r1, r0
   1cb32:	4802      	ldr	r0, [pc, #8]	; (1cb3c <strtoul+0x10>)
   1cb34:	6800      	ldr	r0, [r0, #0]
   1cb36:	f7ff bf7d 	b.w	1ca34 <_strtoul_l.isra.0>
   1cb3a:	bf00      	nop
   1cb3c:	2000099c 	.word	0x2000099c

0001cb40 <__tzcalc_limits>:
   1cb40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb44:	4680      	mov	r8, r0
   1cb46:	f000 fa5f 	bl	1d008 <__gettzinfo>
   1cb4a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   1cb4e:	4598      	cmp	r8, r3
   1cb50:	f340 8098 	ble.w	1cc84 <__tzcalc_limits+0x144>
   1cb54:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   1cb58:	4443      	add	r3, r8
   1cb5a:	109b      	asrs	r3, r3, #2
   1cb5c:	f240 126d 	movw	r2, #365	; 0x16d
   1cb60:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   1cb64:	fb02 3505 	mla	r5, r2, r5, r3
   1cb68:	f06f 0263 	mvn.w	r2, #99	; 0x63
   1cb6c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   1cb70:	fb93 f3f2 	sdiv	r3, r3, r2
   1cb74:	441d      	add	r5, r3
   1cb76:	f44f 73c8 	mov.w	r3, #400	; 0x190
   1cb7a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   1cb7e:	fb98 f7f3 	sdiv	r7, r8, r3
   1cb82:	fb03 8717 	mls	r7, r3, r7, r8
   1cb86:	4442      	add	r2, r8
   1cb88:	fab7 fc87 	clz	ip, r7
   1cb8c:	fbb2 f2f3 	udiv	r2, r2, r3
   1cb90:	f008 0303 	and.w	r3, r8, #3
   1cb94:	4415      	add	r5, r2
   1cb96:	2264      	movs	r2, #100	; 0x64
   1cb98:	f8c0 8004 	str.w	r8, [r0, #4]
   1cb9c:	fb98 f6f2 	sdiv	r6, r8, r2
   1cba0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   1cba4:	fb02 8616 	mls	r6, r2, r6, r8
   1cba8:	4604      	mov	r4, r0
   1cbaa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   1cbae:	9300      	str	r3, [sp, #0]
   1cbb0:	f04f 0e07 	mov.w	lr, #7
   1cbb4:	7a22      	ldrb	r2, [r4, #8]
   1cbb6:	6963      	ldr	r3, [r4, #20]
   1cbb8:	2a4a      	cmp	r2, #74	; 0x4a
   1cbba:	d128      	bne.n	1cc0e <__tzcalc_limits+0xce>
   1cbbc:	9900      	ldr	r1, [sp, #0]
   1cbbe:	18ea      	adds	r2, r5, r3
   1cbc0:	b901      	cbnz	r1, 1cbc4 <__tzcalc_limits+0x84>
   1cbc2:	b906      	cbnz	r6, 1cbc6 <__tzcalc_limits+0x86>
   1cbc4:	bb0f      	cbnz	r7, 1cc0a <__tzcalc_limits+0xca>
   1cbc6:	2b3b      	cmp	r3, #59	; 0x3b
   1cbc8:	bfd4      	ite	le
   1cbca:	2300      	movle	r3, #0
   1cbcc:	2301      	movgt	r3, #1
   1cbce:	4413      	add	r3, r2
   1cbd0:	1e5a      	subs	r2, r3, #1
   1cbd2:	69a3      	ldr	r3, [r4, #24]
   1cbd4:	492c      	ldr	r1, [pc, #176]	; (1cc88 <__tzcalc_limits+0x148>)
   1cbd6:	fb01 3202 	mla	r2, r1, r2, r3
   1cbda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cbdc:	4413      	add	r3, r2
   1cbde:	461a      	mov	r2, r3
   1cbe0:	17db      	asrs	r3, r3, #31
   1cbe2:	e9c4 2308 	strd	r2, r3, [r4, #32]
   1cbe6:	3428      	adds	r4, #40	; 0x28
   1cbe8:	45a3      	cmp	fp, r4
   1cbea:	d1e3      	bne.n	1cbb4 <__tzcalc_limits+0x74>
   1cbec:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   1cbf0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   1cbf4:	4294      	cmp	r4, r2
   1cbf6:	eb75 0303 	sbcs.w	r3, r5, r3
   1cbfa:	bfb4      	ite	lt
   1cbfc:	2301      	movlt	r3, #1
   1cbfe:	2300      	movge	r3, #0
   1cc00:	6003      	str	r3, [r0, #0]
   1cc02:	2001      	movs	r0, #1
   1cc04:	b003      	add	sp, #12
   1cc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc0a:	2300      	movs	r3, #0
   1cc0c:	e7df      	b.n	1cbce <__tzcalc_limits+0x8e>
   1cc0e:	2a44      	cmp	r2, #68	; 0x44
   1cc10:	d101      	bne.n	1cc16 <__tzcalc_limits+0xd6>
   1cc12:	18ea      	adds	r2, r5, r3
   1cc14:	e7dd      	b.n	1cbd2 <__tzcalc_limits+0x92>
   1cc16:	9a00      	ldr	r2, [sp, #0]
   1cc18:	bb72      	cbnz	r2, 1cc78 <__tzcalc_limits+0x138>
   1cc1a:	2e00      	cmp	r6, #0
   1cc1c:	bf0c      	ite	eq
   1cc1e:	46e0      	moveq	r8, ip
   1cc20:	f04f 0801 	movne.w	r8, #1
   1cc24:	4919      	ldr	r1, [pc, #100]	; (1cc8c <__tzcalc_limits+0x14c>)
   1cc26:	68e2      	ldr	r2, [r4, #12]
   1cc28:	9201      	str	r2, [sp, #4]
   1cc2a:	f04f 0a30 	mov.w	sl, #48	; 0x30
   1cc2e:	fb0a 1808 	mla	r8, sl, r8, r1
   1cc32:	462a      	mov	r2, r5
   1cc34:	f04f 0900 	mov.w	r9, #0
   1cc38:	f1a8 0804 	sub.w	r8, r8, #4
   1cc3c:	9901      	ldr	r1, [sp, #4]
   1cc3e:	f109 0901 	add.w	r9, r9, #1
   1cc42:	4549      	cmp	r1, r9
   1cc44:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   1cc48:	dc18      	bgt.n	1cc7c <__tzcalc_limits+0x13c>
   1cc4a:	f102 0804 	add.w	r8, r2, #4
   1cc4e:	fb98 f9fe 	sdiv	r9, r8, lr
   1cc52:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   1cc56:	eba8 0909 	sub.w	r9, r8, r9
   1cc5a:	ebb3 0909 	subs.w	r9, r3, r9
   1cc5e:	6923      	ldr	r3, [r4, #16]
   1cc60:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1cc64:	bf48      	it	mi
   1cc66:	f109 0907 	addmi.w	r9, r9, #7
   1cc6a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1cc6e:	444b      	add	r3, r9
   1cc70:	4553      	cmp	r3, sl
   1cc72:	da05      	bge.n	1cc80 <__tzcalc_limits+0x140>
   1cc74:	441a      	add	r2, r3
   1cc76:	e7ac      	b.n	1cbd2 <__tzcalc_limits+0x92>
   1cc78:	46e0      	mov	r8, ip
   1cc7a:	e7d3      	b.n	1cc24 <__tzcalc_limits+0xe4>
   1cc7c:	4452      	add	r2, sl
   1cc7e:	e7dd      	b.n	1cc3c <__tzcalc_limits+0xfc>
   1cc80:	3b07      	subs	r3, #7
   1cc82:	e7f5      	b.n	1cc70 <__tzcalc_limits+0x130>
   1cc84:	2000      	movs	r0, #0
   1cc86:	e7bd      	b.n	1cc04 <__tzcalc_limits+0xc4>
   1cc88:	00015180 	.word	0x00015180
   1cc8c:	00028660 	.word	0x00028660

0001cc90 <tzset>:
   1cc90:	4b01      	ldr	r3, [pc, #4]	; (1cc98 <tzset+0x8>)
   1cc92:	6818      	ldr	r0, [r3, #0]
   1cc94:	f000 b802 	b.w	1cc9c <_tzset_unlocked_r>
   1cc98:	2000099c 	.word	0x2000099c

0001cc9c <_tzset_unlocked_r>:
   1cc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cca0:	b08d      	sub	sp, #52	; 0x34
   1cca2:	4607      	mov	r7, r0
   1cca4:	f000 f9b0 	bl	1d008 <__gettzinfo>
   1cca8:	49ae      	ldr	r1, [pc, #696]	; (1cf64 <_tzset_unlocked_r+0x2c8>)
   1ccaa:	4eaf      	ldr	r6, [pc, #700]	; (1cf68 <_tzset_unlocked_r+0x2cc>)
   1ccac:	4605      	mov	r5, r0
   1ccae:	4638      	mov	r0, r7
   1ccb0:	f009 ff3d 	bl	26b2e <_getenv_r>
   1ccb4:	4604      	mov	r4, r0
   1ccb6:	b970      	cbnz	r0, 1ccd6 <_tzset_unlocked_r+0x3a>
   1ccb8:	4bac      	ldr	r3, [pc, #688]	; (1cf6c <_tzset_unlocked_r+0x2d0>)
   1ccba:	4aad      	ldr	r2, [pc, #692]	; (1cf70 <_tzset_unlocked_r+0x2d4>)
   1ccbc:	6018      	str	r0, [r3, #0]
   1ccbe:	4bad      	ldr	r3, [pc, #692]	; (1cf74 <_tzset_unlocked_r+0x2d8>)
   1ccc0:	6018      	str	r0, [r3, #0]
   1ccc2:	4bad      	ldr	r3, [pc, #692]	; (1cf78 <_tzset_unlocked_r+0x2dc>)
   1ccc4:	6830      	ldr	r0, [r6, #0]
   1ccc6:	e9c3 2200 	strd	r2, r2, [r3]
   1ccca:	f7fe fd75 	bl	1b7b8 <free>
   1ccce:	6034      	str	r4, [r6, #0]
   1ccd0:	b00d      	add	sp, #52	; 0x34
   1ccd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ccd6:	6831      	ldr	r1, [r6, #0]
   1ccd8:	2900      	cmp	r1, #0
   1ccda:	d15f      	bne.n	1cd9c <_tzset_unlocked_r+0x100>
   1ccdc:	6830      	ldr	r0, [r6, #0]
   1ccde:	f7fe fd6b 	bl	1b7b8 <free>
   1cce2:	4620      	mov	r0, r4
   1cce4:	f7e3 fbd2 	bl	48c <strlen>
   1cce8:	1c41      	adds	r1, r0, #1
   1ccea:	4638      	mov	r0, r7
   1ccec:	f7ff f834 	bl	1bd58 <_malloc_r>
   1ccf0:	6030      	str	r0, [r6, #0]
   1ccf2:	2800      	cmp	r0, #0
   1ccf4:	d157      	bne.n	1cda6 <_tzset_unlocked_r+0x10a>
   1ccf6:	7823      	ldrb	r3, [r4, #0]
   1ccf8:	4aa0      	ldr	r2, [pc, #640]	; (1cf7c <_tzset_unlocked_r+0x2e0>)
   1ccfa:	49a1      	ldr	r1, [pc, #644]	; (1cf80 <_tzset_unlocked_r+0x2e4>)
   1ccfc:	2b3a      	cmp	r3, #58	; 0x3a
   1ccfe:	bf08      	it	eq
   1cd00:	3401      	addeq	r4, #1
   1cd02:	ae0a      	add	r6, sp, #40	; 0x28
   1cd04:	4633      	mov	r3, r6
   1cd06:	4620      	mov	r0, r4
   1cd08:	f7ff f890 	bl	1be2c <siscanf>
   1cd0c:	2800      	cmp	r0, #0
   1cd0e:	dddf      	ble.n	1ccd0 <_tzset_unlocked_r+0x34>
   1cd10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cd12:	18e7      	adds	r7, r4, r3
   1cd14:	5ce3      	ldrb	r3, [r4, r3]
   1cd16:	2b2d      	cmp	r3, #45	; 0x2d
   1cd18:	d149      	bne.n	1cdae <_tzset_unlocked_r+0x112>
   1cd1a:	3701      	adds	r7, #1
   1cd1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1cd20:	f10d 0a20 	add.w	sl, sp, #32
   1cd24:	f10d 0b1e 	add.w	fp, sp, #30
   1cd28:	f04f 0800 	mov.w	r8, #0
   1cd2c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   1cd30:	4994      	ldr	r1, [pc, #592]	; (1cf84 <_tzset_unlocked_r+0x2e8>)
   1cd32:	9603      	str	r6, [sp, #12]
   1cd34:	f8cd b000 	str.w	fp, [sp]
   1cd38:	4633      	mov	r3, r6
   1cd3a:	aa07      	add	r2, sp, #28
   1cd3c:	4638      	mov	r0, r7
   1cd3e:	f8ad 801e 	strh.w	r8, [sp, #30]
   1cd42:	f8ad 8020 	strh.w	r8, [sp, #32]
   1cd46:	f7ff f871 	bl	1be2c <siscanf>
   1cd4a:	4540      	cmp	r0, r8
   1cd4c:	ddc0      	ble.n	1ccd0 <_tzset_unlocked_r+0x34>
   1cd4e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1cd52:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1cd56:	f8df 9238 	ldr.w	r9, [pc, #568]	; 1cf90 <_tzset_unlocked_r+0x2f4>
   1cd5a:	213c      	movs	r1, #60	; 0x3c
   1cd5c:	fb01 2203 	mla	r2, r1, r3, r2
   1cd60:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1cd64:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1cd68:	fb01 2303 	mla	r3, r1, r3, r2
   1cd6c:	435c      	muls	r4, r3
   1cd6e:	62ac      	str	r4, [r5, #40]	; 0x28
   1cd70:	4c81      	ldr	r4, [pc, #516]	; (1cf78 <_tzset_unlocked_r+0x2dc>)
   1cd72:	4b82      	ldr	r3, [pc, #520]	; (1cf7c <_tzset_unlocked_r+0x2e0>)
   1cd74:	6023      	str	r3, [r4, #0]
   1cd76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cd78:	4981      	ldr	r1, [pc, #516]	; (1cf80 <_tzset_unlocked_r+0x2e4>)
   1cd7a:	441f      	add	r7, r3
   1cd7c:	464a      	mov	r2, r9
   1cd7e:	4633      	mov	r3, r6
   1cd80:	4638      	mov	r0, r7
   1cd82:	f7ff f853 	bl	1be2c <siscanf>
   1cd86:	4540      	cmp	r0, r8
   1cd88:	dc16      	bgt.n	1cdb8 <_tzset_unlocked_r+0x11c>
   1cd8a:	6823      	ldr	r3, [r4, #0]
   1cd8c:	6063      	str	r3, [r4, #4]
   1cd8e:	4b77      	ldr	r3, [pc, #476]	; (1cf6c <_tzset_unlocked_r+0x2d0>)
   1cd90:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1cd92:	601a      	str	r2, [r3, #0]
   1cd94:	4b77      	ldr	r3, [pc, #476]	; (1cf74 <_tzset_unlocked_r+0x2d8>)
   1cd96:	f8c3 8000 	str.w	r8, [r3]
   1cd9a:	e799      	b.n	1ccd0 <_tzset_unlocked_r+0x34>
   1cd9c:	f7e3 fb6c 	bl	478 <strcmp>
   1cda0:	2800      	cmp	r0, #0
   1cda2:	d19b      	bne.n	1ccdc <_tzset_unlocked_r+0x40>
   1cda4:	e794      	b.n	1ccd0 <_tzset_unlocked_r+0x34>
   1cda6:	4621      	mov	r1, r4
   1cda8:	f009 fe7a 	bl	26aa0 <strcpy>
   1cdac:	e7a3      	b.n	1ccf6 <_tzset_unlocked_r+0x5a>
   1cdae:	2b2b      	cmp	r3, #43	; 0x2b
   1cdb0:	bf08      	it	eq
   1cdb2:	3701      	addeq	r7, #1
   1cdb4:	2401      	movs	r4, #1
   1cdb6:	e7b3      	b.n	1cd20 <_tzset_unlocked_r+0x84>
   1cdb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cdba:	f8c4 9004 	str.w	r9, [r4, #4]
   1cdbe:	18fc      	adds	r4, r7, r3
   1cdc0:	5cfb      	ldrb	r3, [r7, r3]
   1cdc2:	2b2d      	cmp	r3, #45	; 0x2d
   1cdc4:	f040 808b 	bne.w	1cede <_tzset_unlocked_r+0x242>
   1cdc8:	3401      	adds	r4, #1
   1cdca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1cdce:	2300      	movs	r3, #0
   1cdd0:	f8ad 301c 	strh.w	r3, [sp, #28]
   1cdd4:	f8ad 301e 	strh.w	r3, [sp, #30]
   1cdd8:	f8ad 3020 	strh.w	r3, [sp, #32]
   1cddc:	930a      	str	r3, [sp, #40]	; 0x28
   1cdde:	e9cd a602 	strd	sl, r6, [sp, #8]
   1cde2:	e9cd b600 	strd	fp, r6, [sp]
   1cde6:	4967      	ldr	r1, [pc, #412]	; (1cf84 <_tzset_unlocked_r+0x2e8>)
   1cde8:	4633      	mov	r3, r6
   1cdea:	aa07      	add	r2, sp, #28
   1cdec:	4620      	mov	r0, r4
   1cdee:	f7ff f81d 	bl	1be2c <siscanf>
   1cdf2:	2800      	cmp	r0, #0
   1cdf4:	dc78      	bgt.n	1cee8 <_tzset_unlocked_r+0x24c>
   1cdf6:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   1cdf8:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   1cdfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cdfe:	652f      	str	r7, [r5, #80]	; 0x50
   1ce00:	441c      	add	r4, r3
   1ce02:	462f      	mov	r7, r5
   1ce04:	f04f 0900 	mov.w	r9, #0
   1ce08:	7823      	ldrb	r3, [r4, #0]
   1ce0a:	2b2c      	cmp	r3, #44	; 0x2c
   1ce0c:	bf08      	it	eq
   1ce0e:	3401      	addeq	r4, #1
   1ce10:	f894 8000 	ldrb.w	r8, [r4]
   1ce14:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   1ce18:	d178      	bne.n	1cf0c <_tzset_unlocked_r+0x270>
   1ce1a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1ce1e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1ce22:	ab09      	add	r3, sp, #36	; 0x24
   1ce24:	9300      	str	r3, [sp, #0]
   1ce26:	4958      	ldr	r1, [pc, #352]	; (1cf88 <_tzset_unlocked_r+0x2ec>)
   1ce28:	9603      	str	r6, [sp, #12]
   1ce2a:	4633      	mov	r3, r6
   1ce2c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   1ce30:	4620      	mov	r0, r4
   1ce32:	f7fe fffb 	bl	1be2c <siscanf>
   1ce36:	2803      	cmp	r0, #3
   1ce38:	f47f af4a 	bne.w	1ccd0 <_tzset_unlocked_r+0x34>
   1ce3c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   1ce40:	1e4b      	subs	r3, r1, #1
   1ce42:	2b0b      	cmp	r3, #11
   1ce44:	f63f af44 	bhi.w	1ccd0 <_tzset_unlocked_r+0x34>
   1ce48:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1ce4c:	1e53      	subs	r3, r2, #1
   1ce4e:	2b04      	cmp	r3, #4
   1ce50:	f63f af3e 	bhi.w	1ccd0 <_tzset_unlocked_r+0x34>
   1ce54:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1ce58:	2b06      	cmp	r3, #6
   1ce5a:	f63f af39 	bhi.w	1ccd0 <_tzset_unlocked_r+0x34>
   1ce5e:	e9c7 1203 	strd	r1, r2, [r7, #12]
   1ce62:	f887 8008 	strb.w	r8, [r7, #8]
   1ce66:	617b      	str	r3, [r7, #20]
   1ce68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ce6a:	eb04 0803 	add.w	r8, r4, r3
   1ce6e:	2302      	movs	r3, #2
   1ce70:	f8ad 301c 	strh.w	r3, [sp, #28]
   1ce74:	2300      	movs	r3, #0
   1ce76:	f8ad 301e 	strh.w	r3, [sp, #30]
   1ce7a:	f8ad 3020 	strh.w	r3, [sp, #32]
   1ce7e:	930a      	str	r3, [sp, #40]	; 0x28
   1ce80:	f898 3000 	ldrb.w	r3, [r8]
   1ce84:	2b2f      	cmp	r3, #47	; 0x2f
   1ce86:	d109      	bne.n	1ce9c <_tzset_unlocked_r+0x200>
   1ce88:	e9cd a602 	strd	sl, r6, [sp, #8]
   1ce8c:	e9cd b600 	strd	fp, r6, [sp]
   1ce90:	493e      	ldr	r1, [pc, #248]	; (1cf8c <_tzset_unlocked_r+0x2f0>)
   1ce92:	4633      	mov	r3, r6
   1ce94:	aa07      	add	r2, sp, #28
   1ce96:	4640      	mov	r0, r8
   1ce98:	f7fe ffc8 	bl	1be2c <siscanf>
   1ce9c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1cea0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1cea4:	213c      	movs	r1, #60	; 0x3c
   1cea6:	fb01 2203 	mla	r2, r1, r3, r2
   1ceaa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1ceae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1ceb2:	fb01 2303 	mla	r3, r1, r3, r2
   1ceb6:	61bb      	str	r3, [r7, #24]
   1ceb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1ceba:	3728      	adds	r7, #40	; 0x28
   1cebc:	4444      	add	r4, r8
   1cebe:	f1b9 0f00 	cmp.w	r9, #0
   1cec2:	d020      	beq.n	1cf06 <_tzset_unlocked_r+0x26a>
   1cec4:	6868      	ldr	r0, [r5, #4]
   1cec6:	f7ff fe3b 	bl	1cb40 <__tzcalc_limits>
   1ceca:	4b28      	ldr	r3, [pc, #160]	; (1cf6c <_tzset_unlocked_r+0x2d0>)
   1cecc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1cece:	601a      	str	r2, [r3, #0]
   1ced0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1ced2:	1a9b      	subs	r3, r3, r2
   1ced4:	4a27      	ldr	r2, [pc, #156]	; (1cf74 <_tzset_unlocked_r+0x2d8>)
   1ced6:	bf18      	it	ne
   1ced8:	2301      	movne	r3, #1
   1ceda:	6013      	str	r3, [r2, #0]
   1cedc:	e6f8      	b.n	1ccd0 <_tzset_unlocked_r+0x34>
   1cede:	2b2b      	cmp	r3, #43	; 0x2b
   1cee0:	bf08      	it	eq
   1cee2:	3401      	addeq	r4, #1
   1cee4:	2701      	movs	r7, #1
   1cee6:	e772      	b.n	1cdce <_tzset_unlocked_r+0x132>
   1cee8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1ceec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1cef0:	213c      	movs	r1, #60	; 0x3c
   1cef2:	fb01 2203 	mla	r2, r1, r3, r2
   1cef6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1cefa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1cefe:	fb01 2303 	mla	r3, r1, r3, r2
   1cf02:	435f      	muls	r7, r3
   1cf04:	e77a      	b.n	1cdfc <_tzset_unlocked_r+0x160>
   1cf06:	f04f 0901 	mov.w	r9, #1
   1cf0a:	e77d      	b.n	1ce08 <_tzset_unlocked_r+0x16c>
   1cf0c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   1cf10:	bf06      	itte	eq
   1cf12:	3401      	addeq	r4, #1
   1cf14:	4643      	moveq	r3, r8
   1cf16:	2344      	movne	r3, #68	; 0x44
   1cf18:	220a      	movs	r2, #10
   1cf1a:	a90b      	add	r1, sp, #44	; 0x2c
   1cf1c:	4620      	mov	r0, r4
   1cf1e:	9305      	str	r3, [sp, #20]
   1cf20:	f7ff fe04 	bl	1cb2c <strtoul>
   1cf24:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   1cf28:	9b05      	ldr	r3, [sp, #20]
   1cf2a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   1cf2e:	45a0      	cmp	r8, r4
   1cf30:	d114      	bne.n	1cf5c <_tzset_unlocked_r+0x2c0>
   1cf32:	234d      	movs	r3, #77	; 0x4d
   1cf34:	f1b9 0f00 	cmp.w	r9, #0
   1cf38:	d107      	bne.n	1cf4a <_tzset_unlocked_r+0x2ae>
   1cf3a:	722b      	strb	r3, [r5, #8]
   1cf3c:	2103      	movs	r1, #3
   1cf3e:	2302      	movs	r3, #2
   1cf40:	e9c5 1303 	strd	r1, r3, [r5, #12]
   1cf44:	f8c5 9014 	str.w	r9, [r5, #20]
   1cf48:	e791      	b.n	1ce6e <_tzset_unlocked_r+0x1d2>
   1cf4a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   1cf4e:	220b      	movs	r2, #11
   1cf50:	2301      	movs	r3, #1
   1cf52:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   1cf56:	2300      	movs	r3, #0
   1cf58:	63eb      	str	r3, [r5, #60]	; 0x3c
   1cf5a:	e788      	b.n	1ce6e <_tzset_unlocked_r+0x1d2>
   1cf5c:	b280      	uxth	r0, r0
   1cf5e:	723b      	strb	r3, [r7, #8]
   1cf60:	6178      	str	r0, [r7, #20]
   1cf62:	e784      	b.n	1ce6e <_tzset_unlocked_r+0x1d2>
   1cf64:	000290bc 	.word	0x000290bc
   1cf68:	20002edc 	.word	0x20002edc
   1cf6c:	20002ee4 	.word	0x20002ee4
   1cf70:	000290bf 	.word	0x000290bf
   1cf74:	20002ee0 	.word	0x20002ee0
   1cf78:	20000994 	.word	0x20000994
   1cf7c:	200030bb 	.word	0x200030bb
   1cf80:	000290c3 	.word	0x000290c3
   1cf84:	000290e6 	.word	0x000290e6
   1cf88:	000290d2 	.word	0x000290d2
   1cf8c:	000290e5 	.word	0x000290e5
   1cf90:	200030b0 	.word	0x200030b0

0001cf94 <_findenv_r>:
   1cf94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf98:	4607      	mov	r7, r0
   1cf9a:	4689      	mov	r9, r1
   1cf9c:	4616      	mov	r6, r2
   1cf9e:	f009 ff9b 	bl	26ed8 <__env_lock>
   1cfa2:	4b18      	ldr	r3, [pc, #96]	; (1d004 <_findenv_r+0x70>)
   1cfa4:	681c      	ldr	r4, [r3, #0]
   1cfa6:	469a      	mov	sl, r3
   1cfa8:	b134      	cbz	r4, 1cfb8 <_findenv_r+0x24>
   1cfaa:	464b      	mov	r3, r9
   1cfac:	4698      	mov	r8, r3
   1cfae:	f813 1b01 	ldrb.w	r1, [r3], #1
   1cfb2:	b139      	cbz	r1, 1cfc4 <_findenv_r+0x30>
   1cfb4:	293d      	cmp	r1, #61	; 0x3d
   1cfb6:	d1f9      	bne.n	1cfac <_findenv_r+0x18>
   1cfb8:	4638      	mov	r0, r7
   1cfba:	f009 ff8e 	bl	26eda <__env_unlock>
   1cfbe:	2000      	movs	r0, #0
   1cfc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfc4:	eba8 0809 	sub.w	r8, r8, r9
   1cfc8:	46a3      	mov	fp, r4
   1cfca:	f854 0b04 	ldr.w	r0, [r4], #4
   1cfce:	2800      	cmp	r0, #0
   1cfd0:	d0f2      	beq.n	1cfb8 <_findenv_r+0x24>
   1cfd2:	4642      	mov	r2, r8
   1cfd4:	4649      	mov	r1, r9
   1cfd6:	f009 fd6b 	bl	26ab0 <strncmp>
   1cfda:	2800      	cmp	r0, #0
   1cfdc:	d1f4      	bne.n	1cfc8 <_findenv_r+0x34>
   1cfde:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1cfe2:	eb03 0508 	add.w	r5, r3, r8
   1cfe6:	f813 3008 	ldrb.w	r3, [r3, r8]
   1cfea:	2b3d      	cmp	r3, #61	; 0x3d
   1cfec:	d1ec      	bne.n	1cfc8 <_findenv_r+0x34>
   1cfee:	f8da 3000 	ldr.w	r3, [sl]
   1cff2:	ebab 0303 	sub.w	r3, fp, r3
   1cff6:	109b      	asrs	r3, r3, #2
   1cff8:	4638      	mov	r0, r7
   1cffa:	6033      	str	r3, [r6, #0]
   1cffc:	f009 ff6d 	bl	26eda <__env_unlock>
   1d000:	1c68      	adds	r0, r5, #1
   1d002:	e7dd      	b.n	1cfc0 <_findenv_r+0x2c>
   1d004:	20000b6c 	.word	0x20000b6c

0001d008 <__gettzinfo>:
   1d008:	4800      	ldr	r0, [pc, #0]	; (1d00c <__gettzinfo+0x4>)
   1d00a:	4770      	bx	lr
   1d00c:	20000178 	.word	0x20000178

0001d010 <_svfiprintf_r>:
   1d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d014:	4698      	mov	r8, r3
   1d016:	898b      	ldrh	r3, [r1, #12]
   1d018:	061b      	lsls	r3, r3, #24
   1d01a:	b09d      	sub	sp, #116	; 0x74
   1d01c:	4607      	mov	r7, r0
   1d01e:	460d      	mov	r5, r1
   1d020:	4614      	mov	r4, r2
   1d022:	d50e      	bpl.n	1d042 <_svfiprintf_r+0x32>
   1d024:	690b      	ldr	r3, [r1, #16]
   1d026:	b963      	cbnz	r3, 1d042 <_svfiprintf_r+0x32>
   1d028:	2140      	movs	r1, #64	; 0x40
   1d02a:	f7fe fe95 	bl	1bd58 <_malloc_r>
   1d02e:	6028      	str	r0, [r5, #0]
   1d030:	6128      	str	r0, [r5, #16]
   1d032:	b920      	cbnz	r0, 1d03e <_svfiprintf_r+0x2e>
   1d034:	230c      	movs	r3, #12
   1d036:	603b      	str	r3, [r7, #0]
   1d038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d03c:	e0d1      	b.n	1d1e2 <_svfiprintf_r+0x1d2>
   1d03e:	2340      	movs	r3, #64	; 0x40
   1d040:	616b      	str	r3, [r5, #20]
   1d042:	2300      	movs	r3, #0
   1d044:	9309      	str	r3, [sp, #36]	; 0x24
   1d046:	2320      	movs	r3, #32
   1d048:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1d04c:	f8cd 800c 	str.w	r8, [sp, #12]
   1d050:	2330      	movs	r3, #48	; 0x30
   1d052:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 1d1fc <_svfiprintf_r+0x1ec>
   1d056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1d05a:	f04f 0901 	mov.w	r9, #1
   1d05e:	4623      	mov	r3, r4
   1d060:	469a      	mov	sl, r3
   1d062:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d066:	b10a      	cbz	r2, 1d06c <_svfiprintf_r+0x5c>
   1d068:	2a25      	cmp	r2, #37	; 0x25
   1d06a:	d1f9      	bne.n	1d060 <_svfiprintf_r+0x50>
   1d06c:	ebba 0b04 	subs.w	fp, sl, r4
   1d070:	d00b      	beq.n	1d08a <_svfiprintf_r+0x7a>
   1d072:	465b      	mov	r3, fp
   1d074:	4622      	mov	r2, r4
   1d076:	4629      	mov	r1, r5
   1d078:	4638      	mov	r0, r7
   1d07a:	f009 fd77 	bl	26b6c <__ssputs_r>
   1d07e:	3001      	adds	r0, #1
   1d080:	f000 80aa 	beq.w	1d1d8 <_svfiprintf_r+0x1c8>
   1d084:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d086:	445a      	add	r2, fp
   1d088:	9209      	str	r2, [sp, #36]	; 0x24
   1d08a:	f89a 3000 	ldrb.w	r3, [sl]
   1d08e:	2b00      	cmp	r3, #0
   1d090:	f000 80a2 	beq.w	1d1d8 <_svfiprintf_r+0x1c8>
   1d094:	2300      	movs	r3, #0
   1d096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d09a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1d09e:	f10a 0a01 	add.w	sl, sl, #1
   1d0a2:	9304      	str	r3, [sp, #16]
   1d0a4:	9307      	str	r3, [sp, #28]
   1d0a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1d0aa:	931a      	str	r3, [sp, #104]	; 0x68
   1d0ac:	4654      	mov	r4, sl
   1d0ae:	2205      	movs	r2, #5
   1d0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d0b4:	4851      	ldr	r0, [pc, #324]	; (1d1fc <_svfiprintf_r+0x1ec>)
   1d0b6:	f7e3 f813 	bl	e0 <memchr>
   1d0ba:	9a04      	ldr	r2, [sp, #16]
   1d0bc:	b9d8      	cbnz	r0, 1d0f6 <_svfiprintf_r+0xe6>
   1d0be:	06d0      	lsls	r0, r2, #27
   1d0c0:	bf44      	itt	mi
   1d0c2:	2320      	movmi	r3, #32
   1d0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1d0c8:	0711      	lsls	r1, r2, #28
   1d0ca:	bf44      	itt	mi
   1d0cc:	232b      	movmi	r3, #43	; 0x2b
   1d0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1d0d2:	f89a 3000 	ldrb.w	r3, [sl]
   1d0d6:	2b2a      	cmp	r3, #42	; 0x2a
   1d0d8:	d015      	beq.n	1d106 <_svfiprintf_r+0xf6>
   1d0da:	9a07      	ldr	r2, [sp, #28]
   1d0dc:	4654      	mov	r4, sl
   1d0de:	2000      	movs	r0, #0
   1d0e0:	f04f 0c0a 	mov.w	ip, #10
   1d0e4:	4621      	mov	r1, r4
   1d0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d0ea:	3b30      	subs	r3, #48	; 0x30
   1d0ec:	2b09      	cmp	r3, #9
   1d0ee:	d94e      	bls.n	1d18e <_svfiprintf_r+0x17e>
   1d0f0:	b1b0      	cbz	r0, 1d120 <_svfiprintf_r+0x110>
   1d0f2:	9207      	str	r2, [sp, #28]
   1d0f4:	e014      	b.n	1d120 <_svfiprintf_r+0x110>
   1d0f6:	eba0 0308 	sub.w	r3, r0, r8
   1d0fa:	fa09 f303 	lsl.w	r3, r9, r3
   1d0fe:	4313      	orrs	r3, r2
   1d100:	9304      	str	r3, [sp, #16]
   1d102:	46a2      	mov	sl, r4
   1d104:	e7d2      	b.n	1d0ac <_svfiprintf_r+0x9c>
   1d106:	9b03      	ldr	r3, [sp, #12]
   1d108:	1d19      	adds	r1, r3, #4
   1d10a:	681b      	ldr	r3, [r3, #0]
   1d10c:	9103      	str	r1, [sp, #12]
   1d10e:	2b00      	cmp	r3, #0
   1d110:	bfbb      	ittet	lt
   1d112:	425b      	neglt	r3, r3
   1d114:	f042 0202 	orrlt.w	r2, r2, #2
   1d118:	9307      	strge	r3, [sp, #28]
   1d11a:	9307      	strlt	r3, [sp, #28]
   1d11c:	bfb8      	it	lt
   1d11e:	9204      	strlt	r2, [sp, #16]
   1d120:	7823      	ldrb	r3, [r4, #0]
   1d122:	2b2e      	cmp	r3, #46	; 0x2e
   1d124:	d10c      	bne.n	1d140 <_svfiprintf_r+0x130>
   1d126:	7863      	ldrb	r3, [r4, #1]
   1d128:	2b2a      	cmp	r3, #42	; 0x2a
   1d12a:	d135      	bne.n	1d198 <_svfiprintf_r+0x188>
   1d12c:	9b03      	ldr	r3, [sp, #12]
   1d12e:	1d1a      	adds	r2, r3, #4
   1d130:	681b      	ldr	r3, [r3, #0]
   1d132:	9203      	str	r2, [sp, #12]
   1d134:	2b00      	cmp	r3, #0
   1d136:	bfb8      	it	lt
   1d138:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1d13c:	3402      	adds	r4, #2
   1d13e:	9305      	str	r3, [sp, #20]
   1d140:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1d20c <_svfiprintf_r+0x1fc>
   1d144:	7821      	ldrb	r1, [r4, #0]
   1d146:	2203      	movs	r2, #3
   1d148:	4650      	mov	r0, sl
   1d14a:	f7e2 ffc9 	bl	e0 <memchr>
   1d14e:	b140      	cbz	r0, 1d162 <_svfiprintf_r+0x152>
   1d150:	2340      	movs	r3, #64	; 0x40
   1d152:	eba0 000a 	sub.w	r0, r0, sl
   1d156:	fa03 f000 	lsl.w	r0, r3, r0
   1d15a:	9b04      	ldr	r3, [sp, #16]
   1d15c:	4303      	orrs	r3, r0
   1d15e:	3401      	adds	r4, #1
   1d160:	9304      	str	r3, [sp, #16]
   1d162:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d166:	4826      	ldr	r0, [pc, #152]	; (1d200 <_svfiprintf_r+0x1f0>)
   1d168:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1d16c:	2206      	movs	r2, #6
   1d16e:	f7e2 ffb7 	bl	e0 <memchr>
   1d172:	2800      	cmp	r0, #0
   1d174:	d038      	beq.n	1d1e8 <_svfiprintf_r+0x1d8>
   1d176:	4b23      	ldr	r3, [pc, #140]	; (1d204 <_svfiprintf_r+0x1f4>)
   1d178:	bb1b      	cbnz	r3, 1d1c2 <_svfiprintf_r+0x1b2>
   1d17a:	9b03      	ldr	r3, [sp, #12]
   1d17c:	3307      	adds	r3, #7
   1d17e:	f023 0307 	bic.w	r3, r3, #7
   1d182:	3308      	adds	r3, #8
   1d184:	9303      	str	r3, [sp, #12]
   1d186:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d188:	4433      	add	r3, r6
   1d18a:	9309      	str	r3, [sp, #36]	; 0x24
   1d18c:	e767      	b.n	1d05e <_svfiprintf_r+0x4e>
   1d18e:	fb0c 3202 	mla	r2, ip, r2, r3
   1d192:	460c      	mov	r4, r1
   1d194:	2001      	movs	r0, #1
   1d196:	e7a5      	b.n	1d0e4 <_svfiprintf_r+0xd4>
   1d198:	2300      	movs	r3, #0
   1d19a:	3401      	adds	r4, #1
   1d19c:	9305      	str	r3, [sp, #20]
   1d19e:	4619      	mov	r1, r3
   1d1a0:	f04f 0c0a 	mov.w	ip, #10
   1d1a4:	4620      	mov	r0, r4
   1d1a6:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d1aa:	3a30      	subs	r2, #48	; 0x30
   1d1ac:	2a09      	cmp	r2, #9
   1d1ae:	d903      	bls.n	1d1b8 <_svfiprintf_r+0x1a8>
   1d1b0:	2b00      	cmp	r3, #0
   1d1b2:	d0c5      	beq.n	1d140 <_svfiprintf_r+0x130>
   1d1b4:	9105      	str	r1, [sp, #20]
   1d1b6:	e7c3      	b.n	1d140 <_svfiprintf_r+0x130>
   1d1b8:	fb0c 2101 	mla	r1, ip, r1, r2
   1d1bc:	4604      	mov	r4, r0
   1d1be:	2301      	movs	r3, #1
   1d1c0:	e7f0      	b.n	1d1a4 <_svfiprintf_r+0x194>
   1d1c2:	ab03      	add	r3, sp, #12
   1d1c4:	9300      	str	r3, [sp, #0]
   1d1c6:	462a      	mov	r2, r5
   1d1c8:	4b0f      	ldr	r3, [pc, #60]	; (1d208 <_svfiprintf_r+0x1f8>)
   1d1ca:	a904      	add	r1, sp, #16
   1d1cc:	4638      	mov	r0, r7
   1d1ce:	f3af 8000 	nop.w
   1d1d2:	1c42      	adds	r2, r0, #1
   1d1d4:	4606      	mov	r6, r0
   1d1d6:	d1d6      	bne.n	1d186 <_svfiprintf_r+0x176>
   1d1d8:	89ab      	ldrh	r3, [r5, #12]
   1d1da:	065b      	lsls	r3, r3, #25
   1d1dc:	f53f af2c 	bmi.w	1d038 <_svfiprintf_r+0x28>
   1d1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d1e2:	b01d      	add	sp, #116	; 0x74
   1d1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1e8:	ab03      	add	r3, sp, #12
   1d1ea:	9300      	str	r3, [sp, #0]
   1d1ec:	462a      	mov	r2, r5
   1d1ee:	4b06      	ldr	r3, [pc, #24]	; (1d208 <_svfiprintf_r+0x1f8>)
   1d1f0:	a904      	add	r1, sp, #16
   1d1f2:	4638      	mov	r0, r7
   1d1f4:	f000 f984 	bl	1d500 <_printf_i>
   1d1f8:	e7eb      	b.n	1d1d2 <_svfiprintf_r+0x1c2>
   1d1fa:	bf00      	nop
   1d1fc:	00029102 	.word	0x00029102
   1d200:	0002910c 	.word	0x0002910c
   1d204:	00000000 	.word	0x00000000
   1d208:	00026b6d 	.word	0x00026b6d
   1d20c:	00029108 	.word	0x00029108

0001d210 <__ssvfiscanf_r>:
   1d210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d214:	460c      	mov	r4, r1
   1d216:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   1d21a:	2100      	movs	r1, #0
   1d21c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   1d220:	49b2      	ldr	r1, [pc, #712]	; (1d4ec <__ssvfiscanf_r+0x2dc>)
   1d222:	91a0      	str	r1, [sp, #640]	; 0x280
   1d224:	f10d 0804 	add.w	r8, sp, #4
   1d228:	49b1      	ldr	r1, [pc, #708]	; (1d4f0 <__ssvfiscanf_r+0x2e0>)
   1d22a:	4fb2      	ldr	r7, [pc, #712]	; (1d4f4 <__ssvfiscanf_r+0x2e4>)
   1d22c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1d4f8 <__ssvfiscanf_r+0x2e8>
   1d230:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   1d234:	4606      	mov	r6, r0
   1d236:	91a1      	str	r1, [sp, #644]	; 0x284
   1d238:	9300      	str	r3, [sp, #0]
   1d23a:	f892 a000 	ldrb.w	sl, [r2]
   1d23e:	f1ba 0f00 	cmp.w	sl, #0
   1d242:	f000 8151 	beq.w	1d4e8 <__ssvfiscanf_r+0x2d8>
   1d246:	f81a 3007 	ldrb.w	r3, [sl, r7]
   1d24a:	f013 0308 	ands.w	r3, r3, #8
   1d24e:	f102 0501 	add.w	r5, r2, #1
   1d252:	d019      	beq.n	1d288 <__ssvfiscanf_r+0x78>
   1d254:	6863      	ldr	r3, [r4, #4]
   1d256:	2b00      	cmp	r3, #0
   1d258:	dd0f      	ble.n	1d27a <__ssvfiscanf_r+0x6a>
   1d25a:	6823      	ldr	r3, [r4, #0]
   1d25c:	781a      	ldrb	r2, [r3, #0]
   1d25e:	5cba      	ldrb	r2, [r7, r2]
   1d260:	0712      	lsls	r2, r2, #28
   1d262:	d401      	bmi.n	1d268 <__ssvfiscanf_r+0x58>
   1d264:	462a      	mov	r2, r5
   1d266:	e7e8      	b.n	1d23a <__ssvfiscanf_r+0x2a>
   1d268:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1d26a:	3201      	adds	r2, #1
   1d26c:	9245      	str	r2, [sp, #276]	; 0x114
   1d26e:	6862      	ldr	r2, [r4, #4]
   1d270:	3301      	adds	r3, #1
   1d272:	3a01      	subs	r2, #1
   1d274:	6062      	str	r2, [r4, #4]
   1d276:	6023      	str	r3, [r4, #0]
   1d278:	e7ec      	b.n	1d254 <__ssvfiscanf_r+0x44>
   1d27a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1d27c:	4621      	mov	r1, r4
   1d27e:	4630      	mov	r0, r6
   1d280:	4798      	blx	r3
   1d282:	2800      	cmp	r0, #0
   1d284:	d0e9      	beq.n	1d25a <__ssvfiscanf_r+0x4a>
   1d286:	e7ed      	b.n	1d264 <__ssvfiscanf_r+0x54>
   1d288:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   1d28c:	f040 8083 	bne.w	1d396 <__ssvfiscanf_r+0x186>
   1d290:	9341      	str	r3, [sp, #260]	; 0x104
   1d292:	9343      	str	r3, [sp, #268]	; 0x10c
   1d294:	7853      	ldrb	r3, [r2, #1]
   1d296:	2b2a      	cmp	r3, #42	; 0x2a
   1d298:	bf02      	ittt	eq
   1d29a:	2310      	moveq	r3, #16
   1d29c:	1c95      	addeq	r5, r2, #2
   1d29e:	9341      	streq	r3, [sp, #260]	; 0x104
   1d2a0:	220a      	movs	r2, #10
   1d2a2:	46ab      	mov	fp, r5
   1d2a4:	f81b 1b01 	ldrb.w	r1, [fp], #1
   1d2a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1d2ac:	2b09      	cmp	r3, #9
   1d2ae:	d91d      	bls.n	1d2ec <__ssvfiscanf_r+0xdc>
   1d2b0:	4891      	ldr	r0, [pc, #580]	; (1d4f8 <__ssvfiscanf_r+0x2e8>)
   1d2b2:	2203      	movs	r2, #3
   1d2b4:	f7e2 ff14 	bl	e0 <memchr>
   1d2b8:	b140      	cbz	r0, 1d2cc <__ssvfiscanf_r+0xbc>
   1d2ba:	2301      	movs	r3, #1
   1d2bc:	eba0 0009 	sub.w	r0, r0, r9
   1d2c0:	fa03 f000 	lsl.w	r0, r3, r0
   1d2c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1d2c6:	4318      	orrs	r0, r3
   1d2c8:	9041      	str	r0, [sp, #260]	; 0x104
   1d2ca:	465d      	mov	r5, fp
   1d2cc:	f815 3b01 	ldrb.w	r3, [r5], #1
   1d2d0:	2b78      	cmp	r3, #120	; 0x78
   1d2d2:	d806      	bhi.n	1d2e2 <__ssvfiscanf_r+0xd2>
   1d2d4:	2b57      	cmp	r3, #87	; 0x57
   1d2d6:	d810      	bhi.n	1d2fa <__ssvfiscanf_r+0xea>
   1d2d8:	2b25      	cmp	r3, #37	; 0x25
   1d2da:	d05c      	beq.n	1d396 <__ssvfiscanf_r+0x186>
   1d2dc:	d856      	bhi.n	1d38c <__ssvfiscanf_r+0x17c>
   1d2de:	2b00      	cmp	r3, #0
   1d2e0:	d074      	beq.n	1d3cc <__ssvfiscanf_r+0x1bc>
   1d2e2:	2303      	movs	r3, #3
   1d2e4:	9347      	str	r3, [sp, #284]	; 0x11c
   1d2e6:	230a      	movs	r3, #10
   1d2e8:	9342      	str	r3, [sp, #264]	; 0x108
   1d2ea:	e081      	b.n	1d3f0 <__ssvfiscanf_r+0x1e0>
   1d2ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   1d2ee:	fb02 1303 	mla	r3, r2, r3, r1
   1d2f2:	3b30      	subs	r3, #48	; 0x30
   1d2f4:	9343      	str	r3, [sp, #268]	; 0x10c
   1d2f6:	465d      	mov	r5, fp
   1d2f8:	e7d3      	b.n	1d2a2 <__ssvfiscanf_r+0x92>
   1d2fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   1d2fe:	2a20      	cmp	r2, #32
   1d300:	d8ef      	bhi.n	1d2e2 <__ssvfiscanf_r+0xd2>
   1d302:	a101      	add	r1, pc, #4	; (adr r1, 1d308 <__ssvfiscanf_r+0xf8>)
   1d304:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1d308:	0001d3db 	.word	0x0001d3db
   1d30c:	0001d2e3 	.word	0x0001d2e3
   1d310:	0001d2e3 	.word	0x0001d2e3
   1d314:	0001d439 	.word	0x0001d439
   1d318:	0001d2e3 	.word	0x0001d2e3
   1d31c:	0001d2e3 	.word	0x0001d2e3
   1d320:	0001d2e3 	.word	0x0001d2e3
   1d324:	0001d2e3 	.word	0x0001d2e3
   1d328:	0001d2e3 	.word	0x0001d2e3
   1d32c:	0001d2e3 	.word	0x0001d2e3
   1d330:	0001d2e3 	.word	0x0001d2e3
   1d334:	0001d44f 	.word	0x0001d44f
   1d338:	0001d425 	.word	0x0001d425
   1d33c:	0001d393 	.word	0x0001d393
   1d340:	0001d393 	.word	0x0001d393
   1d344:	0001d393 	.word	0x0001d393
   1d348:	0001d2e3 	.word	0x0001d2e3
   1d34c:	0001d429 	.word	0x0001d429
   1d350:	0001d2e3 	.word	0x0001d2e3
   1d354:	0001d2e3 	.word	0x0001d2e3
   1d358:	0001d2e3 	.word	0x0001d2e3
   1d35c:	0001d2e3 	.word	0x0001d2e3
   1d360:	0001d45f 	.word	0x0001d45f
   1d364:	0001d431 	.word	0x0001d431
   1d368:	0001d3d3 	.word	0x0001d3d3
   1d36c:	0001d2e3 	.word	0x0001d2e3
   1d370:	0001d2e3 	.word	0x0001d2e3
   1d374:	0001d45b 	.word	0x0001d45b
   1d378:	0001d2e3 	.word	0x0001d2e3
   1d37c:	0001d425 	.word	0x0001d425
   1d380:	0001d2e3 	.word	0x0001d2e3
   1d384:	0001d2e3 	.word	0x0001d2e3
   1d388:	0001d3db 	.word	0x0001d3db
   1d38c:	3b45      	subs	r3, #69	; 0x45
   1d38e:	2b02      	cmp	r3, #2
   1d390:	d8a7      	bhi.n	1d2e2 <__ssvfiscanf_r+0xd2>
   1d392:	2305      	movs	r3, #5
   1d394:	e02b      	b.n	1d3ee <__ssvfiscanf_r+0x1de>
   1d396:	6863      	ldr	r3, [r4, #4]
   1d398:	2b00      	cmp	r3, #0
   1d39a:	dd0d      	ble.n	1d3b8 <__ssvfiscanf_r+0x1a8>
   1d39c:	6823      	ldr	r3, [r4, #0]
   1d39e:	781a      	ldrb	r2, [r3, #0]
   1d3a0:	4552      	cmp	r2, sl
   1d3a2:	f040 80a1 	bne.w	1d4e8 <__ssvfiscanf_r+0x2d8>
   1d3a6:	3301      	adds	r3, #1
   1d3a8:	6862      	ldr	r2, [r4, #4]
   1d3aa:	6023      	str	r3, [r4, #0]
   1d3ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1d3ae:	3a01      	subs	r2, #1
   1d3b0:	3301      	adds	r3, #1
   1d3b2:	6062      	str	r2, [r4, #4]
   1d3b4:	9345      	str	r3, [sp, #276]	; 0x114
   1d3b6:	e755      	b.n	1d264 <__ssvfiscanf_r+0x54>
   1d3b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1d3ba:	4621      	mov	r1, r4
   1d3bc:	4630      	mov	r0, r6
   1d3be:	4798      	blx	r3
   1d3c0:	2800      	cmp	r0, #0
   1d3c2:	d0eb      	beq.n	1d39c <__ssvfiscanf_r+0x18c>
   1d3c4:	9844      	ldr	r0, [sp, #272]	; 0x110
   1d3c6:	2800      	cmp	r0, #0
   1d3c8:	f040 8084 	bne.w	1d4d4 <__ssvfiscanf_r+0x2c4>
   1d3cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d3d0:	e086      	b.n	1d4e0 <__ssvfiscanf_r+0x2d0>
   1d3d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1d3d4:	f042 0220 	orr.w	r2, r2, #32
   1d3d8:	9241      	str	r2, [sp, #260]	; 0x104
   1d3da:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1d3dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1d3e0:	9241      	str	r2, [sp, #260]	; 0x104
   1d3e2:	2210      	movs	r2, #16
   1d3e4:	2b6f      	cmp	r3, #111	; 0x6f
   1d3e6:	9242      	str	r2, [sp, #264]	; 0x108
   1d3e8:	bf34      	ite	cc
   1d3ea:	2303      	movcc	r3, #3
   1d3ec:	2304      	movcs	r3, #4
   1d3ee:	9347      	str	r3, [sp, #284]	; 0x11c
   1d3f0:	6863      	ldr	r3, [r4, #4]
   1d3f2:	2b00      	cmp	r3, #0
   1d3f4:	dd41      	ble.n	1d47a <__ssvfiscanf_r+0x26a>
   1d3f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1d3f8:	0659      	lsls	r1, r3, #25
   1d3fa:	d404      	bmi.n	1d406 <__ssvfiscanf_r+0x1f6>
   1d3fc:	6823      	ldr	r3, [r4, #0]
   1d3fe:	781a      	ldrb	r2, [r3, #0]
   1d400:	5cba      	ldrb	r2, [r7, r2]
   1d402:	0712      	lsls	r2, r2, #28
   1d404:	d440      	bmi.n	1d488 <__ssvfiscanf_r+0x278>
   1d406:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1d408:	2b02      	cmp	r3, #2
   1d40a:	dc4f      	bgt.n	1d4ac <__ssvfiscanf_r+0x29c>
   1d40c:	466b      	mov	r3, sp
   1d40e:	4622      	mov	r2, r4
   1d410:	a941      	add	r1, sp, #260	; 0x104
   1d412:	4630      	mov	r0, r6
   1d414:	f000 f99a 	bl	1d74c <_scanf_chars>
   1d418:	2801      	cmp	r0, #1
   1d41a:	d065      	beq.n	1d4e8 <__ssvfiscanf_r+0x2d8>
   1d41c:	2802      	cmp	r0, #2
   1d41e:	f47f af21 	bne.w	1d264 <__ssvfiscanf_r+0x54>
   1d422:	e7cf      	b.n	1d3c4 <__ssvfiscanf_r+0x1b4>
   1d424:	220a      	movs	r2, #10
   1d426:	e7dd      	b.n	1d3e4 <__ssvfiscanf_r+0x1d4>
   1d428:	2300      	movs	r3, #0
   1d42a:	9342      	str	r3, [sp, #264]	; 0x108
   1d42c:	2303      	movs	r3, #3
   1d42e:	e7de      	b.n	1d3ee <__ssvfiscanf_r+0x1de>
   1d430:	2308      	movs	r3, #8
   1d432:	9342      	str	r3, [sp, #264]	; 0x108
   1d434:	2304      	movs	r3, #4
   1d436:	e7da      	b.n	1d3ee <__ssvfiscanf_r+0x1de>
   1d438:	4629      	mov	r1, r5
   1d43a:	4640      	mov	r0, r8
   1d43c:	f009 fcb8 	bl	26db0 <__sccl>
   1d440:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1d442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d446:	9341      	str	r3, [sp, #260]	; 0x104
   1d448:	4605      	mov	r5, r0
   1d44a:	2301      	movs	r3, #1
   1d44c:	e7cf      	b.n	1d3ee <__ssvfiscanf_r+0x1de>
   1d44e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1d450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d454:	9341      	str	r3, [sp, #260]	; 0x104
   1d456:	2300      	movs	r3, #0
   1d458:	e7c9      	b.n	1d3ee <__ssvfiscanf_r+0x1de>
   1d45a:	2302      	movs	r3, #2
   1d45c:	e7c7      	b.n	1d3ee <__ssvfiscanf_r+0x1de>
   1d45e:	9841      	ldr	r0, [sp, #260]	; 0x104
   1d460:	06c3      	lsls	r3, r0, #27
   1d462:	f53f aeff 	bmi.w	1d264 <__ssvfiscanf_r+0x54>
   1d466:	9b00      	ldr	r3, [sp, #0]
   1d468:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1d46a:	1d19      	adds	r1, r3, #4
   1d46c:	9100      	str	r1, [sp, #0]
   1d46e:	681b      	ldr	r3, [r3, #0]
   1d470:	07c0      	lsls	r0, r0, #31
   1d472:	bf4c      	ite	mi
   1d474:	801a      	strhmi	r2, [r3, #0]
   1d476:	601a      	strpl	r2, [r3, #0]
   1d478:	e6f4      	b.n	1d264 <__ssvfiscanf_r+0x54>
   1d47a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1d47c:	4621      	mov	r1, r4
   1d47e:	4630      	mov	r0, r6
   1d480:	4798      	blx	r3
   1d482:	2800      	cmp	r0, #0
   1d484:	d0b7      	beq.n	1d3f6 <__ssvfiscanf_r+0x1e6>
   1d486:	e79d      	b.n	1d3c4 <__ssvfiscanf_r+0x1b4>
   1d488:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1d48a:	3201      	adds	r2, #1
   1d48c:	9245      	str	r2, [sp, #276]	; 0x114
   1d48e:	6862      	ldr	r2, [r4, #4]
   1d490:	3a01      	subs	r2, #1
   1d492:	2a00      	cmp	r2, #0
   1d494:	6062      	str	r2, [r4, #4]
   1d496:	dd02      	ble.n	1d49e <__ssvfiscanf_r+0x28e>
   1d498:	3301      	adds	r3, #1
   1d49a:	6023      	str	r3, [r4, #0]
   1d49c:	e7ae      	b.n	1d3fc <__ssvfiscanf_r+0x1ec>
   1d49e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1d4a0:	4621      	mov	r1, r4
   1d4a2:	4630      	mov	r0, r6
   1d4a4:	4798      	blx	r3
   1d4a6:	2800      	cmp	r0, #0
   1d4a8:	d0a8      	beq.n	1d3fc <__ssvfiscanf_r+0x1ec>
   1d4aa:	e78b      	b.n	1d3c4 <__ssvfiscanf_r+0x1b4>
   1d4ac:	2b04      	cmp	r3, #4
   1d4ae:	dc06      	bgt.n	1d4be <__ssvfiscanf_r+0x2ae>
   1d4b0:	466b      	mov	r3, sp
   1d4b2:	4622      	mov	r2, r4
   1d4b4:	a941      	add	r1, sp, #260	; 0x104
   1d4b6:	4630      	mov	r0, r6
   1d4b8:	f000 f9a0 	bl	1d7fc <_scanf_i>
   1d4bc:	e7ac      	b.n	1d418 <__ssvfiscanf_r+0x208>
   1d4be:	4b0f      	ldr	r3, [pc, #60]	; (1d4fc <__ssvfiscanf_r+0x2ec>)
   1d4c0:	2b00      	cmp	r3, #0
   1d4c2:	f43f aecf 	beq.w	1d264 <__ssvfiscanf_r+0x54>
   1d4c6:	466b      	mov	r3, sp
   1d4c8:	4622      	mov	r2, r4
   1d4ca:	a941      	add	r1, sp, #260	; 0x104
   1d4cc:	4630      	mov	r0, r6
   1d4ce:	f3af 8000 	nop.w
   1d4d2:	e7a1      	b.n	1d418 <__ssvfiscanf_r+0x208>
   1d4d4:	89a3      	ldrh	r3, [r4, #12]
   1d4d6:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d4da:	bf18      	it	ne
   1d4dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1d4e0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   1d4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4e8:	9844      	ldr	r0, [sp, #272]	; 0x110
   1d4ea:	e7f9      	b.n	1d4e0 <__ssvfiscanf_r+0x2d0>
   1d4ec:	00026c23 	.word	0x00026c23
   1d4f0:	00026c9d 	.word	0x00026c9d
   1d4f4:	00028e3c 	.word	0x00028e3c
   1d4f8:	00029108 	.word	0x00029108
   1d4fc:	00000000 	.word	0x00000000

0001d500 <_printf_i>:
   1d500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1d504:	460c      	mov	r4, r1
   1d506:	4691      	mov	r9, r2
   1d508:	7e27      	ldrb	r7, [r4, #24]
   1d50a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1d50c:	2f78      	cmp	r7, #120	; 0x78
   1d50e:	4680      	mov	r8, r0
   1d510:	469a      	mov	sl, r3
   1d512:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1d516:	d807      	bhi.n	1d528 <_printf_i+0x28>
   1d518:	2f62      	cmp	r7, #98	; 0x62
   1d51a:	d80a      	bhi.n	1d532 <_printf_i+0x32>
   1d51c:	2f00      	cmp	r7, #0
   1d51e:	f000 80d8 	beq.w	1d6d2 <_printf_i+0x1d2>
   1d522:	2f58      	cmp	r7, #88	; 0x58
   1d524:	f000 80a3 	beq.w	1d66e <_printf_i+0x16e>
   1d528:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1d52c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1d530:	e03a      	b.n	1d5a8 <_printf_i+0xa8>
   1d532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1d536:	2b15      	cmp	r3, #21
   1d538:	d8f6      	bhi.n	1d528 <_printf_i+0x28>
   1d53a:	a001      	add	r0, pc, #4	; (adr r0, 1d540 <_printf_i+0x40>)
   1d53c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1d540:	0001d599 	.word	0x0001d599
   1d544:	0001d5ad 	.word	0x0001d5ad
   1d548:	0001d529 	.word	0x0001d529
   1d54c:	0001d529 	.word	0x0001d529
   1d550:	0001d529 	.word	0x0001d529
   1d554:	0001d529 	.word	0x0001d529
   1d558:	0001d5ad 	.word	0x0001d5ad
   1d55c:	0001d529 	.word	0x0001d529
   1d560:	0001d529 	.word	0x0001d529
   1d564:	0001d529 	.word	0x0001d529
   1d568:	0001d529 	.word	0x0001d529
   1d56c:	0001d6b9 	.word	0x0001d6b9
   1d570:	0001d5dd 	.word	0x0001d5dd
   1d574:	0001d69b 	.word	0x0001d69b
   1d578:	0001d529 	.word	0x0001d529
   1d57c:	0001d529 	.word	0x0001d529
   1d580:	0001d6db 	.word	0x0001d6db
   1d584:	0001d529 	.word	0x0001d529
   1d588:	0001d5dd 	.word	0x0001d5dd
   1d58c:	0001d529 	.word	0x0001d529
   1d590:	0001d529 	.word	0x0001d529
   1d594:	0001d6a3 	.word	0x0001d6a3
   1d598:	680b      	ldr	r3, [r1, #0]
   1d59a:	1d1a      	adds	r2, r3, #4
   1d59c:	681b      	ldr	r3, [r3, #0]
   1d59e:	600a      	str	r2, [r1, #0]
   1d5a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1d5a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1d5a8:	2301      	movs	r3, #1
   1d5aa:	e0a3      	b.n	1d6f4 <_printf_i+0x1f4>
   1d5ac:	6825      	ldr	r5, [r4, #0]
   1d5ae:	6808      	ldr	r0, [r1, #0]
   1d5b0:	062e      	lsls	r6, r5, #24
   1d5b2:	f100 0304 	add.w	r3, r0, #4
   1d5b6:	d50a      	bpl.n	1d5ce <_printf_i+0xce>
   1d5b8:	6805      	ldr	r5, [r0, #0]
   1d5ba:	600b      	str	r3, [r1, #0]
   1d5bc:	2d00      	cmp	r5, #0
   1d5be:	da03      	bge.n	1d5c8 <_printf_i+0xc8>
   1d5c0:	232d      	movs	r3, #45	; 0x2d
   1d5c2:	426d      	negs	r5, r5
   1d5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1d5c8:	485e      	ldr	r0, [pc, #376]	; (1d744 <_printf_i+0x244>)
   1d5ca:	230a      	movs	r3, #10
   1d5cc:	e019      	b.n	1d602 <_printf_i+0x102>
   1d5ce:	f015 0f40 	tst.w	r5, #64	; 0x40
   1d5d2:	6805      	ldr	r5, [r0, #0]
   1d5d4:	600b      	str	r3, [r1, #0]
   1d5d6:	bf18      	it	ne
   1d5d8:	b22d      	sxthne	r5, r5
   1d5da:	e7ef      	b.n	1d5bc <_printf_i+0xbc>
   1d5dc:	680b      	ldr	r3, [r1, #0]
   1d5de:	6825      	ldr	r5, [r4, #0]
   1d5e0:	1d18      	adds	r0, r3, #4
   1d5e2:	6008      	str	r0, [r1, #0]
   1d5e4:	0628      	lsls	r0, r5, #24
   1d5e6:	d501      	bpl.n	1d5ec <_printf_i+0xec>
   1d5e8:	681d      	ldr	r5, [r3, #0]
   1d5ea:	e002      	b.n	1d5f2 <_printf_i+0xf2>
   1d5ec:	0669      	lsls	r1, r5, #25
   1d5ee:	d5fb      	bpl.n	1d5e8 <_printf_i+0xe8>
   1d5f0:	881d      	ldrh	r5, [r3, #0]
   1d5f2:	4854      	ldr	r0, [pc, #336]	; (1d744 <_printf_i+0x244>)
   1d5f4:	2f6f      	cmp	r7, #111	; 0x6f
   1d5f6:	bf0c      	ite	eq
   1d5f8:	2308      	moveq	r3, #8
   1d5fa:	230a      	movne	r3, #10
   1d5fc:	2100      	movs	r1, #0
   1d5fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1d602:	6866      	ldr	r6, [r4, #4]
   1d604:	60a6      	str	r6, [r4, #8]
   1d606:	2e00      	cmp	r6, #0
   1d608:	bfa2      	ittt	ge
   1d60a:	6821      	ldrge	r1, [r4, #0]
   1d60c:	f021 0104 	bicge.w	r1, r1, #4
   1d610:	6021      	strge	r1, [r4, #0]
   1d612:	b90d      	cbnz	r5, 1d618 <_printf_i+0x118>
   1d614:	2e00      	cmp	r6, #0
   1d616:	d04d      	beq.n	1d6b4 <_printf_i+0x1b4>
   1d618:	4616      	mov	r6, r2
   1d61a:	fbb5 f1f3 	udiv	r1, r5, r3
   1d61e:	fb03 5711 	mls	r7, r3, r1, r5
   1d622:	5dc7      	ldrb	r7, [r0, r7]
   1d624:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1d628:	462f      	mov	r7, r5
   1d62a:	42bb      	cmp	r3, r7
   1d62c:	460d      	mov	r5, r1
   1d62e:	d9f4      	bls.n	1d61a <_printf_i+0x11a>
   1d630:	2b08      	cmp	r3, #8
   1d632:	d10b      	bne.n	1d64c <_printf_i+0x14c>
   1d634:	6823      	ldr	r3, [r4, #0]
   1d636:	07df      	lsls	r7, r3, #31
   1d638:	d508      	bpl.n	1d64c <_printf_i+0x14c>
   1d63a:	6923      	ldr	r3, [r4, #16]
   1d63c:	6861      	ldr	r1, [r4, #4]
   1d63e:	4299      	cmp	r1, r3
   1d640:	bfde      	ittt	le
   1d642:	2330      	movle	r3, #48	; 0x30
   1d644:	f806 3c01 	strble.w	r3, [r6, #-1]
   1d648:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   1d64c:	1b92      	subs	r2, r2, r6
   1d64e:	6122      	str	r2, [r4, #16]
   1d650:	f8cd a000 	str.w	sl, [sp]
   1d654:	464b      	mov	r3, r9
   1d656:	aa03      	add	r2, sp, #12
   1d658:	4621      	mov	r1, r4
   1d65a:	4640      	mov	r0, r8
   1d65c:	f009 fb3b 	bl	26cd6 <_printf_common>
   1d660:	3001      	adds	r0, #1
   1d662:	d14c      	bne.n	1d6fe <_printf_i+0x1fe>
   1d664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d668:	b004      	add	sp, #16
   1d66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d66e:	4835      	ldr	r0, [pc, #212]	; (1d744 <_printf_i+0x244>)
   1d670:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1d674:	6823      	ldr	r3, [r4, #0]
   1d676:	680e      	ldr	r6, [r1, #0]
   1d678:	061f      	lsls	r7, r3, #24
   1d67a:	f856 5b04 	ldr.w	r5, [r6], #4
   1d67e:	600e      	str	r6, [r1, #0]
   1d680:	d514      	bpl.n	1d6ac <_printf_i+0x1ac>
   1d682:	07d9      	lsls	r1, r3, #31
   1d684:	bf44      	itt	mi
   1d686:	f043 0320 	orrmi.w	r3, r3, #32
   1d68a:	6023      	strmi	r3, [r4, #0]
   1d68c:	b91d      	cbnz	r5, 1d696 <_printf_i+0x196>
   1d68e:	6823      	ldr	r3, [r4, #0]
   1d690:	f023 0320 	bic.w	r3, r3, #32
   1d694:	6023      	str	r3, [r4, #0]
   1d696:	2310      	movs	r3, #16
   1d698:	e7b0      	b.n	1d5fc <_printf_i+0xfc>
   1d69a:	6823      	ldr	r3, [r4, #0]
   1d69c:	f043 0320 	orr.w	r3, r3, #32
   1d6a0:	6023      	str	r3, [r4, #0]
   1d6a2:	2378      	movs	r3, #120	; 0x78
   1d6a4:	4828      	ldr	r0, [pc, #160]	; (1d748 <_printf_i+0x248>)
   1d6a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1d6aa:	e7e3      	b.n	1d674 <_printf_i+0x174>
   1d6ac:	065e      	lsls	r6, r3, #25
   1d6ae:	bf48      	it	mi
   1d6b0:	b2ad      	uxthmi	r5, r5
   1d6b2:	e7e6      	b.n	1d682 <_printf_i+0x182>
   1d6b4:	4616      	mov	r6, r2
   1d6b6:	e7bb      	b.n	1d630 <_printf_i+0x130>
   1d6b8:	680b      	ldr	r3, [r1, #0]
   1d6ba:	6826      	ldr	r6, [r4, #0]
   1d6bc:	6960      	ldr	r0, [r4, #20]
   1d6be:	1d1d      	adds	r5, r3, #4
   1d6c0:	600d      	str	r5, [r1, #0]
   1d6c2:	0635      	lsls	r5, r6, #24
   1d6c4:	681b      	ldr	r3, [r3, #0]
   1d6c6:	d501      	bpl.n	1d6cc <_printf_i+0x1cc>
   1d6c8:	6018      	str	r0, [r3, #0]
   1d6ca:	e002      	b.n	1d6d2 <_printf_i+0x1d2>
   1d6cc:	0671      	lsls	r1, r6, #25
   1d6ce:	d5fb      	bpl.n	1d6c8 <_printf_i+0x1c8>
   1d6d0:	8018      	strh	r0, [r3, #0]
   1d6d2:	2300      	movs	r3, #0
   1d6d4:	6123      	str	r3, [r4, #16]
   1d6d6:	4616      	mov	r6, r2
   1d6d8:	e7ba      	b.n	1d650 <_printf_i+0x150>
   1d6da:	680b      	ldr	r3, [r1, #0]
   1d6dc:	1d1a      	adds	r2, r3, #4
   1d6de:	600a      	str	r2, [r1, #0]
   1d6e0:	681e      	ldr	r6, [r3, #0]
   1d6e2:	6862      	ldr	r2, [r4, #4]
   1d6e4:	2100      	movs	r1, #0
   1d6e6:	4630      	mov	r0, r6
   1d6e8:	f7e2 fcfa 	bl	e0 <memchr>
   1d6ec:	b108      	cbz	r0, 1d6f2 <_printf_i+0x1f2>
   1d6ee:	1b80      	subs	r0, r0, r6
   1d6f0:	6060      	str	r0, [r4, #4]
   1d6f2:	6863      	ldr	r3, [r4, #4]
   1d6f4:	6123      	str	r3, [r4, #16]
   1d6f6:	2300      	movs	r3, #0
   1d6f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1d6fc:	e7a8      	b.n	1d650 <_printf_i+0x150>
   1d6fe:	6923      	ldr	r3, [r4, #16]
   1d700:	4632      	mov	r2, r6
   1d702:	4649      	mov	r1, r9
   1d704:	4640      	mov	r0, r8
   1d706:	47d0      	blx	sl
   1d708:	3001      	adds	r0, #1
   1d70a:	d0ab      	beq.n	1d664 <_printf_i+0x164>
   1d70c:	6823      	ldr	r3, [r4, #0]
   1d70e:	079b      	lsls	r3, r3, #30
   1d710:	d413      	bmi.n	1d73a <_printf_i+0x23a>
   1d712:	68e0      	ldr	r0, [r4, #12]
   1d714:	9b03      	ldr	r3, [sp, #12]
   1d716:	4298      	cmp	r0, r3
   1d718:	bfb8      	it	lt
   1d71a:	4618      	movlt	r0, r3
   1d71c:	e7a4      	b.n	1d668 <_printf_i+0x168>
   1d71e:	2301      	movs	r3, #1
   1d720:	4632      	mov	r2, r6
   1d722:	4649      	mov	r1, r9
   1d724:	4640      	mov	r0, r8
   1d726:	47d0      	blx	sl
   1d728:	3001      	adds	r0, #1
   1d72a:	d09b      	beq.n	1d664 <_printf_i+0x164>
   1d72c:	3501      	adds	r5, #1
   1d72e:	68e3      	ldr	r3, [r4, #12]
   1d730:	9903      	ldr	r1, [sp, #12]
   1d732:	1a5b      	subs	r3, r3, r1
   1d734:	42ab      	cmp	r3, r5
   1d736:	dcf2      	bgt.n	1d71e <_printf_i+0x21e>
   1d738:	e7eb      	b.n	1d712 <_printf_i+0x212>
   1d73a:	2500      	movs	r5, #0
   1d73c:	f104 0619 	add.w	r6, r4, #25
   1d740:	e7f5      	b.n	1d72e <_printf_i+0x22e>
   1d742:	bf00      	nop
   1d744:	00029113 	.word	0x00029113
   1d748:	00029124 	.word	0x00029124

0001d74c <_scanf_chars>:
   1d74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d750:	4615      	mov	r5, r2
   1d752:	688a      	ldr	r2, [r1, #8]
   1d754:	4680      	mov	r8, r0
   1d756:	460c      	mov	r4, r1
   1d758:	b932      	cbnz	r2, 1d768 <_scanf_chars+0x1c>
   1d75a:	698a      	ldr	r2, [r1, #24]
   1d75c:	2a00      	cmp	r2, #0
   1d75e:	bf0c      	ite	eq
   1d760:	2201      	moveq	r2, #1
   1d762:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   1d766:	608a      	str	r2, [r1, #8]
   1d768:	6822      	ldr	r2, [r4, #0]
   1d76a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1d7f8 <_scanf_chars+0xac>
   1d76e:	06d1      	lsls	r1, r2, #27
   1d770:	bf5f      	itttt	pl
   1d772:	681a      	ldrpl	r2, [r3, #0]
   1d774:	1d11      	addpl	r1, r2, #4
   1d776:	6019      	strpl	r1, [r3, #0]
   1d778:	6816      	ldrpl	r6, [r2, #0]
   1d77a:	2700      	movs	r7, #0
   1d77c:	69a0      	ldr	r0, [r4, #24]
   1d77e:	b188      	cbz	r0, 1d7a4 <_scanf_chars+0x58>
   1d780:	2801      	cmp	r0, #1
   1d782:	d107      	bne.n	1d794 <_scanf_chars+0x48>
   1d784:	682b      	ldr	r3, [r5, #0]
   1d786:	781a      	ldrb	r2, [r3, #0]
   1d788:	6963      	ldr	r3, [r4, #20]
   1d78a:	5c9b      	ldrb	r3, [r3, r2]
   1d78c:	b953      	cbnz	r3, 1d7a4 <_scanf_chars+0x58>
   1d78e:	bb27      	cbnz	r7, 1d7da <_scanf_chars+0x8e>
   1d790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d794:	2802      	cmp	r0, #2
   1d796:	d120      	bne.n	1d7da <_scanf_chars+0x8e>
   1d798:	682b      	ldr	r3, [r5, #0]
   1d79a:	781b      	ldrb	r3, [r3, #0]
   1d79c:	f813 3009 	ldrb.w	r3, [r3, r9]
   1d7a0:	071b      	lsls	r3, r3, #28
   1d7a2:	d41a      	bmi.n	1d7da <_scanf_chars+0x8e>
   1d7a4:	6823      	ldr	r3, [r4, #0]
   1d7a6:	06da      	lsls	r2, r3, #27
   1d7a8:	bf5e      	ittt	pl
   1d7aa:	682b      	ldrpl	r3, [r5, #0]
   1d7ac:	781b      	ldrbpl	r3, [r3, #0]
   1d7ae:	f806 3b01 	strbpl.w	r3, [r6], #1
   1d7b2:	682a      	ldr	r2, [r5, #0]
   1d7b4:	686b      	ldr	r3, [r5, #4]
   1d7b6:	3201      	adds	r2, #1
   1d7b8:	602a      	str	r2, [r5, #0]
   1d7ba:	68a2      	ldr	r2, [r4, #8]
   1d7bc:	3b01      	subs	r3, #1
   1d7be:	3a01      	subs	r2, #1
   1d7c0:	606b      	str	r3, [r5, #4]
   1d7c2:	3701      	adds	r7, #1
   1d7c4:	60a2      	str	r2, [r4, #8]
   1d7c6:	b142      	cbz	r2, 1d7da <_scanf_chars+0x8e>
   1d7c8:	2b00      	cmp	r3, #0
   1d7ca:	dcd7      	bgt.n	1d77c <_scanf_chars+0x30>
   1d7cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1d7d0:	4629      	mov	r1, r5
   1d7d2:	4640      	mov	r0, r8
   1d7d4:	4798      	blx	r3
   1d7d6:	2800      	cmp	r0, #0
   1d7d8:	d0d0      	beq.n	1d77c <_scanf_chars+0x30>
   1d7da:	6823      	ldr	r3, [r4, #0]
   1d7dc:	f013 0310 	ands.w	r3, r3, #16
   1d7e0:	d105      	bne.n	1d7ee <_scanf_chars+0xa2>
   1d7e2:	68e2      	ldr	r2, [r4, #12]
   1d7e4:	3201      	adds	r2, #1
   1d7e6:	60e2      	str	r2, [r4, #12]
   1d7e8:	69a2      	ldr	r2, [r4, #24]
   1d7ea:	b102      	cbz	r2, 1d7ee <_scanf_chars+0xa2>
   1d7ec:	7033      	strb	r3, [r6, #0]
   1d7ee:	6923      	ldr	r3, [r4, #16]
   1d7f0:	441f      	add	r7, r3
   1d7f2:	6127      	str	r7, [r4, #16]
   1d7f4:	2000      	movs	r0, #0
   1d7f6:	e7cb      	b.n	1d790 <_scanf_chars+0x44>
   1d7f8:	00028e3c 	.word	0x00028e3c

0001d7fc <_scanf_i>:
   1d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d800:	4698      	mov	r8, r3
   1d802:	4b74      	ldr	r3, [pc, #464]	; (1d9d4 <_scanf_i+0x1d8>)
   1d804:	460c      	mov	r4, r1
   1d806:	4682      	mov	sl, r0
   1d808:	4616      	mov	r6, r2
   1d80a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1d80e:	b087      	sub	sp, #28
   1d810:	ab03      	add	r3, sp, #12
   1d812:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   1d816:	4b70      	ldr	r3, [pc, #448]	; (1d9d8 <_scanf_i+0x1dc>)
   1d818:	69a1      	ldr	r1, [r4, #24]
   1d81a:	4a70      	ldr	r2, [pc, #448]	; (1d9dc <_scanf_i+0x1e0>)
   1d81c:	2903      	cmp	r1, #3
   1d81e:	bf18      	it	ne
   1d820:	461a      	movne	r2, r3
   1d822:	68a3      	ldr	r3, [r4, #8]
   1d824:	9201      	str	r2, [sp, #4]
   1d826:	1e5a      	subs	r2, r3, #1
   1d828:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   1d82c:	bf88      	it	hi
   1d82e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   1d832:	4627      	mov	r7, r4
   1d834:	bf82      	ittt	hi
   1d836:	eb03 0905 	addhi.w	r9, r3, r5
   1d83a:	f240 135d 	movwhi	r3, #349	; 0x15d
   1d83e:	60a3      	strhi	r3, [r4, #8]
   1d840:	f857 3b1c 	ldr.w	r3, [r7], #28
   1d844:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   1d848:	bf98      	it	ls
   1d84a:	f04f 0900 	movls.w	r9, #0
   1d84e:	6023      	str	r3, [r4, #0]
   1d850:	463d      	mov	r5, r7
   1d852:	f04f 0b00 	mov.w	fp, #0
   1d856:	6831      	ldr	r1, [r6, #0]
   1d858:	ab03      	add	r3, sp, #12
   1d85a:	7809      	ldrb	r1, [r1, #0]
   1d85c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   1d860:	2202      	movs	r2, #2
   1d862:	f7e2 fc3d 	bl	e0 <memchr>
   1d866:	b328      	cbz	r0, 1d8b4 <_scanf_i+0xb8>
   1d868:	f1bb 0f01 	cmp.w	fp, #1
   1d86c:	d159      	bne.n	1d922 <_scanf_i+0x126>
   1d86e:	6862      	ldr	r2, [r4, #4]
   1d870:	b92a      	cbnz	r2, 1d87e <_scanf_i+0x82>
   1d872:	6822      	ldr	r2, [r4, #0]
   1d874:	2308      	movs	r3, #8
   1d876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1d87a:	6063      	str	r3, [r4, #4]
   1d87c:	6022      	str	r2, [r4, #0]
   1d87e:	6822      	ldr	r2, [r4, #0]
   1d880:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   1d884:	6022      	str	r2, [r4, #0]
   1d886:	68a2      	ldr	r2, [r4, #8]
   1d888:	1e51      	subs	r1, r2, #1
   1d88a:	60a1      	str	r1, [r4, #8]
   1d88c:	b192      	cbz	r2, 1d8b4 <_scanf_i+0xb8>
   1d88e:	6832      	ldr	r2, [r6, #0]
   1d890:	1c51      	adds	r1, r2, #1
   1d892:	6031      	str	r1, [r6, #0]
   1d894:	7812      	ldrb	r2, [r2, #0]
   1d896:	f805 2b01 	strb.w	r2, [r5], #1
   1d89a:	6872      	ldr	r2, [r6, #4]
   1d89c:	3a01      	subs	r2, #1
   1d89e:	2a00      	cmp	r2, #0
   1d8a0:	6072      	str	r2, [r6, #4]
   1d8a2:	dc07      	bgt.n	1d8b4 <_scanf_i+0xb8>
   1d8a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   1d8a8:	4631      	mov	r1, r6
   1d8aa:	4650      	mov	r0, sl
   1d8ac:	4790      	blx	r2
   1d8ae:	2800      	cmp	r0, #0
   1d8b0:	f040 8085 	bne.w	1d9be <_scanf_i+0x1c2>
   1d8b4:	f10b 0b01 	add.w	fp, fp, #1
   1d8b8:	f1bb 0f03 	cmp.w	fp, #3
   1d8bc:	d1cb      	bne.n	1d856 <_scanf_i+0x5a>
   1d8be:	6863      	ldr	r3, [r4, #4]
   1d8c0:	b90b      	cbnz	r3, 1d8c6 <_scanf_i+0xca>
   1d8c2:	230a      	movs	r3, #10
   1d8c4:	6063      	str	r3, [r4, #4]
   1d8c6:	6863      	ldr	r3, [r4, #4]
   1d8c8:	4945      	ldr	r1, [pc, #276]	; (1d9e0 <_scanf_i+0x1e4>)
   1d8ca:	6960      	ldr	r0, [r4, #20]
   1d8cc:	1ac9      	subs	r1, r1, r3
   1d8ce:	f009 fa6f 	bl	26db0 <__sccl>
   1d8d2:	f04f 0b00 	mov.w	fp, #0
   1d8d6:	68a3      	ldr	r3, [r4, #8]
   1d8d8:	6822      	ldr	r2, [r4, #0]
   1d8da:	2b00      	cmp	r3, #0
   1d8dc:	d03d      	beq.n	1d95a <_scanf_i+0x15e>
   1d8de:	6831      	ldr	r1, [r6, #0]
   1d8e0:	6960      	ldr	r0, [r4, #20]
   1d8e2:	f891 c000 	ldrb.w	ip, [r1]
   1d8e6:	f810 000c 	ldrb.w	r0, [r0, ip]
   1d8ea:	2800      	cmp	r0, #0
   1d8ec:	d035      	beq.n	1d95a <_scanf_i+0x15e>
   1d8ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   1d8f2:	d124      	bne.n	1d93e <_scanf_i+0x142>
   1d8f4:	0510      	lsls	r0, r2, #20
   1d8f6:	d522      	bpl.n	1d93e <_scanf_i+0x142>
   1d8f8:	f10b 0b01 	add.w	fp, fp, #1
   1d8fc:	f1b9 0f00 	cmp.w	r9, #0
   1d900:	d003      	beq.n	1d90a <_scanf_i+0x10e>
   1d902:	3301      	adds	r3, #1
   1d904:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1d908:	60a3      	str	r3, [r4, #8]
   1d90a:	6873      	ldr	r3, [r6, #4]
   1d90c:	3b01      	subs	r3, #1
   1d90e:	2b00      	cmp	r3, #0
   1d910:	6073      	str	r3, [r6, #4]
   1d912:	dd1b      	ble.n	1d94c <_scanf_i+0x150>
   1d914:	6833      	ldr	r3, [r6, #0]
   1d916:	3301      	adds	r3, #1
   1d918:	6033      	str	r3, [r6, #0]
   1d91a:	68a3      	ldr	r3, [r4, #8]
   1d91c:	3b01      	subs	r3, #1
   1d91e:	60a3      	str	r3, [r4, #8]
   1d920:	e7d9      	b.n	1d8d6 <_scanf_i+0xda>
   1d922:	f1bb 0f02 	cmp.w	fp, #2
   1d926:	d1ae      	bne.n	1d886 <_scanf_i+0x8a>
   1d928:	6822      	ldr	r2, [r4, #0]
   1d92a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   1d92e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1d932:	d1bf      	bne.n	1d8b4 <_scanf_i+0xb8>
   1d934:	2310      	movs	r3, #16
   1d936:	6063      	str	r3, [r4, #4]
   1d938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1d93c:	e7a2      	b.n	1d884 <_scanf_i+0x88>
   1d93e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   1d942:	6022      	str	r2, [r4, #0]
   1d944:	780b      	ldrb	r3, [r1, #0]
   1d946:	f805 3b01 	strb.w	r3, [r5], #1
   1d94a:	e7de      	b.n	1d90a <_scanf_i+0x10e>
   1d94c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1d950:	4631      	mov	r1, r6
   1d952:	4650      	mov	r0, sl
   1d954:	4798      	blx	r3
   1d956:	2800      	cmp	r0, #0
   1d958:	d0df      	beq.n	1d91a <_scanf_i+0x11e>
   1d95a:	6823      	ldr	r3, [r4, #0]
   1d95c:	05d9      	lsls	r1, r3, #23
   1d95e:	d50d      	bpl.n	1d97c <_scanf_i+0x180>
   1d960:	42bd      	cmp	r5, r7
   1d962:	d909      	bls.n	1d978 <_scanf_i+0x17c>
   1d964:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1d968:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1d96c:	4632      	mov	r2, r6
   1d96e:	4650      	mov	r0, sl
   1d970:	4798      	blx	r3
   1d972:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   1d976:	464d      	mov	r5, r9
   1d978:	42bd      	cmp	r5, r7
   1d97a:	d028      	beq.n	1d9ce <_scanf_i+0x1d2>
   1d97c:	6822      	ldr	r2, [r4, #0]
   1d97e:	f012 0210 	ands.w	r2, r2, #16
   1d982:	d113      	bne.n	1d9ac <_scanf_i+0x1b0>
   1d984:	702a      	strb	r2, [r5, #0]
   1d986:	6863      	ldr	r3, [r4, #4]
   1d988:	9e01      	ldr	r6, [sp, #4]
   1d98a:	4639      	mov	r1, r7
   1d98c:	4650      	mov	r0, sl
   1d98e:	47b0      	blx	r6
   1d990:	f8d8 3000 	ldr.w	r3, [r8]
   1d994:	6821      	ldr	r1, [r4, #0]
   1d996:	1d1a      	adds	r2, r3, #4
   1d998:	f8c8 2000 	str.w	r2, [r8]
   1d99c:	f011 0f20 	tst.w	r1, #32
   1d9a0:	681b      	ldr	r3, [r3, #0]
   1d9a2:	d00f      	beq.n	1d9c4 <_scanf_i+0x1c8>
   1d9a4:	6018      	str	r0, [r3, #0]
   1d9a6:	68e3      	ldr	r3, [r4, #12]
   1d9a8:	3301      	adds	r3, #1
   1d9aa:	60e3      	str	r3, [r4, #12]
   1d9ac:	1bed      	subs	r5, r5, r7
   1d9ae:	44ab      	add	fp, r5
   1d9b0:	6925      	ldr	r5, [r4, #16]
   1d9b2:	445d      	add	r5, fp
   1d9b4:	6125      	str	r5, [r4, #16]
   1d9b6:	2000      	movs	r0, #0
   1d9b8:	b007      	add	sp, #28
   1d9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9be:	f04f 0b00 	mov.w	fp, #0
   1d9c2:	e7ca      	b.n	1d95a <_scanf_i+0x15e>
   1d9c4:	07ca      	lsls	r2, r1, #31
   1d9c6:	bf4c      	ite	mi
   1d9c8:	8018      	strhmi	r0, [r3, #0]
   1d9ca:	6018      	strpl	r0, [r3, #0]
   1d9cc:	e7eb      	b.n	1d9a6 <_scanf_i+0x1aa>
   1d9ce:	2001      	movs	r0, #1
   1d9d0:	e7f2      	b.n	1d9b8 <_scanf_i+0x1bc>
   1d9d2:	bf00      	nop
   1d9d4:	000271b8 	.word	0x000271b8
   1d9d8:	00026aff 	.word	0x00026aff
   1d9dc:	00026afb 	.word	0x00026afb
   1d9e0:	0002914b 	.word	0x0002914b

0001d9e4 <sniprintf>:
   1d9e4:	b40c      	push	{r2, r3}
   1d9e6:	b530      	push	{r4, r5, lr}
   1d9e8:	4b17      	ldr	r3, [pc, #92]	; (1da48 <sniprintf+0x64>)
   1d9ea:	1e0c      	subs	r4, r1, #0
   1d9ec:	681d      	ldr	r5, [r3, #0]
   1d9ee:	b09b      	sub	sp, #108	; 0x6c
   1d9f0:	da08      	bge.n	1da04 <sniprintf+0x20>
   1d9f2:	238b      	movs	r3, #139	; 0x8b
   1d9f4:	602b      	str	r3, [r5, #0]
   1d9f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d9fa:	b01b      	add	sp, #108	; 0x6c
   1d9fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1da00:	b002      	add	sp, #8
   1da02:	4770      	bx	lr
   1da04:	f44f 7302 	mov.w	r3, #520	; 0x208
   1da08:	f8ad 3010 	strh.w	r3, [sp, #16]
   1da0c:	bf14      	ite	ne
   1da0e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   1da12:	4623      	moveq	r3, r4
   1da14:	9303      	str	r3, [sp, #12]
   1da16:	9306      	str	r3, [sp, #24]
   1da18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1da1c:	9001      	str	r0, [sp, #4]
   1da1e:	9005      	str	r0, [sp, #20]
   1da20:	f8ad 3012 	strh.w	r3, [sp, #18]
   1da24:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1da26:	ab1f      	add	r3, sp, #124	; 0x7c
   1da28:	a901      	add	r1, sp, #4
   1da2a:	4628      	mov	r0, r5
   1da2c:	9300      	str	r3, [sp, #0]
   1da2e:	f7ff faef 	bl	1d010 <_svfiprintf_r>
   1da32:	1c43      	adds	r3, r0, #1
   1da34:	bfbc      	itt	lt
   1da36:	238b      	movlt	r3, #139	; 0x8b
   1da38:	602b      	strlt	r3, [r5, #0]
   1da3a:	2c00      	cmp	r4, #0
   1da3c:	d0dd      	beq.n	1d9fa <sniprintf+0x16>
   1da3e:	9b01      	ldr	r3, [sp, #4]
   1da40:	2200      	movs	r2, #0
   1da42:	701a      	strb	r2, [r3, #0]
   1da44:	e7d9      	b.n	1d9fa <sniprintf+0x16>
   1da46:	bf00      	nop
   1da48:	2000099c 	.word	0x2000099c

0001da4c <battery_raw_to_mv>:
	return (DIVIDER*600*(((uint32_t)raw*4*1000) >> RESOLUTION))/1000;
   1da4c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   1da50:	4358      	muls	r0, r3
   1da52:	0b00      	lsrs	r0, r0, #12
   1da54:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   1da58:	4358      	muls	r0, r3
}
   1da5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1da5e:	fbb0 f0f3 	udiv	r0, r0, r3
   1da62:	4770      	bx	lr

0001da64 <battery_show_status>:

void battery_show_status()
{
	battery_update_percentage();
   1da64:	f7e5 b828 	b.w	2ab8 <battery_update_percentage>

0001da68 <le_param_req>:
}
   1da68:	2001      	movs	r0, #1
   1da6a:	4770      	bx	lr

0001da6c <le_param_updated>:
}
   1da6c:	4770      	bx	lr

0001da6e <disconnected>:
{
   1da6e:	b508      	push	{r3, lr}
	cts_sync_enable(false);
   1da70:	2000      	movs	r0, #0
   1da72:	f7e5 f9ab 	bl	2dcc <cts_sync_enable>
	gfx_bt_set_label(BT_ADVERTISING_ON);
   1da76:	2001      	movs	r0, #1
   1da78:	f7e5 fad6 	bl	3028 <gfx_bt_set_label>
}
   1da7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gfx_update();
   1da80:	f000 b863 	b.w	1db4a <gfx_update>

0001da84 <connected>:
{
   1da84:	b510      	push	{r4, lr}
	if (err) {
   1da86:	460c      	mov	r4, r1
   1da88:	b949      	cbnz	r1, 1da9e <connected+0x1a>
	cts_sync_enable(true);
   1da8a:	2001      	movs	r0, #1
   1da8c:	f7e5 f99e 	bl	2dcc <cts_sync_enable>
	gfx_bt_set_label(BT_CONNECTED);
   1da90:	4620      	mov	r0, r4
   1da92:	f7e5 fac9 	bl	3028 <gfx_bt_set_label>
}
   1da96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gfx_update();
   1da9a:	f000 b856 	b.w	1db4a <gfx_update>
}
   1da9e:	bd10      	pop	{r4, pc}

0001daa0 <device_set_power_state.constprop.0>:
 * @param arg Caller passed argument to callback function
 *
 * @retval 0 If successful in queuing the request or changing the state.
 * @retval Errno Negative errno code if failure. Callback will not be called.
 */
static inline int device_set_power_state(const struct device *dev,
   1daa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
					 uint32_t device_power_state,
					 device_pm_cb cb, void *arg)
{
	if (dev->device_pm_control) {
   1daa2:	6904      	ldr	r4, [r0, #16]
static inline int device_set_power_state(const struct device *dev,
   1daa4:	9103      	str	r1, [sp, #12]
	if (dev->device_pm_control) {
   1daa6:	b134      	cbz	r4, 1dab6 <device_set_power_state.constprop.0+0x16>
		return dev->device_pm_control(dev,
   1daa8:	2300      	movs	r3, #0
   1daaa:	9300      	str	r3, [sp, #0]
   1daac:	aa03      	add	r2, sp, #12
   1daae:	2101      	movs	r1, #1
   1dab0:	47a0      	blx	r4
	} else {
		return device_pm_control_nop(dev,
						 DEVICE_PM_SET_POWER_STATE,
						 &device_power_state, cb, arg);
	}
}
   1dab2:	b004      	add	sp, #16
   1dab4:	bd10      	pop	{r4, pc}
		return device_pm_control_nop(dev,
   1dab6:	9400      	str	r4, [sp, #0]
   1dab8:	4623      	mov	r3, r4
   1daba:	aa03      	add	r2, sp, #12
   1dabc:	2101      	movs	r1, #1
   1dabe:	f008 fa87 	bl	25fd0 <device_pm_control_nop>
   1dac2:	e7f6      	b.n	1dab2 <device_set_power_state.constprop.0+0x12>

0001dac4 <gpio_add_callback>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1dac4:	6883      	ldr	r3, [r0, #8]
   1dac6:	69db      	ldr	r3, [r3, #28]
   1dac8:	b10b      	cbz	r3, 1dace <gpio_add_callback+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1daca:	2201      	movs	r2, #1
   1dacc:	4718      	bx	r3
}
   1dace:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dad2:	4770      	bx	lr

0001dad4 <gpio_pin_configure>:
{
   1dad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gpio_driver_data *data =
   1dad8:	e9d0 8702 	ldrd	r8, r7, [r0, #8]
{
   1dadc:	4604      	mov	r4, r0
   1dade:	460e      	mov	r6, r1
   1dae0:	4615      	mov	r5, r2
	return api->pin_configure(port, pin, flags);
   1dae2:	6883      	ldr	r3, [r0, #8]
   1dae4:	681b      	ldr	r3, [r3, #0]
   1dae6:	4798      	blx	r3
	if (ret != 0) {
   1dae8:	b9d0      	cbnz	r0, 1db20 <gpio_pin_configure+0x4c>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1daea:	683b      	ldr	r3, [r7, #0]
   1daec:	2201      	movs	r2, #1
   1daee:	07e9      	lsls	r1, r5, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1daf0:	fa02 f206 	lsl.w	r2, r2, r6
   1daf4:	bf4c      	ite	mi
   1daf6:	4313      	orrmi	r3, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1daf8:	4393      	bicpl	r3, r2
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
   1dafa:	f415 4fc0 	tst.w	r5, #24576	; 0x6000
   1dafe:	603b      	str	r3, [r7, #0]
   1db00:	d00e      	beq.n	1db20 <gpio_pin_configure+0x4c>
	    && (api->pin_interrupt_configure != NULL)) {
   1db02:	f8d8 3018 	ldr.w	r3, [r8, #24]
   1db06:	b15b      	cbz	r3, 1db20 <gpio_pin_configure+0x4c>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1db08:	68a3      	ldr	r3, [r4, #8]
   1db0a:	699f      	ldr	r7, [r3, #24]
   1db0c:	f405 32b0 	and.w	r2, r5, #90112	; 0x16000
   1db10:	f405 23c0 	and.w	r3, r5, #393216	; 0x60000
   1db14:	4631      	mov	r1, r6
   1db16:	4620      	mov	r0, r4
   1db18:	46bc      	mov	ip, r7
}
   1db1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1db1e:	4760      	bx	ip
}
   1db20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001db24 <gpio_port_get>:
{
   1db24:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_data *const data =
   1db26:	68c5      	ldr	r5, [r0, #12]
{
   1db28:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
   1db2a:	6883      	ldr	r3, [r0, #8]
   1db2c:	685b      	ldr	r3, [r3, #4]
   1db2e:	4798      	blx	r3
	if (ret == 0) {
   1db30:	b918      	cbnz	r0, 1db3a <gpio_port_get+0x16>
		*value ^= data->invert;
   1db32:	6823      	ldr	r3, [r4, #0]
   1db34:	682a      	ldr	r2, [r5, #0]
   1db36:	4053      	eors	r3, r2
   1db38:	6023      	str	r3, [r4, #0]
}
   1db3a:	bd38      	pop	{r3, r4, r5, pc}

0001db3c <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
   1db3c:	b508      	push	{r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
   1db3e:	f7fa ffd9 	bl	18af4 <lv_disp_get_default>
}
   1db42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
   1db46:	f003 bb5d 	b.w	21204 <lv_disp_get_scr_act>

0001db4a <gfx_update>:
	lv_task_handler();
   1db4a:	f7fb b9f7 	b.w	18f3c <lv_task_handler>

0001db4e <gui_handle_button_event>:
	}
	//gfx_update();
}

int gui_handle_button_event(void)
{
   1db4e:	b508      	push	{r3, lr}
	clock_increment_local_time();
   1db50:	f7e5 f880 	bl	2c54 <clock_increment_local_time>
	clock_show_time();
   1db54:	f7e5 f896 	bl	2c84 <clock_show_time>
	battery_show_status();
   1db58:	f7ff ff84 	bl	1da64 <battery_show_status>
	//gfx_update();

	return 1;
}
   1db5c:	2001      	movs	r0, #1
   1db5e:	bd08      	pop	{r3, pc}

0001db60 <main>:
*/


/* ******** Functions ******** */
void main(void)
{
   1db60:	b508      	push	{r3, lr}
	LOG_INF("Welcome to opensource watch!");
	LOG_INF("This is free software with ABSOLUTELY NO WARRANTY.");

	gfx_init();
   1db62:	f7e5 f9c9 	bl	2ef8 <gfx_init>
	clock_init();
   1db66:	f7e5 f837 	bl	2bd8 <clock_init>
	battery_init();
   1db6a:	f7e4 ff6b 	bl	2a44 <battery_init>
	display_init();
   1db6e:	f7e5 f945 	bl	2dfc <display_init>
	event_handler_init();
   1db72:	f7e5 f983 	bl	2e7c <event_handler_init>
	gfx_update();
   1db76:	f7ff ffe8 	bl	1db4a <gfx_update>
#endif
#ifdef CONFIG_MCUMGR_CMD_IMG_MGMT
	img_mgmt_register_group();
#endif
*/
	bt_init();
   1db7a:	f7e4 ffc5 	bl	2b08 <bt_init>
   1db7e:	f7e6 fdd5 	bl	472c <arch_cpu_idle>
   1db82:	e7fc      	b.n	1db7e <main+0x1e>

0001db84 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1db84:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1db86:	f04f 0c0a 	mov.w	ip, #10
{
   1db8a:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   1db8c:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   1db8e:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   1db90:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   1db92:	b111      	cbz	r1, 1db9a <u8_to_dec+0x16>
   1db94:	3e01      	subs	r6, #1
   1db96:	d101      	bne.n	1db9c <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1db98:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   1db9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1db9c:	42a2      	cmp	r2, r4
		digit = value / divisor;
   1db9e:	fbb2 f7f4 	udiv	r7, r2, r4
   1dba2:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1dba4:	d202      	bcs.n	1dbac <u8_to_dec+0x28>
   1dba6:	2c01      	cmp	r4, #1
   1dba8:	d000      	beq.n	1dbac <u8_to_dec+0x28>
   1dbaa:	b130      	cbz	r0, 1dbba <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1dbac:	3330      	adds	r3, #48	; 0x30
   1dbae:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   1dbb2:	3901      	subs	r1, #1
			num_digits++;
   1dbb4:	1c43      	adds	r3, r0, #1
			buflen--;
   1dbb6:	b2c9      	uxtb	r1, r1
			num_digits++;
   1dbb8:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   1dbba:	fb04 2217 	mls	r2, r4, r7, r2
   1dbbe:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   1dbc0:	fbb4 f4fc 	udiv	r4, r4, ip
   1dbc4:	e7e5      	b.n	1db92 <u8_to_dec+0xe>

0001dbc6 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1dbc6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1dbca:	b2db      	uxtb	r3, r3
   1dbcc:	2b09      	cmp	r3, #9
   1dbce:	d802      	bhi.n	1dbd6 <char2hex+0x10>
		*x = c - '0';
   1dbd0:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1dbd2:	2000      	movs	r0, #0
   1dbd4:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1dbd6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1dbda:	2b05      	cmp	r3, #5
   1dbdc:	d802      	bhi.n	1dbe4 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1dbde:	3857      	subs	r0, #87	; 0x57
   1dbe0:	7008      	strb	r0, [r1, #0]
   1dbe2:	e7f6      	b.n	1dbd2 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1dbe4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1dbe8:	2b05      	cmp	r3, #5
   1dbea:	d801      	bhi.n	1dbf0 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1dbec:	3837      	subs	r0, #55	; 0x37
   1dbee:	e7f7      	b.n	1dbe0 <char2hex+0x1a>
		return -EINVAL;
   1dbf0:	f06f 0015 	mvn.w	r0, #21
}
   1dbf4:	4770      	bx	lr

0001dbf6 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1dbf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dbf8:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1dbfa:	f001 0001 	and.w	r0, r1, #1
   1dbfe:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1dc02:	429d      	cmp	r5, r3
   1dc04:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1dc08:	d903      	bls.n	1dc12 <hex2bin+0x1c>
		return 0;
   1dc0a:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1dc0c:	4628      	mov	r0, r5
   1dc0e:	b003      	add	sp, #12
   1dc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1dc12:	b158      	cbz	r0, 1dc2c <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1dc14:	7820      	ldrb	r0, [r4, #0]
   1dc16:	f10d 0107 	add.w	r1, sp, #7
   1dc1a:	f7ff ffd4 	bl	1dbc6 <char2hex>
   1dc1e:	2800      	cmp	r0, #0
   1dc20:	dbf3      	blt.n	1dc0a <hex2bin+0x14>
		buf[0] = dec;
   1dc22:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dc26:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   1dc2a:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1dc2c:	3401      	adds	r4, #1
   1dc2e:	4416      	add	r6, r2
   1dc30:	42b2      	cmp	r2, r6
   1dc32:	d0eb      	beq.n	1dc0c <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1dc34:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1dc38:	f10d 0107 	add.w	r1, sp, #7
   1dc3c:	f7ff ffc3 	bl	1dbc6 <char2hex>
   1dc40:	2800      	cmp	r0, #0
   1dc42:	dbe2      	blt.n	1dc0a <hex2bin+0x14>
		buf[i] = dec << 4;
   1dc44:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dc48:	011b      	lsls	r3, r3, #4
   1dc4a:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1dc4c:	f814 0b02 	ldrb.w	r0, [r4], #2
   1dc50:	f10d 0107 	add.w	r1, sp, #7
   1dc54:	f7ff ffb7 	bl	1dbc6 <char2hex>
   1dc58:	2800      	cmp	r0, #0
   1dc5a:	dbd6      	blt.n	1dc0a <hex2bin+0x14>
		buf[i] += dec;
   1dc5c:	7813      	ldrb	r3, [r2, #0]
   1dc5e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1dc62:	440b      	add	r3, r1
   1dc64:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1dc68:	e7e2      	b.n	1dc30 <hex2bin+0x3a>

0001dc6a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1dc6a:	4603      	mov	r3, r0
   1dc6c:	b140      	cbz	r0, 1dc80 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1dc6e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1dc70:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1dc74:	2a02      	cmp	r2, #2
   1dc76:	d006      	beq.n	1dc86 <sys_notify_validate+0x1c>
   1dc78:	2a03      	cmp	r2, #3
   1dc7a:	d004      	beq.n	1dc86 <sys_notify_validate+0x1c>
   1dc7c:	2a01      	cmp	r2, #1
   1dc7e:	d005      	beq.n	1dc8c <sys_notify_validate+0x22>
		return -EINVAL;
   1dc80:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1dc84:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1dc86:	681a      	ldr	r2, [r3, #0]
   1dc88:	2a00      	cmp	r2, #0
   1dc8a:	d0f9      	beq.n	1dc80 <sys_notify_validate+0x16>
		notify->result = 0;
   1dc8c:	2000      	movs	r0, #0
   1dc8e:	6098      	str	r0, [r3, #8]
   1dc90:	4770      	bx	lr

0001dc92 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1dc92:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1dc94:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1dc98:	2a02      	cmp	r2, #2
{
   1dc9a:	b510      	push	{r4, lr}
   1dc9c:	4603      	mov	r3, r0
	notify->result = res;
   1dc9e:	6081      	str	r1, [r0, #8]
	switch (method) {
   1dca0:	d00a      	beq.n	1dcb8 <sys_notify_finalize+0x26>
   1dca2:	2a03      	cmp	r2, #3
   1dca4:	d10b      	bne.n	1dcbe <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1dca6:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1dca8:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1dcaa:	2200      	movs	r2, #0
   1dcac:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1dcae:	b108      	cbz	r0, 1dcb4 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   1dcb0:	f7fd fd40 	bl	1b734 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1dcb4:	4620      	mov	r0, r4
   1dcb6:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1dcb8:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1dcba:	2400      	movs	r4, #0
		break;
   1dcbc:	e7f5      	b.n	1dcaa <sys_notify_finalize+0x18>
	switch (method) {
   1dcbe:	2400      	movs	r4, #0
   1dcc0:	4620      	mov	r0, r4
   1dcc2:	e7f2      	b.n	1dcaa <sys_notify_finalize+0x18>

0001dcc4 <arch_printk_char_out>:
}
   1dcc4:	2000      	movs	r0, #0
   1dcc6:	4770      	bx	lr

0001dcc8 <str_out>:
{
   1dcc8:	b530      	push	{r4, r5, lr}
   1dcca:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1dccc:	680c      	ldr	r4, [r1, #0]
   1dcce:	1c55      	adds	r5, r2, #1
   1dcd0:	b114      	cbz	r4, 1dcd8 <str_out+0x10>
   1dcd2:	684b      	ldr	r3, [r1, #4]
   1dcd4:	4293      	cmp	r3, r2
   1dcd6:	dc01      	bgt.n	1dcdc <str_out+0x14>
		ctx->count++;
   1dcd8:	608d      	str	r5, [r1, #8]
}
   1dcda:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1dcdc:	3b01      	subs	r3, #1
   1dcde:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1dce0:	bf08      	it	eq
   1dce2:	2200      	moveq	r2, #0
   1dce4:	608d      	str	r5, [r1, #8]
   1dce6:	bf0c      	ite	eq
   1dce8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1dcea:	54a0      	strbne	r0, [r4, r2]
   1dcec:	e7f5      	b.n	1dcda <str_out+0x12>

0001dcee <printk>:
{
   1dcee:	b40f      	push	{r0, r1, r2, r3}
   1dcf0:	b507      	push	{r0, r1, r2, lr}
   1dcf2:	a904      	add	r1, sp, #16
   1dcf4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1dcf8:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1dcfa:	f7e5 f9b9 	bl	3070 <vprintk>
}
   1dcfe:	b003      	add	sp, #12
   1dd00:	f85d eb04 	ldr.w	lr, [sp], #4
   1dd04:	b004      	add	sp, #16
   1dd06:	4770      	bx	lr

0001dd08 <snprintk>:
{
   1dd08:	b40c      	push	{r2, r3}
   1dd0a:	b507      	push	{r0, r1, r2, lr}
   1dd0c:	ab04      	add	r3, sp, #16
   1dd0e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1dd12:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1dd14:	f7e5 f9ba 	bl	308c <vsnprintk>
}
   1dd18:	b003      	add	sp, #12
   1dd1a:	f85d eb04 	ldr.w	lr, [sp], #4
   1dd1e:	b002      	add	sp, #8
   1dd20:	4770      	bx	lr

0001dd22 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1dd22:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1dd24:	f013 0307 	ands.w	r3, r3, #7
   1dd28:	d105      	bne.n	1dd36 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1dd2a:	6803      	ldr	r3, [r0, #0]
   1dd2c:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1dd2e:	bf0c      	ite	eq
   1dd30:	2000      	moveq	r0, #0
   1dd32:	2003      	movne	r0, #3
   1dd34:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1dd36:	2b02      	cmp	r3, #2
   1dd38:	d105      	bne.n	1dd46 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1dd3a:	8b43      	ldrh	r3, [r0, #26]
   1dd3c:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1dd3e:	bf14      	ite	ne
   1dd40:	2000      	movne	r0, #0
   1dd42:	2004      	moveq	r0, #4
   1dd44:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1dd46:	2b01      	cmp	r3, #1
   1dd48:	d105      	bne.n	1dd56 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1dd4a:	6803      	ldr	r3, [r0, #0]
   1dd4c:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1dd4e:	bf0c      	ite	eq
   1dd50:	2000      	moveq	r0, #0
   1dd52:	2005      	movne	r0, #5
   1dd54:	4770      	bx	lr
	int evt = EVT_NOP;
   1dd56:	2000      	movs	r0, #0
}
   1dd58:	4770      	bx	lr

0001dd5a <notify_one>:
{
   1dd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd5e:	460d      	mov	r5, r1
   1dd60:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1dd62:	4619      	mov	r1, r3
   1dd64:	1d28      	adds	r0, r5, #4
{
   1dd66:	4690      	mov	r8, r2
   1dd68:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1dd6a:	f7ff ff92 	bl	1dc92 <sys_notify_finalize>
	if (cb) {
   1dd6e:	4604      	mov	r4, r0
   1dd70:	b138      	cbz	r0, 1dd82 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1dd72:	4633      	mov	r3, r6
   1dd74:	4642      	mov	r2, r8
   1dd76:	4629      	mov	r1, r5
   1dd78:	4638      	mov	r0, r7
   1dd7a:	46a4      	mov	ip, r4
}
   1dd7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1dd80:	4760      	bx	ip
}
   1dd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dd86 <transition_complete>:
{
   1dd86:	b410      	push	{r4}
	__asm__ volatile(
   1dd88:	f04f 0420 	mov.w	r4, #32
   1dd8c:	f3ef 8211 	mrs	r2, BASEPRI
   1dd90:	f384 8811 	msr	BASEPRI, r4
   1dd94:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1dd98:	6141      	str	r1, [r0, #20]
}
   1dd9a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1dd9c:	2101      	movs	r1, #1
   1dd9e:	f7e5 b989 	b.w	30b4 <process_event>

0001dda2 <validate_args>:
{
   1dda2:	b510      	push	{r4, lr}
   1dda4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1dda6:	b140      	cbz	r0, 1ddba <validate_args+0x18>
   1dda8:	b139      	cbz	r1, 1ddba <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1ddaa:	1d08      	adds	r0, r1, #4
   1ddac:	f7ff ff5d 	bl	1dc6a <sys_notify_validate>
	if ((rv == 0)
   1ddb0:	b928      	cbnz	r0, 1ddbe <validate_args+0x1c>
	    && ((cli->notify.flags
   1ddb2:	68a3      	ldr	r3, [r4, #8]
   1ddb4:	f033 0303 	bics.w	r3, r3, #3
   1ddb8:	d001      	beq.n	1ddbe <validate_args+0x1c>
		rv = -EINVAL;
   1ddba:	f06f 0015 	mvn.w	r0, #21
}
   1ddbe:	bd10      	pop	{r4, pc}

0001ddc0 <onoff_manager_init>:
{
   1ddc0:	b538      	push	{r3, r4, r5, lr}
   1ddc2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1ddc4:	4605      	mov	r5, r0
   1ddc6:	b158      	cbz	r0, 1dde0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1ddc8:	b151      	cbz	r1, 1dde0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1ddca:	680b      	ldr	r3, [r1, #0]
   1ddcc:	b143      	cbz	r3, 1dde0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1ddce:	684b      	ldr	r3, [r1, #4]
   1ddd0:	b133      	cbz	r3, 1dde0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ddd2:	221c      	movs	r2, #28
   1ddd4:	2100      	movs	r1, #0
   1ddd6:	f008 fe59 	bl	26a8c <memset>
   1ddda:	612c      	str	r4, [r5, #16]
	return 0;
   1dddc:	2000      	movs	r0, #0
}
   1ddde:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1dde0:	f06f 0015 	mvn.w	r0, #21
   1dde4:	e7fb      	b.n	1ddde <onoff_manager_init+0x1e>

0001dde6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1dde6:	b570      	push	{r4, r5, r6, lr}
   1dde8:	4604      	mov	r4, r0
   1ddea:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1ddec:	f7ff ffd9 	bl	1dda2 <validate_args>

	if (rv < 0) {
   1ddf0:	1e05      	subs	r5, r0, #0
   1ddf2:	db31      	blt.n	1de58 <onoff_request+0x72>
   1ddf4:	f04f 0320 	mov.w	r3, #32
   1ddf8:	f3ef 8111 	mrs	r1, BASEPRI
   1ddfc:	f383 8811 	msr	BASEPRI, r3
   1de00:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1de04:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1de06:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1de08:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1de0c:	42ab      	cmp	r3, r5
   1de0e:	f000 0207 	and.w	r2, r0, #7
   1de12:	d02e      	beq.n	1de72 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1de14:	2a02      	cmp	r2, #2
   1de16:	d10e      	bne.n	1de36 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1de18:	3301      	adds	r3, #1
   1de1a:	8363      	strh	r3, [r4, #26]
	rv = state;
   1de1c:	4615      	mov	r5, r2
		notify = true;
   1de1e:	2301      	movs	r3, #1
	__asm__ volatile(
   1de20:	f381 8811 	msr	BASEPRI, r1
   1de24:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1de28:	b1b3      	cbz	r3, 1de58 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1de2a:	2300      	movs	r3, #0
   1de2c:	4631      	mov	r1, r6
   1de2e:	4620      	mov	r0, r4
   1de30:	f7ff ff93 	bl	1dd5a <notify_one>
   1de34:	e010      	b.n	1de58 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1de36:	0783      	lsls	r3, r0, #30
   1de38:	d001      	beq.n	1de3e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1de3a:	2a06      	cmp	r2, #6
   1de3c:	d10e      	bne.n	1de5c <onoff_request+0x76>
	parent->next = child;
   1de3e:	2300      	movs	r3, #0
   1de40:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1de42:	6863      	ldr	r3, [r4, #4]
   1de44:	b993      	cbnz	r3, 1de6c <onoff_request+0x86>
	list->head = node;
   1de46:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1de4a:	4615      	mov	r5, r2
   1de4c:	b962      	cbnz	r2, 1de68 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1de4e:	460a      	mov	r2, r1
   1de50:	4620      	mov	r0, r4
   1de52:	2102      	movs	r1, #2
   1de54:	f7e5 f92e 	bl	30b4 <process_event>
		}
	}

	return rv;
}
   1de58:	4628      	mov	r0, r5
   1de5a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1de5c:	2a05      	cmp	r2, #5
   1de5e:	bf0c      	ite	eq
   1de60:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1de64:	f06f 0504 	mvnne.w	r5, #4
   1de68:	2300      	movs	r3, #0
   1de6a:	e7d9      	b.n	1de20 <onoff_request+0x3a>
	parent->next = child;
   1de6c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1de6e:	6066      	str	r6, [r4, #4]
}
   1de70:	e7eb      	b.n	1de4a <onoff_request+0x64>
		rv = -EAGAIN;
   1de72:	f06f 050a 	mvn.w	r5, #10
   1de76:	e7f7      	b.n	1de68 <onoff_request+0x82>

0001de78 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1de78:	b510      	push	{r4, lr}
	__asm__ volatile(
   1de7a:	f04f 0320 	mov.w	r3, #32
   1de7e:	f3ef 8211 	mrs	r2, BASEPRI
   1de82:	f383 8811 	msr	BASEPRI, r3
   1de86:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1de8a:	8b04      	ldrh	r4, [r0, #24]
   1de8c:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1de90:	2c02      	cmp	r4, #2
   1de92:	d00a      	beq.n	1deaa <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   1de94:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1de96:	bf0c      	ite	eq
   1de98:	f06f 0004 	mvneq.w	r0, #4
   1de9c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1dea0:	f382 8811 	msr	BASEPRI, r2
   1dea4:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1dea8:	e008      	b.n	1debc <onoff_release+0x44>
	mgr->refs -= 1U;
   1deaa:	8b43      	ldrh	r3, [r0, #26]
   1deac:	3b01      	subs	r3, #1
   1deae:	b29b      	uxth	r3, r3
   1deb0:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1deb2:	b923      	cbnz	r3, 1debe <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1deb4:	4621      	mov	r1, r4
   1deb6:	f7e5 f8fd 	bl	30b4 <process_event>
	int rv = state;
   1deba:	4620      	mov	r0, r4
}
   1debc:	bd10      	pop	{r4, pc}
	int rv = state;
   1debe:	4620      	mov	r0, r4
   1dec0:	e7ee      	b.n	1dea0 <onoff_release+0x28>

0001dec2 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   1dec2:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1dec4:	f7fd f85e 	bl	1af84 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   1dec8:	2000      	movs	r0, #0
   1deca:	bd08      	pop	{r3, pc}

0001decc <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   1decc:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   1dece:	f7fd f87f 	bl	1afd0 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   1ded2:	f110 0f0b 	cmn.w	r0, #11
   1ded6:	d005      	beq.n	1dee4 <sys_sem_take+0x18>
   1ded8:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   1dedc:	bf08      	it	eq
   1dede:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   1dee2:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   1dee4:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   1dee8:	e7fb      	b.n	1dee2 <sys_sem_take+0x16>

0001deea <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1deea:	4604      	mov	r4, r0
   1deec:	b508      	push	{r3, lr}
   1deee:	4608      	mov	r0, r1
   1def0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1def2:	461a      	mov	r2, r3
   1def4:	47a0      	blx	r4
	return z_impl_k_current_get();
   1def6:	f7fd f83f 	bl	1af78 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1defa:	f7e6 fd81 	bl	4a00 <z_impl_k_thread_abort>

0001defe <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1defe:	b510      	push	{r4, lr}
   1df00:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1df02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1df06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1df0a:	4620      	mov	r0, r4
   1df0c:	f7fc fc76 	bl	1a7fc <z_impl_k_queue_get>
   1df10:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1df12:	2800      	cmp	r0, #0
   1df14:	d0f5      	beq.n	1df02 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1df16:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1df18:	6842      	ldr	r2, [r0, #4]
   1df1a:	f3bf 8f5b 	dmb	ish
   1df1e:	e853 1f00 	ldrex	r1, [r3]
   1df22:	f021 0c01 	bic.w	ip, r1, #1
   1df26:	e843 ce00 	strex	lr, ip, [r3]
   1df2a:	f1be 0f00 	cmp.w	lr, #0
   1df2e:	d1f6      	bne.n	1df1e <z_work_q_main+0x20>
   1df30:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1df34:	07cb      	lsls	r3, r1, #31
   1df36:	d500      	bpl.n	1df3a <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1df38:	4790      	blx	r2
	z_impl_k_yield();
   1df3a:	f7fc ffaf 	bl	1ae9c <z_impl_k_yield>
   1df3e:	e7e0      	b.n	1df02 <z_work_q_main+0x4>

0001df40 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1df40:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1df42:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1df46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1df4a:	bf2c      	ite	cs
   1df4c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1df50:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1df54:	4770      	bx	lr

0001df56 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1df56:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1df5a:	6880      	ldr	r0, [r0, #8]
   1df5c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1df60:	bf2c      	ite	cs
   1df62:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1df66:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1df6a:	4770      	bx	lr

0001df6c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1df6c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1df6e:	2201      	movs	r2, #1
   1df70:	f7ff ffe6 	bl	1df40 <chunk_field>
}
   1df74:	0840      	lsrs	r0, r0, #1
   1df76:	bd08      	pop	{r3, pc}

0001df78 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1df78:	6883      	ldr	r3, [r0, #8]
   1df7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1df7e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1df82:	d308      	bcc.n	1df96 <set_chunk_used+0x1e>
		if (used) {
   1df84:	684b      	ldr	r3, [r1, #4]
   1df86:	b11a      	cbz	r2, 1df90 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1df88:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1df8c:	604b      	str	r3, [r1, #4]
   1df8e:	4770      	bx	lr
   1df90:	f023 0301 	bic.w	r3, r3, #1
   1df94:	e7fa      	b.n	1df8c <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1df96:	884b      	ldrh	r3, [r1, #2]
   1df98:	b11a      	cbz	r2, 1dfa2 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1df9a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1df9e:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1dfa0:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1dfa2:	f023 0301 	bic.w	r3, r3, #1
   1dfa6:	e7fa      	b.n	1df9e <set_chunk_used+0x26>

0001dfa8 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1dfa8:	0053      	lsls	r3, r2, #1
   1dfaa:	2201      	movs	r2, #1
   1dfac:	f7ff bfd3 	b.w	1df56 <chunk_set>

0001dfb0 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1dfb0:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1dfb2:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1dfb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1dfb8:	bf2c      	ite	cs
   1dfba:	2002      	movcs	r0, #2
   1dfbc:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1dfbe:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1dfc0:	fab0 f080 	clz	r0, r0
}
   1dfc4:	f1c0 001f 	rsb	r0, r0, #31
   1dfc8:	4770      	bx	lr

0001dfca <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1dfca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfce:	4616      	mov	r6, r2
   1dfd0:	4604      	mov	r4, r0
   1dfd2:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1dfd4:	f7ff ffca 	bl	1df6c <chunk_size>
   1dfd8:	4631      	mov	r1, r6
   1dfda:	4605      	mov	r5, r0
   1dfdc:	4620      	mov	r0, r4
   1dfde:	f7ff ffc5 	bl	1df6c <chunk_size>
   1dfe2:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1dfe4:	462a      	mov	r2, r5
   1dfe6:	4639      	mov	r1, r7
   1dfe8:	4620      	mov	r0, r4
   1dfea:	f7ff ffdd 	bl	1dfa8 <set_chunk_size>
	return c + chunk_size(h, c);
   1dfee:	4631      	mov	r1, r6
   1dff0:	4620      	mov	r0, r4
   1dff2:	f7ff ffbb 	bl	1df6c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1dff6:	462b      	mov	r3, r5
   1dff8:	1831      	adds	r1, r6, r0
   1dffa:	2200      	movs	r2, #0
   1dffc:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1dffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e002:	f7ff bfa8 	b.w	1df56 <chunk_set>

0001e006 <split_chunks>:
{
   1e006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e00a:	4614      	mov	r4, r2
   1e00c:	4605      	mov	r5, r0
   1e00e:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1e010:	f7ff ffac 	bl	1df6c <chunk_size>
	size_t lsz = rc - lc;
   1e014:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1e018:	1b37      	subs	r7, r6, r4
   1e01a:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1e01c:	4642      	mov	r2, r8
   1e01e:	4631      	mov	r1, r6
   1e020:	4628      	mov	r0, r5
   1e022:	f7ff ffc1 	bl	1dfa8 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1e026:	463a      	mov	r2, r7
   1e028:	4621      	mov	r1, r4
   1e02a:	4628      	mov	r0, r5
   1e02c:	f7ff ffbc 	bl	1dfa8 <set_chunk_size>
   1e030:	4643      	mov	r3, r8
   1e032:	2200      	movs	r2, #0
   1e034:	4621      	mov	r1, r4
   1e036:	4628      	mov	r0, r5
   1e038:	f7ff ff8d 	bl	1df56 <chunk_set>
	return c + chunk_size(h, c);
   1e03c:	4621      	mov	r1, r4
   1e03e:	4628      	mov	r0, r5
   1e040:	f7ff ff94 	bl	1df6c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e044:	463b      	mov	r3, r7
   1e046:	1821      	adds	r1, r4, r0
   1e048:	2200      	movs	r2, #0
   1e04a:	4628      	mov	r0, r5
}
   1e04c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e050:	f7ff bf81 	b.w	1df56 <chunk_set>

0001e054 <free_list_remove_bidx>:
{
   1e054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e058:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1e05a:	2203      	movs	r2, #3
   1e05c:	460e      	mov	r6, r1
   1e05e:	4604      	mov	r4, r0
   1e060:	f7ff ff6e 	bl	1df40 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1e064:	4286      	cmp	r6, r0
   1e066:	4605      	mov	r5, r0
   1e068:	f107 0804 	add.w	r8, r7, #4
   1e06c:	d10b      	bne.n	1e086 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1e06e:	2301      	movs	r3, #1
   1e070:	fa03 f707 	lsl.w	r7, r3, r7
   1e074:	68e3      	ldr	r3, [r4, #12]
   1e076:	ea23 0307 	bic.w	r3, r3, r7
   1e07a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1e07c:	2300      	movs	r3, #0
   1e07e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1e082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1e086:	4631      	mov	r1, r6
   1e088:	2202      	movs	r2, #2
   1e08a:	4620      	mov	r0, r4
   1e08c:	f7ff ff58 	bl	1df40 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1e090:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1e092:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1e094:	4601      	mov	r1, r0
		b->next = second;
   1e096:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1e09a:	4620      	mov	r0, r4
   1e09c:	2203      	movs	r2, #3
   1e09e:	f7ff ff5a 	bl	1df56 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1e0a2:	4633      	mov	r3, r6
   1e0a4:	4629      	mov	r1, r5
   1e0a6:	4620      	mov	r0, r4
   1e0a8:	2202      	movs	r2, #2
}
   1e0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e0ae:	f7ff bf52 	b.w	1df56 <chunk_set>

0001e0b2 <free_list_remove>:
{
   1e0b2:	b538      	push	{r3, r4, r5, lr}
   1e0b4:	4604      	mov	r4, r0
   1e0b6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1e0b8:	f7ff ff58 	bl	1df6c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1e0bc:	68a3      	ldr	r3, [r4, #8]
   1e0be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e0c2:	4601      	mov	r1, r0
   1e0c4:	d301      	bcc.n	1e0ca <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1e0c6:	2801      	cmp	r0, #1
   1e0c8:	d009      	beq.n	1e0de <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e0ca:	4620      	mov	r0, r4
   1e0cc:	f7ff ff70 	bl	1dfb0 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1e0d0:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e0d2:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1e0d4:	4620      	mov	r0, r4
}
   1e0d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1e0da:	f7ff bfbb 	b.w	1e054 <free_list_remove_bidx>
}
   1e0de:	bd38      	pop	{r3, r4, r5, pc}

0001e0e0 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1e0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e0e4:	4604      	mov	r4, r0
   1e0e6:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1e0e8:	f7ff ff62 	bl	1dfb0 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1e0ec:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1e0ee:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1e0f0:	4620      	mov	r0, r4
   1e0f2:	f7ff ff5d 	bl	1dfb0 <bucket_idx>
   1e0f6:	42a8      	cmp	r0, r5
   1e0f8:	da03      	bge.n	1e102 <alloc_chunk+0x22>
		return 0;
   1e0fa:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1e0fc:	4630      	mov	r0, r6
   1e0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1e102:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1e106:	f8da 9010 	ldr.w	r9, [sl, #16]
   1e10a:	f1b9 0f00 	cmp.w	r9, #0
   1e10e:	d019      	beq.n	1e144 <alloc_chunk+0x64>
   1e110:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1e112:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1e116:	4620      	mov	r0, r4
   1e118:	4631      	mov	r1, r6
   1e11a:	f7ff ff27 	bl	1df6c <chunk_size>
   1e11e:	4540      	cmp	r0, r8
   1e120:	d305      	bcc.n	1e12e <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   1e122:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1e124:	4631      	mov	r1, r6
   1e126:	4620      	mov	r0, r4
   1e128:	f7ff ff94 	bl	1e054 <free_list_remove_bidx>
		return c;
   1e12c:	e7e6      	b.n	1e0fc <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1e12e:	2203      	movs	r2, #3
   1e130:	4631      	mov	r1, r6
   1e132:	4620      	mov	r0, r4
   1e134:	f7ff ff04 	bl	1df40 <chunk_field>
		} while (--i && b->next != first);
   1e138:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1e13a:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1e13e:	d001      	beq.n	1e144 <alloc_chunk+0x64>
   1e140:	4581      	cmp	r9, r0
   1e142:	d1e6      	bne.n	1e112 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1e144:	68e3      	ldr	r3, [r4, #12]
   1e146:	3501      	adds	r5, #1
   1e148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e14c:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1e14e:	401a      	ands	r2, r3
   1e150:	d0d3      	beq.n	1e0fa <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1e152:	fa92 f2a2 	rbit	r2, r2
   1e156:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1e15a:	1d13      	adds	r3, r2, #4
   1e15c:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1e160:	e7e0      	b.n	1e124 <alloc_chunk+0x44>

0001e162 <free_list_add>:
{
   1e162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e166:	4604      	mov	r4, r0
   1e168:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1e16a:	f7ff feff 	bl	1df6c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1e16e:	68a3      	ldr	r3, [r4, #8]
   1e170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e174:	4601      	mov	r1, r0
   1e176:	d301      	bcc.n	1e17c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1e178:	2801      	cmp	r0, #1
   1e17a:	d035      	beq.n	1e1e8 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e17c:	4620      	mov	r0, r4
   1e17e:	f7ff ff17 	bl	1dfb0 <bucket_idx>
	if (b->next == 0U) {
   1e182:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1e186:	6916      	ldr	r6, [r2, #16]
   1e188:	b99e      	cbnz	r6, 1e1b2 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1e18a:	2301      	movs	r3, #1
   1e18c:	fa03 f000 	lsl.w	r0, r3, r0
   1e190:	68e3      	ldr	r3, [r4, #12]
   1e192:	4303      	orrs	r3, r0
   1e194:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1e196:	4629      	mov	r1, r5
		b->next = c;
   1e198:	6115      	str	r5, [r2, #16]
   1e19a:	462b      	mov	r3, r5
   1e19c:	2202      	movs	r2, #2
   1e19e:	4620      	mov	r0, r4
   1e1a0:	f7ff fed9 	bl	1df56 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1e1a4:	2203      	movs	r2, #3
   1e1a6:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1e1a8:	4620      	mov	r0, r4
}
   1e1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e1ae:	f7ff bed2 	b.w	1df56 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1e1b2:	2202      	movs	r2, #2
   1e1b4:	4631      	mov	r1, r6
   1e1b6:	4620      	mov	r0, r4
   1e1b8:	f7ff fec2 	bl	1df40 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1e1bc:	2202      	movs	r2, #2
   1e1be:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1e1c0:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1e1c2:	4629      	mov	r1, r5
   1e1c4:	4620      	mov	r0, r4
   1e1c6:	f7ff fec6 	bl	1df56 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1e1ca:	4633      	mov	r3, r6
   1e1cc:	2203      	movs	r2, #3
   1e1ce:	4629      	mov	r1, r5
   1e1d0:	4620      	mov	r0, r4
   1e1d2:	f7ff fec0 	bl	1df56 <chunk_set>
   1e1d6:	2203      	movs	r2, #3
   1e1d8:	4639      	mov	r1, r7
   1e1da:	462b      	mov	r3, r5
   1e1dc:	4620      	mov	r0, r4
   1e1de:	f7ff feba 	bl	1df56 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1e1e2:	2202      	movs	r2, #2
   1e1e4:	4631      	mov	r1, r6
   1e1e6:	e7df      	b.n	1e1a8 <free_list_add+0x46>
   1e1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e1ec <sys_heap_free>:
{
   1e1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   1e1ee:	2900      	cmp	r1, #0
   1e1f0:	d04e      	beq.n	1e290 <sys_heap_free+0xa4>
	struct z_heap *h = heap->heap;
   1e1f2:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1e1f4:	68ab      	ldr	r3, [r5, #8]
   1e1f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e1fa:	bf2c      	ite	cs
   1e1fc:	2408      	movcs	r4, #8
   1e1fe:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e200:	1b0c      	subs	r4, r1, r4
   1e202:	1b64      	subs	r4, r4, r5
   1e204:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1e206:	2200      	movs	r2, #0
   1e208:	4621      	mov	r1, r4
   1e20a:	4628      	mov	r0, r5
   1e20c:	f7ff feb4 	bl	1df78 <set_chunk_used>
	return c + chunk_size(h, c);
   1e210:	4621      	mov	r1, r4
   1e212:	f7ff feab 	bl	1df6c <chunk_size>
   1e216:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e218:	2201      	movs	r2, #1
   1e21a:	4631      	mov	r1, r6
   1e21c:	4628      	mov	r0, r5
   1e21e:	f7ff fe8f 	bl	1df40 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1e222:	07c3      	lsls	r3, r0, #31
   1e224:	d40c      	bmi.n	1e240 <sys_heap_free+0x54>
		free_list_remove(h, right_chunk(h, c));
   1e226:	4631      	mov	r1, r6
   1e228:	4628      	mov	r0, r5
   1e22a:	f7ff ff42 	bl	1e0b2 <free_list_remove>
	return c + chunk_size(h, c);
   1e22e:	4621      	mov	r1, r4
   1e230:	4628      	mov	r0, r5
   1e232:	f7ff fe9b 	bl	1df6c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1e236:	4621      	mov	r1, r4
   1e238:	1822      	adds	r2, r4, r0
   1e23a:	4628      	mov	r0, r5
   1e23c:	f7ff fec5 	bl	1dfca <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1e240:	2200      	movs	r2, #0
   1e242:	4621      	mov	r1, r4
   1e244:	4628      	mov	r0, r5
   1e246:	f7ff fe7b 	bl	1df40 <chunk_field>
   1e24a:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e24c:	2201      	movs	r2, #1
   1e24e:	4639      	mov	r1, r7
   1e250:	4628      	mov	r0, r5
   1e252:	f7ff fe75 	bl	1df40 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1e256:	f010 0601 	ands.w	r6, r0, #1
   1e25a:	d113      	bne.n	1e284 <sys_heap_free+0x98>
		free_list_remove(h, left_chunk(h, c));
   1e25c:	4639      	mov	r1, r7
   1e25e:	4628      	mov	r0, r5
   1e260:	f7ff ff27 	bl	1e0b2 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1e264:	4621      	mov	r1, r4
   1e266:	4632      	mov	r2, r6
   1e268:	4628      	mov	r0, r5
   1e26a:	f7ff fe69 	bl	1df40 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1e26e:	4622      	mov	r2, r4
   1e270:	1a21      	subs	r1, r4, r0
   1e272:	4628      	mov	r0, r5
   1e274:	f7ff fea9 	bl	1dfca <merge_chunks>
   1e278:	4621      	mov	r1, r4
   1e27a:	4632      	mov	r2, r6
   1e27c:	4628      	mov	r0, r5
   1e27e:	f7ff fe5f 	bl	1df40 <chunk_field>
   1e282:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1e284:	4621      	mov	r1, r4
   1e286:	4628      	mov	r0, r5
}
   1e288:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1e28c:	f7ff bf69 	b.w	1e162 <free_list_add>
}
   1e290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e292 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1e292:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   1e294:	b909      	cbnz	r1, 1e29a <sys_heap_alloc+0x8>
		return NULL;
   1e296:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1e298:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   1e29a:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1e29c:	68ab      	ldr	r3, [r5, #8]
   1e29e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e2a2:	bf2c      	ite	cs
   1e2a4:	2208      	movcs	r2, #8
   1e2a6:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e2a8:	1dcc      	adds	r4, r1, #7
   1e2aa:	4414      	add	r4, r2
   1e2ac:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1e2ae:	4621      	mov	r1, r4
   1e2b0:	4628      	mov	r0, r5
   1e2b2:	f7ff ff15 	bl	1e0e0 <alloc_chunk>
	if (c == 0U) {
   1e2b6:	4606      	mov	r6, r0
   1e2b8:	2800      	cmp	r0, #0
   1e2ba:	d0ec      	beq.n	1e296 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   1e2bc:	4601      	mov	r1, r0
   1e2be:	4628      	mov	r0, r5
   1e2c0:	f7ff fe54 	bl	1df6c <chunk_size>
   1e2c4:	42a0      	cmp	r0, r4
   1e2c6:	d909      	bls.n	1e2dc <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   1e2c8:	4434      	add	r4, r6
   1e2ca:	4631      	mov	r1, r6
   1e2cc:	4628      	mov	r0, r5
   1e2ce:	4622      	mov	r2, r4
   1e2d0:	f7ff fe99 	bl	1e006 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1e2d4:	4621      	mov	r1, r4
   1e2d6:	4628      	mov	r0, r5
   1e2d8:	f7ff ff43 	bl	1e162 <free_list_add>
	set_chunk_used(h, c, true);
   1e2dc:	4628      	mov	r0, r5
   1e2de:	2201      	movs	r2, #1
   1e2e0:	4631      	mov	r1, r6
   1e2e2:	f7ff fe49 	bl	1df78 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1e2e6:	68ab      	ldr	r3, [r5, #8]
   1e2e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e2ec:	bf2c      	ite	cs
   1e2ee:	2008      	movcs	r0, #8
   1e2f0:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1e2f2:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1e2f6:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1e2f8:	e7ce      	b.n	1e298 <sys_heap_alloc+0x6>

0001e2fa <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1e2fa:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1e2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e300:	bf2c      	ite	cs
   1e302:	2508      	movcs	r5, #8
   1e304:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1e306:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e308:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e30a:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e30c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e310:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1e314:	2200      	movs	r2, #0
   1e316:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1e318:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   1e31a:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1e31c:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   1e31e:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1e322:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1e324:	4629      	mov	r1, r5
	h->len = buf_sz;
   1e326:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1e328:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1e32a:	4620      	mov	r0, r4
   1e32c:	f7ff fe40 	bl	1dfb0 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1e330:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e332:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1e334:	1c41      	adds	r1, r0, #1
   1e336:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1e338:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1e33c:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1e33e:	428b      	cmp	r3, r1
   1e340:	db29      	blt.n	1e396 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1e342:	4632      	mov	r2, r6
   1e344:	4620      	mov	r0, r4
   1e346:	2100      	movs	r1, #0
   1e348:	f7ff fe2e 	bl	1dfa8 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1e34c:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1e34e:	4620      	mov	r0, r4
   1e350:	2201      	movs	r2, #1
   1e352:	2100      	movs	r1, #0
   1e354:	f7ff fe10 	bl	1df78 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1e358:	463a      	mov	r2, r7
   1e35a:	4631      	mov	r1, r6
   1e35c:	f7ff fe24 	bl	1dfa8 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e360:	4633      	mov	r3, r6
   1e362:	4631      	mov	r1, r6
   1e364:	4620      	mov	r0, r4
   1e366:	2200      	movs	r2, #0
   1e368:	f7ff fdf5 	bl	1df56 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1e36c:	4629      	mov	r1, r5
   1e36e:	4620      	mov	r0, r4
   1e370:	2200      	movs	r2, #0
   1e372:	f7ff fe19 	bl	1dfa8 <set_chunk_size>
   1e376:	463b      	mov	r3, r7
   1e378:	4629      	mov	r1, r5
   1e37a:	4620      	mov	r0, r4
   1e37c:	2200      	movs	r2, #0
   1e37e:	f7ff fdea 	bl	1df56 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1e382:	4629      	mov	r1, r5
   1e384:	4620      	mov	r0, r4
   1e386:	2201      	movs	r2, #1
   1e388:	f7ff fdf6 	bl	1df78 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1e38c:	4631      	mov	r1, r6
}
   1e38e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1e392:	f7ff bee6 	b.w	1e162 <free_list_add>
		h->buckets[i].next = 0;
   1e396:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1e39a:	3301      	adds	r3, #1
   1e39c:	e7cf      	b.n	1e33e <sys_heap_init+0x44>

0001e39e <outs>:
{
   1e39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e3a2:	4607      	mov	r7, r0
   1e3a4:	4688      	mov	r8, r1
   1e3a6:	4615      	mov	r5, r2
   1e3a8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1e3aa:	4614      	mov	r4, r2
   1e3ac:	42b4      	cmp	r4, r6
   1e3ae:	eba4 0005 	sub.w	r0, r4, r5
   1e3b2:	d302      	bcc.n	1e3ba <outs+0x1c>
   1e3b4:	b93e      	cbnz	r6, 1e3c6 <outs+0x28>
   1e3b6:	7823      	ldrb	r3, [r4, #0]
   1e3b8:	b12b      	cbz	r3, 1e3c6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1e3ba:	f814 0b01 	ldrb.w	r0, [r4], #1
   1e3be:	4641      	mov	r1, r8
   1e3c0:	47b8      	blx	r7
		if (rc < 0) {
   1e3c2:	2800      	cmp	r0, #0
   1e3c4:	daf2      	bge.n	1e3ac <outs+0xe>
}
   1e3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e3ca <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_DEPRECATED_ZEPHYR_INT_TYPES, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1e3ca:	4770      	bx	lr

0001e3cc <settings_load>:
	return settings_load_subtree(NULL);
   1e3cc:	2000      	movs	r0, #0
   1e3ce:	f7e5 bb37 	b.w	3a40 <settings_load_subtree>

0001e3d2 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1e3d2:	2200      	movs	r2, #0
   1e3d4:	4611      	mov	r1, r2
   1e3d6:	f7e5 bb0d 	b.w	39f4 <settings_save_one>

0001e3da <settings_name_steq>:
{
   1e3da:	4603      	mov	r3, r0
   1e3dc:	b530      	push	{r4, r5, lr}
   1e3de:	4608      	mov	r0, r1
	if (next) {
   1e3e0:	b10a      	cbz	r2, 1e3e6 <settings_name_steq+0xc>
		*next = NULL;
   1e3e2:	2100      	movs	r1, #0
   1e3e4:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1e3e6:	b163      	cbz	r3, 1e402 <settings_name_steq+0x28>
   1e3e8:	b190      	cbz	r0, 1e410 <settings_name_steq+0x36>
   1e3ea:	1e41      	subs	r1, r0, #1
   1e3ec:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1e3ee:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1e3f2:	4604      	mov	r4, r0
   1e3f4:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e3f8:	b15d      	cbz	r5, 1e412 <settings_name_steq+0x38>
   1e3fa:	429d      	cmp	r5, r3
   1e3fc:	d101      	bne.n	1e402 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1e3fe:	2d3d      	cmp	r5, #61	; 0x3d
   1e400:	d1f5      	bne.n	1e3ee <settings_name_steq+0x14>
	return 0;
   1e402:	2000      	movs	r0, #0
   1e404:	e004      	b.n	1e410 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1e406:	2b3d      	cmp	r3, #61	; 0x3d
   1e408:	d008      	beq.n	1e41c <settings_name_steq+0x42>
   1e40a:	fab3 f083 	clz	r0, r3
   1e40e:	0940      	lsrs	r0, r0, #5
}
   1e410:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1e412:	2b2f      	cmp	r3, #47	; 0x2f
   1e414:	d1f7      	bne.n	1e406 <settings_name_steq+0x2c>
		if (next) {
   1e416:	b10a      	cbz	r2, 1e41c <settings_name_steq+0x42>
			*next = name + 1;
   1e418:	3401      	adds	r4, #1
   1e41a:	6014      	str	r4, [r2, #0]
		return 1;
   1e41c:	2001      	movs	r0, #1
   1e41e:	e7f7      	b.n	1e410 <settings_name_steq+0x36>

0001e420 <settings_name_next>:
{
   1e420:	b530      	push	{r4, r5, lr}
   1e422:	4603      	mov	r3, r0
	if (next) {
   1e424:	b109      	cbz	r1, 1e42a <settings_name_next+0xa>
		*next = NULL;
   1e426:	2200      	movs	r2, #0
   1e428:	600a      	str	r2, [r1, #0]
	if (!name) {
   1e42a:	b16b      	cbz	r3, 1e448 <settings_name_next+0x28>
   1e42c:	461a      	mov	r2, r3
   1e42e:	4614      	mov	r4, r2
   1e430:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1e432:	f812 5b01 	ldrb.w	r5, [r2], #1
   1e436:	b135      	cbz	r5, 1e446 <settings_name_next+0x26>
   1e438:	2d3d      	cmp	r5, #61	; 0x3d
   1e43a:	d004      	beq.n	1e446 <settings_name_next+0x26>
   1e43c:	2d2f      	cmp	r5, #47	; 0x2f
   1e43e:	d1f6      	bne.n	1e42e <settings_name_next+0xe>
		if (next) {
   1e440:	b109      	cbz	r1, 1e446 <settings_name_next+0x26>
			*next = name + 1;
   1e442:	3401      	adds	r4, #1
   1e444:	600c      	str	r4, [r1, #0]
}
   1e446:	bd30      	pop	{r4, r5, pc}
		return 0;
   1e448:	4618      	mov	r0, r3
   1e44a:	e7fc      	b.n	1e446 <settings_name_next+0x26>

0001e44c <settings_runtime_read_cb>:
{
   1e44c:	b538      	push	{r3, r4, r5, lr}
   1e44e:	4604      	mov	r4, r0
   1e450:	4615      	mov	r5, r2
	memcpy(data, arg->data, MIN(arg->len, len));
   1e452:	6862      	ldr	r2, [r4, #4]
   1e454:	42aa      	cmp	r2, r5
   1e456:	bf28      	it	cs
   1e458:	462a      	movcs	r2, r5
{
   1e45a:	4608      	mov	r0, r1
   1e45c:	6821      	ldr	r1, [r4, #0]
   1e45e:	f008 faf4 	bl	26a4a <memcpy>
	return MIN(arg->len, len);
   1e462:	6860      	ldr	r0, [r4, #4]
}
   1e464:	42a8      	cmp	r0, r5
   1e466:	bf28      	it	cs
   1e468:	4628      	movcs	r0, r5
   1e46a:	bd38      	pop	{r3, r4, r5, pc}

0001e46c <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   1e46c:	2000      	movs	r0, #0
   1e46e:	4770      	bx	lr

0001e470 <sys_pm_init>:
	}
}

#if CONFIG_DEVICE_POWER_MANAGEMENT
static int sys_pm_init(const struct device *dev)
{
   1e470:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	sys_pm_create_device_list();
   1e472:	f7e5 fbf1 	bl	3c58 <sys_pm_create_device_list>
	return 0;
}
   1e476:	2000      	movs	r0, #0
   1e478:	bd08      	pop	{r3, pc}

0001e47a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1e47a:	68c2      	ldr	r2, [r0, #12]
   1e47c:	b2cb      	uxtb	r3, r1
   1e47e:	210c      	movs	r1, #12
   1e480:	fb03 2101 	mla	r1, r3, r1, r2
   1e484:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1e486:	f000 0007 	and.w	r0, r0, #7
   1e48a:	4770      	bx	lr

0001e48c <set_off_state>:
	__asm__ volatile(
   1e48c:	f04f 0320 	mov.w	r3, #32
   1e490:	f3ef 8211 	mrs	r2, BASEPRI
   1e494:	f383 8811 	msr	BASEPRI, r3
   1e498:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e49c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1e49e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1e4a2:	d001      	beq.n	1e4a8 <set_off_state+0x1c>
   1e4a4:	428b      	cmp	r3, r1
   1e4a6:	d107      	bne.n	1e4b8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1e4a8:	2301      	movs	r3, #1
   1e4aa:	6003      	str	r3, [r0, #0]
	int err = 0;
   1e4ac:	2000      	movs	r0, #0
	__asm__ volatile(
   1e4ae:	f382 8811 	msr	BASEPRI, r2
   1e4b2:	f3bf 8f6f 	isb	sy
}
   1e4b6:	4770      	bx	lr
		err = -EPERM;
   1e4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4bc:	e7f7      	b.n	1e4ae <set_off_state+0x22>

0001e4be <set_starting_state>:
{
   1e4be:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e4c0:	f04f 0320 	mov.w	r3, #32
   1e4c4:	f3ef 8211 	mrs	r2, BASEPRI
   1e4c8:	f383 8811 	msr	BASEPRI, r3
   1e4cc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e4d0:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1e4d2:	f003 0407 	and.w	r4, r3, #7
   1e4d6:	2c01      	cmp	r4, #1
   1e4d8:	d106      	bne.n	1e4e8 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1e4da:	6001      	str	r1, [r0, #0]
	int err = 0;
   1e4dc:	2000      	movs	r0, #0
	__asm__ volatile(
   1e4de:	f382 8811 	msr	BASEPRI, r2
   1e4e2:	f3bf 8f6f 	isb	sy
}
   1e4e6:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1e4e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1e4ec:	428b      	cmp	r3, r1
		err = -EALREADY;
   1e4ee:	bf14      	ite	ne
   1e4f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1e4f4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1e4f8:	e7f1      	b.n	1e4de <set_starting_state+0x20>

0001e4fa <set_on_state>:
	__asm__ volatile(
   1e4fa:	f04f 0320 	mov.w	r3, #32
   1e4fe:	f3ef 8211 	mrs	r2, BASEPRI
   1e502:	f383 8811 	msr	BASEPRI, r3
   1e506:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1e50a:	6803      	ldr	r3, [r0, #0]
   1e50c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e510:	f043 0302 	orr.w	r3, r3, #2
   1e514:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1e516:	f382 8811 	msr	BASEPRI, r2
   1e51a:	f3bf 8f6f 	isb	sy
}
   1e51e:	4770      	bx	lr

0001e520 <onoff_started_callback>:
	return &data->mgr[type];
   1e520:	68c0      	ldr	r0, [r0, #12]
{
   1e522:	b410      	push	{r4}
	return &data->mgr[type];
   1e524:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1e526:	241c      	movs	r4, #28
   1e528:	fb03 0004 	mla	r0, r3, r4, r0
   1e52c:	2100      	movs	r1, #0
}
   1e52e:	bc10      	pop	{r4}
	notify(mgr, 0);
   1e530:	4710      	bx	r2

0001e532 <blocking_start_callback>:
{
   1e532:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1e534:	f7fc bd26 	b.w	1af84 <z_impl_k_sem_give>

0001e538 <lfclk_stop>:
{
   1e538:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
   1e53a:	f7e5 fea9 	bl	4290 <z_nrf_clock_calibration_lfclk_stopped>
}
   1e53e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1e542:	2000      	movs	r0, #0
   1e544:	f7f7 b976 	b.w	15834 <nrfx_clock_stop>

0001e548 <api_stop>:
{
   1e548:	b538      	push	{r3, r4, r5, lr}
   1e54a:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   1e54c:	230c      	movs	r3, #12
{
   1e54e:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1e550:	4363      	muls	r3, r4
   1e552:	68c0      	ldr	r0, [r0, #12]
   1e554:	3340      	adds	r3, #64	; 0x40
   1e556:	2180      	movs	r1, #128	; 0x80
   1e558:	4418      	add	r0, r3
   1e55a:	f7ff ff97 	bl	1e48c <set_off_state>
	if (err < 0) {
   1e55e:	2800      	cmp	r0, #0
   1e560:	db05      	blt.n	1e56e <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1e562:	6869      	ldr	r1, [r5, #4]
   1e564:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   1e568:	6863      	ldr	r3, [r4, #4]
   1e56a:	4798      	blx	r3
	return 0;
   1e56c:	2000      	movs	r0, #0
}
   1e56e:	bd38      	pop	{r3, r4, r5, pc}

0001e570 <api_start>:
{
   1e570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e574:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   1e576:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1e578:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   1e57a:	436f      	muls	r7, r5
{
   1e57c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1e57e:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1e582:	2180      	movs	r1, #128	; 0x80
   1e584:	4420      	add	r0, r4
{
   1e586:	4690      	mov	r8, r2
   1e588:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   1e58a:	f7ff ff98 	bl	1e4be <set_starting_state>
	if (err < 0) {
   1e58e:	2800      	cmp	r0, #0
   1e590:	db07      	blt.n	1e5a2 <api_start+0x32>
	subdata->cb = cb;
   1e592:	443c      	add	r4, r7
	subdata->user_data = user_data;
   1e594:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1e598:	6873      	ldr	r3, [r6, #4]
   1e59a:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   1e59e:	4798      	blx	r3
	return 0;
   1e5a0:	2000      	movs	r0, #0
}
   1e5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e5a6 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1e5a6:	2301      	movs	r3, #1
   1e5a8:	fa03 f101 	lsl.w	r1, r3, r1
   1e5ac:	68c3      	ldr	r3, [r0, #12]
   1e5ae:	681b      	ldr	r3, [r3, #0]
   1e5b0:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1e5b2:	bf18      	it	ne
   1e5b4:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1e5b8:	b112      	cbz	r2, 1e5c0 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   1e5ba:	6883      	ldr	r3, [r0, #8]
   1e5bc:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1e5be:	4718      	bx	r3
   1e5c0:	6883      	ldr	r3, [r0, #8]
   1e5c2:	691b      	ldr	r3, [r3, #16]
   1e5c4:	e7fb      	b.n	1e5be <gpio_pin_set+0x18>

0001e5c6 <ssd1306_read>:
}
   1e5c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e5ca:	4770      	bx	lr

0001e5cc <ssd1306_get_framebuffer>:
}
   1e5cc:	2000      	movs	r0, #0
   1e5ce:	4770      	bx	lr

0001e5d0 <ssd1306_set_brightness>:
}
   1e5d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e5d4:	4770      	bx	lr

0001e5d6 <ssd1306_set_pixel_format>:
	if (pf == PIXEL_FORMAT_MONO10) {
   1e5d6:	2904      	cmp	r1, #4
}
   1e5d8:	bf14      	ite	ne
   1e5da:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   1e5de:	2000      	moveq	r0, #0
   1e5e0:	4770      	bx	lr

0001e5e2 <ssd1306_write_bus.isra.0>:
static inline int ssd1306_write_bus(const struct device *dev,
   1e5e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5e4:	4604      	mov	r4, r0
   1e5e6:	b085      	sub	sp, #20
   1e5e8:	460e      	mov	r6, r1
   1e5ea:	4615      	mov	r5, r2
	gpio_pin_set(driver->data_cmd, DT_INST_GPIO_PIN(0, data_cmd_gpios),
   1e5ec:	211c      	movs	r1, #28
   1e5ee:	f083 0201 	eor.w	r2, r3, #1
   1e5f2:	6a00      	ldr	r0, [r0, #32]
   1e5f4:	f7ff ffd7 	bl	1e5a6 <gpio_pin_set>
	struct spi_buf_set tx_bufs = {
   1e5f8:	2301      	movs	r3, #1
	struct spi_buf tx_buf = {
   1e5fa:	e9cd 6500 	strd	r6, r5, [sp]
	struct spi_buf_set tx_bufs = {
   1e5fe:	f8cd d008 	str.w	sp, [sp, #8]
	errno = spi_write(driver->bus, &driver->spi_config, &tx_bufs);
   1e602:	6866      	ldr	r6, [r4, #4]
	struct spi_buf_set tx_bufs = {
   1e604:	9303      	str	r3, [sp, #12]
	errno = spi_write(driver->bus, &driver->spi_config, &tx_bufs);
   1e606:	f000 f8aa 	bl	1e75e <__errno>
   1e60a:	4605      	mov	r5, r0
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   1e60c:	68b3      	ldr	r3, [r6, #8]
   1e60e:	aa02      	add	r2, sp, #8
   1e610:	681f      	ldr	r7, [r3, #0]
   1e612:	f104 0114 	add.w	r1, r4, #20
   1e616:	2300      	movs	r3, #0
   1e618:	4630      	mov	r0, r6
   1e61a:	47b8      	blx	r7
   1e61c:	6028      	str	r0, [r5, #0]
	return errno;
   1e61e:	f000 f89e 	bl	1e75e <__errno>
}
   1e622:	6800      	ldr	r0, [r0, #0]
   1e624:	b005      	add	sp, #20
   1e626:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e628 <ssd1306_set_contrast>:
{
   1e628:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
   1e62a:	2381      	movs	r3, #129	; 0x81
   1e62c:	f88d 3004 	strb.w	r3, [sp, #4]
   1e630:	f88d 1005 	strb.w	r1, [sp, #5]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
   1e634:	2301      	movs	r3, #1
   1e636:	2202      	movs	r2, #2
   1e638:	a901      	add	r1, sp, #4
   1e63a:	68c0      	ldr	r0, [r0, #12]
   1e63c:	f7ff ffd1 	bl	1e5e2 <ssd1306_write_bus.isra.0>
}
   1e640:	b003      	add	sp, #12
   1e642:	f85d fb04 	ldr.w	pc, [sp], #4

0001e646 <ssd1306_write>:
{
   1e646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (desc->pitch < desc->width) {
   1e648:	f8b3 c008 	ldrh.w	ip, [r3, #8]
{
   1e64c:	9e08      	ldr	r6, [sp, #32]
   1e64e:	4605      	mov	r5, r0
	if (desc->pitch < desc->width) {
   1e650:	8898      	ldrh	r0, [r3, #4]
   1e652:	4584      	cmp	ip, r0
   1e654:	d203      	bcs.n	1e65e <ssd1306_write+0x18>
		return -1;
   1e656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1e65a:	b003      	add	sp, #12
   1e65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf_len = MIN(desc->buf_size, desc->height * desc->width / 8);
   1e65e:	88df      	ldrh	r7, [r3, #6]
   1e660:	681b      	ldr	r3, [r3, #0]
   1e662:	463c      	mov	r4, r7
   1e664:	4344      	muls	r4, r0
   1e666:	bf48      	it	mi
   1e668:	3407      	addmi	r4, #7
   1e66a:	10e4      	asrs	r4, r4, #3
   1e66c:	429c      	cmp	r4, r3
   1e66e:	bf28      	it	cs
   1e670:	461c      	movcs	r4, r3
	if (buf == NULL || buf_len == 0U) {
   1e672:	2e00      	cmp	r6, #0
   1e674:	d0ef      	beq.n	1e656 <ssd1306_write+0x10>
   1e676:	2c00      	cmp	r4, #0
   1e678:	d0ed      	beq.n	1e656 <ssd1306_write+0x10>
	if (desc->pitch > desc->width) {
   1e67a:	4584      	cmp	ip, r0
   1e67c:	d8eb      	bhi.n	1e656 <ssd1306_write+0x10>
	if ((y & 0x7) != 0U) {
   1e67e:	0753      	lsls	r3, r2, #29
   1e680:	d1e9      	bne.n	1e656 <ssd1306_write+0x10>
	uint8_t cmd_buf[] = {
   1e682:	2320      	movs	r3, #32
   1e684:	f8ad 3000 	strh.w	r3, [sp]
   1e688:	2321      	movs	r3, #33	; 0x21
   1e68a:	f88d 3002 	strb.w	r3, [sp, #2]
   1e68e:	2322      	movs	r3, #34	; 0x22
   1e690:	b2c9      	uxtb	r1, r1
   1e692:	f88d 3005 	strb.w	r3, [sp, #5]
   1e696:	08d3      	lsrs	r3, r2, #3
		((y + desc->height)/8 - 1)
   1e698:	443a      	add	r2, r7
	uint8_t cmd_buf[] = {
   1e69a:	f88d 1003 	strb.w	r1, [sp, #3]
		((y + desc->height)/8 - 1)
   1e69e:	10d2      	asrs	r2, r2, #3
		(x + desc->width - 1),
   1e6a0:	4401      	add	r1, r0
   1e6a2:	3901      	subs	r1, #1
		((y + desc->height)/8 - 1)
   1e6a4:	3a01      	subs	r2, #1
	uint8_t cmd_buf[] = {
   1e6a6:	f88d 1004 	strb.w	r1, [sp, #4]
   1e6aa:	f88d 3006 	strb.w	r3, [sp, #6]
   1e6ae:	f88d 2007 	strb.w	r2, [sp, #7]
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
   1e6b2:	2301      	movs	r3, #1
   1e6b4:	68e8      	ldr	r0, [r5, #12]
   1e6b6:	2208      	movs	r2, #8
   1e6b8:	4669      	mov	r1, sp
   1e6ba:	f7ff ff92 	bl	1e5e2 <ssd1306_write_bus.isra.0>
   1e6be:	4603      	mov	r3, r0
   1e6c0:	2800      	cmp	r0, #0
   1e6c2:	d1c8      	bne.n	1e656 <ssd1306_write+0x10>
	return ssd1306_write_bus(dev, (uint8_t *)buf, buf_len, false);
   1e6c4:	68e8      	ldr	r0, [r5, #12]
   1e6c6:	4622      	mov	r2, r4
   1e6c8:	4631      	mov	r1, r6
   1e6ca:	f7ff ff8a 	bl	1e5e2 <ssd1306_write_bus.isra.0>
   1e6ce:	e7c4      	b.n	1e65a <ssd1306_write+0x14>

0001e6d0 <ssd1306_resume>:
{
   1e6d0:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
   1e6d2:	23af      	movs	r3, #175	; 0xaf
   1e6d4:	f88d 3004 	strb.w	r3, [sp, #4]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
   1e6d8:	2301      	movs	r3, #1
   1e6da:	461a      	mov	r2, r3
   1e6dc:	a901      	add	r1, sp, #4
   1e6de:	68c0      	ldr	r0, [r0, #12]
   1e6e0:	f7ff ff7f 	bl	1e5e2 <ssd1306_write_bus.isra.0>
}
   1e6e4:	b003      	add	sp, #12
   1e6e6:	f85d fb04 	ldr.w	pc, [sp], #4

0001e6ea <ssd1306_suspend>:
{
   1e6ea:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
   1e6ec:	23ae      	movs	r3, #174	; 0xae
   1e6ee:	f88d 3004 	strb.w	r3, [sp, #4]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
   1e6f2:	2301      	movs	r3, #1
   1e6f4:	461a      	mov	r2, r3
   1e6f6:	a901      	add	r1, sp, #4
   1e6f8:	68c0      	ldr	r0, [r0, #12]
   1e6fa:	f7ff ff72 	bl	1e5e2 <ssd1306_write_bus.isra.0>
}
   1e6fe:	b003      	add	sp, #12
   1e700:	f85d fb04 	ldr.w	pc, [sp], #4

0001e704 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   1e704:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   1e706:	68c5      	ldr	r5, [r0, #12]
static inline int gpio_pin_configure(const struct device *port,
   1e708:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   1e70a:	6883      	ldr	r3, [r0, #8]
   1e70c:	f44f 52b0 	mov.w	r2, #5632	; 0x1600
   1e710:	681b      	ldr	r3, [r3, #0]
   1e712:	4798      	blx	r3
	if (ret != 0) {
   1e714:	b930      	cbnz	r0, 1e724 <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1e716:	2301      	movs	r3, #1
   1e718:	fa03 f104 	lsl.w	r1, r3, r4
   1e71c:	682b      	ldr	r3, [r5, #0]
   1e71e:	ea23 0301 	bic.w	r3, r3, r1
   1e722:	602b      	str	r3, [r5, #0]
}
   1e724:	bd38      	pop	{r3, r4, r5, pc}

0001e726 <ssd1306_set_orientation>:
   1e726:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e72a:	4770      	bx	lr

0001e72c <z_clock_device_ctrl>:
int __weak z_clock_device_ctrl(const struct device *device,
			       uint32_t ctrl_command,
			       void *context, device_pm_cb cb, void *arg)
{
	return -ENOTSUP;
}
   1e72c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e730:	4770      	bx	lr

0001e732 <z_clock_isr>:
}
   1e732:	4770      	bx	lr

0001e734 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1e734:	4770      	bx	lr

0001e736 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1e736:	2100      	movs	r1, #0
   1e738:	2001      	movs	r0, #1
   1e73a:	f000 b800 	b.w	1e73e <z_arm_fatal_error>

0001e73e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1e73e:	f007 bc56 	b.w	25fee <z_fatal_error>

0001e742 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1e742:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1e744:	6800      	ldr	r0, [r0, #0]
   1e746:	f007 bc52 	b.w	25fee <z_fatal_error>

0001e74a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1e74a:	b508      	push	{r3, lr}
	handler();
   1e74c:	f7e6 f806 	bl	475c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1e750:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1e754:	f7e6 b93a 	b.w	49cc <z_arm_exc_exit>

0001e758 <_stdout_hook_default>:
}
   1e758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e75c:	4770      	bx	lr

0001e75e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1e75e:	f7fb bdf1 	b.w	1a344 <z_impl_z_errno>

0001e762 <display_get_capabilities>:
   1e762:	6883      	ldr	r3, [r0, #8]
   1e764:	69db      	ldr	r3, [r3, #28]
   1e766:	4718      	bx	r3

0001e768 <lvgl_flush_cb_mono>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_mono(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   1e768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t w = area->x2 - area->x1 + 1;
   1e76c:	888d      	ldrh	r5, [r1, #4]
   1e76e:	880b      	ldrh	r3, [r1, #0]
	uint16_t h = area->y2 - area->y1 + 1;
   1e770:	88ce      	ldrh	r6, [r1, #6]
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   1e772:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
	uint16_t w = area->x2 - area->x1 + 1;
   1e776:	3501      	adds	r5, #1
   1e778:	1aed      	subs	r5, r5, r3
	uint16_t h = area->y2 - area->y1 + 1;
   1e77a:	884b      	ldrh	r3, [r1, #2]
   1e77c:	3601      	adds	r6, #1
{
   1e77e:	b08b      	sub	sp, #44	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   1e780:	1af6      	subs	r6, r6, r3
	uint16_t w = area->x2 - area->x1 + 1;
   1e782:	b2ad      	uxth	r5, r5
{
   1e784:	460c      	mov	r4, r1
	uint16_t h = area->y2 - area->y1 + 1;
   1e786:	b2b6      	uxth	r6, r6
	struct display_capabilities cap;
	struct display_buffer_descriptor desc;

	display_get_capabilities(display_dev, &cap);
   1e788:	a906      	add	r1, sp, #24
{
   1e78a:	4607      	mov	r7, r0
	display_get_capabilities(display_dev, &cap);
   1e78c:	4648      	mov	r0, r9
{
   1e78e:	4690      	mov	r8, r2
	display_get_capabilities(display_dev, &cap);
   1e790:	f7ff ffe7 	bl	1e762 <display_get_capabilities>

	desc.buf_size = (w * h)/8U;
   1e794:	fb06 f305 	mul.w	r3, r6, r5
   1e798:	08db      	lsrs	r3, r3, #3
   1e79a:	9303      	str	r3, [sp, #12]
	return api->write(dev, x, y, desc, buf);
   1e79c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1e7a0:	f8cd 8000 	str.w	r8, [sp]
	desc.width = w;
   1e7a4:	f8ad 5010 	strh.w	r5, [sp, #16]
	desc.pitch = w;
   1e7a8:	f8ad 5014 	strh.w	r5, [sp, #20]
   1e7ac:	8862      	ldrh	r2, [r4, #2]
   1e7ae:	689d      	ldr	r5, [r3, #8]
   1e7b0:	8821      	ldrh	r1, [r4, #0]
	desc.height = h;
   1e7b2:	f8ad 6012 	strh.w	r6, [sp, #18]
   1e7b6:	ab03      	add	r3, sp, #12
   1e7b8:	4648      	mov	r0, r9
   1e7ba:	47a8      	blx	r5
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);
	if (cap.screen_info & SCREEN_INFO_DOUBLE_BUFFER) {
   1e7bc:	9b08      	ldr	r3, [sp, #32]
   1e7be:	071b      	lsls	r3, r3, #28
   1e7c0:	d509      	bpl.n	1e7d6 <lvgl_flush_cb_mono+0x6e>
   1e7c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1e7c6:	f8cd 8000 	str.w	r8, [sp]
   1e7ca:	689d      	ldr	r5, [r3, #8]
   1e7cc:	8862      	ldrh	r2, [r4, #2]
   1e7ce:	8821      	ldrh	r1, [r4, #0]
   1e7d0:	ab03      	add	r3, sp, #12
   1e7d2:	4648      	mov	r0, r9
   1e7d4:	47a8      	blx	r5
		display_write(display_dev, area->x1, area->y1, &desc,
				(void *) color_p);
	}

	lv_disp_flush_ready(disp_drv);
   1e7d6:	4638      	mov	r0, r7
   1e7d8:	f006 fcbd 	bl	25156 <lv_disp_flush_ready>
}
   1e7dc:	b00b      	add	sp, #44	; 0x2c
   1e7de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e7e2 <lvgl_set_px_cb_mono>:


void lvgl_set_px_cb_mono(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   1e7e2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint8_t *buf_xy;
	uint8_t bit;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   1e7e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   1e7e8:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
   1e7ec:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
   1e7f0:	460f      	mov	r7, r1
	display_get_capabilities(display_dev, &cap);
   1e7f2:	4669      	mov	r1, sp
{
   1e7f4:	4690      	mov	r8, r2
   1e7f6:	461c      	mov	r4, r3
	display_get_capabilities(display_dev, &cap);
   1e7f8:	f7ff ffb3 	bl	1e762 <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   1e7fc:	9802      	ldr	r0, [sp, #8]
   1e7fe:	f010 0f01 	tst.w	r0, #1
   1e802:	f000 0002 	and.w	r0, r0, #2
   1e806:	d01f      	beq.n	1e848 <lvgl_set_px_cb_mono+0x66>
		buf_xy = buf + x + y/8 * buf_w;
   1e808:	2d00      	cmp	r5, #0
   1e80a:	462b      	mov	r3, r5
   1e80c:	bfb8      	it	lt
   1e80e:	1deb      	addlt	r3, r5, #7
   1e810:	10d9      	asrs	r1, r3, #3
   1e812:	fb11 4408 	smlabb	r4, r1, r8, r4
   1e816:	1939      	adds	r1, r7, r4

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   1e818:	426b      	negs	r3, r5
   1e81a:	f005 0407 	and.w	r4, r5, #7
   1e81e:	f003 0307 	and.w	r3, r3, #7
   1e822:	bf58      	it	pl
   1e824:	425c      	negpl	r4, r3
			bit = y%8;
		}
	} else {
		buf_xy = buf + x/8 + y * buf_w/8;

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   1e826:	b108      	cbz	r0, 1e82c <lvgl_set_px_cb_mono+0x4a>
			bit = 7 - x%8;
   1e828:	f1c4 0407 	rsb	r4, r4, #7
		} else {
			bit = x%8;
   1e82c:	2201      	movs	r2, #1
   1e82e:	b2e4      	uxtb	r4, r4
		}
	}

	if (cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
   1e830:	fa02 f404 	lsl.w	r4, r2, r4
   1e834:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1e838:	780b      	ldrb	r3, [r1, #0]
   1e83a:	2a04      	cmp	r2, #4
   1e83c:	b2e4      	uxtb	r4, r4
   1e83e:	d115      	bne.n	1e86c <lvgl_set_px_cb_mono+0x8a>
		if (color.full == 0) {
   1e840:	b9b6      	cbnz	r6, 1e870 <lvgl_set_px_cb_mono+0x8e>
		}
	} else {
		if (color.full == 0) {
			*buf_xy |= BIT(bit);
		} else {
			*buf_xy &= ~BIT(bit);
   1e842:	ea23 0304 	bic.w	r3, r3, r4
   1e846:	e014      	b.n	1e872 <lvgl_set_px_cb_mono+0x90>
		buf_xy = buf + x/8 + y * buf_w/8;
   1e848:	4643      	mov	r3, r8
   1e84a:	435d      	muls	r5, r3
   1e84c:	bf48      	it	mi
   1e84e:	3507      	addmi	r5, #7
   1e850:	2c00      	cmp	r4, #0
   1e852:	4621      	mov	r1, r4
   1e854:	ea4f 05e5 	mov.w	r5, r5, asr #3
   1e858:	bfb8      	it	lt
   1e85a:	1de1      	addlt	r1, r4, #7
   1e85c:	eb05 05e1 	add.w	r5, r5, r1, asr #3
   1e860:	4263      	negs	r3, r4
   1e862:	eb07 0105 	add.w	r1, r7, r5
		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   1e866:	f004 0407 	and.w	r4, r4, #7
   1e86a:	e7d8      	b.n	1e81e <lvgl_set_px_cb_mono+0x3c>
		if (color.full == 0) {
   1e86c:	2e00      	cmp	r6, #0
   1e86e:	d1e8      	bne.n	1e842 <lvgl_set_px_cb_mono+0x60>
			*buf_xy |= BIT(bit);
   1e870:	4323      	orrs	r3, r4
			*buf_xy &= ~BIT(bit);
   1e872:	700b      	strb	r3, [r1, #0]
		}
	}
}
   1e874:	b004      	add	sp, #16
   1e876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e87a <lvgl_rounder_cb_mono>:

void lvgl_rounder_cb_mono(struct _disp_drv_t *disp_drv,
		lv_area_t *area)
{
   1e87a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   1e87c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   1e87e:	460c      	mov	r4, r1
	display_get_capabilities(display_dev, &cap);
   1e880:	4669      	mov	r1, sp
   1e882:	f7ff ff6e 	bl	1e762 <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   1e886:	9b02      	ldr	r3, [sp, #8]
   1e888:	07db      	lsls	r3, r3, #31
   1e88a:	d509      	bpl.n	1e8a0 <lvgl_rounder_cb_mono+0x26>
		area->y1 &= ~0x7;
   1e88c:	8863      	ldrh	r3, [r4, #2]
   1e88e:	f023 0307 	bic.w	r3, r3, #7
   1e892:	8063      	strh	r3, [r4, #2]
		area->y2 |= 0x7;
   1e894:	88e3      	ldrh	r3, [r4, #6]
   1e896:	f043 0307 	orr.w	r3, r3, #7
   1e89a:	80e3      	strh	r3, [r4, #6]
	} else {
		area->x1 &= ~0x7;
		area->x2 |= 0x7;
	}
}
   1e89c:	b004      	add	sp, #16
   1e89e:	bd10      	pop	{r4, pc}
		area->x1 &= ~0x7;
   1e8a0:	8823      	ldrh	r3, [r4, #0]
   1e8a2:	f023 0307 	bic.w	r3, r3, #7
   1e8a6:	8023      	strh	r3, [r4, #0]
		area->x2 |= 0x7;
   1e8a8:	88a3      	ldrh	r3, [r4, #4]
   1e8aa:	f043 0307 	orr.w	r3, r3, #7
   1e8ae:	80a3      	strh	r3, [r4, #4]
}
   1e8b0:	e7f4      	b.n	1e89c <lvgl_rounder_cb_mono+0x22>

0001e8b2 <lvgl_flush_cb_16bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_16bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   1e8b2:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   1e8b4:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   1e8b6:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   1e8b8:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   1e8bc:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   1e8c0:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   1e8c2:	3401      	adds	r4, #1
{
   1e8c4:	b087      	sub	sp, #28
   1e8c6:	4605      	mov	r5, r0
	uint16_t w = area->x2 - area->x1 + 1;
   1e8c8:	1b9b      	subs	r3, r3, r6
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   1e8ca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   1e8cc:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   1e8ce:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   1e8d0:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 2U * h;
   1e8d2:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   1e8d6:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   1e8da:	f8ad 3014 	strh.w	r3, [sp, #20]
   1e8de:	6883      	ldr	r3, [r0, #8]
   1e8e0:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 2U * h;
   1e8e2:	0049      	lsls	r1, r1, #1
   1e8e4:	9103      	str	r1, [sp, #12]
	desc.height = h;
   1e8e6:	f8ad 4012 	strh.w	r4, [sp, #18]
   1e8ea:	b2ba      	uxth	r2, r7
   1e8ec:	689c      	ldr	r4, [r3, #8]
   1e8ee:	b2b1      	uxth	r1, r6
   1e8f0:	ab03      	add	r3, sp, #12
   1e8f2:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   1e8f4:	4628      	mov	r0, r5
   1e8f6:	f006 fc2e 	bl	25156 <lv_disp_flush_ready>
}
   1e8fa:	b007      	add	sp, #28
   1e8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e8fe <lvgl_set_px_cb_16bit>:
#ifndef CONFIG_LVGL_COLOR_DEPTH_16
void lvgl_set_px_cb_16bit(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
	uint16_t *buf_xy = (uint16_t *)(buf + x * 2U + y * 2U * buf_w);
   1e8fe:	f9bd 0000 	ldrsh.w	r0, [sp]
   1e902:	fb00 3202 	mla	r2, r0, r2, r3
}

static inline uint16_t lv_color_to16(lv_color_t color)
{
#if LV_COLOR_DEPTH == 1
    if(color.full == 0)
   1e906:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1e90a:	3800      	subs	r0, #0
   1e90c:	bf18      	it	ne
   1e90e:	2001      	movne	r0, #1
   1e910:	4240      	negs	r0, r0
	*buf_xy = lv_color_to16(color);
   1e912:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
}
   1e916:	4770      	bx	lr

0001e918 <lvgl_flush_cb_24bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_24bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   1e918:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   1e91a:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   1e91c:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   1e91e:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   1e922:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   1e926:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   1e928:	3401      	adds	r4, #1
{
   1e92a:	b087      	sub	sp, #28
   1e92c:	4605      	mov	r5, r0
	uint16_t w = area->x2 - area->x1 + 1;
   1e92e:	1b9b      	subs	r3, r3, r6
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   1e930:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   1e932:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   1e934:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   1e936:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 3U * h;
   1e938:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   1e93c:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   1e940:	f8ad 3014 	strh.w	r3, [sp, #20]
   1e944:	6883      	ldr	r3, [r0, #8]
   1e946:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 3U * h;
   1e948:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1e94c:	9103      	str	r1, [sp, #12]
	desc.height = h;
   1e94e:	f8ad 4012 	strh.w	r4, [sp, #18]
   1e952:	b2ba      	uxth	r2, r7
   1e954:	689c      	ldr	r4, [r3, #8]
   1e956:	b2b1      	uxth	r1, r6
   1e958:	ab03      	add	r3, sp, #12
   1e95a:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   1e95c:	4628      	mov	r0, r5
   1e95e:	f006 fbfa 	bl	25156 <lv_disp_flush_ready>
}
   1e962:	b007      	add	sp, #28
   1e964:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e966 <lvgl_set_px_cb_24bit>:

void lvgl_set_px_cb_24bit(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   1e966:	b510      	push	{r4, lr}
	uint8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   1e968:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
   1e96c:	fb00 3302 	mla	r3, r0, r2, r3
}

static inline uint32_t lv_color_to32(lv_color_t color)
{
#if LV_COLOR_DEPTH == 1
    if(color.full == 0)
   1e970:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1e974:	2a00      	cmp	r2, #0
   1e976:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        return 0xFF000000;
    else
        return 0xFFFFFFFF;
   1e97a:	bf0c      	ite	eq
   1e97c:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
   1e980:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   1e984:	18c8      	adds	r0, r1, r3
		color = lv_color_mix(color, mix_color, opa);
	}
#endif

	converted_color.full = lv_color_to32(color);
	*buf_xy = converted_color.ch.red;
   1e986:	f3c2 4407 	ubfx	r4, r2, #16, #8
   1e98a:	54cc      	strb	r4, [r1, r3]
	*(buf_xy + 1) = converted_color.ch.green;
   1e98c:	f3c2 2307 	ubfx	r3, r2, #8, #8
   1e990:	7043      	strb	r3, [r0, #1]
	*(buf_xy + 2) = converted_color.ch.blue;
   1e992:	7082      	strb	r2, [r0, #2]
}
   1e994:	bd10      	pop	{r4, pc}

0001e996 <lvgl_flush_cb_32bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_32bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   1e996:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   1e998:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   1e99a:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   1e99c:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   1e9a0:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   1e9a4:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   1e9a6:	3401      	adds	r4, #1
{
   1e9a8:	b087      	sub	sp, #28
   1e9aa:	4605      	mov	r5, r0
	uint16_t w = area->x2 - area->x1 + 1;
   1e9ac:	1b9b      	subs	r3, r3, r6
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   1e9ae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   1e9b0:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   1e9b2:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   1e9b4:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 4U * h;
   1e9b6:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   1e9ba:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   1e9be:	f8ad 3014 	strh.w	r3, [sp, #20]
   1e9c2:	6883      	ldr	r3, [r0, #8]
   1e9c4:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 4U * h;
   1e9c6:	0089      	lsls	r1, r1, #2
   1e9c8:	9103      	str	r1, [sp, #12]
	desc.height = h;
   1e9ca:	f8ad 4012 	strh.w	r4, [sp, #18]
   1e9ce:	b2ba      	uxth	r2, r7
   1e9d0:	689c      	ldr	r4, [r3, #8]
   1e9d2:	b2b1      	uxth	r1, r6
   1e9d4:	ab03      	add	r3, sp, #12
   1e9d6:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   1e9d8:	4628      	mov	r0, r5
   1e9da:	f006 fbbc 	bl	25156 <lv_disp_flush_ready>
}
   1e9de:	b007      	add	sp, #28
   1e9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e9e2 <lvgl_set_px_cb_32bit>:
#ifndef CONFIG_LVGL_COLOR_DEPTH_32
void lvgl_set_px_cb_32bit(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
	uint32_t *buf_xy = (uint32_t *)(buf + x * 4U + y * 4U * buf_w);
   1e9e2:	f9bd 0000 	ldrsh.w	r0, [sp]
   1e9e6:	fb00 3202 	mla	r2, r0, r2, r3
    if(color.full == 0)
   1e9ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1e9ee:	2b00      	cmp	r3, #0
        return 0xFFFFFFFF;
   1e9f0:	bf0c      	ite	eq
   1e9f2:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
   1e9f6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
	*buf_xy = lv_color_to32(color);
   1e9fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   1e9fe:	4770      	bx	lr

0001ea00 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1ea00:	f7f6 bdac 	b.w	1555c <SystemInit>

0001ea04 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1ea04:	b530      	push	{r4, r5, lr}
   1ea06:	b085      	sub	sp, #20
   1ea08:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1ea0a:	880a      	ldrh	r2, [r1, #0]
   1ea0c:	788b      	ldrb	r3, [r1, #2]
   1ea0e:	f8ad 2000 	strh.w	r2, [sp]
{
   1ea12:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   1ea14:	220d      	movs	r2, #13
   1ea16:	2100      	movs	r1, #0
   1ea18:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   1ea1c:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   1ea20:	f008 f834 	bl	26a8c <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1ea24:	466a      	mov	r2, sp
   1ea26:	4669      	mov	r1, sp
   1ea28:	4628      	mov	r0, r5
   1ea2a:	f7ed f837 	bl	ba9c <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1ea2e:	b928      	cbnz	r0, 1ea3c <ah+0x38>
   1ea30:	f8bd 2000 	ldrh.w	r2, [sp]
   1ea34:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1ea38:	8022      	strh	r2, [r4, #0]
   1ea3a:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   1ea3c:	b005      	add	sp, #20
   1ea3e:	bd30      	pop	{r4, r5, pc}

0001ea40 <bt_rpa_create>:
}
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   1ea40:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   1ea42:	1cce      	adds	r6, r1, #3
{
   1ea44:	4605      	mov	r5, r0
   1ea46:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   1ea48:	4630      	mov	r0, r6
   1ea4a:	2103      	movs	r1, #3
   1ea4c:	f7ed f824 	bl	ba98 <bt_rand>
	if (err) {
   1ea50:	b960      	cbnz	r0, 1ea6c <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1ea52:	7963      	ldrb	r3, [r4, #5]
   1ea54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ea58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ea5c:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1ea5e:	4622      	mov	r2, r4
   1ea60:	4631      	mov	r1, r6
   1ea62:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1ea64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1ea68:	f7ff bfcc 	b.w	1ea04 <ah>
}
   1ea6c:	bd70      	pop	{r4, r5, r6, pc}

0001ea6e <bt_settings_decode_key>:
{
   1ea6e:	b570      	push	{r4, r5, r6, lr}
   1ea70:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1ea72:	2100      	movs	r1, #0
{
   1ea74:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1ea76:	f7ff fcd3 	bl	1e420 <settings_name_next>
   1ea7a:	280d      	cmp	r0, #13
   1ea7c:	d118      	bne.n	1eab0 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1ea7e:	7b23      	ldrb	r3, [r4, #12]
   1ea80:	2b30      	cmp	r3, #48	; 0x30
   1ea82:	d111      	bne.n	1eaa8 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1ea84:	2300      	movs	r3, #0
   1ea86:	702b      	strb	r3, [r5, #0]
   1ea88:	f104 060c 	add.w	r6, r4, #12
   1ea8c:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1ea8e:	462a      	mov	r2, r5
   1ea90:	4620      	mov	r0, r4
   1ea92:	2301      	movs	r3, #1
   1ea94:	2102      	movs	r1, #2
   1ea96:	3402      	adds	r4, #2
   1ea98:	f7ff f8ad 	bl	1dbf6 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1ea9c:	42b4      	cmp	r4, r6
   1ea9e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1eaa2:	d1f4      	bne.n	1ea8e <bt_settings_decode_key+0x20>
	return 0;
   1eaa4:	2000      	movs	r0, #0
}
   1eaa6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1eaa8:	2b31      	cmp	r3, #49	; 0x31
   1eaaa:	d101      	bne.n	1eab0 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1eaac:	2301      	movs	r3, #1
   1eaae:	e7ea      	b.n	1ea86 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1eab0:	f06f 0015 	mvn.w	r0, #21
   1eab4:	e7f7      	b.n	1eaa6 <bt_settings_decode_key+0x38>

0001eab6 <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   1eab6:	f7e5 b8a7 	b.w	3c08 <settings_subsys_init>

0001eaba <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1eaba:	b510      	push	{r4, lr}
   1eabc:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1eabe:	7801      	ldrb	r1, [r0, #0]
   1eac0:	7822      	ldrb	r2, [r4, #0]
   1eac2:	428a      	cmp	r2, r1
{
   1eac4:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1eac6:	d00e      	beq.n	1eae6 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1eac8:	4669      	mov	r1, sp
   1eaca:	f7e6 fa37 	bl	4f3c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1eace:	a905      	add	r1, sp, #20
   1ead0:	4620      	mov	r0, r4
   1ead2:	f7e6 fa33 	bl	4f3c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1ead6:	2210      	movs	r2, #16
   1ead8:	f10d 0115 	add.w	r1, sp, #21
   1eadc:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1eae0:	f007 ffa5 	bl	26a2e <memcmp>
   1eae4:	e007      	b.n	1eaf6 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1eae6:	2a01      	cmp	r2, #1
   1eae8:	d007      	beq.n	1eafa <bt_uuid_cmp+0x40>
   1eaea:	2a02      	cmp	r2, #2
   1eaec:	d008      	beq.n	1eb00 <bt_uuid_cmp+0x46>
   1eaee:	b95a      	cbnz	r2, 1eb08 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1eaf0:	8840      	ldrh	r0, [r0, #2]
   1eaf2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1eaf4:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1eaf6:	b00a      	add	sp, #40	; 0x28
   1eaf8:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1eafa:	6840      	ldr	r0, [r0, #4]
   1eafc:	6863      	ldr	r3, [r4, #4]
   1eafe:	e7f9      	b.n	1eaf4 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1eb00:	2210      	movs	r2, #16
   1eb02:	1c61      	adds	r1, r4, #1
   1eb04:	3001      	adds	r0, #1
   1eb06:	e7eb      	b.n	1eae0 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1eb08:	f06f 0015 	mvn.w	r0, #21
   1eb0c:	e7f3      	b.n	1eaf6 <bt_uuid_cmp+0x3c>

0001eb0e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1eb0e:	2a04      	cmp	r2, #4
{
   1eb10:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   1eb12:	d00d      	beq.n	1eb30 <bt_uuid_create+0x22>
   1eb14:	2a10      	cmp	r2, #16
   1eb16:	d019      	beq.n	1eb4c <bt_uuid_create+0x3e>
   1eb18:	2a02      	cmp	r2, #2
   1eb1a:	f04f 0300 	mov.w	r3, #0
   1eb1e:	d121      	bne.n	1eb64 <bt_uuid_create+0x56>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1eb20:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1eb22:	784a      	ldrb	r2, [r1, #1]
   1eb24:	780b      	ldrb	r3, [r1, #0]
   1eb26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1eb2a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1eb2c:	2001      	movs	r0, #1
}
   1eb2e:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1eb30:	2301      	movs	r3, #1
   1eb32:	7003      	strb	r3, [r0, #0]
   1eb34:	788a      	ldrb	r2, [r1, #2]
   1eb36:	78cc      	ldrb	r4, [r1, #3]
   1eb38:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1eb3a:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1eb3e:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1eb40:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1eb44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1eb48:	6042      	str	r2, [r0, #4]
		break;
   1eb4a:	e7ef      	b.n	1eb2c <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   1eb4c:	2302      	movs	r3, #2
   1eb4e:	f800 3b01 	strb.w	r3, [r0], #1
   1eb52:	f101 0310 	add.w	r3, r1, #16
   1eb56:	f851 2b04 	ldr.w	r2, [r1], #4
   1eb5a:	f840 2b04 	str.w	r2, [r0], #4
   1eb5e:	4299      	cmp	r1, r3
   1eb60:	d1f9      	bne.n	1eb56 <bt_uuid_create+0x48>
   1eb62:	e7e3      	b.n	1eb2c <bt_uuid_create+0x1e>
	switch (data_len) {
   1eb64:	4618      	mov	r0, r3
   1eb66:	e7e2      	b.n	1eb2e <bt_uuid_create+0x20>

0001eb68 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1eb68:	280f      	cmp	r0, #15
   1eb6a:	d806      	bhi.n	1eb7a <bt_hci_evt_get_flags+0x12>
   1eb6c:	280d      	cmp	r0, #13
   1eb6e:	d80b      	bhi.n	1eb88 <bt_hci_evt_get_flags+0x20>
   1eb70:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1eb72:	bf14      	ite	ne
   1eb74:	2002      	movne	r0, #2
   1eb76:	2003      	moveq	r0, #3
   1eb78:	4770      	bx	lr
	switch (evt) {
   1eb7a:	2813      	cmp	r0, #19
   1eb7c:	d004      	beq.n	1eb88 <bt_hci_evt_get_flags+0x20>
   1eb7e:	281a      	cmp	r0, #26
   1eb80:	bf14      	ite	ne
   1eb82:	2002      	movne	r0, #2
   1eb84:	2001      	moveq	r0, #1
   1eb86:	4770      	bx	lr
   1eb88:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1eb8a:	4770      	bx	lr

0001eb8c <handle_event>:
{
   1eb8c:	b410      	push	{r4}
   1eb8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1eb92:	4604      	mov	r4, r0
   1eb94:	4608      	mov	r0, r1
		if (handler->event != event) {
   1eb96:	7811      	ldrb	r1, [r2, #0]
   1eb98:	42a1      	cmp	r1, r4
   1eb9a:	d004      	beq.n	1eba6 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1eb9c:	3208      	adds	r2, #8
   1eb9e:	429a      	cmp	r2, r3
   1eba0:	d1f9      	bne.n	1eb96 <handle_event+0xa>
}
   1eba2:	bc10      	pop	{r4}
   1eba4:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1eba6:	8981      	ldrh	r1, [r0, #12]
   1eba8:	7853      	ldrb	r3, [r2, #1]
   1ebaa:	4299      	cmp	r1, r3
   1ebac:	d3f9      	bcc.n	1eba2 <handle_event+0x16>
		handler->handler(buf);
   1ebae:	6853      	ldr	r3, [r2, #4]
}
   1ebb0:	bc10      	pop	{r4}
		handler->handler(buf);
   1ebb2:	4718      	bx	r3

0001ebb4 <hci_data_buf_overflow>:
}
   1ebb4:	4770      	bx	lr

0001ebb6 <get_adv_channel_map>:
{
   1ebb6:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1ebb8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1ebbc:	bf0c      	ite	eq
   1ebbe:	2007      	moveq	r0, #7
   1ebc0:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1ebc2:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1ebc4:	bf48      	it	mi
   1ebc6:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1ebca:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1ebcc:	bf48      	it	mi
   1ebce:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1ebd2:	4770      	bx	lr

0001ebd4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ebd4:	f3bf 8f5b 	dmb	ish
   1ebd8:	6800      	ldr	r0, [r0, #0]
   1ebda:	f3bf 8f5b 	dmb	ish
}
   1ebde:	4770      	bx	lr

0001ebe0 <atomic_or>:
{
   1ebe0:	4603      	mov	r3, r0
}
   1ebe2:	f3bf 8f5b 	dmb	ish
   1ebe6:	e853 0f00 	ldrex	r0, [r3]
   1ebea:	ea40 0201 	orr.w	r2, r0, r1
   1ebee:	e843 2c00 	strex	ip, r2, [r3]
   1ebf2:	f1bc 0f00 	cmp.w	ip, #0
   1ebf6:	d1f6      	bne.n	1ebe6 <atomic_or+0x6>
   1ebf8:	f3bf 8f5b 	dmb	ish
   1ebfc:	4770      	bx	lr

0001ebfe <hci_hardware_error>:
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   1ebfe:	2101      	movs	r1, #1
   1ec00:	3008      	adds	r0, #8
   1ec02:	f002 b961 	b.w	20ec8 <net_buf_simple_pull_mem>

0001ec06 <le_data_len_change>:
{
   1ec06:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1ec08:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1ec0a:	8818      	ldrh	r0, [r3, #0]
   1ec0c:	f7e7 ff56 	bl	6abc <bt_conn_lookup_handle>
	if (!conn) {
   1ec10:	b118      	cbz	r0, 1ec1a <le_data_len_change+0x14>
}
   1ec12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1ec16:	f000 bbaa 	b.w	1f36e <bt_conn_unref>
}
   1ec1a:	bd08      	pop	{r3, pc}

0001ec1c <hci_disconn_complete_prio>:
{
   1ec1c:	b510      	push	{r4, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1ec1e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1ec20:	781a      	ldrb	r2, [r3, #0]
   1ec22:	b96a      	cbnz	r2, 1ec40 <hci_disconn_complete_prio+0x24>
	conn = bt_conn_lookup_handle(handle);
   1ec24:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1ec28:	f7e7 ff48 	bl	6abc <bt_conn_lookup_handle>
	if (!conn) {
   1ec2c:	4604      	mov	r4, r0
   1ec2e:	b138      	cbz	r0, 1ec40 <hci_disconn_complete_prio+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1ec30:	2101      	movs	r1, #1
   1ec32:	f7e7 ffa5 	bl	6b80 <bt_conn_set_state>
	bt_conn_unref(conn);
   1ec36:	4620      	mov	r0, r4
}
   1ec38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1ec3c:	f000 bb97 	b.w	1f36e <bt_conn_unref>
}
   1ec40:	bd10      	pop	{r4, pc}

0001ec42 <hci_disconn_complete>:
{
   1ec42:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1ec44:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1ec46:	7835      	ldrb	r5, [r6, #0]
   1ec48:	b985      	cbnz	r5, 1ec6c <hci_disconn_complete+0x2a>
	conn = bt_conn_lookup_handle(handle);
   1ec4a:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1ec4e:	f7e7 ff35 	bl	6abc <bt_conn_lookup_handle>
	if (!conn) {
   1ec52:	4604      	mov	r4, r0
   1ec54:	b150      	cbz	r0, 1ec6c <hci_disconn_complete+0x2a>
	conn->err = evt->reason;
   1ec56:	78f3      	ldrb	r3, [r6, #3]
   1ec58:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1ec5a:	4629      	mov	r1, r5
   1ec5c:	f7e7 ff90 	bl	6b80 <bt_conn_set_state>
	conn->handle = 0U;
   1ec60:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   1ec62:	4620      	mov	r0, r4
}
   1ec64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1ec68:	f000 bb81 	b.w	1f36e <bt_conn_unref>
}
   1ec6c:	bd70      	pop	{r4, r5, r6, pc}

0001ec6e <atomic_and>:
{
   1ec6e:	4603      	mov	r3, r0
}
   1ec70:	f3bf 8f5b 	dmb	ish
   1ec74:	e853 0f00 	ldrex	r0, [r3]
   1ec78:	ea00 0201 	and.w	r2, r0, r1
   1ec7c:	e843 2c00 	strex	ip, r2, [r3]
   1ec80:	f1bc 0f00 	cmp.w	ip, #0
   1ec84:	d1f6      	bne.n	1ec74 <atomic_and+0x6>
   1ec86:	f3bf 8f5b 	dmb	ish
   1ec8a:	4770      	bx	lr

0001ec8c <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1ec8c:	460b      	mov	r3, r1
   1ec8e:	b410      	push	{r4}
   1ec90:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ec92:	f001 041f 	and.w	r4, r1, #31
   1ec96:	2101      	movs	r1, #1
   1ec98:	40a1      	lsls	r1, r4

	if (val) {
   1ec9a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1ec9e:	b112      	cbz	r2, 1eca6 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1eca0:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1eca2:	f7ff bf9d 	b.w	1ebe0 <atomic_or>
}
   1eca6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1eca8:	43c9      	mvns	r1, r1
   1ecaa:	f7ff bfe0 	b.w	1ec6e <atomic_and>

0001ecae <le_conn_update_complete>:
{
   1ecae:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1ecb0:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1ecb2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1ecb6:	f7e7 ff01 	bl	6abc <bt_conn_lookup_handle>
	if (!conn) {
   1ecba:	4604      	mov	r4, r0
   1ecbc:	b1c0      	cbz	r0, 1ecf0 <le_conn_update_complete+0x42>
	if (!evt->status) {
   1ecbe:	782b      	ldrb	r3, [r5, #0]
   1ecc0:	b9c3      	cbnz	r3, 1ecf4 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1ecc2:	792a      	ldrb	r2, [r5, #4]
   1ecc4:	78eb      	ldrb	r3, [r5, #3]
   1ecc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ecca:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1ecce:	79aa      	ldrb	r2, [r5, #6]
   1ecd0:	796b      	ldrb	r3, [r5, #5]
   1ecd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ecd6:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1ecda:	79eb      	ldrb	r3, [r5, #7]
   1ecdc:	7a2a      	ldrb	r2, [r5, #8]
   1ecde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ece2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1ece6:	f7e7 fdbd 	bl	6864 <notify_le_param_updated>
	bt_conn_unref(conn);
   1ecea:	4620      	mov	r0, r4
   1ecec:	f000 fb3f 	bl	1f36e <bt_conn_unref>
}
   1ecf0:	b003      	add	sp, #12
   1ecf2:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1ecf4:	2b1a      	cmp	r3, #26
   1ecf6:	d1f8      	bne.n	1ecea <le_conn_update_complete+0x3c>
   1ecf8:	78c3      	ldrb	r3, [r0, #3]
   1ecfa:	2b01      	cmp	r3, #1
   1ecfc:	d1f5      	bne.n	1ecea <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ecfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1ed02:	3004      	adds	r0, #4
   1ed04:	f7ff ff6c 	bl	1ebe0 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   1ed08:	0543      	lsls	r3, r0, #21
   1ed0a:	d4ee      	bmi.n	1ecea <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1ed0c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1ed10:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1ed12:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1ed14:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1ed18:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1ed1a:	4620      	mov	r0, r4
   1ed1c:	f7e8 f9a6 	bl	706c <bt_l2cap_update_conn_param>
   1ed20:	e7e3      	b.n	1ecea <le_conn_update_complete+0x3c>

0001ed22 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1ed22:	2207      	movs	r2, #7
   1ed24:	f007 be83 	b.w	26a2e <memcmp>

0001ed28 <bt_addr_copy>:
   1ed28:	680b      	ldr	r3, [r1, #0]
   1ed2a:	6003      	str	r3, [r0, #0]
   1ed2c:	888b      	ldrh	r3, [r1, #4]
   1ed2e:	8083      	strh	r3, [r0, #4]
}
   1ed30:	4770      	bx	lr

0001ed32 <bt_addr_le_copy>:
   1ed32:	680b      	ldr	r3, [r1, #0]
   1ed34:	6003      	str	r3, [r0, #0]
   1ed36:	888b      	ldrh	r3, [r1, #4]
   1ed38:	8083      	strh	r3, [r0, #4]
   1ed3a:	798b      	ldrb	r3, [r1, #6]
   1ed3c:	7183      	strb	r3, [r0, #6]
}
   1ed3e:	4770      	bx	lr

0001ed40 <hci_vendor_event>:
   1ed40:	4770      	bx	lr

0001ed42 <hci_le_read_max_data_len>:
{
   1ed42:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ed44:	4606      	mov	r6, r0
   1ed46:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1ed48:	aa01      	add	r2, sp, #4
   1ed4a:	2100      	movs	r1, #0
   1ed4c:	f242 002f 	movw	r0, #8239	; 0x202f
   1ed50:	f7e6 fb2c 	bl	53ac <bt_hci_cmd_send_sync>
	if (err) {
   1ed54:	4604      	mov	r4, r0
   1ed56:	b948      	cbnz	r0, 1ed6c <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1ed58:	9801      	ldr	r0, [sp, #4]
   1ed5a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1ed5c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1ed60:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1ed62:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1ed66:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1ed68:	f7f5 fcfe 	bl	14768 <net_buf_unref>
}
   1ed6c:	4620      	mov	r0, r4
   1ed6e:	b002      	add	sp, #8
   1ed70:	bd70      	pop	{r4, r5, r6, pc}

0001ed72 <hci_set_ad>:
{
   1ed72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed76:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1ed78:	2120      	movs	r1, #32
{
   1ed7a:	4682      	mov	sl, r0
   1ed7c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1ed7e:	f7e6 fadd 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
   1ed82:	4606      	mov	r6, r0
   1ed84:	2800      	cmp	r0, #0
   1ed86:	d04a      	beq.n	1ee1e <hci_set_ad+0xac>
	set_data = net_buf_add(buf, sizeof(*set_data));
   1ed88:	2120      	movs	r1, #32
   1ed8a:	3008      	adds	r0, #8
   1ed8c:	f002 f86a 	bl	20e64 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1ed90:	2220      	movs	r2, #32
   1ed92:	2100      	movs	r1, #0
   1ed94:	4681      	mov	r9, r0
   1ed96:	f007 fe79 	bl	26a8c <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1ed9a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1ed9e:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1eda2:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1eda4:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1eda6:	f8d4 8000 	ldr.w	r8, [r4]
   1edaa:	2300      	movs	r3, #0
   1edac:	6862      	ldr	r2, [r4, #4]
   1edae:	4293      	cmp	r3, r2
   1edb0:	d30d      	bcc.n	1edce <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   1edb2:	9b00      	ldr	r3, [sp, #0]
   1edb4:	3408      	adds	r4, #8
   1edb6:	42a3      	cmp	r3, r4
   1edb8:	d1f5      	bne.n	1eda6 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1edba:	2200      	movs	r2, #0
   1edbc:	4631      	mov	r1, r6
   1edbe:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1edc0:	f889 5000 	strb.w	r5, [r9]
}
   1edc4:	b003      	add	sp, #12
   1edc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1edca:	f7e6 baef 	b.w	53ac <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1edce:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1edd2:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1edd6:	1ca8      	adds	r0, r5, #2
   1edd8:	1881      	adds	r1, r0, r2
   1edda:	291f      	cmp	r1, #31
   1eddc:	d908      	bls.n	1edf0 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1edde:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1ede2:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1ede6:	d11f      	bne.n	1ee28 <hci_set_ad+0xb6>
   1ede8:	2a00      	cmp	r2, #0
   1edea:	dd1d      	ble.n	1ee28 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   1edec:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1edf0:	b2d7      	uxtb	r7, r2
   1edf2:	1c79      	adds	r1, r7, #1
   1edf4:	f80b 1005 	strb.w	r1, [fp, r5]
   1edf8:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   1edfa:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1edfc:	fa5b f080 	uxtab	r0, fp, r0
   1ee00:	f80b c001 	strb.w	ip, [fp, r1]
   1ee04:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1ee08:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1ee0a:	3702      	adds	r7, #2
   1ee0c:	f007 fe1d 	bl	26a4a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1ee10:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1ee12:	443d      	add	r5, r7
   1ee14:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1ee16:	3301      	adds	r3, #1
   1ee18:	f108 0808 	add.w	r8, r8, #8
   1ee1c:	e7c6      	b.n	1edac <hci_set_ad+0x3a>
		return -ENOBUFS;
   1ee1e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1ee22:	b003      	add	sp, #12
   1ee24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   1ee28:	4630      	mov	r0, r6
   1ee2a:	f7f5 fc9d 	bl	14768 <net_buf_unref>
		return err;
   1ee2e:	f06f 0015 	mvn.w	r0, #21
   1ee32:	e7f6      	b.n	1ee22 <hci_set_ad+0xb0>

0001ee34 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1ee34:	8802      	ldrh	r2, [r0, #0]
   1ee36:	8843      	ldrh	r3, [r0, #2]
   1ee38:	429a      	cmp	r2, r3
{
   1ee3a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1ee3c:	d818      	bhi.n	1ee70 <bt_le_conn_params_valid+0x3c>
   1ee3e:	2a05      	cmp	r2, #5
   1ee40:	d916      	bls.n	1ee70 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1ee42:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1ee46:	d813      	bhi.n	1ee70 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1ee48:	8884      	ldrh	r4, [r0, #4]
   1ee4a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1ee4e:	d20f      	bcs.n	1ee70 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1ee50:	88c1      	ldrh	r1, [r0, #6]
   1ee52:	f1a1 020a 	sub.w	r2, r1, #10
   1ee56:	b292      	uxth	r2, r2
   1ee58:	f640 4076 	movw	r0, #3190	; 0xc76
   1ee5c:	4282      	cmp	r2, r0
   1ee5e:	d807      	bhi.n	1ee70 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1ee60:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1ee64:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1ee68:	bf34      	ite	cc
   1ee6a:	2001      	movcc	r0, #1
   1ee6c:	2000      	movcs	r0, #0
}
   1ee6e:	bd10      	pop	{r4, pc}
		return false;
   1ee70:	2000      	movs	r0, #0
   1ee72:	e7fc      	b.n	1ee6e <bt_le_conn_params_valid+0x3a>

0001ee74 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1ee74:	2301      	movs	r3, #1
{
   1ee76:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1ee78:	2106      	movs	r1, #6
{
   1ee7a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1ee7c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1ee80:	f7ec fe0a 	bl	ba98 <bt_rand>
	if (err) {
   1ee84:	b918      	cbnz	r0, 1ee8e <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1ee86:	79a3      	ldrb	r3, [r4, #6]
   1ee88:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ee8c:	71a3      	strb	r3, [r4, #6]
}
   1ee8e:	bd10      	pop	{r4, pc}

0001ee90 <bt_hci_disconnect>:
{
   1ee90:	b570      	push	{r4, r5, r6, lr}
   1ee92:	4606      	mov	r6, r0
   1ee94:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1ee96:	f240 4006 	movw	r0, #1030	; 0x406
   1ee9a:	2103      	movs	r1, #3
   1ee9c:	f7e6 fa4e 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
   1eea0:	4604      	mov	r4, r0
   1eea2:	b160      	cbz	r0, 1eebe <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   1eea4:	2103      	movs	r1, #3
   1eea6:	3008      	adds	r0, #8
   1eea8:	f001 ffdc 	bl	20e64 <net_buf_simple_add>
	disconn->reason = reason;
   1eeac:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1eeae:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1eeb0:	4621      	mov	r1, r4
   1eeb2:	f240 4006 	movw	r0, #1030	; 0x406
}
   1eeb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1eeba:	f7e6 bc3f 	b.w	573c <bt_hci_cmd_send>
}
   1eebe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1eec2:	bd70      	pop	{r4, r5, r6, pc}

0001eec4 <bt_le_set_data_len>:
{
   1eec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eec6:	4607      	mov	r7, r0
   1eec8:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1eeca:	f242 0022 	movw	r0, #8226	; 0x2022
   1eece:	2106      	movs	r1, #6
{
   1eed0:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1eed2:	f7e6 fa33 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
   1eed6:	4604      	mov	r4, r0
   1eed8:	b170      	cbz	r0, 1eef8 <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   1eeda:	2106      	movs	r1, #6
   1eedc:	3008      	adds	r0, #8
   1eede:	f001 ffc1 	bl	20e64 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1eee2:	883b      	ldrh	r3, [r7, #0]
   1eee4:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1eee6:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1eee8:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1eeea:	4621      	mov	r1, r4
   1eeec:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1eef0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1eef4:	f7e6 bc22 	b.w	573c <bt_hci_cmd_send>
}
   1eef8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1eefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001eefe <bt_le_set_phy>:
{
   1eefe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ef02:	4680      	mov	r8, r0
   1ef04:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1ef06:	f242 0032 	movw	r0, #8242	; 0x2032
   1ef0a:	2107      	movs	r1, #7
{
   1ef0c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1ef10:	4616      	mov	r6, r2
   1ef12:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1ef14:	f7e6 fa12 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
   1ef18:	4604      	mov	r4, r0
   1ef1a:	b190      	cbz	r0, 1ef42 <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   1ef1c:	2107      	movs	r1, #7
   1ef1e:	3008      	adds	r0, #8
   1ef20:	f001 ffa0 	bl	20e64 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1ef24:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1ef28:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1ef2a:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1ef2c:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1ef2e:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1ef30:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1ef34:	4621      	mov	r1, r4
   1ef36:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1ef3a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1ef3e:	f7e6 bbfd 	b.w	573c <bt_hci_cmd_send>
}
   1ef42:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ef46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ef4a <le_phy_update_complete>:
{
   1ef4a:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1ef4c:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1ef4e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1ef52:	f7e7 fdb3 	bl	6abc <bt_conn_lookup_handle>
	if (!conn) {
   1ef56:	4604      	mov	r4, r0
   1ef58:	b1a0      	cbz	r0, 1ef84 <le_phy_update_complete+0x3a>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1ef5a:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ef5c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1ef60:	4628      	mov	r0, r5
   1ef62:	f7ff fe84 	bl	1ec6e <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1ef66:	0603      	lsls	r3, r0, #24
   1ef68:	d507      	bpl.n	1ef7a <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ef6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1ef6e:	4628      	mov	r0, r5
   1ef70:	f7ff fe36 	bl	1ebe0 <atomic_or>
		conn_auto_initiate(conn);
   1ef74:	4620      	mov	r0, r4
   1ef76:	f7e6 fc03 	bl	5780 <conn_auto_initiate>
	bt_conn_unref(conn);
   1ef7a:	4620      	mov	r0, r4
}
   1ef7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1ef80:	f000 b9f5 	b.w	1f36e <bt_conn_unref>
}
   1ef84:	bd38      	pop	{r3, r4, r5, pc}

0001ef86 <le_remote_feat_complete>:
{
   1ef86:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1ef88:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1ef8a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1ef8e:	f7e7 fd95 	bl	6abc <bt_conn_lookup_handle>
	if (!conn) {
   1ef92:	4604      	mov	r4, r0
   1ef94:	b1a8      	cbz	r0, 1efc2 <le_remote_feat_complete+0x3c>
	if (!evt->status) {
   1ef96:	782b      	ldrb	r3, [r5, #0]
   1ef98:	b933      	cbnz	r3, 1efa8 <le_remote_feat_complete+0x22>
   1ef9a:	f855 3f03 	ldr.w	r3, [r5, #3]!
   1ef9e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
   1efa2:	686b      	ldr	r3, [r5, #4]
   1efa4:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
   1efa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1efac:	1d20      	adds	r0, r4, #4
   1efae:	f7ff fe17 	bl	1ebe0 <atomic_or>
	conn_auto_initiate(conn);
   1efb2:	4620      	mov	r0, r4
   1efb4:	f7e6 fbe4 	bl	5780 <conn_auto_initiate>
	bt_conn_unref(conn);
   1efb8:	4620      	mov	r0, r4
}
   1efba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1efbe:	f000 b9d6 	b.w	1f36e <bt_conn_unref>
}
   1efc2:	bd38      	pop	{r3, r4, r5, pc}

0001efc4 <le_conn_param_neg_reply>:
{
   1efc4:	b570      	push	{r4, r5, r6, lr}
   1efc6:	4606      	mov	r6, r0
   1efc8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1efca:	f242 0021 	movw	r0, #8225	; 0x2021
   1efce:	2103      	movs	r1, #3
   1efd0:	f7e6 f9b4 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
   1efd4:	4604      	mov	r4, r0
   1efd6:	b160      	cbz	r0, 1eff2 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
   1efd8:	2103      	movs	r1, #3
   1efda:	3008      	adds	r0, #8
   1efdc:	f001 ff42 	bl	20e64 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1efe0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1efe2:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1efe4:	4621      	mov	r1, r4
   1efe6:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1efea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1efee:	f7e6 bba5 	b.w	573c <bt_hci_cmd_send>
}
   1eff2:	bd70      	pop	{r4, r5, r6, pc}

0001eff4 <le_conn_param_req>:
{
   1eff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1eff6:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1eff8:	78d9      	ldrb	r1, [r3, #3]
   1effa:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1effc:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1effe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1f002:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1f006:	7959      	ldrb	r1, [r3, #5]
   1f008:	791a      	ldrb	r2, [r3, #4]
   1f00a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1f00e:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1f012:	799a      	ldrb	r2, [r3, #6]
   1f014:	79d9      	ldrb	r1, [r3, #7]
   1f016:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1f01a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1f01e:	7a1a      	ldrb	r2, [r3, #8]
   1f020:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1f022:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1f024:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1f028:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1f02a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1f02e:	f7e7 fd45 	bl	6abc <bt_conn_lookup_handle>
	if (!conn) {
   1f032:	4606      	mov	r6, r0
   1f034:	b928      	cbnz	r0, 1f042 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1f036:	2102      	movs	r1, #2
   1f038:	4620      	mov	r0, r4
   1f03a:	f7ff ffc3 	bl	1efc4 <le_conn_param_neg_reply>
}
   1f03e:	b003      	add	sp, #12
   1f040:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1f042:	4669      	mov	r1, sp
   1f044:	f7e7 fc42 	bl	68cc <le_param_req>
   1f048:	b938      	cbnz	r0, 1f05a <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1f04a:	211e      	movs	r1, #30
   1f04c:	4620      	mov	r0, r4
   1f04e:	f7ff ffb9 	bl	1efc4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1f052:	4630      	mov	r0, r6
   1f054:	f000 f98b 	bl	1f36e <bt_conn_unref>
   1f058:	e7f1      	b.n	1f03e <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1f05a:	210e      	movs	r1, #14
   1f05c:	f242 0020 	movw	r0, #8224	; 0x2020
   1f060:	f7e6 f96c 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
   1f064:	4605      	mov	r5, r0
   1f066:	2800      	cmp	r0, #0
   1f068:	d0f3      	beq.n	1f052 <le_conn_param_req+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
   1f06a:	210e      	movs	r1, #14
   1f06c:	3008      	adds	r0, #8
   1f06e:	f001 fef9 	bl	20e64 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1f072:	220e      	movs	r2, #14
   1f074:	4604      	mov	r4, r0
   1f076:	2100      	movs	r1, #0
   1f078:	f007 fd08 	bl	26a8c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1f07c:	f8bd 3000 	ldrh.w	r3, [sp]
   1f080:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1f082:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1f086:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1f088:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1f08c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1f08e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1f092:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1f094:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1f096:	4629      	mov	r1, r5
   1f098:	f242 0020 	movw	r0, #8224	; 0x2020
   1f09c:	f7e6 fb4e 	bl	573c <bt_hci_cmd_send>
   1f0a0:	e7d7      	b.n	1f052 <le_conn_param_req+0x5e>

0001f0a2 <bt_addr_le_is_bonded>:
}
   1f0a2:	2000      	movs	r0, #0
   1f0a4:	4770      	bx	lr

0001f0a6 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1f0a6:	6880      	ldr	r0, [r0, #8]
   1f0a8:	f7e7 ba3c 	b.w	6524 <enh_conn_complete>

0001f0ac <le_legacy_conn_complete>:
{
   1f0ac:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1f0ae:	6881      	ldr	r1, [r0, #8]
{
   1f0b0:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   1f0b2:	780b      	ldrb	r3, [r1, #0]
   1f0b4:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1f0b8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1f0bc:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1f0c0:	78cb      	ldrb	r3, [r1, #3]
   1f0c2:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1f0c6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1f0ca:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1f0ce:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1f0d2:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1f0d6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1f0da:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1f0de:	7c4b      	ldrb	r3, [r1, #17]
   1f0e0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1f0e4:	a803      	add	r0, sp, #12
   1f0e6:	3104      	adds	r1, #4
   1f0e8:	f7ff fe23 	bl	1ed32 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1f0ec:	2200      	movs	r2, #0
   1f0ee:	4669      	mov	r1, sp
   1f0f0:	f10d 0013 	add.w	r0, sp, #19
   1f0f4:	9200      	str	r2, [sp, #0]
   1f0f6:	f8ad 2004 	strh.w	r2, [sp, #4]
   1f0fa:	f7ff fe15 	bl	1ed28 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1f0fe:	4669      	mov	r1, sp
   1f100:	f10d 0019 	add.w	r0, sp, #25
   1f104:	9200      	str	r2, [sp, #0]
   1f106:	f8ad 2004 	strh.w	r2, [sp, #4]
   1f10a:	f7ff fe0d 	bl	1ed28 <bt_addr_copy>
	enh_conn_complete(&enh);
   1f10e:	a802      	add	r0, sp, #8
   1f110:	f7e7 fa08 	bl	6524 <enh_conn_complete>
}
   1f114:	b00b      	add	sp, #44	; 0x2c
   1f116:	f85d fb04 	ldr.w	pc, [sp], #4

0001f11a <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1f11a:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1f11c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1f120:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1f122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f126:	2100      	movs	r1, #0
{
   1f128:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1f12a:	f7e7 fac3 	bl	66b4 <bt_buf_get_evt>

	hdr = net_buf_add(buf, sizeof(*hdr));
   1f12e:	2102      	movs	r1, #2
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1f130:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   1f132:	3008      	adds	r0, #8
   1f134:	f001 fe96 	bl	20e64 <net_buf_simple_add>
	hdr->evt = evt;
   1f138:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1f13a:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1f13c:	4620      	mov	r0, r4
   1f13e:	bd70      	pop	{r4, r5, r6, pc}

0001f140 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1f140:	3103      	adds	r1, #3
{
   1f142:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1f144:	b2c9      	uxtb	r1, r1
{
   1f146:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1f148:	200e      	movs	r0, #14
   1f14a:	f7ff ffe6 	bl	1f11a <bt_hci_evt_create>

	cc = net_buf_add(buf, sizeof(*cc));
   1f14e:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1f150:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
   1f152:	3008      	adds	r0, #8
   1f154:	f001 fe86 	bl	20e64 <net_buf_simple_add>
	cc->ncmd = 1U;
   1f158:	2301      	movs	r3, #1
   1f15a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1f15c:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1f160:	4620      	mov	r0, r4
   1f162:	bd38      	pop	{r3, r4, r5, pc}

0001f164 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1f164:	b570      	push	{r4, r5, r6, lr}
   1f166:	4605      	mov	r5, r0
   1f168:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1f16a:	200f      	movs	r0, #15
   1f16c:	2104      	movs	r1, #4
   1f16e:	f7ff ffd4 	bl	1f11a <bt_hci_evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   1f172:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1f174:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
   1f176:	3008      	adds	r0, #8
   1f178:	f001 fe74 	bl	20e64 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1U;
   1f17c:	2201      	movs	r2, #1
	cs->status = status;
   1f17e:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1f180:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1f182:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1f184:	4620      	mov	r0, r4
   1f186:	bd70      	pop	{r4, r5, r6, pc}

0001f188 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f188:	f3bf 8f5b 	dmb	ish
   1f18c:	6800      	ldr	r0, [r0, #0]
   1f18e:	f3bf 8f5b 	dmb	ish
}
   1f192:	4770      	bx	lr

0001f194 <atomic_inc>:
{
   1f194:	4603      	mov	r3, r0
}
   1f196:	f3bf 8f5b 	dmb	ish
   1f19a:	e853 0f00 	ldrex	r0, [r3]
   1f19e:	1c42      	adds	r2, r0, #1
   1f1a0:	e843 2100 	strex	r1, r2, [r3]
   1f1a4:	2900      	cmp	r1, #0
   1f1a6:	d1f8      	bne.n	1f19a <atomic_inc+0x6>
   1f1a8:	f3bf 8f5b 	dmb	ish
   1f1ac:	4770      	bx	lr

0001f1ae <tx_notify>:
{
   1f1ae:	b570      	push	{r4, r5, r6, lr}
   1f1b0:	4604      	mov	r4, r0
	__asm__ volatile(
   1f1b2:	f04f 0220 	mov.w	r2, #32
   1f1b6:	f3ef 8311 	mrs	r3, BASEPRI
   1f1ba:	f382 8811 	msr	BASEPRI, r2
   1f1be:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1f1c2:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1f1c4:	b920      	cbnz	r0, 1f1d0 <tx_notify+0x22>
	__asm__ volatile(
   1f1c6:	f383 8811 	msr	BASEPRI, r3
   1f1ca:	f3bf 8f6f 	isb	sy
}
   1f1ce:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f1d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1f1d2:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1f1d4:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f1d6:	4288      	cmp	r0, r1
	list->tail = node;
   1f1d8:	bf08      	it	eq
   1f1da:	6262      	streq	r2, [r4, #36]	; 0x24
   1f1dc:	f383 8811 	msr	BASEPRI, r3
   1f1e0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1f1e4:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1f1e8:	f7e7 fa8e 	bl	6708 <tx_free>
		cb(conn, user_data);
   1f1ec:	4631      	mov	r1, r6
   1f1ee:	4620      	mov	r0, r4
   1f1f0:	47a8      	blx	r5
	while (1) {
   1f1f2:	e7de      	b.n	1f1b2 <tx_notify+0x4>

0001f1f4 <tx_complete_work>:
	tx_notify(conn);
   1f1f4:	3828      	subs	r0, #40	; 0x28
   1f1f6:	f7ff bfda 	b.w	1f1ae <tx_notify>

0001f1fa <bt_conn_new>:
{
   1f1fa:	b570      	push	{r4, r5, r6, lr}
   1f1fc:	460a      	mov	r2, r1
   1f1fe:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1f200:	2600      	movs	r6, #0
   1f202:	4296      	cmp	r6, r2
   1f204:	d102      	bne.n	1f20c <bt_conn_new+0x12>
		return NULL;
   1f206:	2400      	movs	r4, #0
}
   1f208:	4620      	mov	r0, r4
   1f20a:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
   1f20c:	f104 0554 	add.w	r5, r4, #84	; 0x54
   1f210:	4628      	mov	r0, r5
   1f212:	f7ff ffb9 	bl	1f188 <atomic_get>
   1f216:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1f21a:	4601      	mov	r1, r0
   1f21c:	b110      	cbz	r0, 1f224 <bt_conn_new+0x2a>
	for (i = 0; i < size; i++) {
   1f21e:	3601      	adds	r6, #1
   1f220:	461c      	mov	r4, r3
   1f222:	e7ee      	b.n	1f202 <bt_conn_new+0x8>
	if (!conn) {
   1f224:	2c00      	cmp	r4, #0
   1f226:	d0ef      	beq.n	1f208 <bt_conn_new+0xe>
   1f228:	22b8      	movs	r2, #184	; 0xb8
   1f22a:	4620      	mov	r0, r4
   1f22c:	f007 fc2e 	bl	26a8c <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f230:	f3bf 8f5b 	dmb	ish
   1f234:	2301      	movs	r3, #1
   1f236:	e855 2f00 	ldrex	r2, [r5]
   1f23a:	e845 3100 	strex	r1, r3, [r5]
   1f23e:	2900      	cmp	r1, #0
   1f240:	d1f9      	bne.n	1f236 <bt_conn_new+0x3c>
   1f242:	f3bf 8f5b 	dmb	ish
   1f246:	e7df      	b.n	1f208 <bt_conn_new+0xe>

0001f248 <bt_conn_get_security>:
}
   1f248:	2001      	movs	r0, #1
   1f24a:	4770      	bx	lr

0001f24c <bt_conn_reset_rx_state>:
{
   1f24c:	b510      	push	{r4, lr}
   1f24e:	4604      	mov	r4, r0
	if (!conn->rx) {
   1f250:	6900      	ldr	r0, [r0, #16]
   1f252:	b118      	cbz	r0, 1f25c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1f254:	f7f5 fa88 	bl	14768 <net_buf_unref>
	conn->rx = NULL;
   1f258:	2300      	movs	r3, #0
   1f25a:	6123      	str	r3, [r4, #16]
}
   1f25c:	bd10      	pop	{r4, pc}

0001f25e <bt_conn_recv>:
{
   1f25e:	b570      	push	{r4, r5, r6, lr}
   1f260:	4616      	mov	r6, r2
   1f262:	4604      	mov	r4, r0
   1f264:	460d      	mov	r5, r1
	tx_notify(conn);
   1f266:	f7ff ffa2 	bl	1f1ae <tx_notify>
	switch (flags) {
   1f26a:	2e01      	cmp	r6, #1
   1f26c:	d01a      	beq.n	1f2a4 <bt_conn_recv+0x46>
   1f26e:	2e02      	cmp	r6, #2
   1f270:	d11a      	bne.n	1f2a8 <bt_conn_recv+0x4a>
		if (conn->rx) {
   1f272:	6923      	ldr	r3, [r4, #16]
   1f274:	b113      	cbz	r3, 1f27c <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1f276:	4620      	mov	r0, r4
   1f278:	f7ff ffe8 	bl	1f24c <bt_conn_reset_rx_state>
		conn->rx = buf;
   1f27c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1f27e:	6921      	ldr	r1, [r4, #16]
   1f280:	898a      	ldrh	r2, [r1, #12]
   1f282:	2a01      	cmp	r2, #1
   1f284:	d931      	bls.n	1f2ea <bt_conn_recv+0x8c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1f286:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1f288:	7845      	ldrb	r5, [r0, #1]
   1f28a:	7803      	ldrb	r3, [r0, #0]
   1f28c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1f290:	3304      	adds	r3, #4
   1f292:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1f294:	429a      	cmp	r2, r3
   1f296:	d328      	bcc.n	1f2ea <bt_conn_recv+0x8c>
	if (conn->rx->len > acl_total_len) {
   1f298:	d920      	bls.n	1f2dc <bt_conn_recv+0x7e>
		bt_conn_reset_rx_state(conn);
   1f29a:	4620      	mov	r0, r4
}
   1f29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1f2a0:	f7ff bfd4 	b.w	1f24c <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1f2a4:	6920      	ldr	r0, [r4, #16]
   1f2a6:	b918      	cbnz	r0, 1f2b0 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1f2a8:	4620      	mov	r0, r4
   1f2aa:	f7ff ffcf 	bl	1f24c <bt_conn_reset_rx_state>
   1f2ae:	e001      	b.n	1f2b4 <bt_conn_recv+0x56>
		if (!buf->len) {
   1f2b0:	89ae      	ldrh	r6, [r5, #12]
   1f2b2:	b926      	cbnz	r6, 1f2be <bt_conn_recv+0x60>
		net_buf_unref(buf);
   1f2b4:	4628      	mov	r0, r5
}
   1f2b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   1f2ba:	f7f5 ba55 	b.w	14768 <net_buf_unref>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1f2be:	3008      	adds	r0, #8
   1f2c0:	f001 fe16 	bl	20ef0 <net_buf_simple_tailroom>
   1f2c4:	4286      	cmp	r6, r0
   1f2c6:	d8ef      	bhi.n	1f2a8 <bt_conn_recv+0x4a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1f2c8:	6920      	ldr	r0, [r4, #16]
   1f2ca:	89aa      	ldrh	r2, [r5, #12]
   1f2cc:	68a9      	ldr	r1, [r5, #8]
   1f2ce:	3008      	adds	r0, #8
   1f2d0:	f001 fdce 	bl	20e70 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1f2d4:	4628      	mov	r0, r5
   1f2d6:	f7f5 fa47 	bl	14768 <net_buf_unref>
		break;
   1f2da:	e7d0      	b.n	1f27e <bt_conn_recv+0x20>
	conn->rx = NULL;
   1f2dc:	2300      	movs	r3, #0
   1f2de:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1f2e0:	4620      	mov	r0, r4
}
   1f2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1f2e6:	f000 b961 	b.w	1f5ac <bt_l2cap_recv>
}
   1f2ea:	bd70      	pop	{r4, r5, r6, pc}

0001f2ec <conn_lookup_handle>:
{
   1f2ec:	b538      	push	{r3, r4, r5, lr}
   1f2ee:	f100 0354 	add.w	r3, r0, #84	; 0x54
	for (i = 0; i < size; i++) {
   1f2f2:	2400      	movs	r4, #0
   1f2f4:	428c      	cmp	r4, r1
   1f2f6:	d101      	bne.n	1f2fc <conn_lookup_handle+0x10>
	return NULL;
   1f2f8:	2500      	movs	r5, #0
   1f2fa:	e013      	b.n	1f324 <conn_lookup_handle+0x38>
		if (!atomic_get(&conns[i].ref)) {
   1f2fc:	4618      	mov	r0, r3
   1f2fe:	f1a3 0554 	sub.w	r5, r3, #84	; 0x54
   1f302:	f7ff ff41 	bl	1f188 <atomic_get>
   1f306:	b178      	cbz	r0, 1f328 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(&conns[i])) {
   1f308:	f813 0c4a 	ldrb.w	r0, [r3, #-74]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1f30c:	2801      	cmp	r0, #1
   1f30e:	d002      	beq.n	1f316 <conn_lookup_handle+0x2a>
   1f310:	3807      	subs	r0, #7
   1f312:	2801      	cmp	r0, #1
   1f314:	d808      	bhi.n	1f328 <conn_lookup_handle+0x3c>
		if (conns[i].handle == handle) {
   1f316:	f833 0c54 	ldrh.w	r0, [r3, #-84]
   1f31a:	4290      	cmp	r0, r2
   1f31c:	d104      	bne.n	1f328 <conn_lookup_handle+0x3c>
	atomic_val_t old = atomic_inc(&conn->ref);
   1f31e:	4618      	mov	r0, r3
   1f320:	f7ff ff38 	bl	1f194 <atomic_inc>
}
   1f324:	4628      	mov	r0, r5
   1f326:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1f328:	3401      	adds	r4, #1
   1f32a:	33b8      	adds	r3, #184	; 0xb8
   1f32c:	e7e2      	b.n	1f2f4 <conn_lookup_handle+0x8>

0001f32e <bt_conn_is_peer_addr_le>:
{
   1f32e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1f330:	7a03      	ldrb	r3, [r0, #8]
   1f332:	428b      	cmp	r3, r1
{
   1f334:	4604      	mov	r4, r0
   1f336:	4615      	mov	r5, r2
	if (id != conn->id) {
   1f338:	d115      	bne.n	1f366 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1f33a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f33e:	2207      	movs	r2, #7
   1f340:	4628      	mov	r0, r5
   1f342:	f007 fb74 	bl	26a2e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1f346:	b180      	cbz	r0, 1f36a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1f348:	78e3      	ldrb	r3, [r4, #3]
   1f34a:	2207      	movs	r2, #7
   1f34c:	b943      	cbnz	r3, 1f360 <bt_conn_is_peer_addr_le+0x32>
   1f34e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1f352:	4628      	mov	r0, r5
   1f354:	f007 fb6b 	bl	26a2e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1f358:	fab0 f080 	clz	r0, r0
   1f35c:	0940      	lsrs	r0, r0, #5
}
   1f35e:	bd38      	pop	{r3, r4, r5, pc}
   1f360:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1f364:	e7f5      	b.n	1f352 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1f366:	2000      	movs	r0, #0
   1f368:	e7f9      	b.n	1f35e <bt_conn_is_peer_addr_le+0x30>
		return true;
   1f36a:	2001      	movs	r0, #1
   1f36c:	e7f7      	b.n	1f35e <bt_conn_is_peer_addr_le+0x30>

0001f36e <bt_conn_unref>:
{
   1f36e:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1f370:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1f372:	f3bf 8f5b 	dmb	ish
   1f376:	e850 3f00 	ldrex	r3, [r0]
   1f37a:	3b01      	subs	r3, #1
   1f37c:	e840 3200 	strex	r2, r3, [r0]
   1f380:	2a00      	cmp	r2, #0
   1f382:	d1f8      	bne.n	1f376 <bt_conn_unref+0x8>
   1f384:	f3bf 8f5b 	dmb	ish
	    atomic_get(&conn->ref) == 0) {
   1f388:	f7ff fefe 	bl	1f188 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1f38c:	b918      	cbnz	r0, 1f396 <bt_conn_unref+0x28>
}
   1f38e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   1f392:	f7e7 b891 	b.w	64b8 <bt_le_adv_resume>
}
   1f396:	bd08      	pop	{r3, pc}

0001f398 <bt_conn_exists_le>:
{
   1f398:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1f39a:	f7e7 fb9b 	bl	6ad4 <bt_conn_lookup_addr_le>
	if (conn) {
   1f39e:	b110      	cbz	r0, 1f3a6 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1f3a0:	f7ff ffe5 	bl	1f36e <bt_conn_unref>
		return true;
   1f3a4:	2001      	movs	r0, #1
}
   1f3a6:	bd08      	pop	{r3, pc}

0001f3a8 <bt_conn_le_conn_update>:
{
   1f3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3aa:	4607      	mov	r7, r0
   1f3ac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1f3ae:	f242 0013 	movw	r0, #8211	; 0x2013
   1f3b2:	210e      	movs	r1, #14
   1f3b4:	f7e5 ffc2 	bl	533c <bt_hci_cmd_create>
	if (!buf) {
   1f3b8:	4606      	mov	r6, r0
   1f3ba:	b1d0      	cbz	r0, 1f3f2 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1f3bc:	210e      	movs	r1, #14
   1f3be:	3008      	adds	r0, #8
   1f3c0:	f001 fd50 	bl	20e64 <net_buf_simple_add>
   1f3c4:	220e      	movs	r2, #14
   1f3c6:	4604      	mov	r4, r0
   1f3c8:	2100      	movs	r1, #0
   1f3ca:	f007 fb5f 	bl	26a8c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1f3ce:	883b      	ldrh	r3, [r7, #0]
   1f3d0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1f3d2:	882b      	ldrh	r3, [r5, #0]
   1f3d4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1f3d6:	886b      	ldrh	r3, [r5, #2]
   1f3d8:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1f3da:	88ab      	ldrh	r3, [r5, #4]
   1f3dc:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1f3de:	88eb      	ldrh	r3, [r5, #6]
   1f3e0:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1f3e2:	4631      	mov	r1, r6
   1f3e4:	2200      	movs	r2, #0
}
   1f3e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1f3ea:	f242 0013 	movw	r0, #8211	; 0x2013
   1f3ee:	f7e5 bfdd 	b.w	53ac <bt_hci_cmd_send_sync>
}
   1f3f2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1f3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f3f8 <l2cap_connected>:
}
   1f3f8:	4770      	bx	lr

0001f3fa <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1f3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3fc:	4607      	mov	r7, r0
   1f3fe:	460e      	mov	r6, r1
   1f400:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1f402:	2300      	movs	r3, #0
   1f404:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f408:	2104      	movs	r1, #4
   1f40a:	2000      	movs	r0, #0
   1f40c:	f7e7 fce2 	bl	6dd4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1f410:	4604      	mov	r4, r0
   1f412:	b130      	cbz	r0, 1f422 <l2cap_create_le_sig_pdu.isra.0+0x28>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1f414:	2104      	movs	r1, #4
   1f416:	3008      	adds	r0, #8
   1f418:	f001 fd24 	bl	20e64 <net_buf_simple_add>
	hdr->code = code;
   1f41c:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1f41e:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1f420:	8045      	strh	r5, [r0, #2]
}
   1f422:	4620      	mov	r0, r4
   1f424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f426 <l2cap_disconnected>:
   1f426:	4770      	bx	lr

0001f428 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f428:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1f42a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f42c:	b17b      	cbz	r3, 1f44e <bt_l2cap_chan_remove+0x26>
   1f42e:	3b08      	subs	r3, #8
   1f430:	2200      	movs	r2, #0
   1f432:	b163      	cbz	r3, 1f44e <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1f434:	428b      	cmp	r3, r1
   1f436:	f103 0408 	add.w	r4, r3, #8
   1f43a:	d10f      	bne.n	1f45c <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1f43c:	688b      	ldr	r3, [r1, #8]
   1f43e:	b93a      	cbnz	r2, 1f450 <bt_l2cap_chan_remove+0x28>
   1f440:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   1f442:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   1f444:	4294      	cmp	r4, r2
   1f446:	d100      	bne.n	1f44a <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1f448:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   1f44a:	2300      	movs	r3, #0
   1f44c:	608b      	str	r3, [r1, #8]
}
   1f44e:	bd10      	pop	{r4, pc}
   1f450:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f452:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1f454:	429c      	cmp	r4, r3
	list->tail = node;
   1f456:	bf08      	it	eq
   1f458:	6502      	streq	r2, [r0, #80]	; 0x50
}
   1f45a:	e7f6      	b.n	1f44a <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f45c:	2c00      	cmp	r4, #0
   1f45e:	d0f6      	beq.n	1f44e <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f460:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f462:	2b00      	cmp	r3, #0
   1f464:	d0f3      	beq.n	1f44e <bt_l2cap_chan_remove+0x26>
   1f466:	3b08      	subs	r3, #8
   1f468:	4622      	mov	r2, r4
   1f46a:	e7e2      	b.n	1f432 <bt_l2cap_chan_remove+0xa>

0001f46c <bt_l2cap_chan_del>:
{
   1f46c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1f46e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1f472:	4604      	mov	r4, r0
	if (!chan->conn) {
   1f474:	b123      	cbz	r3, 1f480 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1f476:	686b      	ldr	r3, [r5, #4]
   1f478:	b103      	cbz	r3, 1f47c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1f47a:	4798      	blx	r3
	chan->conn = NULL;
   1f47c:	2300      	movs	r3, #0
   1f47e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1f480:	68e3      	ldr	r3, [r4, #12]
   1f482:	b10b      	cbz	r3, 1f488 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1f484:	4620      	mov	r0, r4
   1f486:	4798      	blx	r3
	if (ops->released) {
   1f488:	69eb      	ldr	r3, [r5, #28]
   1f48a:	b11b      	cbz	r3, 1f494 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1f48c:	4620      	mov	r0, r4
}
   1f48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1f492:	4718      	bx	r3
}
   1f494:	bd70      	pop	{r4, r5, r6, pc}

0001f496 <l2cap_rtx_timeout>:
{
   1f496:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1f498:	f1a0 0110 	sub.w	r1, r0, #16
   1f49c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1f4a0:	f7ff ffc2 	bl	1f428 <bt_l2cap_chan_remove>
}
   1f4a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   1f4a8:	4608      	mov	r0, r1
   1f4aa:	f7ff bfdf 	b.w	1f46c <bt_l2cap_chan_del>

0001f4ae <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f4ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1f4b0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f4b2:	b18b      	cbz	r3, 1f4d8 <bt_l2cap_disconnected+0x2a>
   1f4b4:	f1b3 0008 	subs.w	r0, r3, #8
   1f4b8:	d00e      	beq.n	1f4d8 <bt_l2cap_disconnected+0x2a>
   1f4ba:	681c      	ldr	r4, [r3, #0]
   1f4bc:	b104      	cbz	r4, 1f4c0 <bt_l2cap_disconnected+0x12>
   1f4be:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1f4c0:	f7ff ffd4 	bl	1f46c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f4c4:	b144      	cbz	r4, 1f4d8 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f4c6:	f114 0308 	adds.w	r3, r4, #8
   1f4ca:	d002      	beq.n	1f4d2 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f4cc:	68a3      	ldr	r3, [r4, #8]
   1f4ce:	b103      	cbz	r3, 1f4d2 <bt_l2cap_disconnected+0x24>
   1f4d0:	3b08      	subs	r3, #8
{
   1f4d2:	4620      	mov	r0, r4
   1f4d4:	461c      	mov	r4, r3
   1f4d6:	e7f3      	b.n	1f4c0 <bt_l2cap_disconnected+0x12>
}
   1f4d8:	bd10      	pop	{r4, pc}

0001f4da <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1f4da:	3104      	adds	r1, #4
   1f4dc:	f7e7 bc7a 	b.w	6dd4 <bt_conn_create_pdu_timeout>

0001f4e0 <bt_l2cap_send_cb>:
{
   1f4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f4e4:	4614      	mov	r4, r2
   1f4e6:	4605      	mov	r5, r0
   1f4e8:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   1f4ea:	f102 0008 	add.w	r0, r2, #8
   1f4ee:	2104      	movs	r1, #4
{
   1f4f0:	461e      	mov	r6, r3
   1f4f2:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   1f4f6:	f001 fcd7 	bl	20ea8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1f4fa:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1f4fc:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1f4fe:	3a04      	subs	r2, #4
   1f500:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1f502:	4643      	mov	r3, r8
   1f504:	4632      	mov	r2, r6
   1f506:	4621      	mov	r1, r4
   1f508:	4628      	mov	r0, r5
}
   1f50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1f50e:	f7e7 ba27 	b.w	6960 <bt_conn_send_cb>

0001f512 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1f512:	898b      	ldrh	r3, [r1, #12]
   1f514:	2b03      	cmp	r3, #3
{
   1f516:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f518:	4605      	mov	r5, r0
   1f51a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1f51c:	d923      	bls.n	1f566 <l2cap_recv+0x54>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1f51e:	2104      	movs	r1, #4
   1f520:	f104 0008 	add.w	r0, r4, #8
   1f524:	f001 fcd0 	bl	20ec8 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1f528:	89a3      	ldrh	r3, [r4, #12]
   1f52a:	8842      	ldrh	r2, [r0, #2]
   1f52c:	429a      	cmp	r2, r3
   1f52e:	d11a      	bne.n	1f566 <l2cap_recv+0x54>
	if (!hdr->ident) {
   1f530:	7841      	ldrb	r1, [r0, #1]
   1f532:	b1c1      	cbz	r1, 1f566 <l2cap_recv+0x54>
	switch (hdr->code) {
   1f534:	7803      	ldrb	r3, [r0, #0]
   1f536:	2b01      	cmp	r3, #1
   1f538:	d015      	beq.n	1f566 <l2cap_recv+0x54>
   1f53a:	2b13      	cmp	r3, #19
   1f53c:	d013      	beq.n	1f566 <l2cap_recv+0x54>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1f53e:	2202      	movs	r2, #2
   1f540:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1f542:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1f544:	f7ff ff59 	bl	1f3fa <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1f548:	4604      	mov	r4, r0
   1f54a:	b160      	cbz	r0, 1f566 <l2cap_recv+0x54>
	rej = net_buf_add(buf, sizeof(*rej));
   1f54c:	2102      	movs	r1, #2
   1f54e:	3008      	adds	r0, #8
   1f550:	f001 fc88 	bl	20e64 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1f554:	2300      	movs	r3, #0
   1f556:	7003      	strb	r3, [r0, #0]
   1f558:	7043      	strb	r3, [r0, #1]
   1f55a:	4622      	mov	r2, r4
   1f55c:	9300      	str	r3, [sp, #0]
   1f55e:	2105      	movs	r1, #5
   1f560:	4628      	mov	r0, r5
   1f562:	f7ff ffbd 	bl	1f4e0 <bt_l2cap_send_cb>
}
   1f566:	2000      	movs	r0, #0
   1f568:	b003      	add	sp, #12
   1f56a:	bd30      	pop	{r4, r5, pc}

0001f56c <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f56c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1f56e:	b160      	cbz	r0, 1f58a <bt_l2cap_le_lookup_tx_cid+0x1e>
   1f570:	3808      	subs	r0, #8
   1f572:	b900      	cbnz	r0, 1f576 <bt_l2cap_le_lookup_tx_cid+0xa>
   1f574:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1f576:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1f57a:	428b      	cmp	r3, r1
   1f57c:	d005      	beq.n	1f58a <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f57e:	f110 0308 	adds.w	r3, r0, #8
   1f582:	d001      	beq.n	1f588 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f584:	6880      	ldr	r0, [r0, #8]
   1f586:	e7f2      	b.n	1f56e <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1f588:	4618      	mov	r0, r3
}
   1f58a:	4770      	bx	lr

0001f58c <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f58c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1f58e:	b160      	cbz	r0, 1f5aa <bt_l2cap_le_lookup_rx_cid+0x1e>
   1f590:	3808      	subs	r0, #8
   1f592:	b900      	cbnz	r0, 1f596 <bt_l2cap_le_lookup_rx_cid+0xa>
   1f594:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1f596:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1f59a:	428b      	cmp	r3, r1
   1f59c:	d005      	beq.n	1f5aa <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f59e:	f110 0308 	adds.w	r3, r0, #8
   1f5a2:	d001      	beq.n	1f5a8 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f5a4:	6880      	ldr	r0, [r0, #8]
   1f5a6:	e7f2      	b.n	1f58e <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1f5a8:	4618      	mov	r0, r3
}
   1f5aa:	4770      	bx	lr

0001f5ac <bt_l2cap_recv>:
{
   1f5ac:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1f5ae:	898b      	ldrh	r3, [r1, #12]
   1f5b0:	2b03      	cmp	r3, #3
{
   1f5b2:	4605      	mov	r5, r0
   1f5b4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1f5b6:	d804      	bhi.n	1f5c2 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1f5b8:	4620      	mov	r0, r4
}
   1f5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1f5be:	f7f5 b8d3 	b.w	14768 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1f5c2:	2104      	movs	r1, #4
   1f5c4:	f104 0008 	add.w	r0, r4, #8
   1f5c8:	f001 fc7e 	bl	20ec8 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1f5cc:	8841      	ldrh	r1, [r0, #2]
   1f5ce:	4628      	mov	r0, r5
   1f5d0:	f7ff ffdc 	bl	1f58c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1f5d4:	2800      	cmp	r0, #0
   1f5d6:	d0ef      	beq.n	1f5b8 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1f5d8:	6843      	ldr	r3, [r0, #4]
   1f5da:	4621      	mov	r1, r4
   1f5dc:	691b      	ldr	r3, [r3, #16]
   1f5de:	4798      	blx	r3
   1f5e0:	e7ea      	b.n	1f5b8 <bt_l2cap_recv+0xc>

0001f5e2 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1f5e2:	4770      	bx	lr

0001f5e4 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1f5e4:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1f5e6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1f5e8:	b128      	cbz	r0, 1f5f6 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f5ea:	6859      	ldr	r1, [r3, #4]
   1f5ec:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1f5ee:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f5f0:	4288      	cmp	r0, r1
	list->tail = node;
   1f5f2:	bf08      	it	eq
   1f5f4:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1f5f6:	4770      	bx	lr

0001f5f8 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f5f8:	4603      	mov	r3, r0
   1f5fa:	6800      	ldr	r0, [r0, #0]
   1f5fc:	2200      	movs	r2, #0
   1f5fe:	b900      	cbnz	r0, 1f602 <sys_slist_find_and_remove+0xa>
   1f600:	4770      	bx	lr
   1f602:	4288      	cmp	r0, r1
   1f604:	d110      	bne.n	1f628 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1f606:	6808      	ldr	r0, [r1, #0]
   1f608:	b942      	cbnz	r2, 1f61c <sys_slist_find_and_remove+0x24>
   1f60a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1f60c:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f60e:	4291      	cmp	r1, r2
   1f610:	d100      	bne.n	1f614 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1f612:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1f614:	2300      	movs	r3, #0
   1f616:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f618:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1f61a:	4770      	bx	lr
	parent->next = child;
   1f61c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f61e:	6858      	ldr	r0, [r3, #4]
   1f620:	4281      	cmp	r1, r0
	list->tail = node;
   1f622:	bf08      	it	eq
   1f624:	605a      	streq	r2, [r3, #4]
}
   1f626:	e7f5      	b.n	1f614 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f628:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f62a:	6800      	ldr	r0, [r0, #0]
   1f62c:	e7e7      	b.n	1f5fe <sys_slist_find_and_remove+0x6>

0001f62e <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1f62e:	4603      	mov	r3, r0
	size_t bytes = 0;
   1f630:	2000      	movs	r0, #0

	while (buf) {
   1f632:	b903      	cbnz	r3, 1f636 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1f634:	4770      	bx	lr
		bytes += buf->len;
   1f636:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1f638:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1f63a:	4410      	add	r0, r2
		buf = buf->frags;
   1f63c:	e7f9      	b.n	1f632 <net_buf_frags_len+0x4>

0001f63e <att_sent>:
	if (chan->ops->sent) {
   1f63e:	684b      	ldr	r3, [r1, #4]
   1f640:	695b      	ldr	r3, [r3, #20]
{
   1f642:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1f644:	b103      	cbz	r3, 1f648 <att_sent+0xa>
		chan->ops->sent(chan);
   1f646:	4718      	bx	r3
}
   1f648:	4770      	bx	lr

0001f64a <attr_read_type_cb>:
{
   1f64a:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1f64c:	68d4      	ldr	r4, [r2, #12]
   1f64e:	7823      	ldrb	r3, [r4, #0]
   1f650:	3102      	adds	r1, #2
   1f652:	b913      	cbnz	r3, 1f65a <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1f654:	7021      	strb	r1, [r4, #0]
	return true;
   1f656:	2001      	movs	r0, #1
   1f658:	e006      	b.n	1f668 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1f65a:	428b      	cmp	r3, r1
   1f65c:	d0fb      	beq.n	1f656 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1f65e:	8983      	ldrh	r3, [r0, #12]
   1f660:	3b02      	subs	r3, #2
   1f662:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1f664:	2000      	movs	r0, #0
   1f666:	6110      	str	r0, [r2, #16]
}
   1f668:	bd10      	pop	{r4, pc}

0001f66a <att_op_get_type>:
	switch (op) {
   1f66a:	281e      	cmp	r0, #30
   1f66c:	d816      	bhi.n	1f69c <att_op_get_type+0x32>
   1f66e:	b308      	cbz	r0, 1f6b4 <att_op_get_type+0x4a>
   1f670:	1e43      	subs	r3, r0, #1
   1f672:	2b1d      	cmp	r3, #29
   1f674:	d81e      	bhi.n	1f6b4 <att_op_get_type+0x4a>
   1f676:	e8df f003 	tbb	[pc, r3]
   1f67a:	2317      	.short	0x2317
   1f67c:	23172317 	.word	0x23172317
   1f680:	23172317 	.word	0x23172317
   1f684:	23172317 	.word	0x23172317
   1f688:	23172317 	.word	0x23172317
   1f68c:	231d1d17 	.word	0x231d1d17
   1f690:	1d172317 	.word	0x1d172317
   1f694:	0f1b1d19 	.word	0x0f1b1d19
   1f698:	2004      	movs	r0, #4
   1f69a:	4770      	bx	lr
   1f69c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1f6a0:	2b52      	cmp	r3, #82	; 0x52
   1f6a2:	d107      	bne.n	1f6b4 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1f6a4:	2000      	movs	r0, #0
}
   1f6a6:	4770      	bx	lr
		return ATT_RESPONSE;
   1f6a8:	2002      	movs	r0, #2
   1f6aa:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1f6ac:	2003      	movs	r0, #3
   1f6ae:	4770      	bx	lr
		return ATT_INDICATION;
   1f6b0:	2005      	movs	r0, #5
   1f6b2:	4770      	bx	lr
		return ATT_COMMAND;
   1f6b4:	f010 0f40 	tst.w	r0, #64	; 0x40
   1f6b8:	bf0c      	ite	eq
   1f6ba:	2006      	moveq	r0, #6
   1f6bc:	2000      	movne	r0, #0
   1f6be:	4770      	bx	lr
		return ATT_REQUEST;
   1f6c0:	2001      	movs	r0, #1
   1f6c2:	4770      	bx	lr

0001f6c4 <att_notify_mult>:
{
   1f6c4:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1f6c6:	6803      	ldr	r3, [r0, #0]
   1f6c8:	898a      	ldrh	r2, [r1, #12]
   1f6ca:	6818      	ldr	r0, [r3, #0]
   1f6cc:	6889      	ldr	r1, [r1, #8]
   1f6ce:	f001 faf8 	bl	20cc2 <bt_gatt_mult_notification>
}
   1f6d2:	2000      	movs	r0, #0
   1f6d4:	bd08      	pop	{r3, pc}

0001f6d6 <att_notify>:
{
   1f6d6:	b538      	push	{r3, r4, r5, lr}
   1f6d8:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   1f6da:	f101 0008 	add.w	r0, r1, #8
{
   1f6de:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   1f6e0:	f001 fbfa 	bl	20ed8 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1f6e4:	682d      	ldr	r5, [r5, #0]
   1f6e6:	89a3      	ldrh	r3, [r4, #12]
   1f6e8:	68a2      	ldr	r2, [r4, #8]
	handle = net_buf_pull_le16(buf);
   1f6ea:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1f6ec:	6828      	ldr	r0, [r5, #0]
   1f6ee:	f001 fabd 	bl	20c6c <bt_gatt_notification>
}
   1f6f2:	2000      	movs	r0, #0
   1f6f4:	bd38      	pop	{r3, r4, r5, pc}

0001f6f6 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1f6f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f6f8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f6fc:	2300      	movs	r3, #0
   1f6fe:	9300      	str	r3, [sp, #0]
   1f700:	461a      	mov	r2, r3
   1f702:	f7e8 fee7 	bl	84d4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1f706:	b005      	add	sp, #20
   1f708:	f85d fb04 	ldr.w	pc, [sp], #4

0001f70c <att_chan_read>:
{
   1f70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f710:	4680      	mov	r8, r0
   1f712:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f714:	4610      	mov	r0, r2
{
   1f716:	4699      	mov	r9, r3
   1f718:	468b      	mov	fp, r1
   1f71a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f71c:	f7ff ff87 	bl	1f62e <net_buf_frags_len>
   1f720:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   1f724:	4283      	cmp	r3, r0
   1f726:	d97a      	bls.n	1f81e <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1f728:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1f72c:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1f72e:	4630      	mov	r0, r6
   1f730:	f001 fb76 	bl	20e20 <net_buf_frag_last>
	size_t len, total = 0;
   1f734:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1f738:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f73a:	4630      	mov	r0, r6
   1f73c:	f7ff ff77 	bl	1f62e <net_buf_frags_len>
   1f740:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1f744:	f105 0708 	add.w	r7, r5, #8
   1f748:	1a24      	subs	r4, r4, r0
   1f74a:	4638      	mov	r0, r7
   1f74c:	f001 fbd0 	bl	20ef0 <net_buf_simple_tailroom>
   1f750:	4284      	cmp	r4, r0
   1f752:	d211      	bcs.n	1f778 <att_chan_read+0x6c>
   1f754:	4630      	mov	r0, r6
   1f756:	f7ff ff6a 	bl	1f62e <net_buf_frags_len>
   1f75a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1f75e:	1a24      	subs	r4, r4, r0
		if (!len) {
   1f760:	bb34      	cbnz	r4, 1f7b0 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1f762:	79b0      	ldrb	r0, [r6, #6]
   1f764:	f7f4 ff44 	bl	145f0 <net_buf_pool_get>
   1f768:	2200      	movs	r2, #0
   1f76a:	2300      	movs	r3, #0
   1f76c:	f001 fb1e 	bl	20dac <net_buf_alloc_fixed>
			if (!frag) {
   1f770:	4605      	mov	r5, r0
   1f772:	b930      	cbnz	r0, 1f782 <att_chan_read+0x76>
	return total;
   1f774:	4657      	mov	r7, sl
   1f776:	e02c      	b.n	1f7d2 <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f778:	4638      	mov	r0, r7
   1f77a:	f001 fbb9 	bl	20ef0 <net_buf_simple_tailroom>
   1f77e:	4604      	mov	r4, r0
   1f780:	e7ee      	b.n	1f760 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1f782:	4601      	mov	r1, r0
   1f784:	4630      	mov	r0, r6
   1f786:	f001 fb5c 	bl	20e42 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f78a:	4630      	mov	r0, r6
   1f78c:	f7ff ff4f 	bl	1f62e <net_buf_frags_len>
   1f790:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1f794:	f105 0708 	add.w	r7, r5, #8
   1f798:	1a24      	subs	r4, r4, r0
   1f79a:	4638      	mov	r0, r7
   1f79c:	f001 fba8 	bl	20ef0 <net_buf_simple_tailroom>
   1f7a0:	4284      	cmp	r4, r0
   1f7a2:	d21a      	bcs.n	1f7da <att_chan_read+0xce>
   1f7a4:	4630      	mov	r0, r6
   1f7a6:	f7ff ff42 	bl	1f62e <net_buf_frags_len>
   1f7aa:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1f7ae:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1f7b0:	68a9      	ldr	r1, [r5, #8]
   1f7b2:	89aa      	ldrh	r2, [r5, #12]
   1f7b4:	f8db 7004 	ldr.w	r7, [fp, #4]
   1f7b8:	9803      	ldr	r0, [sp, #12]
   1f7ba:	f8cd 9000 	str.w	r9, [sp]
   1f7be:	440a      	add	r2, r1
   1f7c0:	b2a3      	uxth	r3, r4
   1f7c2:	4659      	mov	r1, fp
   1f7c4:	47b8      	blx	r7
		if (read < 0) {
   1f7c6:	1e07      	subs	r7, r0, #0
   1f7c8:	da0c      	bge.n	1f7e4 <att_chan_read+0xd8>
				return total;
   1f7ca:	f1ba 0f00 	cmp.w	sl, #0
   1f7ce:	bf18      	it	ne
   1f7d0:	4657      	movne	r7, sl
}
   1f7d2:	4638      	mov	r0, r7
   1f7d4:	b005      	add	sp, #20
   1f7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f7da:	4638      	mov	r0, r7
   1f7dc:	f001 fb88 	bl	20ef0 <net_buf_simple_tailroom>
   1f7e0:	4604      	mov	r4, r0
   1f7e2:	e7e5      	b.n	1f7b0 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1f7e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f7e6:	b993      	cbnz	r3, 1f80e <att_chan_read+0x102>
		net_buf_add(frag, read);
   1f7e8:	4639      	mov	r1, r7
   1f7ea:	f105 0008 	add.w	r0, r5, #8
   1f7ee:	f001 fb39 	bl	20e64 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f7f2:	4630      	mov	r0, r6
   1f7f4:	f7ff ff1b 	bl	1f62e <net_buf_frags_len>
   1f7f8:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1f7fc:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f7fe:	4283      	cmp	r3, r0
		total += read;
   1f800:	44ba      	add	sl, r7
		offset += read;
   1f802:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f806:	d9b5      	bls.n	1f774 <att_chan_read+0x68>
   1f808:	42a7      	cmp	r7, r4
   1f80a:	d096      	beq.n	1f73a <att_chan_read+0x2e>
   1f80c:	e7b2      	b.n	1f774 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1f80e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f812:	4639      	mov	r1, r7
   1f814:	4628      	mov	r0, r5
   1f816:	4798      	blx	r3
   1f818:	2800      	cmp	r0, #0
   1f81a:	d1e5      	bne.n	1f7e8 <att_chan_read+0xdc>
   1f81c:	e7aa      	b.n	1f774 <att_chan_read+0x68>
		return 0;
   1f81e:	2700      	movs	r7, #0
   1f820:	e7d7      	b.n	1f7d2 <att_chan_read+0xc6>

0001f822 <find_type_cb>:
{
   1f822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1f826:	f8d2 9000 	ldr.w	r9, [r2]
{
   1f82a:	b091      	sub	sp, #68	; 0x44
   1f82c:	4607      	mov	r7, r0
   1f82e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1f830:	2400      	movs	r4, #0
   1f832:	f642 0301 	movw	r3, #10241	; 0x2801
   1f836:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1f838:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1f83c:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1f840:	a90b      	add	r1, sp, #44	; 0x2c
{
   1f842:	4615      	mov	r5, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1f844:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1f848:	f7ff f937 	bl	1eaba <bt_uuid_cmp>
   1f84c:	2800      	cmp	r0, #0
   1f84e:	d079      	beq.n	1f944 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1f850:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1f854:	6838      	ldr	r0, [r7, #0]
   1f856:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1f85a:	a90b      	add	r1, sp, #44	; 0x2c
   1f85c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1f860:	f7ff f92b 	bl	1eaba <bt_uuid_cmp>
   1f864:	4604      	mov	r4, r0
   1f866:	b148      	cbz	r0, 1f87c <find_type_cb+0x5a>
		if (data->group &&
   1f868:	68ab      	ldr	r3, [r5, #8]
   1f86a:	b11b      	cbz	r3, 1f874 <find_type_cb+0x52>
   1f86c:	885a      	ldrh	r2, [r3, #2]
   1f86e:	42b2      	cmp	r2, r6
   1f870:	d200      	bcs.n	1f874 <find_type_cb+0x52>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1f872:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1f874:	2001      	movs	r0, #1
}
   1f876:	b011      	add	sp, #68	; 0x44
   1f878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1f87c:	6869      	ldr	r1, [r5, #4]
   1f87e:	4608      	mov	r0, r1
   1f880:	f7ff fed5 	bl	1f62e <net_buf_frags_len>
   1f884:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1f888:	1a1b      	subs	r3, r3, r0
   1f88a:	2b03      	cmp	r3, #3
   1f88c:	d922      	bls.n	1f8d4 <find_type_cb+0xb2>
	frag = net_buf_frag_last(data->buf);
   1f88e:	4608      	mov	r0, r1
   1f890:	f001 fac6 	bl	20e20 <net_buf_frag_last>
   1f894:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1f896:	6868      	ldr	r0, [r5, #4]
   1f898:	f7ff fec9 	bl	1f62e <net_buf_frags_len>
   1f89c:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
   1f8a0:	f104 0b08 	add.w	fp, r4, #8
   1f8a4:	ebaa 0a00 	sub.w	sl, sl, r0
   1f8a8:	4658      	mov	r0, fp
   1f8aa:	f001 fb21 	bl	20ef0 <net_buf_simple_tailroom>
   1f8ae:	4582      	cmp	sl, r0
   1f8b0:	d212      	bcs.n	1f8d8 <find_type_cb+0xb6>
   1f8b2:	6868      	ldr	r0, [r5, #4]
   1f8b4:	f7ff febb 	bl	1f62e <net_buf_frags_len>
   1f8b8:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1f8bc:	1a18      	subs	r0, r3, r0
	if (!len) {
   1f8be:	b998      	cbnz	r0, 1f8e8 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1f8c0:	686b      	ldr	r3, [r5, #4]
   1f8c2:	7998      	ldrb	r0, [r3, #6]
   1f8c4:	f7f4 fe94 	bl	145f0 <net_buf_pool_get>
   1f8c8:	2200      	movs	r2, #0
   1f8ca:	2300      	movs	r3, #0
   1f8cc:	f001 fa6e 	bl	20dac <net_buf_alloc_fixed>
		if (!frag) {
   1f8d0:	4604      	mov	r4, r0
   1f8d2:	b928      	cbnz	r0, 1f8e0 <find_type_cb+0xbe>
		return BT_GATT_ITER_STOP;
   1f8d4:	4620      	mov	r0, r4
   1f8d6:	e7ce      	b.n	1f876 <find_type_cb+0x54>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1f8d8:	4658      	mov	r0, fp
   1f8da:	f001 fb09 	bl	20ef0 <net_buf_simple_tailroom>
   1f8de:	e7ee      	b.n	1f8be <find_type_cb+0x9c>
		net_buf_frag_add(data->buf, frag);
   1f8e0:	4601      	mov	r1, r0
   1f8e2:	6868      	ldr	r0, [r5, #4]
   1f8e4:	f001 faad 	bl	20e42 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1f8e8:	2300      	movs	r3, #0
   1f8ea:	9300      	str	r3, [sp, #0]
   1f8ec:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1f8f0:	4639      	mov	r1, r7
   1f8f2:	2310      	movs	r3, #16
   1f8f4:	aa02      	add	r2, sp, #8
   1f8f6:	4640      	mov	r0, r8
   1f8f8:	47c8      	blx	r9
	if (read < 0) {
   1f8fa:	1e07      	subs	r7, r0, #0
   1f8fc:	db22      	blt.n	1f944 <find_type_cb+0x122>
	if (read != data->value_len) {
   1f8fe:	7c2a      	ldrb	r2, [r5, #16]
   1f900:	68e8      	ldr	r0, [r5, #12]
   1f902:	42ba      	cmp	r2, r7
   1f904:	d01a      	beq.n	1f93c <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1f906:	4601      	mov	r1, r0
   1f908:	a80b      	add	r0, sp, #44	; 0x2c
   1f90a:	f7ff f900 	bl	1eb0e <bt_uuid_create>
   1f90e:	b1c8      	cbz	r0, 1f944 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1f910:	b2fa      	uxtb	r2, r7
   1f912:	a902      	add	r1, sp, #8
   1f914:	a806      	add	r0, sp, #24
   1f916:	f7ff f8fa 	bl	1eb0e <bt_uuid_create>
   1f91a:	b198      	cbz	r0, 1f944 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1f91c:	a906      	add	r1, sp, #24
   1f91e:	a80b      	add	r0, sp, #44	; 0x2c
   1f920:	f7ff f8cb 	bl	1eaba <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1f924:	b970      	cbnz	r0, 1f944 <find_type_cb+0x122>
	data->err = 0x00;
   1f926:	2300      	movs	r3, #0
   1f928:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
   1f92a:	2104      	movs	r1, #4
   1f92c:	f104 0008 	add.w	r0, r4, #8
   1f930:	f001 fa98 	bl	20e64 <net_buf_simple_add>
   1f934:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1f936:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1f938:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1f93a:	e79b      	b.n	1f874 <find_type_cb+0x52>
	} else if (memcmp(data->value, uuid, read)) {
   1f93c:	a902      	add	r1, sp, #8
   1f93e:	f007 f876 	bl	26a2e <memcmp>
   1f942:	e7ef      	b.n	1f924 <find_type_cb+0x102>
	data->group = NULL;
   1f944:	2300      	movs	r3, #0
   1f946:	60ab      	str	r3, [r5, #8]
   1f948:	e794      	b.n	1f874 <find_type_cb+0x52>

0001f94a <attr_read_group_cb>:
	if (!data->rsp->len) {
   1f94a:	68d0      	ldr	r0, [r2, #12]
   1f94c:	7803      	ldrb	r3, [r0, #0]
   1f94e:	3104      	adds	r1, #4
   1f950:	b913      	cbnz	r3, 1f958 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1f952:	7001      	strb	r1, [r0, #0]
	return true;
   1f954:	2001      	movs	r0, #1
}
   1f956:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1f958:	428b      	cmp	r3, r1
   1f95a:	d0fb      	beq.n	1f954 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1f95c:	6891      	ldr	r1, [r2, #8]
   1f95e:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1f960:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1f962:	3b04      	subs	r3, #4
   1f964:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1f966:	6110      	str	r0, [r2, #16]
		return false;
   1f968:	4770      	bx	lr

0001f96a <bt_att_chan_send>:
{
   1f96a:	b570      	push	{r4, r5, r6, lr}
   1f96c:	4604      	mov	r4, r0
   1f96e:	460e      	mov	r6, r1
	if (!cb) {
   1f970:	4615      	mov	r5, r2
   1f972:	b132      	cbz	r2, 1f982 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1f974:	462a      	mov	r2, r5
   1f976:	4631      	mov	r1, r6
   1f978:	4620      	mov	r0, r4
}
   1f97a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1f97e:	f7e7 bc71 	b.w	7264 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1f982:	2200      	movs	r2, #0
   1f984:	2300      	movs	r3, #0
   1f986:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1f98a:	f7fb fb21 	bl	1afd0 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1f98e:	2800      	cmp	r0, #0
   1f990:	daf0      	bge.n	1f974 <bt_att_chan_send+0xa>
}
   1f992:	f06f 000a 	mvn.w	r0, #10
   1f996:	bd70      	pop	{r4, r5, r6, pc}

0001f998 <bt_att_chan_send_rsp>:
{
   1f998:	b538      	push	{r3, r4, r5, lr}
   1f99a:	4604      	mov	r4, r0
   1f99c:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1f99e:	f7ff ffe4 	bl	1f96a <bt_att_chan_send>
	if (err) {
   1f9a2:	b130      	cbz	r0, 1f9b2 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1f9a4:	4629      	mov	r1, r5
   1f9a6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   1f9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1f9ae:	f001 ba26 	b.w	20dfe <net_buf_put>
}
   1f9b2:	bd38      	pop	{r3, r4, r5, pc}

0001f9b4 <process_queue>:
{
   1f9b4:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1f9b6:	2200      	movs	r2, #0
{
   1f9b8:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1f9ba:	2300      	movs	r3, #0
   1f9bc:	4608      	mov	r0, r1
{
   1f9be:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1f9c0:	f001 f9f9 	bl	20db6 <net_buf_get>
	if (buf) {
   1f9c4:	4605      	mov	r5, r0
   1f9c6:	b160      	cbz	r0, 1f9e2 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1f9c8:	4601      	mov	r1, r0
   1f9ca:	2200      	movs	r2, #0
   1f9cc:	4620      	mov	r0, r4
   1f9ce:	f7e7 fc49 	bl	7264 <chan_send>
		if (err) {
   1f9d2:	4604      	mov	r4, r0
   1f9d4:	b118      	cbz	r0, 1f9de <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1f9d6:	4629      	mov	r1, r5
   1f9d8:	4630      	mov	r0, r6
   1f9da:	f006 fc39 	bl	26250 <k_queue_prepend>
}
   1f9de:	4620      	mov	r0, r4
   1f9e0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1f9e2:	f06f 0401 	mvn.w	r4, #1
   1f9e6:	e7fa      	b.n	1f9de <process_queue+0x2a>

0001f9e8 <find_info_cb>:
{
   1f9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1f9ea:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1f9ec:	6816      	ldr	r6, [r2, #0]
{
   1f9ee:	4605      	mov	r5, r0
   1f9f0:	460f      	mov	r7, r1
   1f9f2:	4614      	mov	r4, r2
	if (!data->rsp) {
   1f9f4:	b963      	cbnz	r3, 1fa10 <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1f9f6:	6850      	ldr	r0, [r2, #4]
   1f9f8:	2101      	movs	r1, #1
   1f9fa:	3008      	adds	r0, #8
   1f9fc:	f001 fa32 	bl	20e64 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1fa00:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1fa02:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1fa04:	781b      	ldrb	r3, [r3, #0]
   1fa06:	2b00      	cmp	r3, #0
   1fa08:	bf0c      	ite	eq
   1fa0a:	2301      	moveq	r3, #1
   1fa0c:	2302      	movne	r3, #2
   1fa0e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1fa10:	68a3      	ldr	r3, [r4, #8]
   1fa12:	781b      	ldrb	r3, [r3, #0]
   1fa14:	2b01      	cmp	r3, #1
   1fa16:	d003      	beq.n	1fa20 <find_info_cb+0x38>
   1fa18:	2b02      	cmp	r3, #2
   1fa1a:	d019      	beq.n	1fa50 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1fa1c:	2000      	movs	r0, #0
   1fa1e:	e016      	b.n	1fa4e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1fa20:	682b      	ldr	r3, [r5, #0]
   1fa22:	781b      	ldrb	r3, [r3, #0]
   1fa24:	2b00      	cmp	r3, #0
   1fa26:	d1f9      	bne.n	1fa1c <find_info_cb+0x34>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1fa28:	6860      	ldr	r0, [r4, #4]
   1fa2a:	2104      	movs	r1, #4
   1fa2c:	3008      	adds	r0, #8
   1fa2e:	f001 fa19 	bl	20e64 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1fa32:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1fa34:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1fa36:	885b      	ldrh	r3, [r3, #2]
   1fa38:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1fa3a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1fa3c:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1fa3e:	899b      	ldrh	r3, [r3, #12]
   1fa40:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   1fa44:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1fa46:	2804      	cmp	r0, #4
   1fa48:	bf94      	ite	ls
   1fa4a:	2000      	movls	r0, #0
   1fa4c:	2001      	movhi	r0, #1
}
   1fa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1fa50:	682b      	ldr	r3, [r5, #0]
   1fa52:	781b      	ldrb	r3, [r3, #0]
   1fa54:	2b02      	cmp	r3, #2
   1fa56:	d1e1      	bne.n	1fa1c <find_info_cb+0x34>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1fa58:	6860      	ldr	r0, [r4, #4]
   1fa5a:	2112      	movs	r1, #18
   1fa5c:	3008      	adds	r0, #8
   1fa5e:	f001 fa01 	bl	20e64 <net_buf_simple_add>
   1fa62:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fa64:	682a      	ldr	r2, [r5, #0]
   1fa66:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1fa68:	f823 7b02 	strh.w	r7, [r3], #2
   1fa6c:	1c51      	adds	r1, r2, #1
   1fa6e:	3211      	adds	r2, #17
   1fa70:	f851 0b04 	ldr.w	r0, [r1], #4
   1fa74:	f843 0b04 	str.w	r0, [r3], #4
   1fa78:	4291      	cmp	r1, r2
   1fa7a:	d1f9      	bne.n	1fa70 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   1fa7c:	6863      	ldr	r3, [r4, #4]
   1fa7e:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   1fa82:	899b      	ldrh	r3, [r3, #12]
   1fa84:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1fa86:	2812      	cmp	r0, #18
   1fa88:	e7de      	b.n	1fa48 <find_info_cb+0x60>

0001fa8a <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fa8a:	30c0      	adds	r0, #192	; 0xc0
   1fa8c:	f3bf 8f5b 	dmb	ish
   1fa90:	e850 3f00 	ldrex	r3, [r0]
   1fa94:	f023 0301 	bic.w	r3, r3, #1
   1fa98:	e840 3200 	strex	r2, r3, [r0]
   1fa9c:	2a00      	cmp	r2, #0
   1fa9e:	d1f7      	bne.n	1fa90 <chan_rsp_sent+0x6>
   1faa0:	f3bf 8f5b 	dmb	ish
}
   1faa4:	4770      	bx	lr

0001faa6 <chan_cfm_sent>:
   1faa6:	30c0      	adds	r0, #192	; 0xc0
   1faa8:	f3bf 8f5b 	dmb	ish
   1faac:	e850 3f00 	ldrex	r3, [r0]
   1fab0:	f023 0302 	bic.w	r3, r3, #2
   1fab4:	e840 3200 	strex	r2, r3, [r0]
   1fab8:	2a00      	cmp	r2, #0
   1faba:	d1f7      	bne.n	1faac <chan_cfm_sent+0x6>
   1fabc:	f3bf 8f5b 	dmb	ish
}
   1fac0:	4770      	bx	lr

0001fac2 <att_get>:
{
   1fac2:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1fac4:	7a83      	ldrb	r3, [r0, #10]
   1fac6:	2b07      	cmp	r3, #7
   1fac8:	d001      	beq.n	1face <att_get+0xc>
		return NULL;
   1faca:	2000      	movs	r0, #0
}
   1facc:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1face:	2104      	movs	r1, #4
   1fad0:	f7ff fd5c 	bl	1f58c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1fad4:	2800      	cmp	r0, #0
   1fad6:	d0f8      	beq.n	1faca <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fad8:	f3bf 8f5b 	dmb	ish
   1fadc:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1fae0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1fae4:	075b      	lsls	r3, r3, #29
   1fae6:	d4f0      	bmi.n	1faca <att_get+0x8>
	return att_chan->att;
   1fae8:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1faec:	e7ee      	b.n	1facc <att_get+0xa>

0001faee <chan_req_send>:
{
   1faee:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1faf0:	690e      	ldr	r6, [r1, #16]
{
   1faf2:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1faf4:	4630      	mov	r0, r6
{
   1faf6:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1faf8:	f7ff fd99 	bl	1f62e <net_buf_frags_len>
   1fafc:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   1fb00:	4283      	cmp	r3, r0
   1fb02:	d317      	bcc.n	1fb34 <chan_req_send+0x46>
	chan->req = req;
   1fb04:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   1fb08:	f106 0008 	add.w	r0, r6, #8
   1fb0c:	f001 f9ec 	bl	20ee8 <net_buf_simple_headroom>
	state->len = buf->len;
   1fb10:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1fb12:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1fb14:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1fb16:	6920      	ldr	r0, [r4, #16]
   1fb18:	f001 f97e 	bl	20e18 <net_buf_ref>
   1fb1c:	2200      	movs	r2, #0
   1fb1e:	4601      	mov	r1, r0
   1fb20:	4628      	mov	r0, r5
   1fb22:	f7e7 fb9f 	bl	7264 <chan_send>
	if (err) {
   1fb26:	4605      	mov	r5, r0
   1fb28:	b110      	cbz	r0, 1fb30 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1fb2a:	6920      	ldr	r0, [r4, #16]
   1fb2c:	f7f4 fe1c 	bl	14768 <net_buf_unref>
}
   1fb30:	4628      	mov	r0, r5
   1fb32:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1fb34:	f06f 0579 	mvn.w	r5, #121	; 0x79
   1fb38:	e7fa      	b.n	1fb30 <chan_req_send+0x42>

0001fb3a <bt_att_chan_req_send>:
{
   1fb3a:	b570      	push	{r4, r5, r6, lr}
   1fb3c:	4604      	mov	r4, r0
   1fb3e:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1fb40:	f500 7688 	add.w	r6, r0, #272	; 0x110
   1fb44:	2200      	movs	r2, #0
   1fb46:	2300      	movs	r3, #0
   1fb48:	4630      	mov	r0, r6
   1fb4a:	f7fb fa41 	bl	1afd0 <z_impl_k_sem_take>
   1fb4e:	2800      	cmp	r0, #0
   1fb50:	db0a      	blt.n	1fb68 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   1fb52:	4620      	mov	r0, r4
   1fb54:	4629      	mov	r1, r5
   1fb56:	f7ff ffca 	bl	1faee <chan_req_send>
	if (err < 0) {
   1fb5a:	1e04      	subs	r4, r0, #0
   1fb5c:	da02      	bge.n	1fb64 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   1fb5e:	4630      	mov	r0, r6
   1fb60:	f7fb fa10 	bl	1af84 <z_impl_k_sem_give>
}
   1fb64:	4620      	mov	r0, r4
   1fb66:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1fb68:	f06f 040a 	mvn.w	r4, #10
   1fb6c:	e7fa      	b.n	1fb64 <bt_att_chan_req_send+0x2a>

0001fb6e <bt_att_status>:
{
   1fb6e:	b538      	push	{r3, r4, r5, lr}
   1fb70:	f3bf 8f5b 	dmb	ish
   1fb74:	680b      	ldr	r3, [r1, #0]
   1fb76:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1fb7a:	07db      	lsls	r3, r3, #31
{
   1fb7c:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1fb7e:	d518      	bpl.n	1fbb2 <bt_att_status+0x44>
	if (chan->req) {
   1fb80:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1fb84:	b9ab      	cbnz	r3, 1fbb2 <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   1fb86:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1fb8a:	3004      	adds	r0, #4
   1fb8c:	f7ff fd2a 	bl	1f5e4 <sys_slist_get>
	if (!node) {
   1fb90:	4604      	mov	r4, r0
   1fb92:	b170      	cbz	r0, 1fbb2 <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1fb94:	4601      	mov	r1, r0
   1fb96:	f1a5 0008 	sub.w	r0, r5, #8
   1fb9a:	f7ff ffce 	bl	1fb3a <bt_att_chan_req_send>
   1fb9e:	2800      	cmp	r0, #0
   1fba0:	da07      	bge.n	1fbb2 <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   1fba2:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1fba6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1fba8:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1fbaa:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1fbac:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fbae:	b902      	cbnz	r2, 1fbb2 <bt_att_status+0x44>
	list->tail = node;
   1fbb0:	609c      	str	r4, [r3, #8]
}
   1fbb2:	bd38      	pop	{r3, r4, r5, pc}

0001fbb4 <write_cb>:
{
   1fbb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fbb6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1fbb8:	4601      	mov	r1, r0
{
   1fbba:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1fbbc:	222a      	movs	r2, #42	; 0x2a
   1fbbe:	6820      	ldr	r0, [r4, #0]
   1fbc0:	f000 fd6f 	bl	206a2 <bt_gatt_check_perm>
   1fbc4:	4605      	mov	r5, r0
   1fbc6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1fbc8:	bb00      	cbnz	r0, 1fc0c <write_cb+0x58>
	if (!data->req) {
   1fbca:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1fbcc:	68b7      	ldr	r7, [r6, #8]
   1fbce:	68e2      	ldr	r2, [r4, #12]
   1fbd0:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1fbd2:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1fbd4:	bf14      	ite	ne
   1fbd6:	2300      	movne	r3, #0
   1fbd8:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1fbda:	9301      	str	r3, [sp, #4]
   1fbdc:	8a63      	ldrh	r3, [r4, #18]
   1fbde:	9300      	str	r3, [sp, #0]
   1fbe0:	4631      	mov	r1, r6
   1fbe2:	8a23      	ldrh	r3, [r4, #16]
   1fbe4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1fbe6:	1e03      	subs	r3, r0, #0
   1fbe8:	db05      	blt.n	1fbf6 <write_cb+0x42>
   1fbea:	8a22      	ldrh	r2, [r4, #16]
   1fbec:	4293      	cmp	r3, r2
   1fbee:	d10b      	bne.n	1fc08 <write_cb+0x54>
	data->err = 0U;
   1fbf0:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1fbf2:	2501      	movs	r5, #1
   1fbf4:	e005      	b.n	1fc02 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1fbf6:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1fbfa:	d305      	bcc.n	1fc08 <write_cb+0x54>
		return -err;
   1fbfc:	425b      	negs	r3, r3
   1fbfe:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1fc00:	7523      	strb	r3, [r4, #20]
}
   1fc02:	4628      	mov	r0, r5
   1fc04:	b003      	add	sp, #12
   1fc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1fc08:	230e      	movs	r3, #14
   1fc0a:	e7f9      	b.n	1fc00 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1fc0c:	2500      	movs	r5, #0
   1fc0e:	e7f8      	b.n	1fc02 <write_cb+0x4e>

0001fc10 <bt_att_sent>:
{
   1fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1fc12:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   1fc16:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1fc1a:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1fc1c:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1fc20:	b10b      	cbz	r3, 1fc26 <bt_att_sent+0x16>
		chan->sent(chan);
   1fc22:	4638      	mov	r0, r7
   1fc24:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fc26:	f3bf 8f5b 	dmb	ish
   1fc2a:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1fc2e:	e853 2f00 	ldrex	r2, [r3]
   1fc32:	f022 0210 	bic.w	r2, r2, #16
   1fc36:	e843 2100 	strex	r1, r2, [r3]
   1fc3a:	2900      	cmp	r1, #0
   1fc3c:	d1f7      	bne.n	1fc2e <bt_att_sent+0x1e>
   1fc3e:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1fc42:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1fc46:	b98b      	cbnz	r3, 1fc6c <bt_att_sent+0x5c>
   1fc48:	686b      	ldr	r3, [r5, #4]
   1fc4a:	b17b      	cbz	r3, 1fc6c <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1fc4c:	1d28      	adds	r0, r5, #4
   1fc4e:	f7ff fcc9 	bl	1f5e4 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1fc52:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1fc54:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1fc56:	4638      	mov	r0, r7
   1fc58:	f7ff ff49 	bl	1faee <chan_req_send>
   1fc5c:	2800      	cmp	r0, #0
   1fc5e:	da17      	bge.n	1fc90 <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   1fc60:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1fc62:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1fc64:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1fc66:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fc68:	b903      	cbnz	r3, 1fc6c <bt_att_sent+0x5c>
	list->tail = node;
   1fc6a:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1fc6c:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   1fc70:	4638      	mov	r0, r7
   1fc72:	f7ff fe9f 	bl	1f9b4 <process_queue>
	if (!err) {
   1fc76:	b158      	cbz	r0, 1fc90 <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   1fc78:	f105 010c 	add.w	r1, r5, #12
   1fc7c:	4638      	mov	r0, r7
   1fc7e:	f7ff fe99 	bl	1f9b4 <process_queue>
	if (!err) {
   1fc82:	b128      	cbz	r0, 1fc90 <bt_att_sent+0x80>
   1fc84:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   1fc88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1fc8c:	f7fb b97a 	b.w	1af84 <z_impl_k_sem_give>
   1fc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fc92 <read_cb>:
{
   1fc92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1fc96:	f8d2 8000 	ldr.w	r8, [r2]
{
   1fc9a:	4606      	mov	r6, r0
	data->err = 0x00;
   1fc9c:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1fc9e:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1fca2:	7317      	strb	r7, [r2, #12]
{
   1fca4:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1fca6:	4631      	mov	r1, r6
   1fca8:	2215      	movs	r2, #21
   1fcaa:	f000 fcfa 	bl	206a2 <bt_gatt_check_perm>
   1fcae:	4604      	mov	r4, r0
   1fcb0:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1fcb2:	b9a0      	cbnz	r0, 1fcde <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1fcb4:	e9cd 0000 	strd	r0, r0, [sp]
   1fcb8:	88ab      	ldrh	r3, [r5, #4]
   1fcba:	68aa      	ldr	r2, [r5, #8]
   1fcbc:	4631      	mov	r1, r6
   1fcbe:	4640      	mov	r0, r8
   1fcc0:	f7ff fd24 	bl	1f70c <att_chan_read>
	if (ret < 0) {
   1fcc4:	1e03      	subs	r3, r0, #0
   1fcc6:	da0c      	bge.n	1fce2 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1fcc8:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1fccc:	bf26      	itte	cs
   1fcce:	425b      	negcs	r3, r3
   1fcd0:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1fcd2:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1fcd4:	732b      	strb	r3, [r5, #12]
}
   1fcd6:	4620      	mov	r0, r4
   1fcd8:	b002      	add	sp, #8
   1fcda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1fcde:	463c      	mov	r4, r7
   1fce0:	e7f9      	b.n	1fcd6 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1fce2:	2401      	movs	r4, #1
   1fce4:	e7f7      	b.n	1fcd6 <read_cb+0x44>

0001fce6 <bt_att_chan_create_pdu>:
{
   1fce6:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1fce8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   1fcec:	3201      	adds	r2, #1
   1fcee:	429a      	cmp	r2, r3
{
   1fcf0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1fcf2:	d81b      	bhi.n	1fd2c <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1fcf4:	4608      	mov	r0, r1
   1fcf6:	f7ff fcb8 	bl	1f66a <att_op_get_type>
   1fcfa:	2802      	cmp	r0, #2
   1fcfc:	d001      	beq.n	1fd02 <bt_att_chan_create_pdu+0x1c>
   1fcfe:	2804      	cmp	r0, #4
   1fd00:	d10f      	bne.n	1fd22 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1fd02:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1fd06:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1fd08:	2100      	movs	r1, #0
   1fd0a:	4608      	mov	r0, r1
   1fd0c:	f7ff fbe5 	bl	1f4da <bt_l2cap_create_pdu_timeout>
   1fd10:	4604      	mov	r4, r0
	if (!buf) {
   1fd12:	b120      	cbz	r0, 1fd1e <bt_att_chan_create_pdu+0x38>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1fd14:	2101      	movs	r1, #1
   1fd16:	3008      	adds	r0, #8
   1fd18:	f001 f8a4 	bl	20e64 <net_buf_simple_add>
	hdr->code = op;
   1fd1c:	7005      	strb	r5, [r0, #0]
}
   1fd1e:	4620      	mov	r0, r4
   1fd20:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1fd22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fd26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fd2a:	e7ed      	b.n	1fd08 <bt_att_chan_create_pdu+0x22>
		return NULL;
   1fd2c:	2400      	movs	r4, #0
   1fd2e:	e7f6      	b.n	1fd1e <bt_att_chan_create_pdu+0x38>

0001fd30 <att_write_cmd>:
{
   1fd30:	b530      	push	{r4, r5, lr}
   1fd32:	460c      	mov	r4, r1
   1fd34:	b085      	sub	sp, #20
   1fd36:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   1fd38:	f101 0008 	add.w	r0, r1, #8
   1fd3c:	f001 f8cc 	bl	20ed8 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1fd40:	89a2      	ldrh	r2, [r4, #12]
   1fd42:	9202      	str	r2, [sp, #8]
   1fd44:	68a2      	ldr	r2, [r4, #8]
   1fd46:	9201      	str	r2, [sp, #4]
   1fd48:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   1fd4a:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1fd4c:	9200      	str	r2, [sp, #0]
   1fd4e:	4611      	mov	r1, r2
   1fd50:	4628      	mov	r0, r5
   1fd52:	f7e7 fc69 	bl	7628 <att_write_rsp>
}
   1fd56:	b005      	add	sp, #20
   1fd58:	bd30      	pop	{r4, r5, pc}

0001fd5a <att_write_req>:
{
   1fd5a:	b530      	push	{r4, r5, lr}
   1fd5c:	460c      	mov	r4, r1
   1fd5e:	b085      	sub	sp, #20
   1fd60:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   1fd62:	f101 0008 	add.w	r0, r1, #8
   1fd66:	f001 f8b7 	bl	20ed8 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1fd6a:	89a2      	ldrh	r2, [r4, #12]
   1fd6c:	9202      	str	r2, [sp, #8]
   1fd6e:	68a2      	ldr	r2, [r4, #8]
   1fd70:	9201      	str	r2, [sp, #4]
   1fd72:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   1fd74:	4603      	mov	r3, r0
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1fd76:	9200      	str	r2, [sp, #0]
   1fd78:	2112      	movs	r1, #18
   1fd7a:	2213      	movs	r2, #19
   1fd7c:	4628      	mov	r0, r5
   1fd7e:	f7e7 fc53 	bl	7628 <att_write_rsp>
}
   1fd82:	b005      	add	sp, #20
   1fd84:	bd30      	pop	{r4, r5, pc}

0001fd86 <bt_att_create_pdu>:
{
   1fd86:	b570      	push	{r4, r5, r6, lr}
   1fd88:	460e      	mov	r6, r1
   1fd8a:	4615      	mov	r5, r2
	att = att_get(conn);
   1fd8c:	f7ff fe99 	bl	1fac2 <att_get>
	if (!att) {
   1fd90:	b170      	cbz	r0, 1fdb0 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fd92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1fd94:	b163      	cbz	r3, 1fdb0 <bt_att_create_pdu+0x2a>
   1fd96:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1fd9a:	d009      	beq.n	1fdb0 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fd9c:	681b      	ldr	r3, [r3, #0]
   1fd9e:	b10b      	cbz	r3, 1fda4 <bt_att_create_pdu+0x1e>
   1fda0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1fda4:	1c6a      	adds	r2, r5, #1
   1fda6:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   1fdaa:	428a      	cmp	r2, r1
   1fdac:	d902      	bls.n	1fdb4 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fdae:	b93b      	cbnz	r3, 1fdc0 <bt_att_create_pdu+0x3a>
}
   1fdb0:	2000      	movs	r0, #0
   1fdb2:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1fdb4:	462a      	mov	r2, r5
   1fdb6:	4631      	mov	r1, r6
}
   1fdb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1fdbc:	f7ff bf93 	b.w	1fce6 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fdc0:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
   1fdc4:	d004      	beq.n	1fdd0 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fdc6:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fdca:	b10c      	cbz	r4, 1fdd0 <bt_att_create_pdu+0x4a>
   1fdcc:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
   1fdd0:	4618      	mov	r0, r3
   1fdd2:	4623      	mov	r3, r4
   1fdd4:	e7e7      	b.n	1fda6 <bt_att_create_pdu+0x20>

0001fdd6 <att_read_blob_req>:
{
   1fdd6:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1fdd8:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1fdda:	8813      	ldrh	r3, [r2, #0]
   1fddc:	8852      	ldrh	r2, [r2, #2]
   1fdde:	9200      	str	r2, [sp, #0]
   1fde0:	210c      	movs	r1, #12
   1fde2:	220d      	movs	r2, #13
   1fde4:	f7e7 fe06 	bl	79f4 <att_read_rsp>
}
   1fde8:	b003      	add	sp, #12
   1fdea:	f85d fb04 	ldr.w	pc, [sp], #4

0001fdee <att_read_req>:
{
   1fdee:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1fdf0:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1fdf2:	2200      	movs	r2, #0
   1fdf4:	881b      	ldrh	r3, [r3, #0]
   1fdf6:	9200      	str	r2, [sp, #0]
   1fdf8:	210a      	movs	r1, #10
   1fdfa:	220b      	movs	r2, #11
   1fdfc:	f7e7 fdfa 	bl	79f4 <att_read_rsp>
}
   1fe00:	b003      	add	sp, #12
   1fe02:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe06 <bt_att_init>:
	bt_gatt_init();
   1fe06:	f7e8 bacf 	b.w	83a8 <bt_gatt_init>

0001fe0a <bt_att_get_mtu>:
{
   1fe0a:	b508      	push	{r3, lr}
	att = att_get(conn);
   1fe0c:	f7ff fe59 	bl	1fac2 <att_get>
	if (!att) {
   1fe10:	b1d8      	cbz	r0, 1fe4a <bt_att_get_mtu+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fe12:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1fe14:	b1c8      	cbz	r0, 1fe4a <bt_att_get_mtu+0x40>
   1fe16:	f5b0 7196 	subs.w	r1, r0, #300	; 0x12c
   1fe1a:	d015      	beq.n	1fe48 <bt_att_get_mtu+0x3e>
   1fe1c:	6803      	ldr	r3, [r0, #0]
   1fe1e:	b10b      	cbz	r3, 1fe24 <bt_att_get_mtu+0x1a>
   1fe20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   1fe24:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   1fe26:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   1fe2a:	4290      	cmp	r0, r2
   1fe2c:	bf38      	it	cc
   1fe2e:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fe30:	b15b      	cbz	r3, 1fe4a <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fe32:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
   1fe36:	d004      	beq.n	1fe42 <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fe38:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
   1fe3c:	b10a      	cbz	r2, 1fe42 <bt_att_get_mtu+0x38>
   1fe3e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
   1fe42:	4619      	mov	r1, r3
   1fe44:	4613      	mov	r3, r2
   1fe46:	e7ee      	b.n	1fe26 <bt_att_get_mtu+0x1c>
		return 0;
   1fe48:	4608      	mov	r0, r1
}
   1fe4a:	bd08      	pop	{r3, pc}

0001fe4c <att_req_destroy>:
{
   1fe4c:	b510      	push	{r4, lr}
   1fe4e:	4604      	mov	r4, r0
	if (req->buf) {
   1fe50:	6900      	ldr	r0, [r0, #16]
   1fe52:	b108      	cbz	r0, 1fe58 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1fe54:	f7f4 fc88 	bl	14768 <net_buf_unref>
	if (req->destroy) {
   1fe58:	68a3      	ldr	r3, [r4, #8]
   1fe5a:	b10b      	cbz	r3, 1fe60 <att_req_destroy+0x14>
		req->destroy(req);
   1fe5c:	4620      	mov	r0, r4
   1fe5e:	4798      	blx	r3
	bt_att_req_free(req);
   1fe60:	4620      	mov	r0, r4
}
   1fe62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1fe66:	f7e7 bf65 	b.w	7d34 <bt_att_req_free>

0001fe6a <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1fe6a:	898a      	ldrh	r2, [r1, #12]
   1fe6c:	6889      	ldr	r1, [r1, #8]
   1fe6e:	2300      	movs	r3, #0
   1fe70:	f7e7 bf6c 	b.w	7d4c <att_handle_rsp>

0001fe74 <att_handle_find_type_rsp>:
   1fe74:	f7ff bff9 	b.w	1fe6a <att_handle_find_info_rsp>

0001fe78 <att_handle_read_type_rsp>:
   1fe78:	f7ff bff7 	b.w	1fe6a <att_handle_find_info_rsp>

0001fe7c <att_handle_read_rsp>:
   1fe7c:	f7ff bff5 	b.w	1fe6a <att_handle_find_info_rsp>

0001fe80 <att_handle_read_blob_rsp>:
   1fe80:	f7ff bff3 	b.w	1fe6a <att_handle_find_info_rsp>

0001fe84 <att_handle_read_mult_rsp>:
   1fe84:	f7ff bff1 	b.w	1fe6a <att_handle_find_info_rsp>

0001fe88 <att_handle_read_group_rsp>:
   1fe88:	f7ff bfef 	b.w	1fe6a <att_handle_find_info_rsp>

0001fe8c <att_handle_write_rsp>:
   1fe8c:	f7ff bfed 	b.w	1fe6a <att_handle_find_info_rsp>

0001fe90 <att_handle_prepare_write_rsp>:
   1fe90:	f7ff bfeb 	b.w	1fe6a <att_handle_find_info_rsp>

0001fe94 <att_handle_exec_write_rsp>:
   1fe94:	f7ff bfe9 	b.w	1fe6a <att_handle_find_info_rsp>

0001fe98 <att_confirm>:
   1fe98:	f7ff bfe7 	b.w	1fe6a <att_handle_find_info_rsp>

0001fe9c <att_mtu_rsp>:
{
   1fe9c:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1fe9e:	6889      	ldr	r1, [r1, #8]
{
   1fea0:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1fea2:	880c      	ldrh	r4, [r1, #0]
{
   1fea4:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1fea6:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1fea8:	bf89      	itett	hi
   1feaa:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1feac:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1feae:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1feb2:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1feb6:	bf88      	it	hi
   1feb8:	8992      	ldrhhi	r2, [r2, #12]
}
   1feba:	bc10      	pop	{r4}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1febc:	bf9a      	itte	ls
   1febe:	2304      	movls	r3, #4
   1fec0:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1fec2:	2300      	movhi	r3, #0
   1fec4:	f7e7 bf42 	b.w	7d4c <att_handle_rsp>

0001fec8 <att_chan_detach>:
{
   1fec8:	b538      	push	{r3, r4, r5, lr}
   1feca:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1fecc:	6800      	ldr	r0, [r0, #0]
   1fece:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   1fed2:	303c      	adds	r0, #60	; 0x3c
   1fed4:	f7ff fb90 	bl	1f5f8 <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   1fed8:	f504 7588 	add.w	r5, r4, #272	; 0x110
   1fedc:	4628      	mov	r0, r5
   1fede:	f7fb f851 	bl	1af84 <z_impl_k_sem_give>
   1fee2:	4628      	mov	r0, r5
   1fee4:	f7fb f84e 	bl	1af84 <z_impl_k_sem_give>
   1fee8:	4628      	mov	r0, r5
   1feea:	f7fb f84b 	bl	1af84 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1feee:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   1fef2:	2200      	movs	r2, #0
   1fef4:	2300      	movs	r3, #0
   1fef6:	4628      	mov	r0, r5
   1fef8:	f000 ff5d 	bl	20db6 <net_buf_get>
   1fefc:	4602      	mov	r2, r0
   1fefe:	b950      	cbnz	r0, 1ff16 <att_chan_detach+0x4e>
	if (chan->req) {
   1ff00:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1ff04:	b123      	cbz	r3, 1ff10 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1ff06:	4601      	mov	r1, r0
   1ff08:	230e      	movs	r3, #14
   1ff0a:	4620      	mov	r0, r4
   1ff0c:	f7e7 ff1e 	bl	7d4c <att_handle_rsp>
	chan->att = NULL;
   1ff10:	2300      	movs	r3, #0
   1ff12:	6023      	str	r3, [r4, #0]
}
   1ff14:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1ff16:	f7f4 fc27 	bl	14768 <net_buf_unref>
   1ff1a:	e7ea      	b.n	1fef2 <att_chan_detach+0x2a>

0001ff1c <bt_att_disconnected>:
{
   1ff1c:	b538      	push	{r3, r4, r5, lr}
   1ff1e:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1ff20:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1ff24:	f7ff ffd0 	bl	1fec8 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1ff28:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1ff2a:	b93b      	cbnz	r3, 1ff3c <bt_att_disconnected+0x20>
	att_reset(att);
   1ff2c:	4628      	mov	r0, r5
   1ff2e:	f7e7 ff8f 	bl	7e50 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1ff32:	6820      	ldr	r0, [r4, #0]
}
   1ff34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1ff38:	f7e8 bf58 	b.w	8dec <bt_gatt_disconnected>
}
   1ff3c:	bd38      	pop	{r3, r4, r5, pc}

0001ff3e <att_timeout>:
{
   1ff3e:	b570      	push	{r4, r5, r6, lr}
   1ff40:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1ff42:	f850 6de0 	ldr.w	r6, [r0, #-224]!
	att_chan_detach(chan);
   1ff46:	f7ff ffbf 	bl	1fec8 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1ff4a:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
   1ff4c:	b945      	cbnz	r5, 1ff60 <att_timeout+0x22>
	att_reset(att);
   1ff4e:	4630      	mov	r0, r6
   1ff50:	f7e7 ff7e 	bl	7e50 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1ff54:	f854 0cd8 	ldr.w	r0, [r4, #-216]
   1ff58:	f7e8 ff48 	bl	8dec <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1ff5c:	f844 5cd8 	str.w	r5, [r4, #-216]
}
   1ff60:	bd70      	pop	{r4, r5, r6, pc}

0001ff62 <bt_att_send>:
{
   1ff62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ff66:	4605      	mov	r5, r0
   1ff68:	460e      	mov	r6, r1
   1ff6a:	4614      	mov	r4, r2
   1ff6c:	4698      	mov	r8, r3
	att = att_get(conn);
   1ff6e:	f7ff fda8 	bl	1fac2 <att_get>
	if (!att) {
   1ff72:	4607      	mov	r7, r0
   1ff74:	b938      	cbnz	r0, 1ff86 <bt_att_send+0x24>
		net_buf_unref(buf);
   1ff76:	4630      	mov	r0, r6
   1ff78:	f7f4 fbf6 	bl	14768 <net_buf_unref>
		return -ENOTCONN;
   1ff7c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1ff80:	b002      	add	sp, #8
   1ff82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1ff86:	b144      	cbz	r4, 1ff9a <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1ff88:	f8cd 8000 	str.w	r8, [sp]
   1ff8c:	4623      	mov	r3, r4
   1ff8e:	4632      	mov	r2, r6
   1ff90:	2104      	movs	r1, #4
   1ff92:	4628      	mov	r0, r5
   1ff94:	f7ff faa4 	bl	1f4e0 <bt_l2cap_send_cb>
   1ff98:	e7f2      	b.n	1ff80 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ff9a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   1ff9c:	b184      	cbz	r4, 1ffc0 <bt_att_send+0x5e>
   1ff9e:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   1ffa2:	d00f      	beq.n	1ffc4 <bt_att_send+0x62>
   1ffa4:	6824      	ldr	r4, [r4, #0]
   1ffa6:	b10c      	cbz	r4, 1ffac <bt_att_send+0x4a>
   1ffa8:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   1ffac:	2000      	movs	r0, #0
   1ffae:	b95d      	cbnz	r5, 1ffc8 <bt_att_send+0x66>
	if (ret < 0) {
   1ffb0:	b188      	cbz	r0, 1ffd6 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   1ffb2:	f107 000c 	add.w	r0, r7, #12
   1ffb6:	4631      	mov	r1, r6
   1ffb8:	f000 ff21 	bl	20dfe <net_buf_put>
	return 0;
   1ffbc:	4628      	mov	r0, r5
   1ffbe:	e7df      	b.n	1ff80 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ffc0:	4625      	mov	r5, r4
   1ffc2:	e7f3      	b.n	1ffac <bt_att_send+0x4a>
   1ffc4:	462c      	mov	r4, r5
   1ffc6:	e7f1      	b.n	1ffac <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   1ffc8:	2200      	movs	r2, #0
   1ffca:	4631      	mov	r1, r6
   1ffcc:	4628      	mov	r0, r5
   1ffce:	f7ff fccc 	bl	1f96a <bt_att_chan_send>
		if (ret >= 0) {
   1ffd2:	2800      	cmp	r0, #0
   1ffd4:	db01      	blt.n	1ffda <bt_att_send+0x78>
	return 0;
   1ffd6:	2000      	movs	r0, #0
   1ffd8:	e7d2      	b.n	1ff80 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ffda:	b154      	cbz	r4, 1fff2 <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ffdc:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   1ffe0:	d004      	beq.n	1ffec <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ffe2:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   1ffe6:	b10b      	cbz	r3, 1ffec <bt_att_send+0x8a>
   1ffe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   1ffec:	4625      	mov	r5, r4
   1ffee:	461c      	mov	r4, r3
   1fff0:	e7dd      	b.n	1ffae <bt_att_send+0x4c>
   1fff2:	4623      	mov	r3, r4
   1fff4:	e7fa      	b.n	1ffec <bt_att_send+0x8a>

0001fff6 <bt_att_req_send>:
{
   1fff6:	b570      	push	{r4, r5, r6, lr}
   1fff8:	460c      	mov	r4, r1
	att = att_get(conn);
   1fffa:	f7ff fd62 	bl	1fac2 <att_get>
	if (!att) {
   1fffe:	4605      	mov	r5, r0
   20000:	b930      	cbnz	r0, 20010 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   20002:	6920      	ldr	r0, [r4, #16]
   20004:	f7f4 fbb0 	bl	14768 <net_buf_unref>
		req->buf = NULL;
   20008:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   2000a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2000e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   20010:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   20012:	b153      	cbz	r3, 2002a <bt_att_req_send+0x34>
   20014:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   20018:	d007      	beq.n	2002a <bt_att_req_send+0x34>
   2001a:	681e      	ldr	r6, [r3, #0]
   2001c:	b10e      	cbz	r6, 20022 <bt_att_req_send+0x2c>
   2001e:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   20022:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   20026:	b143      	cbz	r3, 2003a <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   20028:	b96e      	cbnz	r6, 20046 <bt_att_req_send+0x50>
	parent->next = child;
   2002a:	2000      	movs	r0, #0
   2002c:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   2002e:	68ab      	ldr	r3, [r5, #8]
   20030:	b9a3      	cbnz	r3, 2005c <bt_att_req_send+0x66>
	list->head = node;
   20032:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   20036:	4618      	mov	r0, r3
}
   20038:	e7e9      	b.n	2000e <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   2003a:	4621      	mov	r1, r4
   2003c:	f7ff fd7d 	bl	1fb3a <bt_att_chan_req_send>
			if (ret >= 0) {
   20040:	2800      	cmp	r0, #0
   20042:	dbf1      	blt.n	20028 <bt_att_req_send+0x32>
   20044:	e7e3      	b.n	2000e <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20046:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   2004a:	d004      	beq.n	20056 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2004c:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   20050:	b10b      	cbz	r3, 20056 <bt_att_req_send+0x60>
   20052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   20056:	4630      	mov	r0, r6
   20058:	461e      	mov	r6, r3
   2005a:	e7e2      	b.n	20022 <bt_att_req_send+0x2c>
	parent->next = child;
   2005c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2005e:	60ac      	str	r4, [r5, #8]
}
   20060:	e7d5      	b.n	2000e <bt_att_req_send+0x18>

00020062 <gatt_ccc_changed>:
{
   20062:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   20064:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   20066:	895a      	ldrh	r2, [r3, #10]
   20068:	428a      	cmp	r2, r1
   2006a:	d003      	beq.n	20074 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2006c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2006e:	68db      	ldr	r3, [r3, #12]
   20070:	b103      	cbz	r3, 20074 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   20072:	4718      	bx	r3
}
   20074:	4770      	bx	lr

00020076 <gatt_indicate_rsp>:
{
   20076:	b510      	push	{r4, lr}
   20078:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   2007a:	7da3      	ldrb	r3, [r4, #22]
   2007c:	3b01      	subs	r3, #1
{
   2007e:	460a      	mov	r2, r1
	params->_ref--;
   20080:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   20082:	4621      	mov	r1, r4
   20084:	68a3      	ldr	r3, [r4, #8]
   20086:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   20088:	68e3      	ldr	r3, [r4, #12]
   2008a:	b12b      	cbz	r3, 20098 <gatt_indicate_rsp+0x22>
   2008c:	7da2      	ldrb	r2, [r4, #22]
   2008e:	b91a      	cbnz	r2, 20098 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   20090:	4620      	mov	r0, r4
}
   20092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   20096:	4718      	bx	r3
}
   20098:	bd10      	pop	{r4, pc}

0002009a <match_uuid>:
	data->attr = attr;
   2009a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2009c:	8091      	strh	r1, [r2, #4]
}
   2009e:	2000      	movs	r0, #0
   200a0:	4770      	bx	lr

000200a2 <sc_restore_rsp>:
}
   200a2:	4770      	bx	lr

000200a4 <ccc_set_cb>:
}
   200a4:	2000      	movs	r0, #0
   200a6:	4770      	bx	lr

000200a8 <write_name>:
{
   200a8:	b570      	push	{r4, r5, r6, lr}
   200aa:	b092      	sub	sp, #72	; 0x48
   200ac:	4615      	mov	r5, r2
   200ae:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   200b2:	2100      	movs	r1, #0
   200b4:	223d      	movs	r2, #61	; 0x3d
   200b6:	a802      	add	r0, sp, #8
{
   200b8:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   200ba:	9101      	str	r1, [sp, #4]
   200bc:	f006 fce6 	bl	26a8c <memset>
	if (offset) {
   200c0:	b96e      	cbnz	r6, 200de <write_name+0x36>
	if (len >= sizeof(value)) {
   200c2:	2c40      	cmp	r4, #64	; 0x40
   200c4:	d80e      	bhi.n	200e4 <write_name+0x3c>
	memcpy(value, buf, len);
   200c6:	2341      	movs	r3, #65	; 0x41
   200c8:	4622      	mov	r2, r4
   200ca:	4629      	mov	r1, r5
   200cc:	a801      	add	r0, sp, #4
   200ce:	f006 fcca 	bl	26a66 <__memcpy_chk>
	bt_set_name(value);
   200d2:	a801      	add	r0, sp, #4
   200d4:	f7e5 ff78 	bl	5fc8 <bt_set_name>
	return len;
   200d8:	4620      	mov	r0, r4
}
   200da:	b012      	add	sp, #72	; 0x48
   200dc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   200de:	f06f 0006 	mvn.w	r0, #6
   200e2:	e7fa      	b.n	200da <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   200e4:	f06f 000c 	mvn.w	r0, #12
   200e8:	e7f7      	b.n	200da <write_name+0x32>

000200ea <gatt_read_mult_rsp>:
{
   200ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   200ec:	9d08      	ldr	r5, [sp, #32]
   200ee:	4606      	mov	r6, r0
   200f0:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   200f2:	460c      	mov	r4, r1
   200f4:	b901      	cbnz	r1, 200f8 <gatt_read_mult_rsp+0xe>
   200f6:	b94b      	cbnz	r3, 2010c <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   200f8:	2300      	movs	r3, #0
   200fa:	9308      	str	r3, [sp, #32]
   200fc:	462a      	mov	r2, r5
   200fe:	4621      	mov	r1, r4
	params->func(conn, 0, params, NULL, 0);
   20100:	4630      	mov	r0, r6
   20102:	46bc      	mov	ip, r7
}
   20104:	b003      	add	sp, #12
   20106:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   2010a:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   2010c:	9300      	str	r3, [sp, #0]
   2010e:	4613      	mov	r3, r2
   20110:	462a      	mov	r2, r5
   20112:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   20114:	9408      	str	r4, [sp, #32]
   20116:	682f      	ldr	r7, [r5, #0]
   20118:	4623      	mov	r3, r4
   2011a:	462a      	mov	r2, r5
   2011c:	4621      	mov	r1, r4
   2011e:	e7ef      	b.n	20100 <gatt_read_mult_rsp+0x16>

00020120 <bt_addr_le_copy>:
   20120:	680b      	ldr	r3, [r1, #0]
   20122:	6003      	str	r3, [r0, #0]
   20124:	888b      	ldrh	r3, [r1, #4]
   20126:	8083      	strh	r3, [r0, #4]
   20128:	798b      	ldrb	r3, [r1, #6]
   2012a:	7183      	strb	r3, [r0, #6]
}
   2012c:	4770      	bx	lr

0002012e <clear_ccc_cfg>:
{
   2012e:	b513      	push	{r0, r1, r4, lr}
   20130:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   20132:	2400      	movs	r4, #0
   20134:	4669      	mov	r1, sp
   20136:	3001      	adds	r0, #1
   20138:	9400      	str	r4, [sp, #0]
   2013a:	f8cd 4003 	str.w	r4, [sp, #3]
   2013e:	f7ff ffef 	bl	20120 <bt_addr_le_copy>
	cfg->id = 0U;
   20142:	7014      	strb	r4, [r2, #0]
	cfg->value = 0U;
   20144:	8114      	strh	r4, [r2, #8]
}
   20146:	b002      	add	sp, #8
   20148:	bd10      	pop	{r4, pc}

0002014a <gatt_notify>:
{
   2014a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2014e:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   20150:	8992      	ldrh	r2, [r2, #12]
{
   20152:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   20154:	3202      	adds	r2, #2
   20156:	211b      	movs	r1, #27
{
   20158:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   2015a:	f7ff fe14 	bl	1fd86 <bt_att_create_pdu>
	if (!buf) {
   2015e:	4605      	mov	r5, r0
   20160:	b1c8      	cbz	r0, 20196 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
   20162:	f100 0908 	add.w	r9, r0, #8
   20166:	2102      	movs	r1, #2
   20168:	4648      	mov	r0, r9
   2016a:	f000 fe7b 	bl	20e64 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   2016e:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
   20170:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
   20172:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
   20176:	4648      	mov	r0, r9
   20178:	f000 fe74 	bl	20e64 <net_buf_simple_add>
   2017c:	89a2      	ldrh	r2, [r4, #12]
   2017e:	68a1      	ldr	r1, [r4, #8]
   20180:	4630      	mov	r0, r6
   20182:	f006 fc62 	bl	26a4a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   20186:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   2018a:	4629      	mov	r1, r5
   2018c:	4638      	mov	r0, r7
}
   2018e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   20192:	f7ff bee6 	b.w	1ff62 <bt_att_send>
}
   20196:	f06f 000b 	mvn.w	r0, #11
   2019a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002019e <gatt_sub_remove.part.0>:
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   2019e:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   201a0:	2300      	movs	r3, #0
   201a2:	4669      	mov	r1, sp
   201a4:	3001      	adds	r0, #1
   201a6:	9300      	str	r3, [sp, #0]
   201a8:	f8cd 3003 	str.w	r3, [sp, #3]
   201ac:	f7ff ffb8 	bl	20120 <bt_addr_le_copy>
}
   201b0:	b003      	add	sp, #12
   201b2:	f85d fb04 	ldr.w	pc, [sp], #4

000201b6 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   201b6:	2300      	movs	r3, #0
   201b8:	6003      	str	r3, [r0, #0]
   201ba:	6043      	str	r3, [r0, #4]
   201bc:	6083      	str	r3, [r0, #8]
}
   201be:	4770      	bx	lr

000201c0 <sc_save>:
{
   201c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   201c4:	4680      	mov	r8, r0
   201c6:	460f      	mov	r7, r1
   201c8:	4616      	mov	r6, r2
   201ca:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   201cc:	f7e7 fecc 	bl	7f68 <find_sc_cfg>
	if (!cfg) {
   201d0:	4604      	mov	r4, r0
   201d2:	b960      	cbnz	r0, 201ee <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   201d4:	4669      	mov	r1, sp
   201d6:	9000      	str	r0, [sp, #0]
   201d8:	f8cd 0003 	str.w	r0, [sp, #3]
   201dc:	f7e7 fec4 	bl	7f68 <find_sc_cfg>
		if (!cfg) {
   201e0:	4604      	mov	r4, r0
   201e2:	b1c0      	cbz	r0, 20216 <sc_save+0x56>
		cfg->id = id;
   201e4:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   201e8:	4639      	mov	r1, r7
   201ea:	f7ff ff99 	bl	20120 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   201ee:	8922      	ldrh	r2, [r4, #8]
   201f0:	8963      	ldrh	r3, [r4, #10]
   201f2:	b962      	cbnz	r2, 2020e <sc_save+0x4e>
   201f4:	b96b      	cbnz	r3, 20212 <sc_save+0x52>
		cfg->data.start = start;
   201f6:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   201f8:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   201fa:	4621      	mov	r1, r4
   201fc:	f811 0b01 	ldrb.w	r0, [r1], #1
   20200:	f7fe ff4f 	bl	1f0a2 <bt_addr_le_is_bonded>
   20204:	b138      	cbz	r0, 20216 <sc_save+0x56>
		sc_store(cfg);
   20206:	4620      	mov	r0, r4
   20208:	f7e7 fe8e 	bl	7f28 <sc_store>
   2020c:	e003      	b.n	20216 <sc_save+0x56>
	if (new_start >= *start && new_end <= *end) {
   2020e:	4296      	cmp	r6, r2
   20210:	d304      	bcc.n	2021c <sc_save+0x5c>
   20212:	429d      	cmp	r5, r3
   20214:	d8f0      	bhi.n	201f8 <sc_save+0x38>
}
   20216:	b002      	add	sp, #8
   20218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   2021c:	429d      	cmp	r5, r3
		*start = new_start;
   2021e:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   20220:	d9eb      	bls.n	201fa <sc_save+0x3a>
   20222:	e7e9      	b.n	201f8 <sc_save+0x38>

00020224 <sc_clear>:
{
   20224:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   20226:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   2022a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2022c:	4629      	mov	r1, r5
   2022e:	7a00      	ldrb	r0, [r0, #8]
   20230:	f7fe ff37 	bl	1f0a2 <bt_addr_le_is_bonded>
   20234:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   20236:	4629      	mov	r1, r5
   20238:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2023a:	b11b      	cbz	r3, 20244 <sc_clear+0x20>
}
   2023c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   20240:	f7e7 bea2 	b.w	7f88 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   20244:	f7e7 fe90 	bl	7f68 <find_sc_cfg>
		if (cfg) {
   20248:	b118      	cbz	r0, 20252 <sc_clear+0x2e>
}
   2024a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   2024e:	f7ff bfb2 	b.w	201b6 <clear_sc_cfg>
}
   20252:	bd38      	pop	{r3, r4, r5, pc}

00020254 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   20254:	2a02      	cmp	r2, #2
{
   20256:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   20258:	d108      	bne.n	2026c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2025a:	2300      	movs	r3, #0
   2025c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   20260:	461a      	mov	r2, r3
   20262:	7a00      	ldrb	r0, [r0, #8]
   20264:	f7ff ffac 	bl	201c0 <sc_save>
}
   20268:	2002      	movs	r0, #2
   2026a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2026c:	f7ff ffda 	bl	20224 <sc_clear>
   20270:	e7fa      	b.n	20268 <sc_ccc_cfg_write+0x14>

00020272 <sc_set>:
{
   20272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20276:	460e      	mov	r6, r1
   20278:	b087      	sub	sp, #28
   2027a:	4690      	mov	r8, r2
   2027c:	4699      	mov	r9, r3
	if (!name) {
   2027e:	4604      	mov	r4, r0
   20280:	b928      	cbnz	r0, 2028e <sc_set+0x1c>
		return -EINVAL;
   20282:	f06f 0515 	mvn.w	r5, #21
}
   20286:	4628      	mov	r0, r5
   20288:	b007      	add	sp, #28
   2028a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   2028e:	a902      	add	r1, sp, #8
   20290:	f7fe fbed 	bl	1ea6e <bt_settings_decode_key>
	if (err) {
   20294:	4605      	mov	r5, r0
   20296:	2800      	cmp	r0, #0
   20298:	d1f3      	bne.n	20282 <sc_set+0x10>
	settings_name_next(name, &next);
   2029a:	a901      	add	r1, sp, #4
   2029c:	4620      	mov	r0, r4
   2029e:	f7fe f8bf 	bl	1e420 <settings_name_next>
	if (!next) {
   202a2:	9801      	ldr	r0, [sp, #4]
   202a4:	b1b8      	cbz	r0, 202d6 <sc_set+0x64>
		id = strtol(next, NULL, 10);
   202a6:	220a      	movs	r2, #10
   202a8:	4629      	mov	r1, r5
   202aa:	f7fc fbb9 	bl	1ca20 <strtol>
   202ae:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   202b0:	a902      	add	r1, sp, #8
   202b2:	4638      	mov	r0, r7
   202b4:	f7e7 fe58 	bl	7f68 <find_sc_cfg>
	if (!cfg && len_rd) {
   202b8:	4604      	mov	r4, r0
   202ba:	b9d8      	cbnz	r0, 202f4 <sc_set+0x82>
   202bc:	2e00      	cmp	r6, #0
   202be:	d0e2      	beq.n	20286 <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   202c0:	a904      	add	r1, sp, #16
   202c2:	9004      	str	r0, [sp, #16]
   202c4:	f8cd 0013 	str.w	r0, [sp, #19]
   202c8:	f7e7 fe4e 	bl	7f68 <find_sc_cfg>
		if (!cfg) {
   202cc:	4604      	mov	r4, r0
   202ce:	b920      	cbnz	r0, 202da <sc_set+0x68>
			return -ENOMEM;
   202d0:	f06f 050b 	mvn.w	r5, #11
   202d4:	e7d7      	b.n	20286 <sc_set+0x14>
		id = BT_ID_DEFAULT;
   202d6:	462f      	mov	r7, r5
   202d8:	e7ea      	b.n	202b0 <sc_set+0x3e>
		cfg->id = id;
   202da:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   202de:	a902      	add	r1, sp, #8
   202e0:	f7ff ff1e 	bl	20120 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   202e4:	2204      	movs	r2, #4
   202e6:	f104 0108 	add.w	r1, r4, #8
   202ea:	4648      	mov	r0, r9
   202ec:	47c0      	blx	r8
		if (len < 0) {
   202ee:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   202f2:	e7c8      	b.n	20286 <sc_set+0x14>
	if (len_rd) {
   202f4:	2e00      	cmp	r6, #0
   202f6:	d1f5      	bne.n	202e4 <sc_set+0x72>
   202f8:	6026      	str	r6, [r4, #0]
   202fa:	6066      	str	r6, [r4, #4]
   202fc:	60a6      	str	r6, [r4, #8]
   202fe:	e7c2      	b.n	20286 <sc_set+0x14>

00020300 <ccc_find_cfg>:
{
   20300:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   20302:	7803      	ldrb	r3, [r0, #0]
   20304:	4293      	cmp	r3, r2
{
   20306:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   20308:	d001      	beq.n	2030e <ccc_find_cfg+0xe>
	return NULL;
   2030a:	2000      	movs	r0, #0
}
   2030c:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   2030e:	2207      	movs	r2, #7
   20310:	3001      	adds	r0, #1
   20312:	f006 fb8c 	bl	26a2e <memcmp>
		if (id == ccc->cfg[i].id &&
   20316:	2800      	cmp	r0, #0
   20318:	d1f7      	bne.n	2030a <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   2031a:	4620      	mov	r0, r4
   2031c:	e7f6      	b.n	2030c <ccc_find_cfg+0xc>

0002031e <find_ccc_cfg>:
{
   2031e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20320:	460c      	mov	r4, r1
   20322:	1c4d      	adds	r5, r1, #1
		if (conn) {
   20324:	b148      	cbz	r0, 2033a <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   20326:	7809      	ldrb	r1, [r1, #0]
   20328:	462a      	mov	r2, r5
   2032a:	f7ff f800 	bl	1f32e <bt_conn_is_peer_addr_le>
   2032e:	2800      	cmp	r0, #0
	return NULL;
   20330:	bf08      	it	eq
   20332:	2400      	moveq	r4, #0
}
   20334:	4620      	mov	r0, r4
   20336:	b003      	add	sp, #12
   20338:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2033a:	9000      	str	r0, [sp, #0]
   2033c:	2207      	movs	r2, #7
   2033e:	f8cd 0003 	str.w	r0, [sp, #3]
   20342:	4669      	mov	r1, sp
   20344:	4628      	mov	r0, r5
   20346:	f006 fb72 	bl	26a2e <memcmp>
   2034a:	2800      	cmp	r0, #0
	return NULL;
   2034c:	bf18      	it	ne
   2034e:	2400      	movne	r4, #0
   20350:	e7f0      	b.n	20334 <find_ccc_cfg+0x16>

00020352 <bt_gatt_attr_write_ccc>:
{
   20352:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20356:	461f      	mov	r7, r3
   20358:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2035c:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   20360:	4606      	mov	r6, r0
   20362:	4688      	mov	r8, r1
	if (offset) {
   20364:	2b00      	cmp	r3, #0
   20366:	d13d      	bne.n	203e4 <bt_gatt_attr_write_ccc+0x92>
	if (!len || len > sizeof(uint16_t)) {
   20368:	1e7b      	subs	r3, r7, #1
   2036a:	2b01      	cmp	r3, #1
   2036c:	d83d      	bhi.n	203ea <bt_gatt_attr_write_ccc+0x98>
	if (len < sizeof(uint16_t)) {
   2036e:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   20370:	7815      	ldrb	r5, [r2, #0]
   20372:	bf18      	it	ne
   20374:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   20376:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   20378:	bf0c      	ite	eq
   2037a:	b2ad      	uxtheq	r5, r5
   2037c:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   20380:	f7ff ffcd 	bl	2031e <find_ccc_cfg>
	if (!cfg) {
   20384:	4604      	mov	r4, r0
   20386:	b978      	cbnz	r0, 203a8 <bt_gatt_attr_write_ccc+0x56>
		if (!value) {
   20388:	b915      	cbnz	r5, 20390 <bt_gatt_attr_write_ccc+0x3e>
			return len;
   2038a:	4638      	mov	r0, r7
}
   2038c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   20390:	4649      	mov	r1, r9
   20392:	f7ff ffc4 	bl	2031e <find_ccc_cfg>
		if (!cfg) {
   20396:	4604      	mov	r4, r0
   20398:	b350      	cbz	r0, 203f0 <bt_gatt_attr_write_ccc+0x9e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2039a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2039e:	3001      	adds	r0, #1
   203a0:	f7ff febe 	bl	20120 <bt_addr_le_copy>
		cfg->id = conn->id;
   203a4:	7a33      	ldrb	r3, [r6, #8]
   203a6:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   203a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   203ac:	b973      	cbnz	r3, 203cc <bt_gatt_attr_write_ccc+0x7a>
	if (cfg->value != ccc->value) {
   203ae:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   203b2:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   203b4:	42ab      	cmp	r3, r5
   203b6:	d003      	beq.n	203c0 <bt_gatt_attr_write_ccc+0x6e>
		gatt_ccc_changed(attr, ccc);
   203b8:	4649      	mov	r1, r9
   203ba:	4640      	mov	r0, r8
   203bc:	f7ff fe51 	bl	20062 <gatt_ccc_changed>
	if (!value) {
   203c0:	2d00      	cmp	r5, #0
   203c2:	d1e2      	bne.n	2038a <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   203c4:	4620      	mov	r0, r4
   203c6:	f7ff feb2 	bl	2012e <clear_ccc_cfg>
   203ca:	e7de      	b.n	2038a <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   203cc:	462a      	mov	r2, r5
   203ce:	4641      	mov	r1, r8
   203d0:	4630      	mov	r0, r6
   203d2:	4798      	blx	r3
		if (write < 0) {
   203d4:	2800      	cmp	r0, #0
   203d6:	dbd9      	blt.n	2038c <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   203d8:	1e42      	subs	r2, r0, #1
   203da:	2a01      	cmp	r2, #1
   203dc:	d9e7      	bls.n	203ae <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   203de:	f06f 000d 	mvn.w	r0, #13
   203e2:	e7d3      	b.n	2038c <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   203e4:	f06f 0006 	mvn.w	r0, #6
   203e8:	e7d0      	b.n	2038c <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   203ea:	f06f 000c 	mvn.w	r0, #12
   203ee:	e7cd      	b.n	2038c <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   203f0:	f06f 0010 	mvn.w	r0, #16
   203f4:	e7ca      	b.n	2038c <bt_gatt_attr_write_ccc+0x3a>

000203f6 <gatt_sub_remove>:
{
   203f6:	b538      	push	{r3, r4, r5, lr}
   203f8:	460c      	mov	r4, r1
	if (params) {
   203fa:	4619      	mov	r1, r3
   203fc:	b16b      	cbz	r3, 2041a <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   203fe:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   20402:	695b      	ldr	r3, [r3, #20]
   20404:	b982      	cbnz	r2, 20428 <gatt_sub_remove+0x32>
   20406:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   20408:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   2040a:	4295      	cmp	r5, r2
   2040c:	d100      	bne.n	20410 <gatt_sub_remove+0x1a>
	list->tail = node;
   2040e:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   20410:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   20412:	680d      	ldr	r5, [r1, #0]
   20414:	614b      	str	r3, [r1, #20]
   20416:	461a      	mov	r2, r3
   20418:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   2041a:	68a3      	ldr	r3, [r4, #8]
   2041c:	b953      	cbnz	r3, 20434 <gatt_sub_remove+0x3e>
   2041e:	4620      	mov	r0, r4
}
   20420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20424:	f7ff bebb 	b.w	2019e <gatt_sub_remove.part.0>
   20428:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2042a:	68e3      	ldr	r3, [r4, #12]
   2042c:	429d      	cmp	r5, r3
	list->tail = node;
   2042e:	bf08      	it	eq
   20430:	60e2      	streq	r2, [r4, #12]
}
   20432:	e7ed      	b.n	20410 <gatt_sub_remove+0x1a>
   20434:	bd38      	pop	{r3, r4, r5, pc}

00020436 <gatt_write_ccc_rsp>:
{
   20436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2043a:	9c06      	ldr	r4, [sp, #24]
   2043c:	f3bf 8f5b 	dmb	ish
   20440:	4606      	mov	r6, r0
   20442:	460d      	mov	r5, r1
   20444:	f104 0310 	add.w	r3, r4, #16
   20448:	e853 2f00 	ldrex	r2, [r3]
   2044c:	f022 0204 	bic.w	r2, r2, #4
   20450:	e843 2100 	strex	r1, r2, [r3]
   20454:	2900      	cmp	r1, #0
   20456:	d1f7      	bne.n	20448 <gatt_write_ccc_rsp+0x12>
   20458:	f3bf 8f5b 	dmb	ish
	if (err) {
   2045c:	b1dd      	cbz	r5, 20496 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   2045e:	f7e7 fe71 	bl	8144 <gatt_sub_find>
		if (!sub) {
   20462:	4601      	mov	r1, r0
   20464:	b300      	cbz	r0, 204a8 <gatt_write_ccc_rsp+0x72>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   20466:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   20468:	b143      	cbz	r3, 2047c <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2046a:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   2046c:	f104 0014 	add.w	r0, r4, #20
   20470:	4283      	cmp	r3, r0
   20472:	d10b      	bne.n	2048c <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   20474:	4623      	mov	r3, r4
   20476:	4630      	mov	r0, r6
   20478:	f7ff ffbd 	bl	203f6 <gatt_sub_remove>
	if (params->write) {
   2047c:	6863      	ldr	r3, [r4, #4]
   2047e:	b19b      	cbz	r3, 204a8 <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   20480:	4629      	mov	r1, r5
   20482:	4630      	mov	r0, r6
   20484:	2200      	movs	r2, #0
}
   20486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   2048a:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   2048c:	2a00      	cmp	r2, #0
   2048e:	d0f5      	beq.n	2047c <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20490:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   20492:	6812      	ldr	r2, [r2, #0]
   20494:	e7ec      	b.n	20470 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   20496:	89a3      	ldrh	r3, [r4, #12]
   20498:	2b00      	cmp	r3, #0
   2049a:	d1ef      	bne.n	2047c <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   2049c:	6827      	ldr	r7, [r4, #0]
   2049e:	462b      	mov	r3, r5
   204a0:	462a      	mov	r2, r5
   204a2:	4621      	mov	r1, r4
   204a4:	47b8      	blx	r7
   204a6:	e7e9      	b.n	2047c <gatt_write_ccc_rsp+0x46>
}
   204a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000204ac <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   204ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   204b0:	4606      	mov	r6, r0
   204b2:	4688      	mov	r8, r1
   204b4:	4617      	mov	r7, r2
	if (params) {
   204b6:	461d      	mov	r5, r3
   204b8:	b1e3      	cbz	r3, 204f4 <gatt_send.constprop.0+0x48>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   204ba:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   204be:	2100      	movs	r1, #0
   204c0:	f7e7 fc22 	bl	7d08 <bt_att_req_alloc>
		if (!req) {
   204c4:	4604      	mov	r4, r0
   204c6:	b920      	cbnz	r0, 204d2 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   204c8:	f06f 050b 	mvn.w	r5, #11
}
   204cc:	4628      	mov	r0, r5
   204ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   204d2:	2300      	movs	r3, #0
		req->user_data = params;
   204d4:	6145      	str	r5, [r0, #20]
		req->buf = buf;
   204d6:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   204da:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   204dc:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   204de:	4601      	mov	r1, r0
   204e0:	4630      	mov	r0, r6
   204e2:	f7ff fd88 	bl	1fff6 <bt_att_req_send>
		if (err) {
   204e6:	4605      	mov	r5, r0
   204e8:	2800      	cmp	r0, #0
   204ea:	d0ef      	beq.n	204cc <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   204ec:	4620      	mov	r0, r4
   204ee:	f7e7 fc21 	bl	7d34 <bt_att_req_free>
   204f2:	e7eb      	b.n	204cc <gatt_send.constprop.0+0x20>
}
   204f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		err = bt_att_send(conn, buf, NULL, NULL);
   204f8:	461a      	mov	r2, r3
   204fa:	f7ff bd32 	b.w	1ff62 <bt_att_send>

000204fe <bt_gatt_attr_read>:
{
   204fe:	b538      	push	{r3, r4, r5, lr}
   20500:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   20504:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   20508:	428d      	cmp	r5, r1
{
   2050a:	4610      	mov	r0, r2
	if (offset > value_len) {
   2050c:	d30b      	bcc.n	20526 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2050e:	1a6d      	subs	r5, r5, r1
   20510:	429d      	cmp	r5, r3
   20512:	bfa8      	it	ge
   20514:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20516:	9b05      	ldr	r3, [sp, #20]
   20518:	b2ad      	uxth	r5, r5
   2051a:	462a      	mov	r2, r5
   2051c:	4419      	add	r1, r3
   2051e:	f006 fa94 	bl	26a4a <memcpy>
}
   20522:	4628      	mov	r0, r5
   20524:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20526:	f06f 0506 	mvn.w	r5, #6
   2052a:	e7fa      	b.n	20522 <bt_gatt_attr_read+0x24>

0002052c <read_appearance>:
{
   2052c:	b510      	push	{r4, lr}
   2052e:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   20530:	f240 3441 	movw	r4, #833	; 0x341
   20534:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   20538:	2402      	movs	r4, #2
   2053a:	9402      	str	r4, [sp, #8]
   2053c:	f10d 0416 	add.w	r4, sp, #22
   20540:	9401      	str	r4, [sp, #4]
   20542:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   20546:	9400      	str	r4, [sp, #0]
   20548:	f7ff ffd9 	bl	204fe <bt_gatt_attr_read>
}
   2054c:	b006      	add	sp, #24
   2054e:	bd10      	pop	{r4, pc}

00020550 <read_name>:
{
   20550:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20554:	461f      	mov	r7, r3
   20556:	460d      	mov	r5, r1
   20558:	4616      	mov	r6, r2
   2055a:	4604      	mov	r4, r0
	const char *name = bt_get_name();
   2055c:	f7e5 fd74 	bl	6048 <bt_get_name>
   20560:	4680      	mov	r8, r0
				 strlen(name));
   20562:	f7df ff93 	bl	48c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   20566:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2056a:	9300      	str	r3, [sp, #0]
   2056c:	b280      	uxth	r0, r0
   2056e:	e9cd 8001 	strd	r8, r0, [sp, #4]
   20572:	463b      	mov	r3, r7
   20574:	4632      	mov	r2, r6
   20576:	4629      	mov	r1, r5
   20578:	4620      	mov	r0, r4
   2057a:	f7ff ffc0 	bl	204fe <bt_gatt_attr_read>
}
   2057e:	b004      	add	sp, #16
   20580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020584 <bt_gatt_attr_read_service>:
{
   20584:	b570      	push	{r4, r5, r6, lr}
	struct bt_uuid *uuid = attr->user_data;
   20586:	68cc      	ldr	r4, [r1, #12]
{
   20588:	b086      	sub	sp, #24
	if (uuid->type == BT_UUID_TYPE_16) {
   2058a:	7826      	ldrb	r6, [r4, #0]
{
   2058c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	if (uuid->type == BT_UUID_TYPE_16) {
   20590:	b966      	cbnz	r6, 205ac <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   20592:	8864      	ldrh	r4, [r4, #2]
   20594:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   20598:	2402      	movs	r4, #2
   2059a:	9402      	str	r4, [sp, #8]
   2059c:	f10d 0416 	add.w	r4, sp, #22
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   205a0:	e9cd 5400 	strd	r5, r4, [sp]
   205a4:	f7ff ffab 	bl	204fe <bt_gatt_attr_read>
}
   205a8:	b006      	add	sp, #24
   205aa:	bd70      	pop	{r4, r5, r6, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   205ac:	2610      	movs	r6, #16
   205ae:	9602      	str	r6, [sp, #8]
				 BT_UUID_128(uuid)->val, 16);
   205b0:	3401      	adds	r4, #1
   205b2:	e7f5      	b.n	205a0 <bt_gatt_attr_read_service+0x1c>

000205b4 <bt_gatt_attr_read_ccc>:
{
   205b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   205b6:	460c      	mov	r4, r1
   205b8:	b087      	sub	sp, #28
	cfg = find_ccc_cfg(conn, ccc);
   205ba:	68c9      	ldr	r1, [r1, #12]
{
   205bc:	4605      	mov	r5, r0
   205be:	4616      	mov	r6, r2
   205c0:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   205c2:	f7ff feac 	bl	2031e <find_ccc_cfg>
	if (cfg) {
   205c6:	b100      	cbz	r0, 205ca <bt_gatt_attr_read_ccc+0x16>
		value = sys_cpu_to_le16(cfg->value);
   205c8:	8900      	ldrh	r0, [r0, #8]
   205ca:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   205ce:	2302      	movs	r3, #2
   205d0:	9302      	str	r3, [sp, #8]
   205d2:	f10d 0316 	add.w	r3, sp, #22
   205d6:	9301      	str	r3, [sp, #4]
   205d8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   205dc:	9300      	str	r3, [sp, #0]
   205de:	4632      	mov	r2, r6
   205e0:	463b      	mov	r3, r7
   205e2:	4621      	mov	r1, r4
   205e4:	4628      	mov	r0, r5
   205e6:	f7ff ff8a 	bl	204fe <bt_gatt_attr_read>
}
   205ea:	b007      	add	sp, #28
   205ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000205ee <bt_gatt_attr_value_handle>:
{
   205ee:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   205f0:	4604      	mov	r4, r0
   205f2:	b910      	cbnz	r0, 205fa <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   205f4:	2000      	movs	r0, #0
}
   205f6:	b002      	add	sp, #8
   205f8:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   205fa:	2300      	movs	r3, #0
   205fc:	f88d 3004 	strb.w	r3, [sp, #4]
   20600:	6800      	ldr	r0, [r0, #0]
   20602:	f642 0303 	movw	r3, #10243	; 0x2803
   20606:	a901      	add	r1, sp, #4
   20608:	f8ad 3006 	strh.w	r3, [sp, #6]
   2060c:	f7fe fa55 	bl	1eaba <bt_uuid_cmp>
   20610:	2800      	cmp	r0, #0
   20612:	d1ef      	bne.n	205f4 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   20614:	68e3      	ldr	r3, [r4, #12]
   20616:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   20618:	2800      	cmp	r0, #0
   2061a:	d1ec      	bne.n	205f6 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2061c:	4620      	mov	r0, r4
   2061e:	f7e7 ff29 	bl	8474 <bt_gatt_attr_get_handle>
   20622:	3001      	adds	r0, #1
   20624:	b280      	uxth	r0, r0
	return handle;
   20626:	e7e6      	b.n	205f6 <bt_gatt_attr_value_handle+0x8>

00020628 <bt_gatt_attr_read_chrc>:
{
   20628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2062c:	68cc      	ldr	r4, [r1, #12]
{
   2062e:	b08a      	sub	sp, #40	; 0x28
   20630:	4606      	mov	r6, r0
   20632:	4698      	mov	r8, r3
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   20634:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   20636:	79a3      	ldrb	r3, [r4, #6]
   20638:	f88d 3014 	strb.w	r3, [sp, #20]
{
   2063c:	460d      	mov	r5, r1
   2063e:	4617      	mov	r7, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   20640:	f7ff ffd5 	bl	205ee <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   20644:	6824      	ldr	r4, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   20646:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2064a:	7823      	ldrb	r3, [r4, #0]
   2064c:	b993      	cbnz	r3, 20674 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2064e:	8863      	ldrh	r3, [r4, #2]
   20650:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   20654:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   20656:	9302      	str	r3, [sp, #8]
   20658:	ab05      	add	r3, sp, #20
   2065a:	9301      	str	r3, [sp, #4]
   2065c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   20660:	9300      	str	r3, [sp, #0]
   20662:	463a      	mov	r2, r7
   20664:	4643      	mov	r3, r8
   20666:	4629      	mov	r1, r5
   20668:	4630      	mov	r0, r6
   2066a:	f7ff ff48 	bl	204fe <bt_gatt_attr_read>
}
   2066e:	b00a      	add	sp, #40	; 0x28
   20670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   20674:	1c63      	adds	r3, r4, #1
   20676:	f10d 0217 	add.w	r2, sp, #23
   2067a:	3411      	adds	r4, #17
   2067c:	f853 1b04 	ldr.w	r1, [r3], #4
   20680:	f842 1b04 	str.w	r1, [r2], #4
   20684:	42a3      	cmp	r3, r4
   20686:	d1f9      	bne.n	2067c <bt_gatt_attr_read_chrc+0x54>
		value_len += 16U;
   20688:	2313      	movs	r3, #19
   2068a:	e7e4      	b.n	20656 <bt_gatt_attr_read_chrc+0x2e>

0002068c <bt_gatt_foreach_attr>:
{
   2068c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2068e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   20692:	2300      	movs	r3, #0
   20694:	9300      	str	r3, [sp, #0]
   20696:	461a      	mov	r2, r3
   20698:	f7e7 ff1c 	bl	84d4 <bt_gatt_foreach_attr_type>
}
   2069c:	b005      	add	sp, #20
   2069e:	f85d fb04 	ldr.w	pc, [sp], #4

000206a2 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   206a2:	07d3      	lsls	r3, r2, #31
{
   206a4:	b510      	push	{r4, lr}
   206a6:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   206a8:	d504      	bpl.n	206b4 <bt_gatt_check_perm+0x12>
   206aa:	f014 0f15 	tst.w	r4, #21
   206ae:	d017      	beq.n	206e0 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   206b0:	684b      	ldr	r3, [r1, #4]
   206b2:	b1ab      	cbz	r3, 206e0 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   206b4:	0793      	lsls	r3, r2, #30
   206b6:	d504      	bpl.n	206c2 <bt_gatt_check_perm+0x20>
   206b8:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   206bc:	d012      	beq.n	206e4 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   206be:	688b      	ldr	r3, [r1, #8]
   206c0:	b183      	cbz	r3, 206e4 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   206c2:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   206c4:	f014 0f30 	tst.w	r4, #48	; 0x30
   206c8:	d104      	bne.n	206d4 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   206ca:	f014 000c 	ands.w	r0, r4, #12
   206ce:	bf18      	it	ne
   206d0:	200f      	movne	r0, #15
}
   206d2:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   206d4:	f7fe fdb8 	bl	1f248 <bt_conn_get_security>
   206d8:	2802      	cmp	r0, #2
   206da:	d8f6      	bhi.n	206ca <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   206dc:	2005      	movs	r0, #5
   206de:	e7f8      	b.n	206d2 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   206e0:	2002      	movs	r0, #2
   206e2:	e7f6      	b.n	206d2 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   206e4:	2003      	movs	r0, #3
   206e6:	e7f4      	b.n	206d2 <bt_gatt_check_perm+0x30>

000206e8 <gatt_discover_next>:
{
   206e8:	b570      	push	{r4, r5, r6, lr}
   206ea:	4605      	mov	r5, r0
   206ec:	4614      	mov	r4, r2
	if (!last_handle)
   206ee:	b929      	cbnz	r1, 206fc <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   206f0:	4621      	mov	r1, r4
   206f2:	4628      	mov	r0, r5
   206f4:	f7e8 f8a2 	bl	883c <bt_gatt_discover>
   206f8:	b928      	cbnz	r0, 20706 <gatt_discover_next+0x1e>
}
   206fa:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   206fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20700:	4291      	cmp	r1, r2
   20702:	d107      	bne.n	20714 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   20704:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   20706:	6863      	ldr	r3, [r4, #4]
   20708:	4622      	mov	r2, r4
   2070a:	4628      	mov	r0, r5
   2070c:	2100      	movs	r1, #0
}
   2070e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   20712:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   20714:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   20716:	1c4b      	adds	r3, r1, #1
   20718:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   2071a:	429a      	cmp	r2, r3
		params->start_handle++;
   2071c:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   2071e:	d2e7      	bcs.n	206f0 <gatt_discover_next+0x8>
   20720:	e7f1      	b.n	20706 <gatt_discover_next+0x1e>

00020722 <gatt_find_type_rsp>:
{
   20722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20726:	b088      	sub	sp, #32
   20728:	4607      	mov	r7, r0
   2072a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2072e:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   20730:	b911      	cbnz	r1, 20738 <gatt_find_type_rsp+0x16>
   20732:	f013 0803 	ands.w	r8, r3, #3
   20736:	d008      	beq.n	2074a <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   20738:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2073c:	464a      	mov	r2, r9
   2073e:	2100      	movs	r1, #0
   20740:	4638      	mov	r0, r7
   20742:	4798      	blx	r3
}
   20744:	b008      	add	sp, #32
   20746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0U; i < count; i++) {
   2074a:	f3c3 0387 	ubfx	r3, r3, #2, #8
   2074e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   20752:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   20754:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   20758:	42ac      	cmp	r4, r5
   2075a:	d105      	bne.n	20768 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   2075c:	464a      	mov	r2, r9
   2075e:	4641      	mov	r1, r8
   20760:	4638      	mov	r0, r7
   20762:	f7ff ffc1 	bl	206e8 <gatt_discover_next>
	return;
   20766:	e7ed      	b.n	20744 <gatt_find_type_rsp+0x22>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   20768:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2076a:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   2076e:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   20772:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   20774:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   20778:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   2077c:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   2077e:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   20780:	bf0c      	ite	eq
   20782:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   20786:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   20788:	ab01      	add	r3, sp, #4
   2078a:	f8ad 1002 	strh.w	r1, [sp, #2]
   2078e:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   20790:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   20794:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   20798:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2079c:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   207a0:	f8cd d00c 	str.w	sp, [sp, #12]
   207a4:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   207a8:	464a      	mov	r2, r9
   207aa:	a903      	add	r1, sp, #12
   207ac:	4638      	mov	r0, r7
   207ae:	4798      	blx	r3
   207b0:	3404      	adds	r4, #4
   207b2:	2800      	cmp	r0, #0
   207b4:	d1d0      	bne.n	20758 <gatt_find_type_rsp+0x36>
   207b6:	e7c5      	b.n	20744 <gatt_find_type_rsp+0x22>

000207b8 <gatt_read_group_rsp>:
{
   207b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   207bc:	b08e      	sub	sp, #56	; 0x38
   207be:	4607      	mov	r7, r0
   207c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   207c4:	4616      	mov	r6, r2
	if (err) {
   207c6:	b139      	cbz	r1, 207d8 <gatt_read_group_rsp+0x20>
		params->func(conn, NULL, params);
   207c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   207cc:	4642      	mov	r2, r8
   207ce:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
   207d0:	4798      	blx	r3
}
   207d2:	b00e      	add	sp, #56	; 0x38
   207d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (rsp->len) {
   207d8:	7812      	ldrb	r2, [r2, #0]
   207da:	2a06      	cmp	r2, #6
   207dc:	d007      	beq.n	207ee <gatt_read_group_rsp+0x36>
   207de:	2a14      	cmp	r2, #20
   207e0:	d01a      	beq.n	20818 <gatt_read_group_rsp+0x60>
	params->func(conn, NULL, params);
   207e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   207e6:	4642      	mov	r2, r8
   207e8:	2100      	movs	r1, #0
   207ea:	4638      	mov	r0, r7
   207ec:	e7f0      	b.n	207d0 <gatt_read_group_rsp+0x18>
		u.uuid.type = BT_UUID_TYPE_16;
   207ee:	f88d 1010 	strb.w	r1, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   207f2:	3b01      	subs	r3, #1
	uint16_t start_handle, end_handle = 0U;
   207f4:	2500      	movs	r5, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   207f6:	b29c      	uxth	r4, r3
   207f8:	f106 0901 	add.w	r9, r6, #1
		struct bt_gatt_attr attr = {};
   207fc:	46aa      	mov	sl, r5
	for (length--, pdu = rsp->data; length >= rsp->len;
   207fe:	7833      	ldrb	r3, [r6, #0]
   20800:	42a3      	cmp	r3, r4
   20802:	d90d      	bls.n	20820 <gatt_read_group_rsp+0x68>
	if (length == 0U && end_handle) {
   20804:	2c00      	cmp	r4, #0
   20806:	d1ec      	bne.n	207e2 <gatt_read_group_rsp+0x2a>
   20808:	2d00      	cmp	r5, #0
   2080a:	d0ea      	beq.n	207e2 <gatt_read_group_rsp+0x2a>
	gatt_discover_next(conn, handle, params);
   2080c:	4642      	mov	r2, r8
   2080e:	4629      	mov	r1, r5
   20810:	4638      	mov	r0, r7
   20812:	f7ff ff69 	bl	206e8 <gatt_discover_next>
   20816:	e7dc      	b.n	207d2 <gatt_read_group_rsp+0x1a>
		u.uuid.type = BT_UUID_TYPE_128;
   20818:	2202      	movs	r2, #2
   2081a:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   2081e:	e7e8      	b.n	207f2 <gatt_read_group_rsp+0x3a>
		struct bt_gatt_attr attr = {};
   20820:	2214      	movs	r2, #20
   20822:	2100      	movs	r1, #0
   20824:	a809      	add	r0, sp, #36	; 0x24
   20826:	f006 f931 	bl	26a8c <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   2082a:	f8b9 2000 	ldrh.w	r2, [r9]
   2082e:	b293      	uxth	r3, r2
		if (!start_handle) {
   20830:	2b00      	cmp	r3, #0
   20832:	d0d6      	beq.n	207e2 <gatt_read_group_rsp+0x2a>
		end_handle = sys_le16_to_cpu(data->end_handle);
   20834:	f8b9 1002 	ldrh.w	r1, [r9, #2]
   20838:	b28d      	uxth	r5, r1
		if (!end_handle || end_handle < start_handle) {
   2083a:	2d00      	cmp	r5, #0
   2083c:	d0d1      	beq.n	207e2 <gatt_read_group_rsp+0x2a>
   2083e:	42ab      	cmp	r3, r5
   20840:	d8cf      	bhi.n	207e2 <gatt_read_group_rsp+0x2a>
		switch (u.uuid.type) {
   20842:	f89d 3010 	ldrb.w	r3, [sp, #16]
   20846:	b323      	cbz	r3, 20892 <gatt_read_group_rsp+0xda>
   20848:	2b02      	cmp	r3, #2
   2084a:	d027      	beq.n	2089c <gatt_read_group_rsp+0xe4>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2084c:	f898 3010 	ldrb.w	r3, [r8, #16]
		value.end_handle = end_handle;
   20850:	f8ad 100c 	strh.w	r1, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   20854:	2b00      	cmp	r3, #0
   20856:	f642 0301 	movw	r3, #10241	; 0x2801
   2085a:	bf08      	it	eq
   2085c:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   20860:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   20864:	ab04      	add	r3, sp, #16
   20866:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   20868:	ab01      	add	r3, sp, #4
   2086a:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   2086c:	ab02      	add	r3, sp, #8
		attr.handle = start_handle;
   2086e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
		attr.user_data = &value;
   20872:	930c      	str	r3, [sp, #48]	; 0x30
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   20874:	f88d a004 	strb.w	sl, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   20878:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2087c:	4642      	mov	r2, r8
   2087e:	a909      	add	r1, sp, #36	; 0x24
   20880:	4638      	mov	r0, r7
   20882:	4798      	blx	r3
   20884:	2800      	cmp	r0, #0
   20886:	d0a4      	beq.n	207d2 <gatt_read_group_rsp+0x1a>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   20888:	7832      	ldrb	r2, [r6, #0]
   2088a:	1aa4      	subs	r4, r4, r2
   2088c:	b2a4      	uxth	r4, r4
   2088e:	4491      	add	r9, r2
   20890:	e7b5      	b.n	207fe <gatt_read_group_rsp+0x46>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   20892:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   20896:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   2089a:	e7d7      	b.n	2084c <gatt_read_group_rsp+0x94>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   2089c:	f109 0304 	add.w	r3, r9, #4
   208a0:	f10d 0011 	add.w	r0, sp, #17
   208a4:	f109 0c14 	add.w	ip, r9, #20
   208a8:	f853 eb04 	ldr.w	lr, [r3], #4
   208ac:	f840 eb04 	str.w	lr, [r0], #4
   208b0:	4563      	cmp	r3, ip
   208b2:	d1f9      	bne.n	208a8 <gatt_read_group_rsp+0xf0>
   208b4:	e7ca      	b.n	2084c <gatt_read_group_rsp+0x94>

000208b6 <read_included_uuid_cb>:
{
   208b6:	b570      	push	{r4, r5, r6, lr}
   208b8:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
   208ba:	2b10      	cmp	r3, #16
{
   208bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
   208be:	4605      	mov	r5, r0
	if (length != 16U) {
   208c0:	d005      	beq.n	208ce <read_included_uuid_cb+0x18>
		params->func(conn, NULL, params);
   208c2:	6863      	ldr	r3, [r4, #4]
   208c4:	4622      	mov	r2, r4
   208c6:	2100      	movs	r1, #0
   208c8:	4798      	blx	r3
}
   208ca:	b00e      	add	sp, #56	; 0x38
   208cc:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
   208ce:	8963      	ldrh	r3, [r4, #10]
   208d0:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   208d4:	89a3      	ldrh	r3, [r4, #12]
   208d6:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   208da:	a804      	add	r0, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   208dc:	2302      	movs	r3, #2
   208de:	f88d 3010 	strb.w	r3, [sp, #16]
	value.uuid = &u.uuid;
   208e2:	9002      	str	r0, [sp, #8]
	memcpy(u.u128.val, pdu, length);
   208e4:	f10d 0311 	add.w	r3, sp, #17
   208e8:	f102 0110 	add.w	r1, r2, #16
   208ec:	f852 6b04 	ldr.w	r6, [r2], #4
   208f0:	f843 6b04 	str.w	r6, [r3], #4
   208f4:	428a      	cmp	r2, r1
   208f6:	d1f9      	bne.n	208ec <read_included_uuid_cb+0x36>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   208f8:	6821      	ldr	r1, [r4, #0]
   208fa:	b9f1      	cbnz	r1, 2093a <read_included_uuid_cb+0x84>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   208fc:	f642 0202 	movw	r2, #10242	; 0x2802
   20900:	2300      	movs	r3, #0
   20902:	f8ad 2006 	strh.w	r2, [sp, #6]
   20906:	aa01      	add	r2, sp, #4
   20908:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   2090c:	f88d 3004 	strb.w	r3, [sp, #4]
   20910:	aa02      	add	r2, sp, #8
   20912:	930b      	str	r3, [sp, #44]	; 0x2c
   20914:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   20918:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   2091a:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   2091c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   20920:	4622      	mov	r2, r4
   20922:	6863      	ldr	r3, [r4, #4]
   20924:	a909      	add	r1, sp, #36	; 0x24
   20926:	4628      	mov	r0, r5
   20928:	4798      	blx	r3
   2092a:	2800      	cmp	r0, #0
   2092c:	d0cd      	beq.n	208ca <read_included_uuid_cb+0x14>
	gatt_discover_next(conn, params->start_handle, params);
   2092e:	8921      	ldrh	r1, [r4, #8]
   20930:	4622      	mov	r2, r4
   20932:	4628      	mov	r0, r5
   20934:	f7ff fed8 	bl	206e8 <gatt_discover_next>
	return;
   20938:	e7c7      	b.n	208ca <read_included_uuid_cb+0x14>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   2093a:	f7fe f8be 	bl	1eaba <bt_uuid_cmp>
   2093e:	2800      	cmp	r0, #0
   20940:	d0dc      	beq.n	208fc <read_included_uuid_cb+0x46>
   20942:	e7f4      	b.n	2092e <read_included_uuid_cb+0x78>

00020944 <gatt_find_info_rsp>:
{
   20944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20948:	b08f      	sub	sp, #60	; 0x3c
   2094a:	4680      	mov	r8, r0
   2094c:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   2094e:	b921      	cbnz	r1, 2095a <gatt_find_info_rsp+0x16>
	switch (rsp->format) {
   20950:	7810      	ldrb	r0, [r2, #0]
   20952:	2801      	cmp	r0, #1
   20954:	d007      	beq.n	20966 <gatt_find_info_rsp+0x22>
   20956:	2802      	cmp	r0, #2
   20958:	d01e      	beq.n	20998 <gatt_find_info_rsp+0x54>
	params->func(conn, NULL, params);
   2095a:	6873      	ldr	r3, [r6, #4]
   2095c:	4632      	mov	r2, r6
   2095e:	2100      	movs	r1, #0
   20960:	4640      	mov	r0, r8
   20962:	4798      	blx	r3
   20964:	e090      	b.n	20a88 <gatt_find_info_rsp+0x144>
		u.uuid.type = BT_UUID_TYPE_16;
   20966:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i16);
   2096a:	f04f 0a04 	mov.w	sl, #4
	length--;
   2096e:	3b01      	subs	r3, #1
   20970:	b29b      	uxth	r3, r3
	if (length < len) {
   20972:	4553      	cmp	r3, sl
   20974:	d3f1      	bcc.n	2095a <gatt_find_info_rsp+0x16>
	for (i = length / len, pdu = rsp->info; i != 0;
   20976:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
   2097a:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   2097e:	9300      	str	r3, [sp, #0]
   20980:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   20982:	46cb      	mov	fp, r9
			skip = false;
   20984:	464d      	mov	r5, r9
   20986:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   20988:	9b00      	ldr	r3, [sp, #0]
   2098a:	b953      	cbnz	r3, 209a2 <gatt_find_info_rsp+0x5e>
	gatt_discover_next(conn, handle, params);
   2098c:	4632      	mov	r2, r6
   2098e:	4659      	mov	r1, fp
   20990:	4640      	mov	r0, r8
   20992:	f7ff fea9 	bl	206e8 <gatt_discover_next>
	return;
   20996:	e077      	b.n	20a88 <gatt_find_info_rsp+0x144>
		u.uuid.type = BT_UUID_TYPE_128;
   20998:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i128);
   2099c:	f04f 0a12 	mov.w	sl, #18
		break;
   209a0:	e7e5      	b.n	2096e <gatt_find_info_rsp+0x2a>
		handle = sys_le16_to_cpu(info.i16->handle);
   209a2:	8823      	ldrh	r3, [r4, #0]
   209a4:	f8ad 3004 	strh.w	r3, [sp, #4]
   209a8:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
   209ac:	f1b9 0f00 	cmp.w	r9, #0
   209b0:	d156      	bne.n	20a60 <gatt_find_info_rsp+0x11c>
		switch (u.uuid.type) {
   209b2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   209b6:	2b00      	cmp	r3, #0
   209b8:	d03a      	beq.n	20a30 <gatt_find_info_rsp+0xec>
   209ba:	2b02      	cmp	r3, #2
   209bc:	d03f      	beq.n	20a3e <gatt_find_info_rsp+0xfa>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   209be:	6831      	ldr	r1, [r6, #0]
   209c0:	2900      	cmp	r1, #0
   209c2:	d148      	bne.n	20a56 <gatt_find_info_rsp+0x112>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   209c4:	7c33      	ldrb	r3, [r6, #16]
   209c6:	2b04      	cmp	r3, #4
   209c8:	d14d      	bne.n	20a66 <gatt_find_info_rsp+0x122>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   209ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   209ce:	a902      	add	r1, sp, #8
   209d0:	4638      	mov	r0, r7
   209d2:	f88d 5008 	strb.w	r5, [sp, #8]
   209d6:	f8ad 300a 	strh.w	r3, [sp, #10]
   209da:	f7fe f86e 	bl	1eaba <bt_uuid_cmp>
   209de:	b310      	cbz	r0, 20a26 <gatt_find_info_rsp+0xe2>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   209e0:	f642 0301 	movw	r3, #10241	; 0x2801
   209e4:	a903      	add	r1, sp, #12
   209e6:	4638      	mov	r0, r7
   209e8:	f88d 500c 	strb.w	r5, [sp, #12]
   209ec:	f8ad 300e 	strh.w	r3, [sp, #14]
   209f0:	f7fe f863 	bl	1eaba <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   209f4:	b1b8      	cbz	r0, 20a26 <gatt_find_info_rsp+0xe2>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   209f6:	f642 0302 	movw	r3, #10242	; 0x2802
   209fa:	a909      	add	r1, sp, #36	; 0x24
   209fc:	4638      	mov	r0, r7
   209fe:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   20a02:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   20a06:	f7fe f858 	bl	1eaba <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   20a0a:	b160      	cbz	r0, 20a26 <gatt_find_info_rsp+0xe2>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   20a0c:	f642 0303 	movw	r3, #10243	; 0x2803
   20a10:	a909      	add	r1, sp, #36	; 0x24
   20a12:	4638      	mov	r0, r7
   20a14:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   20a18:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   20a1c:	f7fe f84d 	bl	1eaba <bt_uuid_cmp>
   20a20:	bb08      	cbnz	r0, 20a66 <gatt_find_info_rsp+0x122>
				skip = true;
   20a22:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   20a26:	9b00      	ldr	r3, [sp, #0]
   20a28:	3b01      	subs	r3, #1
   20a2a:	9300      	str	r3, [sp, #0]
   20a2c:	4454      	add	r4, sl
   20a2e:	e7ab      	b.n	20988 <gatt_find_info_rsp+0x44>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   20a30:	78a3      	ldrb	r3, [r4, #2]
   20a32:	78e2      	ldrb	r2, [r4, #3]
   20a34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20a38:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   20a3c:	e7bf      	b.n	209be <gatt_find_info_rsp+0x7a>
			memcpy(u.u128.val, info.i128->uuid, 16);
   20a3e:	1ca3      	adds	r3, r4, #2
   20a40:	f10d 0211 	add.w	r2, sp, #17
   20a44:	f104 0112 	add.w	r1, r4, #18
   20a48:	f853 0b04 	ldr.w	r0, [r3], #4
   20a4c:	f842 0b04 	str.w	r0, [r2], #4
   20a50:	428b      	cmp	r3, r1
   20a52:	d1f9      	bne.n	20a48 <gatt_find_info_rsp+0x104>
   20a54:	e7b3      	b.n	209be <gatt_find_info_rsp+0x7a>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   20a56:	4638      	mov	r0, r7
   20a58:	f7fe f82f 	bl	1eaba <bt_uuid_cmp>
   20a5c:	2800      	cmp	r0, #0
   20a5e:	d0b1      	beq.n	209c4 <gatt_find_info_rsp+0x80>
			skip = false;
   20a60:	f04f 0900 	mov.w	r9, #0
   20a64:	e7df      	b.n	20a26 <gatt_find_info_rsp+0xe2>
		attr.handle = handle;
   20a66:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20a6a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   20a6e:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   20a72:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   20a76:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   20a78:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   20a7c:	4632      	mov	r2, r6
   20a7e:	a909      	add	r1, sp, #36	; 0x24
   20a80:	4640      	mov	r0, r8
   20a82:	4798      	blx	r3
   20a84:	2800      	cmp	r0, #0
   20a86:	d1ce      	bne.n	20a26 <gatt_find_info_rsp+0xe2>
}
   20a88:	b00f      	add	sp, #60	; 0x3c
   20a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00020a8e <gatt_read_rsp>:
{
   20a8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20a92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   20a94:	4606      	mov	r6, r0
   20a96:	4690      	mov	r8, r2
   20a98:	4699      	mov	r9, r3
	if (err || !length) {
   20a9a:	460f      	mov	r7, r1
   20a9c:	b901      	cbnz	r1, 20aa0 <gatt_read_rsp+0x12>
   20a9e:	b953      	cbnz	r3, 20ab6 <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   20aa0:	2300      	movs	r3, #0
   20aa2:	930a      	str	r3, [sp, #40]	; 0x28
   20aa4:	6825      	ldr	r5, [r4, #0]
   20aa6:	4622      	mov	r2, r4
   20aa8:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   20aaa:	4630      	mov	r0, r6
   20aac:	46ac      	mov	ip, r5
}
   20aae:	b003      	add	sp, #12
   20ab0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   20ab4:	4760      	bx	ip
	if (!params->handle_count) {
   20ab6:	6863      	ldr	r3, [r4, #4]
   20ab8:	2b00      	cmp	r3, #0
   20aba:	d13c      	bne.n	20b36 <gatt_read_rsp+0xa8>
	for (length--, pdu = rsp->data; length;
   20abc:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
   20ac0:	b2ad      	uxth	r5, r5
   20ac2:	f102 0901 	add.w	r9, r2, #1
   20ac6:	b1d5      	cbz	r5, 20afe <gatt_read_rsp+0x70>
		handle = sys_le16_to_cpu(data->handle);
   20ac8:	f8b9 2000 	ldrh.w	r2, [r9]
   20acc:	b293      	uxth	r3, r2
		if (!handle) {
   20ace:	2b00      	cmp	r3, #0
   20ad0:	d050      	beq.n	20b74 <gatt_read_rsp+0xe6>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   20ad2:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
   20ad6:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   20ad8:	42ab      	cmp	r3, r5
   20ada:	bf8c      	ite	hi
   20adc:	1eab      	subhi	r3, r5, #2
   20ade:	3b02      	subls	r3, #2
   20ae0:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
   20ae2:	9300      	str	r3, [sp, #0]
   20ae4:	6827      	ldr	r7, [r4, #0]
   20ae6:	f109 0302 	add.w	r3, r9, #2
   20aea:	4622      	mov	r2, r4
   20aec:	2100      	movs	r1, #0
   20aee:	4630      	mov	r0, r6
   20af0:	47b8      	blx	r7
   20af2:	2800      	cmp	r0, #0
   20af4:	d03e      	beq.n	20b74 <gatt_read_rsp+0xe6>
		if (rsp->len > length) {
   20af6:	f898 1000 	ldrb.w	r1, [r8]
   20afa:	428d      	cmp	r5, r1
   20afc:	d20b      	bcs.n	20b16 <gatt_read_rsp+0x88>
	if (bt_gatt_read(conn, params) < 0) {
   20afe:	4621      	mov	r1, r4
   20b00:	4630      	mov	r0, r6
   20b02:	f7e8 f87b 	bl	8bfc <bt_gatt_read>
   20b06:	2800      	cmp	r0, #0
   20b08:	da34      	bge.n	20b74 <gatt_read_rsp+0xe6>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   20b0a:	2300      	movs	r3, #0
   20b0c:	930a      	str	r3, [sp, #40]	; 0x28
   20b0e:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   20b10:	4622      	mov	r2, r4
   20b12:	210e      	movs	r1, #14
   20b14:	e7c9      	b.n	20aaa <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   20b16:	8922      	ldrh	r2, [r4, #8]
   20b18:	8960      	ldrh	r0, [r4, #10]
   20b1a:	4290      	cmp	r0, r2
   20b1c:	d105      	bne.n	20b2a <gatt_read_rsp+0x9c>
			params->func(conn, 0, params, NULL, 0);
   20b1e:	2300      	movs	r3, #0
   20b20:	930a      	str	r3, [sp, #40]	; 0x28
   20b22:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   20b24:	4622      	mov	r2, r4
   20b26:	4619      	mov	r1, r3
   20b28:	e7bf      	b.n	20aaa <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   20b2a:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   20b2c:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
   20b2e:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   20b30:	b2ad      	uxth	r5, r5
   20b32:	4489      	add	r9, r1
   20b34:	e7c7      	b.n	20ac6 <gatt_read_rsp+0x38>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   20b36:	f8cd 9000 	str.w	r9, [sp]
   20b3a:	4613      	mov	r3, r2
   20b3c:	6825      	ldr	r5, [r4, #0]
   20b3e:	4622      	mov	r2, r4
   20b40:	47a8      	blx	r5
   20b42:	b1b8      	cbz	r0, 20b74 <gatt_read_rsp+0xe6>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   20b44:	4630      	mov	r0, r6
   20b46:	f7ff f960 	bl	1fe0a <bt_att_get_mtu>
   20b4a:	3801      	subs	r0, #1
   20b4c:	4581      	cmp	r9, r0
   20b4e:	da03      	bge.n	20b58 <gatt_read_rsp+0xca>
		params->func(conn, 0, params, NULL, 0);
   20b50:	970a      	str	r7, [sp, #40]	; 0x28
   20b52:	6825      	ldr	r5, [r4, #0]
   20b54:	463b      	mov	r3, r7
   20b56:	e7e5      	b.n	20b24 <gatt_read_rsp+0x96>
	params->single.offset += length;
   20b58:	8963      	ldrh	r3, [r4, #10]
   20b5a:	eb09 0503 	add.w	r5, r9, r3
   20b5e:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   20b60:	4621      	mov	r1, r4
   20b62:	4630      	mov	r0, r6
   20b64:	f7e8 f84a 	bl	8bfc <bt_gatt_read>
   20b68:	2800      	cmp	r0, #0
   20b6a:	da03      	bge.n	20b74 <gatt_read_rsp+0xe6>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   20b6c:	970a      	str	r7, [sp, #40]	; 0x28
   20b6e:	6825      	ldr	r5, [r4, #0]
   20b70:	463b      	mov	r3, r7
   20b72:	e7cd      	b.n	20b10 <gatt_read_rsp+0x82>
}
   20b74:	b003      	add	sp, #12
   20b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00020b7a <bt_gatt_unsubscribe>:
{
   20b7a:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   20b7e:	7a83      	ldrb	r3, [r0, #10]
   20b80:	2b07      	cmp	r3, #7
{
   20b82:	4681      	mov	r9, r0
   20b84:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   20b86:	d16e      	bne.n	20c66 <bt_gatt_unsubscribe+0xec>
	sub = gatt_sub_find(conn);
   20b88:	f7e7 fadc 	bl	8144 <gatt_sub_find>
	if (!sub) {
   20b8c:	4607      	mov	r7, r0
   20b8e:	b920      	cbnz	r0, 20b9a <bt_gatt_unsubscribe+0x20>
		return -EINVAL;
   20b90:	f06f 0015 	mvn.w	r0, #21
}
   20b94:	b001      	add	sp, #4
   20b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   20b9a:	6884      	ldr	r4, [r0, #8]
   20b9c:	b1cc      	cbz	r4, 20bd2 <bt_gatt_unsubscribe+0x58>
   20b9e:	f1b4 0514 	subs.w	r5, r4, #20
   20ba2:	d018      	beq.n	20bd6 <bt_gatt_unsubscribe+0x5c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20ba4:	6824      	ldr	r4, [r4, #0]
   20ba6:	b104      	cbz	r4, 20baa <bt_gatt_unsubscribe+0x30>
   20ba8:	3c14      	subs	r4, #20
   20baa:	f04f 0800 	mov.w	r8, #0
   20bae:	46c3      	mov	fp, r8
   20bb0:	46c2      	mov	sl, r8
	parent->next = child;
   20bb2:	4642      	mov	r2, r8
   20bb4:	b98d      	cbnz	r5, 20bda <bt_gatt_unsubscribe+0x60>
	if (!found) {
   20bb6:	f1bb 0f00 	cmp.w	fp, #0
   20bba:	d0e9      	beq.n	20b90 <bt_gatt_unsubscribe+0x16>
	if (has_subscription) {
   20bbc:	f1ba 0f00 	cmp.w	sl, #0
   20bc0:	d046      	beq.n	20c50 <bt_gatt_unsubscribe+0xd6>
		params->notify(conn, params, NULL, 0);
   20bc2:	6834      	ldr	r4, [r6, #0]
   20bc4:	462b      	mov	r3, r5
   20bc6:	462a      	mov	r2, r5
   20bc8:	4631      	mov	r1, r6
   20bca:	4648      	mov	r0, r9
   20bcc:	47a0      	blx	r4
		return 0;
   20bce:	4628      	mov	r0, r5
   20bd0:	e7e0      	b.n	20b94 <bt_gatt_unsubscribe+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   20bd2:	4625      	mov	r5, r4
   20bd4:	e7e9      	b.n	20baa <bt_gatt_unsubscribe+0x30>
   20bd6:	462c      	mov	r4, r5
   20bd8:	e7e7      	b.n	20baa <bt_gatt_unsubscribe+0x30>
		if (params == tmp) {
   20bda:	42b5      	cmp	r5, r6
   20bdc:	f105 0114 	add.w	r1, r5, #20
   20be0:	d129      	bne.n	20c36 <bt_gatt_unsubscribe+0xbc>
Z_GENLIST_REMOVE(slist, snode)
   20be2:	6968      	ldr	r0, [r5, #20]
   20be4:	f1b8 0f00 	cmp.w	r8, #0
   20be8:	d11d      	bne.n	20c26 <bt_gatt_unsubscribe+0xac>
   20bea:	68fb      	ldr	r3, [r7, #12]
	list->head = node;
   20bec:	60b8      	str	r0, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   20bee:	4299      	cmp	r1, r3
   20bf0:	d100      	bne.n	20bf4 <bt_gatt_unsubscribe+0x7a>
	list->tail = node;
   20bf2:	60f8      	str	r0, [r7, #12]
	parent->next = child;
   20bf4:	616a      	str	r2, [r5, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20bf6:	f3bf 8f5b 	dmb	ish
   20bfa:	6933      	ldr	r3, [r6, #16]
   20bfc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20c00:	f3c3 0b80 	ubfx	fp, r3, #2, #1
			if (atomic_test_bit(params->flags,
   20c04:	075b      	lsls	r3, r3, #29
   20c06:	d51e      	bpl.n	20c46 <bt_gatt_unsubscribe+0xcc>
	bt_att_req_cancel(conn, params);
   20c08:	4631      	mov	r1, r6
   20c0a:	4648      	mov	r0, r9
   20c0c:	f7e7 f95c 	bl	7ec8 <bt_att_req_cancel>
}
   20c10:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   20c12:	b1dc      	cbz	r4, 20c4c <bt_gatt_unsubscribe+0xd2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20c14:	f114 0314 	adds.w	r3, r4, #20
   20c18:	d002      	beq.n	20c20 <bt_gatt_unsubscribe+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c1a:	6963      	ldr	r3, [r4, #20]
   20c1c:	b103      	cbz	r3, 20c20 <bt_gatt_unsubscribe+0xa6>
   20c1e:	3b14      	subs	r3, #20
   20c20:	4625      	mov	r5, r4
   20c22:	461c      	mov	r4, r3
   20c24:	e7c6      	b.n	20bb4 <bt_gatt_unsubscribe+0x3a>
	parent->next = child;
   20c26:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   20c2a:	68fb      	ldr	r3, [r7, #12]
   20c2c:	4299      	cmp	r1, r3
	list->tail = node;
   20c2e:	bf08      	it	eq
   20c30:	f8c7 800c 	streq.w	r8, [r7, #12]
}
   20c34:	e7de      	b.n	20bf4 <bt_gatt_unsubscribe+0x7a>
		if (tmp->value_handle == params->value_handle) {
   20c36:	8928      	ldrh	r0, [r5, #8]
   20c38:	8933      	ldrh	r3, [r6, #8]
   20c3a:	4688      	mov	r8, r1
   20c3c:	4298      	cmp	r0, r3
   20c3e:	bf08      	it	eq
   20c40:	f04f 0a01 	moveq.w	sl, #1
   20c44:	e7e5      	b.n	20c12 <bt_gatt_unsubscribe+0x98>
			found = true;
   20c46:	f04f 0b01 	mov.w	fp, #1
   20c4a:	e7e2      	b.n	20c12 <bt_gatt_unsubscribe+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   20c4c:	4623      	mov	r3, r4
   20c4e:	e7e7      	b.n	20c20 <bt_gatt_unsubscribe+0xa6>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   20c50:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   20c52:	f8a6 a00c 	strh.w	sl, [r6, #12]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   20c56:	4633      	mov	r3, r6
   20c58:	4652      	mov	r2, sl
   20c5a:	4648      	mov	r0, r9
}
   20c5c:	b001      	add	sp, #4
   20c5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   20c62:	f7e7 bad3 	b.w	820c <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   20c66:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   20c6a:	e793      	b.n	20b94 <bt_gatt_unsubscribe+0x1a>

00020c6c <bt_gatt_notification>:
{
   20c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20c70:	4607      	mov	r7, r0
   20c72:	4688      	mov	r8, r1
   20c74:	4691      	mov	r9, r2
   20c76:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   20c78:	f7e7 fa64 	bl	8144 <gatt_sub_find>
	if (!sub) {
   20c7c:	b1f8      	cbz	r0, 20cbe <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   20c7e:	6883      	ldr	r3, [r0, #8]
   20c80:	b1eb      	cbz	r3, 20cbe <bt_gatt_notification+0x52>
   20c82:	f1b3 0614 	subs.w	r6, r3, #20
   20c86:	d01a      	beq.n	20cbe <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c88:	681c      	ldr	r4, [r3, #0]
   20c8a:	b104      	cbz	r4, 20c8e <bt_gatt_notification+0x22>
   20c8c:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   20c8e:	8933      	ldrh	r3, [r6, #8]
   20c90:	4543      	cmp	r3, r8
   20c92:	d10a      	bne.n	20caa <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   20c94:	6835      	ldr	r5, [r6, #0]
   20c96:	4653      	mov	r3, sl
   20c98:	464a      	mov	r2, r9
   20c9a:	4631      	mov	r1, r6
   20c9c:	4638      	mov	r0, r7
   20c9e:	47a8      	blx	r5
   20ca0:	b918      	cbnz	r0, 20caa <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   20ca2:	4631      	mov	r1, r6
   20ca4:	4638      	mov	r0, r7
   20ca6:	f7ff ff68 	bl	20b7a <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   20caa:	b144      	cbz	r4, 20cbe <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20cac:	f114 0514 	adds.w	r5, r4, #20
   20cb0:	d002      	beq.n	20cb8 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20cb2:	6965      	ldr	r5, [r4, #20]
   20cb4:	b105      	cbz	r5, 20cb8 <bt_gatt_notification+0x4c>
   20cb6:	3d14      	subs	r5, #20
{
   20cb8:	4626      	mov	r6, r4
   20cba:	462c      	mov	r4, r5
   20cbc:	e7e7      	b.n	20c8e <bt_gatt_notification+0x22>
}
   20cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020cc2 <bt_gatt_mult_notification>:
{
   20cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cc6:	b085      	sub	sp, #20
   20cc8:	4681      	mov	r9, r0
   20cca:	460c      	mov	r4, r1
   20ccc:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   20cce:	f7e7 fa39 	bl	8144 <gatt_sub_find>
	if (!sub) {
   20cd2:	4607      	mov	r7, r0
   20cd4:	b140      	cbz	r0, 20ce8 <bt_gatt_mult_notification+0x26>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   20cd6:	462a      	mov	r2, r5
   20cd8:	4621      	mov	r1, r4
   20cda:	a801      	add	r0, sp, #4
   20cdc:	f000 f885 	bl	20dea <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   20ce0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   20ce4:	2b04      	cmp	r3, #4
   20ce6:	d802      	bhi.n	20cee <bt_gatt_mult_notification+0x2c>
}
   20ce8:	b005      	add	sp, #20
   20cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   20cee:	2104      	movs	r1, #4
   20cf0:	eb0d 0001 	add.w	r0, sp, r1
   20cf4:	f000 f8e8 	bl	20ec8 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   20cf8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   20cfc:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		if (len > buf.len) {
   20d00:	455b      	cmp	r3, fp
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   20d02:	4605      	mov	r5, r0
		if (len > buf.len) {
   20d04:	d3f0      	bcc.n	20ce8 <bt_gatt_mult_notification+0x26>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   20d06:	68bb      	ldr	r3, [r7, #8]
   20d08:	b303      	cbz	r3, 20d4c <bt_gatt_mult_notification+0x8a>
   20d0a:	f1b3 0614 	subs.w	r6, r3, #20
   20d0e:	d01d      	beq.n	20d4c <bt_gatt_mult_notification+0x8a>
   20d10:	681c      	ldr	r4, [r3, #0]
   20d12:	b104      	cbz	r4, 20d16 <bt_gatt_mult_notification+0x54>
   20d14:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   20d16:	46a8      	mov	r8, r5
   20d18:	f838 ab04 	ldrh.w	sl, [r8], #4
			if (handle != params->value_handle) {
   20d1c:	8933      	ldrh	r3, [r6, #8]
   20d1e:	4553      	cmp	r3, sl
   20d20:	d10a      	bne.n	20d38 <bt_gatt_mult_notification+0x76>
			if (params->notify(conn, params, nfy->value, len) ==
   20d22:	6835      	ldr	r5, [r6, #0]
   20d24:	465b      	mov	r3, fp
   20d26:	4642      	mov	r2, r8
   20d28:	4631      	mov	r1, r6
   20d2a:	4648      	mov	r0, r9
   20d2c:	47a8      	blx	r5
   20d2e:	b918      	cbnz	r0, 20d38 <bt_gatt_mult_notification+0x76>
				bt_gatt_unsubscribe(conn, params);
   20d30:	4631      	mov	r1, r6
   20d32:	4648      	mov	r0, r9
   20d34:	f7ff ff21 	bl	20b7a <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   20d38:	b144      	cbz	r4, 20d4c <bt_gatt_mult_notification+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20d3a:	f114 0214 	adds.w	r2, r4, #20
   20d3e:	d002      	beq.n	20d46 <bt_gatt_mult_notification+0x84>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20d40:	6962      	ldr	r2, [r4, #20]
   20d42:	b102      	cbz	r2, 20d46 <bt_gatt_mult_notification+0x84>
   20d44:	3a14      	subs	r2, #20
{
   20d46:	4626      	mov	r6, r4
   20d48:	4614      	mov	r4, r2
   20d4a:	e7e7      	b.n	20d1c <bt_gatt_mult_notification+0x5a>
		net_buf_simple_pull_mem(&buf, len);
   20d4c:	4659      	mov	r1, fp
   20d4e:	a801      	add	r0, sp, #4
   20d50:	f000 f8ba 	bl	20ec8 <net_buf_simple_pull_mem>
   20d54:	e7c4      	b.n	20ce0 <bt_gatt_mult_notification+0x1e>

00020d56 <bt_gatt_change_aware>:
}
   20d56:	2001      	movs	r0, #1
   20d58:	4770      	bx	lr

00020d5a <bt_smp_recv>:
{
   20d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   20d5c:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   20d5e:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   20d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20d68:	4608      	mov	r0, r1
   20d6a:	f7fe fbb6 	bl	1f4da <bt_l2cap_create_pdu_timeout>
	hdr = net_buf_add(buf, sizeof(*hdr));
   20d6e:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
   20d72:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   20d74:	2101      	movs	r1, #1
   20d76:	4630      	mov	r0, r6
   20d78:	f000 f874 	bl	20e64 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   20d7c:	2505      	movs	r5, #5
   20d7e:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
   20d80:	2101      	movs	r1, #1
   20d82:	4630      	mov	r0, r6
   20d84:	f000 f86e 	bl	20e64 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   20d88:	7005      	strb	r5, [r0, #0]
   20d8a:	2500      	movs	r5, #0
   20d8c:	9500      	str	r5, [sp, #0]
   20d8e:	462b      	mov	r3, r5
   20d90:	4622      	mov	r2, r4
   20d92:	2106      	movs	r1, #6
   20d94:	4638      	mov	r0, r7
   20d96:	f7fe fba3 	bl	1f4e0 <bt_l2cap_send_cb>
}
   20d9a:	4628      	mov	r0, r5
   20d9c:	b003      	add	sp, #12
   20d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020da0 <bt_smp_sign>:
   20da0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20da4:	4770      	bx	lr

00020da6 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   20da6:	2000      	movs	r0, #0
   20da8:	4770      	bx	lr

00020daa <fixed_data_unref>:
}
   20daa:	4770      	bx	lr

00020dac <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20dac:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   20dae:	6849      	ldr	r1, [r1, #4]
   20db0:	6809      	ldr	r1, [r1, #0]
   20db2:	f7f3 bc4d 	b.w	14650 <net_buf_alloc_len>

00020db6 <net_buf_get>:
{
   20db6:	b570      	push	{r4, r5, r6, lr}
   20db8:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   20dba:	f7f9 fd1f 	bl	1a7fc <z_impl_k_queue_get>
	if (!buf) {
   20dbe:	4605      	mov	r5, r0
   20dc0:	b128      	cbz	r0, 20dce <net_buf_get+0x18>
   20dc2:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   20dc4:	7963      	ldrb	r3, [r4, #5]
   20dc6:	f013 0301 	ands.w	r3, r3, #1
   20dca:	d102      	bne.n	20dd2 <net_buf_get+0x1c>
	frag->frags = NULL;
   20dcc:	6023      	str	r3, [r4, #0]
}
   20dce:	4628      	mov	r0, r5
   20dd0:	bd70      	pop	{r4, r5, r6, pc}
   20dd2:	2300      	movs	r3, #0
   20dd4:	2200      	movs	r2, #0
   20dd6:	4630      	mov	r0, r6
   20dd8:	f7f9 fd10 	bl	1a7fc <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   20ddc:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   20dde:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   20de0:	f023 0301 	bic.w	r3, r3, #1
   20de4:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   20de6:	4604      	mov	r4, r0
   20de8:	e7ec      	b.n	20dc4 <net_buf_get+0xe>

00020dea <net_buf_simple_init_with_data>:
	buf->size  = size;
   20dea:	b292      	uxth	r2, r2
	buf->__buf = data;
   20dec:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   20dee:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   20df0:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   20df2:	8082      	strh	r2, [r0, #4]
}
   20df4:	4770      	bx	lr

00020df6 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   20df6:	6883      	ldr	r3, [r0, #8]
   20df8:	440b      	add	r3, r1
   20dfa:	6003      	str	r3, [r0, #0]
}
   20dfc:	4770      	bx	lr

00020dfe <net_buf_put>:
{
   20dfe:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   20e00:	460a      	mov	r2, r1
   20e02:	6814      	ldr	r4, [r2, #0]
   20e04:	b914      	cbnz	r4, 20e0c <net_buf_put+0xe>
}
   20e06:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   20e08:	f005 ba2c 	b.w	26264 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   20e0c:	7953      	ldrb	r3, [r2, #5]
   20e0e:	f043 0301 	orr.w	r3, r3, #1
   20e12:	7153      	strb	r3, [r2, #5]
   20e14:	4622      	mov	r2, r4
   20e16:	e7f4      	b.n	20e02 <net_buf_put+0x4>

00020e18 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   20e18:	7902      	ldrb	r2, [r0, #4]
   20e1a:	3201      	adds	r2, #1
   20e1c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   20e1e:	4770      	bx	lr

00020e20 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   20e20:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   20e22:	4618      	mov	r0, r3
   20e24:	681b      	ldr	r3, [r3, #0]
   20e26:	2b00      	cmp	r3, #0
   20e28:	d1fb      	bne.n	20e22 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   20e2a:	4770      	bx	lr

00020e2c <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   20e2c:	6802      	ldr	r2, [r0, #0]
{
   20e2e:	b510      	push	{r4, lr}
	if (parent->frags) {
   20e30:	b12a      	cbz	r2, 20e3e <net_buf_frag_insert+0x12>
   20e32:	460b      	mov	r3, r1
	while (buf->frags) {
   20e34:	461c      	mov	r4, r3
   20e36:	681b      	ldr	r3, [r3, #0]
   20e38:	2b00      	cmp	r3, #0
   20e3a:	d1fb      	bne.n	20e34 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   20e3c:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   20e3e:	6001      	str	r1, [r0, #0]
}
   20e40:	bd10      	pop	{r4, pc}

00020e42 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   20e42:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   20e44:	4604      	mov	r4, r0
   20e46:	b920      	cbnz	r0, 20e52 <net_buf_frag_add+0x10>
	buf->ref++;
   20e48:	790b      	ldrb	r3, [r1, #4]
   20e4a:	3301      	adds	r3, #1
   20e4c:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   20e4e:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   20e50:	bd10      	pop	{r4, pc}
   20e52:	4603      	mov	r3, r0
	while (buf->frags) {
   20e54:	4618      	mov	r0, r3
   20e56:	681b      	ldr	r3, [r3, #0]
   20e58:	2b00      	cmp	r3, #0
   20e5a:	d1fb      	bne.n	20e54 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   20e5c:	f7ff ffe6 	bl	20e2c <net_buf_frag_insert>
   20e60:	4620      	mov	r0, r4
   20e62:	e7f5      	b.n	20e50 <net_buf_frag_add+0xe>

00020e64 <net_buf_simple_add>:
	return buf->data + buf->len;
   20e64:	8883      	ldrh	r3, [r0, #4]
   20e66:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   20e68:	4419      	add	r1, r3
   20e6a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   20e6c:	18d0      	adds	r0, r2, r3
   20e6e:	4770      	bx	lr

00020e70 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   20e70:	b510      	push	{r4, lr}
   20e72:	6803      	ldr	r3, [r0, #0]
   20e74:	8884      	ldrh	r4, [r0, #4]
   20e76:	4423      	add	r3, r4
	buf->len += len;
   20e78:	4414      	add	r4, r2
   20e7a:	8084      	strh	r4, [r0, #4]
   20e7c:	4618      	mov	r0, r3
   20e7e:	f005 fde4 	bl	26a4a <memcpy>
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   20e82:	bd10      	pop	{r4, pc}

00020e84 <net_buf_simple_add_u8>:
   20e84:	8883      	ldrh	r3, [r0, #4]
   20e86:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   20e88:	b510      	push	{r4, lr}
	buf->len += len;
   20e8a:	1c5c      	adds	r4, r3, #1
   20e8c:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   20e8e:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   20e90:	18d0      	adds	r0, r2, r3
   20e92:	bd10      	pop	{r4, pc}

00020e94 <net_buf_simple_add_le16>:
   20e94:	8883      	ldrh	r3, [r0, #4]
   20e96:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   20e98:	b530      	push	{r4, r5, lr}
   20e9a:	18d4      	adds	r4, r2, r3
	buf->len += len;
   20e9c:	1c9d      	adds	r5, r3, #2
   20e9e:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   20ea0:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   20ea2:	0a09      	lsrs	r1, r1, #8
   20ea4:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   20ea6:	bd30      	pop	{r4, r5, pc}

00020ea8 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   20ea8:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   20eaa:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   20eac:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   20eae:	1a40      	subs	r0, r0, r1
	buf->len += len;
   20eb0:	4411      	add	r1, r2
	buf->data -= len;
   20eb2:	6018      	str	r0, [r3, #0]
	buf->len += len;
   20eb4:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   20eb6:	4770      	bx	lr

00020eb8 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   20eb8:	8882      	ldrh	r2, [r0, #4]
   20eba:	1a52      	subs	r2, r2, r1
{
   20ebc:	4603      	mov	r3, r0
	buf->len -= len;
   20ebe:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   20ec0:	6800      	ldr	r0, [r0, #0]
   20ec2:	4408      	add	r0, r1
   20ec4:	6018      	str	r0, [r3, #0]
}
   20ec6:	4770      	bx	lr

00020ec8 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   20ec8:	4603      	mov	r3, r0
	void *data = buf->data;
   20eca:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   20ecc:	889a      	ldrh	r2, [r3, #4]
   20ece:	1a52      	subs	r2, r2, r1
	buf->data += len;
   20ed0:	4401      	add	r1, r0
	buf->len -= len;
   20ed2:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   20ed4:	6019      	str	r1, [r3, #0]

	return data;
}
   20ed6:	4770      	bx	lr

00020ed8 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   20ed8:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   20eda:	6803      	ldr	r3, [r0, #0]
   20edc:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   20ede:	2102      	movs	r1, #2
   20ee0:	f7ff ffea 	bl	20eb8 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   20ee4:	4620      	mov	r0, r4
   20ee6:	bd10      	pop	{r4, pc}

00020ee8 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   20ee8:	6802      	ldr	r2, [r0, #0]
   20eea:	6880      	ldr	r0, [r0, #8]
}
   20eec:	1a10      	subs	r0, r2, r0
   20eee:	4770      	bx	lr

00020ef0 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   20ef0:	8883      	ldrh	r3, [r0, #4]
   20ef2:	88c2      	ldrh	r2, [r0, #6]
   20ef4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   20ef6:	6803      	ldr	r3, [r0, #0]
   20ef8:	6880      	ldr	r0, [r0, #8]
   20efa:	1a18      	subs	r0, r3, r0
}
   20efc:	1a10      	subs	r0, r2, r0
   20efe:	4770      	bx	lr

00020f00 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   20f00:	f000 001f 	and.w	r0, r0, #31
   20f04:	0080      	lsls	r0, r0, #2
   20f06:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   20f0a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   20f0e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   20f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   20f16:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   20f1a:	4770      	bx	lr

00020f1c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20f1c:	6843      	ldr	r3, [r0, #4]
   20f1e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   20f20:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   20f24:	600b      	str	r3, [r1, #0]
}
   20f26:	2000      	movs	r0, #0
   20f28:	4770      	bx	lr

00020f2a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20f2a:	6843      	ldr	r3, [r0, #4]
   20f2c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   20f2e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   20f32:	4042      	eors	r2, r0
   20f34:	400a      	ands	r2, r1
   20f36:	4042      	eors	r2, r0
    p_reg->OUT = value;
   20f38:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   20f3c:	2000      	movs	r0, #0
   20f3e:	4770      	bx	lr

00020f40 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20f40:	6843      	ldr	r3, [r0, #4]
   20f42:	685b      	ldr	r3, [r3, #4]
}
   20f44:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   20f46:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   20f4a:	4770      	bx	lr

00020f4c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20f4c:	6843      	ldr	r3, [r0, #4]
   20f4e:	685b      	ldr	r3, [r3, #4]
}
   20f50:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   20f52:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   20f56:	4770      	bx	lr

00020f58 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20f58:	6843      	ldr	r3, [r0, #4]
   20f5a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   20f5c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   20f60:	404b      	eors	r3, r1
    p_reg->OUT = value;
   20f62:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   20f66:	2000      	movs	r0, #0
   20f68:	4770      	bx	lr

00020f6a <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20f6a:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   20f6c:	6858      	ldr	r0, [r3, #4]
{
   20f6e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   20f70:	b158      	cbz	r0, 20f8a <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20f72:	2400      	movs	r4, #0
   20f74:	4281      	cmp	r1, r0
   20f76:	d113      	bne.n	20fa0 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   20f78:	6808      	ldr	r0, [r1, #0]
   20f7a:	b95c      	cbnz	r4, 20f94 <gpio_nrfx_manage_callback+0x2a>
   20f7c:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   20f7e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   20f80:	42a1      	cmp	r1, r4
   20f82:	d100      	bne.n	20f86 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   20f84:	6098      	str	r0, [r3, #8]
	parent->next = child;
   20f86:	2000      	movs	r0, #0
   20f88:	6008      	str	r0, [r1, #0]
	if (set) {
   20f8a:	b972      	cbnz	r2, 20faa <gpio_nrfx_manage_callback+0x40>
	return 0;
   20f8c:	2000      	movs	r0, #0
}
   20f8e:	bd30      	pop	{r4, r5, pc}
   20f90:	4628      	mov	r0, r5
   20f92:	e7ef      	b.n	20f74 <gpio_nrfx_manage_callback+0xa>
   20f94:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   20f96:	6898      	ldr	r0, [r3, #8]
   20f98:	4281      	cmp	r1, r0
	list->tail = node;
   20f9a:	bf08      	it	eq
   20f9c:	609c      	streq	r4, [r3, #8]
}
   20f9e:	e7f2      	b.n	20f86 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20fa0:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20fa2:	4604      	mov	r4, r0
   20fa4:	2d00      	cmp	r5, #0
   20fa6:	d1f3      	bne.n	20f90 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   20fa8:	b13a      	cbz	r2, 20fba <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   20faa:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   20fac:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   20fae:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   20fb0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   20fb2:	2800      	cmp	r0, #0
   20fb4:	d1ea      	bne.n	20f8c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   20fb6:	6099      	str	r1, [r3, #8]
}
   20fb8:	e7e9      	b.n	20f8e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   20fba:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20fbe:	e7e6      	b.n	20f8e <gpio_nrfx_manage_callback+0x24>

00020fc0 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   20fc0:	2301      	movs	r3, #1
   20fc2:	fa03 f101 	lsl.w	r1, r3, r1
   20fc6:	68c3      	ldr	r3, [r0, #12]
   20fc8:	681b      	ldr	r3, [r3, #0]
   20fca:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   20fcc:	bf18      	it	ne
   20fce:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   20fd2:	b112      	cbz	r2, 20fda <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   20fd4:	6883      	ldr	r3, [r0, #8]
   20fd6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   20fd8:	4718      	bx	r3
   20fda:	6883      	ldr	r3, [r0, #8]
   20fdc:	691b      	ldr	r3, [r3, #16]
   20fde:	e7fb      	b.n	20fd8 <gpio_pin_set+0x18>

00020fe0 <spi_nrfx_pm_control>:

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
static int spi_nrfx_pm_control(const struct device *dev,
				uint32_t ctrl_command,
				void *context, device_pm_cb cb, void *arg)
{
   20fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int ret = 0;
	struct spi_nrfx_data *data = get_dev_data(dev);
   20fe4:	f8d0 900c 	ldr.w	r9, [r0, #12]
	const struct spi_nrfx_config *config = get_dev_config(dev);

	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   20fe8:	2901      	cmp	r1, #1
{
   20fea:	4698      	mov	r8, r3
   20fec:	4605      	mov	r5, r0
   20fee:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
   20ff2:	4616      	mov	r6, r2
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   20ff4:	d128      	bne.n	21048 <spi_nrfx_pm_control+0x68>
		uint32_t new_state = *((const uint32_t *)context);
   20ff6:	6817      	ldr	r7, [r2, #0]

		if (new_state != data->pm_state) {
   20ff8:	429f      	cmp	r7, r3
   20ffa:	d023      	beq.n	21044 <spi_nrfx_pm_control+0x64>
			switch (new_state) {
   20ffc:	2f03      	cmp	r7, #3
   20ffe:	d80f      	bhi.n	21020 <spi_nrfx_pm_control+0x40>
   21000:	2f01      	cmp	r7, #1
   21002:	d80f      	bhi.n	21024 <spi_nrfx_pm_control+0x44>
   21004:	d014      	beq.n	21030 <spi_nrfx_pm_control+0x50>
   21006:	f06f 0485 	mvn.w	r4, #133	; 0x85
	} else {
		__ASSERT_NO_MSG(ctrl_command == DEVICE_PM_GET_POWER_STATE);
		*((uint32_t *)context) = data->pm_state;
	}

	if (cb) {
   2100a:	f1b8 0f00 	cmp.w	r8, #0
   2100e:	d004      	beq.n	2101a <spi_nrfx_pm_control+0x3a>
		cb(dev, ret, context, arg);
   21010:	9b08      	ldr	r3, [sp, #32]
   21012:	4632      	mov	r2, r6
   21014:	4621      	mov	r1, r4
   21016:	4628      	mov	r0, r5
   21018:	47c0      	blx	r8
	}

	return ret;
}
   2101a:	4620      	mov	r0, r4
   2101c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			switch (new_state) {
   21020:	2f05      	cmp	r7, #5
   21022:	d1f0      	bne.n	21006 <spi_nrfx_pm_control+0x26>
				if (data->pm_state == DEVICE_PM_ACTIVE_STATE) {
   21024:	2b01      	cmp	r3, #1
   21026:	d10b      	bne.n	21040 <spi_nrfx_pm_control+0x60>
					nrfx_spi_uninit(&config->spi);
   21028:	6868      	ldr	r0, [r5, #4]
   2102a:	f7f4 fd73 	bl	15b14 <nrfx_spi_uninit>
			if (!ret) {
   2102e:	e007      	b.n	21040 <spi_nrfx_pm_control+0x60>
				ret = init_spi(dev);
   21030:	f7f3 fe38 	bl	14ca4 <init_spi>
				data->ctx.config = NULL;
   21034:	2300      	movs	r3, #0
   21036:	f8c9 3000 	str.w	r3, [r9]
			if (!ret) {
   2103a:	4604      	mov	r4, r0
   2103c:	2800      	cmp	r0, #0
   2103e:	d1e4      	bne.n	2100a <spi_nrfx_pm_control+0x2a>
				data->pm_state = new_state;
   21040:	f8c9 7068 	str.w	r7, [r9, #104]	; 0x68
	int ret = 0;
   21044:	2400      	movs	r4, #0
   21046:	e7e0      	b.n	2100a <spi_nrfx_pm_control+0x2a>
		*((uint32_t *)context) = data->pm_state;
   21048:	6013      	str	r3, [r2, #0]
   2104a:	e7fb      	b.n	21044 <spi_nrfx_pm_control+0x64>

0002104c <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   2104c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2104e:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   21050:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   21052:	b1fd      	cbz	r5, 21094 <_spi_context_cs_control.isra.0+0x48>
   21054:	68ab      	ldr	r3, [r5, #8]
   21056:	b1eb      	cbz	r3, 21094 <_spi_context_cs_control.isra.0+0x48>
   21058:	6818      	ldr	r0, [r3, #0]
   2105a:	b1d8      	cbz	r0, 21094 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   2105c:	b151      	cbz	r1, 21074 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2105e:	7a19      	ldrb	r1, [r3, #8]
   21060:	2201      	movs	r2, #1
   21062:	f7ff ffad 	bl	20fc0 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   21066:	6823      	ldr	r3, [r4, #0]
   21068:	689b      	ldr	r3, [r3, #8]
   2106a:	6858      	ldr	r0, [r3, #4]
}
   2106c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   21070:	f005 ba45 	b.w	264fe <z_impl_k_busy_wait>
			if (!force_off &&
   21074:	b912      	cbnz	r2, 2107c <_spi_context_cs_control.isra.0+0x30>
   21076:	88aa      	ldrh	r2, [r5, #4]
   21078:	0492      	lsls	r2, r2, #18
   2107a:	d40b      	bmi.n	21094 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   2107c:	6858      	ldr	r0, [r3, #4]
   2107e:	f005 fa3e 	bl	264fe <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   21082:	6823      	ldr	r3, [r4, #0]
   21084:	689b      	ldr	r3, [r3, #8]
   21086:	2200      	movs	r2, #0
   21088:	7a19      	ldrb	r1, [r3, #8]
   2108a:	6818      	ldr	r0, [r3, #0]
}
   2108c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   21090:	f7ff bf96 	b.w	20fc0 <gpio_pin_set>
}
   21094:	bd38      	pop	{r3, r4, r5, pc}

00021096 <spi_context_unlock_unconditionally>:
{
   21096:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   21098:	2201      	movs	r2, #1
   2109a:	2100      	movs	r1, #0
{
   2109c:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2109e:	f7ff ffd5 	bl	2104c <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   210a2:	6923      	ldr	r3, [r4, #16]
   210a4:	b933      	cbnz	r3, 210b4 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   210a6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   210a8:	f104 0008 	add.w	r0, r4, #8
}
   210ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   210b0:	f7f9 bf68 	b.w	1af84 <z_impl_k_sem_give>
   210b4:	bd10      	pop	{r4, pc}

000210b6 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   210b6:	68c0      	ldr	r0, [r0, #12]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   210b8:	6803      	ldr	r3, [r0, #0]
   210ba:	428b      	cmp	r3, r1
{
   210bc:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   210be:	d106      	bne.n	210ce <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   210c0:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   210c4:	b934      	cbnz	r4, 210d4 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   210c6:	f7ff ffe6 	bl	21096 <spi_context_unlock_unconditionally>
	return 0;
   210ca:	4620      	mov	r0, r4
}
   210cc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   210ce:	f06f 0015 	mvn.w	r0, #21
   210d2:	e7fb      	b.n	210cc <spi_nrfx_release+0x16>
		return -EBUSY;
   210d4:	f06f 000f 	mvn.w	r0, #15
   210d8:	e7f8      	b.n	210cc <spi_nrfx_release+0x16>

000210da <spi_2_init>:
#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPI
SPI_NRFX_SPI_DEVICE(2);
   210da:	b538      	push	{r3, r4, r5, lr}
   210dc:	2200      	movs	r2, #0
   210de:	4604      	mov	r4, r0
   210e0:	2101      	movs	r1, #1
   210e2:	2023      	movs	r0, #35	; 0x23
   210e4:	f7e3 fac2 	bl	466c <z_arm_irq_priority_set>
   210e8:	4620      	mov	r0, r4
   210ea:	f7f3 fddb 	bl	14ca4 <init_spi>
   210ee:	4605      	mov	r5, r0
   210f0:	68e0      	ldr	r0, [r4, #12]
   210f2:	f7ff ffd0 	bl	21096 <spi_context_unlock_unconditionally>
   210f6:	4628      	mov	r0, r5
   210f8:	bd38      	pop	{r3, r4, r5, pc}

000210fa <event_handler>:
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   210fa:	7803      	ldrb	r3, [r0, #0]
   210fc:	2b00      	cmp	r3, #0
   210fe:	d135      	bne.n	2116c <event_handler+0x72>
	if (!ctx->tx_len) {
   21100:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   21102:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   21104:	b182      	cbz	r2, 21128 <event_handler+0x2e>
	if (len > ctx->tx_len) {
   21106:	4293      	cmp	r3, r2
   21108:	d80e      	bhi.n	21128 <event_handler+0x2e>
	ctx->tx_len -= len;
   2110a:	1ad2      	subs	r2, r2, r3
   2110c:	650a      	str	r2, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   2110e:	bb0a      	cbnz	r2, 21154 <event_handler+0x5a>
		ctx->tx_count--;
   21110:	6c0a      	ldr	r2, [r1, #64]	; 0x40
   21112:	3a01      	subs	r2, #1
   21114:	640a      	str	r2, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   21116:	b30a      	cbz	r2, 2115c <event_handler+0x62>
			ctx->current_tx++;
   21118:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   2111a:	f102 0008 	add.w	r0, r2, #8
   2111e:	63c8      	str	r0, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   21120:	6890      	ldr	r0, [r2, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   21122:	68d2      	ldr	r2, [r2, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   21124:	64c8      	str	r0, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   21126:	650a      	str	r2, [r1, #80]	; 0x50
	if (!ctx->rx_len) {
   21128:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   2112a:	b182      	cbz	r2, 2114e <event_handler+0x54>
	if (len > ctx->rx_len) {
   2112c:	4293      	cmp	r3, r2
   2112e:	d80e      	bhi.n	2114e <event_handler+0x54>
	ctx->rx_len -= len;
   21130:	1ad2      	subs	r2, r2, r3
   21132:	658a      	str	r2, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
   21134:	b9a2      	cbnz	r2, 21160 <event_handler+0x66>
		ctx->rx_count--;
   21136:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   21138:	3b01      	subs	r3, #1
   2113a:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
   2113c:	b1a3      	cbz	r3, 21168 <event_handler+0x6e>
			ctx->current_rx++;
   2113e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   21140:	f103 0208 	add.w	r2, r3, #8
   21144:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   21146:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   21148:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   2114a:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   2114c:	658b      	str	r3, [r1, #88]	; 0x58
		transfer_next_chunk(dev_data->dev);
   2114e:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
   21150:	f7f3 bdc0 	b.w	14cd4 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   21154:	6cca      	ldr	r2, [r1, #76]	; 0x4c
   21156:	2a00      	cmp	r2, #0
   21158:	d0e6      	beq.n	21128 <event_handler+0x2e>
		ctx->tx_buf += dfs * len;
   2115a:	441a      	add	r2, r3
   2115c:	64ca      	str	r2, [r1, #76]	; 0x4c
   2115e:	e7e3      	b.n	21128 <event_handler+0x2e>
	} else if (ctx->rx_buf) {
   21160:	6d4a      	ldr	r2, [r1, #84]	; 0x54
   21162:	2a00      	cmp	r2, #0
   21164:	d0f3      	beq.n	2114e <event_handler+0x54>
		ctx->rx_buf += dfs * len;
   21166:	4413      	add	r3, r2
   21168:	654b      	str	r3, [r1, #84]	; 0x54
   2116a:	e7f0      	b.n	2114e <event_handler+0x54>
}
   2116c:	4770      	bx	lr

0002116e <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2116e:	68c2      	ldr	r2, [r0, #12]
{
   21170:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   21172:	e892 0003 	ldmia.w	r2, {r0, r1}
   21176:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2117a:	2000      	movs	r0, #0
   2117c:	4770      	bx	lr

0002117e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2117e:	4700      	bx	r0

00021180 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   21180:	f005 b9bd 	b.w	264fe <z_impl_k_busy_wait>

00021184 <nrfx_clock_enable>:
{
   21184:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   21186:	2000      	movs	r0, #0
   21188:	f7e3 fa62 	bl	4650 <arch_irq_is_enabled>
   2118c:	b908      	cbnz	r0, 21192 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2118e:	f7e3 fa3b 	bl	4608 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   21192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21196:	2200      	movs	r2, #0
   21198:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   2119c:	bd08      	pop	{r3, pc}

0002119e <transfer_byte>:
{
   2119e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   211a0:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   211a4:	698a      	ldr	r2, [r1, #24]
   211a6:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   211a8:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   211ac:	6a0b      	ldr	r3, [r1, #32]
   211ae:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   211b0:	bf3e      	ittt	cc
   211b2:	694a      	ldrcc	r2, [r1, #20]
   211b4:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   211b8:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   211ba:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   211bc:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   211c0:	1c53      	adds	r3, r2, #1
   211c2:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   211c4:	3202      	adds	r2, #2
    if (p_cb->abort)
   211c6:	b13c      	cbz	r4, 211d8 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   211c8:	690c      	ldr	r4, [r1, #16]
   211ca:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   211cc:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   211ce:	bf38      	it	cc
   211d0:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   211d2:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   211d4:	bf88      	it	hi
   211d6:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   211d8:	690d      	ldr	r5, [r1, #16]
   211da:	4295      	cmp	r5, r2
   211dc:	d905      	bls.n	211ea <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   211de:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   211e0:	5c9b      	ldrb	r3, [r3, r2]
   211e2:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   211e6:	2001      	movs	r0, #1
   211e8:	e00a      	b.n	21200 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   211ea:	698c      	ldr	r4, [r1, #24]
   211ec:	4294      	cmp	r4, r2
   211ee:	d901      	bls.n	211f4 <transfer_byte+0x56>
   211f0:	7fcb      	ldrb	r3, [r1, #31]
   211f2:	e7f6      	b.n	211e2 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   211f4:	42ab      	cmp	r3, r5
   211f6:	d3f6      	bcc.n	211e6 <transfer_byte+0x48>
   211f8:	42a3      	cmp	r3, r4
   211fa:	bf2c      	ite	cs
   211fc:	2000      	movcs	r0, #0
   211fe:	2001      	movcc	r0, #1
}
   21200:	b003      	add	sp, #12
   21202:	bd30      	pop	{r4, r5, pc}

00021204 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
   21204:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
   21206:	b910      	cbnz	r0, 2120e <lv_disp_get_scr_act+0xa>
   21208:	f7f7 fc74 	bl	18af4 <lv_disp_get_default>
    if(!disp) {
   2120c:	b100      	cbz	r0, 21210 <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
   2120e:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
   21210:	bd08      	pop	{r3, pc}

00021212 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
   21212:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
   21214:	b910      	cbnz	r0, 2121c <lv_disp_get_scr_prev+0xa>
   21216:	f7f7 fc6d 	bl	18af4 <lv_disp_get_default>
    if(!disp) {
   2121a:	b100      	cbz	r0, 2121e <lv_disp_get_scr_prev+0xc>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
   2121c:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
   2121e:	bd08      	pop	{r3, pc}

00021220 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
   21220:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
   21222:	b910      	cbnz	r0, 2122a <lv_disp_get_layer_top+0xa>
   21224:	f7f7 fc66 	bl	18af4 <lv_disp_get_default>
    if(!disp) {
   21228:	b100      	cbz	r0, 2122c <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
   2122a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   2122c:	bd08      	pop	{r3, pc}

0002122e <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
   2122e:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
   21230:	b910      	cbnz	r0, 21238 <lv_disp_get_layer_sys+0xa>
   21232:	f7f7 fc5f 	bl	18af4 <lv_disp_get_default>
    if(!disp) {
   21236:	b100      	cbz	r0, 2123a <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
   21238:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   2123a:	bd08      	pop	{r3, pc}

0002123c <_lv_indev_init>:
    if(indev) {
   2123c:	2000      	movs	r0, #0
   2123e:	f7f4 bd6b 	b.w	15d18 <lv_indev_reset.part.0>

00021242 <refresh_children_position>:
{
   21242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _LV_LL_READ(obj->child_ll, i) {
   21244:	1d07      	adds	r7, r0, #4
   21246:	4638      	mov	r0, r7
{
   21248:	460d      	mov	r5, r1
   2124a:	4616      	mov	r6, r2
    _LV_LL_READ(obj->child_ll, i) {
   2124c:	f004 fa9a 	bl	25784 <_lv_ll_get_head>
   21250:	4604      	mov	r4, r0
   21252:	b900      	cbnz	r0, 21256 <refresh_children_position+0x14>
}
   21254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
   21256:	8a23      	ldrh	r3, [r4, #16]
   21258:	442b      	add	r3, r5
   2125a:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
   2125c:	8a63      	ldrh	r3, [r4, #18]
   2125e:	4433      	add	r3, r6
   21260:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
   21262:	8aa3      	ldrh	r3, [r4, #20]
   21264:	442b      	add	r3, r5
   21266:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
   21268:	8ae3      	ldrh	r3, [r4, #22]
   2126a:	4433      	add	r3, r6
        refresh_children_position(i, x_diff, y_diff);
   2126c:	4629      	mov	r1, r5
   2126e:	4620      	mov	r0, r4
        i->coords.y2 += y_diff;
   21270:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
   21272:	4632      	mov	r2, r6
   21274:	f7ff ffe5 	bl	21242 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
   21278:	4621      	mov	r1, r4
   2127a:	4638      	mov	r0, r7
   2127c:	f004 fa88 	bl	25790 <_lv_ll_get_next>
   21280:	e7e6      	b.n	21250 <refresh_children_position+0xe>

00021282 <_lv_memset_00>:
 * Wrapper for the standard memset with fixed 0x00 value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
   21282:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   21284:	2100      	movs	r1, #0
   21286:	f005 bc01 	b.w	26a8c <memset>

0002128a <_lv_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2128a:	f005 bbde 	b.w	26a4a <memcpy>

0002128e <lv_area_copy>:
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   2128e:	2208      	movs	r2, #8
   21290:	f7ff bffb 	b.w	2128a <_lv_memcpy>

00021294 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
   21294:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   21298:	f361 0300 	bfi	r3, r1, #0, #1
   2129c:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
}
   212a0:	4770      	bx	lr

000212a2 <lv_event_send>:
{
   212a2:	b410      	push	{r4}
   212a4:	4613      	mov	r3, r2
   212a6:	460c      	mov	r4, r1
    if(obj == NULL) return LV_RES_OK;
   212a8:	4601      	mov	r1, r0
   212aa:	b120      	cbz	r0, 212b6 <lv_event_send+0x14>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
   212ac:	4622      	mov	r2, r4
   212ae:	6980      	ldr	r0, [r0, #24]
}
   212b0:	bc10      	pop	{r4}
    res = lv_event_send_func(obj->event_cb, obj, event, data);
   212b2:	f7f4 be3b 	b.w	15f2c <lv_event_send_func>
}
   212b6:	2001      	movs	r0, #1
   212b8:	bc10      	pop	{r4}
   212ba:	4770      	bx	lr

000212bc <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
   212bc:	61c1      	str	r1, [r0, #28]
}
   212be:	4770      	bx	lr

000212c0 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
   212c0:	b110      	cbz	r0, 212c8 <lv_signal_send+0x8>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
   212c2:	69c3      	ldr	r3, [r0, #28]
   212c4:	b103      	cbz	r3, 212c8 <lv_signal_send+0x8>
   212c6:	4718      	bx	r3
}
   212c8:	2001      	movs	r0, #1
   212ca:	4770      	bx	lr

000212cc <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
   212cc:	6201      	str	r1, [r0, #32]
}
   212ce:	4770      	bx	lr

000212d0 <lv_obj_allocate_ext_attr>:
{
   212d0:	b510      	push	{r4, lr}
   212d2:	4604      	mov	r4, r0
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
   212d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   212d6:	f004 fb0d 	bl	258f4 <lv_mem_realloc>
    if(new_ext == NULL) return NULL;
   212da:	b100      	cbz	r0, 212de <lv_obj_allocate_ext_attr+0xe>
    obj->ext_attr = new_ext;
   212dc:	6260      	str	r0, [r4, #36]	; 0x24
}
   212de:	bd10      	pop	{r4, pc}

000212e0 <lv_obj_refresh_ext_draw_pad>:
    obj->ext_draw_pad = 0;
   212e0:	2200      	movs	r2, #0
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
   212e2:	69c3      	ldr	r3, [r0, #28]
    obj->ext_draw_pad = 0;
   212e4:	8602      	strh	r2, [r0, #48]	; 0x30
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
   212e6:	2106      	movs	r1, #6
   212e8:	4718      	bx	r3

000212ea <lv_obj_area_is_visible>:
    return obj->hidden == 0 ? false : true;
   212ea:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
   212ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(lv_obj_get_hidden(obj)) return false;
   212f0:	06da      	lsls	r2, r3, #27
{
   212f2:	4605      	mov	r5, r0
   212f4:	460e      	mov	r6, r1
    if(lv_obj_get_hidden(obj)) return false;
   212f6:	d42e      	bmi.n	21356 <lv_obj_area_is_visible+0x6c>
   212f8:	4603      	mov	r3, r0
    return obj->parent;
   212fa:	461c      	mov	r4, r3
   212fc:	681b      	ldr	r3, [r3, #0]
    } while(par != NULL);
   212fe:	2b00      	cmp	r3, #0
   21300:	d1fb      	bne.n	212fa <lv_obj_area_is_visible+0x10>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
   21302:	4620      	mov	r0, r4
   21304:	f7f4 fe56 	bl	15fb4 <lv_obj_get_disp>
   21308:	4607      	mov	r7, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
   2130a:	f7ff ff7b 	bl	21204 <lv_disp_get_scr_act>
   2130e:	4284      	cmp	r4, r0
   21310:	d123      	bne.n	2135a <lv_obj_area_is_visible+0x70>
        lv_area_copy(&obj_coords, &obj->coords);
   21312:	f105 0110 	add.w	r1, r5, #16
   21316:	4668      	mov	r0, sp
        lv_coord_t ext_size = obj->ext_draw_pad;
   21318:	f9b5 4030 	ldrsh.w	r4, [r5, #48]	; 0x30
        lv_area_copy(&obj_coords, &obj->coords);
   2131c:	f7ff ffb7 	bl	2128e <lv_area_copy>
        obj_coords.x1 -= ext_size;
   21320:	f8bd 3000 	ldrh.w	r3, [sp]
   21324:	1b1b      	subs	r3, r3, r4
   21326:	f8ad 3000 	strh.w	r3, [sp]
        obj_coords.y1 -= ext_size;
   2132a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2132e:	1b1b      	subs	r3, r3, r4
   21330:	f8ad 3002 	strh.w	r3, [sp, #2]
        obj_coords.x2 += ext_size;
   21334:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   21338:	4423      	add	r3, r4
   2133a:	f8ad 3004 	strh.w	r3, [sp, #4]
        obj_coords.y2 += ext_size;
   2133e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
   21342:	466a      	mov	r2, sp
        obj_coords.y2 += ext_size;
   21344:	441c      	add	r4, r3
        is_common = _lv_area_intersect(area, area, &obj_coords);
   21346:	4631      	mov	r1, r6
   21348:	4630      	mov	r0, r6
        obj_coords.y2 += ext_size;
   2134a:	f8ad 4006 	strh.w	r4, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
   2134e:	f003 ff72 	bl	25236 <_lv_area_intersect>
        if(is_common == false) return false;  /*The area is not on the object*/
   21352:	4604      	mov	r4, r0
   21354:	bb00      	cbnz	r0, 21398 <lv_obj_area_is_visible+0xae>
    if(lv_obj_get_hidden(obj)) return false;
   21356:	2400      	movs	r4, #0
   21358:	e00f      	b.n	2137a <lv_obj_area_is_visible+0x90>
       obj_scr == lv_disp_get_scr_prev(disp) ||
   2135a:	4638      	mov	r0, r7
   2135c:	f7ff ff59 	bl	21212 <lv_disp_get_scr_prev>
    if(obj_scr == lv_disp_get_scr_act(disp) ||
   21360:	4284      	cmp	r4, r0
   21362:	d0d6      	beq.n	21312 <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_top(disp) ||
   21364:	4638      	mov	r0, r7
   21366:	f7ff ff5b 	bl	21220 <lv_disp_get_layer_top>
       obj_scr == lv_disp_get_scr_prev(disp) ||
   2136a:	4284      	cmp	r4, r0
   2136c:	d0d1      	beq.n	21312 <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_sys(disp)) {
   2136e:	4638      	mov	r0, r7
   21370:	f7ff ff5d 	bl	2122e <lv_disp_get_layer_sys>
       obj_scr == lv_disp_get_layer_top(disp) ||
   21374:	4284      	cmp	r4, r0
   21376:	d0cc      	beq.n	21312 <lv_obj_area_is_visible+0x28>
    return true;
   21378:	2401      	movs	r4, #1
}
   2137a:	4620      	mov	r0, r4
   2137c:	b003      	add	sp, #12
   2137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            is_common = _lv_area_intersect(area, area, &par->coords);
   21380:	f105 0210 	add.w	r2, r5, #16
   21384:	4631      	mov	r1, r6
   21386:	4630      	mov	r0, r6
   21388:	f003 ff55 	bl	25236 <_lv_area_intersect>
            if(is_common == false) return false;       /*If no common parts with parent break;*/
   2138c:	2800      	cmp	r0, #0
   2138e:	d0e2      	beq.n	21356 <lv_obj_area_is_visible+0x6c>
    return obj->hidden == 0 ? false : true;
   21390:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
   21394:	06db      	lsls	r3, r3, #27
   21396:	d4de      	bmi.n	21356 <lv_obj_area_is_visible+0x6c>
    return obj->parent;
   21398:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
   2139a:	2d00      	cmp	r5, #0
   2139c:	d1f0      	bne.n	21380 <lv_obj_area_is_visible+0x96>
   2139e:	e7ec      	b.n	2137a <lv_obj_area_is_visible+0x90>

000213a0 <lv_obj_invalidate_area>:
{
   213a0:	b513      	push	{r0, r1, r4, lr}
   213a2:	4604      	mov	r4, r0
    lv_area_copy(&area_tmp, area);
   213a4:	4668      	mov	r0, sp
   213a6:	f7ff ff72 	bl	2128e <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
   213aa:	4669      	mov	r1, sp
   213ac:	4620      	mov	r0, r4
   213ae:	f7ff ff9c 	bl	212ea <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
   213b2:	b128      	cbz	r0, 213c0 <lv_obj_invalidate_area+0x20>
   213b4:	4620      	mov	r0, r4
   213b6:	f7f4 fdfd 	bl	15fb4 <lv_obj_get_disp>
   213ba:	4669      	mov	r1, sp
   213bc:	f001 f8b2 	bl	22524 <_lv_inv_area>
}
   213c0:	b002      	add	sp, #8
   213c2:	bd10      	pop	{r4, pc}

000213c4 <lv_obj_invalidate>:
{
   213c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    lv_coord_t ext_size = obj->ext_draw_pad;
   213c6:	f9b0 4030 	ldrsh.w	r4, [r0, #48]	; 0x30
{
   213ca:	4605      	mov	r5, r0
    lv_area_copy(&obj_coords, &obj->coords);
   213cc:	f100 0110 	add.w	r1, r0, #16
   213d0:	4668      	mov	r0, sp
   213d2:	f7ff ff5c 	bl	2128e <lv_area_copy>
    obj_coords.x1 -= ext_size;
   213d6:	f8bd 3000 	ldrh.w	r3, [sp]
   213da:	1b1b      	subs	r3, r3, r4
   213dc:	f8ad 3000 	strh.w	r3, [sp]
    obj_coords.y1 -= ext_size;
   213e0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   213e4:	1b1b      	subs	r3, r3, r4
   213e6:	f8ad 3002 	strh.w	r3, [sp, #2]
    obj_coords.x2 += ext_size;
   213ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   213ee:	4423      	add	r3, r4
   213f0:	f8ad 3004 	strh.w	r3, [sp, #4]
    obj_coords.y2 += ext_size;
   213f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
   213f8:	4669      	mov	r1, sp
    obj_coords.y2 += ext_size;
   213fa:	441c      	add	r4, r3
    lv_obj_invalidate_area(obj, &obj_coords);
   213fc:	4628      	mov	r0, r5
    obj_coords.y2 += ext_size;
   213fe:	f8ad 4006 	strh.w	r4, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
   21402:	f7ff ffcd 	bl	213a0 <lv_obj_invalidate_area>
}
   21406:	b003      	add	sp, #12
   21408:	bd30      	pop	{r4, r5, pc}

0002140a <lv_obj_set_pos>:
{
   2140a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->parent;
   2140c:	6807      	ldr	r7, [r0, #0]
{
   2140e:	4604      	mov	r4, r0
    if(par) {
   21410:	b12f      	cbz	r7, 2141e <lv_obj_set_pos+0x14>
        x = x + par->coords.x1;
   21412:	8a3d      	ldrh	r5, [r7, #16]
        y = y + par->coords.y1;
   21414:	8a7e      	ldrh	r6, [r7, #18]
        x = x + par->coords.x1;
   21416:	4429      	add	r1, r5
        y = y + par->coords.y1;
   21418:	4432      	add	r2, r6
        x = x + par->coords.x1;
   2141a:	b209      	sxth	r1, r1
        y = y + par->coords.y1;
   2141c:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
   2141e:	8a25      	ldrh	r5, [r4, #16]
    diff.y = y - obj->coords.y1;
   21420:	8a66      	ldrh	r6, [r4, #18]
    diff.x = x - obj->coords.x1;
   21422:	1b49      	subs	r1, r1, r5
    diff.y = y - obj->coords.y1;
   21424:	1b92      	subs	r2, r2, r6
    diff.x = x - obj->coords.x1;
   21426:	b20d      	sxth	r5, r1
    diff.y = y - obj->coords.y1;
   21428:	b216      	sxth	r6, r2
    if(diff.x == 0 && diff.y == 0) return;
   2142a:	ea55 0306 	orrs.w	r3, r5, r6
   2142e:	d026      	beq.n	2147e <lv_obj_set_pos+0x74>
    lv_obj_invalidate(obj);
   21430:	4620      	mov	r0, r4
   21432:	f7ff ffc7 	bl	213c4 <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
   21436:	f104 0110 	add.w	r1, r4, #16
   2143a:	4668      	mov	r0, sp
   2143c:	f7ff ff27 	bl	2128e <lv_area_copy>
    obj->coords.x1 += diff.x;
   21440:	8a23      	ldrh	r3, [r4, #16]
   21442:	442b      	add	r3, r5
   21444:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
   21446:	8a63      	ldrh	r3, [r4, #18]
   21448:	4433      	add	r3, r6
   2144a:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
   2144c:	8aa3      	ldrh	r3, [r4, #20]
   2144e:	442b      	add	r3, r5
   21450:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
   21452:	8ae3      	ldrh	r3, [r4, #22]
   21454:	4433      	add	r3, r6
   21456:	82e3      	strh	r3, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
   21458:	4632      	mov	r2, r6
   2145a:	4629      	mov	r1, r5
   2145c:	4620      	mov	r0, r4
   2145e:	f7ff fef0 	bl	21242 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   21462:	69e3      	ldr	r3, [r4, #28]
   21464:	466a      	mov	r2, sp
   21466:	2102      	movs	r1, #2
   21468:	4620      	mov	r0, r4
   2146a:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   2146c:	b127      	cbz	r7, 21478 <lv_obj_set_pos+0x6e>
   2146e:	69fb      	ldr	r3, [r7, #28]
   21470:	4622      	mov	r2, r4
   21472:	2101      	movs	r1, #1
   21474:	4638      	mov	r0, r7
   21476:	4798      	blx	r3
    lv_obj_invalidate(obj);
   21478:	4620      	mov	r0, r4
   2147a:	f7ff ffa3 	bl	213c4 <lv_obj_invalidate>
}
   2147e:	b003      	add	sp, #12
   21480:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021482 <lv_obj_align>:
{
   21482:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21484:	4605      	mov	r5, r0
   21486:	461c      	mov	r4, r3
    if(base == NULL) base = lv_obj_get_parent(obj);
   21488:	4608      	mov	r0, r1
   2148a:	b901      	cbnz	r1, 2148e <lv_obj_align+0xc>
    return obj->parent;
   2148c:	6828      	ldr	r0, [r5, #0]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
   2148e:	ab01      	add	r3, sp, #4
   21490:	f105 0110 	add.w	r1, r5, #16
   21494:	3010      	adds	r0, #16
   21496:	f004 f811 	bl	254bc <_lv_area_align>
    return obj->parent;
   2149a:	6828      	ldr	r0, [r5, #0]
    new_pos.x += x_ofs;
   2149c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    new_pos.y += y_ofs;
   214a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   214a4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    lv_coord_t par_abs_y  = par->coords.y1;
   214a8:	f9b0 6012 	ldrsh.w	r6, [r0, #18]
    new_pos.x += x_ofs;
   214ac:	4421      	add	r1, r4
    new_pos.x -= par_abs_x;
   214ae:	8a04      	ldrh	r4, [r0, #16]
    new_pos.y += y_ofs;
   214b0:	441a      	add	r2, r3
    new_pos.x -= par_abs_x;
   214b2:	1b09      	subs	r1, r1, r4
    new_pos.y -= par_abs_y;
   214b4:	1b92      	subs	r2, r2, r6
    new_pos.x -= par_abs_x;
   214b6:	b209      	sxth	r1, r1
    new_pos.y -= par_abs_y;
   214b8:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
   214ba:	4628      	mov	r0, r5
    new_pos.x -= par_abs_x;
   214bc:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
   214c0:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
   214c4:	f7ff ffa1 	bl	2140a <lv_obj_set_pos>
}
   214c8:	b002      	add	sp, #8
   214ca:	bd70      	pop	{r4, r5, r6, pc}

000214cc <lv_obj_set_hidden>:
    if(!obj->hidden) lv_obj_invalidate(obj); /*Invalidate when not hidden (hidden objects are ignored) */
   214cc:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   214d0:	06da      	lsls	r2, r3, #27
{
   214d2:	b570      	push	{r4, r5, r6, lr}
   214d4:	4604      	mov	r4, r0
   214d6:	460d      	mov	r5, r1
    if(!obj->hidden) lv_obj_invalidate(obj); /*Invalidate when not hidden (hidden objects are ignored) */
   214d8:	d401      	bmi.n	214de <lv_obj_set_hidden+0x12>
   214da:	f7ff ff73 	bl	213c4 <lv_obj_invalidate>
    obj->hidden = en == false ? 0 : 1;
   214de:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   214e2:	f365 1304 	bfi	r3, r5, #4, #1
   214e6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    if(!obj->hidden) lv_obj_invalidate(obj); /*Invalidate when not hidden (hidden objects are ignored) */
   214ea:	06db      	lsls	r3, r3, #27
   214ec:	d402      	bmi.n	214f4 <lv_obj_set_hidden+0x28>
   214ee:	4620      	mov	r0, r4
   214f0:	f7ff ff68 	bl	213c4 <lv_obj_invalidate>
    return obj->parent;
   214f4:	6820      	ldr	r0, [r4, #0]
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   214f6:	b128      	cbz	r0, 21504 <lv_obj_set_hidden+0x38>
   214f8:	4622      	mov	r2, r4
   214fa:	69c3      	ldr	r3, [r0, #28]
}
   214fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   21500:	2101      	movs	r1, #1
   21502:	4718      	bx	r3
}
   21504:	bd70      	pop	{r4, r5, r6, pc}

00021506 <lv_obj_set_size>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   21506:	8a83      	ldrh	r3, [r0, #20]
{
   21508:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2150a:	4616      	mov	r6, r2
   2150c:	8a02      	ldrh	r2, [r0, #16]
   2150e:	3301      	adds	r3, #1
   21510:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   21512:	b21b      	sxth	r3, r3
   21514:	428b      	cmp	r3, r1
{
   21516:	4604      	mov	r4, r0
   21518:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   2151a:	d106      	bne.n	2152a <lv_obj_set_size+0x24>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2151c:	8ac3      	ldrh	r3, [r0, #22]
   2151e:	8a42      	ldrh	r2, [r0, #18]
   21520:	3301      	adds	r3, #1
   21522:	1a9b      	subs	r3, r3, r2
   21524:	b21b      	sxth	r3, r3
   21526:	429e      	cmp	r6, r3
   21528:	d023      	beq.n	21572 <lv_obj_set_size+0x6c>
    lv_obj_invalidate(obj);
   2152a:	4620      	mov	r0, r4
   2152c:	f7ff ff4a 	bl	213c4 <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
   21530:	f104 0110 	add.w	r1, r4, #16
   21534:	4668      	mov	r0, sp
   21536:	f7ff feaa 	bl	2128e <lv_area_copy>
    obj->coords.y2 = obj->coords.y1 + h - 1;
   2153a:	8a62      	ldrh	r2, [r4, #18]
        obj->coords.x2 = obj->coords.x1 + w - 1;
   2153c:	8a21      	ldrh	r1, [r4, #16]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   2153e:	69e3      	ldr	r3, [r4, #28]
    obj->coords.y2 = obj->coords.y1 + h - 1;
   21540:	3e01      	subs	r6, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
   21542:	3d01      	subs	r5, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
   21544:	4416      	add	r6, r2
        obj->coords.x2 = obj->coords.x1 + w - 1;
   21546:	440d      	add	r5, r1
    obj->coords.y2 = obj->coords.y1 + h - 1;
   21548:	82e6      	strh	r6, [r4, #22]
        obj->coords.x2 = obj->coords.x1 + w - 1;
   2154a:	82a5      	strh	r5, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   2154c:	466a      	mov	r2, sp
   2154e:	2102      	movs	r1, #2
   21550:	4620      	mov	r0, r4
   21552:	4798      	blx	r3
    return obj->parent;
   21554:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   21556:	b118      	cbz	r0, 21560 <lv_obj_set_size+0x5a>
   21558:	69c3      	ldr	r3, [r0, #28]
   2155a:	4622      	mov	r2, r4
   2155c:	2101      	movs	r1, #1
   2155e:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
   21560:	1d26      	adds	r6, r4, #4
   21562:	4630      	mov	r0, r6
   21564:	f004 f90e 	bl	25784 <_lv_ll_get_head>
   21568:	4605      	mov	r5, r0
   2156a:	b920      	cbnz	r0, 21576 <lv_obj_set_size+0x70>
    lv_obj_invalidate(obj);
   2156c:	4620      	mov	r0, r4
   2156e:	f7ff ff29 	bl	213c4 <lv_obj_invalidate>
}
   21572:	b002      	add	sp, #8
   21574:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
   21576:	69eb      	ldr	r3, [r5, #28]
   21578:	466a      	mov	r2, sp
   2157a:	2103      	movs	r1, #3
   2157c:	4628      	mov	r0, r5
   2157e:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
   21580:	4629      	mov	r1, r5
   21582:	4630      	mov	r0, r6
   21584:	f004 f904 	bl	25790 <_lv_ll_get_next>
   21588:	e7ee      	b.n	21568 <lv_obj_set_size+0x62>

0002158a <lv_obj_set_height>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2158a:	8a83      	ldrh	r3, [r0, #20]
{
   2158c:	460a      	mov	r2, r1
   2158e:	8a01      	ldrh	r1, [r0, #16]
   21590:	3301      	adds	r3, #1
   21592:	b410      	push	{r4}
   21594:	1a59      	subs	r1, r3, r1
}
   21596:	bc10      	pop	{r4}
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
   21598:	b209      	sxth	r1, r1
   2159a:	f7ff bfb4 	b.w	21506 <lv_obj_set_size>

0002159e <lv_obj_del>:
{
   2159e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   215a0:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
   215a2:	f7ff ff0f 	bl	213c4 <lv_obj_invalidate>
    return obj->parent;
   215a6:	682f      	ldr	r7, [r5, #0]
    if(par == NULL) {
   215a8:	b9b7      	cbnz	r7, 215d8 <lv_obj_del+0x3a>
        disp = lv_obj_get_disp(obj);
   215aa:	4628      	mov	r0, r5
   215ac:	f7f4 fd02 	bl	15fb4 <lv_obj_get_disp>
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
   215b0:	4604      	mov	r4, r0
   215b2:	b178      	cbz	r0, 215d4 <lv_obj_del+0x36>
        if(disp->act_scr == obj) act_scr_del = true;
   215b4:	6c06      	ldr	r6, [r0, #64]	; 0x40
   215b6:	1b73      	subs	r3, r6, r5
   215b8:	425e      	negs	r6, r3
   215ba:	415e      	adcs	r6, r3
    obj_del_core(obj);
   215bc:	4628      	mov	r0, r5
   215be:	f7f4 fd1f 	bl	16000 <obj_del_core>
    if(par) {
   215c2:	b127      	cbz	r7, 215ce <lv_obj_del+0x30>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
   215c4:	69fb      	ldr	r3, [r7, #28]
   215c6:	2200      	movs	r2, #0
   215c8:	2101      	movs	r1, #1
   215ca:	4638      	mov	r0, r7
   215cc:	4798      	blx	r3
    if(act_scr_del)  {
   215ce:	b10e      	cbz	r6, 215d4 <lv_obj_del+0x36>
        disp->act_scr = NULL;
   215d0:	2300      	movs	r3, #0
   215d2:	6423      	str	r3, [r4, #64]	; 0x40
}
   215d4:	2000      	movs	r0, #0
   215d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool act_scr_del = false;
   215d8:	2600      	movs	r6, #0
    lv_disp_t * disp = NULL;
   215da:	4634      	mov	r4, r6
   215dc:	e7ee      	b.n	215bc <lv_obj_del+0x1e>

000215de <lv_obj_get_parent>:
}
   215de:	6800      	ldr	r0, [r0, #0]
   215e0:	4770      	bx	lr

000215e2 <lv_obj_get_child>:
    if(child == NULL) {
   215e2:	3004      	adds	r0, #4
   215e4:	b909      	cbnz	r1, 215ea <lv_obj_get_child+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
   215e6:	f004 b8cd 	b.w	25784 <_lv_ll_get_head>
        result = _lv_ll_get_next(&obj->child_ll, child);
   215ea:	f004 b8d1 	b.w	25790 <_lv_ll_get_next>

000215ee <refresh_children_style>:
{
   215ee:	b538      	push	{r3, r4, r5, lr}
   215f0:	4605      	mov	r5, r0
        result = _lv_ll_get_head(&obj->child_ll);
   215f2:	3004      	adds	r0, #4
   215f4:	f004 f8c6 	bl	25784 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
   215f8:	4604      	mov	r4, r0
    while(child != NULL) {
   215fa:	b900      	cbnz	r0, 215fe <refresh_children_style+0x10>
}
   215fc:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(child);
   215fe:	4620      	mov	r0, r4
   21600:	f7ff fee0 	bl	213c4 <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
   21604:	69e3      	ldr	r3, [r4, #28]
   21606:	2200      	movs	r2, #0
   21608:	2104      	movs	r1, #4
   2160a:	4620      	mov	r0, r4
   2160c:	4798      	blx	r3
        lv_obj_invalidate(child);
   2160e:	4620      	mov	r0, r4
   21610:	f7ff fed8 	bl	213c4 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
   21614:	4620      	mov	r0, r4
   21616:	f7ff ffea 	bl	215ee <refresh_children_style>
        child = lv_obj_get_child(obj, child);
   2161a:	4621      	mov	r1, r4
   2161c:	4628      	mov	r0, r5
   2161e:	f7ff ffe0 	bl	215e2 <lv_obj_get_child>
   21622:	e7e9      	b.n	215f8 <refresh_children_style+0xa>

00021624 <lv_obj_get_coords>:
{
   21624:	460b      	mov	r3, r1
    lv_area_copy(cords_p, &obj->coords);
   21626:	f100 0110 	add.w	r1, r0, #16
   2162a:	4618      	mov	r0, r3
   2162c:	f7ff be2f 	b.w	2128e <lv_area_copy>

00021630 <lv_obj_get_x>:
    return obj->parent;
   21630:	6803      	ldr	r3, [r0, #0]
    if(parent) {
   21632:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
   21636:	b113      	cbz	r3, 2163e <lv_obj_get_x+0xe>
        rel_x             = obj->coords.x1 - parent->coords.x1;
   21638:	8a1b      	ldrh	r3, [r3, #16]
   2163a:	1ac0      	subs	r0, r0, r3
   2163c:	b200      	sxth	r0, r0
}
   2163e:	4770      	bx	lr

00021640 <lv_obj_get_y>:
    return obj->parent;
   21640:	6803      	ldr	r3, [r0, #0]
    if(parent) {
   21642:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
   21646:	b113      	cbz	r3, 2164e <lv_obj_get_y+0xe>
        rel_y             = obj->coords.y1 - parent->coords.y1;
   21648:	8a5b      	ldrh	r3, [r3, #18]
   2164a:	1ac0      	subs	r0, r0, r3
   2164c:	b200      	sxth	r0, r0
}
   2164e:	4770      	bx	lr

00021650 <lv_obj_get_style_list>:
{
   21650:	b513      	push	{r0, r1, r4, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
   21652:	b911      	cbnz	r1, 2165a <lv_obj_get_style_list+0xa>
   21654:	3028      	adds	r0, #40	; 0x28
}
   21656:	b002      	add	sp, #8
   21658:	bd10      	pop	{r4, pc}
    info.part = part;
   2165a:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
   2165e:	2400      	movs	r4, #0
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
   21660:	466a      	mov	r2, sp
   21662:	2108      	movs	r1, #8
    info.result = NULL;
   21664:	9401      	str	r4, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
   21666:	f7ff fe2b 	bl	212c0 <lv_signal_send>
    if(res != LV_RES_OK) return NULL;
   2166a:	2801      	cmp	r0, #1
    return info.result;
   2166c:	bf0c      	ite	eq
   2166e:	9801      	ldreq	r0, [sp, #4]
    if(res != LV_RES_OK) return NULL;
   21670:	4620      	movne	r0, r4
   21672:	e7f0      	b.n	21656 <lv_obj_get_style_list+0x6>

00021674 <lv_obj_clean_style_list>:
{
   21674:	b508      	push	{r3, lr}
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
   21676:	f7ff ffeb 	bl	21650 <lv_obj_get_style_list>
    if(style_dsc == NULL) {
   2167a:	b118      	cbz	r0, 21684 <lv_obj_clean_style_list+0x10>
}
   2167c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _lv_style_list_reset(style_dsc);
   21680:	f001 ba2c 	b.w	22adc <_lv_style_list_reset>
}
   21684:	bd08      	pop	{r3, pc}

00021686 <_lv_obj_disable_style_caching>:
{
   21686:	b570      	push	{r4, r5, r6, lr}
   21688:	4606      	mov	r6, r0
   2168a:	460d      	mov	r5, r1
   2168c:	2400      	movs	r4, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   2168e:	b2e1      	uxtb	r1, r4
   21690:	4630      	mov	r0, r6
   21692:	f7ff ffdd 	bl	21650 <lv_obj_get_style_list>
        if(list == NULL) break;
   21696:	b130      	cbz	r0, 216a6 <_lv_obj_disable_style_caching+0x20>
        list->ignore_cache = dis;
   21698:	7943      	ldrb	r3, [r0, #5]
   2169a:	3401      	adds	r4, #1
   2169c:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   216a0:	2c40      	cmp	r4, #64	; 0x40
        list->ignore_cache = dis;
   216a2:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   216a4:	d1f3      	bne.n	2168e <_lv_obj_disable_style_caching+0x8>
{
   216a6:	2440      	movs	r4, #64	; 0x40
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   216a8:	4621      	mov	r1, r4
   216aa:	4630      	mov	r0, r6
   216ac:	f7ff ffd0 	bl	21650 <lv_obj_get_style_list>
        if(list == NULL) break;
   216b0:	b138      	cbz	r0, 216c2 <_lv_obj_disable_style_caching+0x3c>
        list->ignore_cache = dis;
   216b2:	7943      	ldrb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   216b4:	3401      	adds	r4, #1
   216b6:	b2e4      	uxtb	r4, r4
        list->ignore_cache = dis;
   216b8:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   216bc:	2cff      	cmp	r4, #255	; 0xff
        list->ignore_cache = dis;
   216be:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   216c0:	d1f2      	bne.n	216a8 <_lv_obj_disable_style_caching+0x22>
}
   216c2:	bd70      	pop	{r4, r5, r6, pc}

000216c4 <lv_obj_get_state>:
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
   216c4:	293f      	cmp	r1, #63	; 0x3f
{
   216c6:	b507      	push	{r0, r1, r2, lr}
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
   216c8:	d804      	bhi.n	216d4 <lv_obj_get_state+0x10>
   216ca:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
   216ce:	b003      	add	sp, #12
   216d0:	f85d fb04 	ldr.w	pc, [sp], #4
    info.part = part;
   216d4:	f88d 1004 	strb.w	r1, [sp, #4]
    info.result = LV_STATE_DEFAULT;
   216d8:	2300      	movs	r3, #0
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
   216da:	aa01      	add	r2, sp, #4
   216dc:	2109      	movs	r1, #9
    info.result = LV_STATE_DEFAULT;
   216de:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
   216e2:	f7ff fded 	bl	212c0 <lv_signal_send>
    return info.result;
   216e6:	f89d 0005 	ldrb.w	r0, [sp, #5]
   216ea:	e7f0      	b.n	216ce <lv_obj_get_state+0xa>

000216ec <_lv_obj_get_style_color>:
{
   216ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   216f0:	4605      	mov	r5, r0
   216f2:	460e      	mov	r6, r1
   216f4:	4617      	mov	r7, r2
    while(parent) {
   216f6:	4614      	mov	r4, r2
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   216f8:	f342 2907 	sbfx	r9, r2, #8, #8
    while(parent) {
   216fc:	b93d      	cbnz	r5, 2170e <_lv_obj_get_style_color+0x22>
    prop = prop & (~LV_STYLE_STATE_MASK);
   216fe:	f424 40fe 	bic.w	r0, r4, #32512	; 0x7f00
    switch(prop) {
   21702:	3829      	subs	r0, #41	; 0x29
            return LV_COLOR_WHITE;
   21704:	2801      	cmp	r0, #1
   21706:	bf8c      	ite	hi
   21708:	2000      	movhi	r0, #0
   2170a:	2001      	movls	r0, #1
   2170c:	e014      	b.n	21738 <_lv_obj_get_style_color+0x4c>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   2170e:	4631      	mov	r1, r6
   21710:	4628      	mov	r0, r5
   21712:	f7ff ff9d 	bl	21650 <lv_obj_get_style_list>
        lv_state_t state = lv_obj_get_state(parent, part);
   21716:	4631      	mov	r1, r6
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   21718:	4680      	mov	r8, r0
        lv_state_t state = lv_obj_get_state(parent, part);
   2171a:	4628      	mov	r0, r5
   2171c:	f7ff ffd2 	bl	216c4 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   21720:	eb07 2400 	add.w	r4, r7, r0, lsl #8
   21724:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
   21726:	aa01      	add	r2, sp, #4
   21728:	4621      	mov	r1, r4
   2172a:	4640      	mov	r0, r8
   2172c:	f001 fab2 	bl	22c94 <_lv_style_list_get_color>
        if(res == LV_RES_OK) return value_act;
   21730:	2801      	cmp	r0, #1
   21732:	d104      	bne.n	2173e <_lv_obj_get_style_color+0x52>
   21734:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
   21738:	b003      	add	sp, #12
   2173a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   2173e:	f1b9 0f00 	cmp.w	r9, #0
   21742:	dadc      	bge.n	216fe <_lv_obj_get_style_color+0x12>
        if(part != LV_OBJ_PART_MAIN) {
   21744:	b906      	cbnz	r6, 21748 <_lv_obj_get_style_color+0x5c>
    return obj->parent;
   21746:	682d      	ldr	r5, [r5, #0]
{
   21748:	2600      	movs	r6, #0
   2174a:	e7d7      	b.n	216fc <_lv_obj_get_style_color+0x10>

0002174c <lv_obj_get_style_clip_corner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   2174c:	b508      	push	{r3, lr}
   2174e:	2202      	movs	r2, #2
   21750:	f7f4 fdf6 	bl	16340 <_lv_obj_get_style_int>
   21754:	3800      	subs	r0, #0
   21756:	bf18      	it	ne
   21758:	2001      	movne	r0, #1
   2175a:	bd08      	pop	{r3, pc}

0002175c <_lv_obj_get_style_opa>:
{
   2175c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21760:	4605      	mov	r5, r0
   21762:	b085      	sub	sp, #20
   21764:	460f      	mov	r7, r1
   21766:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
   21768:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
   2176c:	4614      	mov	r4, r2
            switch(prop & (~LV_STYLE_STATE_MASK)) {
   2176e:	f248 0a0c 	movw	sl, #32780	; 0x800c
   21772:	f248 0bad 	movw	fp, #32941	; 0x80ad
    while(parent) {
   21776:	b96d      	cbnz	r5, 21794 <_lv_obj_get_style_opa+0x38>
    prop = prop & (~LV_STYLE_STATE_MASK);
   21778:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
   2177c:	2c6d      	cmp	r4, #109	; 0x6d
    prop = prop & (~LV_STYLE_STATE_MASK);
   2177e:	b2a0      	uxth	r0, r4
    switch(prop) {
   21780:	d04f      	beq.n	21822 <_lv_obj_get_style_opa+0xc6>
   21782:	f248 03ad 	movw	r3, #32941	; 0x80ad
   21786:	4298      	cmp	r0, r3
   21788:	d04b      	beq.n	21822 <_lv_obj_get_style_opa+0xc6>
   2178a:	282c      	cmp	r0, #44	; 0x2c
   2178c:	bf14      	ite	ne
   2178e:	20ff      	movne	r0, #255	; 0xff
   21790:	2000      	moveq	r0, #0
   21792:	e036      	b.n	21802 <_lv_obj_get_style_opa+0xa6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   21794:	4639      	mov	r1, r7
   21796:	4628      	mov	r0, r5
   21798:	f7ff ff5a 	bl	21650 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
   2179c:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   2179e:	4606      	mov	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
   217a0:	0718      	lsls	r0, r3, #28
   217a2:	d41d      	bmi.n	217e0 <_lv_obj_get_style_opa+0x84>
   217a4:	7932      	ldrb	r2, [r6, #4]
   217a6:	0691      	lsls	r1, r2, #26
   217a8:	d01a      	beq.n	217e0 <_lv_obj_get_style_opa+0x84>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
   217aa:	f013 0f04 	tst.w	r3, #4
   217ae:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
   217b2:	d105      	bne.n	217c0 <_lv_obj_get_style_opa+0x64>
   217b4:	4639      	mov	r1, r7
   217b6:	4628      	mov	r0, r5
   217b8:	9201      	str	r2, [sp, #4]
   217ba:	f7f4 febd 	bl	16538 <update_style_cache>
   217be:	9a01      	ldr	r2, [sp, #4]
            switch(prop & (~LV_STYLE_STATE_MASK)) {
   217c0:	4552      	cmp	r2, sl
   217c2:	d009      	beq.n	217d8 <_lv_obj_get_style_opa+0x7c>
   217c4:	455a      	cmp	r2, fp
   217c6:	d01f      	beq.n	21808 <_lv_obj_get_style_opa+0xac>
   217c8:	2a2c      	cmp	r2, #44	; 0x2c
   217ca:	d109      	bne.n	217e0 <_lv_obj_get_style_opa+0x84>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
   217cc:	79b3      	ldrb	r3, [r6, #6]
   217ce:	06da      	lsls	r2, r3, #27
   217d0:	d425      	bmi.n	2181e <_lv_obj_get_style_opa+0xc2>
                    if(list->bg_opa_transp) def = true;
   217d2:	f013 0f08 	tst.w	r3, #8
   217d6:	e002      	b.n	217de <_lv_obj_get_style_opa+0x82>
                    if(list->opa_scale_cover) def = true;
   217d8:	7973      	ldrb	r3, [r6, #5]
   217da:	f013 0f20 	tst.w	r3, #32
                    if(list->img_recolor_opa_transp) def = true;
   217de:	d1cb      	bne.n	21778 <_lv_obj_get_style_opa+0x1c>
        lv_state_t state = lv_obj_get_state(parent, part);
   217e0:	4639      	mov	r1, r7
   217e2:	4628      	mov	r0, r5
   217e4:	f7ff ff6e 	bl	216c4 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   217e8:	eb08 2400 	add.w	r4, r8, r0, lsl #8
   217ec:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(list, prop, &value_act);
   217ee:	f10d 020f 	add.w	r2, sp, #15
   217f2:	4621      	mov	r1, r4
   217f4:	4630      	mov	r0, r6
   217f6:	f001 fa8e 	bl	22d16 <_lv_style_list_get_opa>
        if(res == LV_RES_OK) return value_act;
   217fa:	2801      	cmp	r0, #1
   217fc:	d108      	bne.n	21810 <_lv_obj_get_style_opa+0xb4>
   217fe:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
   21802:	b005      	add	sp, #20
   21804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if(list->img_recolor_opa_transp) def = true;
   21808:	79f3      	ldrb	r3, [r6, #7]
   2180a:	f013 0f10 	tst.w	r3, #16
   2180e:	e7e6      	b.n	217de <_lv_obj_get_style_opa+0x82>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   21810:	f019 0f80 	tst.w	r9, #128	; 0x80
   21814:	d0b0      	beq.n	21778 <_lv_obj_get_style_opa+0x1c>
        if(part != LV_OBJ_PART_MAIN) {
   21816:	b907      	cbnz	r7, 2181a <_lv_obj_get_style_opa+0xbe>
    return obj->parent;
   21818:	682d      	ldr	r5, [r5, #0]
{
   2181a:	2700      	movs	r7, #0
   2181c:	e7ab      	b.n	21776 <_lv_obj_get_style_opa+0x1a>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
   2181e:	20ff      	movs	r0, #255	; 0xff
   21820:	e7ef      	b.n	21802 <_lv_obj_get_style_opa+0xa6>
            return LV_OPA_TRANSP;
   21822:	2000      	movs	r0, #0
   21824:	e7ed      	b.n	21802 <_lv_obj_get_style_opa+0xa6>

00021826 <_lv_obj_get_style_ptr>:
{
   21826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2182a:	4606      	mov	r6, r0
   2182c:	468b      	mov	fp, r1
   2182e:	4690      	mov	r8, r2
    while(parent) {
   21830:	4614      	mov	r4, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   21832:	f248 098e 	movw	r9, #32910	; 0x808e
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   21836:	f342 2a07 	sbfx	sl, r2, #8, #8
    while(parent) {
   2183a:	b316      	cbz	r6, 21882 <_lv_obj_get_style_ptr+0x5c>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   2183c:	4659      	mov	r1, fp
   2183e:	4630      	mov	r0, r6
   21840:	f7ff ff06 	bl	21650 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
   21844:	7943      	ldrb	r3, [r0, #5]
   21846:	0719      	lsls	r1, r3, #28
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   21848:	4607      	mov	r7, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
   2184a:	d42a      	bmi.n	218a2 <_lv_obj_get_style_ptr+0x7c>
   2184c:	7902      	ldrb	r2, [r0, #4]
   2184e:	0692      	lsls	r2, r2, #26
   21850:	d027      	beq.n	218a2 <_lv_obj_get_style_ptr+0x7c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
   21852:	f013 0f04 	tst.w	r3, #4
   21856:	f424 45fe 	bic.w	r5, r4, #32512	; 0x7f00
   2185a:	d104      	bne.n	21866 <_lv_obj_get_style_ptr+0x40>
   2185c:	462a      	mov	r2, r5
   2185e:	4659      	mov	r1, fp
   21860:	4630      	mov	r0, r6
   21862:	f7f4 fe69 	bl	16538 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   21866:	2d7f      	cmp	r5, #127	; 0x7f
   21868:	d007      	beq.n	2187a <_lv_obj_get_style_ptr+0x54>
   2186a:	454d      	cmp	r5, r9
   2186c:	d015      	beq.n	2189a <_lv_obj_get_style_ptr+0x74>
   2186e:	2d6e      	cmp	r5, #110	; 0x6e
   21870:	d117      	bne.n	218a2 <_lv_obj_get_style_ptr+0x7c>
                    if(list->pattern_img_null) def = true;
   21872:	79fb      	ldrb	r3, [r7, #7]
   21874:	f013 0f02 	tst.w	r3, #2
   21878:	e002      	b.n	21880 <_lv_obj_get_style_ptr+0x5a>
                    if(list->value_txt_str) def = true;
   2187a:	79fb      	ldrb	r3, [r7, #7]
   2187c:	f013 0f08 	tst.w	r3, #8
                    if(list->pattern_img_null) def = true;
   21880:	d00f      	beq.n	218a2 <_lv_obj_get_style_ptr+0x7c>
    prop = prop & (~LV_STYLE_STATE_MASK);
   21882:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
   21886:	2c7e      	cmp	r4, #126	; 0x7e
    prop = prop & (~LV_STYLE_STATE_MASK);
   21888:	b2a2      	uxth	r2, r4
    switch(prop) {
   2188a:	d003      	beq.n	21894 <_lv_obj_get_style_ptr+0x6e>
   2188c:	f248 038e 	movw	r3, #32910	; 0x808e
   21890:	429a      	cmp	r2, r3
   21892:	d122      	bne.n	218da <_lv_obj_get_style_ptr+0xb4>
            return lv_theme_get_font_normal();
   21894:	f7f7 fec0 	bl	19618 <lv_theme_get_font_normal>
   21898:	e012      	b.n	218c0 <_lv_obj_get_style_ptr+0x9a>
                    if(list->text_font_normal) def = true;
   2189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   2189e:	2b00      	cmp	r3, #0
   218a0:	dbef      	blt.n	21882 <_lv_obj_get_style_ptr+0x5c>
        lv_state_t state = lv_obj_get_state(parent, part);
   218a2:	4659      	mov	r1, fp
   218a4:	4630      	mov	r0, r6
   218a6:	f7ff ff0d 	bl	216c4 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   218aa:	eb08 2400 	add.w	r4, r8, r0, lsl #8
   218ae:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
   218b0:	aa01      	add	r2, sp, #4
   218b2:	4621      	mov	r1, r4
   218b4:	4638      	mov	r0, r7
   218b6:	f001 fa70 	bl	22d9a <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
   218ba:	2801      	cmp	r0, #1
   218bc:	d103      	bne.n	218c6 <_lv_obj_get_style_ptr+0xa0>
   218be:	9801      	ldr	r0, [sp, #4]
}
   218c0:	b003      	add	sp, #12
   218c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   218c6:	f1ba 0f00 	cmp.w	sl, #0
   218ca:	dada      	bge.n	21882 <_lv_obj_get_style_ptr+0x5c>
        if(part != LV_OBJ_PART_MAIN) {
   218cc:	f1bb 0f00 	cmp.w	fp, #0
   218d0:	d100      	bne.n	218d4 <_lv_obj_get_style_ptr+0xae>
    return obj->parent;
   218d2:	6836      	ldr	r6, [r6, #0]
{
   218d4:	f04f 0b00 	mov.w	fp, #0
   218d8:	e7af      	b.n	2183a <_lv_obj_get_style_ptr+0x14>
    switch(prop) {
   218da:	2000      	movs	r0, #0
   218dc:	e7f0      	b.n	218c0 <_lv_obj_get_style_ptr+0x9a>

000218de <update_style_cache_children>:
{
   218de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   218e2:	4605      	mov	r5, r0
   218e4:	2700      	movs	r7, #0
   218e6:	b2fe      	uxtb	r6, r7
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   218e8:	4631      	mov	r1, r6
   218ea:	4628      	mov	r0, r5
   218ec:	f7ff feb0 	bl	21650 <lv_obj_get_style_list>
        if(list == NULL) break;
   218f0:	4604      	mov	r4, r0
   218f2:	2800      	cmp	r0, #0
   218f4:	d055      	beq.n	219a2 <update_style_cache_children+0xc4>
        bool ignore_cache_ori = list->ignore_cache;
   218f6:	7943      	ldrb	r3, [r0, #5]
   218f8:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
   218fc:	f043 0308 	orr.w	r3, r3, #8
   21900:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   21902:	f248 020c 	movw	r2, #32780	; 0x800c
   21906:	4631      	mov	r1, r6
   21908:	4628      	mov	r0, r5
   2190a:	f7ff ff27 	bl	2175c <_lv_obj_get_style_opa>
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
   2190e:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
   21912:	4258      	negs	r0, r3
   21914:	4158      	adcs	r0, r3
   21916:	7963      	ldrb	r3, [r4, #5]
   21918:	f360 1345 	bfi	r3, r0, #5, #1
   2191c:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   2191e:	f248 0282 	movw	r2, #32898	; 0x8082
   21922:	4631      	mov	r1, r6
   21924:	4628      	mov	r0, r5
   21926:	f7f4 fd0b 	bl	16340 <_lv_obj_get_style_int>
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
   2192a:	b2c0      	uxtb	r0, r0
   2192c:	79e3      	ldrb	r3, [r4, #7]
   2192e:	fab0 f080 	clz	r0, r0
   21932:	0940      	lsrs	r0, r0, #5
   21934:	f360 1386 	bfi	r3, r0, #6, #1
   21938:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   2193a:	f248 028e 	movw	r2, #32910	; 0x808e
   2193e:	4631      	mov	r1, r6
   21940:	4628      	mov	r0, r5
   21942:	f7ff ff70 	bl	21826 <_lv_obj_get_style_ptr>
   21946:	4681      	mov	r9, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
   21948:	f7f7 fe66 	bl	19618 <lv_theme_get_font_normal>
   2194c:	eba9 0200 	sub.w	r2, r9, r0
   21950:	f1d2 0900 	rsbs	r9, r2, #0
   21954:	79e3      	ldrb	r3, [r4, #7]
   21956:	eb49 0902 	adc.w	r9, r9, r2
   2195a:	f369 13c7 	bfi	r3, r9, #7, #1
   2195e:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
   21960:	f248 02ad 	movw	r2, #32941	; 0x80ad
   21964:	4631      	mov	r1, r6
   21966:	4628      	mov	r0, r5
   21968:	f7ff fef8 	bl	2175c <_lv_obj_get_style_opa>
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
   2196c:	79e3      	ldrb	r3, [r4, #7]
   2196e:	2800      	cmp	r0, #0
   21970:	bf0c      	ite	eq
   21972:	2030      	moveq	r0, #48	; 0x30
   21974:	2020      	movne	r0, #32
   21976:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   2197a:	4318      	orrs	r0, r3
   2197c:	71e0      	strb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   2197e:	f248 0280 	movw	r2, #32896	; 0x8080
   21982:	4631      	mov	r1, r6
   21984:	4628      	mov	r0, r5
   21986:	f7f4 fcdb 	bl	16340 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   2198a:	b188      	cbz	r0, 219b0 <update_style_cache_children+0xd2>
            list->text_space_zero = 0;
   2198c:	79e3      	ldrb	r3, [r4, #7]
   2198e:	f36f 1345 	bfc	r3, #5, #1
   21992:	71e3      	strb	r3, [r4, #7]
        list->ignore_cache = ignore_cache_ori;
   21994:	7963      	ldrb	r3, [r4, #5]
   21996:	3701      	adds	r7, #1
   21998:	f368 03c3 	bfi	r3, r8, #3, #1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
   2199c:	2f40      	cmp	r7, #64	; 0x40
        list->ignore_cache = ignore_cache_ori;
   2199e:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
   219a0:	d1a1      	bne.n	218e6 <update_style_cache_children+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
   219a2:	1d28      	adds	r0, r5, #4
   219a4:	f003 feee 	bl	25784 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
   219a8:	4604      	mov	r4, r0
    while(child) {
   219aa:	b950      	cbnz	r0, 219c2 <update_style_cache_children+0xe4>
}
   219ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   219b0:	f248 0281 	movw	r2, #32897	; 0x8081
   219b4:	4631      	mov	r1, r6
   219b6:	4628      	mov	r0, r5
   219b8:	f7f4 fcc2 	bl	16340 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   219bc:	2800      	cmp	r0, #0
   219be:	d1e5      	bne.n	2198c <update_style_cache_children+0xae>
   219c0:	e7e8      	b.n	21994 <update_style_cache_children+0xb6>
        update_style_cache_children(child);
   219c2:	4620      	mov	r0, r4
   219c4:	f7ff ff8b 	bl	218de <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
   219c8:	4621      	mov	r1, r4
   219ca:	4628      	mov	r0, r5
   219cc:	f7ff fe09 	bl	215e2 <lv_obj_get_child>
   219d0:	e7ea      	b.n	219a8 <update_style_cache_children+0xca>

000219d2 <lv_obj_reset_style_list>:
{
   219d2:	b538      	push	{r3, r4, r5, lr}
   219d4:	4604      	mov	r4, r0
   219d6:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
   219d8:	f7ff fe4c 	bl	21674 <lv_obj_clean_style_list>
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   219dc:	4629      	mov	r1, r5
   219de:	4620      	mov	r0, r4
   219e0:	22ff      	movs	r2, #255	; 0xff
}
   219e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   219e6:	f7f4 bf01 	b.w	167ec <lv_obj_refresh_style>

000219ea <lv_obj_get_signal_cb>:
}
   219ea:	69c0      	ldr	r0, [r0, #28]
   219ec:	4770      	bx	lr

000219ee <lv_obj_get_ext_attr>:
}
   219ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
   219f0:	4770      	bx	lr

000219f2 <lv_obj_handle_get_type_signal>:
{
   219f2:	b510      	push	{r4, lr}
   219f4:	2300      	movs	r3, #0
        if(buf->type[i] == NULL) break;
   219f6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   219fa:	b2da      	uxtb	r2, r3
   219fc:	b11c      	cbz	r4, 21a06 <lv_obj_handle_get_type_signal+0x14>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
   219fe:	3301      	adds	r3, #1
   21a00:	2b07      	cmp	r3, #7
   21a02:	d1f8      	bne.n	219f6 <lv_obj_handle_get_type_signal+0x4>
   21a04:	461a      	mov	r2, r3
    buf->type[i] = name;
   21a06:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   21a0a:	2001      	movs	r0, #1
   21a0c:	bd10      	pop	{r4, pc}

00021a0e <lv_obj_init_draw_rect_dsc>:
{
   21a0e:	b570      	push	{r4, r5, r6, lr}
   21a10:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   21a12:	2201      	movs	r2, #1
   21a14:	4605      	mov	r5, r0
   21a16:	460e      	mov	r6, r1
   21a18:	f7f4 fc92 	bl	16340 <_lv_obj_get_style_int>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
   21a1c:	7aa3      	ldrb	r3, [r4, #10]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
   21a1e:	8020      	strh	r0, [r4, #0]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
   21a20:	b33b      	cbz	r3, 21a72 <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   21a22:	222c      	movs	r2, #44	; 0x2c
   21a24:	4631      	mov	r1, r6
   21a26:	4628      	mov	r0, r5
   21a28:	f7ff fe98 	bl	2175c <_lv_obj_get_style_opa>
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
   21a2c:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
   21a2e:	72a0      	strb	r0, [r4, #10]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
   21a30:	d91f      	bls.n	21a72 <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   21a32:	2229      	movs	r2, #41	; 0x29
   21a34:	4631      	mov	r1, r6
   21a36:	4628      	mov	r0, r5
   21a38:	f7ff fe58 	bl	216ec <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
   21a3c:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
   21a3e:	70a0      	strb	r0, [r4, #2]
   21a40:	4631      	mov	r1, r6
   21a42:	4628      	mov	r0, r5
   21a44:	f7f4 fc7c 	bl	16340 <_lv_obj_get_style_int>
   21a48:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
   21a4a:	7120      	strb	r0, [r4, #4]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
   21a4c:	b188      	cbz	r0, 21a72 <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
   21a4e:	222a      	movs	r2, #42	; 0x2a
   21a50:	4631      	mov	r1, r6
   21a52:	4628      	mov	r0, r5
   21a54:	f7ff fe4a 	bl	216ec <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
   21a58:	2221      	movs	r2, #33	; 0x21
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
   21a5a:	70e0      	strb	r0, [r4, #3]
   21a5c:	4631      	mov	r1, r6
   21a5e:	4628      	mov	r0, r5
   21a60:	f7f4 fc6e 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
   21a64:	2222      	movs	r2, #34	; 0x22
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
   21a66:	80e0      	strh	r0, [r4, #6]
   21a68:	4631      	mov	r1, r6
   21a6a:	4628      	mov	r0, r5
   21a6c:	f7f4 fc68 	bl	16340 <_lv_obj_get_style_int>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
   21a70:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   21a72:	2230      	movs	r2, #48	; 0x30
   21a74:	4631      	mov	r1, r6
   21a76:	4628      	mov	r0, r5
   21a78:	f7f4 fc62 	bl	16340 <_lv_obj_get_style_int>
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
   21a7c:	81e0      	strh	r0, [r4, #14]
    if(draw_dsc->border_width) {
   21a7e:	b1b0      	cbz	r0, 21aae <lv_obj_init_draw_rect_dsc+0xa0>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
   21a80:	7ca3      	ldrb	r3, [r4, #18]
   21a82:	b1a3      	cbz	r3, 21aae <lv_obj_init_draw_rect_dsc+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   21a84:	223c      	movs	r2, #60	; 0x3c
   21a86:	4631      	mov	r1, r6
   21a88:	4628      	mov	r0, r5
   21a8a:	f7ff fe67 	bl	2175c <_lv_obj_get_style_opa>
            if(draw_dsc->border_opa > LV_OPA_MIN) {
   21a8e:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
   21a90:	74a0      	strb	r0, [r4, #18]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
   21a92:	d90c      	bls.n	21aae <lv_obj_init_draw_rect_dsc+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   21a94:	2231      	movs	r2, #49	; 0x31
   21a96:	4631      	mov	r1, r6
   21a98:	4628      	mov	r0, r5
   21a9a:	f7f4 fc51 	bl	16340 <_lv_obj_get_style_int>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
   21a9e:	b2c0      	uxtb	r0, r0
   21aa0:	8220      	strh	r0, [r4, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   21aa2:	2239      	movs	r2, #57	; 0x39
   21aa4:	4631      	mov	r1, r6
   21aa6:	4628      	mov	r0, r5
   21aa8:	f7ff fe20 	bl	216ec <_lv_obj_get_style_color>
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
   21aac:	7320      	strb	r0, [r4, #12]
}
   21aae:	bd70      	pop	{r4, r5, r6, pc}

00021ab0 <lv_obj_design>:
{
   21ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
   21ab4:	2a02      	cmp	r2, #2
{
   21ab6:	b098      	sub	sp, #96	; 0x60
   21ab8:	4604      	mov	r4, r0
   21aba:	4688      	mov	r8, r1
   21abc:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
   21abe:	d15b      	bne.n	21b78 <lv_obj_design+0xc8>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
   21ac0:	2100      	movs	r1, #0
   21ac2:	f7ff fe43 	bl	2174c <lv_obj_get_style_clip_corner>
   21ac6:	4606      	mov	r6, r0
   21ac8:	2800      	cmp	r0, #0
   21aca:	d153      	bne.n	21b74 <lv_obj_design+0xc4>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   21acc:	4601      	mov	r1, r0
   21ace:	2201      	movs	r2, #1
   21ad0:	4620      	mov	r0, r4
   21ad2:	f7f4 fc35 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   21ad6:	2204      	movs	r2, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   21ad8:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   21ada:	4631      	mov	r1, r6
   21adc:	4620      	mov	r0, r4
   21ade:	f7f4 fc2f 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   21ae2:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   21ae4:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   21ae6:	4631      	mov	r1, r6
   21ae8:	4620      	mov	r0, r4
   21aea:	f7f4 fc29 	bl	16340 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
   21aee:	f104 0110 	add.w	r1, r4, #16
   21af2:	4681      	mov	r9, r0
   21af4:	a805      	add	r0, sp, #20
   21af6:	f7ff fbca 	bl	2128e <lv_area_copy>
        coords.x1 -= w;
   21afa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        coords.x2 += w;
   21afe:	f8bd 0018 	ldrh.w	r0, [sp, #24]
        coords.x1 -= w;
   21b02:	1bdb      	subs	r3, r3, r7
   21b04:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
   21b08:	4407      	add	r7, r0
        coords.y1 -= h;
   21b0a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
        coords.y2 += h;
   21b0e:	f8bd 001a 	ldrh.w	r0, [sp, #26]
        coords.x2 += w;
   21b12:	f8ad 7018 	strh.w	r7, [sp, #24]
        coords.y1 -= h;
   21b16:	eba3 0309 	sub.w	r3, r3, r9
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   21b1a:	4652      	mov	r2, sl
        coords.y2 += h;
   21b1c:	4481      	add	r9, r0
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   21b1e:	a905      	add	r1, sp, #20
   21b20:	4640      	mov	r0, r8
        coords.y1 -= h;
   21b22:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
   21b26:	f8ad 901a 	strh.w	r9, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   21b2a:	f003 fc77 	bl	2541c <_lv_area_is_in>
   21b2e:	b1e8      	cbz	r0, 21b6c <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   21b30:	222c      	movs	r2, #44	; 0x2c
   21b32:	4631      	mov	r1, r6
   21b34:	4620      	mov	r0, r4
   21b36:	f7ff fe11 	bl	2175c <_lv_obj_get_style_opa>
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
   21b3a:	28fc      	cmp	r0, #252	; 0xfc
   21b3c:	d916      	bls.n	21b6c <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
   21b3e:	4631      	mov	r1, r6
   21b40:	2220      	movs	r2, #32
   21b42:	4620      	mov	r0, r4
   21b44:	f7f4 fbfc 	bl	16340 <_lv_obj_get_style_int>
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
   21b48:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
   21b4c:	d10e      	bne.n	21b6c <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
   21b4e:	2232      	movs	r2, #50	; 0x32
   21b50:	4620      	mov	r0, r4
   21b52:	f7f4 fbf5 	bl	16340 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
   21b56:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
   21b5a:	d107      	bne.n	21b6c <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   21b5c:	f248 020c 	movw	r2, #32780	; 0x800c
   21b60:	4620      	mov	r0, r4
   21b62:	f7ff fdfb 	bl	2175c <_lv_obj_get_style_opa>
        return  LV_DESIGN_RES_COVER;
   21b66:	28fc      	cmp	r0, #252	; 0xfc
   21b68:	bf88      	it	hi
   21b6a:	2501      	movhi	r5, #1
}
   21b6c:	4628      	mov	r0, r5
   21b6e:	b018      	add	sp, #96	; 0x60
   21b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
   21b74:	2503      	movs	r5, #3
   21b76:	e7f9      	b.n	21b6c <lv_obj_design+0xbc>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   21b78:	2a00      	cmp	r2, #0
   21b7a:	d178      	bne.n	21c6e <lv_obj_design+0x1be>
        lv_draw_rect_dsc_init(&draw_dsc);
   21b7c:	a805      	add	r0, sp, #20
   21b7e:	f7f6 fca3 	bl	184c8 <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   21b82:	2233      	movs	r2, #51	; 0x33
   21b84:	4629      	mov	r1, r5
   21b86:	4620      	mov	r0, r4
   21b88:	f7f4 fbda 	bl	16340 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
   21b8c:	b128      	cbz	r0, 21b9a <lv_obj_design+0xea>
            draw_dsc.border_post = 1;
   21b8e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   21b92:	f043 0301 	orr.w	r3, r3, #1
   21b96:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   21b9a:	aa05      	add	r2, sp, #20
   21b9c:	2100      	movs	r1, #0
   21b9e:	4620      	mov	r0, r4
   21ba0:	f7ff ff35 	bl	21a0e <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   21ba4:	2204      	movs	r2, #4
   21ba6:	2100      	movs	r1, #0
   21ba8:	4620      	mov	r0, r4
   21baa:	f7f4 fbc9 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   21bae:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   21bb0:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   21bb2:	2100      	movs	r1, #0
   21bb4:	4620      	mov	r0, r4
   21bb6:	f7f4 fbc3 	bl	16340 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
   21bba:	f104 0910 	add.w	r9, r4, #16
   21bbe:	4607      	mov	r7, r0
   21bc0:	4649      	mov	r1, r9
   21bc2:	a801      	add	r0, sp, #4
   21bc4:	f7ff fb63 	bl	2128e <lv_area_copy>
        coords.x1 -= w;
   21bc8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        coords.x2 += w;
   21bcc:	f8bd 0008 	ldrh.w	r0, [sp, #8]
        coords.x1 -= w;
   21bd0:	1b9b      	subs	r3, r3, r6
   21bd2:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
   21bd6:	4406      	add	r6, r0
        coords.y1 -= h;
   21bd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        coords.y2 += h;
   21bdc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
        coords.x2 += w;
   21be0:	f8ad 6008 	strh.w	r6, [sp, #8]
        coords.y1 -= h;
   21be4:	1bdb      	subs	r3, r3, r7
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   21be6:	4641      	mov	r1, r8
        coords.y2 += h;
   21be8:	4407      	add	r7, r0
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   21bea:	aa05      	add	r2, sp, #20
   21bec:	a801      	add	r0, sp, #4
        coords.y1 -= h;
   21bee:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
   21bf2:	f8ad 700a 	strh.w	r7, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   21bf6:	f002 fbe9 	bl	243cc <lv_draw_rect>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
   21bfa:	2100      	movs	r1, #0
   21bfc:	4620      	mov	r0, r4
   21bfe:	f7ff fda5 	bl	2174c <lv_obj_get_style_clip_corner>
   21c02:	2800      	cmp	r0, #0
   21c04:	d0b2      	beq.n	21b6c <lv_obj_design+0xbc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
   21c06:	201c      	movs	r0, #28
   21c08:	f7f7 f850 	bl	18cac <_lv_mem_buf_get>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   21c0c:	2201      	movs	r2, #1
   21c0e:	4606      	mov	r6, r0
   21c10:	2100      	movs	r1, #0
   21c12:	4620      	mov	r0, r4
   21c14:	f7f4 fb94 	bl	16340 <_lv_obj_get_style_int>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
   21c18:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   21c1c:	07db      	lsls	r3, r3, #31
   21c1e:	4602      	mov	r2, r0
   21c20:	d522      	bpl.n	21c68 <lv_obj_design+0x1b8>
   21c22:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   21c26:	2b01      	cmp	r3, #1
   21c28:	d91e      	bls.n	21c68 <lv_obj_design+0x1b8>
   21c2a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
   21c2e:	2b00      	cmp	r3, #0
   21c30:	dd1a      	ble.n	21c68 <lv_obj_design+0x1b8>
                cc_area.x1 = obj->coords.x1 + 1;
   21c32:	8a23      	ldrh	r3, [r4, #16]
   21c34:	3301      	adds	r3, #1
   21c36:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
   21c3a:	8a63      	ldrh	r3, [r4, #18]
   21c3c:	3301      	adds	r3, #1
   21c3e:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
   21c42:	8aa3      	ldrh	r3, [r4, #20]
   21c44:	3b01      	subs	r3, #1
   21c46:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
   21c4a:	8ae3      	ldrh	r3, [r4, #22]
   21c4c:	3b01      	subs	r3, #1
   21c4e:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
   21c52:	a903      	add	r1, sp, #12
   21c54:	2300      	movs	r3, #0
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
   21c56:	4630      	mov	r0, r6
   21c58:	f7f6 fc0c 	bl	18474 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
   21c5c:	f504 71f0 	add.w	r1, r4, #480	; 0x1e0
   21c60:	4630      	mov	r0, r6
   21c62:	f7f6 fb15 	bl	18290 <lv_draw_mask_add>
   21c66:	e781      	b.n	21b6c <lv_obj_design+0xbc>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
   21c68:	2300      	movs	r3, #0
   21c6a:	4649      	mov	r1, r9
   21c6c:	e7f3      	b.n	21c56 <lv_obj_design+0x1a6>
    else if(mode == LV_DESIGN_DRAW_POST) {
   21c6e:	2a01      	cmp	r2, #1
   21c70:	d001      	beq.n	21c76 <lv_obj_design+0x1c6>
    return LV_DESIGN_RES_OK;
   21c72:	2500      	movs	r5, #0
   21c74:	e77a      	b.n	21b6c <lv_obj_design+0xbc>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
   21c76:	2100      	movs	r1, #0
   21c78:	f7ff fd68 	bl	2174c <lv_obj_get_style_clip_corner>
   21c7c:	b128      	cbz	r0, 21c8a <lv_obj_design+0x1da>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
   21c7e:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   21c82:	f7f6 fb51 	bl	18328 <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
   21c86:	f7f7 f873 	bl	18d70 <_lv_mem_buf_release>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   21c8a:	2233      	movs	r2, #51	; 0x33
   21c8c:	2100      	movs	r1, #0
   21c8e:	4620      	mov	r0, r4
   21c90:	f7f4 fb56 	bl	16340 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
   21c94:	2800      	cmp	r0, #0
   21c96:	d0ec      	beq.n	21c72 <lv_obj_design+0x1c2>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
   21c98:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
   21c9a:	a805      	add	r0, sp, #20
   21c9c:	f7f6 fc14 	bl	184c8 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   21ca0:	aa05      	add	r2, sp, #20
   21ca2:	4629      	mov	r1, r5
   21ca4:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
   21ca6:	f88d 501e 	strb.w	r5, [sp, #30]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
   21caa:	f88d 5045 	strb.w	r5, [sp, #69]	; 0x45
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
   21cae:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
            draw_dsc.value_opa = LV_OPA_TRANSP;
   21cb2:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   21cb6:	f7ff feaa 	bl	21a0e <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   21cba:	4629      	mov	r1, r5
   21cbc:	2204      	movs	r2, #4
   21cbe:	4620      	mov	r0, r4
   21cc0:	f7f4 fb3e 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   21cc4:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   21cc6:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   21cc8:	4629      	mov	r1, r5
   21cca:	4620      	mov	r0, r4
   21ccc:	f7f4 fb38 	bl	16340 <_lv_obj_get_style_int>
            lv_area_copy(&coords, &obj->coords);
   21cd0:	f104 0110 	add.w	r1, r4, #16
   21cd4:	4606      	mov	r6, r0
   21cd6:	a803      	add	r0, sp, #12
   21cd8:	f7ff fad9 	bl	2128e <lv_area_copy>
            coords.x1 -= w;
   21cdc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            coords.x2 += w;
   21ce0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
            coords.x1 -= w;
   21ce4:	1bdb      	subs	r3, r3, r7
   21ce6:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
   21cea:	4407      	add	r7, r0
            coords.y1 -= h;
   21cec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
            coords.y2 += h;
   21cf0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
            coords.x2 += w;
   21cf4:	f8ad 7010 	strh.w	r7, [sp, #16]
            coords.y1 -= h;
   21cf8:	1b9b      	subs	r3, r3, r6
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   21cfa:	aa05      	add	r2, sp, #20
            coords.y2 += h;
   21cfc:	4406      	add	r6, r0
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   21cfe:	4641      	mov	r1, r8
   21d00:	a803      	add	r0, sp, #12
            coords.y1 -= h;
   21d02:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
   21d06:	f8ad 6012 	strh.w	r6, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   21d0a:	f002 fb5f 	bl	243cc <lv_draw_rect>
   21d0e:	e72d      	b.n	21b6c <lv_obj_design+0xbc>

00021d10 <lv_obj_init_draw_label_dsc>:
{
   21d10:	b570      	push	{r4, r5, r6, lr}
   21d12:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
   21d14:	f248 028c 	movw	r2, #32908	; 0x808c
   21d18:	4605      	mov	r5, r0
   21d1a:	460e      	mov	r6, r1
   21d1c:	f7ff fd1e 	bl	2175c <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
   21d20:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
   21d22:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
   21d24:	d931      	bls.n	21d8a <lv_obj_init_draw_label_dsc+0x7a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   21d26:	f248 0289 	movw	r2, #32905	; 0x8089
   21d2a:	4631      	mov	r1, r6
   21d2c:	4628      	mov	r0, r5
   21d2e:	f7ff fcdd 	bl	216ec <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   21d32:	f248 0280 	movw	r2, #32896	; 0x8080
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
   21d36:	7020      	strb	r0, [r4, #0]
   21d38:	4631      	mov	r1, r6
   21d3a:	4628      	mov	r0, r5
   21d3c:	f7f4 fb00 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   21d40:	f248 0281 	movw	r2, #32897	; 0x8081
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
   21d44:	81a0      	strh	r0, [r4, #12]
   21d46:	4631      	mov	r1, r6
   21d48:	4628      	mov	r0, r5
   21d4a:	f7f4 faf9 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   21d4e:	f248 0282 	movw	r2, #32898	; 0x8082
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
   21d52:	8160      	strh	r0, [r4, #10]
   21d54:	4631      	mov	r1, r6
   21d56:	4628      	mov	r0, r5
   21d58:	f7f4 faf2 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   21d5c:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   21d60:	77a0      	strb	r0, [r4, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   21d62:	4631      	mov	r1, r6
   21d64:	4628      	mov	r0, r5
   21d66:	f7ff fd5e 	bl	21826 <_lv_obj_get_style_ptr>
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
   21d6a:	6922      	ldr	r2, [r4, #16]
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
   21d6c:	6060      	str	r0, [r4, #4]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
   21d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21d72:	429a      	cmp	r2, r3
   21d74:	d009      	beq.n	21d8a <lv_obj_init_draw_label_dsc+0x7a>
   21d76:	6962      	ldr	r2, [r4, #20]
   21d78:	429a      	cmp	r2, r3
   21d7a:	d006      	beq.n	21d8a <lv_obj_init_draw_label_dsc+0x7a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
   21d7c:	f248 028a 	movw	r2, #32906	; 0x808a
   21d80:	4631      	mov	r1, r6
   21d82:	4628      	mov	r0, r5
   21d84:	f7ff fcb2 	bl	216ec <_lv_obj_get_style_color>
        draw_dsc->color = lv_obj_get_style_text_sel_color(obj, part);
   21d88:	7020      	strb	r0, [r4, #0]
}
   21d8a:	bd70      	pop	{r4, r5, r6, pc}

00021d8c <lv_obj_init_draw_img_dsc>:
{
   21d8c:	b570      	push	{r4, r5, r6, lr}
   21d8e:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
   21d90:	f248 02ac 	movw	r2, #32940	; 0x80ac
   21d94:	4605      	mov	r5, r0
   21d96:	460e      	mov	r6, r1
   21d98:	f7ff fce0 	bl	2175c <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   21d9c:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
   21d9e:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   21da0:	d927      	bls.n	21df2 <lv_obj_init_draw_img_dsc+0x66>
    draw_dsc->angle = 0;
   21da2:	2300      	movs	r3, #0
   21da4:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
   21da6:	f44f 7380 	mov.w	r3, #256	; 0x100
   21daa:	8123      	strh	r3, [r4, #8]
   21dac:	8aab      	ldrh	r3, [r5, #20]
   21dae:	8a2a      	ldrh	r2, [r5, #16]
   21db0:	3301      	adds	r3, #1
   21db2:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
   21db4:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   21db8:	fa02 f383 	sxtah	r3, r2, r3
   21dbc:	105b      	asrs	r3, r3, #1
   21dbe:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   21dc0:	8aeb      	ldrh	r3, [r5, #22]
   21dc2:	8a6a      	ldrh	r2, [r5, #18]
   21dc4:	3301      	adds	r3, #1
   21dc6:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
   21dc8:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   21dcc:	fa02 f383 	sxtah	r3, r2, r3
   21dd0:	105b      	asrs	r3, r3, #1
   21dd2:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
   21dd4:	f248 02ad 	movw	r2, #32941	; 0x80ad
   21dd8:	4631      	mov	r1, r6
   21dda:	4628      	mov	r0, r5
   21ddc:	f7ff fcbe 	bl	2175c <_lv_obj_get_style_opa>
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
   21de0:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
   21de2:	b130      	cbz	r0, 21df2 <lv_obj_init_draw_img_dsc+0x66>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   21de4:	f248 02a9 	movw	r2, #32937	; 0x80a9
   21de8:	4631      	mov	r1, r6
   21dea:	4628      	mov	r0, r5
   21dec:	f7ff fc7e 	bl	216ec <_lv_obj_get_style_color>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
   21df0:	72e0      	strb	r0, [r4, #11]
}
   21df2:	bd70      	pop	{r4, r5, r6, pc}

00021df4 <lv_obj_init_draw_line_dsc>:
{
   21df4:	b570      	push	{r4, r5, r6, lr}
   21df6:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   21df8:	2290      	movs	r2, #144	; 0x90
   21dfa:	4605      	mov	r5, r0
   21dfc:	460e      	mov	r6, r1
   21dfe:	f7f4 fa9f 	bl	16340 <_lv_obj_get_style_int>
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
   21e02:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
   21e04:	b340      	cbz	r0, 21e58 <lv_obj_init_draw_line_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
   21e06:	229c      	movs	r2, #156	; 0x9c
   21e08:	4631      	mov	r1, r6
   21e0a:	4628      	mov	r0, r5
   21e0c:	f7ff fca6 	bl	2175c <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   21e10:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
   21e12:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   21e14:	d920      	bls.n	21e58 <lv_obj_init_draw_line_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   21e16:	2299      	movs	r2, #153	; 0x99
   21e18:	4631      	mov	r1, r6
   21e1a:	4628      	mov	r0, r5
   21e1c:	f7ff fc66 	bl	216ec <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
   21e20:	2292      	movs	r2, #146	; 0x92
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
   21e22:	7020      	strb	r0, [r4, #0]
   21e24:	4631      	mov	r1, r6
   21e26:	4628      	mov	r0, r5
   21e28:	f7f4 fa8a 	bl	16340 <_lv_obj_get_style_int>
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
   21e2c:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
   21e2e:	b128      	cbz	r0, 21e3c <lv_obj_init_draw_line_dsc+0x48>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
   21e30:	2293      	movs	r2, #147	; 0x93
   21e32:	4631      	mov	r1, r6
   21e34:	4628      	mov	r0, r5
   21e36:	f7f4 fa83 	bl	16340 <_lv_obj_get_style_int>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
   21e3a:	80e0      	strh	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   21e3c:	2294      	movs	r2, #148	; 0x94
   21e3e:	4631      	mov	r1, r6
   21e40:	4628      	mov	r0, r5
   21e42:	f7f4 fa7d 	bl	16340 <_lv_obj_get_style_int>
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
   21e46:	7a63      	ldrb	r3, [r4, #9]
   21e48:	3800      	subs	r0, #0
   21e4a:	bf18      	it	ne
   21e4c:	2001      	movne	r0, #1
   21e4e:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
   21e52:	f360 03c3 	bfi	r3, r0, #3, #1
   21e56:	7263      	strb	r3, [r4, #9]
}
   21e58:	bd70      	pop	{r4, r5, r6, pc}

00021e5a <style_snapshot>:
    }
}

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
   21e5a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e5e:	4614      	mov	r4, r2
   21e60:	460e      	mov	r6, r1
    _lv_obj_disable_style_caching(obj, true);
   21e62:	2101      	movs	r1, #1
{
   21e64:	4605      	mov	r5, r0
    _lv_obj_disable_style_caching(obj, true);
   21e66:	f7ff fc0e 	bl	21686 <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
   21e6a:	21ac      	movs	r1, #172	; 0xac
   21e6c:	4620      	mov	r0, r4
   21e6e:	f7ff fa08 	bl	21282 <_lv_memset_00>
    lv_draw_rect_dsc_init(&shot->rect);
    lv_draw_label_dsc_init(&shot->label);
   21e72:	f104 0a4c 	add.w	sl, r4, #76	; 0x4c
    lv_draw_rect_dsc_init(&shot->rect);
   21e76:	4620      	mov	r0, r4
   21e78:	f7f6 fb26 	bl	184c8 <lv_draw_rect_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
   21e7c:	f104 0976 	add.w	r9, r4, #118	; 0x76
    lv_draw_label_dsc_init(&shot->label);
   21e80:	4650      	mov	r0, sl
   21e82:	f7f5 f9b1 	bl	171e8 <lv_draw_label_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
   21e86:	f104 086c 	add.w	r8, r4, #108	; 0x6c
    lv_draw_img_dsc_init(&shot->img);
   21e8a:	4648      	mov	r0, r9
   21e8c:	f001 fe15 	bl	23aba <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
   21e90:	4640      	mov	r0, r8
   21e92:	f001 fe69 	bl	23b68 <lv_draw_line_dsc_init>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   21e96:	4631      	mov	r1, r6
   21e98:	4628      	mov	r0, r5
   21e9a:	f7ff fbd9 	bl	21650 <lv_obj_get_style_list>
    bool trans_ori = list->skip_trans;
   21e9e:	7943      	ldrb	r3, [r0, #5]
   21ea0:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
   21ea4:	f043 0301 	orr.w	r3, r3, #1
   21ea8:	7143      	strb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   21eaa:	4607      	mov	r7, r0

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
   21eac:	4622      	mov	r2, r4
   21eae:	4631      	mov	r1, r6
   21eb0:	4628      	mov	r0, r5
   21eb2:	f7ff fdac 	bl	21a0e <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
   21eb6:	4652      	mov	r2, sl
   21eb8:	4631      	mov	r1, r6
   21eba:	4628      	mov	r0, r5
   21ebc:	f7ff ff28 	bl	21d10 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
   21ec0:	464a      	mov	r2, r9
   21ec2:	4631      	mov	r1, r6
   21ec4:	4628      	mov	r0, r5
   21ec6:	f7ff ff61 	bl	21d8c <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
   21eca:	4642      	mov	r2, r8
   21ecc:	4631      	mov	r1, r6
   21ece:	4628      	mov	r0, r5
   21ed0:	f7ff ff90 	bl	21df4 <lv_obj_init_draw_line_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   21ed4:	2210      	movs	r2, #16
   21ed6:	4631      	mov	r1, r6
   21ed8:	4628      	mov	r0, r5
   21eda:	f7f4 fa31 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   21ede:	2211      	movs	r2, #17


    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
   21ee0:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
   21ee4:	4631      	mov	r1, r6
   21ee6:	4628      	mov	r0, r5
   21ee8:	f7f4 fa2a 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   21eec:	2213      	movs	r2, #19
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
   21eee:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
   21ef2:	4631      	mov	r1, r6
   21ef4:	4628      	mov	r0, r5
   21ef6:	f7f4 fa23 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   21efa:	2212      	movs	r2, #18
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
   21efc:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
   21f00:	4631      	mov	r1, r6
   21f02:	4628      	mov	r0, r5
   21f04:	f7f4 fa1c 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   21f08:	2214      	movs	r2, #20
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
   21f0a:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
   21f0e:	4631      	mov	r1, r6
   21f10:	4628      	mov	r0, r5
   21f12:	f7f4 fa15 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   21f16:	2215      	movs	r2, #21
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
   21f18:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
   21f1c:	4631      	mov	r1, r6
   21f1e:	4628      	mov	r0, r5
   21f20:	f7f4 fa0e 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   21f24:	2216      	movs	r2, #22
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
   21f26:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
   21f2a:	4631      	mov	r1, r6
   21f2c:	4628      	mov	r0, r5
   21f2e:	f7f4 fa07 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   21f32:	2217      	movs	r2, #23
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
   21f34:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
   21f38:	4631      	mov	r1, r6
   21f3a:	4628      	mov	r0, r5
   21f3c:	f7f4 fa00 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   21f40:	2218      	movs	r2, #24
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
   21f42:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
   21f46:	4631      	mov	r1, r6
   21f48:	4628      	mov	r0, r5
   21f4a:	f7f4 f9f9 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   21f4e:	2203      	movs	r2, #3
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
   21f50:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
   21f54:	4631      	mov	r1, r6
   21f56:	4628      	mov	r0, r5
   21f58:	f7f4 f9f2 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   21f5c:	2204      	movs	r2, #4
    shot->size = lv_obj_get_style_size(obj, part);
   21f5e:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
   21f62:	4631      	mov	r1, r6
   21f64:	4628      	mov	r0, r5
   21f66:	f7f4 f9eb 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   21f6a:	2205      	movs	r2, #5
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
   21f6c:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
   21f70:	4631      	mov	r1, r6
   21f72:	4628      	mov	r0, r5
   21f74:	f7f4 f9e4 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
   21f78:	2206      	movs	r2, #6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
   21f7a:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
   21f7e:	4631      	mov	r1, r6
   21f80:	4628      	mov	r0, r5
   21f82:	f7f4 f9dd 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
   21f86:	2207      	movs	r2, #7
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
   21f88:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
   21f8c:	4631      	mov	r1, r6
   21f8e:	4628      	mov	r0, r5
   21f90:	f7f4 f9d6 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   21f94:	22c0      	movs	r2, #192	; 0xc0
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
   21f96:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
   21f9a:	4631      	mov	r1, r6
   21f9c:	4628      	mov	r0, r5
   21f9e:	f7f4 f9cf 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
   21fa2:	22c1      	movs	r2, #193	; 0xc1
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
   21fa4:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
   21fa8:	4631      	mov	r1, r6
   21faa:	4628      	mov	r0, r5
   21fac:	f7f4 f9c8 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
   21fb0:	22c2      	movs	r2, #194	; 0xc2
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
   21fb2:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
   21fb6:	4631      	mov	r1, r6
   21fb8:	4628      	mov	r0, r5
   21fba:	f7f4 f9c1 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   21fbe:	22c3      	movs	r2, #195	; 0xc3
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
   21fc0:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
   21fc4:	4631      	mov	r1, r6
   21fc6:	4628      	mov	r0, r5
   21fc8:	f7f4 f9ba 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   21fcc:	22c9      	movs	r2, #201	; 0xc9
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
   21fce:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
   21fd2:	4631      	mov	r1, r6
   21fd4:	4628      	mov	r0, r5
   21fd6:	f7ff fb89 	bl	216ec <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   21fda:	22ca      	movs	r2, #202	; 0xca
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
   21fdc:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
   21fe0:	4631      	mov	r1, r6
   21fe2:	4628      	mov	r0, r5
   21fe4:	f7ff fb82 	bl	216ec <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   21fe8:	f248 020c 	movw	r2, #32780	; 0x800c
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
   21fec:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
   21ff0:	4631      	mov	r1, r6
   21ff2:	4628      	mov	r0, r5
   21ff4:	f7ff fbb2 	bl	2175c <_lv_obj_get_style_opa>
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
    shot->clip_corder = lv_obj_get_style_clip_corner(obj, part);
   21ff8:	4631      	mov	r1, r6
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
   21ffa:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    shot->clip_corder = lv_obj_get_style_clip_corner(obj, part);
   21ffe:	4628      	mov	r0, r5
   22000:	f7ff fba4 	bl	2174c <lv_obj_get_style_clip_corner>
   22004:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
   22008:	f360 0300 	bfi	r3, r0, #0, #1
   2200c:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   22010:	2233      	movs	r2, #51	; 0x33
   22012:	4631      	mov	r1, r6
   22014:	4628      	mov	r0, r5
   22016:	f7f4 f993 	bl	16340 <_lv_obj_get_style_int>
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
   2201a:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
   2201e:	3800      	subs	r0, #0
   22020:	bf18      	it	ne
   22022:	2001      	movne	r0, #1
   22024:	f360 0341 	bfi	r3, r0, #1, #1
   22028:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab

    _lv_obj_disable_style_caching(obj, false);
   2202c:	2100      	movs	r1, #0
   2202e:	4628      	mov	r0, r5
   22030:	f7ff fb29 	bl	21686 <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
   22034:	797b      	ldrb	r3, [r7, #5]
   22036:	f36b 0300 	bfi	r3, fp, #0, #1
   2203a:	717b      	strb	r3, [r7, #5]
}
   2203c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022040 <lv_obj_set_state>:
{
   22040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(obj->state == new_state) return;
   22044:	f890 9035 	ldrb.w	r9, [r0, #53]	; 0x35
   22048:	4589      	cmp	r9, r1
{
   2204a:	b0d7      	sub	sp, #348	; 0x15c
   2204c:	4605      	mov	r5, r0
   2204e:	4688      	mov	r8, r1
    if(obj->state == new_state) return;
   22050:	f000 80ac 	beq.w	221ac <lv_obj_set_state+0x16c>
   22054:	2600      	movs	r6, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
   22056:	4634      	mov	r4, r6
   22058:	b2f7      	uxtb	r7, r6
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
   2205a:	4639      	mov	r1, r7
   2205c:	4628      	mov	r0, r5
   2205e:	f7ff faf7 	bl	21650 <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
   22062:	2800      	cmp	r0, #0
   22064:	f000 8096 	beq.w	22194 <lv_obj_set_state+0x154>
        style_snapshot(obj, part, &shot_pre);
   22068:	466a      	mov	r2, sp
   2206a:	4639      	mov	r1, r7
   2206c:	4628      	mov	r0, r5
        obj->state = prev_state;
   2206e:	f885 9035 	strb.w	r9, [r5, #53]	; 0x35
        style_snapshot(obj, part, &shot_pre);
   22072:	f7ff fef2 	bl	21e5a <style_snapshot>
        style_snapshot(obj, part, &shot_post);
   22076:	aa2b      	add	r2, sp, #172	; 0xac
   22078:	4639      	mov	r1, r7
   2207a:	4628      	mov	r0, r5
        obj->state = new_state;
   2207c:	f885 8035 	strb.w	r8, [r5, #53]	; 0x35
        style_snapshot(obj, part, &shot_post);
   22080:	f7ff feeb 	bl	21e5a <style_snapshot>

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
   22084:	22ac      	movs	r2, #172	; 0xac
   22086:	eb0d 0102 	add.w	r1, sp, r2
   2208a:	4668      	mov	r0, sp
   2208c:	f004 fccf 	bl	26a2e <memcmp>
   22090:	2800      	cmp	r0, #0
   22092:	d07a      	beq.n	2218a <lv_obj_set_state+0x14a>


    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
   22094:	f9bd 2084 	ldrsh.w	r2, [sp, #132]	; 0x84
   22098:	f9bd 3130 	ldrsh.w	r3, [sp, #304]	; 0x130
   2209c:	429a      	cmp	r2, r3
   2209e:	f040 8088 	bne.w	221b2 <lv_obj_set_state+0x172>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
   220a2:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
   220a6:	f9bd 3132 	ldrsh.w	r3, [sp, #306]	; 0x132
   220aa:	429a      	cmp	r2, r3
   220ac:	f040 8081 	bne.w	221b2 <lv_obj_set_state+0x172>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
   220b0:	f9bd 2134 	ldrsh.w	r2, [sp, #308]	; 0x134
   220b4:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
   220b8:	4293      	cmp	r3, r2
   220ba:	d17a      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
   220bc:	f9bd 2088 	ldrsh.w	r2, [sp, #136]	; 0x88
   220c0:	429a      	cmp	r2, r3
   220c2:	d176      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
   220c4:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
   220c8:	f9bd 3138 	ldrsh.w	r3, [sp, #312]	; 0x138
   220cc:	429a      	cmp	r2, r3
   220ce:	d170      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
   220d0:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
   220d4:	f9bd 313a 	ldrsh.w	r3, [sp, #314]	; 0x13a
   220d8:	429a      	cmp	r2, r3
   220da:	d16a      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
   220dc:	f9bd 2090 	ldrsh.w	r2, [sp, #144]	; 0x90
   220e0:	f9bd 313c 	ldrsh.w	r3, [sp, #316]	; 0x13c
   220e4:	429a      	cmp	r2, r3
   220e6:	d164      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
   220e8:	f9bd 3140 	ldrsh.w	r3, [sp, #320]	; 0x140
   220ec:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
   220f0:	429a      	cmp	r2, r3
   220f2:	d15e      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
   220f4:	f9bd 2094 	ldrsh.w	r2, [sp, #148]	; 0x94
   220f8:	429a      	cmp	r2, r3
   220fa:	d15a      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
   220fc:	f9bd 2098 	ldrsh.w	r2, [sp, #152]	; 0x98
   22100:	f9bd 3144 	ldrsh.w	r3, [sp, #324]	; 0x144
   22104:	429a      	cmp	r2, r3
   22106:	d154      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
   22108:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
   2210c:	f9bd 3146 	ldrsh.w	r3, [sp, #326]	; 0x146
   22110:	429a      	cmp	r2, r3
   22112:	d14e      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
   22114:	f9bd 209c 	ldrsh.w	r2, [sp, #156]	; 0x9c
   22118:	f9bd 3148 	ldrsh.w	r3, [sp, #328]	; 0x148
   2211c:	429a      	cmp	r2, r3
   2211e:	d148      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
   22120:	f9bd 209e 	ldrsh.w	r2, [sp, #158]	; 0x9e
   22124:	f9bd 314a 	ldrsh.w	r3, [sp, #330]	; 0x14a
   22128:	429a      	cmp	r2, r3
   2212a:	d142      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
   2212c:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   22130:	f9bd 30c2 	ldrsh.w	r3, [sp, #194]	; 0xc2
   22134:	429a      	cmp	r2, r3
   22136:	d13c      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
   22138:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   2213c:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
   22140:	429a      	cmp	r2, r3
   22142:	d136      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
   22144:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22146:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   22148:	429a      	cmp	r2, r3
   2214a:	d132      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
   2214c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   22150:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
   22154:	429a      	cmp	r2, r3
   22156:	d12c      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
   22158:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
   2215c:	f9bd 30d0 	ldrsh.w	r3, [sp, #208]	; 0xd0
   22160:	429a      	cmp	r2, r3
   22162:	d126      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
   22164:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
   22168:	f9bd 30ca 	ldrsh.w	r3, [sp, #202]	; 0xca
   2216c:	429a      	cmp	r2, r3
   2216e:	d120      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
   22170:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
   22174:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
   22178:	429a      	cmp	r2, r3
   2217a:	d11a      	bne.n	221b2 <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
   2217c:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
   22180:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
   22184:	429a      	cmp	r2, r3
   22186:	d114      	bne.n	221b2 <lv_obj_set_state+0x172>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
   22188:	2401      	movs	r4, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   2218a:	3601      	adds	r6, #1
   2218c:	2e40      	cmp	r6, #64	; 0x40
   2218e:	f47f af63 	bne.w	22058 <lv_obj_set_state+0x18>
   22192:	4637      	mov	r7, r6
    obj->state = new_state;
   22194:	f885 8035 	strb.w	r8, [r5, #53]	; 0x35
    if(cmp_res == STYLE_COMPARE_SAME) {
   22198:	b144      	cbz	r4, 221ac <lv_obj_set_state+0x16c>
    if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   2219a:	2c02      	cmp	r4, #2
   2219c:	f04f 02ff 	mov.w	r2, #255	; 0xff
   221a0:	bf0c      	ite	eq
   221a2:	4639      	moveq	r1, r7
    else if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   221a4:	4611      	movne	r1, r2
   221a6:	4628      	mov	r0, r5
   221a8:	f7f4 fb20 	bl	167ec <lv_obj_refresh_style>
}
   221ac:	b057      	add	sp, #348	; 0x15c
   221ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            cmp_res = STYLE_COMPARE_DIFF;
   221b2:	2402      	movs	r4, #2
   221b4:	e7ee      	b.n	22194 <lv_obj_set_state+0x154>

000221b6 <lv_obj_add_state>:
    lv_state_t new_state = obj->state | state;
   221b6:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
   221ba:	460b      	mov	r3, r1
    if(obj->state != new_state) {
   221bc:	4393      	bics	r3, r2
    lv_state_t new_state = obj->state | state;
   221be:	ea42 0101 	orr.w	r1, r2, r1
    if(obj->state != new_state) {
   221c2:	d001      	beq.n	221c8 <lv_obj_add_state+0x12>
        lv_obj_set_state(obj, new_state);
   221c4:	f7ff bf3c 	b.w	22040 <lv_obj_set_state>
}
   221c8:	4770      	bx	lr

000221ca <lv_obj_clear_state>:
    lv_state_t new_state = obj->state & (~state);
   221ca:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
   221ce:	460a      	mov	r2, r1
    if(obj->state != new_state) {
   221d0:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
   221d2:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
   221d6:	d001      	beq.n	221dc <lv_obj_clear_state+0x12>
        lv_obj_set_state(obj, new_state);
   221d8:	f7ff bf32 	b.w	22040 <lv_obj_set_state>
}
   221dc:	4770      	bx	lr

000221de <lv_obj_get_draw_rect_ext_pad_size>:
{
   221de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   221e2:	2250      	movs	r2, #80	; 0x50
   221e4:	b088      	sub	sp, #32
   221e6:	4605      	mov	r5, r0
   221e8:	460e      	mov	r6, r1
   221ea:	f7f4 f8a9 	bl	16340 <_lv_obj_get_style_int>
    if(sh_width) {
   221ee:	4604      	mov	r4, r0
   221f0:	2800      	cmp	r0, #0
   221f2:	f040 80bb 	bne.w	2236c <lv_obj_get_draw_rect_ext_pad_size+0x18e>
    lv_coord_t s = 0;
   221f6:	2400      	movs	r4, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
   221f8:	227f      	movs	r2, #127	; 0x7f
   221fa:	4631      	mov	r1, r6
   221fc:	4628      	mov	r0, r5
   221fe:	f7ff fb12 	bl	21826 <_lv_obj_get_style_ptr>
    if(value_str) {
   22202:	4607      	mov	r7, r0
   22204:	2800      	cmp	r0, #0
   22206:	f000 8082 	beq.w	2230e <lv_obj_get_draw_rect_ext_pad_size+0x130>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
   2220a:	227c      	movs	r2, #124	; 0x7c
   2220c:	4631      	mov	r1, r6
   2220e:	4628      	mov	r0, r5
   22210:	f7ff faa4 	bl	2175c <_lv_obj_get_style_opa>
        if(value_opa > LV_OPA_MIN) {
   22214:	2802      	cmp	r0, #2
   22216:	d97a      	bls.n	2230e <lv_obj_get_draw_rect_ext_pad_size+0x130>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
   22218:	2270      	movs	r2, #112	; 0x70
   2221a:	4631      	mov	r1, r6
   2221c:	4628      	mov	r0, r5
   2221e:	f7f4 f88f 	bl	16340 <_lv_obj_get_style_int>
   22222:	2270      	movs	r2, #112	; 0x70
   22224:	4680      	mov	r8, r0
   22226:	4631      	mov	r1, r6
   22228:	4628      	mov	r0, r5
   2222a:	f7f4 f889 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   2222e:	227e      	movs	r2, #126	; 0x7e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
   22230:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   22232:	4631      	mov	r1, r6
   22234:	4628      	mov	r0, r5
   22236:	f7ff faf6 	bl	21826 <_lv_obj_get_style_ptr>
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
   2223a:	f04f 0a00 	mov.w	sl, #0
   2223e:	f647 4318 	movw	r3, #31768	; 0x7c18
   22242:	4602      	mov	r2, r0
   22244:	4639      	mov	r1, r7
   22246:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   2224a:	f8cd 9000 	str.w	r9, [sp]
   2224e:	4643      	mov	r3, r8
   22250:	a804      	add	r0, sp, #16
   22252:	f003 fbc8 	bl	259e6 <_lv_txt_get_size>
            value_area.x2 = txt_size.x - 1;
   22256:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            value_area.x1 = 0;
   2225a:	f8cd a018 	str.w	sl, [sp, #24]
            value_area.x2 = txt_size.x - 1;
   2225e:	3b01      	subs	r3, #1
   22260:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
   22264:	f8bd 3012 	ldrh.w	r3, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
   22268:	2275      	movs	r2, #117	; 0x75
   2226a:	3b01      	subs	r3, #1
   2226c:	4631      	mov	r1, r6
   2226e:	4628      	mov	r0, r5
   22270:	f8ad 301e 	strh.w	r3, [sp, #30]
   22274:	f7f4 f864 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   22278:	2273      	movs	r2, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
   2227a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   2227c:	4631      	mov	r1, r6
   2227e:	4628      	mov	r0, r5
   22280:	f7f4 f85e 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
   22284:	2274      	movs	r2, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   22286:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
   22288:	4631      	mov	r1, r6
   2228a:	4628      	mov	r0, r5
   2228c:	f7f4 f858 	bl	16340 <_lv_obj_get_style_int>
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
   22290:	ab05      	add	r3, sp, #20
   22292:	4607      	mov	r7, r0
   22294:	fa5f f289 	uxtb.w	r2, r9
   22298:	a906      	add	r1, sp, #24
   2229a:	f105 0010 	add.w	r0, r5, #16
   2229e:	f003 f90d 	bl	254bc <_lv_area_align>
            value_area.x1 += p_align.x + xofs;
   222a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   222a6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   222aa:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
            value_area.y1 += p_align.y + yofs;
   222ae:	f8bd 0016 	ldrh.w	r0, [sp, #22]
            value_area.x1 += p_align.x + xofs;
   222b2:	4443      	add	r3, r8
   222b4:	fa01 f183 	sxtah	r1, r1, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   222b8:	b209      	sxth	r1, r1
   222ba:	1a52      	subs	r2, r2, r1
            value_area.y1 += p_align.y + yofs;
   222bc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   222c0:	4294      	cmp	r4, r2
            value_area.y1 += p_align.y + yofs;
   222c2:	4438      	add	r0, r7
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   222c4:	bfb8      	it	lt
   222c6:	4614      	movlt	r4, r2
            value_area.y1 += p_align.y + yofs;
   222c8:	fa01 f180 	sxtah	r1, r1, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
   222cc:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
   222d0:	b209      	sxth	r1, r1
   222d2:	1a52      	subs	r2, r2, r1
   222d4:	b224      	sxth	r4, r4
   222d6:	42a2      	cmp	r2, r4
   222d8:	bfb8      	it	lt
   222da:	4622      	movlt	r2, r4
            value_area.x2 += p_align.x + xofs;
   222dc:	f8bd 401c 	ldrh.w	r4, [sp, #28]
   222e0:	fa04 f383 	sxtah	r3, r4, r3
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
   222e4:	f9b5 4014 	ldrsh.w	r4, [r5, #20]
   222e8:	b21b      	sxth	r3, r3
   222ea:	1b1c      	subs	r4, r3, r4
   222ec:	b213      	sxth	r3, r2
   222ee:	42a3      	cmp	r3, r4
   222f0:	bfb8      	it	lt
   222f2:	4623      	movlt	r3, r4
            value_area.y2 += p_align.y + yofs;
   222f4:	f8bd 401e 	ldrh.w	r4, [sp, #30]
   222f8:	fa04 f080 	sxtah	r0, r4, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
   222fc:	b204      	sxth	r4, r0
   222fe:	f9b5 0016 	ldrsh.w	r0, [r5, #22]
   22302:	1a20      	subs	r0, r4, r0
   22304:	b21c      	sxth	r4, r3
   22306:	4284      	cmp	r4, r0
   22308:	bfb8      	it	lt
   2230a:	4604      	movlt	r4, r0
   2230c:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   2230e:	2240      	movs	r2, #64	; 0x40
   22310:	4631      	mov	r1, r6
   22312:	4628      	mov	r0, r5
   22314:	f7f4 f814 	bl	16340 <_lv_obj_get_style_int>
    if(outline_width) {
   22318:	4607      	mov	r7, r0
   2231a:	b180      	cbz	r0, 2233e <lv_obj_get_draw_rect_ext_pad_size+0x160>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   2231c:	224c      	movs	r2, #76	; 0x4c
   2231e:	4631      	mov	r1, r6
   22320:	4628      	mov	r0, r5
   22322:	f7ff fa1b 	bl	2175c <_lv_obj_get_style_opa>
        if(outline_opa > LV_OPA_MIN) {
   22326:	2802      	cmp	r0, #2
   22328:	d909      	bls.n	2233e <lv_obj_get_draw_rect_ext_pad_size+0x160>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
   2232a:	2241      	movs	r2, #65	; 0x41
   2232c:	4631      	mov	r1, r6
   2232e:	4628      	mov	r0, r5
   22330:	f7f4 f806 	bl	16340 <_lv_obj_get_style_int>
            s = LV_MATH_MAX(s, outline_pad + outline_width);
   22334:	4438      	add	r0, r7
   22336:	4284      	cmp	r4, r0
   22338:	bfb8      	it	lt
   2233a:	4604      	movlt	r4, r0
   2233c:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   2233e:	4631      	mov	r1, r6
   22340:	2204      	movs	r2, #4
   22342:	4628      	mov	r0, r5
   22344:	f7f3 fffc 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   22348:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   2234a:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   2234c:	4631      	mov	r1, r6
   2234e:	4628      	mov	r0, r5
   22350:	f7f3 fff6 	bl	16340 <_lv_obj_get_style_int>
    lv_coord_t wh = LV_MATH_MAX(w, h);
   22354:	42b8      	cmp	r0, r7
   22356:	bfb8      	it	lt
   22358:	4638      	movlt	r0, r7
   2235a:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
   2235c:	2800      	cmp	r0, #0
   2235e:	bfc4      	itt	gt
   22360:	1824      	addgt	r4, r4, r0
   22362:	b224      	sxthgt	r4, r4
}
   22364:	4620      	mov	r0, r4
   22366:	b008      	add	sp, #32
   22368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
   2236c:	225c      	movs	r2, #92	; 0x5c
   2236e:	4631      	mov	r1, r6
   22370:	4628      	mov	r0, r5
   22372:	f7ff f9f3 	bl	2175c <_lv_obj_get_style_opa>
        if(sh_opa > LV_OPA_MIN) {
   22376:	2802      	cmp	r0, #2
   22378:	f67f af3d 	bls.w	221f6 <lv_obj_get_draw_rect_ext_pad_size+0x18>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
   2237c:	2253      	movs	r2, #83	; 0x53
   2237e:	4631      	mov	r1, r6
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
   22380:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   22384:	4628      	mov	r0, r5
   22386:	f7f3 ffdb 	bl	16340 <_lv_obj_get_style_int>
   2238a:	f344 044f 	sbfx	r4, r4, #1, #16
            sh_width++;
   2238e:	3401      	adds	r4, #1
   22390:	b224      	sxth	r4, r4
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
   22392:	4404      	add	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
   22394:	2251      	movs	r2, #81	; 0x51
   22396:	4631      	mov	r1, r6
   22398:	4628      	mov	r0, r5
   2239a:	f7f3 ffd1 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
   2239e:	2252      	movs	r2, #82	; 0x52
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
   223a0:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
   223a2:	4631      	mov	r1, r6
   223a4:	4628      	mov	r0, r5
   223a6:	f7f3 ffcb 	bl	16340 <_lv_obj_get_style_int>
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
   223aa:	2800      	cmp	r0, #0
   223ac:	bfb8      	it	lt
   223ae:	4240      	neglt	r0, r0
   223b0:	2f00      	cmp	r7, #0
   223b2:	bfb8      	it	lt
   223b4:	427f      	neglt	r7, r7
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
   223b6:	b224      	sxth	r4, r4
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
   223b8:	b280      	uxth	r0, r0
   223ba:	b2bf      	uxth	r7, r7
   223bc:	42b8      	cmp	r0, r7
   223be:	bf2c      	ite	cs
   223c0:	1824      	addcs	r4, r4, r0
   223c2:	19e4      	addcc	r4, r4, r7
            s = LV_MATH_MAX(s, sh_width);
   223c4:	b224      	sxth	r4, r4
   223c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   223ca:	e715      	b.n	221f8 <lv_obj_get_draw_rect_ext_pad_size+0x1a>

000223cc <lv_obj_get_focused_obj>:
    if(obj == NULL) return NULL;
   223cc:	b908      	cbnz	r0, 223d2 <lv_obj_get_focused_obj+0x6>
   223ce:	4770      	bx	lr
    return obj->parent;
   223d0:	6800      	ldr	r0, [r0, #0]
    return obj->focus_parent == 0 ? false : true;
   223d2:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
   223d6:	079b      	lsls	r3, r3, #30
   223d8:	d4fa      	bmi.n	223d0 <lv_obj_get_focused_obj+0x4>
}
   223da:	4770      	bx	lr

000223dc <_lv_memcpy>:
   223dc:	f004 bb35 	b.w	26a4a <memcpy>

000223e0 <lv_refr_get_top_obj>:
{
   223e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   223e4:	2200      	movs	r2, #0
{
   223e6:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   223e8:	3110      	adds	r1, #16
{
   223ea:	4607      	mov	r7, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   223ec:	f003 f816 	bl	2541c <_lv_area_is_in>
   223f0:	b910      	cbnz	r0, 223f8 <lv_refr_get_top_obj+0x18>
    lv_obj_t * found_p = NULL;
   223f2:	2000      	movs	r0, #0
}
   223f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   223f8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   223fc:	06db      	lsls	r3, r3, #27
   223fe:	d4f8      	bmi.n	223f2 <lv_refr_get_top_obj+0x12>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
   22400:	6a23      	ldr	r3, [r4, #32]
   22402:	2202      	movs	r2, #2
   22404:	4639      	mov	r1, r7
   22406:	4620      	mov	r0, r4
   22408:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
   2240a:	2803      	cmp	r0, #3
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
   2240c:	4606      	mov	r6, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
   2240e:	d0f0      	beq.n	223f2 <lv_refr_get_top_obj+0x12>
        _LV_LL_READ(obj->child_ll, i) {
   22410:	f104 0804 	add.w	r8, r4, #4
   22414:	4640      	mov	r0, r8
   22416:	f003 f9b5 	bl	25784 <_lv_ll_get_head>
   2241a:	4605      	mov	r5, r0
   2241c:	b918      	cbnz	r0, 22426 <lv_refr_get_top_obj+0x46>
            if(design_res == LV_DESIGN_RES_COVER) {
   2241e:	2e01      	cmp	r6, #1
   22420:	d1e7      	bne.n	223f2 <lv_refr_get_top_obj+0x12>
   22422:	4620      	mov	r0, r4
   22424:	e7e6      	b.n	223f4 <lv_refr_get_top_obj+0x14>
            found_p = lv_refr_get_top_obj(area_p, i);
   22426:	4629      	mov	r1, r5
   22428:	4638      	mov	r0, r7
   2242a:	f7ff ffd9 	bl	223e0 <lv_refr_get_top_obj>
            if(found_p != NULL) {
   2242e:	2800      	cmp	r0, #0
   22430:	d1e0      	bne.n	223f4 <lv_refr_get_top_obj+0x14>
        _LV_LL_READ(obj->child_ll, i) {
   22432:	4629      	mov	r1, r5
   22434:	4640      	mov	r0, r8
   22436:	f003 f9ab 	bl	25790 <_lv_ll_get_next>
   2243a:	e7ee      	b.n	2241a <lv_refr_get_top_obj+0x3a>

0002243c <lv_refr_obj>:
{
   2243c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
   2243e:	f890 7032 	ldrb.w	r7, [r0, #50]	; 0x32
   22442:	f017 0710 	ands.w	r7, r7, #16
{
   22446:	b08b      	sub	sp, #44	; 0x2c
   22448:	4604      	mov	r4, r0
   2244a:	460e      	mov	r6, r1
    if(obj->hidden != 0) return;
   2244c:	d13a      	bne.n	224c4 <lv_refr_obj+0x88>
    lv_obj_get_coords(obj, &obj_area);
   2244e:	a904      	add	r1, sp, #16
    lv_coord_t ext_size = obj->ext_draw_pad;
   22450:	f9b0 5030 	ldrsh.w	r5, [r0, #48]	; 0x30
    lv_obj_get_coords(obj, &obj_area);
   22454:	f7ff f8e6 	bl	21624 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
   22458:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2245c:	1b5b      	subs	r3, r3, r5
   2245e:	f8ad 3010 	strh.w	r3, [sp, #16]
    obj_area.y1 -= ext_size;
   22462:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   22466:	1b5b      	subs	r3, r3, r5
   22468:	f8ad 3012 	strh.w	r3, [sp, #18]
    obj_area.x2 += ext_size;
   2246c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   22470:	442b      	add	r3, r5
   22472:	f8ad 3014 	strh.w	r3, [sp, #20]
    obj_area.y2 += ext_size;
   22476:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   2247a:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
   2247c:	441d      	add	r5, r3
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   2247e:	4631      	mov	r1, r6
   22480:	a802      	add	r0, sp, #8
    obj_area.y2 += ext_size;
   22482:	f8ad 5016 	strh.w	r5, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   22486:	f002 fed6 	bl	25236 <_lv_area_intersect>
    if(union_ok != false) {
   2248a:	b1d8      	cbz	r0, 224c4 <lv_refr_obj+0x88>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
   2248c:	6a23      	ldr	r3, [r4, #32]
   2248e:	b11b      	cbz	r3, 22498 <lv_refr_obj+0x5c>
   22490:	463a      	mov	r2, r7
   22492:	a902      	add	r1, sp, #8
   22494:	4620      	mov	r0, r4
   22496:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
   22498:	a904      	add	r1, sp, #16
   2249a:	4620      	mov	r0, r4
   2249c:	f7ff f8c2 	bl	21624 <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
   224a0:	aa04      	add	r2, sp, #16
   224a2:	4631      	mov	r1, r6
   224a4:	4668      	mov	r0, sp
   224a6:	f002 fec6 	bl	25236 <_lv_area_intersect>
        if(union_ok != false) {
   224aa:	b128      	cbz	r0, 224b8 <lv_refr_obj+0x7c>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
   224ac:	1d26      	adds	r6, r4, #4
   224ae:	4630      	mov	r0, r6
   224b0:	f003 f96b 	bl	2578a <_lv_ll_get_tail>
   224b4:	4605      	mov	r5, r0
   224b6:	b938      	cbnz	r0, 224c8 <lv_refr_obj+0x8c>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
   224b8:	6a23      	ldr	r3, [r4, #32]
   224ba:	b11b      	cbz	r3, 224c4 <lv_refr_obj+0x88>
   224bc:	2201      	movs	r2, #1
   224be:	a902      	add	r1, sp, #8
   224c0:	4620      	mov	r0, r4
   224c2:	4798      	blx	r3
}
   224c4:	b00b      	add	sp, #44	; 0x2c
   224c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
   224c8:	a908      	add	r1, sp, #32
   224ca:	4628      	mov	r0, r5
   224cc:	f7ff f8aa 	bl	21624 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
   224d0:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
                child_area.x1 -= ext_size;
   224d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   224d8:	1ad2      	subs	r2, r2, r3
   224da:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
   224de:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   224e2:	1ad2      	subs	r2, r2, r3
   224e4:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
   224e8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   224ec:	441a      	add	r2, r3
   224ee:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
   224f2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   224f6:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
   224f8:	4413      	add	r3, r2
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   224fa:	a806      	add	r0, sp, #24
   224fc:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
   224fe:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   22502:	f002 fe98 	bl	25236 <_lv_area_intersect>
                if(union_ok) {
   22506:	b118      	cbz	r0, 22510 <lv_refr_obj+0xd4>
                    lv_refr_obj(child_p, &mask_child);
   22508:	a906      	add	r1, sp, #24
   2250a:	4628      	mov	r0, r5
   2250c:	f7ff ff96 	bl	2243c <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
   22510:	4629      	mov	r1, r5
   22512:	4630      	mov	r0, r6
   22514:	f003 f941 	bl	2579a <_lv_ll_get_prev>
   22518:	e7cc      	b.n	224b4 <lv_refr_obj+0x78>

0002251a <_lv_memset_00>:
   2251a:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   2251c:	2100      	movs	r1, #0
   2251e:	f004 bab5 	b.w	26a8c <memset>

00022522 <_lv_refr_init>:
}
   22522:	4770      	bx	lr

00022524 <_lv_inv_area>:
{
   22524:	b5f0      	push	{r4, r5, r6, r7, lr}
   22526:	460d      	mov	r5, r1
   22528:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
   2252a:	4604      	mov	r4, r0
   2252c:	b918      	cbnz	r0, 22536 <_lv_inv_area+0x12>
   2252e:	f7f6 fae1 	bl	18af4 <lv_disp_get_default>
    if(!disp) return;
   22532:	4604      	mov	r4, r0
   22534:	b130      	cbz	r0, 22544 <_lv_inv_area+0x20>
    if(area_p == NULL) {
   22536:	b93d      	cbnz	r5, 22548 <_lv_inv_area+0x24>
        disp->inv_p = 0;
   22538:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   2253c:	f365 0309 	bfi	r3, r5, #0, #10
   22540:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
}
   22544:	b005      	add	sp, #20
   22546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scr_area.x1 = 0;
   22548:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   2254a:	4620      	mov	r0, r4
    scr_area.x1 = 0;
   2254c:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   2254e:	f7f6 fad7 	bl	18b00 <lv_disp_get_hor_res>
   22552:	3801      	subs	r0, #1
   22554:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
   22558:	4620      	mov	r0, r4
   2255a:	f7f6 fae1 	bl	18b20 <lv_disp_get_ver_res>
   2255e:	3801      	subs	r0, #1
   22560:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
   22564:	466a      	mov	r2, sp
   22566:	4629      	mov	r1, r5
   22568:	a802      	add	r0, sp, #8
   2256a:	f002 fe64 	bl	25236 <_lv_area_intersect>
    if(suc != false) {
   2256e:	2800      	cmp	r0, #0
   22570:	d0e8      	beq.n	22544 <_lv_inv_area+0x20>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
   22572:	6923      	ldr	r3, [r4, #16]
   22574:	b113      	cbz	r3, 2257c <_lv_inv_area+0x58>
   22576:	a902      	add	r1, sp, #8
   22578:	4620      	mov	r0, r4
   2257a:	4798      	blx	r3
   2257c:	f104 055a 	add.w	r5, r4, #90	; 0x5a
{
   22580:	2600      	movs	r6, #0
   22582:	462f      	mov	r7, r5
        for(i = 0; i < disp->inv_p; i++) {
   22584:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   22588:	b2b2      	uxth	r2, r6
   2258a:	f3c3 0009 	ubfx	r0, r3, #0, #10
   2258e:	4290      	cmp	r0, r2
   22590:	d815      	bhi.n	225be <_lv_inv_area+0x9a>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
   22592:	281f      	cmp	r0, #31
   22594:	d81d      	bhi.n	225d2 <_lv_inv_area+0xae>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
   22596:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   2259a:	2208      	movs	r2, #8
   2259c:	eb0d 0102 	add.w	r1, sp, r2
   225a0:	305a      	adds	r0, #90	; 0x5a
   225a2:	f7ff ff1b 	bl	223dc <_lv_memcpy>
        disp->inv_p++;
   225a6:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
   225aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
        disp->inv_p++;
   225ac:	1c5a      	adds	r2, r3, #1
   225ae:	f362 0309 	bfi	r3, r2, #0, #10
   225b2:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
   225b6:	2103      	movs	r1, #3
   225b8:	f7f6 fd84 	bl	190c4 <lv_task_set_prio>
   225bc:	e7c2      	b.n	22544 <_lv_inv_area+0x20>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
   225be:	4629      	mov	r1, r5
   225c0:	2200      	movs	r2, #0
   225c2:	a802      	add	r0, sp, #8
   225c4:	f002 ff2a 	bl	2541c <_lv_area_is_in>
   225c8:	3601      	adds	r6, #1
   225ca:	3508      	adds	r5, #8
   225cc:	2800      	cmp	r0, #0
   225ce:	d0d9      	beq.n	22584 <_lv_inv_area+0x60>
   225d0:	e7b8      	b.n	22544 <_lv_inv_area+0x20>
            disp->inv_p = 0;
   225d2:	f36f 0309 	bfc	r3, #0, #10
   225d6:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
   225da:	2208      	movs	r2, #8
   225dc:	4669      	mov	r1, sp
   225de:	4638      	mov	r0, r7
   225e0:	e7df      	b.n	225a2 <_lv_inv_area+0x7e>

000225e2 <lv_style_list_get_style>:
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
   225e2:	8882      	ldrh	r2, [r0, #4]
   225e4:	f402 72c0 	and.w	r2, r2, #384	; 0x180
   225e8:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   225ec:	7902      	ldrb	r2, [r0, #4]
    if(list->has_trans && list->skip_trans) id++;
   225ee:	bf08      	it	eq
   225f0:	3101      	addeq	r1, #1
{
   225f2:	4603      	mov	r3, r0
    if(list->has_trans && list->skip_trans) id++;
   225f4:	bf08      	it	eq
   225f6:	b2c9      	uxtbeq	r1, r1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   225f8:	f012 003f 	ands.w	r0, r2, #63	; 0x3f
   225fc:	d006      	beq.n	2260c <lv_style_list_get_style+0x2a>
   225fe:	4288      	cmp	r0, r1
   22600:	d903      	bls.n	2260a <lv_style_list_get_style+0x28>
    return list->style_list[id];
   22602:	681b      	ldr	r3, [r3, #0]
   22604:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   22608:	4770      	bx	lr
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   2260a:	2000      	movs	r0, #0
}
   2260c:	4770      	bx	lr

0002260e <get_prop_size>:
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
   2260e:	f000 000f 	and.w	r0, r0, #15
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
   22612:	2808      	cmp	r0, #8
   22614:	d904      	bls.n	22620 <get_prop_size+0x12>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
    else size += sizeof(const void *);
   22616:	280e      	cmp	r0, #14
   22618:	bf34      	ite	cc
   2261a:	2003      	movcc	r0, #3
   2261c:	2006      	movcs	r0, #6
   2261e:	4770      	bx	lr
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
   22620:	2004      	movs	r0, #4
    return size;
}
   22622:	4770      	bx	lr

00022624 <get_style_prop.isra.0>:
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)
   22624:	b082      	sub	sp, #8
    prop_p[0] = style->map[idx];
   22626:	5c43      	ldrb	r3, [r0, r1]
   22628:	f88d 3006 	strb.w	r3, [sp, #6]
    prop_p[1] = style->map[idx + 1];
   2262c:	4408      	add	r0, r1
   2262e:	7843      	ldrb	r3, [r0, #1]
   22630:	f88d 3007 	strb.w	r3, [sp, #7]
}
   22634:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   22638:	b002      	add	sp, #8
   2263a:	4770      	bx	lr

0002263c <get_style_prop_attr>:
{
   2263c:	b508      	push	{r3, lr}
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
   2263e:	6800      	ldr	r0, [r0, #0]
   22640:	f7ff fff0 	bl	22624 <get_style_prop.isra.0>
}
   22644:	f3c0 2007 	ubfx	r0, r0, #8, #8
   22648:	bd08      	pop	{r3, pc}

0002264a <get_property_index>:
{
   2264a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(style->map == NULL) return -1;
   2264e:	6803      	ldr	r3, [r0, #0]
{
   22650:	4605      	mov	r5, r0
   22652:	460a      	mov	r2, r1
    if(style->map == NULL) return -1;
   22654:	b37b      	cbz	r3, 226b6 <get_property_index+0x6c>
    int16_t id_guess = -1;
   22656:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   2265a:	f3c2 2206 	ubfx	r2, r2, #8, #7
    uint8_t id_to_find = prop & 0xFF;
   2265e:	b2cf      	uxtb	r7, r1
    attr = (prop >> 8) & 0xFF;
   22660:	ea4f 2811 	mov.w	r8, r1, lsr #8
    int16_t weight = -1;
   22664:	4626      	mov	r6, r4
    size_t i = 0;
   22666:	2100      	movs	r1, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   22668:	43d2      	mvns	r2, r2
    return get_style_prop(style, idx) & 0xFF;
   2266a:	6828      	ldr	r0, [r5, #0]
   2266c:	f7ff ffda 	bl	22624 <get_style_prop.isra.0>
   22670:	fa5f f980 	uxtb.w	r9, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSEING_PROP) {
   22674:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   22678:	d101      	bne.n	2267e <get_property_index+0x34>
    return id_guess;
   2267a:	4620      	mov	r0, r4
   2267c:	e00a      	b.n	22694 <get_property_index+0x4a>
        if(prop_id == id_to_find) {
   2267e:	454f      	cmp	r7, r9
   22680:	d114      	bne.n	226ac <get_property_index+0x62>
            attr_i = get_style_prop_attr(style, i);
   22682:	4628      	mov	r0, r5
   22684:	f7ff ffda 	bl	2263c <get_style_prop_attr>
   22688:	4603      	mov	r3, r0
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
   2268a:	ea88 0000 	eor.w	r0, r8, r0
   2268e:	0640      	lsls	r0, r0, #25
   22690:	d102      	bne.n	22698 <get_property_index+0x4e>
                return i;
   22692:	4608      	mov	r0, r1
}
   22694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   22698:	ea02 0003 	and.w	r0, r2, r3
   2269c:	0640      	lsls	r0, r0, #25
   2269e:	d105      	bne.n	226ac <get_property_index+0x62>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
   226a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   226a4:	42b3      	cmp	r3, r6
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
   226a6:	bfc4      	itt	gt
   226a8:	b21e      	sxthgt	r6, r3
                    id_guess = i;
   226aa:	b20c      	sxthgt	r4, r1
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
   226ac:	4648      	mov	r0, r9
   226ae:	f7ff ffae 	bl	2260e <get_prop_size>
   226b2:	4401      	add	r1, r0
   226b4:	e7d9      	b.n	2266a <get_property_index+0x20>
    if(style->map == NULL) return -1;
   226b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   226ba:	e7eb      	b.n	22694 <get_property_index+0x4a>

000226bc <_lv_memset_00>:
   226bc:	460a      	mov	r2, r1
   226be:	2100      	movs	r1, #0
   226c0:	f004 b9e4 	b.w	26a8c <memset>

000226c4 <_lv_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   226c4:	f004 b9c1 	b.w	26a4a <memcpy>

000226c8 <style_resize.isra.0>:
static inline void style_resize(lv_style_t * style, size_t sz)
   226c8:	b510      	push	{r4, lr}
   226ca:	4604      	mov	r4, r0
    style->map = lv_mem_realloc(style->map, sz);
   226cc:	6800      	ldr	r0, [r0, #0]
   226ce:	f003 f911 	bl	258f4 <lv_mem_realloc>
   226d2:	6020      	str	r0, [r4, #0]
}
   226d4:	bd10      	pop	{r4, pc}

000226d6 <lv_style_init>:
    _lv_memset_00(style, sizeof(lv_style_t));
   226d6:	2104      	movs	r1, #4
   226d8:	f7ff bff0 	b.w	226bc <_lv_memset_00>

000226dc <lv_style_list_init>:
    _lv_memset_00(list, sizeof(lv_style_list_t));
   226dc:	2108      	movs	r1, #8
   226de:	f7ff bfed 	b.w	226bc <_lv_memset_00>

000226e2 <_lv_style_list_remove_style>:
{
   226e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   226e4:	4604      	mov	r4, r0
    if(list->style_cnt == 0) return;
   226e6:	7900      	ldrb	r0, [r0, #4]
{
   226e8:	460e      	mov	r6, r1
    if(list->style_cnt == 0) return;
   226ea:	f010 013f 	ands.w	r1, r0, #63	; 0x3f
   226ee:	d004      	beq.n	226fa <_lv_style_list_remove_style+0x18>
    for(i = 0; i < list->style_cnt; i++) {
   226f0:	460b      	mov	r3, r1
   226f2:	2200      	movs	r2, #0
   226f4:	b2d0      	uxtb	r0, r2
   226f6:	4283      	cmp	r3, r0
   226f8:	d800      	bhi.n	226fc <_lv_style_list_remove_style+0x1a>
}
   226fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(list->style_list[i] == style) {
   226fc:	6820      	ldr	r0, [r4, #0]
   226fe:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
   22702:	42b5      	cmp	r5, r6
   22704:	f102 0201 	add.w	r2, r2, #1
   22708:	d1f4      	bne.n	226f4 <_lv_style_list_remove_style+0x12>
    if(list->style_cnt == 1) {
   2270a:	2901      	cmp	r1, #1
   2270c:	d108      	bne.n	22720 <_lv_style_list_remove_style+0x3e>
        lv_mem_free(list->style_list);
   2270e:	f7f6 faaf 	bl	18c70 <lv_mem_free>
        list->style_list = NULL;
   22712:	2300      	movs	r3, #0
   22714:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
   22716:	7923      	ldrb	r3, [r4, #4]
   22718:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   2271c:	7123      	strb	r3, [r4, #4]
        return;
   2271e:	e7ec      	b.n	226fa <_lv_style_list_remove_style+0x18>
    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
   22720:	1e58      	subs	r0, r3, #1
   22722:	0080      	lsls	r0, r0, #2
   22724:	f7f6 fa90 	bl	18c48 <lv_mem_alloc>
    if(new_classes == NULL) {
   22728:	4605      	mov	r5, r0
   2272a:	2800      	cmp	r0, #0
   2272c:	d0e5      	beq.n	226fa <_lv_style_list_remove_style+0x18>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
   2272e:	7921      	ldrb	r1, [r4, #4]
   22730:	6820      	ldr	r0, [r4, #0]
   22732:	2300      	movs	r3, #0
   22734:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   22738:	461a      	mov	r2, r3
   2273a:	b2df      	uxtb	r7, r3
   2273c:	42b9      	cmp	r1, r7
   2273e:	d809      	bhi.n	22754 <_lv_style_list_remove_style+0x72>
    lv_mem_free(list->style_list);
   22740:	f7f6 fa96 	bl	18c70 <lv_mem_free>
    list->style_cnt--;
   22744:	7923      	ldrb	r3, [r4, #4]
    list->style_list = new_classes;
   22746:	6025      	str	r5, [r4, #0]
    list->style_cnt--;
   22748:	f103 023f 	add.w	r2, r3, #63	; 0x3f
   2274c:	f362 0305 	bfi	r3, r2, #0, #6
   22750:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
   22752:	e7d2      	b.n	226fa <_lv_style_list_remove_style+0x18>
        if(list->style_list[i] == style) continue;
   22754:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
   22758:	42b7      	cmp	r7, r6
        new_classes[j] = list->style_list[i];
   2275a:	bf1e      	ittt	ne
   2275c:	f845 7022 	strne.w	r7, [r5, r2, lsl #2]
        j++;
   22760:	3201      	addne	r2, #1
   22762:	b2d2      	uxtbne	r2, r2
    for(i = 0, j = 0; i < list->style_cnt; i++) {
   22764:	3301      	adds	r3, #1
   22766:	e7e8      	b.n	2273a <_lv_style_list_remove_style+0x58>

00022768 <_lv_style_list_add_style>:
{
   22768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2276a:	460d      	mov	r5, r1
    if(list == NULL) return;
   2276c:	4604      	mov	r4, r0
   2276e:	b1e8      	cbz	r0, 227ac <_lv_style_list_add_style+0x44>
    _lv_style_list_remove_style(list, style);
   22770:	f7ff ffb7 	bl	226e2 <_lv_style_list_remove_style>
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
   22774:	7921      	ldrb	r1, [r4, #4]
   22776:	0688      	lsls	r0, r1, #26
   22778:	d119      	bne.n	227ae <_lv_style_list_add_style+0x46>
   2277a:	2004      	movs	r0, #4
   2277c:	f7f6 fa64 	bl	18c48 <lv_mem_alloc>
    if(new_classes == NULL) {
   22780:	b1a0      	cbz	r0, 227ac <_lv_style_list_add_style+0x44>
    if(list->has_trans) first_style++;
   22782:	7923      	ldrb	r3, [r4, #4]
    if(list->has_local) first_style++;
   22784:	0659      	lsls	r1, r3, #25
    if(list->has_trans) first_style++;
   22786:	ea4f 12d3 	mov.w	r2, r3, lsr #7
    for(i = list->style_cnt; i > first_style; i--) {
   2278a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if(list->has_local) first_style++;
   2278e:	bf48      	it	mi
   22790:	3201      	addmi	r2, #1
    for(i = list->style_cnt; i > first_style; i--) {
   22792:	4619      	mov	r1, r3
   22794:	eb00 0683 	add.w	r6, r0, r3, lsl #2
   22798:	4291      	cmp	r1, r2
   2279a:	d810      	bhi.n	227be <_lv_style_list_add_style+0x56>
    new_classes[first_style] = style;
   2279c:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    list->style_cnt++;
   227a0:	7922      	ldrb	r2, [r4, #4]
    list->style_list = new_classes;
   227a2:	6020      	str	r0, [r4, #0]
    list->style_cnt++;
   227a4:	3301      	adds	r3, #1
   227a6:	f363 0205 	bfi	r2, r3, #0, #6
   227aa:	7122      	strb	r2, [r4, #4]
}
   227ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
   227ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   227b2:	3101      	adds	r1, #1
   227b4:	6820      	ldr	r0, [r4, #0]
   227b6:	0089      	lsls	r1, r1, #2
   227b8:	f003 f89c 	bl	258f4 <lv_mem_realloc>
   227bc:	e7e0      	b.n	22780 <_lv_style_list_add_style+0x18>
        new_classes[i] = new_classes[i - 1];
   227be:	f856 7c04 	ldr.w	r7, [r6, #-4]
   227c2:	f846 7904 	str.w	r7, [r6], #-4
    for(i = list->style_cnt; i > first_style; i--) {
   227c6:	3901      	subs	r1, #1
   227c8:	b2c9      	uxtb	r1, r1
   227ca:	e7e5      	b.n	22798 <_lv_style_list_add_style+0x30>

000227cc <get_alloc_local_style>:
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   227cc:	7901      	ldrb	r1, [r0, #4]
{
   227ce:	b538      	push	{r3, r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   227d0:	064b      	lsls	r3, r1, #25
{
   227d2:	4604      	mov	r4, r0
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   227d4:	d504      	bpl.n	227e0 <get_alloc_local_style+0x14>
}
   227d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   227da:	09c9      	lsrs	r1, r1, #7
   227dc:	f7ff bf01 	b.w	225e2 <lv_style_list_get_style>
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
   227e0:	2004      	movs	r0, #4
   227e2:	f7f6 fa31 	bl	18c48 <lv_mem_alloc>
    if(local_style == NULL) {
   227e6:	4605      	mov	r5, r0
   227e8:	b148      	cbz	r0, 227fe <get_alloc_local_style+0x32>
    lv_style_init(local_style);
   227ea:	f7ff ff74 	bl	226d6 <lv_style_init>
    _lv_style_list_add_style(list, local_style);
   227ee:	4629      	mov	r1, r5
   227f0:	4620      	mov	r0, r4
   227f2:	f7ff ffb9 	bl	22768 <_lv_style_list_add_style>
    list->has_local = 1;
   227f6:	7923      	ldrb	r3, [r4, #4]
   227f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   227fc:	7123      	strb	r3, [r4, #4]
}
   227fe:	4628      	mov	r0, r5
   22800:	bd38      	pop	{r3, r4, r5, pc}

00022802 <lv_style_reset>:
{
   22802:	b510      	push	{r4, lr}
   22804:	4604      	mov	r4, r0
    lv_mem_free(style->map);
   22806:	6800      	ldr	r0, [r0, #0]
   22808:	f7f6 fa32 	bl	18c70 <lv_mem_free>
    style->map = NULL;
   2280c:	2300      	movs	r3, #0
   2280e:	6023      	str	r3, [r4, #0]
}
   22810:	bd10      	pop	{r4, pc}

00022812 <_lv_style_get_mem_size>:
{
   22812:	4602      	mov	r2, r0
    if(style->map == NULL) return 0;
   22814:	6800      	ldr	r0, [r0, #0]
{
   22816:	b508      	push	{r3, lr}
    if(style->map == NULL) return 0;
   22818:	b140      	cbz	r0, 2282c <_lv_style_get_mem_size+0x1a>
    size_t i = 0;
   2281a:	2100      	movs	r1, #0
    return get_style_prop(style, idx) & 0xFF;
   2281c:	6810      	ldr	r0, [r2, #0]
   2281e:	f7ff ff01 	bl	22624 <get_style_prop.isra.0>
   22822:	b2c0      	uxtb	r0, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSEING_PROP) {
   22824:	28ff      	cmp	r0, #255	; 0xff
   22826:	d102      	bne.n	2282e <_lv_style_get_mem_size+0x1c>
    return i + sizeof(lv_style_property_t);
   22828:	3102      	adds	r1, #2
   2282a:	b288      	uxth	r0, r1
}
   2282c:	bd08      	pop	{r3, pc}
    return idx + get_prop_size(prop_id);
   2282e:	f7ff feee 	bl	2260e <get_prop_size>
   22832:	4401      	add	r1, r0
   22834:	e7f2      	b.n	2281c <_lv_style_get_mem_size+0xa>

00022836 <lv_style_copy>:
{
   22836:	b570      	push	{r4, r5, r6, lr}
   22838:	4606      	mov	r6, r0
    if(style_src == NULL) return;
   2283a:	460c      	mov	r4, r1
   2283c:	b171      	cbz	r1, 2285c <lv_style_copy+0x26>
    if(style_src->map == NULL) return;
   2283e:	680b      	ldr	r3, [r1, #0]
   22840:	b163      	cbz	r3, 2285c <lv_style_copy+0x26>
    uint16_t size = _lv_style_get_mem_size(style_src);
   22842:	4608      	mov	r0, r1
   22844:	f7ff ffe5 	bl	22812 <_lv_style_get_mem_size>
   22848:	4605      	mov	r5, r0
    style_dest->map = lv_mem_alloc(size);
   2284a:	f7f6 f9fd 	bl	18c48 <lv_mem_alloc>
   2284e:	6030      	str	r0, [r6, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
   22850:	6821      	ldr	r1, [r4, #0]
   22852:	462a      	mov	r2, r5
}
   22854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_memcpy(style_dest->map, style_src->map, size);
   22858:	f7ff bf34 	b.w	226c4 <_lv_memcpy>
}
   2285c:	bd70      	pop	{r4, r5, r6, pc}

0002285e <_lv_style_set_int>:
{
   2285e:	b530      	push	{r4, r5, lr}
   22860:	b085      	sub	sp, #20
   22862:	4605      	mov	r5, r0
   22864:	f8ad 1006 	strh.w	r1, [sp, #6]
   22868:	f8ad 2004 	strh.w	r2, [sp, #4]
    int32_t id = get_property_index(style, prop);
   2286c:	f7ff feed 	bl	2264a <get_property_index>
    if(id >= 0) {
   22870:	1e01      	subs	r1, r0, #0
   22872:	db11      	blt.n	22898 <_lv_style_set_int+0x3a>
        attr_found = get_style_prop_attr(style, id);
   22874:	4628      	mov	r0, r5
   22876:	f7ff fee1 	bl	2263c <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   2287a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   2287e:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   22882:	0643      	lsls	r3, r0, #25
   22884:	d108      	bne.n	22898 <_lv_style_set_int+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
   22886:	682b      	ldr	r3, [r5, #0]
   22888:	1c88      	adds	r0, r1, #2
   2288a:	2202      	movs	r2, #2
   2288c:	a901      	add	r1, sp, #4
   2288e:	4418      	add	r0, r3
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   22890:	f7ff ff18 	bl	226c4 <_lv_memcpy>
}
   22894:	b005      	add	sp, #20
   22896:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   22898:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   2289a:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   2289c:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   228a0:	f7ff ffb7 	bl	22812 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   228a4:	1e04      	subs	r4, r0, #0
   228a6:	bf08      	it	eq
   228a8:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
   228aa:	3404      	adds	r4, #4
    style_resize(style, size);
   228ac:	b2a4      	uxth	r4, r4
   228ae:	4621      	mov	r1, r4
   228b0:	4628      	mov	r0, r5
   228b2:	f7ff ff09 	bl	226c8 <style_resize.isra.0>
    if(style == NULL) return;
   228b6:	2d00      	cmp	r5, #0
   228b8:	d0ec      	beq.n	22894 <_lv_style_set_int+0x36>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   228ba:	6828      	ldr	r0, [r5, #0]
   228bc:	1fa3      	subs	r3, r4, #6
   228be:	2202      	movs	r2, #2
   228c0:	f10d 0106 	add.w	r1, sp, #6
   228c4:	4418      	add	r0, r3
   228c6:	f7ff fefd 	bl	226c4 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   228ca:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   228cc:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   228ce:	2202      	movs	r2, #2
   228d0:	a901      	add	r1, sp, #4
   228d2:	4418      	add	r0, r3
   228d4:	f7ff fef6 	bl	226c4 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   228d8:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   228da:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   228dc:	2202      	movs	r2, #2
   228de:	f10d 010e 	add.w	r1, sp, #14
   228e2:	4420      	add	r0, r4
   228e4:	e7d4      	b.n	22890 <_lv_style_set_int+0x32>

000228e6 <_lv_style_set_color>:
{
   228e6:	b530      	push	{r4, r5, lr}
   228e8:	b085      	sub	sp, #20
   228ea:	4605      	mov	r5, r0
   228ec:	f8ad 1006 	strh.w	r1, [sp, #6]
   228f0:	f88d 2004 	strb.w	r2, [sp, #4]
    int32_t id = get_property_index(style, prop);
   228f4:	f7ff fea9 	bl	2264a <get_property_index>
    if(id >= 0) {
   228f8:	1e01      	subs	r1, r0, #0
   228fa:	db11      	blt.n	22920 <_lv_style_set_color+0x3a>
        attr_found = get_style_prop_attr(style, id);
   228fc:	4628      	mov	r0, r5
   228fe:	f7ff fe9d 	bl	2263c <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   22902:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   22906:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   2290a:	0643      	lsls	r3, r0, #25
   2290c:	d108      	bne.n	22920 <_lv_style_set_color+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
   2290e:	682b      	ldr	r3, [r5, #0]
   22910:	1c88      	adds	r0, r1, #2
   22912:	2201      	movs	r2, #1
   22914:	a901      	add	r1, sp, #4
   22916:	4418      	add	r0, r3
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   22918:	f7ff fed4 	bl	226c4 <_lv_memcpy>
}
   2291c:	b005      	add	sp, #20
   2291e:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   22920:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   22922:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   22924:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   22928:	f7ff ff73 	bl	22812 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   2292c:	1e04      	subs	r4, r0, #0
   2292e:	bf08      	it	eq
   22930:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
   22932:	3403      	adds	r4, #3
    style_resize(style, size);
   22934:	b2a4      	uxth	r4, r4
   22936:	4621      	mov	r1, r4
   22938:	4628      	mov	r0, r5
   2293a:	f7ff fec5 	bl	226c8 <style_resize.isra.0>
    if(style == NULL) return;
   2293e:	2d00      	cmp	r5, #0
   22940:	d0ec      	beq.n	2291c <_lv_style_set_color+0x36>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   22942:	6828      	ldr	r0, [r5, #0]
   22944:	1f63      	subs	r3, r4, #5
   22946:	2202      	movs	r2, #2
   22948:	f10d 0106 	add.w	r1, sp, #6
   2294c:	4418      	add	r0, r3
   2294e:	f7ff feb9 	bl	226c4 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   22952:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   22954:	1ee3      	subs	r3, r4, #3
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   22956:	2201      	movs	r2, #1
   22958:	a901      	add	r1, sp, #4
   2295a:	4418      	add	r0, r3
   2295c:	f7ff feb2 	bl	226c4 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   22960:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   22962:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   22964:	2202      	movs	r2, #2
   22966:	f10d 010e 	add.w	r1, sp, #14
   2296a:	4420      	add	r0, r4
   2296c:	e7d4      	b.n	22918 <_lv_style_set_color+0x32>

0002296e <_lv_style_set_opa>:
{
   2296e:	b530      	push	{r4, r5, lr}
   22970:	b085      	sub	sp, #20
   22972:	4605      	mov	r5, r0
   22974:	f8ad 1006 	strh.w	r1, [sp, #6]
   22978:	f88d 2005 	strb.w	r2, [sp, #5]
    int32_t id = get_property_index(style, prop);
   2297c:	f7ff fe65 	bl	2264a <get_property_index>
    if(id >= 0) {
   22980:	1e01      	subs	r1, r0, #0
   22982:	db12      	blt.n	229aa <_lv_style_set_opa+0x3c>
        attr_found = get_style_prop_attr(style, id);
   22984:	4628      	mov	r0, r5
   22986:	f7ff fe59 	bl	2263c <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   2298a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   2298e:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   22992:	0643      	lsls	r3, r0, #25
   22994:	d109      	bne.n	229aa <_lv_style_set_opa+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
   22996:	682b      	ldr	r3, [r5, #0]
   22998:	1c88      	adds	r0, r1, #2
   2299a:	2201      	movs	r2, #1
   2299c:	f10d 0105 	add.w	r1, sp, #5
   229a0:	4418      	add	r0, r3
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   229a2:	f7ff fe8f 	bl	226c4 <_lv_memcpy>
}
   229a6:	b005      	add	sp, #20
   229a8:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   229aa:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   229ac:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   229ae:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   229b2:	f7ff ff2e 	bl	22812 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   229b6:	1e04      	subs	r4, r0, #0
   229b8:	bf08      	it	eq
   229ba:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
   229bc:	3403      	adds	r4, #3
    style_resize(style, size);
   229be:	b2a4      	uxth	r4, r4
   229c0:	4621      	mov	r1, r4
   229c2:	4628      	mov	r0, r5
   229c4:	f7ff fe80 	bl	226c8 <style_resize.isra.0>
    if(style == NULL) return;
   229c8:	2d00      	cmp	r5, #0
   229ca:	d0ec      	beq.n	229a6 <_lv_style_set_opa+0x38>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   229cc:	6828      	ldr	r0, [r5, #0]
   229ce:	1f63      	subs	r3, r4, #5
   229d0:	2202      	movs	r2, #2
   229d2:	f10d 0106 	add.w	r1, sp, #6
   229d6:	4418      	add	r0, r3
   229d8:	f7ff fe74 	bl	226c4 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   229dc:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   229de:	1ee3      	subs	r3, r4, #3
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   229e0:	2201      	movs	r2, #1
   229e2:	f10d 0105 	add.w	r1, sp, #5
   229e6:	4418      	add	r0, r3
   229e8:	f7ff fe6c 	bl	226c4 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   229ec:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   229ee:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   229f0:	2202      	movs	r2, #2
   229f2:	f10d 010e 	add.w	r1, sp, #14
   229f6:	4420      	add	r0, r4
   229f8:	e7d3      	b.n	229a2 <_lv_style_set_opa+0x34>

000229fa <_lv_style_get_int>:
{
   229fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229fc:	4604      	mov	r4, r0
   229fe:	460e      	mov	r6, r1
   22a00:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   22a02:	b910      	cbnz	r0, 22a0a <_lv_style_get_int+0x10>
   22a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   22a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   22a0a:	6803      	ldr	r3, [r0, #0]
   22a0c:	2b00      	cmp	r3, #0
   22a0e:	d0f9      	beq.n	22a04 <_lv_style_get_int+0xa>
    int32_t id = get_property_index(style, prop);
   22a10:	f7ff fe1b 	bl	2264a <get_property_index>
    if(id < 0) {
   22a14:	1e05      	subs	r5, r0, #0
   22a16:	dbf5      	blt.n	22a04 <_lv_style_get_int+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
   22a18:	6821      	ldr	r1, [r4, #0]
   22a1a:	1cab      	adds	r3, r5, #2
   22a1c:	4419      	add	r1, r3
   22a1e:	2202      	movs	r2, #2
   22a20:	4638      	mov	r0, r7
   22a22:	f7ff fe4f 	bl	226c4 <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   22a26:	4629      	mov	r1, r5
   22a28:	4620      	mov	r0, r4
   22a2a:	f7ff fe07 	bl	2263c <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   22a2e:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   22a32:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   22a36:	e7e7      	b.n	22a08 <_lv_style_get_int+0xe>

00022a38 <_lv_style_get_color>:
{
   22a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22a3a:	4604      	mov	r4, r0
   22a3c:	460e      	mov	r6, r1
   22a3e:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   22a40:	b910      	cbnz	r0, 22a48 <_lv_style_get_color+0x10>
   22a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   22a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   22a48:	6803      	ldr	r3, [r0, #0]
   22a4a:	2b00      	cmp	r3, #0
   22a4c:	d0f9      	beq.n	22a42 <_lv_style_get_color+0xa>
    int32_t id = get_property_index(style, prop);
   22a4e:	f7ff fdfc 	bl	2264a <get_property_index>
    if(id < 0) {
   22a52:	1e05      	subs	r5, r0, #0
   22a54:	dbf5      	blt.n	22a42 <_lv_style_get_color+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
   22a56:	6821      	ldr	r1, [r4, #0]
   22a58:	1cab      	adds	r3, r5, #2
   22a5a:	4419      	add	r1, r3
   22a5c:	2201      	movs	r2, #1
   22a5e:	4638      	mov	r0, r7
   22a60:	f7ff fe30 	bl	226c4 <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   22a64:	4629      	mov	r1, r5
   22a66:	4620      	mov	r0, r4
   22a68:	f7ff fde8 	bl	2263c <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   22a6c:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   22a70:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   22a74:	e7e7      	b.n	22a46 <_lv_style_get_color+0xe>

00022a76 <_lv_style_get_ptr>:
{
   22a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22a78:	4604      	mov	r4, r0
   22a7a:	460e      	mov	r6, r1
   22a7c:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   22a7e:	b910      	cbnz	r0, 22a86 <_lv_style_get_ptr+0x10>
   22a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   22a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   22a86:	6803      	ldr	r3, [r0, #0]
   22a88:	2b00      	cmp	r3, #0
   22a8a:	d0f9      	beq.n	22a80 <_lv_style_get_ptr+0xa>
    int32_t id = get_property_index(style, prop);
   22a8c:	f7ff fddd 	bl	2264a <get_property_index>
    if(id < 0) {
   22a90:	1e05      	subs	r5, r0, #0
   22a92:	dbf5      	blt.n	22a80 <_lv_style_get_ptr+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
   22a94:	6821      	ldr	r1, [r4, #0]
   22a96:	1cab      	adds	r3, r5, #2
   22a98:	4419      	add	r1, r3
   22a9a:	2204      	movs	r2, #4
   22a9c:	4638      	mov	r0, r7
   22a9e:	f7ff fe11 	bl	226c4 <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   22aa2:	4629      	mov	r1, r5
   22aa4:	4620      	mov	r0, r4
   22aa6:	f7ff fdc9 	bl	2263c <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   22aaa:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   22aae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   22ab2:	e7e7      	b.n	22a84 <_lv_style_get_ptr+0xe>

00022ab4 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
   22ab4:	7902      	ldrb	r2, [r0, #4]
{
   22ab6:	4603      	mov	r3, r0
    if(!list->has_local) return NULL;
   22ab8:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   22abc:	d005      	beq.n	22aca <lv_style_list_get_local_style+0x16>
    if(list->has_trans) return list->style_list[1];
   22abe:	0612      	lsls	r2, r2, #24
   22ac0:	681b      	ldr	r3, [r3, #0]
   22ac2:	d501      	bpl.n	22ac8 <lv_style_list_get_local_style+0x14>
   22ac4:	6858      	ldr	r0, [r3, #4]
   22ac6:	4770      	bx	lr
    else return list->style_list[0];
   22ac8:	6818      	ldr	r0, [r3, #0]
}
   22aca:	4770      	bx	lr

00022acc <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
   22acc:	f990 3004 	ldrsb.w	r3, [r0, #4]
   22ad0:	2b00      	cmp	r3, #0
    return list->style_list[0];
   22ad2:	bfba      	itte	lt
   22ad4:	6803      	ldrlt	r3, [r0, #0]
   22ad6:	6818      	ldrlt	r0, [r3, #0]
    if(!list->has_trans) return NULL;
   22ad8:	2000      	movge	r0, #0
}
   22ada:	4770      	bx	lr

00022adc <_lv_style_list_reset>:
{
   22adc:	b538      	push	{r3, r4, r5, lr}
    if(list == NULL) return;
   22ade:	4604      	mov	r4, r0
   22ae0:	b328      	cbz	r0, 22b2e <_lv_style_list_reset+0x52>
    if(list->has_local) {
   22ae2:	7903      	ldrb	r3, [r0, #4]
   22ae4:	065a      	lsls	r2, r3, #25
   22ae6:	d508      	bpl.n	22afa <_lv_style_list_reset+0x1e>
        lv_style_t * local = lv_style_list_get_local_style(list);
   22ae8:	f7ff ffe4 	bl	22ab4 <lv_style_list_get_local_style>
        if(local) {
   22aec:	4605      	mov	r5, r0
   22aee:	b120      	cbz	r0, 22afa <_lv_style_list_reset+0x1e>
            lv_style_reset(local);
   22af0:	f7ff fe87 	bl	22802 <lv_style_reset>
            lv_mem_free(local);
   22af4:	4628      	mov	r0, r5
   22af6:	f7f6 f8bb 	bl	18c70 <lv_mem_free>
    if(list->has_trans) {
   22afa:	f994 3004 	ldrsb.w	r3, [r4, #4]
   22afe:	2b00      	cmp	r3, #0
   22b00:	da09      	bge.n	22b16 <_lv_style_list_reset+0x3a>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
   22b02:	4620      	mov	r0, r4
   22b04:	f7ff ffe2 	bl	22acc <_lv_style_list_get_transition_style>
        if(trans) {
   22b08:	4605      	mov	r5, r0
   22b0a:	b120      	cbz	r0, 22b16 <_lv_style_list_reset+0x3a>
            lv_style_reset(trans);
   22b0c:	f7ff fe79 	bl	22802 <lv_style_reset>
            lv_mem_free(trans);
   22b10:	4628      	mov	r0, r5
   22b12:	f7f6 f8ad 	bl	18c70 <lv_mem_free>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
   22b16:	7923      	ldrb	r3, [r4, #4]
   22b18:	069b      	lsls	r3, r3, #26
   22b1a:	d002      	beq.n	22b22 <_lv_style_list_reset+0x46>
   22b1c:	6820      	ldr	r0, [r4, #0]
   22b1e:	f7f6 f8a7 	bl	18c70 <lv_mem_free>
    list->style_list = NULL;
   22b22:	2300      	movs	r3, #0
   22b24:	6023      	str	r3, [r4, #0]
    list->style_cnt = 0;
   22b26:	88a3      	ldrh	r3, [r4, #4]
   22b28:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
   22b2c:	80a3      	strh	r3, [r4, #4]
}
   22b2e:	bd38      	pop	{r3, r4, r5, pc}

00022b30 <lv_style_list_copy>:
{
   22b30:	b538      	push	{r3, r4, r5, lr}
   22b32:	460c      	mov	r4, r1
   22b34:	4605      	mov	r5, r0
    _lv_style_list_reset(list_dest);
   22b36:	f7ff ffd1 	bl	22adc <_lv_style_list_reset>
    if(list_src->style_list == NULL) return;
   22b3a:	6823      	ldr	r3, [r4, #0]
   22b3c:	b1f3      	cbz	r3, 22b7c <lv_style_list_copy+0x4c>
    if(list_src->has_local == 0) {
   22b3e:	7922      	ldrb	r2, [r4, #4]
   22b40:	f994 3004 	ldrsb.w	r3, [r4, #4]
   22b44:	f002 003f 	and.w	r0, r2, #63	; 0x3f
   22b48:	0652      	lsls	r2, r2, #25
   22b4a:	d429      	bmi.n	22ba0 <lv_style_list_copy+0x70>
        if(list_src->has_trans) {
   22b4c:	2b00      	cmp	r3, #0
   22b4e:	da16      	bge.n	22b7e <lv_style_list_copy+0x4e>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   22b50:	3801      	subs	r0, #1
   22b52:	0080      	lsls	r0, r0, #2
   22b54:	f7f6 f878 	bl	18c48 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   22b58:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   22b5a:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   22b5c:	6821      	ldr	r1, [r4, #0]
   22b5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   22b62:	3a01      	subs	r2, #1
   22b64:	0092      	lsls	r2, r2, #2
   22b66:	3104      	adds	r1, #4
   22b68:	f7ff fdac 	bl	226c4 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
   22b6c:	7923      	ldrb	r3, [r4, #4]
   22b6e:	792a      	ldrb	r2, [r5, #4]
   22b70:	f3c3 0305 	ubfx	r3, r3, #0, #6
   22b74:	3b01      	subs	r3, #1
   22b76:	f363 0205 	bfi	r2, r3, #0, #6
   22b7a:	712a      	strb	r2, [r5, #4]
}
   22b7c:	bd38      	pop	{r3, r4, r5, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
   22b7e:	0080      	lsls	r0, r0, #2
   22b80:	f7f6 f862 	bl	18c48 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
   22b84:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
   22b86:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
   22b88:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   22b8c:	0092      	lsls	r2, r2, #2
   22b8e:	6821      	ldr	r1, [r4, #0]
   22b90:	f7ff fd98 	bl	226c4 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt;
   22b94:	7922      	ldrb	r2, [r4, #4]
   22b96:	792b      	ldrb	r3, [r5, #4]
   22b98:	f362 0305 	bfi	r3, r2, #0, #6
   22b9c:	712b      	strb	r3, [r5, #4]
   22b9e:	e7ed      	b.n	22b7c <lv_style_list_copy+0x4c>
        if(list_src->has_trans) {
   22ba0:	2b00      	cmp	r3, #0
   22ba2:	da22      	bge.n	22bea <lv_style_list_copy+0xba>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
   22ba4:	3802      	subs	r0, #2
   22ba6:	0080      	lsls	r0, r0, #2
   22ba8:	f7f6 f84e 	bl	18c48 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
   22bac:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
   22bae:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
   22bb0:	6821      	ldr	r1, [r4, #0]
   22bb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   22bb6:	3a02      	subs	r2, #2
   22bb8:	0092      	lsls	r2, r2, #2
   22bba:	3108      	adds	r1, #8
   22bbc:	f7ff fd82 	bl	226c4 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 2;
   22bc0:	7923      	ldrb	r3, [r4, #4]
   22bc2:	f3c3 0305 	ubfx	r3, r3, #0, #6
   22bc6:	3b02      	subs	r3, #2
            list_dest->style_cnt = list_src->style_cnt - 1;
   22bc8:	792a      	ldrb	r2, [r5, #4]
   22bca:	f363 0205 	bfi	r2, r3, #0, #6
   22bce:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
   22bd0:	4628      	mov	r0, r5
   22bd2:	f7ff fdfb 	bl	227cc <get_alloc_local_style>
   22bd6:	4605      	mov	r5, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
   22bd8:	4620      	mov	r0, r4
   22bda:	f7ff fdf7 	bl	227cc <get_alloc_local_style>
   22bde:	4601      	mov	r1, r0
   22be0:	4628      	mov	r0, r5
}
   22be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
   22be6:	f7ff be26 	b.w	22836 <lv_style_copy>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   22bea:	3801      	subs	r0, #1
   22bec:	0080      	lsls	r0, r0, #2
   22bee:	f7f6 f82b 	bl	18c48 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   22bf2:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   22bf4:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   22bf6:	6821      	ldr	r1, [r4, #0]
   22bf8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   22bfc:	3a01      	subs	r2, #1
   22bfe:	0092      	lsls	r2, r2, #2
   22c00:	3104      	adds	r1, #4
   22c02:	f7ff fd5f 	bl	226c4 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
   22c06:	7923      	ldrb	r3, [r4, #4]
   22c08:	f3c3 0305 	ubfx	r3, r3, #0, #6
   22c0c:	3b01      	subs	r3, #1
   22c0e:	e7db      	b.n	22bc8 <lv_style_list_copy+0x98>

00022c10 <_lv_style_list_get_int>:
{
   22c10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22c14:	460f      	mov	r7, r1
   22c16:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   22c18:	4605      	mov	r5, r0
   22c1a:	b318      	cbz	r0, 22c64 <_lv_style_list_get_int+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
   22c1c:	6800      	ldr	r0, [r0, #0]
   22c1e:	b308      	cbz	r0, 22c64 <_lv_style_list_get_int+0x54>
    lv_style_int_t value_act = 0;
   22c20:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
   22c22:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    lv_style_int_t value_act = 0;
   22c26:	f8ad 6006 	strh.w	r6, [sp, #6]
    int16_t weight = -1;
   22c2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   22c2e:	792b      	ldrb	r3, [r5, #4]
   22c30:	fa0f f986 	sxth.w	r9, r6
   22c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22c38:	4599      	cmp	r9, r3
   22c3a:	db03      	blt.n	22c44 <_lv_style_list_get_int+0x34>
    if(weight >= 0) return LV_RES_OK;
   22c3c:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   22c3e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   22c42:	e00f      	b.n	22c64 <_lv_style_list_get_int+0x54>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   22c44:	b2f1      	uxtb	r1, r6
   22c46:	4628      	mov	r0, r5
   22c48:	f7ff fccb 	bl	225e2 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_int(class, prop, &value_act);
   22c4c:	f10d 0206 	add.w	r2, sp, #6
   22c50:	4639      	mov	r1, r7
   22c52:	f7ff fed2 	bl	229fa <_lv_style_get_int>
        if(weight_act == weight_goal) {
   22c56:	4582      	cmp	sl, r0
   22c58:	d107      	bne.n	22c6a <_lv_style_list_get_int+0x5a>
            *res = value_act;
   22c5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   22c5e:	f8a8 3000 	strh.w	r3, [r8]
            return LV_RES_OK;
   22c62:	2001      	movs	r0, #1
}
   22c64:	b002      	add	sp, #8
   22c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   22c6a:	f995 3004 	ldrsb.w	r3, [r5, #4]
   22c6e:	2b00      	cmp	r3, #0
   22c70:	da07      	bge.n	22c82 <_lv_style_list_get_int+0x72>
   22c72:	2800      	cmp	r0, #0
   22c74:	db05      	blt.n	22c82 <_lv_style_list_get_int+0x72>
   22c76:	f1b9 0f00 	cmp.w	r9, #0
   22c7a:	d102      	bne.n	22c82 <_lv_style_list_get_int+0x72>
   22c7c:	796b      	ldrb	r3, [r5, #5]
   22c7e:	07db      	lsls	r3, r3, #31
   22c80:	d5eb      	bpl.n	22c5a <_lv_style_list_get_int+0x4a>
        else if(weight_act > weight) {
   22c82:	4284      	cmp	r4, r0
            *res = value_act;
   22c84:	bfbe      	ittt	lt
   22c86:	f8bd 3006 	ldrhlt.w	r3, [sp, #6]
   22c8a:	f8a8 3000 	strhlt.w	r3, [r8]
   22c8e:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   22c90:	3601      	adds	r6, #1
   22c92:	e7cc      	b.n	22c2e <_lv_style_list_get_int+0x1e>

00022c94 <_lv_style_list_get_color>:
{
   22c94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22c98:	460f      	mov	r7, r1
   22c9a:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   22c9c:	4605      	mov	r5, r0
   22c9e:	b310      	cbz	r0, 22ce6 <_lv_style_list_get_color+0x52>
    if(list->style_list == NULL) return LV_RES_INV;
   22ca0:	6800      	ldr	r0, [r0, #0]
   22ca2:	b300      	cbz	r0, 22ce6 <_lv_style_list_get_color+0x52>
    value_act.full = 0;
   22ca4:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
   22ca6:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    value_act.full = 0;
   22caa:	f88d 6004 	strb.w	r6, [sp, #4]
    int16_t weight = -1;
   22cae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   22cb2:	792b      	ldrb	r3, [r5, #4]
   22cb4:	fa0f f986 	sxth.w	r9, r6
   22cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22cbc:	4599      	cmp	r9, r3
   22cbe:	db03      	blt.n	22cc8 <_lv_style_list_get_color+0x34>
    if(weight >= 0)  return LV_RES_OK;
   22cc0:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   22cc2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   22cc6:	e00e      	b.n	22ce6 <_lv_style_list_get_color+0x52>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   22cc8:	b2f1      	uxtb	r1, r6
   22cca:	4628      	mov	r0, r5
   22ccc:	f7ff fc89 	bl	225e2 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_color(class, prop, &value_act);
   22cd0:	aa01      	add	r2, sp, #4
   22cd2:	4639      	mov	r1, r7
   22cd4:	f7ff feb0 	bl	22a38 <_lv_style_get_color>
        if(weight_act == weight_goal) {
   22cd8:	4582      	cmp	sl, r0
   22cda:	d107      	bne.n	22cec <_lv_style_list_get_color+0x58>
            *res = value_act;
   22cdc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   22ce0:	f888 3000 	strb.w	r3, [r8]
            return LV_RES_OK;
   22ce4:	2001      	movs	r0, #1
}
   22ce6:	b002      	add	sp, #8
   22ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   22cec:	f995 3004 	ldrsb.w	r3, [r5, #4]
   22cf0:	2b00      	cmp	r3, #0
   22cf2:	da07      	bge.n	22d04 <_lv_style_list_get_color+0x70>
   22cf4:	2800      	cmp	r0, #0
   22cf6:	db05      	blt.n	22d04 <_lv_style_list_get_color+0x70>
   22cf8:	f1b9 0f00 	cmp.w	r9, #0
   22cfc:	d102      	bne.n	22d04 <_lv_style_list_get_color+0x70>
   22cfe:	796b      	ldrb	r3, [r5, #5]
   22d00:	07db      	lsls	r3, r3, #31
   22d02:	d5eb      	bpl.n	22cdc <_lv_style_list_get_color+0x48>
        else if(weight_act > weight) {
   22d04:	4284      	cmp	r4, r0
            *res = value_act;
   22d06:	bfbe      	ittt	lt
   22d08:	f89d 3004 	ldrblt.w	r3, [sp, #4]
   22d0c:	f888 3000 	strblt.w	r3, [r8]
   22d10:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   22d12:	3601      	adds	r6, #1
   22d14:	e7cd      	b.n	22cb2 <_lv_style_list_get_color+0x1e>

00022d16 <_lv_style_list_get_opa>:
{
   22d16:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22d1a:	460f      	mov	r7, r1
   22d1c:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   22d1e:	4605      	mov	r5, r0
   22d20:	b318      	cbz	r0, 22d6a <_lv_style_list_get_opa+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
   22d22:	6800      	ldr	r0, [r0, #0]
   22d24:	b308      	cbz	r0, 22d6a <_lv_style_list_get_opa+0x54>
    lv_opa_t value_act = LV_OPA_TRANSP;
   22d26:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
   22d28:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
   22d2c:	f88d 6007 	strb.w	r6, [sp, #7]
    int16_t weight = -1;
   22d30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   22d34:	792b      	ldrb	r3, [r5, #4]
   22d36:	fa0f f986 	sxth.w	r9, r6
   22d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22d3e:	4599      	cmp	r9, r3
   22d40:	db03      	blt.n	22d4a <_lv_style_list_get_opa+0x34>
    if(weight >= 0)  return LV_RES_OK;
   22d42:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   22d44:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   22d48:	e00f      	b.n	22d6a <_lv_style_list_get_opa+0x54>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   22d4a:	b2f1      	uxtb	r1, r6
   22d4c:	4628      	mov	r0, r5
   22d4e:	f7ff fc48 	bl	225e2 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_opa(class, prop, &value_act);
   22d52:	f10d 0207 	add.w	r2, sp, #7
   22d56:	4639      	mov	r1, r7
   22d58:	f7ff fe6e 	bl	22a38 <_lv_style_get_color>
        if(weight_act == weight_goal) {
   22d5c:	4582      	cmp	sl, r0
   22d5e:	d107      	bne.n	22d70 <_lv_style_list_get_opa+0x5a>
            *res = value_act;
   22d60:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22d64:	f888 3000 	strb.w	r3, [r8]
            return LV_RES_OK;
   22d68:	2001      	movs	r0, #1
}
   22d6a:	b002      	add	sp, #8
   22d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   22d70:	f995 3004 	ldrsb.w	r3, [r5, #4]
   22d74:	2b00      	cmp	r3, #0
   22d76:	da07      	bge.n	22d88 <_lv_style_list_get_opa+0x72>
   22d78:	2800      	cmp	r0, #0
   22d7a:	db05      	blt.n	22d88 <_lv_style_list_get_opa+0x72>
   22d7c:	f1b9 0f00 	cmp.w	r9, #0
   22d80:	d102      	bne.n	22d88 <_lv_style_list_get_opa+0x72>
   22d82:	796b      	ldrb	r3, [r5, #5]
   22d84:	07db      	lsls	r3, r3, #31
   22d86:	d5eb      	bpl.n	22d60 <_lv_style_list_get_opa+0x4a>
        else if(weight_act > weight) {
   22d88:	4284      	cmp	r4, r0
            *res = value_act;
   22d8a:	bfbe      	ittt	lt
   22d8c:	f89d 3007 	ldrblt.w	r3, [sp, #7]
   22d90:	f888 3000 	strblt.w	r3, [r8]
   22d94:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   22d96:	3601      	adds	r6, #1
   22d98:	e7cc      	b.n	22d34 <_lv_style_list_get_opa+0x1e>

00022d9a <_lv_style_list_get_ptr>:
{
   22d9a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22d9e:	460f      	mov	r7, r1
   22da0:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   22da2:	4605      	mov	r5, r0
   22da4:	b1f8      	cbz	r0, 22de6 <_lv_style_list_get_ptr+0x4c>
    if(list->style_list == NULL) return LV_RES_INV;
   22da6:	6800      	ldr	r0, [r0, #0]
   22da8:	b1e8      	cbz	r0, 22de6 <_lv_style_list_get_ptr+0x4c>
    int16_t weight_goal = attr;
   22daa:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
   22dae:	2600      	movs	r6, #0
    int16_t weight = -1;
   22db0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   22db4:	792b      	ldrb	r3, [r5, #4]
   22db6:	fa0f f986 	sxth.w	r9, r6
   22dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22dbe:	4599      	cmp	r9, r3
   22dc0:	db03      	blt.n	22dca <_lv_style_list_get_ptr+0x30>
    if(weight >= 0)  return LV_RES_OK;
   22dc2:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   22dc4:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   22dc8:	e00d      	b.n	22de6 <_lv_style_list_get_ptr+0x4c>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   22dca:	b2f1      	uxtb	r1, r6
   22dcc:	4628      	mov	r0, r5
   22dce:	f7ff fc08 	bl	225e2 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_ptr(class, prop, &value_act);
   22dd2:	aa01      	add	r2, sp, #4
   22dd4:	4639      	mov	r1, r7
   22dd6:	f7ff fe4e 	bl	22a76 <_lv_style_get_ptr>
        if(weight_act == weight_goal) {
   22dda:	4582      	cmp	sl, r0
   22ddc:	d106      	bne.n	22dec <_lv_style_list_get_ptr+0x52>
            *res = value_act;
   22dde:	9b01      	ldr	r3, [sp, #4]
   22de0:	f8c8 3000 	str.w	r3, [r8]
            return LV_RES_OK;
   22de4:	2001      	movs	r0, #1
}
   22de6:	b002      	add	sp, #8
   22de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   22dec:	f995 3004 	ldrsb.w	r3, [r5, #4]
   22df0:	2b00      	cmp	r3, #0
   22df2:	da07      	bge.n	22e04 <_lv_style_list_get_ptr+0x6a>
   22df4:	2800      	cmp	r0, #0
   22df6:	db05      	blt.n	22e04 <_lv_style_list_get_ptr+0x6a>
   22df8:	f1b9 0f00 	cmp.w	r9, #0
   22dfc:	d102      	bne.n	22e04 <_lv_style_list_get_ptr+0x6a>
   22dfe:	796b      	ldrb	r3, [r5, #5]
   22e00:	07db      	lsls	r3, r3, #31
   22e02:	d5ec      	bpl.n	22dde <_lv_style_list_get_ptr+0x44>
        else if(weight_act > weight) {
   22e04:	4284      	cmp	r4, r0
            *res = value_act;
   22e06:	bfbe      	ittt	lt
   22e08:	9b01      	ldrlt	r3, [sp, #4]
   22e0a:	f8c8 3000 	strlt.w	r3, [r8]
   22e0e:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   22e10:	3601      	adds	r6, #1
   22e12:	e7cf      	b.n	22db4 <_lv_style_list_get_ptr+0x1a>

00022e14 <_lv_blend_fill>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_fill(const lv_area_t * clip_area, const lv_area_t * fill_area,
                                          lv_color_t color, lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_opa_t opa,
                                          lv_blend_mode_t mode)
{
   22e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e18:	b08f      	sub	sp, #60	; 0x3c
   22e1a:	461d      	mov	r5, r3
   22e1c:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
   22e20:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   22e24:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
   22e28:	9306      	str	r3, [sp, #24]
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
   22e2a:	2e01      	cmp	r6, #1
{
   22e2c:	4681      	mov	r9, r0
   22e2e:	468a      	mov	sl, r1
   22e30:	4614      	mov	r4, r2
    if(opa < LV_OPA_MIN) return;
   22e32:	f240 80a1 	bls.w	22f78 <_lv_blend_fill+0x164>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
   22e36:	2b00      	cmp	r3, #0
   22e38:	f000 809e 	beq.w	22f78 <_lv_blend_fill+0x164>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   22e3c:	f7f3 fedc 	bl	16bf8 <_lv_refr_get_disp_refreshing>
   22e40:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   22e42:	f002 f98d 	bl	25160 <lv_disp_get_buf>
    const lv_area_t * disp_area = &vdb->area;
    lv_color_t * disp_buf = vdb->buf_act;
   22e46:	6883      	ldr	r3, [r0, #8]
   22e48:	9305      	str	r3, [sp, #20]

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   22e4a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   22e4e:	4683      	mov	fp, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   22e50:	b10b      	cbz	r3, 22e56 <_lv_blend_fill+0x42>
   22e52:	4640      	mov	r0, r8
   22e54:	4798      	blx	r3

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
   22e56:	4652      	mov	r2, sl
   22e58:	4649      	mov	r1, r9
   22e5a:	a80c      	add	r0, sp, #48	; 0x30
   22e5c:	f002 f9eb 	bl	25236 <_lv_area_intersect>
    if(!is_common) return;
   22e60:	2800      	cmp	r0, #0
   22e62:	f000 8089 	beq.w	22f78 <_lv_blend_fill+0x164>

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
   22e66:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   22e6a:	f9bb 0010 	ldrsh.w	r0, [fp, #16]
    draw_area.y1 -= disp_area->y1;
   22e6e:	f9bb 1012 	ldrsh.w	r1, [fp, #18]
    draw_area.x2 -= disp_area->x1;
    draw_area.y2 -= disp_area->y1;
   22e72:	f9bd 9036 	ldrsh.w	r9, [sp, #54]	; 0x36
    draw_area.x1 -= disp_area->x1;
   22e76:	1a1a      	subs	r2, r3, r0
   22e78:	fa0f fe82 	sxth.w	lr, r2
    draw_area.y1 -= disp_area->y1;
   22e7c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
   22e80:	9207      	str	r2, [sp, #28]
   22e82:	1a52      	subs	r2, r2, r1
   22e84:	fa0f fa82 	sxth.w	sl, r2
    draw_area.x2 -= disp_area->x1;
   22e88:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
    draw_area.x1 -= disp_area->x1;
   22e8c:	f8ad e030 	strh.w	lr, [sp, #48]	; 0x30
    draw_area.y2 -= disp_area->y1;
   22e90:	eba9 0101 	sub.w	r1, r9, r1
   22e94:	b209      	sxth	r1, r1
    draw_area.x2 -= disp_area->x1;
   22e96:	1a10      	subs	r0, r2, r0
    draw_area.y1 -= disp_area->y1;
   22e98:	f8ad a032 	strh.w	sl, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
   22e9c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    draw_area.y2 -= disp_area->y1;
   22ea0:	9108      	str	r1, [sp, #32]
   22ea2:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
#else
    if(mask)
   22ea6:	2d00      	cmp	r5, #0
   22ea8:	d139      	bne.n	22f1e <_lv_blend_fill+0x10a>
        int32_t mask_w = lv_area_get_width(&draw_area);
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    }

    if(disp->driver.set_px_cb) {
   22eaa:	f8d8 1014 	ldr.w	r1, [r8, #20]
   22eae:	2900      	cmp	r1, #0
   22eb0:	d14f      	bne.n	22f52 <_lv_blend_fill+0x13e>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
   22eb2:	2f00      	cmp	r7, #0
   22eb4:	d160      	bne.n	22f78 <_lv_blend_fill+0x164>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   22eb6:	f8bb 8014 	ldrh.w	r8, [fp, #20]
   22eba:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   22ebe:	f1c3 0301 	rsb	r3, r3, #1
   22ec2:	4413      	add	r3, r2
   22ec4:	f108 0801 	add.w	r8, r8, #1
   22ec8:	fa0f fb83 	sxth.w	fp, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   22ecc:	9b07      	ldr	r3, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   22ece:	eba8 0801 	sub.w	r8, r8, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   22ed2:	f1c3 0301 	rsb	r3, r3, #1

    int32_t draw_area_w = lv_area_get_width(draw_area);
    int32_t draw_area_h = lv_area_get_height(draw_area);

    /*Create a temp. disp_buf which always point to the first pixel of the destination area*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   22ed6:	9905      	ldr	r1, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   22ed8:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   22edc:	4499      	add	r9, r3
   22ede:	fb08 e30a 	mla	r3, r8, sl, lr
   22ee2:	4652      	mov	r2, sl
   22ee4:	eb01 0a03 	add.w	sl, r1, r3

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   22ee8:	9906      	ldr	r1, [sp, #24]
   22eea:	2901      	cmp	r1, #1
    int32_t draw_area_h = lv_area_get_height(draw_area);
   22eec:	fa0f f989 	sxth.w	r9, r9
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   22ef0:	f040 80b0 	bne.w	23054 <_lv_blend_fill+0x240>
        if(opa > LV_OPA_MAX) {
   22ef4:	2efd      	cmp	r6, #253	; 0xfd
   22ef6:	f200 8094 	bhi.w	23022 <_lv_blend_fill+0x20e>
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
   22efa:	f016 0f80 	tst.w	r6, #128	; 0x80
            lv_color_t last_dest_color = LV_COLOR_BLACK;
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);

            uint16_t color_premult[3];
            lv_color_premult(color, opa, color_premult);
            lv_opa_t opa_inv = 255 - opa;
   22efe:	ea6f 0606 	mvn.w	r6, r6
   22f02:	b2e3      	uxtb	r3, r4

            for(y = 0; y < draw_area_h; y++) {
   22f04:	4638      	mov	r0, r7
   22f06:	bf08      	it	eq
   22f08:	2300      	moveq	r3, #0
            lv_color_premult(color, opa, color_premult);
   22f0a:	f004 0401 	and.w	r4, r4, #1
    /*Restore color1*/
    lv_color_t c1;
    LV_COLOR_SET_R(c1, premult_c1[0]);
    LV_COLOR_SET_G(c1, premult_c1[1]);
    LV_COLOR_SET_B(c1, premult_c1[2]);
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
   22f0e:	b276      	sxtb	r6, r6
            for(y = 0; y < draw_area_h; y++) {
   22f10:	4581      	cmp	r9, r0
   22f12:	dd31      	ble.n	22f78 <_lv_blend_fill+0x164>
   22f14:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
                for(x = 0; x < draw_area_w; x++) {
   22f18:	f1ca 0201 	rsb	r2, sl, #1
   22f1c:	e094      	b.n	23048 <_lv_blend_fill+0x234>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   22f1e:	1c51      	adds	r1, r2, #1
   22f20:	1ac9      	subs	r1, r1, r3
        int32_t mask_w = lv_area_get_width(&draw_area);
   22f22:	b209      	sxth	r1, r1
   22f24:	910a      	str	r1, [sp, #40]	; 0x28
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   22f26:	f1c5 0101 	rsb	r1, r5, #1
   22f2a:	1e68      	subs	r0, r5, #1
   22f2c:	910b      	str	r1, [sp, #44]	; 0x2c
   22f2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   22f30:	eb01 0c00 	add.w	ip, r1, r0
   22f34:	990a      	ldr	r1, [sp, #40]	; 0x28
   22f36:	4561      	cmp	r1, ip
   22f38:	ddb7      	ble.n	22eaa <_lv_blend_fill+0x96>
   22f3a:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   22f3e:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   22f42:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   22f46:	bf98      	it	ls
   22f48:	f04f 0c00 	movls.w	ip, #0
   22f4c:	f880 c000 	strb.w	ip, [r0]
   22f50:	e7ed      	b.n	22f2e <_lv_blend_fill+0x11a>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   22f52:	f7f3 fe51 	bl	16bf8 <_lv_refr_get_disp_refreshing>
   22f56:	f8bb 2014 	ldrh.w	r2, [fp, #20]
   22f5a:	f8bb 3010 	ldrh.w	r3, [fp, #16]
   22f5e:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	; 0x32
   22f62:	3201      	adds	r2, #1
   22f64:	1ad2      	subs	r2, r2, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   22f66:	9b06      	ldr	r3, [sp, #24]
   22f68:	2b01      	cmp	r3, #1
   22f6a:	fa0f fb82 	sxth.w	fp, r2
   22f6e:	d11f      	bne.n	22fb0 <_lv_blend_fill+0x19c>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   22f70:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
   22f74:	4598      	cmp	r8, r3
   22f76:	dd02      	ble.n	22f7e <_lv_blend_fill+0x16a>
}
   22f78:	b00f      	add	sp, #60	; 0x3c
   22f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   22f7e:	f9bd 7030 	ldrsh.w	r7, [sp, #48]	; 0x30
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
   22f82:	fa0f f988 	sxth.w	r9, r8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   22f86:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
   22f8a:	429f      	cmp	r7, r3
   22f8c:	dd02      	ble.n	22f94 <_lv_blend_fill+0x180>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   22f8e:	f108 0801 	add.w	r8, r8, #1
   22f92:	e7ed      	b.n	22f70 <_lv_blend_fill+0x15c>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
   22f94:	9602      	str	r6, [sp, #8]
   22f96:	f88d 4004 	strb.w	r4, [sp, #4]
   22f9a:	f8cd 9000 	str.w	r9, [sp]
   22f9e:	6945      	ldr	r5, [r0, #20]
   22fa0:	9905      	ldr	r1, [sp, #20]
   22fa2:	9006      	str	r0, [sp, #24]
   22fa4:	b23b      	sxth	r3, r7
   22fa6:	465a      	mov	r2, fp
   22fa8:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   22faa:	3701      	adds	r7, #1
   22fac:	9806      	ldr	r0, [sp, #24]
   22fae:	e7ea      	b.n	22f86 <_lv_blend_fill+0x172>
   22fb0:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
   22fb4:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   22fb8:	f109 0901 	add.w	r9, r9, #1
   22fbc:	eba9 0903 	sub.w	r9, r9, r3
   22fc0:	1aed      	subs	r5, r5, r3
   22fc2:	fa0f f989 	sxth.w	r9, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   22fc6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
   22fca:	4598      	cmp	r8, r3
   22fcc:	dcd4      	bgt.n	22f78 <_lv_blend_fill+0x164>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   22fce:	fa0f f388 	sxth.w	r3, r8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   22fd2:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   22fd6:	9306      	str	r3, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   22fd8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
   22fdc:	459a      	cmp	sl, r3
   22fde:	dd03      	ble.n	22fe8 <_lv_blend_fill+0x1d4>
            mask_tmp += draw_area_w;
   22fe0:	444d      	add	r5, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   22fe2:	f108 0801 	add.w	r8, r8, #1
   22fe6:	e7ee      	b.n	22fc6 <_lv_blend_fill+0x1b2>
                if(mask_tmp[x]) {
   22fe8:	f815 300a 	ldrb.w	r3, [r5, sl]
   22fec:	b17b      	cbz	r3, 2300e <_lv_blend_fill+0x1fa>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   22fee:	fb16 f303 	smulbb	r3, r6, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   22ff2:	0a1b      	lsrs	r3, r3, #8
   22ff4:	9302      	str	r3, [sp, #8]
   22ff6:	9b06      	ldr	r3, [sp, #24]
   22ff8:	9300      	str	r3, [sp, #0]
   22ffa:	f88d 4004 	strb.w	r4, [sp, #4]
   22ffe:	6947      	ldr	r7, [r0, #20]
   23000:	9905      	ldr	r1, [sp, #20]
   23002:	9007      	str	r0, [sp, #28]
   23004:	fa0f f38a 	sxth.w	r3, sl
   23008:	465a      	mov	r2, fp
   2300a:	47b8      	blx	r7
   2300c:	9807      	ldr	r0, [sp, #28]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   2300e:	f10a 0a01 	add.w	sl, sl, #1
   23012:	e7e1      	b.n	22fd8 <_lv_blend_fill+0x1c4>
                lv_color_fill(disp_buf_first, color, draw_area_w);
   23014:	4650      	mov	r0, sl
   23016:	465a      	mov	r2, fp
   23018:	4621      	mov	r1, r4
   2301a:	f002 fb3d 	bl	25698 <lv_color_fill>
                disp_buf_first += disp_w;
   2301e:	44c2      	add	sl, r8
            for(y = 0; y < draw_area_h; y++) {
   23020:	3701      	adds	r7, #1
   23022:	45b9      	cmp	r9, r7
   23024:	dcf6      	bgt.n	23014 <_lv_blend_fill+0x200>
   23026:	e7a7      	b.n	22f78 <_lv_blend_fill+0x164>
                    if(last_dest_color.full != disp_buf_first[x].full) {
   23028:	784d      	ldrb	r5, [r1, #1]
   2302a:	42bd      	cmp	r5, r7
   2302c:	d00a      	beq.n	23044 <_lv_blend_fill+0x230>
    LV_COLOR_SET_B(c1, premult_c1[2]);
   2302e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
   23032:	2e00      	cmp	r6, #0
    LV_COLOR_SET_B(c1, premult_c1[2]);
   23034:	f364 0300 	bfi	r3, r4, #0, #1
   23038:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
   2303c:	462f      	mov	r7, r5
   2303e:	bfb4      	ite	lt
   23040:	b2db      	uxtblt	r3, r3
   23042:	462b      	movge	r3, r5
#endif
                        {
                            last_res_color = lv_color_mix_premult(color_premult, disp_buf_first[x], opa_inv);
                        }
                    }
                    disp_buf_first[x] = last_res_color;
   23044:	f801 3f01 	strb.w	r3, [r1, #1]!
                for(x = 0; x < draw_area_w; x++) {
   23048:	1855      	adds	r5, r2, r1
   2304a:	45ab      	cmp	fp, r5
   2304c:	dcec      	bgt.n	23028 <_lv_blend_fill+0x214>
                }
                disp_buf_first += disp_w;
   2304e:	44c2      	add	sl, r8
            for(y = 0; y < draw_area_h; y++) {
   23050:	3001      	adds	r0, #1
   23052:	e75d      	b.n	22f10 <_lv_blend_fill+0xfc>
        last_res_color.full = disp_buf_first[0].full;

        int32_t x_end4 = draw_area_w - 4;

        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
   23054:	2efd      	cmp	r6, #253	; 0xfd
   23056:	f200 8098 	bhi.w	2318a <_lv_blend_fill+0x376>
        last_dest_color.full = disp_buf_first[0].full;
   2305a:	9905      	ldr	r1, [sp, #20]
   2305c:	f811 e003 	ldrb.w	lr, [r1, r3]
   23060:	b2e4      	uxtb	r4, r4
        last_res_color.full = disp_buf_first[0].full;
   23062:	46f1      	mov	r9, lr
                mask += draw_area_w;
            }
        }
        /*Handle opa and mask values too*/
        else {
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
   23064:	4638      	mov	r0, r7
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
   23066:	9b08      	ldr	r3, [sp, #32]
   23068:	429a      	cmp	r2, r3
   2306a:	dc85      	bgt.n	22f78 <_lv_blend_fill+0x164>
                const lv_opa_t * mask_tmp_x = mask;
                for(x = 0; x < draw_area_w; x++) {
   2306c:	2300      	movs	r3, #0
   2306e:	e0a8      	b.n	231c2 <_lv_blend_fill+0x3ae>
                    FILL_NORMAL_MASK_PX(x, color)
   23070:	f813 6b01 	ldrb.w	r6, [r3], #1
   23074:	b11e      	cbz	r6, 2307e <_lv_blend_fill+0x26a>
   23076:	2eff      	cmp	r6, #255	; 0xff
   23078:	d117      	bne.n	230aa <_lv_blend_fill+0x296>
   2307a:	f80a 4002 	strb.w	r4, [sl, r2]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   2307e:	3201      	adds	r2, #1
   23080:	4593      	cmp	fp, r2
   23082:	4619      	mov	r1, r3
   23084:	dd01      	ble.n	2308a <_lv_blend_fill+0x276>
   23086:	079e      	lsls	r6, r3, #30
   23088:	d1f2      	bne.n	23070 <_lv_blend_fill+0x25c>
   2308a:	eb0a 0302 	add.w	r3, sl, r2
                for(; x <= x_end4; x += 4) {
   2308e:	4290      	cmp	r0, r2
   23090:	da15      	bge.n	230be <_lv_blend_fill+0x2aa>
   23092:	3901      	subs	r1, #1
                for(; x < draw_area_w ; x++) {
   23094:	4593      	cmp	fp, r2
   23096:	dc65      	bgt.n	23164 <_lv_blend_fill+0x350>
                disp_buf_first += disp_w;
   23098:	44c2      	add	sl, r8
                mask += draw_area_w;
   2309a:	445d      	add	r5, fp
            for(y = 0; y < draw_area_h; y++) {
   2309c:	3701      	adds	r7, #1
   2309e:	45b9      	cmp	r9, r7
   230a0:	f77f af6a 	ble.w	22f78 <_lv_blend_fill+0x164>
   230a4:	462b      	mov	r3, r5
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   230a6:	2200      	movs	r2, #0
   230a8:	e7ea      	b.n	23080 <_lv_blend_fill+0x26c>
   230aa:	f81a c002 	ldrb.w	ip, [sl, r2]
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
   230ae:	f016 0f80 	tst.w	r6, #128	; 0x80
   230b2:	b2e1      	uxtb	r1, r4
   230b4:	bf08      	it	eq
   230b6:	4661      	moveq	r1, ip
                    FILL_NORMAL_MASK_PX(x, color)
   230b8:	f80a 1002 	strb.w	r1, [sl, r2]
   230bc:	e7df      	b.n	2307e <_lv_blend_fill+0x26a>
                    if(*mask32) {
   230be:	680e      	ldr	r6, [r1, #0]
   230c0:	b12e      	cbz	r6, 230ce <_lv_blend_fill+0x2ba>
                        if((*mask32) == 0xFFFFFFFF) {
   230c2:	3601      	adds	r6, #1
   230c4:	d107      	bne.n	230d6 <_lv_blend_fill+0x2c2>
                            disp_buf_first[x] = color;
   230c6:	701c      	strb	r4, [r3, #0]
                            disp_buf_first[x + 1] = color;
   230c8:	705c      	strb	r4, [r3, #1]
                            disp_buf_first[x + 2] = color;
   230ca:	709c      	strb	r4, [r3, #2]
                            FILL_NORMAL_MASK_PX(x + 3, color)
   230cc:	70dc      	strb	r4, [r3, #3]
                    mask32++;
   230ce:	3104      	adds	r1, #4
                for(; x <= x_end4; x += 4) {
   230d0:	3204      	adds	r2, #4
   230d2:	3304      	adds	r3, #4
   230d4:	e7db      	b.n	2308e <_lv_blend_fill+0x27a>
                            FILL_NORMAL_MASK_PX(x, color)
   230d6:	f891 c000 	ldrb.w	ip, [r1]
   230da:	f1bc 0f00 	cmp.w	ip, #0
   230de:	d003      	beq.n	230e8 <_lv_blend_fill+0x2d4>
   230e0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   230e4:	d123      	bne.n	2312e <_lv_blend_fill+0x31a>
   230e6:	701c      	strb	r4, [r3, #0]
                            FILL_NORMAL_MASK_PX(x + 1, color)
   230e8:	f891 c001 	ldrb.w	ip, [r1, #1]
   230ec:	f1bc 0f00 	cmp.w	ip, #0
   230f0:	d003      	beq.n	230fa <_lv_blend_fill+0x2e6>
   230f2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   230f6:	d123      	bne.n	23140 <_lv_blend_fill+0x32c>
   230f8:	705c      	strb	r4, [r3, #1]
                            FILL_NORMAL_MASK_PX(x + 2, color)
   230fa:	f891 c002 	ldrb.w	ip, [r1, #2]
   230fe:	f1bc 0f00 	cmp.w	ip, #0
   23102:	d003      	beq.n	2310c <_lv_blend_fill+0x2f8>
   23104:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   23108:	d123      	bne.n	23152 <_lv_blend_fill+0x33e>
   2310a:	709c      	strb	r4, [r3, #2]
                            FILL_NORMAL_MASK_PX(x + 3, color)
   2310c:	f891 c003 	ldrb.w	ip, [r1, #3]
   23110:	f1bc 0f00 	cmp.w	ip, #0
   23114:	d0db      	beq.n	230ce <_lv_blend_fill+0x2ba>
   23116:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   2311a:	d0d7      	beq.n	230cc <_lv_blend_fill+0x2b8>
   2311c:	f893 e003 	ldrb.w	lr, [r3, #3]
   23120:	f01c 0f80 	tst.w	ip, #128	; 0x80
   23124:	b2e6      	uxtb	r6, r4
   23126:	bf08      	it	eq
   23128:	4676      	moveq	r6, lr
   2312a:	70de      	strb	r6, [r3, #3]
   2312c:	e7cf      	b.n	230ce <_lv_blend_fill+0x2ba>
   2312e:	f893 e000 	ldrb.w	lr, [r3]
   23132:	f01c 0f80 	tst.w	ip, #128	; 0x80
   23136:	b2e6      	uxtb	r6, r4
   23138:	bf08      	it	eq
   2313a:	4676      	moveq	r6, lr
                            FILL_NORMAL_MASK_PX(x, color)
   2313c:	701e      	strb	r6, [r3, #0]
   2313e:	e7d3      	b.n	230e8 <_lv_blend_fill+0x2d4>
   23140:	f893 e001 	ldrb.w	lr, [r3, #1]
   23144:	f01c 0f80 	tst.w	ip, #128	; 0x80
   23148:	b2e6      	uxtb	r6, r4
   2314a:	bf08      	it	eq
   2314c:	4676      	moveq	r6, lr
                            FILL_NORMAL_MASK_PX(x + 1, color)
   2314e:	705e      	strb	r6, [r3, #1]
   23150:	e7d3      	b.n	230fa <_lv_blend_fill+0x2e6>
   23152:	f893 e002 	ldrb.w	lr, [r3, #2]
   23156:	f01c 0f80 	tst.w	ip, #128	; 0x80
   2315a:	b2e6      	uxtb	r6, r4
   2315c:	bf08      	it	eq
   2315e:	4676      	moveq	r6, lr
                            FILL_NORMAL_MASK_PX(x + 2, color)
   23160:	709e      	strb	r6, [r3, #2]
   23162:	e7d3      	b.n	2310c <_lv_blend_fill+0x2f8>
                    FILL_NORMAL_MASK_PX(x, color)
   23164:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   23168:	b11e      	cbz	r6, 23172 <_lv_blend_fill+0x35e>
   2316a:	2eff      	cmp	r6, #255	; 0xff
   2316c:	d103      	bne.n	23176 <_lv_blend_fill+0x362>
   2316e:	f80a 4002 	strb.w	r4, [sl, r2]
                for(; x < draw_area_w ; x++) {
   23172:	3201      	adds	r2, #1
   23174:	e78e      	b.n	23094 <_lv_blend_fill+0x280>
   23176:	f81a c002 	ldrb.w	ip, [sl, r2]
   2317a:	f016 0f80 	tst.w	r6, #128	; 0x80
   2317e:	b2e3      	uxtb	r3, r4
   23180:	bf08      	it	eq
   23182:	4663      	moveq	r3, ip
                    FILL_NORMAL_MASK_PX(x, color)
   23184:	f80a 3002 	strb.w	r3, [sl, r2]
   23188:	e7f3      	b.n	23172 <_lv_blend_fill+0x35e>
        int32_t x_end4 = draw_area_w - 4;
   2318a:	f1ab 0004 	sub.w	r0, fp, #4
   2318e:	e786      	b.n	2309e <_lv_blend_fill+0x28a>
                    if(*mask_tmp_x) {
   23190:	5ce9      	ldrb	r1, [r5, r3]
   23192:	b1a9      	cbz	r1, 231c0 <_lv_blend_fill+0x3ac>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
   23194:	42b9      	cmp	r1, r7
   23196:	f81a c003 	ldrb.w	ip, [sl, r3]
   2319a:	d00c      	beq.n	231b6 <_lv_blend_fill+0x3a2>
   2319c:	29ff      	cmp	r1, #255	; 0xff
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
   2319e:	bf1a      	itte	ne
   231a0:	fb11 f006 	smulbbne	r0, r1, r6
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
   231a4:	0a00      	lsrne	r0, r0, #8
   231a6:	4630      	moveq	r0, r6
   231a8:	f010 0f80 	tst.w	r0, #128	; 0x80
   231ac:	bf14      	ite	ne
   231ae:	46a1      	movne	r9, r4
   231b0:	46e1      	moveq	r9, ip
   231b2:	460f      	mov	r7, r1
   231b4:	e001      	b.n	231ba <_lv_blend_fill+0x3a6>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
   231b6:	45e6      	cmp	lr, ip
   231b8:	d1f6      	bne.n	231a8 <_lv_blend_fill+0x394>
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
                            }
                            last_mask = *mask_tmp_x;
                            last_dest_color.full = disp_buf_first[x].full;
                        }
                        disp_buf_first[x] = last_res_color;
   231ba:	f80a 9003 	strb.w	r9, [sl, r3]
   231be:	46e6      	mov	lr, ip
                for(x = 0; x < draw_area_w; x++) {
   231c0:	3301      	adds	r3, #1
   231c2:	459b      	cmp	fp, r3
   231c4:	dce4      	bgt.n	23190 <_lv_blend_fill+0x37c>
                    }
                    mask_tmp_x++;
                }
                disp_buf_first += disp_w;
   231c6:	44c2      	add	sl, r8
                mask += draw_area_w;
   231c8:	445d      	add	r5, fp
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
   231ca:	3201      	adds	r2, #1
   231cc:	e74b      	b.n	23066 <_lv_blend_fill+0x252>

000231ce <_lv_blend_map>:
{
   231ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231d2:	b08d      	sub	sp, #52	; 0x34
   231d4:	4689      	mov	r9, r1
   231d6:	9304      	str	r3, [sp, #16]
   231d8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   231dc:	9308      	str	r3, [sp, #32]
   231de:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   231e2:	f89d a060 	ldrb.w	sl, [sp, #96]	; 0x60
   231e6:	9209      	str	r2, [sp, #36]	; 0x24
    if(opa < LV_OPA_MIN) return;
   231e8:	2b01      	cmp	r3, #1
{
   231ea:	9305      	str	r3, [sp, #20]
    if(opa < LV_OPA_MIN) return;
   231ec:	f240 80b9 	bls.w	23362 <_lv_blend_map+0x194>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
   231f0:	9b08      	ldr	r3, [sp, #32]
   231f2:	2b00      	cmp	r3, #0
   231f4:	f000 80b5 	beq.w	23362 <_lv_blend_map+0x194>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
   231f8:	460a      	mov	r2, r1
   231fa:	4601      	mov	r1, r0
   231fc:	a80a      	add	r0, sp, #40	; 0x28
   231fe:	f002 f81a 	bl	25236 <_lv_area_intersect>
    if(!is_common) return;
   23202:	2800      	cmp	r0, #0
   23204:	f000 80ad 	beq.w	23362 <_lv_blend_map+0x194>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   23208:	f7f3 fcf6 	bl	16bf8 <_lv_refr_get_disp_refreshing>
   2320c:	4604      	mov	r4, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   2320e:	f001 ffa7 	bl	25160 <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
   23212:	6883      	ldr	r3, [r0, #8]
   23214:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   23216:	6a63      	ldr	r3, [r4, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   23218:	4683      	mov	fp, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   2321a:	b10b      	cbz	r3, 23220 <_lv_blend_map+0x52>
   2321c:	4620      	mov	r0, r4
   2321e:	4798      	blx	r3
    draw_area.y1 -= disp_area->y1;
   23220:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
   23224:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
    draw_area.y2 -= disp_area->y1;
   23228:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
    draw_area.x1 -= disp_area->x1;
   2322c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   23230:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    draw_area.x2 -= disp_area->x1;
   23234:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
    draw_area.y1 -= disp_area->y1;
   23238:	eba7 0c03 	sub.w	ip, r7, r3
    draw_area.y2 -= disp_area->y1;
   2323c:	eba8 0303 	sub.w	r3, r8, r3
    draw_area.x1 -= disp_area->x1;
   23240:	1a50      	subs	r0, r2, r1
    draw_area.y2 -= disp_area->y1;
   23242:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    if(mask)
   23246:	9b04      	ldr	r3, [sp, #16]
    draw_area.x1 -= disp_area->x1;
   23248:	fa0f fe80 	sxth.w	lr, r0
    draw_area.y1 -= disp_area->y1;
   2324c:	fa0f fc8c 	sxth.w	ip, ip
    draw_area.x2 -= disp_area->x1;
   23250:	1a69      	subs	r1, r5, r1
    draw_area.x1 -= disp_area->x1;
   23252:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
    draw_area.y1 -= disp_area->y1;
   23256:	f8ad c02a 	strh.w	ip, [sp, #42]	; 0x2a
    draw_area.x2 -= disp_area->x1;
   2325a:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    if(mask)
   2325e:	2b00      	cmp	r3, #0
   23260:	d13f      	bne.n	232e2 <_lv_blend_map+0x114>
    if(disp->driver.set_px_cb) {
   23262:	6963      	ldr	r3, [r4, #20]
   23264:	2b00      	cmp	r3, #0
   23266:	d150      	bne.n	2330a <_lv_blend_map+0x13c>
    else if(mode == LV_BLEND_MODE_NORMAL) {
   23268:	f1ba 0f00 	cmp.w	sl, #0
   2326c:	d179      	bne.n	23362 <_lv_blend_map+0x194>
   2326e:	f8bb 6014 	ldrh.w	r6, [fp, #20]
   23272:	f9bb 0010 	ldrsh.w	r0, [fp, #16]
   23276:	f9b9 1000 	ldrsh.w	r1, [r9]

    /*Create a temp. disp_buf which always point to first pixel to draw*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;

    /*Create a temp. map_buf which always point to first pixel to draw from the map*/
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   2327a:	f9bb 4012 	ldrsh.w	r4, [fp, #18]
   2327e:	3601      	adds	r6, #1
   23280:	1a36      	subs	r6, r6, r0
   23282:	f1c2 0201 	rsb	r2, r2, #1
   23286:	b233      	sxth	r3, r6
   23288:	4415      	add	r5, r2
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   2328a:	9a07      	ldr	r2, [sp, #28]
   2328c:	9306      	str	r3, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2328e:	f1c7 0701 	rsb	r7, r7, #1
   23292:	fb03 e30c 	mla	r3, r3, ip, lr
   23296:	44b8      	add	r8, r7
   23298:	441a      	add	r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2329a:	f8b9 7004 	ldrh.w	r7, [r9, #4]
   2329e:	4613      	mov	r3, r2
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   232a0:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
   232a4:	3701      	adds	r7, #1
   232a6:	1aa4      	subs	r4, r4, r2
   232a8:	1a7f      	subs	r7, r7, r1
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
   232aa:	1a40      	subs	r0, r0, r1
   232ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   232ae:	b23f      	sxth	r7, r7
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   232b0:	4464      	add	r4, ip
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
   232b2:	4470      	add	r0, lr
   232b4:	fb07 0404 	mla	r4, r7, r4, r0
   232b8:	4422      	add	r2, r4
   232ba:	4614      	mov	r4, r2

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   232bc:	9a08      	ldr	r2, [sp, #32]
   232be:	2a01      	cmp	r2, #1
   232c0:	b22d      	sxth	r5, r5
            }
            return;
        }
#endif

        if(opa > LV_OPA_MAX) {
   232c2:	9a05      	ldr	r2, [sp, #20]
    int32_t draw_area_h = lv_area_get_height(draw_area);
   232c4:	fa0f f888 	sxth.w	r8, r8
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   232c8:	f040 80c2 	bne.w	23450 <_lv_blend_map+0x282>
        if(opa > LV_OPA_MAX) {
   232cc:	2afd      	cmp	r2, #253	; 0xfd
   232ce:	f200 80aa 	bhi.w	23426 <_lv_blend_map+0x258>
   232d2:	f99d c014 	ldrsb.w	ip, [sp, #20]
            }
#endif

            /*Software rendering*/

            for(y = 0; y < draw_area_h; y++) {
   232d6:	46d6      	mov	lr, sl
   232d8:	45f0      	cmp	r8, lr
   232da:	dd42      	ble.n	23362 <_lv_blend_map+0x194>
   232dc:	1e59      	subs	r1, r3, #1
                for(x = 0; x < draw_area_w; x++) {
   232de:	2200      	movs	r2, #0
   232e0:	e0ae      	b.n	23440 <_lv_blend_map+0x272>
   232e2:	9904      	ldr	r1, [sp, #16]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   232e4:	9804      	ldr	r0, [sp, #16]
   232e6:	1c6b      	adds	r3, r5, #1
   232e8:	1a9b      	subs	r3, r3, r2
        int32_t mask_w = lv_area_get_width(&draw_area);
   232ea:	b21b      	sxth	r3, r3
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   232ec:	3901      	subs	r1, #1
   232ee:	f1c0 0601 	rsb	r6, r0, #1
   232f2:	1870      	adds	r0, r6, r1
   232f4:	4283      	cmp	r3, r0
   232f6:	ddb4      	ble.n	23262 <_lv_blend_map+0x94>
   232f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   232fc:	2880      	cmp	r0, #128	; 0x80
   232fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23302:	bf98      	it	ls
   23304:	2000      	movls	r0, #0
   23306:	7008      	strb	r0, [r1, #0]
   23308:	e7f3      	b.n	232f2 <_lv_blend_map+0x124>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   2330a:	f7f3 fc75 	bl	16bf8 <_lv_refr_get_disp_refreshing>
   2330e:	f8b9 6004 	ldrh.w	r6, [r9, #4]
   23312:	f9b9 3000 	ldrsh.w	r3, [r9]
   23316:	f8bb 2014 	ldrh.w	r2, [fp, #20]
   2331a:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   2331e:	f9bd 502a 	ldrsh.w	r5, [sp, #42]	; 0x2a
   23322:	f9bb c012 	ldrsh.w	ip, [fp, #18]
   23326:	3601      	adds	r6, #1
   23328:	1af6      	subs	r6, r6, r3
   2332a:	b234      	sxth	r4, r6
   2332c:	9406      	str	r4, [sp, #24]
   2332e:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
   23332:	3201      	adds	r2, #1
   23334:	1a52      	subs	r2, r2, r1
   23336:	1b2c      	subs	r4, r5, r4
    map_buf_tmp -= draw_area->x1;
   23338:	1ac9      	subs	r1, r1, r3
   2333a:	9b06      	ldr	r3, [sp, #24]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   2333c:	4464      	add	r4, ip
    map_buf_tmp -= draw_area->x1;
   2333e:	fb03 1404 	mla	r4, r3, r4, r1
   23342:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23344:	4423      	add	r3, r4
   23346:	461c      	mov	r4, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   23348:	9b08      	ldr	r3, [sp, #32]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   2334a:	4607      	mov	r7, r0
   2334c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   23350:	2b01      	cmp	r3, #1
   23352:	b212      	sxth	r2, r2
   23354:	f1c0 0a00 	rsb	sl, r0, #0
   23358:	d125      	bne.n	233a6 <_lv_blend_map+0x1d8>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   2335a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   2335e:	429d      	cmp	r5, r3
   23360:	dd02      	ble.n	23368 <_lv_blend_map+0x19a>
}
   23362:	b00d      	add	sp, #52	; 0x34
   23364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   23368:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
   2336c:	fa0f f985 	sxth.w	r9, r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   23370:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   23374:	4598      	cmp	r8, r3
   23376:	dd03      	ble.n	23380 <_lv_blend_map+0x1b2>
            map_buf_tmp += map_w;
   23378:	9b06      	ldr	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   2337a:	3501      	adds	r5, #1
            map_buf_tmp += map_w;
   2337c:	441c      	add	r4, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   2337e:	e7ec      	b.n	2335a <_lv_blend_map+0x18c>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
   23380:	9b05      	ldr	r3, [sp, #20]
   23382:	9302      	str	r3, [sp, #8]
   23384:	f814 3008 	ldrb.w	r3, [r4, r8]
   23388:	f88d 3004 	strb.w	r3, [sp, #4]
   2338c:	f8cd 9000 	str.w	r9, [sp]
   23390:	fa0f f388 	sxth.w	r3, r8
   23394:	9907      	ldr	r1, [sp, #28]
   23396:	697e      	ldr	r6, [r7, #20]
   23398:	9204      	str	r2, [sp, #16]
   2339a:	4638      	mov	r0, r7
   2339c:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   2339e:	f108 0801 	add.w	r8, r8, #1
   233a2:	9a04      	ldr	r2, [sp, #16]
   233a4:	e7e4      	b.n	23370 <_lv_blend_map+0x1a2>
   233a6:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
   233aa:	9b04      	ldr	r3, [sp, #16]
   233ac:	f108 0801 	add.w	r8, r8, #1
   233b0:	4453      	add	r3, sl
   233b2:	eba8 0800 	sub.w	r8, r8, r0
   233b6:	469a      	mov	sl, r3
            mask_tmp += draw_area_w;
   233b8:	fa0f f888 	sxth.w	r8, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   233bc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   233c0:	429d      	cmp	r5, r3
   233c2:	dcce      	bgt.n	23362 <_lv_blend_map+0x194>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   233c4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   233c8:	fa0f fb85 	sxth.w	fp, r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   233cc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   233d0:	4599      	cmp	r9, r3
   233d2:	dd04      	ble.n	233de <_lv_blend_map+0x210>
            map_buf_tmp += map_w;
   233d4:	9b06      	ldr	r3, [sp, #24]
            mask_tmp += draw_area_w;
   233d6:	44c2      	add	sl, r8
            map_buf_tmp += map_w;
   233d8:	441c      	add	r4, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   233da:	3501      	adds	r5, #1
   233dc:	e7ee      	b.n	233bc <_lv_blend_map+0x1ee>
                if(mask_tmp[x]) {
   233de:	f81a 3009 	ldrb.w	r3, [sl, r9]
   233e2:	b193      	cbz	r3, 2340a <_lv_blend_map+0x23c>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   233e4:	9905      	ldr	r1, [sp, #20]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   233e6:	9204      	str	r2, [sp, #16]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   233e8:	fb11 f303 	smulbb	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   233ec:	0a1b      	lsrs	r3, r3, #8
   233ee:	9302      	str	r3, [sp, #8]
   233f0:	f814 3009 	ldrb.w	r3, [r4, r9]
   233f4:	f88d 3004 	strb.w	r3, [sp, #4]
   233f8:	f8cd b000 	str.w	fp, [sp]
   233fc:	9907      	ldr	r1, [sp, #28]
   233fe:	697e      	ldr	r6, [r7, #20]
   23400:	fa0f f389 	sxth.w	r3, r9
   23404:	4638      	mov	r0, r7
   23406:	47b0      	blx	r6
   23408:	9a04      	ldr	r2, [sp, #16]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   2340a:	f109 0901 	add.w	r9, r9, #1
   2340e:	e7dd      	b.n	233cc <_lv_blend_map+0x1fe>
   23410:	462a      	mov	r2, r5
   23412:	4621      	mov	r1, r4
   23414:	4618      	mov	r0, r3
   23416:	f003 fb18 	bl	26a4a <memcpy>
                disp_buf_first += disp_w;
   2341a:	9a06      	ldr	r2, [sp, #24]
   2341c:	4603      	mov	r3, r0
   2341e:	4413      	add	r3, r2
                map_buf_first += map_w;
   23420:	443c      	add	r4, r7
            for(y = 0; y < draw_area_h; y++) {
   23422:	f10a 0a01 	add.w	sl, sl, #1
   23426:	45d0      	cmp	r8, sl
   23428:	dcf2      	bgt.n	23410 <_lv_blend_map+0x242>
   2342a:	e79a      	b.n	23362 <_lv_blend_map+0x194>
                                                &disp_buf_first[x].ch.alpha);
                    }
                    else
#endif
                    {
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
   2342c:	5ca0      	ldrb	r0, [r4, r2]
   2342e:	f891 9001 	ldrb.w	r9, [r1, #1]
   23432:	ea10 002c 	ands.w	r0, r0, ip, asr #32
   23436:	bf38      	it	cc
   23438:	4648      	movcc	r0, r9
   2343a:	f801 0f01 	strb.w	r0, [r1, #1]!
                for(x = 0; x < draw_area_w; x++) {
   2343e:	3201      	adds	r2, #1
   23440:	4295      	cmp	r5, r2
   23442:	dcf3      	bgt.n	2342c <_lv_blend_map+0x25e>
                    }
                }
                disp_buf_first += disp_w;
   23444:	9a06      	ldr	r2, [sp, #24]
                map_buf_first += map_w;
   23446:	443c      	add	r4, r7
                disp_buf_first += disp_w;
   23448:	4413      	add	r3, r2
            for(y = 0; y < draw_area_h; y++) {
   2344a:	f10e 0e01 	add.w	lr, lr, #1
   2344e:	e743      	b.n	232d8 <_lv_blend_map+0x10a>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
   23450:	2afd      	cmp	r2, #253	; 0xfd
   23452:	f240 80cc 	bls.w	235ee <_lv_blend_map+0x420>
            /*Go to the first pixel of the row */

            int32_t x_end4 = draw_area_w - 4;
   23456:	1f2a      	subs	r2, r5, #4
   23458:	9205      	str	r2, [sp, #20]

            for(y = 0; y < draw_area_h; y++) {
   2345a:	46d6      	mov	lr, sl
   2345c:	45f0      	cmp	r8, lr
   2345e:	dd80      	ble.n	23362 <_lv_blend_map+0x194>
   23460:	9a04      	ldr	r2, [sp, #16]
#if 0
                for(x = 0; x < draw_area_w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   23462:	2100      	movs	r1, #0
   23464:	e00a      	b.n	2347c <_lv_blend_map+0x2ae>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
   23466:	f812 cb01 	ldrb.w	ip, [r2], #1
   2346a:	f1bc 0f00 	cmp.w	ip, #0
   2346e:	d004      	beq.n	2347a <_lv_blend_map+0x2ac>
   23470:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   23474:	5c60      	ldrb	r0, [r4, r1]
   23476:	d118      	bne.n	234aa <_lv_blend_map+0x2dc>
   23478:	5458      	strb	r0, [r3, r1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   2347a:	3101      	adds	r1, #1
   2347c:	428d      	cmp	r5, r1
   2347e:	4694      	mov	ip, r2
   23480:	dd01      	ble.n	23486 <_lv_blend_map+0x2b8>
   23482:	0790      	lsls	r0, r2, #30
   23484:	d1ef      	bne.n	23466 <_lv_blend_map+0x298>
   23486:	1858      	adds	r0, r3, r1
   23488:	1862      	adds	r2, r4, r1
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
                for(; x < x_end4; x += 4) {
   2348a:	9e05      	ldr	r6, [sp, #20]
   2348c:	428e      	cmp	r6, r1
   2348e:	dc13      	bgt.n	234b8 <_lv_blend_map+0x2ea>
   23490:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
                    }
                    mask32++;
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
                for(; x < draw_area_w ; x++) {
   23494:	428d      	cmp	r5, r1
   23496:	dc77      	bgt.n	23588 <_lv_blend_map+0x3ba>
#else
                    MAP_NORMAL_MASK_PX(x)
#endif
                }
#endif
                disp_buf_first += disp_w;
   23498:	9a06      	ldr	r2, [sp, #24]
   2349a:	4413      	add	r3, r2
                mask += draw_area_w;
   2349c:	9a04      	ldr	r2, [sp, #16]
   2349e:	442a      	add	r2, r5
   234a0:	9204      	str	r2, [sp, #16]
                map_buf_first += map_w;
   234a2:	443c      	add	r4, r7
            for(y = 0; y < draw_area_h; y++) {
   234a4:	f10e 0e01 	add.w	lr, lr, #1
   234a8:	e7d8      	b.n	2345c <_lv_blend_map+0x28e>
                    MAP_NORMAL_MASK_PX(x)
   234aa:	f813 9001 	ldrb.w	r9, [r3, r1]
   234ae:	f01c 0f80 	tst.w	ip, #128	; 0x80
   234b2:	bf08      	it	eq
   234b4:	4648      	moveq	r0, r9
   234b6:	e7df      	b.n	23478 <_lv_blend_map+0x2aa>
                    if(*mask32) {
   234b8:	f8dc 9000 	ldr.w	r9, [ip]
   234bc:	f1b9 0f00 	cmp.w	r9, #0
   234c0:	d012      	beq.n	234e8 <_lv_blend_map+0x31a>
                        if((*mask32) == 0xFFFFFFFF) {
   234c2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   234c6:	d115      	bne.n	234f4 <_lv_blend_map+0x326>
                            disp_buf_first[x] = map_buf_first[x];
   234c8:	f892 9000 	ldrb.w	r9, [r2]
   234cc:	f880 9000 	strb.w	r9, [r0]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
   234d0:	f892 9001 	ldrb.w	r9, [r2, #1]
   234d4:	f880 9001 	strb.w	r9, [r0, #1]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
   234d8:	f892 9002 	ldrb.w	r9, [r2, #2]
   234dc:	f880 9002 	strb.w	r9, [r0, #2]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
   234e0:	f892 9003 	ldrb.w	r9, [r2, #3]
                            MAP_NORMAL_MASK_PX(x + 3)
   234e4:	f880 9003 	strb.w	r9, [r0, #3]
                    mask32++;
   234e8:	f10c 0c04 	add.w	ip, ip, #4
                for(; x < x_end4; x += 4) {
   234ec:	3104      	adds	r1, #4
   234ee:	3004      	adds	r0, #4
   234f0:	3204      	adds	r2, #4
   234f2:	e7ca      	b.n	2348a <_lv_blend_map+0x2bc>
                            MAP_NORMAL_MASK_PX(x)
   234f4:	f89c a000 	ldrb.w	sl, [ip]
   234f8:	f1ba 0f00 	cmp.w	sl, #0
   234fc:	d006      	beq.n	2350c <_lv_blend_map+0x33e>
   234fe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   23502:	f892 9000 	ldrb.w	r9, [r2]
   23506:	d12a      	bne.n	2355e <_lv_blend_map+0x390>
   23508:	f880 9000 	strb.w	r9, [r0]
                            MAP_NORMAL_MASK_PX(x + 1)
   2350c:	f89c a001 	ldrb.w	sl, [ip, #1]
   23510:	f1ba 0f00 	cmp.w	sl, #0
   23514:	d006      	beq.n	23524 <_lv_blend_map+0x356>
   23516:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   2351a:	f892 9001 	ldrb.w	r9, [r2, #1]
   2351e:	d125      	bne.n	2356c <_lv_blend_map+0x39e>
   23520:	f880 9001 	strb.w	r9, [r0, #1]
                            MAP_NORMAL_MASK_PX(x + 2)
   23524:	f89c a002 	ldrb.w	sl, [ip, #2]
   23528:	f1ba 0f00 	cmp.w	sl, #0
   2352c:	d006      	beq.n	2353c <_lv_blend_map+0x36e>
   2352e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   23532:	f892 9002 	ldrb.w	r9, [r2, #2]
   23536:	d120      	bne.n	2357a <_lv_blend_map+0x3ac>
   23538:	f880 9002 	strb.w	r9, [r0, #2]
                            MAP_NORMAL_MASK_PX(x + 3)
   2353c:	f89c a003 	ldrb.w	sl, [ip, #3]
   23540:	f1ba 0f00 	cmp.w	sl, #0
   23544:	d0d0      	beq.n	234e8 <_lv_blend_map+0x31a>
   23546:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   2354a:	f892 9003 	ldrb.w	r9, [r2, #3]
   2354e:	d0c9      	beq.n	234e4 <_lv_blend_map+0x316>
   23550:	f890 b003 	ldrb.w	fp, [r0, #3]
   23554:	f01a 0f80 	tst.w	sl, #128	; 0x80
   23558:	bf08      	it	eq
   2355a:	46d9      	moveq	r9, fp
   2355c:	e7c2      	b.n	234e4 <_lv_blend_map+0x316>
                            MAP_NORMAL_MASK_PX(x)
   2355e:	f890 b000 	ldrb.w	fp, [r0]
   23562:	f01a 0f80 	tst.w	sl, #128	; 0x80
   23566:	bf08      	it	eq
   23568:	46d9      	moveq	r9, fp
   2356a:	e7cd      	b.n	23508 <_lv_blend_map+0x33a>
                            MAP_NORMAL_MASK_PX(x + 1)
   2356c:	f890 b001 	ldrb.w	fp, [r0, #1]
   23570:	f01a 0f80 	tst.w	sl, #128	; 0x80
   23574:	bf08      	it	eq
   23576:	46d9      	moveq	r9, fp
   23578:	e7d2      	b.n	23520 <_lv_blend_map+0x352>
                            MAP_NORMAL_MASK_PX(x + 2)
   2357a:	f890 b002 	ldrb.w	fp, [r0, #2]
   2357e:	f01a 0f80 	tst.w	sl, #128	; 0x80
   23582:	bf08      	it	eq
   23584:	46d9      	moveq	r9, fp
   23586:	e7d7      	b.n	23538 <_lv_blend_map+0x36a>
                    MAP_NORMAL_MASK_PX(x)
   23588:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
   2358c:	b118      	cbz	r0, 23596 <_lv_blend_map+0x3c8>
   2358e:	28ff      	cmp	r0, #255	; 0xff
   23590:	5c62      	ldrb	r2, [r4, r1]
   23592:	d102      	bne.n	2359a <_lv_blend_map+0x3cc>
   23594:	545a      	strb	r2, [r3, r1]
                for(; x < draw_area_w ; x++) {
   23596:	3101      	adds	r1, #1
   23598:	e77c      	b.n	23494 <_lv_blend_map+0x2c6>
                    MAP_NORMAL_MASK_PX(x)
   2359a:	f813 9001 	ldrb.w	r9, [r3, r1]
   2359e:	f010 0f80 	tst.w	r0, #128	; 0x80
   235a2:	bf08      	it	eq
   235a4:	464a      	moveq	r2, r9
   235a6:	e7f5      	b.n	23594 <_lv_blend_map+0x3c6>
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < draw_area_h; y++) {
                for(x = 0; x < draw_area_w; x++) {
                    if(mask[x]) {
   235a8:	9a04      	ldr	r2, [sp, #16]
   235aa:	5c52      	ldrb	r2, [r2, r1]
   235ac:	b17a      	cbz	r2, 235ce <_lv_blend_map+0x400>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
   235ae:	2afc      	cmp	r2, #252	; 0xfc
   235b0:	bf94      	ite	ls
   235b2:	9805      	ldrls	r0, [sp, #20]
   235b4:	9a05      	ldrhi	r2, [sp, #20]
   235b6:	f813 c001 	ldrb.w	ip, [r3, r1]
   235ba:	bf9c      	itt	ls
   235bc:	fb10 f202 	smulbbls	r2, r0, r2
   235c0:	0a12      	lsrls	r2, r2, #8
   235c2:	f012 0f80 	tst.w	r2, #128	; 0x80
   235c6:	5c60      	ldrb	r0, [r4, r1]
   235c8:	bf08      	it	eq
   235ca:	4660      	moveq	r0, ip
                                                    &disp_buf_first[x].ch.alpha);
                        }
                        else
#endif
                        {
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
   235cc:	5458      	strb	r0, [r3, r1]
                for(x = 0; x < draw_area_w; x++) {
   235ce:	3101      	adds	r1, #1
   235d0:	428d      	cmp	r5, r1
   235d2:	dce9      	bgt.n	235a8 <_lv_blend_map+0x3da>
                        }
                    }
                }
                disp_buf_first += disp_w;
   235d4:	9a06      	ldr	r2, [sp, #24]
   235d6:	4413      	add	r3, r2
                mask += draw_area_w;
   235d8:	9a04      	ldr	r2, [sp, #16]
   235da:	442a      	add	r2, r5
   235dc:	9204      	str	r2, [sp, #16]
                map_buf_first += map_w;
   235de:	443c      	add	r4, r7
            for(y = 0; y < draw_area_h; y++) {
   235e0:	f10e 0e01 	add.w	lr, lr, #1
   235e4:	45f0      	cmp	r8, lr
   235e6:	f77f aebc 	ble.w	23362 <_lv_blend_map+0x194>
                for(x = 0; x < draw_area_w; x++) {
   235ea:	2100      	movs	r1, #0
   235ec:	e7f0      	b.n	235d0 <_lv_blend_map+0x402>
            for(y = 0; y < draw_area_h; y++) {
   235ee:	46d6      	mov	lr, sl
   235f0:	e7f8      	b.n	235e4 <_lv_blend_map+0x416>

000235f2 <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
   235f2:	b570      	push	{r4, r5, r6, lr}
   235f4:	b09e      	sub	sp, #120	; 0x78
   235f6:	4604      	mov	r4, r0
   235f8:	460d      	mov	r5, r1
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
   235fa:	a80b      	add	r0, sp, #44	; 0x2c
{
   235fc:	4616      	mov	r6, r2
    lv_draw_rect_dsc_init(&rect_dsc);
   235fe:	f7f4 ff63 	bl	184c8 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
   23602:	2301      	movs	r3, #1
    lv_draw_rect(coords, clip_area, &rect_dsc);
   23604:	aa0b      	add	r2, sp, #44	; 0x2c
   23606:	4629      	mov	r1, r5
   23608:	4620      	mov	r0, r4
    rect_dsc.bg_color = LV_COLOR_WHITE;
   2360a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
   2360e:	f000 fedd 	bl	243cc <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
   23612:	a803      	add	r0, sp, #12
   23614:	f7f3 fde8 	bl	171e8 <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
   23618:	2300      	movs	r3, #0
   2361a:	9300      	str	r3, [sp, #0]
   2361c:	aa03      	add	r2, sp, #12
   2361e:	4633      	mov	r3, r6
   23620:	4629      	mov	r1, r5
   23622:	4620      	mov	r0, r4
   23624:	f7f3 fdf6 	bl	17214 <lv_draw_label>
}
   23628:	b01e      	add	sp, #120	; 0x78
   2362a:	bd70      	pop	{r4, r5, r6, pc}

0002362c <_lv_memset_00>:
 * Wrapper for the standard memset with fixed 0x00 value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
   2362c:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   2362e:	2100      	movs	r1, #0
   23630:	f003 ba2c 	b.w	26a8c <memset>

00023634 <_lv_memset_ff>:
 * Wrapper for the standard memset with fixed 0xFF value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_ff(void * dst, size_t len)
{
   23634:	460a      	mov	r2, r1
   23636:	21ff      	movs	r1, #255	; 0xff
   23638:	f003 ba28 	b.w	26a8c <memset>

0002363c <lv_area_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2363c:	4603      	mov	r3, r0
   2363e:	6808      	ldr	r0, [r1, #0]
   23640:	6849      	ldr	r1, [r1, #4]
   23642:	c303      	stmia	r3!, {r0, r1}
}
   23644:	4770      	bx	lr

00023646 <lv_draw_map>:
{
   23646:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2364a:	b099      	sub	sp, #100	; 0x64
   2364c:	4605      	mov	r5, r0
   2364e:	9304      	str	r3, [sp, #16]
   23650:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   23654:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_area_copy(&draw_area, clip_area);
   23656:	a814      	add	r0, sp, #80	; 0x50
{
   23658:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
   2365c:	9308      	str	r3, [sp, #32]
   2365e:	468a      	mov	sl, r1
   23660:	4616      	mov	r6, r2
    lv_area_copy(&draw_area, clip_area);
   23662:	f7ff ffeb 	bl	2363c <lv_area_copy>
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   23666:	f7f3 fac7 	bl	16bf8 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   2366a:	f001 fd79 	bl	25160 <lv_disp_get_buf>
    draw_area.x1 -= disp_area->x1;
   2366e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   23672:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    draw_area.y1 -= disp_area->y1;
   23676:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
    draw_area.x2 -= disp_area->x1;
   2367a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   2367e:	9006      	str	r0, [sp, #24]
    draw_area.x1 -= disp_area->x1;
   23680:	1bdb      	subs	r3, r3, r7
    draw_area.y1 -= disp_area->y1;
   23682:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
    draw_area.x1 -= disp_area->x1;
   23686:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    draw_area.y2 -= disp_area->y1;
   2368a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    draw_area.y1 -= disp_area->y1;
   2368e:	1a09      	subs	r1, r1, r0
    draw_area.x2 -= disp_area->x1;
   23690:	1bd2      	subs	r2, r2, r7
    draw_area.y2 -= disp_area->y1;
   23692:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
   23694:	f8ad 1052 	strh.w	r1, [sp, #82]	; 0x52
    draw_area.x2 -= disp_area->x1;
   23698:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
    draw_area.y2 -= disp_area->y1;
   2369c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   236a0:	f7f4 fe56 	bl	18350 <lv_draw_mask_get_cnt>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
   236a4:	9007      	str	r0, [sp, #28]
   236a6:	bb10      	cbnz	r0, 236ee <lv_draw_map+0xa8>
   236a8:	9b04      	ldr	r3, [sp, #16]
   236aa:	885b      	ldrh	r3, [r3, #2]
   236ac:	b9fb      	cbnz	r3, 236ee <lv_draw_map+0xa8>
   236ae:	9b04      	ldr	r3, [sp, #16]
   236b0:	891b      	ldrh	r3, [r3, #8]
   236b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   236b6:	d11a      	bne.n	236ee <lv_draw_map+0xa8>
   236b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   236ba:	b9c3      	cbnz	r3, 236ee <lv_draw_map+0xa8>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
   236bc:	9b08      	ldr	r3, [sp, #32]
   236be:	2b00      	cmp	r3, #0
   236c0:	f040 808b 	bne.w	237da <lv_draw_map+0x194>
   236c4:	9b04      	ldr	r3, [sp, #16]
   236c6:	7a9b      	ldrb	r3, [r3, #10]
   236c8:	2b00      	cmp	r3, #0
   236ca:	f040 8089 	bne.w	237e0 <lv_draw_map+0x19a>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
   236ce:	9a04      	ldr	r2, [sp, #16]
   236d0:	7b12      	ldrb	r2, [r2, #12]
   236d2:	9202      	str	r2, [sp, #8]
   236d4:	9a04      	ldr	r2, [sp, #16]
   236d6:	7812      	ldrb	r2, [r2, #0]
   236d8:	9201      	str	r2, [sp, #4]
   236da:	2201      	movs	r2, #1
   236dc:	9200      	str	r2, [sp, #0]
   236de:	4629      	mov	r1, r5
   236e0:	4632      	mov	r2, r6
   236e2:	4650      	mov	r0, sl
   236e4:	f7ff fd73 	bl	231ce <_lv_blend_map>
}
   236e8:	b019      	add	sp, #100	; 0x64
   236ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
   236ee:	9b08      	ldr	r3, [sp, #32]
   236f0:	2b00      	cmp	r3, #0
   236f2:	bf14      	ite	ne
   236f4:	f04f 0b02 	movne.w	fp, #2
   236f8:	f04f 0b01 	moveq.w	fp, #1
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   236fc:	9b06      	ldr	r3, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   236fe:	f8b5 8004 	ldrh.w	r8, [r5, #4]
   23702:	f9bd 7052 	ldrsh.w	r7, [sp, #82]	; 0x52
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   23706:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
   2370a:	f9b5 0000 	ldrsh.w	r0, [r5]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   2370e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
   23712:	f9b3 1012 	ldrsh.w	r1, [r3, #18]
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   23716:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
   2371a:	f108 0801 	add.w	r8, r8, #1
   2371e:	eba8 0800 	sub.w	r8, r8, r0
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   23722:	1aba      	subs	r2, r7, r2
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   23724:	ebac 0000 	sub.w	r0, ip, r0
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   23728:	440a      	add	r2, r1
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   2372a:	4418      	add	r0, r3
   2372c:	fa0f f888 	sxth.w	r8, r8
   23730:	fb08 0202 	mla	r2, r8, r2, r0
   23734:	fb02 620b 	mla	r2, r2, fp, r6
   23738:	9205      	str	r2, [sp, #20]
   2373a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   2373e:	3201      	adds	r2, #1
        blend_area.x1 = draw_area.x1 + disp_area->x1;
   23740:	4463      	add	r3, ip
   23742:	eba2 0c0c 	sub.w	ip, r2, ip
   23746:	fa0f f28c 	sxth.w	r2, ip
   2374a:	b21b      	sxth	r3, r3
   2374c:	920a      	str	r2, [sp, #40]	; 0x28
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
   2374e:	3a01      	subs	r2, #1
        blend_area.x1 = draw_area.x1 + disp_area->x1;
   23750:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
   23754:	4413      	add	r3, r2
   23756:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2375a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
   2375e:	3301      	adds	r3, #1
        blend_area.y1 = disp_area->y1 + draw_area.y1;
   23760:	4439      	add	r1, r7
   23762:	1bdf      	subs	r7, r3, r7
   23764:	b23b      	sxth	r3, r7
   23766:	930d      	str	r3, [sp, #52]	; 0x34
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
   23768:	9b07      	ldr	r3, [sp, #28]
        blend_area.y1 = disp_area->y1 + draw_area.y1;
   2376a:	b209      	sxth	r1, r1
   2376c:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
        blend_area.y2 = blend_area.y1;
   23770:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
   23774:	2b00      	cmp	r3, #0
   23776:	f040 8095 	bne.w	238a4 <lv_draw_map+0x25e>
   2377a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2377c:	2b00      	cmp	r3, #0
   2377e:	f040 8091 	bne.w	238a4 <lv_draw_map+0x25e>
   23782:	9b04      	ldr	r3, [sp, #16]
   23784:	7a9b      	ldrb	r3, [r3, #10]
   23786:	2b00      	cmp	r3, #0
   23788:	f040 808c 	bne.w	238a4 <lv_draw_map+0x25e>
   2378c:	9b08      	ldr	r3, [sp, #32]
   2378e:	2b00      	cmp	r3, #0
   23790:	f000 8088 	beq.w	238a4 <lv_draw_map+0x25e>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   23794:	a814      	add	r0, sp, #80	; 0x50
   23796:	f001 fd40 	bl	2521a <lv_area_get_size>
   2379a:	2880      	cmp	r0, #128	; 0x80
   2379c:	d823      	bhi.n	237e6 <lv_draw_map+0x1a0>
   2379e:	a814      	add	r0, sp, #80	; 0x50
   237a0:	f001 fd3b 	bl	2521a <lv_area_get_size>
   237a4:	4607      	mov	r7, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
   237a6:	4638      	mov	r0, r7
   237a8:	f7f5 fa80 	bl	18cac <_lv_mem_buf_get>
   237ac:	4605      	mov	r5, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   237ae:	4638      	mov	r0, r7
   237b0:	f7f5 fa7c 	bl	18cac <_lv_mem_buf_get>
   237b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            for(y = 0; y < draw_area_h; y++) {
   237b6:	f04f 0900 	mov.w	r9, #0
   237ba:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   237be:	4606      	mov	r6, r0
                map_buf_tmp += map_w * px_size_byte;
   237c0:	fb1b f808 	smulbb	r8, fp, r8
        uint32_t px_i = 0;
   237c4:	464b      	mov	r3, r9
   237c6:	9206      	str	r2, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
   237c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   237ca:	454a      	cmp	r2, r9
   237cc:	dd4c      	ble.n	23868 <lv_draw_map+0x222>
                map_px = map_buf_tmp;
   237ce:	9905      	ldr	r1, [sp, #20]
   237d0:	18f0      	adds	r0, r6, r3
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   237d2:	2200      	movs	r2, #0
                        map2[px_i].full =  map_px[0];
   237d4:	eb05 0e03 	add.w	lr, r5, r3
   237d8:	e014      	b.n	23804 <lv_draw_map+0x1be>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
   237da:	f04f 0b02 	mov.w	fp, #2
   237de:	e78d      	b.n	236fc <lv_draw_map+0xb6>
   237e0:	f04f 0b01 	mov.w	fp, #1
   237e4:	e78a      	b.n	236fc <lv_draw_map+0xb6>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   237e6:	2780      	movs	r7, #128	; 0x80
   237e8:	e7dd      	b.n	237a6 <lv_draw_map+0x160>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
   237ea:	f891 c001 	ldrb.w	ip, [r1, #1]
                    mask_buf[px_i] = px_opa;
   237ee:	f800 cb01 	strb.w	ip, [r0], #1
                    if(px_opa) {
   237f2:	f1bc 0f00 	cmp.w	ip, #0
   237f6:	d003      	beq.n	23800 <lv_draw_map+0x1ba>
                        map2[px_i].full =  map_px[0];
   237f8:	f891 c000 	ldrb.w	ip, [r1]
   237fc:	f80e c002 	strb.w	ip, [lr, r2]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   23800:	3201      	adds	r2, #1
   23802:	4459      	add	r1, fp
   23804:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   23806:	4294      	cmp	r4, r2
   23808:	dcef      	bgt.n	237ea <lv_draw_map+0x1a4>
   2380a:	9a06      	ldr	r2, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2380c:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
   23810:	4413      	add	r3, r2
                map_buf_tmp += map_w * px_size_byte;
   23812:	9a05      	ldr	r2, [sp, #20]
   23814:	4442      	add	r2, r8
   23816:	9205      	str	r2, [sp, #20]
   23818:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   2381c:	3201      	adds	r2, #1
   2381e:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
   23820:	fa03 f282 	sxtah	r2, r3, r2
   23824:	42ba      	cmp	r2, r7
   23826:	d207      	bcs.n	23838 <lv_draw_map+0x1f2>
                    blend_area.y2 ++;
   23828:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
   2382c:	3201      	adds	r2, #1
   2382e:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
            for(y = 0; y < draw_area_h; y++) {
   23832:	f109 0901 	add.w	r9, r9, #1
   23836:	e7c7      	b.n	237c8 <lv_draw_map+0x182>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
   23838:	9b04      	ldr	r3, [sp, #16]
   2383a:	7b1b      	ldrb	r3, [r3, #12]
   2383c:	9302      	str	r3, [sp, #8]
   2383e:	9b04      	ldr	r3, [sp, #16]
   23840:	781b      	ldrb	r3, [r3, #0]
   23842:	9301      	str	r3, [sp, #4]
   23844:	2302      	movs	r3, #2
   23846:	9300      	str	r3, [sp, #0]
   23848:	462a      	mov	r2, r5
   2384a:	4633      	mov	r3, r6
   2384c:	a916      	add	r1, sp, #88	; 0x58
   2384e:	4650      	mov	r0, sl
   23850:	f7ff fcbd 	bl	231ce <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
   23854:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   23858:	3301      	adds	r3, #1
   2385a:	b21b      	sxth	r3, r3
   2385c:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
                    blend_area.y2 = blend_area.y1;
   23860:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                    px_i = 0;
   23864:	2300      	movs	r3, #0
   23866:	e7e4      	b.n	23832 <lv_draw_map+0x1ec>
            if(blend_area.y1 != blend_area.y2) {
   23868:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   2386c:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
   23870:	429a      	cmp	r2, r3
   23872:	d010      	beq.n	23896 <lv_draw_map+0x250>
                blend_area.y2--;
   23874:	3b01      	subs	r3, #1
   23876:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
   2387a:	9b04      	ldr	r3, [sp, #16]
   2387c:	7b1b      	ldrb	r3, [r3, #12]
   2387e:	9302      	str	r3, [sp, #8]
   23880:	9b04      	ldr	r3, [sp, #16]
   23882:	781b      	ldrb	r3, [r3, #0]
   23884:	9301      	str	r3, [sp, #4]
   23886:	2302      	movs	r3, #2
   23888:	9300      	str	r3, [sp, #0]
   2388a:	462a      	mov	r2, r5
   2388c:	4633      	mov	r3, r6
   2388e:	a916      	add	r1, sp, #88	; 0x58
   23890:	4650      	mov	r0, sl
   23892:	f7ff fc9c 	bl	231ce <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
   23896:	4630      	mov	r0, r6
   23898:	f7f5 fa6a 	bl	18d70 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
   2389c:	4628      	mov	r0, r5
            _lv_mem_buf_release(map2);
   2389e:	f7f5 fa67 	bl	18d70 <_lv_mem_buf_release>
}
   238a2:	e721      	b.n	236e8 <lv_draw_map+0xa2>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   238a4:	a814      	add	r0, sp, #80	; 0x50
   238a6:	f001 fcb8 	bl	2521a <lv_area_get_size>
   238aa:	2880      	cmp	r0, #128	; 0x80
   238ac:	d848      	bhi.n	23940 <lv_draw_map+0x2fa>
   238ae:	a814      	add	r0, sp, #80	; 0x50
   238b0:	f001 fcb3 	bl	2521a <lv_area_get_size>
   238b4:	4607      	mov	r7, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
   238b6:	4638      	mov	r0, r7
   238b8:	f7f5 f9f8 	bl	18cac <_lv_mem_buf_get>
   238bc:	900c      	str	r0, [sp, #48]	; 0x30
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   238be:	4638      	mov	r0, r7
   238c0:	f7f5 f9f4 	bl	18cac <_lv_mem_buf_get>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
   238c4:	9b04      	ldr	r3, [sp, #16]
   238c6:	7a9b      	ldrb	r3, [r3, #10]
   238c8:	ea6f 0903 	mvn.w	r9, r3
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   238cc:	4606      	mov	r6, r0
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
   238ce:	fa5f f989 	uxtb.w	r9, r9
            if(draw_dsc->recolor_opa != 0) {
   238d2:	b11b      	cbz	r3, 238dc <lv_draw_map+0x296>
    out[0] = LV_COLOR_GET_R(c);
   238d4:	9b04      	ldr	r3, [sp, #16]
   238d6:	7adb      	ldrb	r3, [r3, #11]
   238d8:	f003 0301 	and.w	r3, r3, #1
            uint16_t recolor_premult[3] = {0};
   238dc:	930e      	str	r3, [sp, #56]	; 0x38
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   238de:	9b08      	ldr	r3, [sp, #32]
   238e0:	2b00      	cmp	r3, #0
   238e2:	d12f      	bne.n	23944 <lv_draw_map+0x2fe>
   238e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   238e6:	bb6b      	cbnz	r3, 23944 <lv_draw_map+0x2fe>
   238e8:	9b04      	ldr	r3, [sp, #16]
   238ea:	885b      	ldrh	r3, [r3, #2]
   238ec:	bb53      	cbnz	r3, 23944 <lv_draw_map+0x2fe>
   238ee:	9b04      	ldr	r3, [sp, #16]
   238f0:	891b      	ldrh	r3, [r3, #8]
   238f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   238f6:	bf14      	ite	ne
   238f8:	2502      	movne	r5, #2
   238fa:	2501      	moveq	r5, #1
            if(other_mask_cnt) {
   238fc:	9b07      	ldr	r3, [sp, #28]
   238fe:	b11b      	cbz	r3, 23908 <lv_draw_map+0x2c2>
                _lv_memset_ff(mask_buf, mask_buf_size);
   23900:	4639      	mov	r1, r7
   23902:	4630      	mov	r0, r6
   23904:	f7ff fe96 	bl	23634 <_lv_memset_ff>
                map_buf_tmp += map_w * px_size_byte;
   23908:	fb1b f308 	smulbb	r3, fp, r8
   2390c:	9310      	str	r3, [sp, #64]	; 0x40
   2390e:	2300      	movs	r3, #0
   23910:	9309      	str	r3, [sp, #36]	; 0x24
   23912:	4698      	mov	r8, r3
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
   23914:	fa4f f389 	sxtb.w	r3, r9
   23918:	9312      	str	r3, [sp, #72]	; 0x48
   2391a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2391c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23920:	9313      	str	r3, [sp, #76]	; 0x4c
            for(y = 0; y < draw_area_h; y++) {
   23922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23924:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23926:	4293      	cmp	r3, r2
   23928:	f340 80ac 	ble.w	23a84 <lv_draw_map+0x43e>
                    map2[px_i].full = c.full;
   2392c:	980c      	ldr	r0, [sp, #48]	; 0x30
                map_px = map_buf_tmp;
   2392e:	9905      	ldr	r1, [sp, #20]
   23930:	eb06 0908 	add.w	r9, r6, r8
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   23934:	2300      	movs	r3, #0
                    map2[px_i].full = c.full;
   23936:	4440      	add	r0, r8
   23938:	464a      	mov	r2, r9
   2393a:	9011      	str	r0, [sp, #68]	; 0x44
                                mask_buf[px_i] = LV_OPA_TRANSP;
   2393c:	469e      	mov	lr, r3
   2393e:	e00d      	b.n	2395c <lv_draw_map+0x316>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   23940:	2780      	movs	r7, #128	; 0x80
   23942:	e7b8      	b.n	238b6 <lv_draw_map+0x270>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   23944:	2502      	movs	r5, #2
   23946:	e7d9      	b.n	238fc <lv_draw_map+0x2b6>
                        if(alpha_byte) {
   23948:	9808      	ldr	r0, [sp, #32]
   2394a:	2800      	cmp	r0, #0
   2394c:	d047      	beq.n	239de <lv_draw_map+0x398>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
   2394e:	7848      	ldrb	r0, [r1, #1]
                            mask_buf[px_i] = px_opa;
   23950:	7010      	strb	r0, [r2, #0]
                            if(px_opa == 0) {
   23952:	2800      	cmp	r0, #0
   23954:	d146      	bne.n	239e4 <lv_draw_map+0x39e>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   23956:	3301      	adds	r3, #1
   23958:	4459      	add	r1, fp
   2395a:	3201      	adds	r2, #1
   2395c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2395e:	4298      	cmp	r0, r3
   23960:	dcf2      	bgt.n	23948 <lv_draw_map+0x302>
   23962:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   23964:	4498      	add	r8, r3
                if(other_mask_cnt) {
   23966:	9b07      	ldr	r3, [sp, #28]
   23968:	b313      	cbz	r3, 239b0 <lv_draw_map+0x36a>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
   2396a:	9806      	ldr	r0, [sp, #24]
   2396c:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   23970:	8a40      	ldrh	r0, [r0, #18]
   23972:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   23976:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
   2397a:	4402      	add	r2, r0
   2397c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2397e:	4402      	add	r2, r0
   23980:	9806      	ldr	r0, [sp, #24]
   23982:	8a00      	ldrh	r0, [r0, #16]
   23984:	3301      	adds	r3, #1
   23986:	1a5b      	subs	r3, r3, r1
   23988:	4401      	add	r1, r0
   2398a:	b21b      	sxth	r3, r3
   2398c:	b212      	sxth	r2, r2
   2398e:	b209      	sxth	r1, r1
   23990:	4648      	mov	r0, r9
   23992:	f7f4 fc93 	bl	182bc <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
   23996:	2800      	cmp	r0, #0
   23998:	d13f      	bne.n	23a1a <lv_draw_map+0x3d4>
   2399a:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
   2399e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   239a2:	3101      	adds	r1, #1
   239a4:	1ac9      	subs	r1, r1, r3
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
   239a6:	b209      	sxth	r1, r1
   239a8:	4648      	mov	r0, r9
   239aa:	f7ff fe3f 	bl	2362c <_lv_memset_00>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
   239ae:	2502      	movs	r5, #2
                map_buf_tmp += map_w * px_size_byte;
   239b0:	9b05      	ldr	r3, [sp, #20]
   239b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   239b4:	4413      	add	r3, r2
   239b6:	9305      	str	r3, [sp, #20]
   239b8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   239bc:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
   239c0:	3301      	adds	r3, #1
   239c2:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
   239c4:	fa08 f383 	sxtah	r3, r8, r3
   239c8:	42bb      	cmp	r3, r7
   239ca:	d22a      	bcs.n	23a22 <lv_draw_map+0x3dc>
                    blend_area.y2 ++;
   239cc:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   239d0:	3301      	adds	r3, #1
   239d2:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            for(y = 0; y < draw_area_h; y++) {
   239d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   239d8:	3301      	adds	r3, #1
   239da:	9309      	str	r3, [sp, #36]	; 0x24
   239dc:	e7a1      	b.n	23922 <lv_draw_map+0x2dc>
                            mask_buf[px_i] = 0xFF;
   239de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   239e2:	7010      	strb	r0, [r2, #0]
                        if(chroma_key) {
   239e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
                        c.full = map_px[0];
   239e6:	7808      	ldrb	r0, [r1, #0]
                        if(chroma_key) {
   239e8:	b124      	cbz	r4, 239f4 <lv_draw_map+0x3ae>
                            if(c.full == chroma_keyed_color.full) {
   239ea:	2801      	cmp	r0, #1
   239ec:	d102      	bne.n	239f4 <lv_draw_map+0x3ae>
                                mask_buf[px_i] = LV_OPA_TRANSP;
   239ee:	f882 e000 	strb.w	lr, [r2]
                                continue;
   239f2:	e7b0      	b.n	23956 <lv_draw_map+0x310>
                    if(draw_dsc->recolor_opa != 0) {
   239f4:	9c04      	ldr	r4, [sp, #16]
   239f6:	7aa4      	ldrb	r4, [r4, #10]
   239f8:	b164      	cbz	r4, 23a14 <lv_draw_map+0x3ce>
    LV_COLOR_SET_B(c1, premult_c1[2]);
   239fa:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   239fe:	46a4      	mov	ip, r4
   23a00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   23a02:	f364 0c00 	bfi	ip, r4, #0, #1
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
   23a06:	9c12      	ldr	r4, [sp, #72]	; 0x48
    LV_COLOR_SET_B(c1, premult_c1[2]);
   23a08:	f88d c03c 	strb.w	ip, [sp, #60]	; 0x3c
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
   23a0c:	2c00      	cmp	r4, #0
   23a0e:	bfb8      	it	lt
   23a10:	f89d 003c 	ldrblt.w	r0, [sp, #60]	; 0x3c
                    map2[px_i].full = c.full;
   23a14:	9c11      	ldr	r4, [sp, #68]	; 0x44
   23a16:	54e0      	strb	r0, [r4, r3]
   23a18:	e79d      	b.n	23956 <lv_draw_map+0x310>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
   23a1a:	2802      	cmp	r0, #2
   23a1c:	bf08      	it	eq
   23a1e:	2502      	moveq	r5, #2
   23a20:	e7c6      	b.n	239b0 <lv_draw_map+0x36a>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
   23a22:	9b04      	ldr	r3, [sp, #16]
   23a24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23a26:	7b1b      	ldrb	r3, [r3, #12]
   23a28:	9302      	str	r3, [sp, #8]
   23a2a:	9b04      	ldr	r3, [sp, #16]
   23a2c:	781b      	ldrb	r3, [r3, #0]
   23a2e:	a916      	add	r1, sp, #88	; 0x58
   23a30:	e9cd 5300 	strd	r5, r3, [sp]
   23a34:	4650      	mov	r0, sl
   23a36:	4633      	mov	r3, r6
   23a38:	f7ff fbc9 	bl	231ce <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
   23a3c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   23a40:	3301      	adds	r3, #1
   23a42:	b21b      	sxth	r3, r3
   23a44:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
                    blend_area.y2 = blend_area.y1;
   23a48:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   23a4c:	9b08      	ldr	r3, [sp, #32]
   23a4e:	b9a3      	cbnz	r3, 23a7a <lv_draw_map+0x434>
   23a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23a52:	b993      	cbnz	r3, 23a7a <lv_draw_map+0x434>
   23a54:	9b04      	ldr	r3, [sp, #16]
   23a56:	885b      	ldrh	r3, [r3, #2]
   23a58:	b97b      	cbnz	r3, 23a7a <lv_draw_map+0x434>
   23a5a:	9b04      	ldr	r3, [sp, #16]
   23a5c:	891b      	ldrh	r3, [r3, #8]
   23a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   23a62:	bf14      	ite	ne
   23a64:	2502      	movne	r5, #2
   23a66:	2501      	moveq	r5, #1
                    if(other_mask_cnt) {
   23a68:	9b07      	ldr	r3, [sp, #28]
   23a6a:	b143      	cbz	r3, 23a7e <lv_draw_map+0x438>
                        _lv_memset_ff(mask_buf, mask_buf_size);
   23a6c:	4639      	mov	r1, r7
   23a6e:	4630      	mov	r0, r6
   23a70:	f7ff fde0 	bl	23634 <_lv_memset_ff>
                    px_i = 0;
   23a74:	f04f 0800 	mov.w	r8, #0
   23a78:	e7ad      	b.n	239d6 <lv_draw_map+0x390>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   23a7a:	2502      	movs	r5, #2
   23a7c:	e7f4      	b.n	23a68 <lv_draw_map+0x422>
                    px_i = 0;
   23a7e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   23a82:	e7a8      	b.n	239d6 <lv_draw_map+0x390>
            if(blend_area.y1 != blend_area.y2) {
   23a84:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   23a88:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
   23a8c:	429a      	cmp	r2, r3
   23a8e:	d00f      	beq.n	23ab0 <lv_draw_map+0x46a>
                blend_area.y2--;
   23a90:	3b01      	subs	r3, #1
   23a92:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
   23a96:	9b04      	ldr	r3, [sp, #16]
   23a98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23a9a:	7b1b      	ldrb	r3, [r3, #12]
   23a9c:	9302      	str	r3, [sp, #8]
   23a9e:	9b04      	ldr	r3, [sp, #16]
   23aa0:	781b      	ldrb	r3, [r3, #0]
   23aa2:	a916      	add	r1, sp, #88	; 0x58
   23aa4:	e9cd 5300 	strd	r5, r3, [sp]
   23aa8:	4650      	mov	r0, sl
   23aaa:	4633      	mov	r3, r6
   23aac:	f7ff fb8f 	bl	231ce <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
   23ab0:	4630      	mov	r0, r6
   23ab2:	f7f5 f95d 	bl	18d70 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
   23ab6:	980c      	ldr	r0, [sp, #48]	; 0x30
   23ab8:	e6f1      	b.n	2389e <lv_draw_map+0x258>

00023aba <lv_draw_img_dsc_init>:
{
   23aba:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
   23abc:	210e      	movs	r1, #14
{
   23abe:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
   23ac0:	f7ff fdb4 	bl	2362c <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
   23ac4:	23ff      	movs	r3, #255	; 0xff
   23ac6:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
   23ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
   23acc:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
   23ace:	7b63      	ldrb	r3, [r4, #13]
    dsc->recolor = LV_COLOR_BLACK;
   23ad0:	2200      	movs	r2, #0
    dsc->antialias = LV_ANTIALIAS;
   23ad2:	f362 0300 	bfi	r3, r2, #0, #1
    dsc->recolor = LV_COLOR_BLACK;
   23ad6:	72e2      	strb	r2, [r4, #11]
    dsc->antialias = LV_ANTIALIAS;
   23ad8:	7363      	strb	r3, [r4, #13]
}
   23ada:	bd10      	pop	{r4, pc}

00023adc <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
   23adc:	2803      	cmp	r0, #3
   23ade:	d005      	beq.n	23aec <lv_img_cf_is_chroma_keyed+0x10>
   23ae0:	3806      	subs	r0, #6
   23ae2:	2804      	cmp	r0, #4
   23ae4:	bf8c      	ite	hi
   23ae6:	2000      	movhi	r0, #0
   23ae8:	2001      	movls	r0, #1
   23aea:	4770      	bx	lr
            is_chroma_keyed = true;
   23aec:	2001      	movs	r0, #1
}
   23aee:	4770      	bx	lr

00023af0 <lv_img_cf_has_alpha>:
    switch(cf) {
   23af0:	280e      	cmp	r0, #14
   23af2:	d809      	bhi.n	23b08 <lv_img_cf_has_alpha+0x18>
   23af4:	2301      	movs	r3, #1
   23af6:	fa03 f000 	lsl.w	r0, r3, r0
   23afa:	f647 73a4 	movw	r3, #32676	; 0x7fa4
   23afe:	4218      	tst	r0, r3
   23b00:	bf14      	ite	ne
   23b02:	2001      	movne	r0, #1
   23b04:	2000      	moveq	r0, #0
   23b06:	4770      	bx	lr
{
   23b08:	2000      	movs	r0, #0
}
   23b0a:	4770      	bx	lr

00023b0c <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
   23b0c:	b150      	cbz	r0, 23b24 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
   23b0e:	7803      	ldrb	r3, [r0, #0]
   23b10:	f1a3 0220 	sub.w	r2, r3, #32
   23b14:	2a5f      	cmp	r2, #95	; 0x5f
   23b16:	d907      	bls.n	23b28 <lv_img_src_get_type+0x1c>
    else if(u8_p[0] >= 0x80) {
   23b18:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
   23b1c:	bf14      	ite	ne
   23b1e:	2002      	movne	r0, #2
   23b20:	2000      	moveq	r0, #0
   23b22:	4770      	bx	lr
    if(src == NULL) return img_src_type;
   23b24:	2003      	movs	r0, #3
   23b26:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
   23b28:	2001      	movs	r0, #1
}
   23b2a:	4770      	bx	lr

00023b2c <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
   23b2c:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
   23b2e:	3830      	subs	r0, #48	; 0x30
   23b30:	b2c0      	uxtb	r0, r0
   23b32:	2809      	cmp	r0, #9
   23b34:	d90b      	bls.n	23b4e <hex_char_to_num+0x22>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
   23b36:	2b60      	cmp	r3, #96	; 0x60
   23b38:	bf84      	itt	hi
   23b3a:	3b20      	subhi	r3, #32
   23b3c:	b2db      	uxtbhi	r3, r3

        switch(hex) {
   23b3e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   23b42:	2a05      	cmp	r2, #5
   23b44:	d802      	bhi.n	23b4c <hex_char_to_num+0x20>
   23b46:	3b37      	subs	r3, #55	; 0x37
   23b48:	b2d8      	uxtb	r0, r3
   23b4a:	4770      	bx	lr
{
   23b4c:	2000      	movs	r0, #0
                break;
        }
    }

    return result;
}
   23b4e:	4770      	bx	lr

00023b50 <_lv_memset_00>:
{
   23b50:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   23b52:	2100      	movs	r1, #0
   23b54:	f002 bf9a 	b.w	26a8c <memset>

00023b58 <_lv_memset_00>:
   23b58:	460a      	mov	r2, r1
   23b5a:	2100      	movs	r1, #0
   23b5c:	f002 bf96 	b.w	26a8c <memset>

00023b60 <_lv_memset_ff>:
{
   23b60:	460a      	mov	r2, r1
   23b62:	21ff      	movs	r1, #255	; 0xff
   23b64:	f002 bf92 	b.w	26a8c <memset>

00023b68 <lv_draw_line_dsc_init>:
{
   23b68:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
   23b6a:	210a      	movs	r1, #10
{
   23b6c:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
   23b6e:	f7ff fff3 	bl	23b58 <_lv_memset_00>
    dsc->width = 1;
   23b72:	2301      	movs	r3, #1
   23b74:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
   23b76:	23ff      	movs	r3, #255	; 0xff
   23b78:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
   23b7a:	2300      	movs	r3, #0
   23b7c:	7023      	strb	r3, [r4, #0]
}
   23b7e:	bd10      	pop	{r4, pc}

00023b80 <mask_mix>:
}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
   23b80:	29fc      	cmp	r1, #252	; 0xfc
   23b82:	d80a      	bhi.n	23b9a <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
   23b84:	2902      	cmp	r1, #2
   23b86:	d907      	bls.n	23b98 <mask_mix+0x18>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
   23b88:	fb10 f001 	smulbb	r0, r0, r1
   23b8c:	f248 0181 	movw	r1, #32897	; 0x8081
   23b90:	4348      	muls	r0, r1
   23b92:	f3c0 50c7 	ubfx	r0, r0, #23, #8
   23b96:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
   23b98:	2000      	movs	r0, #0
}
   23b9a:	4770      	bx	lr

00023b9c <_lv_memset_00>:
{
   23b9c:	460a      	mov	r2, r1
   23b9e:	2100      	movs	r1, #0
   23ba0:	f002 bf74 	b.w	26a8c <memset>

00023ba4 <lv_draw_mask_line>:
{
   23ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23ba8:	9e08      	ldr	r6, [sp, #32]
    abs_x -= p->origo.x;
   23baa:	8a75      	ldrh	r5, [r6, #18]
   23bac:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
   23bb0:	1b49      	subs	r1, r1, r5
{
   23bb2:	4604      	mov	r4, r0
    abs_y -= p->origo.y;
   23bb4:	8ab0      	ldrh	r0, [r6, #20]
    abs_x -= p->origo.x;
   23bb6:	b20d      	sxth	r5, r1
    if(p->steep == 0) {
   23bb8:	6a31      	ldr	r1, [r6, #32]
    abs_y -= p->origo.y;
   23bba:	1a12      	subs	r2, r2, r0
   23bbc:	b212      	sxth	r2, r2
    if(p->steep == 0) {
   23bbe:	f00c 0001 	and.w	r0, ip, #1
   23bc2:	bb89      	cbnz	r1, 23c28 <lv_draw_mask_line+0x84>
        if(p->flat) {
   23bc4:	7c31      	ldrb	r1, [r6, #16]
   23bc6:	f001 0602 	and.w	r6, r1, #2
   23bca:	b170      	cbz	r0, 23bea <lv_draw_mask_line+0x46>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
   23bcc:	b12e      	cbz	r6, 23bda <lv_draw_mask_line+0x36>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
   23bce:	f001 0103 	and.w	r1, r1, #3
   23bd2:	2902      	cmp	r1, #2
   23bd4:	d103      	bne.n	23bde <lv_draw_mask_line+0x3a>
   23bd6:	1c50      	adds	r0, r2, #1
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   23bd8:	0fc0      	lsrs	r0, r0, #31
}
   23bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
   23bde:	2903      	cmp	r1, #3
   23be0:	d101      	bne.n	23be6 <lv_draw_mask_line+0x42>
   23be2:	2a00      	cmp	r2, #0
   23be4:	dcf9      	bgt.n	23bda <lv_draw_mask_line+0x36>
                return LV_DRAW_MASK_RES_TRANSP;
   23be6:	2000      	movs	r0, #0
   23be8:	e7f7      	b.n	23bda <lv_draw_mask_line+0x36>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
   23bea:	2e00      	cmp	r6, #0
   23bec:	f040 816a 	bne.w	23ec4 <lv_draw_mask_line+0x320>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
   23bf0:	f001 0003 	and.w	r0, r1, #3
   23bf4:	2801      	cmp	r0, #1
   23bf6:	d10a      	bne.n	23c0e <lv_draw_mask_line+0x6a>
   23bf8:	2d00      	cmp	r5, #0
   23bfa:	dcee      	bgt.n	23bda <lv_draw_mask_line+0x36>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
   23bfc:	42dd      	cmn	r5, r3
   23bfe:	d4f2      	bmi.n	23be6 <lv_draw_mask_line+0x42>
                    int32_t k = - abs_x;
   23c00:	4269      	negs	r1, r5
                    if(k < 0) k = 0;
   23c02:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
   23c06:	428b      	cmp	r3, r1
   23c08:	dded      	ble.n	23be6 <lv_draw_mask_line+0x42>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
   23c0a:	4620      	mov	r0, r4
   23c0c:	e0a2      	b.n	23d54 <lv_draw_mask_line+0x1b0>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
   23c0e:	2800      	cmp	r0, #0
   23c10:	d1f4      	bne.n	23bfc <lv_draw_mask_line+0x58>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
   23c12:	1959      	adds	r1, r3, r5
   23c14:	f100 8156 	bmi.w	23ec4 <lv_draw_mask_line+0x320>
                    int32_t k = - abs_x;
   23c18:	4268      	negs	r0, r5
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
   23c1a:	2800      	cmp	r0, #0
   23c1c:	dbe3      	blt.n	23be6 <lv_draw_mask_line+0x42>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
   23c1e:	4298      	cmp	r0, r3
   23c20:	f2c0 8097 	blt.w	23d52 <lv_draw_mask_line+0x1ae>
    return LV_DRAW_MASK_RES_CHANGED;
   23c24:	2002      	movs	r0, #2
   23c26:	e7d8      	b.n	23bda <lv_draw_mask_line+0x36>
    if(p->flat) {
   23c28:	f00c 0c02 	and.w	ip, ip, #2
   23c2c:	2800      	cmp	r0, #0
   23c2e:	f000 8094 	beq.w	23d5a <lv_draw_mask_line+0x1b6>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
   23c32:	69f7      	ldr	r7, [r6, #28]
   23c34:	fb05 f107 	mul.w	r1, r5, r7
    if(p->yx_steep > 0) {
   23c38:	2f00      	cmp	r7, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
   23c3a:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
   23c3e:	fa5f f08c 	uxtb.w	r0, ip
   23c42:	dd05      	ble.n	23c50 <lv_draw_mask_line+0xac>
        if(y_at_x > abs_y) {
   23c44:	4291      	cmp	r1, r2
   23c46:	dd05      	ble.n	23c54 <lv_draw_mask_line+0xb0>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   23c48:	3800      	subs	r0, #0
   23c4a:	bf18      	it	ne
   23c4c:	2001      	movne	r0, #1
   23c4e:	e7c4      	b.n	23bda <lv_draw_mask_line+0x36>
        if(y_at_x < abs_y) {
   23c50:	4291      	cmp	r1, r2
   23c52:	dbf9      	blt.n	23c48 <lv_draw_mask_line+0xa4>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
   23c54:	1959      	adds	r1, r3, r5
   23c56:	4379      	muls	r1, r7
    if(p->yx_steep > 0) {
   23c58:	2f00      	cmp	r7, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
   23c5a:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
   23c5e:	dd05      	ble.n	23c6c <lv_draw_mask_line+0xc8>
        if(y_at_x < abs_y) {
   23c60:	4291      	cmp	r1, r2
   23c62:	da06      	bge.n	23c72 <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   23c64:	fab0 f080 	clz	r0, r0
   23c68:	0940      	lsrs	r0, r0, #5
   23c6a:	e7b6      	b.n	23bda <lv_draw_mask_line+0x36>
        if(y_at_x > abs_y) {
   23c6c:	4291      	cmp	r1, r2
   23c6e:	dcf9      	bgt.n	23c64 <lv_draw_mask_line+0xc0>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   23c70:	3201      	adds	r2, #1
   23c72:	69b1      	ldr	r1, [r6, #24]
   23c74:	0212      	lsls	r2, r2, #8
   23c76:	434a      	muls	r2, r1
   23c78:	1292      	asrs	r2, r2, #10
    int32_t xei = xe >> 8;
   23c7a:	ea4f 2c22 	mov.w	ip, r2, asr #8
    if(xef == 0) px_h = 255;
   23c7e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
   23c82:	bf1f      	itttt	ne
   23c84:	6a71      	ldrne	r1, [r6, #36]	; 0x24
   23c86:	f1c2 07ff 	rsbne	r7, r2, #255	; 0xff
   23c8a:	434f      	mulne	r7, r1
   23c8c:	123f      	asrne	r7, r7, #8
   23c8e:	bf14      	ite	ne
   23c90:	f1c7 07ff 	rsbne	r7, r7, #255	; 0xff
    if(xef == 0) px_h = 255;
   23c94:	27ff      	moveq	r7, #255	; 0xff
    int32_t k = xei - abs_x;
   23c96:	ebac 0505 	sub.w	r5, ip, r5
    if(xef) {
   23c9a:	2a00      	cmp	r2, #0
   23c9c:	d050      	beq.n	23d40 <lv_draw_mask_line+0x19c>
        if(k >= 0 && k < len) {
   23c9e:	2d00      	cmp	r5, #0
   23ca0:	db0f      	blt.n	23cc2 <lv_draw_mask_line+0x11e>
   23ca2:	42ab      	cmp	r3, r5
   23ca4:	dd0d      	ble.n	23cc2 <lv_draw_mask_line+0x11e>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
   23ca6:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
   23caa:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
   23cae:	434a      	muls	r2, r1
   23cb0:	f3c2 2147 	ubfx	r1, r2, #9, #8
            if(p->inv) m = 255 - m;
   23cb4:	b908      	cbnz	r0, 23cba <lv_draw_mask_line+0x116>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
   23cb6:	43c9      	mvns	r1, r1
   23cb8:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   23cba:	5d60      	ldrb	r0, [r4, r5]
   23cbc:	f7ff ff60 	bl	23b80 <mask_mix>
   23cc0:	5560      	strb	r0, [r4, r5]
        k++;
   23cc2:	1c6a      	adds	r2, r5, #1
    while(px_h > p->spx) {
   23cc4:	6a71      	ldr	r1, [r6, #36]	; 0x24
   23cc6:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
   23cca:	428f      	cmp	r7, r1
   23ccc:	f000 0002 	and.w	r0, r0, #2
   23cd0:	dc16      	bgt.n	23d00 <lv_draw_mask_line+0x15c>
    if(k < len && k >= 0) {
   23cd2:	4293      	cmp	r3, r2
   23cd4:	dd28      	ble.n	23d28 <lv_draw_mask_line+0x184>
   23cd6:	2a00      	cmp	r2, #0
   23cd8:	db26      	blt.n	23d28 <lv_draw_mask_line+0x184>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
   23cda:	69b1      	ldr	r1, [r6, #24]
   23cdc:	4379      	muls	r1, r7
   23cde:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
   23ce0:	4379      	muls	r1, r7
        if(p->yx_steep < 0) m = 255 - m;
   23ce2:	69f7      	ldr	r7, [r6, #28]
        m = (x_inters * px_h) >> 9;
   23ce4:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
   23ce8:	2f00      	cmp	r7, #0
   23cea:	bfbc      	itt	lt
   23cec:	43c9      	mvnlt	r1, r1
   23cee:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
   23cf0:	b108      	cbz	r0, 23cf6 <lv_draw_mask_line+0x152>
   23cf2:	43c9      	mvns	r1, r1
   23cf4:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
   23cf6:	5ca0      	ldrb	r0, [r4, r2]
   23cf8:	f7ff ff42 	bl	23b80 <mask_mix>
   23cfc:	54a0      	strb	r0, [r4, r2]
   23cfe:	e013      	b.n	23d28 <lv_draw_mask_line+0x184>
        if(k >= 0 && k < len) {
   23d00:	2a00      	cmp	r2, #0
   23d02:	db0b      	blt.n	23d1c <lv_draw_mask_line+0x178>
   23d04:	4293      	cmp	r3, r2
   23d06:	dd09      	ble.n	23d1c <lv_draw_mask_line+0x178>
            m = px_h - (p->spx >> 1);
   23d08:	eba7 0161 	sub.w	r1, r7, r1, asr #1
   23d0c:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
   23d0e:	b108      	cbz	r0, 23d14 <lv_draw_mask_line+0x170>
   23d10:	43c9      	mvns	r1, r1
   23d12:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   23d14:	5ca0      	ldrb	r0, [r4, r2]
   23d16:	f7ff ff33 	bl	23b80 <mask_mix>
   23d1a:	54a0      	strb	r0, [r4, r2]
        px_h -= p->spx;
   23d1c:	6a71      	ldr	r1, [r6, #36]	; 0x24
        k++;
   23d1e:	3201      	adds	r2, #1
        if(k >= len) break;
   23d20:	4293      	cmp	r3, r2
        px_h -= p->spx;
   23d22:	eba7 0701 	sub.w	r7, r7, r1
        if(k >= len) break;
   23d26:	dccd      	bgt.n	23cc4 <lv_draw_mask_line+0x120>
    if(p->inv) {
   23d28:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   23d2c:	0788      	lsls	r0, r1, #30
   23d2e:	d509      	bpl.n	23d44 <lv_draw_mask_line+0x1a0>
        if(k > len) {
   23d30:	42ab      	cmp	r3, r5
   23d32:	f6ff af58 	blt.w	23be6 <lv_draw_mask_line+0x42>
        if(k >= 0) {
   23d36:	2d00      	cmp	r5, #0
   23d38:	f6ff af74 	blt.w	23c24 <lv_draw_mask_line+0x80>
            _lv_memset_00(&mask_buf[0], k);
   23d3c:	4629      	mov	r1, r5
   23d3e:	e764      	b.n	23c0a <lv_draw_mask_line+0x66>
    int32_t k = xei - abs_x;
   23d40:	462a      	mov	r2, r5
   23d42:	e7bf      	b.n	23cc4 <lv_draw_mask_line+0x120>
        if(k < 0) {
   23d44:	1c50      	adds	r0, r2, #1
   23d46:	f53f af4e 	bmi.w	23be6 <lv_draw_mask_line+0x42>
        if(k <= len) {
   23d4a:	4283      	cmp	r3, r0
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
   23d4c:	f6ff af6a 	blt.w	23c24 <lv_draw_mask_line+0x80>
   23d50:	1a19      	subs	r1, r3, r0
   23d52:	4420      	add	r0, r4
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
   23d54:	f7ff ff22 	bl	23b9c <_lv_memset_00>
   23d58:	e764      	b.n	23c24 <lv_draw_mask_line+0x80>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
   23d5a:	69b1      	ldr	r1, [r6, #24]
   23d5c:	fb02 f701 	mul.w	r7, r2, r1
    if(p->xy_steep > 0) x_at_y++;
   23d60:	2900      	cmp	r1, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
   23d62:	ea4f 27a7 	mov.w	r7, r7, asr #10
    if(p->xy_steep > 0) x_at_y++;
   23d66:	bfcc      	ite	gt
   23d68:	f107 0e01 	addgt.w	lr, r7, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
   23d6c:	46be      	movle	lr, r7
    if(x_at_y < abs_x) {
   23d6e:	45ae      	cmp	lr, r5
   23d70:	fa5f f08c 	uxtb.w	r0, ip
   23d74:	f6ff af68 	blt.w	23c48 <lv_draw_mask_line+0xa4>
    if(x_at_y > abs_x + len) {
   23d78:	eb03 0c05 	add.w	ip, r3, r5
   23d7c:	4567      	cmp	r7, ip
   23d7e:	f73f af71 	bgt.w	23c64 <lv_draw_mask_line+0xc0>
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   23d82:	1c57      	adds	r7, r2, #1
   23d84:	023f      	lsls	r7, r7, #8
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
   23d86:	ea4f 2e02 	mov.w	lr, r2, lsl #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   23d8a:	434f      	muls	r7, r1
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
   23d8c:	fb01 fe0e 	mul.w	lr, r1, lr
    int32_t xei = xe >> 8;
   23d90:	ea4f 48a7 	mov.w	r8, r7, asr #18
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
   23d94:	ebb8 4fae 	cmp.w	r8, lr, asr #18
    int32_t xsf = xs & 0xFF;
   23d98:	f3ce 2c87 	ubfx	ip, lr, #10, #8
    k = xsi - abs_x;
   23d9c:	ebc5 42ae 	rsb	r2, r5, lr, asr #18
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
   23da0:	f000 8095 	beq.w	23ece <lv_draw_mask_line+0x32a>
   23da4:	2900      	cmp	r1, #0
   23da6:	da54      	bge.n	23e52 <lv_draw_mask_line+0x2ae>
   23da8:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   23dac:	f1bc 0f00 	cmp.w	ip, #0
   23db0:	f000 808a 	beq.w	23ec8 <lv_draw_mask_line+0x324>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
   23db4:	69f5      	ldr	r5, [r6, #28]
   23db6:	fb05 f50c 	mul.w	r5, r5, ip
   23dba:	426d      	negs	r5, r5
            if(k >= 0 && k < len) {
   23dbc:	2a00      	cmp	r2, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
   23dbe:	ea4f 25a5 	mov.w	r5, r5, asr #10
            if(k >= 0 && k < len) {
   23dc2:	db0c      	blt.n	23dde <lv_draw_mask_line+0x23a>
   23dc4:	4293      	cmp	r3, r2
   23dc6:	dd0a      	ble.n	23dde <lv_draw_mask_line+0x23a>
                m = (y_inters * xsf) >> 9;
   23dc8:	fb05 f10c 	mul.w	r1, r5, ip
   23dcc:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   23dd0:	b108      	cbz	r0, 23dd6 <lv_draw_mask_line+0x232>
   23dd2:	43c9      	mvns	r1, r1
   23dd4:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   23dd6:	5ca0      	ldrb	r0, [r4, r2]
   23dd8:	f7ff fed2 	bl	23b80 <mask_mix>
   23ddc:	54a0      	strb	r0, [r4, r2]
            if(k >= 0 && k < len) {
   23dde:	f1b9 0f00 	cmp.w	r9, #0
   23de2:	db18      	blt.n	23e16 <lv_draw_mask_line+0x272>
   23de4:	454b      	cmp	r3, r9
   23de6:	dd16      	ble.n	23e16 <lv_draw_mask_line+0x272>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
   23de8:	69b1      	ldr	r1, [r6, #24]
   23dea:	f1a5 00ff 	sub.w	r0, r5, #255	; 0xff
   23dee:	4341      	muls	r1, r0
   23df0:	1288      	asrs	r0, r1, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   23df2:	f1c5 01ff 	rsb	r1, r5, #255	; 0xff
   23df6:	4341      	muls	r1, r0
                if(p->inv) m = 255 - m;
   23df8:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   23dfc:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   23e00:	0787      	lsls	r7, r0, #30
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   23e02:	bf58      	it	pl
   23e04:	43c9      	mvnpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   23e06:	f814 0009 	ldrb.w	r0, [r4, r9]
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   23e0a:	bf58      	it	pl
   23e0c:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   23e0e:	f7ff feb7 	bl	23b80 <mask_mix>
   23e12:	f804 0009 	strb.w	r0, [r4, r9]
            if(p->inv) {
   23e16:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   23e1a:	078d      	lsls	r5, r1, #30
   23e1c:	d514      	bpl.n	23e48 <lv_draw_mask_line+0x2a4>
                if(k > len) k = len;
   23e1e:	454b      	cmp	r3, r9
   23e20:	f6ff af00 	blt.w	23c24 <lv_draw_mask_line+0x80>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
   23e24:	f1b9 0f00 	cmp.w	r9, #0
   23e28:	f77f aefc 	ble.w	23c24 <lv_draw_mask_line+0x80>
   23e2c:	4649      	mov	r1, r9
   23e2e:	e6ec      	b.n	23c0a <lv_draw_mask_line+0x66>
        k++;
   23e30:	3201      	adds	r2, #1
   23e32:	429a      	cmp	r2, r3
   23e34:	bfa8      	it	ge
   23e36:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
   23e38:	2a00      	cmp	r2, #0
   23e3a:	f43f aed4 	beq.w	23be6 <lv_draw_mask_line+0x42>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
   23e3e:	f77f aef1 	ble.w	23c24 <lv_draw_mask_line+0x80>
   23e42:	1a99      	subs	r1, r3, r2
   23e44:	18a0      	adds	r0, r4, r2
   23e46:	e785      	b.n	23d54 <lv_draw_mask_line+0x1b0>
            k += 2;
   23e48:	1c50      	adds	r0, r2, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
   23e4a:	4283      	cmp	r3, r0
   23e4c:	db3a      	blt.n	23ec4 <lv_draw_mask_line+0x320>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
   23e4e:	2800      	cmp	r0, #0
   23e50:	e77c      	b.n	23d4c <lv_draw_mask_line+0x1a8>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
   23e52:	69f5      	ldr	r5, [r6, #28]
   23e54:	f1cc 01ff 	rsb	r1, ip, #255	; 0xff
   23e58:	434d      	muls	r5, r1
            if(k >= 0 && k < len) {
   23e5a:	2a00      	cmp	r2, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
   23e5c:	ea4f 25a5 	mov.w	r5, r5, asr #10
            if(k >= 0 && k < len) {
   23e60:	db0b      	blt.n	23e7a <lv_draw_mask_line+0x2d6>
   23e62:	4293      	cmp	r3, r2
   23e64:	dd09      	ble.n	23e7a <lv_draw_mask_line+0x2d6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
   23e66:	4369      	muls	r1, r5
   23e68:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   23e6c:	b908      	cbnz	r0, 23e72 <lv_draw_mask_line+0x2ce>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
   23e6e:	43c9      	mvns	r1, r1
   23e70:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   23e72:	5ca0      	ldrb	r0, [r4, r2]
   23e74:	f7ff fe84 	bl	23b80 <mask_mix>
   23e78:	54a0      	strb	r0, [r4, r2]
            if(k >= 0 && k < len) {
   23e7a:	1c57      	adds	r7, r2, #1
   23e7c:	d414      	bmi.n	23ea8 <lv_draw_mask_line+0x304>
   23e7e:	42bb      	cmp	r3, r7
   23e80:	dd12      	ble.n	23ea8 <lv_draw_mask_line+0x304>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
   23e82:	69b1      	ldr	r1, [r6, #24]
                if(p->inv) m = 255 - m;
   23e84:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
   23e88:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
   23e8c:	4369      	muls	r1, r5
   23e8e:	1289      	asrs	r1, r1, #10
                m = ((255 - y_inters) * x_inters) >> 9;
   23e90:	434d      	muls	r5, r1
                if(p->inv) m = 255 - m;
   23e92:	0780      	lsls	r0, r0, #30
                m = ((255 - y_inters) * x_inters) >> 9;
   23e94:	f3c5 2147 	ubfx	r1, r5, #9, #8
                if(p->inv) m = 255 - m;
   23e98:	bf48      	it	mi
   23e9a:	43c9      	mvnmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   23e9c:	5de0      	ldrb	r0, [r4, r7]
                if(p->inv) m = 255 - m;
   23e9e:	bf48      	it	mi
   23ea0:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   23ea2:	f7ff fe6d 	bl	23b80 <mask_mix>
   23ea6:	55e0      	strb	r0, [r4, r7]
            if(p->inv) {
   23ea8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   23eac:	0789      	lsls	r1, r1, #30
   23eae:	d507      	bpl.n	23ec0 <lv_draw_mask_line+0x31c>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
   23eb0:	4293      	cmp	r3, r2
   23eb2:	f6ff ae98 	blt.w	23be6 <lv_draw_mask_line+0x42>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
   23eb6:	2a00      	cmp	r2, #0
   23eb8:	f6ff aeb4 	blt.w	23c24 <lv_draw_mask_line+0x80>
   23ebc:	4611      	mov	r1, r2
   23ebe:	e6a4      	b.n	23c0a <lv_draw_mask_line+0x66>
            k++;
   23ec0:	3202      	adds	r2, #2
   23ec2:	e7b6      	b.n	23e32 <lv_draw_mask_line+0x28e>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
   23ec4:	2001      	movs	r0, #1
   23ec6:	e688      	b.n	23bda <lv_draw_mask_line+0x36>
   23ec8:	464a      	mov	r2, r9
        xsf = 0xFF;
   23eca:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if(k >= 0 && k < len) {
   23ece:	2a00      	cmp	r2, #0
   23ed0:	db0d      	blt.n	23eee <lv_draw_mask_line+0x34a>
   23ed2:	4293      	cmp	r3, r2
   23ed4:	dd0b      	ble.n	23eee <lv_draw_mask_line+0x34a>
    int32_t xef = xe & 0xFF;
   23ed6:	f3c7 2187 	ubfx	r1, r7, #10, #8
            m = (xsf + xef) >> 1;
   23eda:	4461      	add	r1, ip
   23edc:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
   23ee0:	b108      	cbz	r0, 23ee6 <lv_draw_mask_line+0x342>
   23ee2:	43c9      	mvns	r1, r1
   23ee4:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   23ee6:	5ca0      	ldrb	r0, [r4, r2]
   23ee8:	f7ff fe4a 	bl	23b80 <mask_mix>
   23eec:	54a0      	strb	r0, [r4, r2]
        if(p->inv) {
   23eee:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   23ef2:	0789      	lsls	r1, r1, #30
   23ef4:	d59c      	bpl.n	23e30 <lv_draw_mask_line+0x28c>
            k = xsi - abs_x;
   23ef6:	eba8 0105 	sub.w	r1, r8, r5
            if(k >= len) {
   23efa:	428b      	cmp	r3, r1
   23efc:	f77f ae73 	ble.w	23be6 <lv_draw_mask_line+0x42>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
   23f00:	2900      	cmp	r1, #0
   23f02:	f6ff ae8f 	blt.w	23c24 <lv_draw_mask_line+0x80>
   23f06:	e680      	b.n	23c0a <lv_draw_mask_line+0x66>

00023f08 <_lv_memcpy_small.constprop.0>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23f08:	680a      	ldr	r2, [r1, #0]
   23f0a:	6002      	str	r2, [r0, #0]
   23f0c:	684a      	ldr	r2, [r1, #4]
   23f0e:	6042      	str	r2, [r0, #4]
}
   23f10:	4770      	bx	lr

00023f12 <lv_draw_mask_radius>:
{
   23f12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f16:	b08d      	sub	sp, #52	; 0x34
   23f18:	4605      	mov	r5, r0
   23f1a:	9f16      	ldr	r7, [sp, #88]	; 0x58
    bool outer = p->cfg.outer;
   23f1c:	f897 8012 	ldrb.w	r8, [r7, #18]
    int32_t radius = p->cfg.radius;
   23f20:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
{
   23f24:	468b      	mov	fp, r1
   23f26:	461c      	mov	r4, r3
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   23f28:	f107 0108 	add.w	r1, r7, #8
    bool outer = p->cfg.outer;
   23f2c:	f008 0301 	and.w	r3, r8, #1
   23f30:	a80a      	add	r0, sp, #40	; 0x28
{
   23f32:	4691      	mov	r9, r2
    bool outer = p->cfg.outer;
   23f34:	9301      	str	r3, [sp, #4]
   23f36:	f7ff ffe7 	bl	23f08 <_lv_memcpy_small.constprop.0>
    if(outer == false) {
   23f3a:	9b01      	ldr	r3, [sp, #4]
   23f3c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
   23f40:	bbc3      	cbnz	r3, 23fb4 <lv_draw_mask_radius+0xa2>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   23f42:	454a      	cmp	r2, r9
   23f44:	dd01      	ble.n	23f4a <lv_draw_mask_radius+0x38>
                    return LV_DRAW_MASK_RES_TRANSP;
   23f46:	2000      	movs	r0, #0
   23f48:	e037      	b.n	23fba <lv_draw_mask_radius+0xa8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   23f4a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   23f4e:	454b      	cmp	r3, r9
   23f50:	dbf9      	blt.n	23f46 <lv_draw_mask_radius+0x34>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
   23f52:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
   23f56:	eb01 030a 	add.w	r3, r1, sl
   23f5a:	459b      	cmp	fp, r3
   23f5c:	eba1 060b 	sub.w	r6, r1, fp
   23f60:	db07      	blt.n	23f72 <lv_draw_mask_radius+0x60>
   23f62:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   23f66:	eb04 000b 	add.w	r0, r4, fp
   23f6a:	eba3 030a 	sub.w	r3, r3, sl
   23f6e:	4298      	cmp	r0, r3
   23f70:	dd09      	ble.n	23f86 <lv_draw_mask_radius+0x74>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
   23f72:	eb02 030a 	add.w	r3, r2, sl
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
   23f76:	4599      	cmp	r9, r3
   23f78:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
   23f7c:	db3a      	blt.n	23ff4 <lv_draw_mask_radius+0xe2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
   23f7e:	eba0 030a 	sub.w	r3, r0, sl
   23f82:	4599      	cmp	r9, r3
   23f84:	dc36      	bgt.n	23ff4 <lv_draw_mask_radius+0xe2>
        if(outer == false) {
   23f86:	9b01      	ldr	r3, [sp, #4]
   23f88:	bb23      	cbnz	r3, 23fd4 <lv_draw_mask_radius+0xc2>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
   23f8a:	42b4      	cmp	r4, r6
   23f8c:	dbdb      	blt.n	23f46 <lv_draw_mask_radius+0x34>
            if(last >= 0) {
   23f8e:	2e00      	cmp	r6, #0
   23f90:	db03      	blt.n	23f9a <lv_draw_mask_radius+0x88>
                _lv_memset_00(&mask_buf[0], last);
   23f92:	4631      	mov	r1, r6
   23f94:	4628      	mov	r0, r5
   23f96:	f7ff fe01 	bl	23b9c <_lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
   23f9a:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   23f9e:	3101      	adds	r1, #1
   23fa0:	eba1 000b 	sub.w	r0, r1, fp
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
   23fa4:	2800      	cmp	r0, #0
   23fa6:	ddce      	ble.n	23f46 <lv_draw_mask_radius+0x34>
            else if(first < len) {
   23fa8:	42a0      	cmp	r0, r4
   23faa:	da0e      	bge.n	23fca <lv_draw_mask_radius+0xb8>
                _lv_memset_00(&mask_buf[first], len - first);
   23fac:	1a61      	subs	r1, r4, r1
   23fae:	4459      	add	r1, fp
                    _lv_memset_00(&mask_buf[first], len_tmp);
   23fb0:	4428      	add	r0, r5
   23fb2:	e0b8      	b.n	24126 <lv_draw_mask_radius+0x214>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   23fb4:	454a      	cmp	r2, r9
   23fb6:	dd03      	ble.n	23fc0 <lv_draw_mask_radius+0xae>
            return LV_DRAW_MASK_RES_FULL_COVER;
   23fb8:	2001      	movs	r0, #1
}
   23fba:	b00d      	add	sp, #52	; 0x34
   23fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   23fc0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   23fc4:	454b      	cmp	r3, r9
   23fc6:	dac4      	bge.n	23f52 <lv_draw_mask_radius+0x40>
   23fc8:	e7f6      	b.n	23fb8 <lv_draw_mask_radius+0xa6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
   23fca:	b90e      	cbnz	r6, 23fd0 <lv_draw_mask_radius+0xbe>
   23fcc:	42a0      	cmp	r0, r4
   23fce:	d0f3      	beq.n	23fb8 <lv_draw_mask_radius+0xa6>
    return LV_DRAW_MASK_RES_CHANGED;
   23fd0:	2002      	movs	r0, #2
   23fd2:	e7f2      	b.n	23fba <lv_draw_mask_radius+0xa8>
            if(first < 0) first = 0;
   23fd4:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
            if(first <= len) {
   23fd8:	42a0      	cmp	r0, r4
   23fda:	dcf9      	bgt.n	23fd0 <lv_draw_mask_radius+0xbe>
                int32_t last =  rect.x2 - abs_x - first + 1;
   23fdc:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   23fe0:	3101      	adds	r1, #1
   23fe2:	eba1 010b 	sub.w	r1, r1, fp
                if(first + last > len) last = len - first;
   23fe6:	42a1      	cmp	r1, r4
                int32_t last =  rect.x2 - abs_x - first + 1;
   23fe8:	bfd4      	ite	le
   23fea:	1a09      	suble	r1, r1, r0
                if(first + last > len) last = len - first;
   23fec:	1a21      	subgt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   23fee:	2900      	cmp	r1, #0
   23ff0:	dbee      	blt.n	23fd0 <lv_draw_mask_radius+0xbe>
   23ff2:	e7dd      	b.n	23fb0 <lv_draw_mask_radius+0x9e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   23ff4:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
   23ff8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    abs_y -= rect.y1;
   23ffc:	eba9 0902 	sub.w	r9, r9, r2
   24000:	f10b 0b01 	add.w	fp, fp, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   24004:	3001      	adds	r0, #1
   24006:	fa0f f989 	sxth.w	r9, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2400a:	ebab 0b01 	sub.w	fp, fp, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2400e:	1a80      	subs	r0, r0, r2
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
   24010:	435b      	muls	r3, r3
    if(abs_y < radius || abs_y > h - radius - 1) {
   24012:	45ca      	cmp	sl, r9
    int32_t w = lv_area_get_width(&rect);
   24014:	fa0f fb8b 	sxth.w	fp, fp
    int32_t h = lv_area_get_height(&rect);
   24018:	b200      	sxth	r0, r0
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
   2401a:	9302      	str	r3, [sp, #8]
    if(abs_y < radius || abs_y > h - radius - 1) {
   2401c:	f300 8193 	bgt.w	24346 <lv_draw_mask_radius+0x434>
   24020:	1e43      	subs	r3, r0, #1
   24022:	eba3 030a 	sub.w	r3, r3, sl
   24026:	4599      	cmp	r9, r3
   24028:	ddd2      	ble.n	23fd0 <lv_draw_mask_radius+0xbe>
            y = radius - (h - abs_y) + 1;
   2402a:	eba9 0900 	sub.w	r9, r9, r0
            if((y - 1) == p->y_prev) {
   2402e:	697b      	ldr	r3, [r7, #20]
        if(radius <= 256) sqrt_mask = 0x800;
   24030:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
            y = radius - (h - abs_y) + 1;
   24034:	eb09 000a 	add.w	r0, r9, sl
        if(radius <= 256) sqrt_mask = 0x800;
   24038:	bfd4      	ite	le
   2403a:	f44f 6800 	movle.w	r8, #2048	; 0x800
   2403e:	f44f 4800 	movgt.w	r8, #32768	; 0x8000
            if((y - 1) == p->y_prev) {
   24042:	4298      	cmp	r0, r3
            y = radius - (h - abs_y) + 1;
   24044:	f100 0901 	add.w	r9, r0, #1
            if((y - 1) == p->y_prev) {
   24048:	d070      	beq.n	2412c <lv_draw_mask_radius+0x21a>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
   2404a:	9b02      	ldr	r3, [sp, #8]
   2404c:	4642      	mov	r2, r8
   2404e:	a907      	add	r1, sp, #28
   24050:	fb00 3010 	mls	r0, r0, r0, r3
   24054:	f001 fc3c 	bl	258d0 <_lv_sqrt>
   24058:	e06a      	b.n	24130 <lv_draw_mask_radius+0x21e>
                x0.i = p->y_prev_x.i;
   2405a:	69bb      	ldr	r3, [r7, #24]
   2405c:	9306      	str	r3, [sp, #24]
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
   2405e:	9802      	ldr	r0, [sp, #8]
   24060:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   24064:	fb03 0013 	mls	r0, r3, r3, r0
   24068:	4642      	mov	r2, r8
   2406a:	a907      	add	r1, sp, #28
   2406c:	9303      	str	r3, [sp, #12]
   2406e:	f001 fc2f 	bl	258d0 <_lv_sqrt>
            p->y_prev = y - 1;
   24072:	9b03      	ldr	r3, [sp, #12]
   24074:	617b      	str	r3, [r7, #20]
            p->y_prev_x.i = x1.i;
   24076:	9b07      	ldr	r3, [sp, #28]
            p->y_prev_x.i = x0.i;
   24078:	61bb      	str	r3, [r7, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
   2407a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2407e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   24082:	3b01      	subs	r3, #1
   24084:	4299      	cmp	r1, r3
   24086:	d107      	bne.n	24098 <lv_draw_mask_radius+0x186>
   24088:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2408c:	b923      	cbnz	r3, 24098 <lv_draw_mask_radius+0x186>
            x1.f = 0xFF;
   2408e:	23ff      	movs	r3, #255	; 0xff
            x1.i--;
   24090:	f8ad 101c 	strh.w	r1, [sp, #28]
            x1.f = 0xFF;
   24094:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(x0.i == x1.i) {
   24098:	eb06 070b 	add.w	r7, r6, fp
   2409c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   240a0:	ea6f 0b01 	mvn.w	fp, r1
   240a4:	44d3      	add	fp, sl
   240a6:	eba7 030b 	sub.w	r3, r7, fp
   240aa:	4288      	cmp	r0, r1
   240ac:	eb06 0a0b 	add.w	sl, r6, fp
   240b0:	9303      	str	r3, [sp, #12]
   240b2:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
   240b6:	d152      	bne.n	2415e <lv_draw_mask_radius+0x24c>
            lv_opa_t m = (x0.f + x1.f) >> 1;
   240b8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   240bc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
            if(outer) m = 255 - m;
   240c0:	9b01      	ldr	r3, [sp, #4]
            lv_opa_t m = (x0.f + x1.f) >> 1;
   240c2:	440a      	add	r2, r1
   240c4:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
   240c8:	b10b      	cbz	r3, 240ce <lv_draw_mask_radius+0x1bc>
   240ca:	43d2      	mvns	r2, r2
   240cc:	b2d2      	uxtb	r2, r2
            if(kl >= 0 && kl < len) {
   240ce:	f1ba 0f00 	cmp.w	sl, #0
   240d2:	db08      	blt.n	240e6 <lv_draw_mask_radius+0x1d4>
   240d4:	4554      	cmp	r4, sl
   240d6:	dd06      	ble.n	240e6 <lv_draw_mask_radius+0x1d4>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
   240d8:	f815 000a 	ldrb.w	r0, [r5, sl]
   240dc:	4611      	mov	r1, r2
   240de:	f7ff fd4f 	bl	23b80 <mask_mix>
   240e2:	f805 000a 	strb.w	r0, [r5, sl]
            if(kr >= 0 && kr < len) {
   240e6:	2e00      	cmp	r6, #0
   240e8:	db06      	blt.n	240f8 <lv_draw_mask_radius+0x1e6>
   240ea:	42b4      	cmp	r4, r6
   240ec:	dd04      	ble.n	240f8 <lv_draw_mask_radius+0x1e6>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
   240ee:	5da8      	ldrb	r0, [r5, r6]
   240f0:	4611      	mov	r1, r2
   240f2:	f7ff fd45 	bl	23b80 <mask_mix>
   240f6:	55a8      	strb	r0, [r5, r6]
            if(outer == false) {
   240f8:	9b01      	ldr	r3, [sp, #4]
   240fa:	bb23      	cbnz	r3, 24146 <lv_draw_mask_radius+0x234>
                if(kl > len)  {
   240fc:	4554      	cmp	r4, sl
   240fe:	f6ff af22 	blt.w	23f46 <lv_draw_mask_radius+0x34>
                if(kl >= 0) {
   24102:	f1ba 0f00 	cmp.w	sl, #0
   24106:	db03      	blt.n	24110 <lv_draw_mask_radius+0x1fe>
                    _lv_memset_00(&mask_buf[0], kl);
   24108:	4651      	mov	r1, sl
   2410a:	4628      	mov	r0, r5
   2410c:	f7ff fd46 	bl	23b9c <_lv_memset_00>
                if(kr < 0) {
   24110:	9b03      	ldr	r3, [sp, #12]
   24112:	2b00      	cmp	r3, #0
   24114:	f6ff af17 	blt.w	23f46 <lv_draw_mask_radius+0x34>
                if(kr <= len) {
   24118:	429c      	cmp	r4, r3
   2411a:	f6ff af59 	blt.w	23fd0 <lv_draw_mask_radius+0xbe>
                    _lv_memset_00(&mask_buf[kr], len - kr);
   2411e:	1be1      	subs	r1, r4, r7
   24120:	442b      	add	r3, r5
   24122:	4459      	add	r1, fp
   24124:	4618      	mov	r0, r3
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
   24126:	f7ff fd39 	bl	23b9c <_lv_memset_00>
   2412a:	e751      	b.n	23fd0 <lv_draw_mask_radius+0xbe>
                x1.i = p->y_prev_x.i;
   2412c:	69bb      	ldr	r3, [r7, #24]
   2412e:	9307      	str	r3, [sp, #28]
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
   24130:	9b02      	ldr	r3, [sp, #8]
   24132:	4642      	mov	r2, r8
   24134:	fb09 3019 	mls	r0, r9, r9, r3
   24138:	a906      	add	r1, sp, #24
   2413a:	f001 fbc9 	bl	258d0 <_lv_sqrt>
            p->y_prev_x.i = x0.i;
   2413e:	9b06      	ldr	r3, [sp, #24]
            p->y_prev = y;
   24140:	f8c7 9014 	str.w	r9, [r7, #20]
            p->y_prev_x.i = x0.i;
   24144:	e798      	b.n	24078 <lv_draw_mask_radius+0x166>
                kl++;
   24146:	f10a 0001 	add.w	r0, sl, #1
   2414a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
   2414e:	42b4      	cmp	r4, r6
                int32_t len_tmp = kr - first;
   24150:	bfac      	ite	ge
   24152:	1a31      	subge	r1, r6, r0
                if(len_tmp + first > len) len_tmp = len - first;
   24154:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   24156:	42a0      	cmp	r0, r4
   24158:	f6bf af3a 	bge.w	23fd0 <lv_draw_mask_radius+0xbe>
   2415c:	e747      	b.n	23fee <lv_draw_mask_radius+0xdc>
            if(outer) {
   2415e:	9b01      	ldr	r3, [sp, #4]
   24160:	b173      	cbz	r3, 24180 <lv_draw_mask_radius+0x26e>
                int32_t first = kl + 1;
   24162:	f10a 0001 	add.w	r0, sl, #1
                if(first < 0) first = 0;
   24166:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
   2416a:	42b4      	cmp	r4, r6
                int32_t len_tmp = kr - first;
   2416c:	bfac      	ite	ge
   2416e:	1a31      	subge	r1, r6, r0
                if(len_tmp + first > len) len_tmp = len - first;
   24170:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   24172:	42a0      	cmp	r0, r4
   24174:	da04      	bge.n	24180 <lv_draw_mask_radius+0x26e>
   24176:	2900      	cmp	r1, #0
   24178:	db02      	blt.n	24180 <lv_draw_mask_radius+0x26e>
                    _lv_memset_00(&mask_buf[first], len_tmp);
   2417a:	4428      	add	r0, r5
   2417c:	f7ff fd0e 	bl	23b9c <_lv_memset_00>
            uint32_t i = x0.i + 1;
   24180:	f8bd 7018 	ldrh.w	r7, [sp, #24]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
   24184:	9b02      	ldr	r3, [sp, #8]
   24186:	a908      	add	r1, sp, #32
   24188:	4642      	mov	r2, r8
   2418a:	fb07 3017 	mls	r0, r7, r7, r3
   2418e:	f001 fb9f 	bl	258d0 <_lv_sqrt>
            if(y_prev.f == 0) {
   24192:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            uint32_t i = x0.i + 1;
   24196:	f107 0b01 	add.w	fp, r7, #1
            if(y_prev.f == 0) {
   2419a:	b939      	cbnz	r1, 241ac <lv_draw_mask_radius+0x29a>
                y_prev.i--;
   2419c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   241a0:	3901      	subs	r1, #1
   241a2:	f8ad 1020 	strh.w	r1, [sp, #32]
                y_prev.f = 0xFF;
   241a6:	21ff      	movs	r1, #255	; 0xff
   241a8:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
   241ac:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   241b0:	4549      	cmp	r1, r9
   241b2:	db31      	blt.n	24218 <lv_draw_mask_radius+0x306>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
   241b4:	9b02      	ldr	r3, [sp, #8]
   241b6:	4642      	mov	r2, r8
   241b8:	a909      	add	r1, sp, #36	; 0x24
   241ba:	fb0b 301b 	mls	r0, fp, fp, r3
   241be:	f001 fb87 	bl	258d0 <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   241c2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   241c6:	f8bd 9026 	ldrh.w	r9, [sp, #38]	; 0x26
                if(outer) m = 255 - m;
   241ca:	9b01      	ldr	r3, [sp, #4]
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   241cc:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
   241d0:	f1c9 02ff 	rsb	r2, r9, #255	; 0xff
   241d4:	434a      	muls	r2, r1
   241d6:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(outer) m = 255 - m;
   241da:	b90b      	cbnz	r3, 241e0 <lv_draw_mask_radius+0x2ce>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   241dc:	43d2      	mvns	r2, r2
   241de:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   241e0:	f1ba 0f00 	cmp.w	sl, #0
   241e4:	db08      	blt.n	241f8 <lv_draw_mask_radius+0x2e6>
   241e6:	4554      	cmp	r4, sl
   241e8:	dd06      	ble.n	241f8 <lv_draw_mask_radius+0x2e6>
   241ea:	f815 000a 	ldrb.w	r0, [r5, sl]
   241ee:	4611      	mov	r1, r2
   241f0:	f7ff fcc6 	bl	23b80 <mask_mix>
   241f4:	f805 000a 	strb.w	r0, [r5, sl]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   241f8:	2e00      	cmp	r6, #0
   241fa:	db06      	blt.n	2420a <lv_draw_mask_radius+0x2f8>
   241fc:	42b4      	cmp	r4, r6
   241fe:	dd04      	ble.n	2420a <lv_draw_mask_radius+0x2f8>
   24200:	5da8      	ldrb	r0, [r5, r6]
   24202:	4611      	mov	r1, r2
   24204:	f7ff fcbc 	bl	23b80 <mask_mix>
   24208:	55a8      	strb	r0, [r5, r6]
                i++;
   2420a:	9e03      	ldr	r6, [sp, #12]
                y_prev.f = y_next.f;
   2420c:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
                kl--;
   24210:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
                i++;
   24214:	f107 0b02 	add.w	fp, r7, #2
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   24218:	f8bd 2020 	ldrh.w	r2, [sp, #32]
            for(; i <= x1.i; i++) {
   2421c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   24220:	9303      	str	r3, [sp, #12]
   24222:	f8bd c022 	ldrh.w	ip, [sp, #34]	; 0x22
   24226:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   2422a:	0113      	lsls	r3, r2, #4
   2422c:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   24230:	9304      	str	r3, [sp, #16]
   24232:	46b1      	mov	r9, r6
   24234:	465b      	mov	r3, fp
   24236:	4657      	mov	r7, sl
   24238:	2000      	movs	r0, #0
            for(; i <= x1.i; i++) {
   2423a:	9903      	ldr	r1, [sp, #12]
   2423c:	4299      	cmp	r1, r3
   2423e:	d24a      	bcs.n	242d6 <lv_draw_mask_radius+0x3c4>
   24240:	460f      	mov	r7, r1
   24242:	3701      	adds	r7, #1
   24244:	45bb      	cmp	fp, r7
   24246:	eba7 010b 	sub.w	r1, r7, fp
   2424a:	ebab 0e07 	sub.w	lr, fp, r7
   2424e:	bf84      	itt	hi
   24250:	2100      	movhi	r1, #0
   24252:	f04f 0e00 	movhi.w	lr, #0
   24256:	eb0e 030a 	add.w	r3, lr, sl
   2425a:	440e      	add	r6, r1
   2425c:	b128      	cbz	r0, 2426a <lv_draw_mask_radius+0x358>
   2425e:	f8ad c022 	strh.w	ip, [sp, #34]	; 0x22
   24262:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
   24266:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
            if(y_prev.f) {
   2426a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   2426e:	b1e2      	cbz	r2, 242aa <lv_draw_mask_radius+0x398>
                m = (y_prev.f * x1.f) >> 9;
   24270:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   24274:	434a      	muls	r2, r1
                if(outer) m = 255 - m;
   24276:	9901      	ldr	r1, [sp, #4]
                m = (y_prev.f * x1.f) >> 9;
   24278:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(outer) m = 255 - m;
   2427c:	b109      	cbz	r1, 24282 <lv_draw_mask_radius+0x370>
   2427e:	43d2      	mvns	r2, r2
   24280:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   24282:	2b00      	cmp	r3, #0
   24284:	db06      	blt.n	24294 <lv_draw_mask_radius+0x382>
   24286:	429c      	cmp	r4, r3
   24288:	dd04      	ble.n	24294 <lv_draw_mask_radius+0x382>
   2428a:	5ce8      	ldrb	r0, [r5, r3]
   2428c:	4611      	mov	r1, r2
   2428e:	f7ff fc77 	bl	23b80 <mask_mix>
   24292:	54e8      	strb	r0, [r5, r3]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   24294:	2e00      	cmp	r6, #0
   24296:	db06      	blt.n	242a6 <lv_draw_mask_radius+0x394>
   24298:	42b4      	cmp	r4, r6
   2429a:	dd04      	ble.n	242a6 <lv_draw_mask_radius+0x394>
   2429c:	5da8      	ldrb	r0, [r5, r6]
   2429e:	4611      	mov	r1, r2
   242a0:	f7ff fc6e 	bl	23b80 <mask_mix>
   242a4:	55a8      	strb	r0, [r5, r6]
                kl--;
   242a6:	3b01      	subs	r3, #1
                kr++;
   242a8:	3601      	adds	r6, #1
            if(outer == 0) {
   242aa:	9a01      	ldr	r2, [sp, #4]
   242ac:	2a00      	cmp	r2, #0
   242ae:	f47f ae8f 	bne.w	23fd0 <lv_draw_mask_radius+0xbe>
                kl++;
   242b2:	1c59      	adds	r1, r3, #1
                if(kl > len) {
   242b4:	428c      	cmp	r4, r1
   242b6:	f6ff ae46 	blt.w	23f46 <lv_draw_mask_radius+0x34>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
   242ba:	2900      	cmp	r1, #0
   242bc:	db02      	blt.n	242c4 <lv_draw_mask_radius+0x3b2>
   242be:	4628      	mov	r0, r5
   242c0:	f7ff fc6c 	bl	23b9c <_lv_memset_00>
                if(kr < 0) {
   242c4:	2e00      	cmp	r6, #0
   242c6:	f6ff ae3e 	blt.w	23f46 <lv_draw_mask_radius+0x34>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
   242ca:	42b4      	cmp	r4, r6
   242cc:	f77f ae80 	ble.w	23fd0 <lv_draw_mask_radius+0xbe>
   242d0:	1ba1      	subs	r1, r4, r6
   242d2:	19a8      	adds	r0, r5, r6
   242d4:	e727      	b.n	24126 <lv_draw_mask_radius+0x214>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   242d6:	9904      	ldr	r1, [sp, #16]
   242d8:	f3cc 120f 	ubfx	r2, ip, #4, #16
   242dc:	1851      	adds	r1, r2, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
   242de:	9a02      	ldr	r2, [sp, #8]
    uint32_t raw2 = raw * raw;
   242e0:	fb01 f001 	mul.w	r0, r1, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
   242e4:	fb03 2213 	mls	r2, r3, r3, r2

    int32_t d = x - raw2;
   242e8:	ebc0 2202 	rsb	r2, r0, r2, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
   242ec:	0048      	lsls	r0, r1, #1
   242ee:	fb92 f2f0 	sdiv	r2, r2, r0
   242f2:	440a      	add	r2, r1

    q->i = d >> 4;
   242f4:	f3c2 180f 	ubfx	r8, r2, #4, #16
    q->f = (d & 0xF) << 4;
   242f8:	0112      	lsls	r2, r2, #4
   242fa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
                if(outer) m = 255 - m;
   242fe:	9801      	ldr	r0, [sp, #4]
                m = (y_prev.f + y_next.f) >> 1;
   24300:	eb0c 0102 	add.w	r1, ip, r2
   24304:	f3c1 0147 	ubfx	r1, r1, #1, #8
                if(outer) m = 255 - m;
   24308:	b108      	cbz	r0, 2430e <lv_draw_mask_radius+0x3fc>
   2430a:	43c9      	mvns	r1, r1
   2430c:	b2c9      	uxtb	r1, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   2430e:	2f00      	cmp	r7, #0
   24310:	db07      	blt.n	24322 <lv_draw_mask_radius+0x410>
   24312:	42bc      	cmp	r4, r7
   24314:	dd05      	ble.n	24322 <lv_draw_mask_radius+0x410>
   24316:	5de8      	ldrb	r0, [r5, r7]
   24318:	9105      	str	r1, [sp, #20]
   2431a:	f7ff fc31 	bl	23b80 <mask_mix>
   2431e:	9905      	ldr	r1, [sp, #20]
   24320:	55e8      	strb	r0, [r5, r7]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   24322:	f1b9 0f00 	cmp.w	r9, #0
   24326:	db07      	blt.n	24338 <lv_draw_mask_radius+0x426>
   24328:	454c      	cmp	r4, r9
   2432a:	dd05      	ble.n	24338 <lv_draw_mask_radius+0x426>
   2432c:	f815 0009 	ldrb.w	r0, [r5, r9]
   24330:	f7ff fc26 	bl	23b80 <mask_mix>
   24334:	f805 0009 	strb.w	r0, [r5, r9]
                kl--;
   24338:	3f01      	subs	r7, #1
                kr++;
   2433a:	f109 0901 	add.w	r9, r9, #1
            for(; i <= x1.i; i++) {
   2433e:	3301      	adds	r3, #1
                y_prev.f = y_next.f;
   24340:	4694      	mov	ip, r2
            for(; i <= x1.i; i++) {
   24342:	2001      	movs	r0, #1
   24344:	e779      	b.n	2423a <lv_draw_mask_radius+0x328>
            if(y == p->y_prev) {
   24346:	697b      	ldr	r3, [r7, #20]
        if(radius <= 256) sqrt_mask = 0x800;
   24348:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
            y = radius - abs_y;
   2434c:	ebaa 0909 	sub.w	r9, sl, r9
        if(radius <= 256) sqrt_mask = 0x800;
   24350:	bfd4      	ite	le
   24352:	f44f 6800 	movle.w	r8, #2048	; 0x800
   24356:	f44f 4800 	movgt.w	r8, #32768	; 0x8000
            if(y == p->y_prev) {
   2435a:	454b      	cmp	r3, r9
   2435c:	f43f ae7d 	beq.w	2405a <lv_draw_mask_radius+0x148>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
   24360:	9b02      	ldr	r3, [sp, #8]
   24362:	4642      	mov	r2, r8
   24364:	a906      	add	r1, sp, #24
   24366:	fb09 3019 	mls	r0, r9, r9, r3
   2436a:	f001 fab1 	bl	258d0 <_lv_sqrt>
   2436e:	e676      	b.n	2405e <lv_draw_mask_radius+0x14c>

00024370 <grad_get>:
        _lv_mem_buf_release(mask_buf);
    }
}

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
   24370:	b570      	push	{r4, r5, r6, lr}
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
   24372:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
   24376:	fb05 f301 	mul.w	r3, r5, r1
    if(i <= min) return dsc->bg_color;
   2437a:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
   2437e:	ea4f 2623 	mov.w	r6, r3, asr #8
    if(i <= min) return dsc->bg_color;
   24382:	dc01      	bgt.n	24388 <grad_get+0x18>
   24384:	7880      	ldrb	r0, [r0, #2]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
   24386:	bd70      	pop	{r4, r5, r6, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
   24388:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   2438c:	fb01 f304 	mul.w	r3, r1, r4
    if(i >= max) return dsc->bg_grad_color;
   24390:	ebb2 2f23 	cmp.w	r2, r3, asr #8
   24394:	db01      	blt.n	2439a <grad_get+0x2a>
   24396:	78c0      	ldrb	r0, [r0, #3]
   24398:	e7f5      	b.n	24386 <grad_get+0x16>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
   2439a:	1b64      	subs	r4, r4, r5
    i -= min;
   2439c:	1b92      	subs	r2, r2, r6
   2439e:	78c3      	ldrb	r3, [r0, #3]
    d = (s * d) >> 8;
   243a0:	7880      	ldrb	r0, [r0, #2]
   243a2:	4361      	muls	r1, r4
    lv_opa_t mix = (i * 255) / d;
   243a4:	b212      	sxth	r2, r2
   243a6:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
   243aa:	1209      	asrs	r1, r1, #8
    lv_opa_t mix = (i * 255) / d;
   243ac:	fb92 f2f1 	sdiv	r2, r2, r1
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
   243b0:	f012 0f80 	tst.w	r2, #128	; 0x80
    return ret;
   243b4:	bf18      	it	ne
   243b6:	4618      	movne	r0, r3
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
   243b8:	e7e5      	b.n	24386 <grad_get+0x16>

000243ba <_lv_memset_ff>:
 * Wrapper for the standard memset with fixed 0xFF value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_ff(void * dst, size_t len)
{
   243ba:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   243bc:	21ff      	movs	r1, #255	; 0xff
   243be:	f002 bb65 	b.w	26a8c <memset>

000243c2 <lv_area_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   243c2:	4603      	mov	r3, r0
   243c4:	6808      	ldr	r0, [r1, #0]
   243c6:	6849      	ldr	r1, [r1, #4]
   243c8:	c303      	stmia	r3!, {r0, r1}
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
}
   243ca:	4770      	bx	lr

000243cc <lv_draw_rect>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   243cc:	88c3      	ldrh	r3, [r0, #6]
{
   243ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   243d2:	4615      	mov	r5, r2
   243d4:	8842      	ldrh	r2, [r0, #2]
   243d6:	3301      	adds	r3, #1
   243d8:	1a9b      	subs	r3, r3, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   243da:	b21b      	sxth	r3, r3
   243dc:	2b00      	cmp	r3, #0
{
   243de:	b0ab      	sub	sp, #172	; 0xac
   243e0:	4604      	mov	r4, r0
   243e2:	468a      	mov	sl, r1
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   243e4:	f340 8230 	ble.w	24848 <lv_draw_rect+0x47c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   243e8:	8883      	ldrh	r3, [r0, #4]
   243ea:	8802      	ldrh	r2, [r0, #0]
   243ec:	3301      	adds	r3, #1
   243ee:	1a9b      	subs	r3, r3, r2
   243f0:	b21b      	sxth	r3, r3
   243f2:	2b00      	cmp	r3, #0
   243f4:	f340 8228 	ble.w	24848 <lv_draw_rect+0x47c>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
   243f8:	7aab      	ldrb	r3, [r5, #10]
   243fa:	2b02      	cmp	r3, #2
   243fc:	f240 80ae 	bls.w	2455c <lv_draw_rect+0x190>
    lv_area_copy(&coords_bg, coords);
   24400:	4601      	mov	r1, r0
   24402:	a816      	add	r0, sp, #88	; 0x58
   24404:	f7ff ffdd 	bl	243c2 <lv_area_copy>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
   24408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2440c:	2b01      	cmp	r3, #1
   2440e:	dd24      	ble.n	2445a <lv_draw_rect+0x8e>
   24410:	7cab      	ldrb	r3, [r5, #18]
   24412:	2bfc      	cmp	r3, #252	; 0xfc
   24414:	d921      	bls.n	2445a <lv_draw_rect+0x8e>
   24416:	f9b5 3000 	ldrsh.w	r3, [r5]
   2441a:	b1f3      	cbz	r3, 2445a <lv_draw_rect+0x8e>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
   2441c:	8a2b      	ldrh	r3, [r5, #16]
   2441e:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
   24422:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
   24426:	f3c3 0180 	ubfx	r1, r3, #2, #1
   2442a:	4401      	add	r1, r0
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
   2442c:	f8bd 005a 	ldrh.w	r0, [sp, #90]	; 0x5a
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
   24430:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
   24434:	f3c3 0140 	ubfx	r1, r3, #1, #1
   24438:	4401      	add	r1, r0
   2443a:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
   2443e:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   24442:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   24446:	1acb      	subs	r3, r1, r3
   24448:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
   2444c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   24450:	f002 0201 	and.w	r2, r2, #1
   24454:	1a9b      	subs	r3, r3, r2
   24456:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    lv_opa_t opa = dsc->bg_opa;
   2445a:	7aab      	ldrb	r3, [r5, #10]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   2445c:	2bfe      	cmp	r3, #254	; 0xfe
   2445e:	bf28      	it	cs
   24460:	23ff      	movcs	r3, #255	; 0xff
   24462:	9305      	str	r3, [sp, #20]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   24464:	f7f2 fbc8 	bl	16bf8 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   24468:	f000 fe7a 	bl	25160 <lv_disp_get_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
   2446c:	4652      	mov	r2, sl
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   2446e:	9006      	str	r0, [sp, #24]
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
   24470:	a916      	add	r1, sp, #88	; 0x58
   24472:	a818      	add	r0, sp, #96	; 0x60
   24474:	f000 fedf 	bl	25236 <_lv_area_intersect>
    if(is_common == false) return;
   24478:	2800      	cmp	r0, #0
   2447a:	d06f      	beq.n	2455c <lv_draw_rect+0x190>
    draw_area.x1 -= disp_area->x1;
   2447c:	9b06      	ldr	r3, [sp, #24]
   2447e:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
   24482:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
    draw_area.y1 -= disp_area->y1;
   24486:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
    draw_area.x1 -= disp_area->x1;
   2448a:	1a83      	subs	r3, r0, r2
   2448c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
   24490:	9b06      	ldr	r3, [sp, #24]
   24492:	f9b3 6012 	ldrsh.w	r6, [r3, #18]
    draw_area.x2 -= disp_area->x1;
   24496:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
   2449a:	1a9a      	subs	r2, r3, r2
   2449c:	3301      	adds	r3, #1
   2449e:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
   244a2:	1a1b      	subs	r3, r3, r0
    draw_area.y2 -= disp_area->y1;
   244a4:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
   244a8:	b21b      	sxth	r3, r3
    draw_area.y1 -= disp_area->y1;
   244aa:	1b89      	subs	r1, r1, r6
    draw_area.y2 -= disp_area->y1;
   244ac:	1b92      	subs	r2, r2, r6
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   244ae:	4618      	mov	r0, r3
    draw_area.y1 -= disp_area->y1;
   244b0:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
    draw_area.y2 -= disp_area->y1;
   244b4:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
   244b8:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   244ba:	f7f4 fbf7 	bl	18cac <_lv_mem_buf_get>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
   244be:	78eb      	ldrb	r3, [r5, #3]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
   244c0:	792e      	ldrb	r6, [r5, #4]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
   244c2:	78aa      	ldrb	r2, [r5, #2]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   244c4:	4680      	mov	r8, r0
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
   244c6:	429a      	cmp	r2, r3
   244c8:	bf08      	it	eq
   244ca:	2600      	moveq	r6, #0
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
   244cc:	f7f3 ff40 	bl	18350 <lv_draw_mask_get_cnt>
   244d0:	9010      	str	r0, [sp, #64]	; 0x40
   244d2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   244d6:	9311      	str	r3, [sp, #68]	; 0x44
    if(other_mask_cnt) simple_mode = false;
   244d8:	2b00      	cmp	r3, #0
   244da:	f040 81b8 	bne.w	2484e <lv_draw_rect+0x482>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
   244de:	1eb3      	subs	r3, r6, #2
   244e0:	bf18      	it	ne
   244e2:	2301      	movne	r3, #1
   244e4:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   244e8:	f8bd b05e 	ldrh.w	fp, [sp, #94]	; 0x5e
    if(other_mask_cnt) simple_mode = false;
   244ec:	930a      	str	r3, [sp, #40]	; 0x28
   244ee:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   244f2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   244f6:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   244f8:	f10b 0b01 	add.w	fp, fp, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   244fc:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   244fe:	ebab 0b02 	sub.w	fp, fp, r2
    int32_t coords_h = lv_area_get_height(&coords_bg);
   24502:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   24506:	b23f      	sxth	r7, r7
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
   24508:	45bb      	cmp	fp, r7
    int32_t rout = dsc->radius;
   2450a:	f9b5 3000 	ldrsh.w	r3, [r5]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
   2450e:	bfa8      	it	ge
   24510:	46bb      	movge	fp, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
   24512:	ea4f 0b6b 	mov.w	fp, fp, asr #1
   24516:	459b      	cmp	fp, r3
   24518:	bfa8      	it	ge
   2451a:	469b      	movge	fp, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
   2451c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2451e:	2b00      	cmp	r3, #0
   24520:	f000 8197 	beq.w	24852 <lv_draw_rect+0x486>
   24524:	f1bb 0f00 	cmp.w	fp, #0
   24528:	f040 8193 	bne.w	24852 <lv_draw_rect+0x486>
   2452c:	2e00      	cmp	r6, #0
   2452e:	f040 823c 	bne.w	249aa <lv_draw_rect+0x5de>
        _lv_blend_fill(clip, &coords_bg,
   24532:	7aeb      	ldrb	r3, [r5, #11]
   24534:	9302      	str	r3, [sp, #8]
   24536:	9b05      	ldr	r3, [sp, #20]
   24538:	9301      	str	r3, [sp, #4]
   2453a:	2301      	movs	r3, #1
   2453c:	9300      	str	r3, [sp, #0]
   2453e:	78aa      	ldrb	r2, [r5, #2]
   24540:	4633      	mov	r3, r6
   24542:	a916      	add	r1, sp, #88	; 0x58
   24544:	4650      	mov	r0, sl
   24546:	f7fe fc65 	bl	22e14 <_lv_blend_fill>
    int16_t mask_rout_id = LV_MASK_ID_INV;
   2454a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2454e:	930d      	str	r3, [sp, #52]	; 0x34
    lv_draw_mask_remove_id(mask_rout_id);
   24550:	980d      	ldr	r0, [sp, #52]	; 0x34
   24552:	f7f3 fed5 	bl	18300 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
   24556:	4640      	mov	r0, r8
   24558:	f7f4 fc0a 	bl	18d70 <_lv_mem_buf_release>
    if(dsc->border_opa <= LV_OPA_MIN) return;
   2455c:	7cab      	ldrb	r3, [r5, #18]
   2455e:	2b02      	cmp	r3, #2
   24560:	f240 8172 	bls.w	24848 <lv_draw_rect+0x47c>
    if(dsc->border_width == 0) return;
   24564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   24568:	2b00      	cmp	r3, #0
   2456a:	f000 816d 	beq.w	24848 <lv_draw_rect+0x47c>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
   2456e:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
   24572:	2b00      	cmp	r3, #0
   24574:	f000 8168 	beq.w	24848 <lv_draw_rect+0x47c>
    if(dsc->border_post) return;
   24578:	7d2b      	ldrb	r3, [r5, #20]
   2457a:	07d9      	lsls	r1, r3, #31
   2457c:	f100 8164 	bmi.w	24848 <lv_draw_rect+0x47c>
   24580:	88a3      	ldrh	r3, [r4, #4]
   24582:	8827      	ldrh	r7, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   24584:	88e2      	ldrh	r2, [r4, #6]
    int32_t rout = dsc->radius;
   24586:	f9b5 8000 	ldrsh.w	r8, [r5]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2458a:	3301      	adds	r3, #1
   2458c:	1bdb      	subs	r3, r3, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2458e:	8867      	ldrh	r7, [r4, #2]
   24590:	3201      	adds	r2, #1
   24592:	1bd2      	subs	r2, r2, r7
    int32_t coords_h = lv_area_get_height(coords);
   24594:	b217      	sxth	r7, r2
    int32_t coords_w = lv_area_get_width(coords);
   24596:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
   24598:	42bb      	cmp	r3, r7
   2459a:	bfa8      	it	ge
   2459c:	463b      	movge	r3, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
   2459e:	105f      	asrs	r7, r3, #1
   245a0:	45b8      	cmp	r8, r7
    lv_area_copy(&area_inner, coords);
   245a2:	4621      	mov	r1, r4
   245a4:	a814      	add	r0, sp, #80	; 0x50
   245a6:	bfa8      	it	ge
   245a8:	46b8      	movge	r8, r7
   245aa:	f7ff ff0a 	bl	243c2 <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
   245ae:	8a28      	ldrh	r0, [r5, #16]
   245b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   245b4:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
   245b8:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
   245bc:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
   245c0:	f010 0f04 	tst.w	r0, #4
   245c4:	bf03      	ittte	eq
   245c6:	89ea      	ldrheq	r2, [r5, #14]
   245c8:	4442      	addeq	r2, r8
   245ca:	4252      	negeq	r2, r2
   245cc:	461a      	movne	r2, r3
   245ce:	bf08      	it	eq
   245d0:	b212      	sxtheq	r2, r2
   245d2:	4432      	add	r2, r6
   245d4:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
   245d8:	0702      	lsls	r2, r0, #28
   245da:	bf5b      	ittet	pl
   245dc:	eb03 0208 	addpl.w	r2, r3, r8
   245e0:	4252      	negpl	r2, r2
   245e2:	461a      	movmi	r2, r3
   245e4:	b212      	sxthpl	r2, r2
   245e6:	1aba      	subs	r2, r7, r2
   245e8:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   245ec:	0782      	lsls	r2, r0, #30
   245ee:	bf5c      	itt	pl
   245f0:	eb03 0208 	addpl.w	r2, r3, r8
   245f4:	4252      	negpl	r2, r2
   245f6:	f9bd 7052 	ldrsh.w	r7, [sp, #82]	; 0x52
   245fa:	bf4c      	ite	mi
   245fc:	461a      	movmi	r2, r3
   245fe:	b212      	sxthpl	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   24600:	07c0      	lsls	r0, r0, #31
   24602:	461e      	mov	r6, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   24604:	443a      	add	r2, r7
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   24606:	bf5c      	itt	pl
   24608:	4443      	addpl	r3, r8
   2460a:	425b      	negpl	r3, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   2460c:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   24610:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
   24614:	bf58      	it	pl
   24616:	b21e      	sxthpl	r6, r3
   24618:	1b93      	subs	r3, r2, r6
   2461a:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
   2461e:	290f      	cmp	r1, #15
   24620:	7cab      	ldrb	r3, [r5, #18]
   24622:	9305      	str	r3, [sp, #20]
   24624:	f040 83e6 	bne.w	24df4 <lv_draw_rect+0xa28>
        draw_full_border(&area_inner, coords, clip, dsc->radius, dsc->border_color, dsc->border_opa, dsc->border_blend_mode);
   24628:	f9b5 3000 	ldrsh.w	r3, [r5]
   2462c:	9308      	str	r3, [sp, #32]
   2462e:	7ceb      	ldrb	r3, [r5, #19]
   24630:	9306      	str	r3, [sp, #24]
   24632:	7b2b      	ldrb	r3, [r5, #12]
   24634:	930c      	str	r3, [sp, #48]	; 0x30
   24636:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   2463a:	f7f3 fe89 	bl	18350 <lv_draw_mask_get_cnt>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2463e:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
   24642:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   24644:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
   24648:	930b      	str	r3, [sp, #44]	; 0x2c
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
   2464a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   2464e:	930a      	str	r3, [sp, #40]	; 0x28
   24650:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   24654:	930f      	str	r3, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   24656:	f9bd 6054 	ldrsh.w	r6, [sp, #84]	; 0x54
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2465a:	f9bd 5056 	ldrsh.w	r5, [sp, #86]	; 0x56
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2465e:	f9b4 9000 	ldrsh.w	r9, [r4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   24662:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   24666:	900d      	str	r0, [sp, #52]	; 0x34
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
    if(rout > short_side >> 1) rout = short_side >> 1;

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   24668:	f7f2 fac6 	bl	16bf8 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   2466c:	f000 fd78 	bl	25160 <lv_disp_get_buf>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
   24670:	4652      	mov	r2, sl
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   24672:	4683      	mov	fp, r0
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
   24674:	4621      	mov	r1, r4
   24676:	a816      	add	r0, sp, #88	; 0x58
   24678:	f000 fddd 	bl	25236 <_lv_area_intersect>
    if(is_common == false) return;
   2467c:	2800      	cmp	r0, #0
   2467e:	f000 80e3 	beq.w	24848 <lv_draw_rect+0x47c>
   24682:	1c72      	adds	r2, r6, #1
   24684:	b213      	sxth	r3, r2
   24686:	930e      	str	r3, [sp, #56]	; 0x38
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
   24688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2468a:	9909      	ldr	r1, [sp, #36]	; 0x24
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
    draw_area.y1 -= disp_area->y1;
   2468c:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
   24690:	1b9e      	subs	r6, r3, r6
   24692:	b233      	sxth	r3, r6
   24694:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   24696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24698:	1c6a      	adds	r2, r5, #1
   2469a:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2469c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2469e:	1a59      	subs	r1, r3, r1
    int32_t inner_h = lv_area_get_height(area_inner);
   246a0:	b212      	sxth	r2, r2
    int32_t inner_w = lv_area_get_width(area_inner);
   246a2:	b209      	sxth	r1, r1
    int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
   246a4:	428a      	cmp	r2, r1
   246a6:	9b08      	ldr	r3, [sp, #32]
   246a8:	bfa8      	it	ge
   246aa:	460a      	movge	r2, r1
    if(rin > short_side >> 1) rin = short_side >> 1;
   246ac:	1052      	asrs	r2, r2, #1
   246ae:	4293      	cmp	r3, r2
   246b0:	bfa8      	it	ge
   246b2:	4613      	movge	r3, r2
    int32_t rout = rin + border_width;
   246b4:	fa03 f686 	sxtah	r6, r3, r6
   246b8:	461d      	mov	r5, r3
   246ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    draw_area.x1 -= disp_area->x1;
   246bc:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
   246c0:	1c5a      	adds	r2, r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   246c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   246c4:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   246c6:	eba2 0909 	sub.w	r9, r2, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   246ca:	1afb      	subs	r3, r7, r3
    int32_t coords_out_w = lv_area_get_width(area_outer);
   246cc:	fa0f f989 	sxth.w	r9, r9
    int32_t coords_out_h = lv_area_get_height(area_outer);
   246d0:	b21b      	sxth	r3, r3
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
   246d2:	4599      	cmp	r9, r3
   246d4:	bfa8      	it	ge
   246d6:	4699      	movge	r9, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
   246d8:	ea4f 0969 	mov.w	r9, r9, asr #1
   246dc:	45b1      	cmp	r9, r6
    draw_area.x1 -= disp_area->x1;
   246de:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   246e2:	464b      	mov	r3, r9
   246e4:	bfa8      	it	ge
   246e6:	4633      	movge	r3, r6
   246e8:	9308      	str	r3, [sp, #32]
   246ea:	1a8b      	subs	r3, r1, r2
   246ec:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    draw_area.y1 -= disp_area->y1;
   246f0:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
   246f4:	1a1b      	subs	r3, r3, r0
   246f6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
   246fa:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
   246fe:	1a9a      	subs	r2, r3, r2
   24700:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    draw_area.y2 -= disp_area->y1;
   24704:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   24708:	1c5e      	adds	r6, r3, #1
   2470a:	1a12      	subs	r2, r2, r0

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
   2470c:	2301      	movs	r3, #1
    draw_area.y2 -= disp_area->y1;
   2470e:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
   24712:	1a76      	subs	r6, r6, r1
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
   24714:	b22a      	sxth	r2, r5
   24716:	a914      	add	r1, sp, #80	; 0x50
   24718:	a81c      	add	r0, sp, #112	; 0x70
   2471a:	f7f3 feab 	bl	18474 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   2471e:	2100      	movs	r1, #0
   24720:	a81c      	add	r0, sp, #112	; 0x70
   24722:	f7f3 fdb5 	bl	18290 <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
   24726:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   2472a:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
   2472c:	2300      	movs	r3, #0
   2472e:	464a      	mov	r2, r9
   24730:	4621      	mov	r1, r4
   24732:	a823      	add	r0, sp, #140	; 0x8c
   24734:	f7f3 fe9e 	bl	18474 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   24738:	2100      	movs	r1, #0
   2473a:	a823      	add	r0, sp, #140	; 0x8c
   2473c:	f7f3 fda8 	bl	18290 <lv_draw_mask_add>
   24740:	b236      	sxth	r6, r6
   24742:	9010      	str	r0, [sp, #64]	; 0x40

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   24744:	4630      	mov	r0, r6
   24746:	f7f4 fab1 	bl	18cac <_lv_mem_buf_get>
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
   2474a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   2474c:	4605      	mov	r5, r0
    if(simple_mode) {
   2474e:	2b00      	cmp	r3, #0
   24750:	f040 8312 	bne.w	24d78 <lv_draw_rect+0x9ac>
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
   24754:	9b07      	ldr	r3, [sp, #28]
   24756:	9a08      	ldr	r2, [sp, #32]
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x2;
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   24758:	f9bd 705a 	ldrsh.w	r7, [sp, #90]	; 0x5a
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
   2475c:	3b01      	subs	r3, #1
   2475e:	4293      	cmp	r3, r2
   24760:	bfb8      	it	lt
   24762:	4613      	movlt	r3, r2
   24764:	9309      	str	r3, [sp, #36]	; 0x24
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
   24766:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   2476a:	9909      	ldr	r1, [sp, #36]	; 0x24
   2476c:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
   24770:	440a      	add	r2, r1
   24772:	1ad2      	subs	r2, r2, r3
   24774:	920b      	str	r2, [sp, #44]	; 0x2c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   24776:	443b      	add	r3, r7
        fill_area.x1 = area_outer->x1;
   24778:	8822      	ldrh	r2, [r4, #0]
   2477a:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   2477e:	b21b      	sxth	r3, r3
        fill_area.x2 = area_outer->x2;
   24780:	88a2      	ldrh	r2, [r4, #4]
   24782:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   24786:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = fill_area.y1;
   2478a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
   2478e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24790:	42bb      	cmp	r3, r7
   24792:	f280 81ff 	bge.w	24b94 <lv_draw_rect+0x7c8>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
   24796:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24798:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
   2479c:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
   247a0:	1abf      	subs	r7, r7, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
   247a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
   247a4:	1aff      	subs	r7, r7, r3
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
   247a6:	42ba      	cmp	r2, r7
   247a8:	bfa4      	itt	ge
   247aa:	4617      	movge	r7, r2
   247ac:	3701      	addge	r7, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
   247ae:	443b      	add	r3, r7
   247b0:	b21b      	sxth	r3, r3
   247b2:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = fill_area.y1;
   247b6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
   247ba:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   247be:	429f      	cmp	r7, r3
   247c0:	f340 8261 	ble.w	24c86 <lv_draw_rect+0x8ba>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
   247c4:	8863      	ldrh	r3, [r4, #2]
   247c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   247c8:	3301      	adds	r3, #1
   247ca:	fa03 f382 	sxtah	r3, r3, r2
   247ce:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = area_outer->y2 - corner_size - 1;
   247d2:	88e3      	ldrh	r3, [r4, #6]
   247d4:	3b01      	subs	r3, #1
   247d6:	eba3 0b02 	sub.w	fp, r3, r2

        fill_area.x1 = area_outer->x1;
   247da:	f9b4 3000 	ldrsh.w	r3, [r4]
        fill_area.x2 = area_outer->x1 + border_width - 1;
   247de:	9a07      	ldr	r2, [sp, #28]
        fill_area.x1 = area_outer->x1;
   247e0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        fill_area.x2 = area_outer->x1 + border_width - 1;
   247e4:	3b01      	subs	r3, #1
   247e6:	441a      	add	r2, r3
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   247e8:	9b06      	ldr	r3, [sp, #24]
   247ea:	9302      	str	r3, [sp, #8]
   247ec:	2601      	movs	r6, #1
   247ee:	9b05      	ldr	r3, [sp, #20]
        fill_area.x2 = area_outer->x1 + border_width - 1;
   247f0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   247f4:	9301      	str	r3, [sp, #4]
   247f6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   247fa:	9600      	str	r6, [sp, #0]
   247fc:	2300      	movs	r3, #0
   247fe:	a918      	add	r1, sp, #96	; 0x60
   24800:	4650      	mov	r0, sl
        fill_area.y2 = area_outer->y2 - corner_size - 1;
   24802:	f8ad b066 	strh.w	fp, [sp, #102]	; 0x66
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   24806:	f7fe fb05 	bl	22e14 <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
   2480a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   2480e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24810:	990a      	ldr	r1, [sp, #40]	; 0x28
        fill_area.x2 = area_outer->x2;
   24812:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        fill_area.x1 = area_outer->x2 - border_width + 1;
   24816:	4413      	add	r3, r2
   24818:	1a5b      	subs	r3, r3, r1
   2481a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   2481e:	9b06      	ldr	r3, [sp, #24]
   24820:	9302      	str	r3, [sp, #8]
   24822:	9b05      	ldr	r3, [sp, #20]
   24824:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   24828:	e9cd 6300 	strd	r6, r3, [sp]
   2482c:	a918      	add	r1, sp, #96	; 0x60
   2482e:	2300      	movs	r3, #0
   24830:	4650      	mov	r0, sl
   24832:	f7fe faef 	bl	22e14 <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
   24836:	980f      	ldr	r0, [sp, #60]	; 0x3c
   24838:	f7f3 fd62 	bl	18300 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
   2483c:	9810      	ldr	r0, [sp, #64]	; 0x40
   2483e:	f7f3 fd5f 	bl	18300 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
   24842:	4628      	mov	r0, r5
        _lv_mem_buf_release(mask_buf);
   24844:	f7f4 fa94 	bl	18d70 <_lv_mem_buf_release>
}
   24848:	b02b      	add	sp, #172	; 0xac
   2484a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(other_mask_cnt) simple_mode = false;
   2484e:	2300      	movs	r3, #0
   24850:	e648      	b.n	244e4 <lv_draw_rect+0x118>
        if(rout > 0) {
   24852:	f1bb 0f00 	cmp.w	fp, #0
   24856:	f340 80a8 	ble.w	249aa <lv_draw_rect+0x5de>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
   2485a:	2300      	movs	r3, #0
   2485c:	465a      	mov	r2, fp
   2485e:	a916      	add	r1, sp, #88	; 0x58
   24860:	a823      	add	r0, sp, #140	; 0x8c
   24862:	f7f3 fe07 	bl	18474 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   24866:	2100      	movs	r1, #0
   24868:	a823      	add	r0, sp, #140	; 0x8c
   2486a:	f7f3 fd11 	bl	18290 <lv_draw_mask_add>
   2486e:	900d      	str	r0, [sp, #52]	; 0x34
        lv_color_t grad_color = dsc->bg_color;
   24870:	78ab      	ldrb	r3, [r5, #2]
   24872:	f88d 3020 	strb.w	r3, [sp, #32]
        if(grad_dir == LV_GRAD_DIR_HOR) {
   24876:	2e02      	cmp	r6, #2
   24878:	f040 80a7 	bne.w	249ca <lv_draw_rect+0x5fe>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
   2487c:	4638      	mov	r0, r7
   2487e:	f7f4 fa15 	bl	18cac <_lv_mem_buf_get>
            for(i = 0; i < coords_w; i++) {
   24882:	f04f 0900 	mov.w	r9, #0
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
   24886:	900b      	str	r0, [sp, #44]	; 0x2c
            for(i = 0; i < coords_w; i++) {
   24888:	454f      	cmp	r7, r9
   2488a:	f300 8092 	bgt.w	249b2 <lv_draw_rect+0x5e6>
   2488e:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
   24892:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
        fill_area.x1 = coords_bg.x1;
   24896:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
   2489a:	1c4a      	adds	r2, r1, #1
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
   2489c:	f06f 0301 	mvn.w	r3, #1
   248a0:	1a12      	subs	r2, r2, r0
   248a2:	fb03 f30b 	mul.w	r3, r3, fp
   248a6:	fa03 f382 	sxtah	r3, r3, r2
   248aa:	930f      	str	r3, [sp, #60]	; 0x3c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   248ac:	9b06      	ldr	r3, [sp, #24]
   248ae:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   248b2:	8a5b      	ldrh	r3, [r3, #18]
        fill_area.x2 = coords_bg.x2;
   248b4:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   248b8:	4413      	add	r3, r2
   248ba:	b21b      	sxth	r3, r3
   248bc:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        fill_area.y2 = fill_area.y1;
   248c0:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   248c4:	fa0f f38b 	sxth.w	r3, fp
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   248c8:	9207      	str	r2, [sp, #28]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   248ca:	930e      	str	r3, [sp, #56]	; 0x38
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   248cc:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   248d0:	9a07      	ldr	r2, [sp, #28]
   248d2:	429a      	cmp	r2, r3
   248d4:	dd7c      	ble.n	249d0 <lv_draw_rect+0x604>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
   248d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   248d8:	4333      	orrs	r3, r6
   248da:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   248de:	d15c      	bne.n	2499a <lv_draw_rect+0x5ce>
   248e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   248e2:	2a32      	cmp	r2, #50	; 0x32
   248e4:	dd59      	ble.n	2499a <lv_draw_rect+0x5ce>
            fill_area.x1 = coords_bg.x1 + rout;
   248e6:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   248ea:	445a      	add	r2, fp
   248ec:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            fill_area.x2 = coords_bg.x2 - rout;
   248f0:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
   248f4:	eba2 020b 	sub.w	r2, r2, fp
   248f8:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            fill_area.y1 = coords_bg.y1;
   248fc:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
   24900:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            fill_area.x1 = coords_bg.x1 + rout;
   24904:	fa0f f78b 	sxth.w	r7, fp
            fill_area.y2 = coords_bg.y1 + rout;
   24908:	4493      	add	fp, r2
            _lv_blend_fill(clip, &fill_area,
   2490a:	7aea      	ldrb	r2, [r5, #11]
   2490c:	9202      	str	r2, [sp, #8]
   2490e:	9a05      	ldr	r2, [sp, #20]
   24910:	9201      	str	r2, [sp, #4]
   24912:	2201      	movs	r2, #1
   24914:	9200      	str	r2, [sp, #0]
   24916:	78aa      	ldrb	r2, [r5, #2]
            fill_area.y2 = coords_bg.y1 + rout;
   24918:	f8ad b06e 	strh.w	fp, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
   2491c:	a91a      	add	r1, sp, #104	; 0x68
   2491e:	4650      	mov	r0, sl
   24920:	f7fe fa78 	bl	22e14 <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
   24924:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   24928:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2 = coords_bg.y2;
   2492c:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
            fill_area.y1 = coords_bg.y2 - rout;
   24930:	1bca      	subs	r2, r1, r7
   24932:	b212      	sxth	r2, r2
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   24934:	429a      	cmp	r2, r3
   24936:	bfd8      	it	le
   24938:	3301      	addle	r3, #1
            fill_area.y1 = coords_bg.y2 - rout;
   2493a:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   2493e:	bfd8      	it	le
   24940:	f8ad 306a 	strhle.w	r3, [sp, #106]	; 0x6a
            _lv_blend_fill(clip, &fill_area,
   24944:	7aeb      	ldrb	r3, [r5, #11]
   24946:	9302      	str	r3, [sp, #8]
   24948:	2601      	movs	r6, #1
   2494a:	9b05      	ldr	r3, [sp, #20]
   2494c:	9301      	str	r3, [sp, #4]
   2494e:	9600      	str	r6, [sp, #0]
   24950:	78aa      	ldrb	r2, [r5, #2]
   24952:	2300      	movs	r3, #0
   24954:	a91a      	add	r1, sp, #104	; 0x68
   24956:	4650      	mov	r0, sl
   24958:	f7fe fa5c 	bl	22e14 <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
   2495c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   24960:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            fill_area.x2 = coords_bg.x2;
   24964:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   24968:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            fill_area.y1 = coords_bg.y1 + rout + 1;
   2496c:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
   24970:	4433      	add	r3, r6
   24972:	443b      	add	r3, r7
   24974:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2 = coords_bg.y2 - rout - 1;
   24978:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   2497c:	3b01      	subs	r3, #1
   2497e:	1bdf      	subs	r7, r3, r7
            _lv_blend_fill(clip, &fill_area,
   24980:	7aeb      	ldrb	r3, [r5, #11]
   24982:	9302      	str	r3, [sp, #8]
   24984:	9b05      	ldr	r3, [sp, #20]
            fill_area.y2 = coords_bg.y2 - rout - 1;
   24986:	f8ad 706e 	strh.w	r7, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
   2498a:	e9cd 6300 	strd	r6, r3, [sp]
   2498e:	a91a      	add	r1, sp, #104	; 0x68
   24990:	78aa      	ldrb	r2, [r5, #2]
   24992:	2300      	movs	r3, #0
   24994:	4650      	mov	r0, sl
   24996:	f7fe fa3d 	bl	22e14 <_lv_blend_fill>
        if(grad_map) _lv_mem_buf_release(grad_map);
   2499a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2499c:	2b00      	cmp	r3, #0
   2499e:	f43f add7 	beq.w	24550 <lv_draw_rect+0x184>
   249a2:	4618      	mov	r0, r3
   249a4:	f7f4 f9e4 	bl	18d70 <_lv_mem_buf_release>
   249a8:	e5d2      	b.n	24550 <lv_draw_rect+0x184>
    int16_t mask_rout_id = LV_MASK_ID_INV;
   249aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   249ae:	930d      	str	r3, [sp, #52]	; 0x34
   249b0:	e75e      	b.n	24870 <lv_draw_rect+0x4a4>
                grad_map[i] = grad_get(dsc, coords_w, i);
   249b2:	fa0f f289 	sxth.w	r2, r9
   249b6:	4639      	mov	r1, r7
   249b8:	4628      	mov	r0, r5
   249ba:	f7ff fcd9 	bl	24370 <grad_get>
   249be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   249c0:	f803 0009 	strb.w	r0, [r3, r9]
            for(i = 0; i < coords_w; i++) {
   249c4:	f109 0901 	add.w	r9, r9, #1
   249c8:	e75e      	b.n	24888 <lv_draw_rect+0x4bc>
        lv_color_t * grad_map = NULL;
   249ca:	2300      	movs	r3, #0
   249cc:	930b      	str	r3, [sp, #44]	; 0x2c
   249ce:	e75e      	b.n	2488e <lv_draw_rect+0x4c2>
            int32_t y = h + vdb->area.y1;
   249d0:	9b06      	ldr	r3, [sp, #24]
   249d2:	9a07      	ldr	r2, [sp, #28]
   249d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
   249d8:	4413      	add	r3, r2
   249da:	930c      	str	r3, [sp, #48]	; 0x30
            if(y > coords_bg.y1 + rout + 1 &&
   249dc:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
   249e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   249e2:	3301      	adds	r3, #1
   249e4:	445b      	add	r3, fp
   249e6:	429a      	cmp	r2, r3
   249e8:	dd0a      	ble.n	24a00 <lv_draw_rect+0x634>
               y < coords_bg.y2 - rout - 1) {
   249ea:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   249ee:	3b01      	subs	r3, #1
   249f0:	eba3 030b 	sub.w	r3, r3, fp
            if(y > coords_bg.y1 + rout + 1 &&
   249f4:	429a      	cmp	r2, r3
   249f6:	da03      	bge.n	24a00 <lv_draw_rect+0x634>
                if(simple_mode == false) {
   249f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   249fa:	2b00      	cmp	r3, #0
   249fc:	f040 82ea 	bne.w	24fd4 <lv_draw_rect+0xc08>
__ssp_bos_icheck3(memset, void *, int)
   24a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24a02:	9905      	ldr	r1, [sp, #20]
   24a04:	4640      	mov	r0, r8
   24a06:	f002 f841 	bl	26a8c <memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   24a0a:	9b06      	ldr	r3, [sp, #24]
   24a0c:	8a5a      	ldrh	r2, [r3, #18]
   24a0e:	9b07      	ldr	r3, [sp, #28]
   24a10:	441a      	add	r2, r3
   24a12:	9b06      	ldr	r3, [sp, #24]
   24a14:	8a19      	ldrh	r1, [r3, #16]
   24a16:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   24a1a:	4419      	add	r1, r3
   24a1c:	b212      	sxth	r2, r2
   24a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24a20:	b209      	sxth	r1, r1
   24a22:	4640      	mov	r0, r8
   24a24:	f7f3 fc4a 	bl	182bc <lv_draw_mask_apply>
                opa2 = LV_OPA_COVER;
   24a28:	9b05      	ldr	r3, [sp, #20]
   24a2a:	2802      	cmp	r0, #2
   24a2c:	bf14      	ite	ne
   24a2e:	4699      	movne	r9, r3
   24a30:	f04f 09ff 	moveq.w	r9, #255	; 0xff
            if(grad_dir == LV_GRAD_DIR_VER) {
   24a34:	2e01      	cmp	r6, #1
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   24a36:	4607      	mov	r7, r0
            if(grad_dir == LV_GRAD_DIR_VER) {
   24a38:	d11b      	bne.n	24a72 <lv_draw_rect+0x6a6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   24a3a:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   24a3e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
   24a42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24a44:	3101      	adds	r1, #1
   24a46:	1ad2      	subs	r2, r2, r3
   24a48:	1ac9      	subs	r1, r1, r3
   24a4a:	b212      	sxth	r2, r2
   24a4c:	b209      	sxth	r1, r1
   24a4e:	4628      	mov	r0, r5
   24a50:	f7ff fc8e 	bl	24370 <grad_get>
            if(simple_mode && split &&
   24a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
   24a56:	f88d 0020 	strb.w	r0, [sp, #32]
            if(simple_mode && split &&
   24a5a:	b973      	cbnz	r3, 24a7a <lv_draw_rect+0x6ae>
                    _lv_blend_fill(clip, &fill_area,
   24a5c:	7aeb      	ldrb	r3, [r5, #11]
   24a5e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   24a62:	9700      	str	r7, [sp, #0]
   24a64:	e9cd 9301 	strd	r9, r3, [sp, #4]
   24a68:	a91a      	add	r1, sp, #104	; 0x68
   24a6a:	4643      	mov	r3, r8
   24a6c:	e069      	b.n	24b42 <lv_draw_rect+0x776>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
   24a6e:	4637      	mov	r7, r6
   24a70:	e7e3      	b.n	24a3a <lv_draw_rect+0x66e>
            if(simple_mode && split &&
   24a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24a74:	2b00      	cmp	r3, #0
   24a76:	f000 82b4 	beq.w	24fe2 <lv_draw_rect+0xc16>
   24a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24a7c:	2b32      	cmp	r3, #50	; 0x32
   24a7e:	dd64      	ble.n	24b4a <lv_draw_rect+0x77e>
               (y < coords_bg.y1 + rout + 1 ||
   24a80:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
            if(simple_mode && split &&
   24a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
               (y < coords_bg.y1 + rout + 1 ||
   24a86:	3301      	adds	r3, #1
   24a88:	445b      	add	r3, fp
            if(simple_mode && split &&
   24a8a:	429a      	cmp	r2, r3
   24a8c:	db06      	blt.n	24a9c <lv_draw_rect+0x6d0>
                y > coords_bg.y2 - rout - 1)) {
   24a8e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   24a92:	3b01      	subs	r3, #1
   24a94:	eba3 030b 	sub.w	r3, r3, fp
               (y < coords_bg.y1 + rout + 1 ||
   24a98:	429a      	cmp	r2, r3
   24a9a:	dd56      	ble.n	24b4a <lv_draw_rect+0x77e>
                fill_area2.x1 = coords_bg.x1;
   24a9c:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   24aa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                fill_area2.x1 = coords_bg.x1;
   24aa2:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   24aa6:	3b01      	subs	r3, #1
   24aa8:	4413      	add	r3, r2
   24aaa:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                fill_area2.y1 = fill_area.y1;
   24aae:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
   24ab2:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
                fill_area2.y2 = fill_area.y2;
   24ab6:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   24aba:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fill_area2,
   24abe:	7aeb      	ldrb	r3, [r5, #11]
   24ac0:	f89d 2020 	ldrb.w	r2, [sp, #32]
   24ac4:	9700      	str	r7, [sp, #0]
   24ac6:	e9cd 9301 	strd	r9, r3, [sp, #4]
   24aca:	a91c      	add	r1, sp, #112	; 0x70
   24acc:	4643      	mov	r3, r8
   24ace:	4650      	mov	r0, sl
   24ad0:	f7fe f9a0 	bl	22e14 <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
   24ad4:	2e01      	cmp	r6, #1
   24ad6:	d116      	bne.n	24b06 <lv_draw_rect+0x73a>
                    fill_area2.x1 = coords_bg.x1 + rout;
   24ad8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   24ada:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   24ade:	4413      	add	r3, r2
   24ae0:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
                    fill_area2.x2 = coords_bg.x2 - rout;
   24ae4:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   24ae8:	1a9b      	subs	r3, r3, r2
   24aea:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                    _lv_blend_fill(clip, &fill_area2,
   24aee:	7aeb      	ldrb	r3, [r5, #11]
   24af0:	9302      	str	r3, [sp, #8]
   24af2:	9b05      	ldr	r3, [sp, #20]
   24af4:	f89d 2020 	ldrb.w	r2, [sp, #32]
   24af8:	e9cd 6300 	strd	r6, r3, [sp]
   24afc:	a91c      	add	r1, sp, #112	; 0x70
   24afe:	2300      	movs	r3, #0
   24b00:	4650      	mov	r0, sl
   24b02:	f7fe f987 	bl	22e14 <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   24b06:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
   24b0a:	990e      	ldr	r1, [sp, #56]	; 0x38
                fill_area2.x2 = coords_bg.x2;
   24b0c:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   24b10:	1c53      	adds	r3, r2, #1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   24b12:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   24b16:	1a59      	subs	r1, r3, r1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   24b18:	1a9b      	subs	r3, r3, r2
   24b1a:	9a06      	ldr	r2, [sp, #24]
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   24b1c:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   24b20:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
   24b24:	eba3 030b 	sub.w	r3, r3, fp
   24b28:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
   24b2a:	7aea      	ldrb	r2, [r5, #11]
   24b2c:	9700      	str	r7, [sp, #0]
   24b2e:	e9cd 9201 	strd	r9, r2, [sp, #4]
   24b32:	f89d 2020 	ldrb.w	r2, [sp, #32]
   24b36:	2b00      	cmp	r3, #0
   24b38:	bfac      	ite	ge
   24b3a:	4443      	addge	r3, r8
   24b3c:	f108 0300 	addlt.w	r3, r8, #0
   24b40:	a91c      	add	r1, sp, #112	; 0x70
                    _lv_blend_fill(clip, &fill_area,
   24b42:	4650      	mov	r0, sl
   24b44:	f7fe f966 	bl	22e14 <_lv_blend_fill>
   24b48:	e00b      	b.n	24b62 <lv_draw_rect+0x796>
                if(grad_dir == LV_GRAD_DIR_HOR) {
   24b4a:	2e02      	cmp	r6, #2
   24b4c:	d117      	bne.n	24b7e <lv_draw_rect+0x7b2>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
   24b4e:	7aeb      	ldrb	r3, [r5, #11]
   24b50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24b52:	9700      	str	r7, [sp, #0]
   24b54:	e9cd 9301 	strd	r9, r3, [sp, #4]
   24b58:	a91a      	add	r1, sp, #104	; 0x68
   24b5a:	4643      	mov	r3, r8
   24b5c:	4650      	mov	r0, sl
   24b5e:	f7fe fb36 	bl	231ce <_lv_blend_map>
            fill_area.y1++;
   24b62:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
   24b66:	3301      	adds	r3, #1
   24b68:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2++;
   24b6c:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   24b70:	3301      	adds	r3, #1
   24b72:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   24b76:	9b07      	ldr	r3, [sp, #28]
   24b78:	3301      	adds	r3, #1
   24b7a:	9307      	str	r3, [sp, #28]
   24b7c:	e6a6      	b.n	248cc <lv_draw_rect+0x500>
                else if(grad_dir == LV_GRAD_DIR_VER) {
   24b7e:	2e01      	cmp	r6, #1
   24b80:	f43f af6c 	beq.w	24a5c <lv_draw_rect+0x690>
                else if(other_mask_cnt != 0 || !split) {
   24b84:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24b86:	2b00      	cmp	r3, #0
   24b88:	f47f af68 	bne.w	24a5c <lv_draw_rect+0x690>
   24b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24b8e:	2b32      	cmp	r3, #50	; 0x32
   24b90:	dce7      	bgt.n	24b62 <lv_draw_rect+0x796>
   24b92:	e763      	b.n	24a5c <lv_draw_rect+0x690>
            _lv_memset_ff(mask_buf, draw_area_w);
   24b94:	4631      	mov	r1, r6
   24b96:	4628      	mov	r0, r5
   24b98:	f7ff fc0f 	bl	243ba <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   24b9c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   24ba0:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   24ba4:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   24ba8:	443a      	add	r2, r7
   24baa:	4419      	add	r1, r3
   24bac:	b212      	sxth	r2, r2
   24bae:	4633      	mov	r3, r6
   24bb0:	b209      	sxth	r1, r1
   24bb2:	4628      	mov	r0, r5
   24bb4:	f7f3 fb82 	bl	182bc <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
   24bb8:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   24bbc:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area2.y2 = fill_area.y2;
   24bc0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   24bc4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area2.x1 = area_outer->x1;
   24bc8:	f9b4 3000 	ldrsh.w	r3, [r4]
   24bcc:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            fill_area2.x2 = area_outer->x1 + rout - 1;
   24bd0:	3b01      	subs	r3, #1
   24bd2:	444b      	add	r3, r9
   24bd4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   24bd8:	9b06      	ldr	r3, [sp, #24]
   24bda:	9302      	str	r3, [sp, #8]
   24bdc:	9b05      	ldr	r3, [sp, #20]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   24bde:	900d      	str	r0, [sp, #52]	; 0x34
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   24be0:	9301      	str	r3, [sp, #4]
   24be2:	9000      	str	r0, [sp, #0]
   24be4:	462b      	mov	r3, r5
   24be6:	4642      	mov	r2, r8
   24be8:	a91a      	add	r1, sp, #104	; 0x68
   24bea:	4650      	mov	r0, sl
   24bec:	f7fe f912 	bl	22e14 <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
   24bf0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   24bf4:	9907      	ldr	r1, [sp, #28]
   24bf6:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
   24bfa:	440b      	add	r3, r1
   24bfc:	429a      	cmp	r2, r3
   24bfe:	da14      	bge.n	24c2a <lv_draw_rect+0x85e>
                fill_area2.x1 = area_outer->x1 + rout;
   24c00:	8823      	ldrh	r3, [r4, #0]
   24c02:	444b      	add	r3, r9
   24c04:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                fill_area2.x2 = area_outer->x2 - rout;
   24c08:	88a3      	ldrh	r3, [r4, #4]
   24c0a:	eba3 0309 	sub.w	r3, r3, r9
   24c0e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   24c12:	9b06      	ldr	r3, [sp, #24]
   24c14:	9302      	str	r3, [sp, #8]
   24c16:	9b05      	ldr	r3, [sp, #20]
   24c18:	9301      	str	r3, [sp, #4]
   24c1a:	2301      	movs	r3, #1
   24c1c:	9300      	str	r3, [sp, #0]
   24c1e:	4642      	mov	r2, r8
   24c20:	2300      	movs	r3, #0
   24c22:	a91a      	add	r1, sp, #104	; 0x68
   24c24:	4650      	mov	r0, sl
   24c26:	f7fe f8f5 	bl	22e14 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
   24c2a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
            fill_area2.x2 = area_outer->x2;
   24c2e:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            fill_area2.x1 = area_outer->x2 - rout + 1;
   24c32:	1c53      	adds	r3, r2, #1
   24c34:	eba3 0309 	sub.w	r3, r3, r9
   24c38:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   24c3c:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
   24c40:	f1c3 0301 	rsb	r3, r3, #1
   24c44:	4413      	add	r3, r2
   24c46:	9a08      	ldr	r2, [sp, #32]
   24c48:	1a9b      	subs	r3, r3, r2
   24c4a:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   24c4e:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   24c50:	9a06      	ldr	r2, [sp, #24]
   24c52:	9202      	str	r2, [sp, #8]
   24c54:	9a05      	ldr	r2, [sp, #20]
   24c56:	9201      	str	r2, [sp, #4]
   24c58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   24c5a:	9200      	str	r2, [sp, #0]
   24c5c:	2b00      	cmp	r3, #0
   24c5e:	bfac      	ite	ge
   24c60:	18eb      	addge	r3, r5, r3
   24c62:	1c2b      	addlt	r3, r5, #0
   24c64:	4642      	mov	r2, r8
   24c66:	a91a      	add	r1, sp, #104	; 0x68
   24c68:	4650      	mov	r0, sl
   24c6a:	f7fe f8d3 	bl	22e14 <_lv_blend_fill>
            fill_area.y1++;
   24c6e:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   24c72:	3301      	adds	r3, #1
   24c74:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2++;
   24c78:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   24c7c:	3301      	adds	r3, #1
   24c7e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
   24c82:	3701      	adds	r7, #1
   24c84:	e583      	b.n	2478e <lv_draw_rect+0x3c2>
            _lv_memset_ff(mask_buf, draw_area_w);
   24c86:	4631      	mov	r1, r6
   24c88:	4628      	mov	r0, r5
   24c8a:	f7ff fb96 	bl	243ba <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   24c8e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   24c92:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   24c96:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   24c9a:	443a      	add	r2, r7
   24c9c:	4419      	add	r1, r3
   24c9e:	b212      	sxth	r2, r2
   24ca0:	4633      	mov	r3, r6
   24ca2:	b209      	sxth	r1, r1
   24ca4:	4628      	mov	r0, r5
   24ca6:	f7f3 fb09 	bl	182bc <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
   24caa:	f9b4 3000 	ldrsh.w	r3, [r4]
   24cae:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            fill_area2.x2 = area_outer->x1 + rout - 1;
   24cb2:	3b01      	subs	r3, #1
   24cb4:	444b      	add	r3, r9
   24cb6:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            fill_area2.y1 = fill_area.y1;
   24cba:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   24cbe:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area2.y2 = fill_area.y2;
   24cc2:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   24cc6:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   24cca:	9b06      	ldr	r3, [sp, #24]
   24ccc:	9302      	str	r3, [sp, #8]
   24cce:	9b05      	ldr	r3, [sp, #20]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   24cd0:	900b      	str	r0, [sp, #44]	; 0x2c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   24cd2:	9301      	str	r3, [sp, #4]
   24cd4:	9000      	str	r0, [sp, #0]
   24cd6:	462b      	mov	r3, r5
   24cd8:	4642      	mov	r2, r8
   24cda:	a91a      	add	r1, sp, #104	; 0x68
   24cdc:	4650      	mov	r0, sl
   24cde:	f7fe f899 	bl	22e14 <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
   24ce2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   24ce6:	9907      	ldr	r1, [sp, #28]
   24ce8:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
   24cec:	1a5b      	subs	r3, r3, r1
   24cee:	429a      	cmp	r2, r3
   24cf0:	dd14      	ble.n	24d1c <lv_draw_rect+0x950>
                fill_area2.x1 = area_outer->x1 + rout;
   24cf2:	8823      	ldrh	r3, [r4, #0]
   24cf4:	444b      	add	r3, r9
   24cf6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                fill_area2.x2 = area_outer->x2 - rout;
   24cfa:	88a3      	ldrh	r3, [r4, #4]
   24cfc:	eba3 0309 	sub.w	r3, r3, r9
   24d00:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   24d04:	9b06      	ldr	r3, [sp, #24]
   24d06:	9302      	str	r3, [sp, #8]
   24d08:	9b05      	ldr	r3, [sp, #20]
   24d0a:	9301      	str	r3, [sp, #4]
   24d0c:	2301      	movs	r3, #1
   24d0e:	9300      	str	r3, [sp, #0]
   24d10:	4642      	mov	r2, r8
   24d12:	2300      	movs	r3, #0
   24d14:	a91a      	add	r1, sp, #104	; 0x68
   24d16:	4650      	mov	r0, sl
   24d18:	f7fe f87c 	bl	22e14 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
   24d1c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
            fill_area2.x2 = area_outer->x2;
   24d20:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            fill_area2.x1 = area_outer->x2 - rout + 1;
   24d24:	1c53      	adds	r3, r2, #1
   24d26:	eba3 0309 	sub.w	r3, r3, r9
   24d2a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   24d2e:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
   24d32:	f1c3 0301 	rsb	r3, r3, #1
   24d36:	4413      	add	r3, r2
   24d38:	9a08      	ldr	r2, [sp, #32]
   24d3a:	1a9b      	subs	r3, r3, r2
   24d3c:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   24d40:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   24d42:	9a06      	ldr	r2, [sp, #24]
   24d44:	9202      	str	r2, [sp, #8]
   24d46:	9a05      	ldr	r2, [sp, #20]
   24d48:	9201      	str	r2, [sp, #4]
   24d4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24d4c:	9200      	str	r2, [sp, #0]
   24d4e:	2b00      	cmp	r3, #0
   24d50:	bfac      	ite	ge
   24d52:	18eb      	addge	r3, r5, r3
   24d54:	1c2b      	addlt	r3, r5, #0
   24d56:	4642      	mov	r2, r8
   24d58:	a91a      	add	r1, sp, #104	; 0x68
   24d5a:	4650      	mov	r0, sl
   24d5c:	f7fe f85a 	bl	22e14 <_lv_blend_fill>
            fill_area.y1++;
   24d60:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   24d64:	3301      	adds	r3, #1
   24d66:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2++;
   24d6a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   24d6e:	3301      	adds	r3, #1
   24d70:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
   24d74:	3701      	adds	r7, #1
   24d76:	e520      	b.n	247ba <lv_draw_rect+0x3ee>
        fill_area.x1 = area_outer->x1;
   24d78:	8823      	ldrh	r3, [r4, #0]
   24d7a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        fill_area.x2 = area_outer->x2;
   24d7e:	88a3      	ldrh	r3, [r4, #4]
   24d80:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   24d84:	f9bd 405a 	ldrsh.w	r4, [sp, #90]	; 0x5a
   24d88:	f8bb 3012 	ldrh.w	r3, [fp, #18]
   24d8c:	4423      	add	r3, r4
   24d8e:	b21b      	sxth	r3, r3
   24d90:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = fill_area.y1;
   24d94:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   24d98:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   24d9c:	429c      	cmp	r4, r3
   24d9e:	f73f ad4a 	bgt.w	24836 <lv_draw_rect+0x46a>
            _lv_memset_ff(mask_buf, draw_area_w);
   24da2:	4631      	mov	r1, r6
   24da4:	4628      	mov	r0, r5
   24da6:	f7ff fb08 	bl	243ba <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   24daa:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   24dae:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   24db2:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   24db6:	4422      	add	r2, r4
   24db8:	4419      	add	r1, r3
   24dba:	b212      	sxth	r2, r2
   24dbc:	4633      	mov	r3, r6
   24dbe:	b209      	sxth	r1, r1
   24dc0:	4628      	mov	r0, r5
   24dc2:	f7f3 fa7b 	bl	182bc <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
   24dc6:	9b06      	ldr	r3, [sp, #24]
   24dc8:	9302      	str	r3, [sp, #8]
   24dca:	9b05      	ldr	r3, [sp, #20]
   24dcc:	4642      	mov	r2, r8
   24dce:	e9cd 0300 	strd	r0, r3, [sp]
   24dd2:	a918      	add	r1, sp, #96	; 0x60
   24dd4:	462b      	mov	r3, r5
   24dd6:	4650      	mov	r0, sl
   24dd8:	f7fe f81c 	bl	22e14 <_lv_blend_fill>
            fill_area.y1++;
   24ddc:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   24de0:	3301      	adds	r3, #1
   24de2:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2++;
   24de6:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   24dea:	3301      	adds	r3, #1
   24dec:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   24df0:	3401      	adds	r4, #1
   24df2:	e7d1      	b.n	24d98 <lv_draw_rect+0x9cc>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   24df4:	9b05      	ldr	r3, [sp, #20]
   24df6:	2bfe      	cmp	r3, #254	; 0xfe
   24df8:	bf28      	it	cs
   24dfa:	23ff      	movcs	r3, #255	; 0xff
   24dfc:	9305      	str	r3, [sp, #20]
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   24dfe:	f7f1 fefb 	bl	16bf8 <_lv_refr_get_disp_refreshing>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   24e02:	f000 f9ad 	bl	25160 <lv_disp_get_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
   24e06:	4652      	mov	r2, sl
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   24e08:	4681      	mov	r9, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
   24e0a:	4621      	mov	r1, r4
   24e0c:	a818      	add	r0, sp, #96	; 0x60
   24e0e:	f000 fa12 	bl	25236 <_lv_area_intersect>
        if(is_common == false) return;
   24e12:	2800      	cmp	r0, #0
   24e14:	f43f ad18 	beq.w	24848 <lv_draw_rect+0x47c>
        draw_area.x1 -= disp_area->x1;
   24e18:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
   24e1c:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
        draw_area.y1 -= disp_area->y1;
   24e20:	f9b9 6012 	ldrsh.w	r6, [r9, #18]
   24e24:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
        draw_area.x1 -= disp_area->x1;
   24e28:	1a83      	subs	r3, r0, r2
   24e2a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        draw_area.x2 -= disp_area->x1;
   24e2e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
   24e32:	1a9a      	subs	r2, r3, r2
   24e34:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        draw_area.y2 -= disp_area->y1;
   24e38:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
        draw_area.y1 -= disp_area->y1;
   24e3c:	1b89      	subs	r1, r1, r6
        draw_area.y2 -= disp_area->y1;
   24e3e:	1b92      	subs	r2, r2, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   24e40:	1c5e      	adds	r6, r3, #1
   24e42:	1a36      	subs	r6, r6, r0
   24e44:	b236      	sxth	r6, r6
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   24e46:	4630      	mov	r0, r6
        draw_area.y1 -= disp_area->y1;
   24e48:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
        draw_area.y2 -= disp_area->y1;
   24e4c:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   24e50:	f7f3 ff2c 	bl	18cac <_lv_mem_buf_get>
        if(rout > 0) {
   24e54:	f1b8 0f00 	cmp.w	r8, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   24e58:	4683      	mov	fp, r0
        if(rout > 0) {
   24e5a:	fa0f f788 	sxth.w	r7, r8
   24e5e:	dd3d      	ble.n	24edc <lv_draw_rect+0xb10>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
   24e60:	2300      	movs	r3, #0
   24e62:	463a      	mov	r2, r7
   24e64:	4621      	mov	r1, r4
   24e66:	a81c      	add	r0, sp, #112	; 0x70
   24e68:	f7f3 fb04 	bl	18474 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   24e6c:	2100      	movs	r1, #0
   24e6e:	a81c      	add	r0, sp, #112	; 0x70
   24e70:	f7f3 fa0e 	bl	18290 <lv_draw_mask_add>
   24e74:	9006      	str	r0, [sp, #24]
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
   24e76:	89ea      	ldrh	r2, [r5, #14]
   24e78:	1aba      	subs	r2, r7, r2
   24e7a:	2301      	movs	r3, #1
   24e7c:	b212      	sxth	r2, r2
   24e7e:	a914      	add	r1, sp, #80	; 0x50
   24e80:	a823      	add	r0, sp, #140	; 0x8c
   24e82:	f7f3 faf7 	bl	18474 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   24e86:	2100      	movs	r1, #0
   24e88:	a823      	add	r0, sp, #140	; 0x8c
   24e8a:	f7f3 fa01 	bl	18290 <lv_draw_mask_add>
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
   24e8e:	f9b5 700e 	ldrsh.w	r7, [r5, #14]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   24e92:	f8b9 2012 	ldrh.w	r2, [r9, #18]
        lv_color_t color = dsc->border_color;
   24e96:	7b2b      	ldrb	r3, [r5, #12]
   24e98:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
   24e9c:	3f01      	subs	r7, #1
   24e9e:	4547      	cmp	r7, r8
   24ea0:	bfb8      	it	lt
   24ea2:	4647      	movlt	r7, r8
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   24ea4:	f9bd 8062 	ldrsh.w	r8, [sp, #98]	; 0x62
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
   24ea8:	7ceb      	ldrb	r3, [r5, #19]
        fill_area.x1 = coords->x1;
   24eaa:	f9b4 1000 	ldrsh.w	r1, [r4]
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
   24eae:	9308      	str	r3, [sp, #32]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   24eb0:	4442      	add	r2, r8
   24eb2:	b212      	sxth	r2, r2
   24eb4:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
        fill_area.y2 = fill_area.y1;
   24eb8:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   24ebc:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
        fill_area.x2 = coords->x2;
   24ec0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   24ec4:	9007      	str	r0, [sp, #28]
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   24ec6:	2a04      	cmp	r2, #4
        fill_area.x1 = coords->x1;
   24ec8:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
        fill_area.x2 = coords->x2;
   24ecc:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   24ed0:	d108      	bne.n	24ee4 <lv_draw_rect+0xb18>
   24ed2:	19cd      	adds	r5, r1, r7
   24ed4:	f8ad 506c 	strh.w	r5, [sp, #108]	; 0x6c
        uint32_t buf_ofs = 0;
   24ed8:	2500      	movs	r5, #0
   24eda:	e00a      	b.n	24ef2 <lv_draw_rect+0xb26>
        int16_t mask_rout_id = LV_MASK_ID_INV;
   24edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24ee0:	9306      	str	r3, [sp, #24]
   24ee2:	e7c8      	b.n	24e76 <lv_draw_rect+0xaaa>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
   24ee4:	2a08      	cmp	r2, #8
   24ee6:	d1f7      	bne.n	24ed8 <lv_draw_rect+0xb0c>
            fill_area.x1 = coords->x2 - corner_size;
   24ee8:	1bdd      	subs	r5, r3, r7
   24eea:	b22d      	sxth	r5, r5
   24eec:	f8ad 5068 	strh.w	r5, [sp, #104]	; 0x68
            buf_ofs = fill_area.x1 - coords->x1;
   24ef0:	1a6d      	subs	r5, r5, r1
        volatile bool top_only = false;
   24ef2:	2300      	movs	r3, #0
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
   24ef4:	2a02      	cmp	r2, #2
        volatile bool top_only = false;
   24ef6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        volatile bool bottom_only = false;
   24efa:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
   24efe:	d11a      	bne.n	24f36 <lv_draw_rect+0xb6a>
   24f00:	2301      	movs	r3, #1
   24f02:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        volatile bool normal = !top_only && !bottom_only ? true : false;
   24f06:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   24f0a:	bb0b      	cbnz	r3, 24f50 <lv_draw_rect+0xb84>
   24f0c:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   24f10:	f083 0301 	eor.w	r3, r3, #1
   24f14:	f003 0301 	and.w	r3, r3, #1
   24f18:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
   24f1c:	445d      	add	r5, fp
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   24f1e:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   24f22:	4598      	cmp	r8, r3
   24f24:	dd16      	ble.n	24f54 <lv_draw_rect+0xb88>
        lv_draw_mask_remove_id(mask_rin_id);
   24f26:	9807      	ldr	r0, [sp, #28]
   24f28:	f7f3 f9ea 	bl	18300 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
   24f2c:	9806      	ldr	r0, [sp, #24]
   24f2e:	f7f3 f9e7 	bl	18300 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
   24f32:	4658      	mov	r0, fp
   24f34:	e486      	b.n	24844 <lv_draw_rect+0x478>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
   24f36:	2a01      	cmp	r2, #1
   24f38:	d007      	beq.n	24f4a <lv_draw_rect+0xb7e>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
   24f3a:	2a03      	cmp	r2, #3
   24f3c:	d1e3      	bne.n	24f06 <lv_draw_rect+0xb3a>
            top_only = true;
   24f3e:	2301      	movs	r3, #1
   24f40:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
            bottom_only = true;
   24f44:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   24f48:	e7dd      	b.n	24f06 <lv_draw_rect+0xb3a>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
   24f4a:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
   24f4e:	e7da      	b.n	24f06 <lv_draw_rect+0xb3a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
   24f50:	2300      	movs	r3, #0
   24f52:	e7df      	b.n	24f14 <lv_draw_rect+0xb48>
            if(normal ||
   24f54:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   24f58:	b98b      	cbnz	r3, 24f7e <lv_draw_rect+0xbb2>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   24f5a:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   24f5e:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
            if(normal ||
   24f62:	b123      	cbz	r3, 24f6e <lv_draw_rect+0xba2>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   24f64:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   24f68:	443b      	add	r3, r7
   24f6a:	429a      	cmp	r2, r3
   24f6c:	dd07      	ble.n	24f7e <lv_draw_rect+0xbb2>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
   24f6e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   24f72:	b313      	cbz	r3, 24fba <lv_draw_rect+0xbee>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
   24f74:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   24f78:	1bdb      	subs	r3, r3, r7
   24f7a:	429a      	cmp	r2, r3
   24f7c:	db1d      	blt.n	24fba <lv_draw_rect+0xbee>
                _lv_memset_ff(mask_buf, draw_area_w);
   24f7e:	4631      	mov	r1, r6
   24f80:	4658      	mov	r0, fp
   24f82:	f7ff fa1a 	bl	243ba <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   24f86:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   24f8a:	f8b9 2012 	ldrh.w	r2, [r9, #18]
   24f8e:	f8b9 1010 	ldrh.w	r1, [r9, #16]
   24f92:	4442      	add	r2, r8
   24f94:	4419      	add	r1, r3
   24f96:	b212      	sxth	r2, r2
   24f98:	4633      	mov	r3, r6
   24f9a:	b209      	sxth	r1, r1
   24f9c:	4658      	mov	r0, fp
   24f9e:	f7f3 f98d 	bl	182bc <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
   24fa2:	9b08      	ldr	r3, [sp, #32]
   24fa4:	9302      	str	r3, [sp, #8]
   24fa6:	9b05      	ldr	r3, [sp, #20]
   24fa8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   24fac:	e9cd 0300 	strd	r0, r3, [sp]
   24fb0:	a91a      	add	r1, sp, #104	; 0x68
   24fb2:	462b      	mov	r3, r5
   24fb4:	4650      	mov	r0, sl
   24fb6:	f7fd ff2d 	bl	22e14 <_lv_blend_fill>
            fill_area.y1++;
   24fba:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
   24fbe:	3301      	adds	r3, #1
   24fc0:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2++;
   24fc4:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   24fc8:	3301      	adds	r3, #1
   24fca:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   24fce:	f108 0801 	add.w	r8, r8, #1
   24fd2:	e7a4      	b.n	24f1e <lv_draw_rect+0xb52>
            if(grad_dir == LV_GRAD_DIR_VER) {
   24fd4:	2e01      	cmp	r6, #1
            opa2 = opa;
   24fd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if(grad_dir == LV_GRAD_DIR_VER) {
   24fda:	f43f ad48 	beq.w	24a6e <lv_draw_rect+0x6a2>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
   24fde:	2701      	movs	r7, #1
   24fe0:	e54b      	b.n	24a7a <lv_draw_rect+0x6ae>
                if(grad_dir == LV_GRAD_DIR_HOR) {
   24fe2:	2e02      	cmp	r6, #2
   24fe4:	f47f adce 	bne.w	24b84 <lv_draw_rect+0x7b8>
   24fe8:	e5b1      	b.n	24b4e <lv_draw_rect+0x782>

00024fea <_lv_img_buf_get_transformed_area>:
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
#else
    LV_UNUSED(angle);
    LV_UNUSED(zoom);
    LV_UNUSED(pivot);
    res->x1 = 0;
   24fea:	2300      	movs	r3, #0
    res->y1 = 0;
    res->x2 = w - 1;
   24fec:	3901      	subs	r1, #1
    res->y2 = h - 1;
   24fee:	3a01      	subs	r2, #1
    res->x1 = 0;
   24ff0:	8003      	strh	r3, [r0, #0]
    res->y1 = 0;
   24ff2:	8043      	strh	r3, [r0, #2]
    res->x2 = w - 1;
   24ff4:	8081      	strh	r1, [r0, #4]
    res->y2 = h - 1;
   24ff6:	80c2      	strh	r2, [r0, #6]
#endif
}
   24ff8:	4770      	bx	lr

00024ffa <_lv_memset_00>:
{
   24ffa:	460a      	mov	r2, r1
   24ffc:	2100      	movs	r1, #0
   24ffe:	f001 bd45 	b.w	26a8c <memset>

00025002 <lv_img_decoder_built_in_close>:
{
   25002:	b538      	push	{r3, r4, r5, lr}
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   25004:	69cd      	ldr	r5, [r1, #28]
{
   25006:	460c      	mov	r4, r1
    if(user_data) {
   25008:	b165      	cbz	r5, 25024 <lv_img_decoder_built_in_close+0x22>
        if(user_data->palette) lv_mem_free(user_data->palette);
   2500a:	6828      	ldr	r0, [r5, #0]
   2500c:	b108      	cbz	r0, 25012 <lv_img_decoder_built_in_close+0x10>
   2500e:	f7f3 fe2f 	bl	18c70 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
   25012:	6868      	ldr	r0, [r5, #4]
   25014:	b108      	cbz	r0, 2501a <lv_img_decoder_built_in_close+0x18>
   25016:	f7f3 fe2b 	bl	18c70 <lv_mem_free>
        lv_mem_free(user_data);
   2501a:	4628      	mov	r0, r5
   2501c:	f7f3 fe28 	bl	18c70 <lv_mem_free>
        dsc->user_data = NULL;
   25020:	2300      	movs	r3, #0
   25022:	61e3      	str	r3, [r4, #28]
}
   25024:	bd38      	pop	{r3, r4, r5, pc}

00025026 <_lv_memset_00>:
   25026:	460a      	mov	r2, r1
   25028:	2100      	movs	r1, #0
   2502a:	f001 bd2f 	b.w	26a8c <memset>

0002502e <lv_img_decoder_built_in_open>:
{
   2502e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   25030:	7a4a      	ldrb	r2, [r1, #9]
   25032:	2a01      	cmp	r2, #1
{
   25034:	4607      	mov	r7, r0
   25036:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   25038:	d101      	bne.n	2503e <lv_img_decoder_built_in_open+0x10>
                return LV_RES_INV;
   2503a:	2000      	movs	r0, #0
   2503c:	e010      	b.n	25060 <lv_img_decoder_built_in_open+0x32>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   2503e:	b91a      	cbnz	r2, 25048 <lv_img_decoder_built_in_open+0x1a>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
   25040:	684b      	ldr	r3, [r1, #4]
   25042:	689b      	ldr	r3, [r3, #8]
   25044:	2b00      	cmp	r3, #0
   25046:	d0f8      	beq.n	2503a <lv_img_decoder_built_in_open+0xc>
    lv_img_cf_t cf = dsc->header.cf;
   25048:	7b23      	ldrb	r3, [r4, #12]
   2504a:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   2504e:	1f03      	subs	r3, r0, #4
   25050:	2b02      	cmp	r3, #2
   25052:	d806      	bhi.n	25062 <lv_img_decoder_built_in_open+0x34>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   25054:	2a00      	cmp	r2, #0
   25056:	d132      	bne.n	250be <lv_img_decoder_built_in_open+0x90>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
   25058:	6863      	ldr	r3, [r4, #4]
   2505a:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
   2505c:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
   2505e:	2001      	movs	r0, #1
}
   25060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
   25062:	1fc3      	subs	r3, r0, #7
   25064:	2b03      	cmp	r3, #3
   25066:	d83f      	bhi.n	250e8 <lv_img_decoder_built_in_open+0xba>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
   25068:	f7f1 ffdc 	bl	17024 <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
   2506c:	69e3      	ldr	r3, [r4, #28]
        uint32_t palette_size = 1 << px_size;
   2506e:	2501      	movs	r5, #1
   25070:	4085      	lsls	r5, r0
        if(dsc->user_data == NULL) {
   25072:	b963      	cbnz	r3, 2508e <lv_img_decoder_built_in_open+0x60>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
   25074:	2008      	movs	r0, #8
   25076:	f7f3 fde7 	bl	18c48 <lv_mem_alloc>
   2507a:	61e0      	str	r0, [r4, #28]
            if(dsc->user_data == NULL) {
   2507c:	b920      	cbnz	r0, 25088 <lv_img_decoder_built_in_open+0x5a>
                lv_img_decoder_built_in_close(decoder, dsc);
   2507e:	4621      	mov	r1, r4
   25080:	4638      	mov	r0, r7
   25082:	f7ff ffbe 	bl	25002 <lv_img_decoder_built_in_close>
   25086:	e7d8      	b.n	2503a <lv_img_decoder_built_in_open+0xc>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
   25088:	2108      	movs	r1, #8
   2508a:	f7ff ffcc 	bl	25026 <_lv_memset_00>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   2508e:	4628      	mov	r0, r5
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   25090:	69e6      	ldr	r6, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   25092:	f7f3 fdd9 	bl	18c48 <lv_mem_alloc>
   25096:	6030      	str	r0, [r6, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   25098:	4628      	mov	r0, r5
   2509a:	f7f3 fdd5 	bl	18c48 <lv_mem_alloc>
        if(user_data->palette == NULL || user_data->opa == NULL) {
   2509e:	6833      	ldr	r3, [r6, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   250a0:	6070      	str	r0, [r6, #4]
        if(user_data->palette == NULL || user_data->opa == NULL) {
   250a2:	2b00      	cmp	r3, #0
   250a4:	d0eb      	beq.n	2507e <lv_img_decoder_built_in_open+0x50>
   250a6:	2800      	cmp	r0, #0
   250a8:	d0e9      	beq.n	2507e <lv_img_decoder_built_in_open+0x50>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   250aa:	7a63      	ldrb	r3, [r4, #9]
   250ac:	2b01      	cmp	r3, #1
   250ae:	d0c4      	beq.n	2503a <lv_img_decoder_built_in_open+0xc>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
   250b0:	6863      	ldr	r3, [r4, #4]
   250b2:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
   250b4:	2000      	movs	r0, #0
   250b6:	42a8      	cmp	r0, r5
   250b8:	f102 0204 	add.w	r2, r2, #4
   250bc:	d101      	bne.n	250c2 <lv_img_decoder_built_in_open+0x94>
            dsc->img_data = NULL;
   250be:	2300      	movs	r3, #0
   250c0:	e7cc      	b.n	2505c <lv_img_decoder_built_in_open+0x2e>
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
   250c2:	f812 3c03 	ldrb.w	r3, [r2, #-3]
   250c6:	f812 7c04 	ldrb.w	r7, [r2, #-4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
   250ca:	6831      	ldr	r1, [r6, #0]
   250cc:	09db      	lsrs	r3, r3, #7
   250ce:	ea43 13d7 	orr.w	r3, r3, r7, lsr #7
   250d2:	f812 7c02 	ldrb.w	r7, [r2, #-2]
   250d6:	ea43 13d7 	orr.w	r3, r3, r7, lsr #7
   250da:	540b      	strb	r3, [r1, r0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
   250dc:	6873      	ldr	r3, [r6, #4]
   250de:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   250e2:	5419      	strb	r1, [r3, r0]
            for(i = 0; i < palette_size; i++) {
   250e4:	3001      	adds	r0, #1
   250e6:	e7e6      	b.n	250b6 <lv_img_decoder_built_in_open+0x88>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
   250e8:	f1a0 030b 	sub.w	r3, r0, #11
   250ec:	2b03      	cmp	r3, #3
   250ee:	d9e6      	bls.n	250be <lv_img_decoder_built_in_open+0x90>
   250f0:	e7c5      	b.n	2507e <lv_img_decoder_built_in_open+0x50>

000250f2 <lv_img_decoder_read_line>:
{
   250f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   250f4:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
   250f6:	6800      	ldr	r0, [r0, #0]
   250f8:	6884      	ldr	r4, [r0, #8]
   250fa:	b144      	cbz	r4, 2510e <lv_img_decoder_read_line+0x1c>
   250fc:	9e06      	ldr	r6, [sp, #24]
   250fe:	e9cd 3600 	strd	r3, r6, [sp]
   25102:	4613      	mov	r3, r2
   25104:	460a      	mov	r2, r1
   25106:	4629      	mov	r1, r5
   25108:	47a0      	blx	r4
}
   2510a:	b002      	add	sp, #8
   2510c:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
   2510e:	4620      	mov	r0, r4
   25110:	e7fb      	b.n	2510a <lv_img_decoder_read_line+0x18>

00025112 <lv_img_decoder_close>:
{
   25112:	b510      	push	{r4, lr}
   25114:	4604      	mov	r4, r0
    if(dsc->decoder) {
   25116:	6800      	ldr	r0, [r0, #0]
   25118:	b158      	cbz	r0, 25132 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
   2511a:	68c3      	ldr	r3, [r0, #12]
   2511c:	b10b      	cbz	r3, 25122 <lv_img_decoder_close+0x10>
   2511e:	4621      	mov	r1, r4
   25120:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   25122:	7a63      	ldrb	r3, [r4, #9]
   25124:	2b01      	cmp	r3, #1
   25126:	d104      	bne.n	25132 <lv_img_decoder_close+0x20>
            lv_mem_free(dsc->src);
   25128:	6860      	ldr	r0, [r4, #4]
   2512a:	f7f3 fda1 	bl	18c70 <lv_mem_free>
            dsc->src = NULL;
   2512e:	2300      	movs	r3, #0
   25130:	6063      	str	r3, [r4, #4]
}
   25132:	bd10      	pop	{r4, pc}

00025134 <_lv_memset_00>:
 * Wrapper for the standard memset with fixed 0x00 value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
   25134:	460a      	mov	r2, r1
   25136:	2100      	movs	r1, #0
   25138:	f001 bca8 	b.w	26a8c <memset>

0002513c <lv_disp_buf_init>:
{
   2513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2513e:	4604      	mov	r4, r0
   25140:	460d      	mov	r5, r1
   25142:	4617      	mov	r7, r2
   25144:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
   25146:	2124      	movs	r1, #36	; 0x24
   25148:	f7ff fff4 	bl	25134 <_lv_memset_00>
    disp_buf->buf2    = buf2;
   2514c:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->size    = size_in_px_cnt;
   25150:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
   25154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025156 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
   25156:	6843      	ldr	r3, [r0, #4]
   25158:	2200      	movs	r2, #0
   2515a:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
   2515c:	61da      	str	r2, [r3, #28]
}
   2515e:	4770      	bx	lr

00025160 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
   25160:	6840      	ldr	r0, [r0, #4]
   25162:	4770      	bx	lr

00025164 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
   25164:	6843      	ldr	r3, [r0, #4]
   25166:	6818      	ldr	r0, [r3, #0]
   25168:	b118      	cbz	r0, 25172 <lv_disp_is_double_buf+0xe>
   2516a:	6858      	ldr	r0, [r3, #4]
   2516c:	3800      	subs	r0, #0
   2516e:	bf18      	it	ne
   25170:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
   25172:	4770      	bx	lr

00025174 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
   25174:	b508      	push	{r3, lr}
   25176:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   25178:	f7ff fff4 	bl	25164 <lv_disp_is_double_buf>
   2517c:	b140      	cbz	r0, 25190 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
   2517e:	8853      	ldrh	r3, [r2, #2]
   25180:	8810      	ldrh	r0, [r2, #0]
   25182:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   25186:	6853      	ldr	r3, [r2, #4]
   25188:	68db      	ldr	r3, [r3, #12]
   2518a:	1ac3      	subs	r3, r0, r3
   2518c:	4258      	negs	r0, r3
   2518e:	4158      	adcs	r0, r3
        return true;
    }
    else {
        return false;
    }
}
   25190:	bd08      	pop	{r3, pc}

00025192 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
   25192:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   25194:	f001 fa7e 	bl	26694 <z_impl_k_uptime_ticks>
   25198:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2519c:	fba0 2304 	umull	r2, r3, r0, r4
   251a0:	fb04 3301 	mla	r3, r4, r1, r3
   251a4:	0bd0      	lsrs	r0, r2, #15

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
   251a6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   251aa:	bd10      	pop	{r4, pc}

000251ac <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
   251ac:	b538      	push	{r3, r4, r5, lr}
   251ae:	4604      	mov	r4, r0
   251b0:	f001 fa70 	bl	26694 <z_impl_k_uptime_ticks>
   251b4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   251b8:	fba0 2305 	umull	r2, r3, r0, r5
   251bc:	fb05 3301 	mla	r3, r5, r1, r3
   251c0:	0bd0      	lsrs	r0, r2, #15
   251c2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
   251c6:	1b00      	subs	r0, r0, r4
   251c8:	bd38      	pop	{r3, r4, r5, pc}

000251ca <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
   251ca:	b530      	push	{r4, r5, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
   251cc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   251d0:	f9b0 5000 	ldrsh.w	r5, [r0]
    /* Circle center */
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
   251d4:	880a      	ldrh	r2, [r1, #0]
    lv_coord_t py = p->y - cy;
   251d6:	8840      	ldrh	r0, [r0, #2]
   251d8:	8849      	ldrh	r1, [r1, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
   251da:	1b5b      	subs	r3, r3, r5
   251dc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    lv_coord_t py = p->y - cy;
   251e0:	1a09      	subs	r1, r1, r0
    lv_coord_t r = (area->x2 - area->x1) / 2;
   251e2:	105c      	asrs	r4, r3, #1
    lv_coord_t px = p->x - cx;
   251e4:	1b52      	subs	r2, r2, r5
    lv_coord_t r = (area->x2 - area->x1) / 2;
   251e6:	f343 034f 	sbfx	r3, r3, #1, #16
    lv_coord_t px = p->x - cx;
   251ea:	1ad2      	subs	r2, r2, r3
    lv_coord_t py = p->y - cy;
   251ec:	1acb      	subs	r3, r1, r3

    int32_t r_sqrd = r * r;
    int32_t dist = (px * px) + (py * py);
   251ee:	fb13 f303 	smulbb	r3, r3, r3
    int32_t r_sqrd = r * r;
   251f2:	4364      	muls	r4, r4
    int32_t dist = (px * px) + (py * py);
   251f4:	fb12 3202 	smlabb	r2, r2, r2, r3

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
   251f8:	4294      	cmp	r4, r2
   251fa:	bfb4      	ite	lt
   251fc:	2000      	movlt	r0, #0
   251fe:	2001      	movge	r0, #1
   25200:	bd30      	pop	{r4, r5, pc}

00025202 <lv_area_set>:
    area_p->x2 = x2;
   25202:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
   25204:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
   25208:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
   2520a:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
   2520c:	80c3      	strh	r3, [r0, #6]
}
   2520e:	4770      	bx	lr

00025210 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
   25210:	8843      	ldrh	r3, [r0, #2]
   25212:	3901      	subs	r1, #1
   25214:	4419      	add	r1, r3
   25216:	80c1      	strh	r1, [r0, #6]
}
   25218:	4770      	bx	lr

0002521a <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
   2521a:	f9b0 3000 	ldrsh.w	r3, [r0]
   2521e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   25222:	1ad2      	subs	r2, r2, r3
   25224:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   25228:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
   2522c:	3301      	adds	r3, #1
   2522e:	1a18      	subs	r0, r3, r0
}
   25230:	fb02 0000 	mla	r0, r2, r0, r0
   25234:	4770      	bx	lr

00025236 <_lv_area_intersect>:
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   25236:	f9b1 3000 	ldrsh.w	r3, [r1]
{
   2523a:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   2523c:	f9b2 6000 	ldrsh.w	r6, [r2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   25240:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   25244:	429e      	cmp	r6, r3
   25246:	bfb8      	it	lt
   25248:	461e      	movlt	r6, r3
{
   2524a:	4604      	mov	r4, r0
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   2524c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   25250:	8006      	strh	r6, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   25252:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
   25256:	4283      	cmp	r3, r0
   25258:	bfb8      	it	lt
   2525a:	4603      	movlt	r3, r0
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   2525c:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   25260:	8063      	strh	r3, [r4, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   25262:	4285      	cmp	r5, r0
   25264:	bfa8      	it	ge
   25266:	4605      	movge	r5, r0
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   25268:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
   2526c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   25270:	80a5      	strh	r5, [r4, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   25272:	4290      	cmp	r0, r2
   25274:	bfa8      	it	ge
   25276:	4610      	movge	r0, r2
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   25278:	42ae      	cmp	r6, r5
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   2527a:	80e0      	strh	r0, [r4, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   2527c:	dc04      	bgt.n	25288 <_lv_area_intersect+0x52>
   2527e:	4283      	cmp	r3, r0
   25280:	bfcc      	ite	gt
   25282:	2000      	movgt	r0, #0
   25284:	2001      	movle	r0, #1
}
   25286:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
   25288:	2000      	movs	r0, #0
   2528a:	e7fc      	b.n	25286 <_lv_area_intersect+0x50>

0002528c <_lv_area_join>:
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   2528c:	f9b2 3000 	ldrsh.w	r3, [r2]
{
   25290:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   25292:	f9b1 4000 	ldrsh.w	r4, [r1]
   25296:	42a3      	cmp	r3, r4
   25298:	bfa8      	it	ge
   2529a:	4623      	movge	r3, r4
   2529c:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   2529e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   252a2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   252a6:	42a3      	cmp	r3, r4
   252a8:	bfa8      	it	ge
   252aa:	4623      	movge	r3, r4
   252ac:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
   252ae:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   252b2:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   252b6:	42a3      	cmp	r3, r4
   252b8:	bfb8      	it	lt
   252ba:	4623      	movlt	r3, r4
   252bc:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
   252be:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   252c2:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
   252c6:	4293      	cmp	r3, r2
   252c8:	bfb8      	it	lt
   252ca:	4613      	movlt	r3, r2
   252cc:	80c3      	strh	r3, [r0, #6]
}
   252ce:	bd10      	pop	{r4, pc}

000252d0 <_lv_area_is_point_on>:
{
   252d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   252d4:	f9b1 3000 	ldrsh.w	r3, [r1]
   252d8:	f9b0 5000 	ldrsh.w	r5, [r0]
   252dc:	42ab      	cmp	r3, r5
{
   252de:	460e      	mov	r6, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   252e0:	db7d      	blt.n	253de <_lv_area_is_point_on+0x10e>
   252e2:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
   252e6:	4543      	cmp	r3, r8
   252e8:	dc79      	bgt.n	253de <_lv_area_is_point_on+0x10e>
   252ea:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   252ee:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
   252f2:	42bb      	cmp	r3, r7
   252f4:	db73      	blt.n	253de <_lv_area_is_point_on+0x10e>
   252f6:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
   252fa:	454b      	cmp	r3, r9
   252fc:	dc6f      	bgt.n	253de <_lv_area_is_point_on+0x10e>
    if(radius <= 0) {
   252fe:	2a00      	cmp	r2, #0
   25300:	dc03      	bgt.n	2530a <_lv_area_is_point_on+0x3a>
        return true;
   25302:	2001      	movs	r0, #1
}
   25304:	b003      	add	sp, #12
   25306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2530a:	f108 0301 	add.w	r3, r8, #1
   2530e:	1b5b      	subs	r3, r3, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   25310:	f109 0001 	add.w	r0, r9, #1
    lv_coord_t w = lv_area_get_width(a_p) / 2;
   25314:	f3c3 34c0 	ubfx	r4, r3, #15, #1
   25318:	1bc0      	subs	r0, r0, r7
   2531a:	fa04 f383 	sxtah	r3, r4, r3
    lv_coord_t h = lv_area_get_height(a_p) / 2;
   2531e:	f3c0 34c0 	ubfx	r4, r0, #15, #1
   25322:	fa04 f080 	sxtah	r0, r4, r0
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
   25326:	105c      	asrs	r4, r3, #1
   25328:	1043      	asrs	r3, r0, #1
   2532a:	429c      	cmp	r4, r3
   2532c:	bfa8      	it	ge
   2532e:	461c      	movge	r4, r3
   25330:	4294      	cmp	r4, r2
   25332:	bfa8      	it	ge
   25334:	4614      	movge	r4, r2
    corner_area.x1 = a_p->x1;
   25336:	f8ad 5000 	strh.w	r5, [sp]
    corner_area.y2 = a_p->y1 + radius;
   2533a:	eb07 0a04 	add.w	sl, r7, r4
    corner_area.x2 = a_p->x1 + radius;
   2533e:	4425      	add	r5, r4
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   25340:	2200      	movs	r2, #0
    corner_area.x2 = a_p->x1 + radius;
   25342:	b22d      	sxth	r5, r5
    corner_area.y2 = a_p->y1 + radius;
   25344:	fa0f fa8a 	sxth.w	sl, sl
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   25348:	4668      	mov	r0, sp
    corner_area.x2 = a_p->x1 + radius;
   2534a:	f8ad 5004 	strh.w	r5, [sp, #4]
    corner_area.y1 = a_p->y1;
   2534e:	f8ad 7002 	strh.w	r7, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
   25352:	f8ad a006 	strh.w	sl, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   25356:	f7ff ffbb 	bl	252d0 <_lv_area_is_point_on>
   2535a:	4602      	mov	r2, r0
   2535c:	b130      	cbz	r0, 2536c <_lv_area_is_point_on+0x9c>
        corner_area.x2 += radius;
   2535e:	4425      	add	r5, r4
   25360:	f8ad 5004 	strh.w	r5, [sp, #4]
        corner_area.y2 += radius;
   25364:	4454      	add	r4, sl
   25366:	f8ad 4006 	strh.w	r4, [sp, #6]
   2536a:	e014      	b.n	25396 <_lv_area_is_point_on+0xc6>
    corner_area.y1 = a_p->y2 - radius;
   2536c:	eba9 0b04 	sub.w	fp, r9, r4
   25370:	fa0f fb8b 	sxth.w	fp, fp
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   25374:	4631      	mov	r1, r6
   25376:	4668      	mov	r0, sp
    corner_area.y1 = a_p->y2 - radius;
   25378:	f8ad b002 	strh.w	fp, [sp, #2]
    corner_area.y2 = a_p->y2;
   2537c:	f8ad 9006 	strh.w	r9, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   25380:	f7ff ffa6 	bl	252d0 <_lv_area_is_point_on>
   25384:	4602      	mov	r2, r0
   25386:	b158      	cbz	r0, 253a0 <_lv_area_is_point_on+0xd0>
        corner_area.x2 += radius;
   25388:	4425      	add	r5, r4
   2538a:	f8ad 5004 	strh.w	r5, [sp, #4]
        corner_area.y1 -= radius;
   2538e:	ebab 0404 	sub.w	r4, fp, r4
   25392:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
   25396:	4631      	mov	r1, r6
   25398:	4668      	mov	r0, sp
   2539a:	f7ff ff16 	bl	251ca <lv_point_within_circle>
   2539e:	e7b1      	b.n	25304 <_lv_area_is_point_on+0x34>
    corner_area.x1 = a_p->x2 - radius;
   253a0:	eba8 0304 	sub.w	r3, r8, r4
   253a4:	b21d      	sxth	r5, r3
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   253a6:	4631      	mov	r1, r6
   253a8:	4668      	mov	r0, sp
    corner_area.x1 = a_p->x2 - radius;
   253aa:	f8ad 5000 	strh.w	r5, [sp]
    corner_area.x2 = a_p->x2;
   253ae:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   253b2:	f7ff ff8d 	bl	252d0 <_lv_area_is_point_on>
   253b6:	4602      	mov	r2, r0
   253b8:	b118      	cbz	r0, 253c2 <_lv_area_is_point_on+0xf2>
        corner_area.x1 -= radius;
   253ba:	1b2b      	subs	r3, r5, r4
   253bc:	f8ad 3000 	strh.w	r3, [sp]
   253c0:	e7e5      	b.n	2538e <_lv_area_is_point_on+0xbe>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   253c2:	4631      	mov	r1, r6
   253c4:	4668      	mov	r0, sp
    corner_area.y1 = a_p->y1;
   253c6:	f8ad 7002 	strh.w	r7, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
   253ca:	f8ad a006 	strh.w	sl, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   253ce:	f7ff ff7f 	bl	252d0 <_lv_area_is_point_on>
   253d2:	2800      	cmp	r0, #0
   253d4:	d095      	beq.n	25302 <_lv_area_is_point_on+0x32>
        corner_area.x1 -= radius;
   253d6:	1b2b      	subs	r3, r5, r4
   253d8:	f8ad 3000 	strh.w	r3, [sp]
   253dc:	e7c2      	b.n	25364 <_lv_area_is_point_on+0x94>
        return false;
   253de:	2000      	movs	r0, #0
   253e0:	e790      	b.n	25304 <_lv_area_is_point_on+0x34>

000253e2 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
   253e2:	f9b0 2000 	ldrsh.w	r2, [r0]
   253e6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   253ea:	429a      	cmp	r2, r3
   253ec:	dc14      	bgt.n	25418 <_lv_area_is_on+0x36>
   253ee:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   253f2:	f9b1 3000 	ldrsh.w	r3, [r1]
   253f6:	429a      	cmp	r2, r3
   253f8:	db0e      	blt.n	25418 <_lv_area_is_on+0x36>
   253fa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   253fe:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   25402:	429a      	cmp	r2, r3
   25404:	dc08      	bgt.n	25418 <_lv_area_is_on+0x36>
   25406:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   2540a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   2540e:	4298      	cmp	r0, r3
   25410:	bfb4      	ite	lt
   25412:	2000      	movlt	r0, #0
   25414:	2001      	movge	r0, #1
   25416:	4770      	bx	lr
        return false;
   25418:	2000      	movs	r0, #0
}
   2541a:	4770      	bx	lr

0002541c <_lv_area_is_in>:
{
   2541c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   25420:	f9b1 3000 	ldrsh.w	r3, [r1]
   25424:	f9b0 7000 	ldrsh.w	r7, [r0]
   25428:	42bb      	cmp	r3, r7
{
   2542a:	4605      	mov	r5, r0
   2542c:	460c      	mov	r4, r1
   2542e:	4616      	mov	r6, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   25430:	dc23      	bgt.n	2547a <_lv_area_is_in+0x5e>
   25432:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   25436:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   2543a:	429a      	cmp	r2, r3
   2543c:	db1d      	blt.n	2547a <_lv_area_is_in+0x5e>
   2543e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   25442:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   25446:	429a      	cmp	r2, r3
   25448:	dc17      	bgt.n	2547a <_lv_area_is_in+0x5e>
   2544a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   2544e:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
   25452:	4283      	cmp	r3, r0
   25454:	bfcc      	ite	gt
   25456:	2000      	movgt	r0, #0
   25458:	2001      	movle	r0, #1
    if(radius == 0) return is_in;
   2545a:	b15e      	cbz	r6, 25474 <_lv_area_is_in+0x58>
    p.y = ain_p->y1;
   2545c:	886b      	ldrh	r3, [r5, #2]
    p.x = ain_p->x1;
   2545e:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   25462:	4632      	mov	r2, r6
   25464:	a901      	add	r1, sp, #4
   25466:	4620      	mov	r0, r4
    p.y = ain_p->y1;
   25468:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2546c:	f7ff ff30 	bl	252d0 <_lv_area_is_point_on>
   25470:	b928      	cbnz	r0, 2547e <_lv_area_is_in+0x62>
   25472:	2000      	movs	r0, #0
}
   25474:	b002      	add	sp, #8
   25476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_in = false;
   2547a:	2000      	movs	r0, #0
   2547c:	e7ed      	b.n	2545a <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
   2547e:	f9b5 8004 	ldrsh.w	r8, [r5, #4]
   25482:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   25486:	4632      	mov	r2, r6
   25488:	a901      	add	r1, sp, #4
   2548a:	4620      	mov	r0, r4
   2548c:	f7ff ff20 	bl	252d0 <_lv_area_is_point_on>
   25490:	2800      	cmp	r0, #0
   25492:	d0ee      	beq.n	25472 <_lv_area_is_in+0x56>
    p.y = ain_p->y2;
   25494:	88eb      	ldrh	r3, [r5, #6]
    p.x = ain_p->x1;
   25496:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2549a:	4632      	mov	r2, r6
   2549c:	a901      	add	r1, sp, #4
   2549e:	4620      	mov	r0, r4
    p.y = ain_p->y2;
   254a0:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   254a4:	f7ff ff14 	bl	252d0 <_lv_area_is_point_on>
   254a8:	2800      	cmp	r0, #0
   254aa:	d0e2      	beq.n	25472 <_lv_area_is_in+0x56>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   254ac:	4632      	mov	r2, r6
   254ae:	a901      	add	r1, sp, #4
   254b0:	4620      	mov	r0, r4
    p.x = ain_p->x2;
   254b2:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   254b6:	f7ff ff0b 	bl	252d0 <_lv_area_is_point_on>
   254ba:	e7db      	b.n	25474 <_lv_area_is_in+0x58>

000254bc <_lv_area_align>:
{
   254bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   254be:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   254c2:	f9b0 5000 	ldrsh.w	r5, [r0]
   254c6:	2a14      	cmp	r2, #20
   254c8:	d83f      	bhi.n	2554a <_lv_area_align+0x8e>
   254ca:	e8df f012 	tbh	[pc, r2, lsl #1]
   254ce:	0015      	.short	0x0015
   254d0:	0045003b 	.word	0x0045003b
   254d4:	0061005a 	.word	0x0061005a
   254d8:	007c0069 	.word	0x007c0069
   254dc:	00850083 	.word	0x00850083
   254e0:	0093008c 	.word	0x0093008c
   254e4:	00ad00a6 	.word	0x00ad00a6
   254e8:	00c600b3 	.word	0x00c600b3
   254ec:	00d200cd 	.word	0x00d200cd
   254f0:	00dc00d7 	.word	0x00dc00d7
   254f4:	00e200df 	.word	0x00e200df
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   254f8:	888a      	ldrh	r2, [r1, #4]
   254fa:	880e      	ldrh	r6, [r1, #0]
   254fc:	3201      	adds	r2, #1
   254fe:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   25500:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   25504:	fa06 f682 	sxtah	r6, r6, r2
   25508:	8882      	ldrh	r2, [r0, #4]
   2550a:	3201      	adds	r2, #1
   2550c:	1b52      	subs	r2, r2, r5
   2550e:	f3c2 37c0 	ubfx	r7, r2, #15, #1
   25512:	fa07 f282 	sxtah	r2, r7, r2
   25516:	1052      	asrs	r2, r2, #1
   25518:	eba2 0266 	sub.w	r2, r2, r6, asr #1
            res->x = lv_area_get_width(base);
   2551c:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2551e:	88ca      	ldrh	r2, [r1, #6]
   25520:	8849      	ldrh	r1, [r1, #2]
   25522:	3201      	adds	r2, #1
   25524:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   25526:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   2552a:	fa01 f182 	sxtah	r1, r1, r2
   2552e:	88c2      	ldrh	r2, [r0, #6]
   25530:	3201      	adds	r2, #1
   25532:	1b12      	subs	r2, r2, r4
   25534:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   25538:	fa00 f282 	sxtah	r2, r0, r2
   2553c:	1052      	asrs	r2, r2, #1
   2553e:	eba2 0261 	sub.w	r2, r2, r1, asr #1
   25542:	e001      	b.n	25548 <_lv_area_align+0x8c>
            res->x = 0;
   25544:	2200      	movs	r2, #0
   25546:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   25548:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
   2554a:	881a      	ldrh	r2, [r3, #0]
   2554c:	4415      	add	r5, r2
    res->y += base->y1;
   2554e:	885a      	ldrh	r2, [r3, #2]
    res->x += base->x1;
   25550:	801d      	strh	r5, [r3, #0]
    res->y += base->y1;
   25552:	4414      	add	r4, r2
   25554:	805c      	strh	r4, [r3, #2]
}
   25556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   25558:	888a      	ldrh	r2, [r1, #4]
   2555a:	8809      	ldrh	r1, [r1, #0]
   2555c:	3201      	adds	r2, #1
   2555e:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   25560:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   25564:	fa01 f182 	sxtah	r1, r1, r2
   25568:	8882      	ldrh	r2, [r0, #4]
   2556a:	3201      	adds	r2, #1
   2556c:	1b52      	subs	r2, r2, r5
   2556e:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   25572:	fa00 f282 	sxtah	r2, r0, r2
   25576:	1052      	asrs	r2, r2, #1
   25578:	eba2 0261 	sub.w	r2, r2, r1, asr #1
            res->x = lv_area_get_width(base);
   2557c:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   2557e:	2200      	movs	r2, #0
   25580:	e7e2      	b.n	25548 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   25582:	880a      	ldrh	r2, [r1, #0]
   25584:	8889      	ldrh	r1, [r1, #4]
   25586:	1a52      	subs	r2, r2, r1
   25588:	8881      	ldrh	r1, [r0, #4]
   2558a:	440a      	add	r2, r1
   2558c:	1b52      	subs	r2, r2, r5
   2558e:	e7f5      	b.n	2557c <_lv_area_align+0xc0>
            res->x = 0;
   25590:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base);
   25592:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   25594:	884a      	ldrh	r2, [r1, #2]
   25596:	88c9      	ldrh	r1, [r1, #6]
   25598:	1a52      	subs	r2, r2, r1
   2559a:	88c1      	ldrh	r1, [r0, #6]
   2559c:	440a      	add	r2, r1
   2559e:	e047      	b.n	25630 <_lv_area_align+0x174>
   255a0:	888a      	ldrh	r2, [r1, #4]
   255a2:	880e      	ldrh	r6, [r1, #0]
   255a4:	3201      	adds	r2, #1
   255a6:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   255a8:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   255ac:	fa06 f682 	sxtah	r6, r6, r2
   255b0:	8882      	ldrh	r2, [r0, #4]
   255b2:	3201      	adds	r2, #1
   255b4:	1b52      	subs	r2, r2, r5
   255b6:	f3c2 37c0 	ubfx	r7, r2, #15, #1
   255ba:	fa07 f282 	sxtah	r2, r7, r2
   255be:	1052      	asrs	r2, r2, #1
   255c0:	eba2 0266 	sub.w	r2, r2, r6, asr #1
   255c4:	e7e5      	b.n	25592 <_lv_area_align+0xd6>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   255c6:	888e      	ldrh	r6, [r1, #4]
   255c8:	880a      	ldrh	r2, [r1, #0]
   255ca:	1b92      	subs	r2, r2, r6
   255cc:	8886      	ldrh	r6, [r0, #4]
   255ce:	4432      	add	r2, r6
   255d0:	1b52      	subs	r2, r2, r5
   255d2:	e7de      	b.n	25592 <_lv_area_align+0xd6>
            res->x = 0;
   255d4:	2200      	movs	r2, #0
   255d6:	e7a1      	b.n	2551c <_lv_area_align+0x60>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   255d8:	888e      	ldrh	r6, [r1, #4]
   255da:	880a      	ldrh	r2, [r1, #0]
   255dc:	1b92      	subs	r2, r2, r6
   255de:	8886      	ldrh	r6, [r0, #4]
   255e0:	4432      	add	r2, r6
   255e2:	1b52      	subs	r2, r2, r5
   255e4:	e79a      	b.n	2551c <_lv_area_align+0x60>
            res->x = 0;
   255e6:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   255e8:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   255ea:	88ca      	ldrh	r2, [r1, #6]
   255ec:	1c50      	adds	r0, r2, #1
   255ee:	884a      	ldrh	r2, [r1, #2]
            res->y = -lv_area_get_height(to_align);
   255f0:	1a12      	subs	r2, r2, r0
   255f2:	e7a9      	b.n	25548 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   255f4:	888a      	ldrh	r2, [r1, #4]
   255f6:	880e      	ldrh	r6, [r1, #0]
   255f8:	3201      	adds	r2, #1
   255fa:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   255fc:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   25600:	fa06 f682 	sxtah	r6, r6, r2
   25604:	8882      	ldrh	r2, [r0, #4]
   25606:	3201      	adds	r2, #1
   25608:	1b52      	subs	r2, r2, r5
   2560a:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   2560e:	fa00 f282 	sxtah	r2, r0, r2
   25612:	1052      	asrs	r2, r2, #1
   25614:	eba2 0266 	sub.w	r2, r2, r6, asr #1
   25618:	e7e6      	b.n	255e8 <_lv_area_align+0x12c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2561a:	880a      	ldrh	r2, [r1, #0]
   2561c:	888e      	ldrh	r6, [r1, #4]
   2561e:	8880      	ldrh	r0, [r0, #4]
   25620:	1b92      	subs	r2, r2, r6
   25622:	4402      	add	r2, r0
   25624:	1b52      	subs	r2, r2, r5
   25626:	e7df      	b.n	255e8 <_lv_area_align+0x12c>
            res->x = 0;
   25628:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2562a:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2562c:	88c2      	ldrh	r2, [r0, #6]
   2562e:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   25630:	1b12      	subs	r2, r2, r4
   25632:	e789      	b.n	25548 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   25634:	888a      	ldrh	r2, [r1, #4]
   25636:	8809      	ldrh	r1, [r1, #0]
   25638:	3201      	adds	r2, #1
   2563a:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2563c:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   25640:	fa01 f182 	sxtah	r1, r1, r2
   25644:	8882      	ldrh	r2, [r0, #4]
   25646:	3201      	adds	r2, #1
   25648:	1b52      	subs	r2, r2, r5
   2564a:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   2564e:	fa06 f282 	sxtah	r2, r6, r2
   25652:	1052      	asrs	r2, r2, #1
   25654:	eba2 0261 	sub.w	r2, r2, r1, asr #1
   25658:	e7e7      	b.n	2562a <_lv_area_align+0x16e>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2565a:	880a      	ldrh	r2, [r1, #0]
   2565c:	8889      	ldrh	r1, [r1, #4]
   2565e:	1a52      	subs	r2, r2, r1
   25660:	8881      	ldrh	r1, [r0, #4]
   25662:	440a      	add	r2, r1
   25664:	1b52      	subs	r2, r2, r5
   25666:	e7e0      	b.n	2562a <_lv_area_align+0x16e>
   25668:	888a      	ldrh	r2, [r1, #4]
   2566a:	1c50      	adds	r0, r2, #1
   2566c:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   2566e:	1a12      	subs	r2, r2, r0
   25670:	e784      	b.n	2557c <_lv_area_align+0xc0>
   25672:	888a      	ldrh	r2, [r1, #4]
   25674:	1c56      	adds	r6, r2, #1
   25676:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   25678:	1b92      	subs	r2, r2, r6
   2567a:	e74f      	b.n	2551c <_lv_area_align+0x60>
   2567c:	888a      	ldrh	r2, [r1, #4]
   2567e:	1c56      	adds	r6, r2, #1
   25680:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   25682:	1b92      	subs	r2, r2, r6
   25684:	e785      	b.n	25592 <_lv_area_align+0xd6>
   25686:	8882      	ldrh	r2, [r0, #4]
   25688:	3201      	adds	r2, #1
   2568a:	e77f      	b.n	2558c <_lv_area_align+0xd0>
   2568c:	8882      	ldrh	r2, [r0, #4]
   2568e:	3201      	adds	r2, #1
   25690:	e7a7      	b.n	255e2 <_lv_area_align+0x126>
   25692:	8882      	ldrh	r2, [r0, #4]
   25694:	3201      	adds	r2, #1
   25696:	e79b      	b.n	255d0 <_lv_area_align+0x114>

00025698 <lv_color_fill>:
        *buf = color;
        buf++;
        px_num --;
    }
#else
    while(px_num > 16) {
   25698:	2a10      	cmp	r2, #16
   2569a:	4603      	mov	r3, r0
   2569c:	f100 0010 	add.w	r0, r0, #16
   256a0:	d803      	bhi.n	256aa <lv_color_fill+0x12>
   256a2:	441a      	add	r2, r3
        *buf = color;
        buf++;

        px_num -= 16;
    }
    while(px_num) {
   256a4:	4293      	cmp	r3, r2
   256a6:	d122      	bne.n	256ee <lv_color_fill+0x56>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
   256a8:	4770      	bx	lr
        *buf = color;
   256aa:	f800 1c10 	strb.w	r1, [r0, #-16]
        *buf = color;
   256ae:	f800 1c0f 	strb.w	r1, [r0, #-15]
        *buf = color;
   256b2:	f800 1c0e 	strb.w	r1, [r0, #-14]
        *buf = color;
   256b6:	f800 1c0d 	strb.w	r1, [r0, #-13]
        *buf = color;
   256ba:	f800 1c0c 	strb.w	r1, [r0, #-12]
        *buf = color;
   256be:	f800 1c0b 	strb.w	r1, [r0, #-11]
        *buf = color;
   256c2:	f800 1c0a 	strb.w	r1, [r0, #-10]
        *buf = color;
   256c6:	f800 1c09 	strb.w	r1, [r0, #-9]
        *buf = color;
   256ca:	f800 1c08 	strb.w	r1, [r0, #-8]
        *buf = color;
   256ce:	f800 1c07 	strb.w	r1, [r0, #-7]
        *buf = color;
   256d2:	f800 1c06 	strb.w	r1, [r0, #-6]
        *buf = color;
   256d6:	f800 1c05 	strb.w	r1, [r0, #-5]
        *buf = color;
   256da:	f800 1c04 	strb.w	r1, [r0, #-4]
        *buf = color;
   256de:	f800 1c03 	strb.w	r1, [r0, #-3]
        *buf = color;
   256e2:	f800 1c02 	strb.w	r1, [r0, #-2]
        *buf = color;
   256e6:	f800 1c01 	strb.w	r1, [r0, #-1]
        px_num -= 16;
   256ea:	3a10      	subs	r2, #16
   256ec:	e7d4      	b.n	25698 <lv_color_fill>
        *buf = color;
   256ee:	f803 1b01 	strb.w	r1, [r3], #1
        px_num --;
   256f2:	e7d7      	b.n	256a4 <lv_color_fill+0xc>

000256f4 <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
   256f4:	b109      	cbz	r1, 256fa <node_set_prev.isra.0+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
   256f6:	6803      	ldr	r3, [r0, #0]
   256f8:	50ca      	str	r2, [r1, r3]
}
   256fa:	4770      	bx	lr

000256fc <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
   256fc:	b111      	cbz	r1, 25704 <node_set_next.isra.0+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
   256fe:	6803      	ldr	r3, [r0, #0]
   25700:	4419      	add	r1, r3
   25702:	604a      	str	r2, [r1, #4]
}
   25704:	4770      	bx	lr

00025706 <_lv_ll_init>:
    node_size = (node_size + 3) & (~0x3);
   25706:	3103      	adds	r1, #3
    ll_p->head = NULL;
   25708:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
   2570a:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
   2570e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
   25712:	6001      	str	r1, [r0, #0]
}
   25714:	4770      	bx	lr

00025716 <_lv_ll_ins_head>:
{
   25716:	b538      	push	{r3, r4, r5, lr}
   25718:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   2571a:	6800      	ldr	r0, [r0, #0]
   2571c:	3008      	adds	r0, #8
   2571e:	f7f3 fa93 	bl	18c48 <lv_mem_alloc>
    if(n_new != NULL) {
   25722:	4605      	mov	r5, r0
   25724:	b180      	cbz	r0, 25748 <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
   25726:	4601      	mov	r1, r0
   25728:	2200      	movs	r2, #0
   2572a:	4620      	mov	r0, r4
   2572c:	f7ff ffe2 	bl	256f4 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
   25730:	6862      	ldr	r2, [r4, #4]
   25732:	f7ff ffe3 	bl	256fc <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
   25736:	6861      	ldr	r1, [r4, #4]
   25738:	b111      	cbz	r1, 25740 <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
   2573a:	462a      	mov	r2, r5
   2573c:	f7ff ffda 	bl	256f4 <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   25740:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
   25742:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   25744:	b903      	cbnz	r3, 25748 <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
   25746:	60a5      	str	r5, [r4, #8]
}
   25748:	4628      	mov	r0, r5
   2574a:	bd38      	pop	{r3, r4, r5, pc}

0002574c <_lv_ll_ins_tail>:
{
   2574c:	b538      	push	{r3, r4, r5, lr}
   2574e:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   25750:	6800      	ldr	r0, [r0, #0]
   25752:	3008      	adds	r0, #8
   25754:	f7f3 fa78 	bl	18c48 <lv_mem_alloc>
    if(n_new != NULL) {
   25758:	4605      	mov	r5, r0
   2575a:	b188      	cbz	r0, 25780 <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
   2575c:	4601      	mov	r1, r0
   2575e:	2200      	movs	r2, #0
   25760:	4620      	mov	r0, r4
   25762:	f7ff ffcb 	bl	256fc <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
   25766:	4629      	mov	r1, r5
   25768:	68a2      	ldr	r2, [r4, #8]
   2576a:	f7ff ffc3 	bl	256f4 <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
   2576e:	68a1      	ldr	r1, [r4, #8]
   25770:	b111      	cbz	r1, 25778 <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
   25772:	462a      	mov	r2, r5
   25774:	f7ff ffc2 	bl	256fc <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   25778:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
   2577a:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   2577c:	b903      	cbnz	r3, 25780 <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
   2577e:	6065      	str	r5, [r4, #4]
}
   25780:	4628      	mov	r0, r5
   25782:	bd38      	pop	{r3, r4, r5, pc}

00025784 <_lv_ll_get_head>:
    if(ll_p != NULL) {
   25784:	b100      	cbz	r0, 25788 <_lv_ll_get_head+0x4>
        head = ll_p->head;
   25786:	6840      	ldr	r0, [r0, #4]
}
   25788:	4770      	bx	lr

0002578a <_lv_ll_get_tail>:
    if(ll_p != NULL) {
   2578a:	b100      	cbz	r0, 2578e <_lv_ll_get_tail+0x4>
        tail = ll_p->tail;
   2578c:	6880      	ldr	r0, [r0, #8]
}
   2578e:	4770      	bx	lr

00025790 <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
   25790:	b110      	cbz	r0, 25798 <_lv_ll_get_next+0x8>
    return *((lv_ll_node_t **)n_act_d);
   25792:	6803      	ldr	r3, [r0, #0]
   25794:	4419      	add	r1, r3
   25796:	6848      	ldr	r0, [r1, #4]
}
   25798:	4770      	bx	lr

0002579a <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
   2579a:	b108      	cbz	r0, 257a0 <_lv_ll_get_prev+0x6>
    return *((lv_ll_node_t **)n_act_d);
   2579c:	6803      	ldr	r3, [r0, #0]
   2579e:	58c8      	ldr	r0, [r1, r3]
}
   257a0:	4770      	bx	lr

000257a2 <_lv_ll_ins_prev>:
{
   257a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   257a4:	460e      	mov	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
   257a6:	4605      	mov	r5, r0
   257a8:	b348      	cbz	r0, 257fe <_lv_ll_ins_prev+0x5c>
   257aa:	b351      	cbz	r1, 25802 <_lv_ll_ins_prev+0x60>
    if(_lv_ll_get_head(ll_p) == n_act) {
   257ac:	6843      	ldr	r3, [r0, #4]
   257ae:	4299      	cmp	r1, r3
   257b0:	d107      	bne.n	257c2 <_lv_ll_ins_prev+0x20>
        n_new = _lv_ll_ins_head(ll_p);
   257b2:	f7ff ffb0 	bl	25716 <_lv_ll_ins_head>
        if(n_new == NULL) return NULL;
   257b6:	2800      	cmp	r0, #0
   257b8:	bf38      	it	cc
   257ba:	2000      	movcc	r0, #0
   257bc:	4604      	mov	r4, r0
}
   257be:	4620      	mov	r0, r4
   257c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   257c2:	6800      	ldr	r0, [r0, #0]
   257c4:	3008      	adds	r0, #8
   257c6:	f7f3 fa3f 	bl	18c48 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
   257ca:	4604      	mov	r4, r0
   257cc:	2800      	cmp	r0, #0
   257ce:	d0f6      	beq.n	257be <_lv_ll_ins_prev+0x1c>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   257d0:	4631      	mov	r1, r6
   257d2:	4628      	mov	r0, r5
   257d4:	f7ff ffe1 	bl	2579a <_lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
   257d8:	4622      	mov	r2, r4
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   257da:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
   257dc:	4601      	mov	r1, r0
   257de:	4628      	mov	r0, r5
   257e0:	f7ff ff8c 	bl	256fc <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
   257e4:	463a      	mov	r2, r7
   257e6:	4621      	mov	r1, r4
   257e8:	f7ff ff84 	bl	256f4 <node_set_prev.isra.0>
        node_set_prev(ll_p, n_act, n_new);
   257ec:	4622      	mov	r2, r4
   257ee:	4631      	mov	r1, r6
   257f0:	f7ff ff80 	bl	256f4 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, n_act);
   257f4:	4632      	mov	r2, r6
   257f6:	4621      	mov	r1, r4
   257f8:	f7ff ff80 	bl	256fc <node_set_next.isra.0>
   257fc:	e7df      	b.n	257be <_lv_ll_ins_prev+0x1c>
    if(NULL == ll_p || NULL == n_act) return NULL;
   257fe:	4604      	mov	r4, r0
   25800:	e7dd      	b.n	257be <_lv_ll_ins_prev+0x1c>
   25802:	460c      	mov	r4, r1
   25804:	e7db      	b.n	257be <_lv_ll_ins_prev+0x1c>

00025806 <_lv_ll_remove>:
{
   25806:	b570      	push	{r4, r5, r6, lr}
   25808:	460d      	mov	r5, r1
    if(ll_p != NULL) {
   2580a:	4604      	mov	r4, r0
   2580c:	b308      	cbz	r0, 25852 <_lv_ll_remove+0x4c>
    if(_lv_ll_get_head(ll_p) == node_p) {
   2580e:	6843      	ldr	r3, [r0, #4]
   25810:	4299      	cmp	r1, r3
   25812:	d10e      	bne.n	25832 <_lv_ll_remove+0x2c>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
   25814:	4629      	mov	r1, r5
   25816:	4620      	mov	r0, r4
   25818:	f7ff ffba 	bl	25790 <_lv_ll_get_next>
   2581c:	4601      	mov	r1, r0
   2581e:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
   25820:	b908      	cbnz	r0, 25826 <_lv_ll_remove+0x20>
            ll_p->tail = NULL;
   25822:	60a0      	str	r0, [r4, #8]
}
   25824:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
   25826:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
   25828:	4620      	mov	r0, r4
}
   2582a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
   2582e:	f7ff bf61 	b.w	256f4 <node_set_prev.isra.0>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
   25832:	6883      	ldr	r3, [r0, #8]
   25834:	4299      	cmp	r1, r3
   25836:	d10e      	bne.n	25856 <_lv_ll_remove+0x50>
   25838:	f7ff ffaf 	bl	2579a <_lv_ll_get_prev>
   2583c:	4601      	mov	r1, r0
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
   2583e:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
   25840:	b908      	cbnz	r0, 25846 <_lv_ll_remove+0x40>
            ll_p->head = NULL;
   25842:	6060      	str	r0, [r4, #4]
   25844:	e7ee      	b.n	25824 <_lv_ll_remove+0x1e>
            node_set_next(ll_p, ll_p->tail, NULL);
   25846:	4620      	mov	r0, r4
   25848:	2200      	movs	r2, #0
}
   2584a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
   2584e:	f7ff bf55 	b.w	256fc <node_set_next.isra.0>
    if(_lv_ll_get_head(ll_p) == node_p) {
   25852:	2900      	cmp	r1, #0
   25854:	d0de      	beq.n	25814 <_lv_ll_remove+0xe>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
   25856:	4629      	mov	r1, r5
   25858:	4620      	mov	r0, r4
   2585a:	f7ff ff9e 	bl	2579a <_lv_ll_get_prev>
   2585e:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   25860:	4620      	mov	r0, r4
   25862:	f7ff ff95 	bl	25790 <_lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
   25866:	4631      	mov	r1, r6
   25868:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   2586a:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
   2586c:	4620      	mov	r0, r4
   2586e:	f7ff ff45 	bl	256fc <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
   25872:	4632      	mov	r2, r6
   25874:	4629      	mov	r1, r5
   25876:	e7d7      	b.n	25828 <_lv_ll_remove+0x22>

00025878 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
   25878:	4291      	cmp	r1, r2
{
   2587a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2587c:	4604      	mov	r4, r0
   2587e:	460d      	mov	r5, r1
   25880:	4617      	mov	r7, r2
    if(n_act == n_after) return; /*Can't move before itself*/
   25882:	d01f      	beq.n	258c4 <_lv_ll_move_before+0x4c>
    if(n_after != NULL)
   25884:	b1fa      	cbz	r2, 258c6 <_lv_ll_move_before+0x4e>
        n_before = _lv_ll_get_prev(ll_p, n_after);
   25886:	4611      	mov	r1, r2
   25888:	f7ff ff87 	bl	2579a <_lv_ll_get_prev>
   2588c:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
   2588e:	42ae      	cmp	r6, r5
   25890:	d018      	beq.n	258c4 <_lv_ll_move_before+0x4c>
    _lv_ll_remove(ll_p, n_act);
   25892:	4629      	mov	r1, r5
   25894:	4620      	mov	r0, r4
   25896:	f7ff ffb6 	bl	25806 <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
   2589a:	4620      	mov	r0, r4
   2589c:	462a      	mov	r2, r5
   2589e:	4631      	mov	r1, r6
   258a0:	f7ff ff2c 	bl	256fc <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
   258a4:	4632      	mov	r2, r6
   258a6:	4629      	mov	r1, r5
   258a8:	f7ff ff24 	bl	256f4 <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
   258ac:	462a      	mov	r2, r5
   258ae:	4639      	mov	r1, r7
   258b0:	f7ff ff20 	bl	256f4 <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
   258b4:	463a      	mov	r2, r7
   258b6:	4629      	mov	r1, r5
   258b8:	f7ff ff20 	bl	256fc <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
   258bc:	b907      	cbnz	r7, 258c0 <_lv_ll_move_before+0x48>
   258be:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
   258c0:	b906      	cbnz	r6, 258c4 <_lv_ll_move_before+0x4c>
   258c2:	6065      	str	r5, [r4, #4]
}
   258c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
   258c6:	b108      	cbz	r0, 258cc <_lv_ll_move_before+0x54>
        tail = ll_p->tail;
   258c8:	6886      	ldr	r6, [r0, #8]
   258ca:	e7e0      	b.n	2588e <_lv_ll_move_before+0x16>
    void * tail = NULL;
   258cc:	4606      	mov	r6, r0
   258ce:	e7de      	b.n	2588e <_lv_ll_move_before+0x16>

000258d0 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
   258d0:	b530      	push	{r4, r5, lr}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
   258d2:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
   258d4:	2300      	movs	r3, #0
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
   258d6:	18d4      	adds	r4, r2, r3
        if((uint32_t)trial * trial <= x) root = trial;
   258d8:	fb04 f504 	mul.w	r5, r4, r4
   258dc:	4285      	cmp	r5, r0
   258de:	bf98      	it	ls
   258e0:	4623      	movls	r3, r4
        mask = mask >> 1;
    } while(mask);
   258e2:	0852      	lsrs	r2, r2, #1
   258e4:	d1f7      	bne.n	258d6 <_lv_sqrt+0x6>

    q->i = (uint32_t) root >> 4;
   258e6:	091a      	lsrs	r2, r3, #4
    q->f = (uint32_t)(root & 0xf) << 4;
   258e8:	011b      	lsls	r3, r3, #4
   258ea:	b2db      	uxtb	r3, r3
    q->i = (uint32_t) root >> 4;
   258ec:	800a      	strh	r2, [r1, #0]
    q->f = (uint32_t)(root & 0xf) << 4;
   258ee:	804b      	strh	r3, [r1, #2]
}
   258f0:	bd30      	pop	{r4, r5, pc}

000258f2 <_lv_mem_init>:
}
   258f2:	4770      	bx	lr

000258f4 <lv_mem_realloc>:
{
   258f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + 3) & (~0x3);
   258f6:	1ccd      	adds	r5, r1, #3
   258f8:	f025 0503 	bic.w	r5, r5, #3
    if(data_p != NULL) {
   258fc:	4604      	mov	r4, r0
   258fe:	b130      	cbz	r0, 2590e <lv_mem_realloc+0x1a>
        if(e->header.s.used == 0) {
   25900:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
   25904:	f013 0f01 	tst.w	r3, #1
   25908:	bf14      	ite	ne
   2590a:	4604      	movne	r4, r0
   2590c:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
   2590e:	4620      	mov	r0, r4
   25910:	f7f3 f9be 	bl	18c90 <_lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   25914:	4285      	cmp	r5, r0
    uint32_t old_size = _lv_mem_get_size(data_p);
   25916:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   25918:	d012      	beq.n	25940 <lv_mem_realloc+0x4c>
    new_p = lv_mem_alloc(new_size);
   2591a:	4628      	mov	r0, r5
   2591c:	f7f3 f994 	bl	18c48 <lv_mem_alloc>
    if(new_p == NULL) {
   25920:	4606      	mov	r6, r0
   25922:	b158      	cbz	r0, 2593c <lv_mem_realloc+0x48>
    if(data_p != NULL) {
   25924:	b154      	cbz	r4, 2593c <lv_mem_realloc+0x48>
        if(old_size != 0) {
   25926:	b14f      	cbz	r7, 2593c <lv_mem_realloc+0x48>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25928:	42bd      	cmp	r5, r7
   2592a:	462a      	mov	r2, r5
   2592c:	4621      	mov	r1, r4
   2592e:	bf28      	it	cs
   25930:	463a      	movcs	r2, r7
   25932:	f001 f88a 	bl	26a4a <memcpy>
            lv_mem_free(data_p);
   25936:	4620      	mov	r0, r4
   25938:	f7f3 f99a 	bl	18c70 <lv_mem_free>
}
   2593c:	4630      	mov	r0, r6
   2593e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25940:	4626      	mov	r6, r4
   25942:	e7fb      	b.n	2593c <lv_mem_realloc+0x48>

00025944 <lv_task_create>:
{
   25944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25948:	4680      	mov	r8, r0
   2594a:	460f      	mov	r7, r1
   2594c:	4616      	mov	r6, r2
   2594e:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
   25950:	f7f3 fa6c 	bl	18e2c <lv_task_create_basic>
    if(new_task == NULL) return NULL;
   25954:	4604      	mov	r4, r0
   25956:	b130      	cbz	r0, 25966 <lv_task_create+0x22>
    task->task_cb = task_cb;
   25958:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
   2595c:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
   2595e:	4631      	mov	r1, r6
   25960:	f7f3 fbb0 	bl	190c4 <lv_task_set_prio>
    new_task->user_data = user_data;
   25964:	60e5      	str	r5, [r4, #12]
}
   25966:	4620      	mov	r0, r4
   25968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002596c <lv_task_ready>:
{
   2596c:	b510      	push	{r4, lr}
   2596e:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
   25970:	f7ff fc0f 	bl	25192 <lv_tick_get>
   25974:	6823      	ldr	r3, [r4, #0]
   25976:	43db      	mvns	r3, r3
   25978:	4403      	add	r3, r0
   2597a:	6063      	str	r3, [r4, #4]
}
   2597c:	bd10      	pop	{r4, pc}

0002597e <lv_txt_iso8859_1_size>:
}
   2597e:	2001      	movs	r0, #1
   25980:	4770      	bx	lr

00025982 <lv_txt_iso8859_1_next>:
    if(i == NULL) return txt[1]; /*Get the next char */
   25982:	b909      	cbnz	r1, 25988 <lv_txt_iso8859_1_next+0x6>
   25984:	7840      	ldrb	r0, [r0, #1]
   25986:	4770      	bx	lr
    uint8_t letter = txt[*i];
   25988:	680b      	ldr	r3, [r1, #0]
   2598a:	5cc0      	ldrb	r0, [r0, r3]
    (*i)++;
   2598c:	3301      	adds	r3, #1
   2598e:	600b      	str	r3, [r1, #0]
}
   25990:	4770      	bx	lr

00025992 <lv_txt_iso8859_1_prev>:
    if(i == NULL) return *(txt - 1); /*Get the prev. char */
   25992:	b911      	cbnz	r1, 2599a <lv_txt_iso8859_1_prev+0x8>
   25994:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   25998:	4770      	bx	lr
    (*i)--;
   2599a:	680b      	ldr	r3, [r1, #0]
   2599c:	3b01      	subs	r3, #1
   2599e:	600b      	str	r3, [r1, #0]
    return letter;
   259a0:	5cc0      	ldrb	r0, [r0, r3]
}
   259a2:	4770      	bx	lr

000259a4 <lv_txt_iso8859_1_get_byte_id>:
}
   259a4:	4608      	mov	r0, r1
   259a6:	4770      	bx	lr

000259a8 <lv_txt_iso8859_1_get_length>:
    return strlen(txt);
   259a8:	f7da bd70 	b.w	48c <strlen>

000259ac <lv_txt_iso8859_1_get_char_id>:
   259ac:	4608      	mov	r0, r1
   259ae:	4770      	bx	lr

000259b0 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   259b0:	2923      	cmp	r1, #35	; 0x23
{
   259b2:	4603      	mov	r3, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   259b4:	d115      	bne.n	259e2 <_lv_txt_is_cmd+0x32>
   259b6:	7802      	ldrb	r2, [r0, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
   259b8:	b952      	cbnz	r2, 259d0 <_lv_txt_is_cmd+0x20>
            *state = LV_TXT_CMD_STATE_PAR;
   259ba:	2001      	movs	r0, #1
            *state = LV_TXT_CMD_STATE_WAIT;
   259bc:	7018      	strb	r0, [r3, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
   259be:	781a      	ldrb	r2, [r3, #0]
   259c0:	2a01      	cmp	r2, #1
   259c2:	d104      	bne.n	259ce <_lv_txt_is_cmd+0x1e>
        if(c == ' ') {
   259c4:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   259c6:	bf04      	itt	eq
   259c8:	2102      	moveq	r1, #2
   259ca:	7019      	strbeq	r1, [r3, #0]
        ret = true;
   259cc:	4610      	mov	r0, r2
}
   259ce:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
   259d0:	2a01      	cmp	r2, #1
   259d2:	f04f 0000 	mov.w	r0, #0
   259d6:	d0f1      	beq.n	259bc <_lv_txt_is_cmd+0xc>
        else if(*state == LV_TXT_CMD_STATE_IN) {
   259d8:	2a02      	cmp	r2, #2
   259da:	d1f0      	bne.n	259be <_lv_txt_is_cmd+0xe>
            *state = LV_TXT_CMD_STATE_WAIT;
   259dc:	7018      	strb	r0, [r3, #0]
            ret    = true;
   259de:	2001      	movs	r0, #1
   259e0:	e7ed      	b.n	259be <_lv_txt_is_cmd+0xe>
    bool ret = false;
   259e2:	2000      	movs	r0, #0
   259e4:	e7eb      	b.n	259be <_lv_txt_is_cmd+0xe>

000259e6 <_lv_txt_get_size>:
{
   259e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   259ea:	b087      	sub	sp, #28
    size_res->x = 0;
   259ec:	2500      	movs	r5, #0
{
   259ee:	4698      	mov	r8, r3
   259f0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   259f4:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
   259f8:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
   259fc:	9303      	str	r3, [sp, #12]
   259fe:	4604      	mov	r4, r0
   25a00:	4616      	mov	r6, r2
    size_res->x = 0;
   25a02:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
   25a04:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
   25a06:	9102      	str	r1, [sp, #8]
   25a08:	b329      	cbz	r1, 25a56 <_lv_txt_get_size+0x70>
    if(font == NULL) return;
   25a0a:	b322      	cbz	r2, 25a56 <_lv_txt_get_size+0x70>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   25a0c:	9b03      	ldr	r3, [sp, #12]
    uint16_t letter_height = lv_font_get_line_height(font);
   25a0e:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   25a12:	f013 0f02 	tst.w	r3, #2
   25a16:	f647 4318 	movw	r3, #31768	; 0x7c18
   25a1a:	bf18      	it	ne
   25a1c:	469a      	movne	sl, r3
    uint16_t letter_height = lv_font_get_line_height(font);
   25a1e:	8913      	ldrh	r3, [r2, #8]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   25a20:	443b      	add	r3, r7
   25a22:	9304      	str	r3, [sp, #16]
            size_res->y += line_space;
   25a24:	eb07 030b 	add.w	r3, r7, fp
   25a28:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
   25a2a:	9b02      	ldr	r3, [sp, #8]
   25a2c:	eb03 0905 	add.w	r9, r3, r5
   25a30:	5d5b      	ldrb	r3, [r3, r5]
   25a32:	b99b      	cbnz	r3, 25a5c <_lv_txt_get_size+0x76>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
   25a34:	b155      	cbz	r5, 25a4c <_lv_txt_get_size+0x66>
   25a36:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   25a3a:	2b0a      	cmp	r3, #10
   25a3c:	d001      	beq.n	25a42 <_lv_txt_get_size+0x5c>
   25a3e:	2b0d      	cmp	r3, #13
   25a40:	d104      	bne.n	25a4c <_lv_txt_get_size+0x66>
        size_res->y += letter_height + line_space;
   25a42:	8862      	ldrh	r2, [r4, #2]
   25a44:	eb07 030b 	add.w	r3, r7, fp
   25a48:	4413      	add	r3, r2
   25a4a:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
   25a4c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   25a50:	bb33      	cbnz	r3, 25aa0 <_lv_txt_get_size+0xba>
        size_res->y = letter_height;
   25a52:	f8a4 b002 	strh.w	fp, [r4, #2]
}
   25a56:	b007      	add	sp, #28
   25a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   25a5c:	9b03      	ldr	r3, [sp, #12]
   25a5e:	9300      	str	r3, [sp, #0]
   25a60:	4642      	mov	r2, r8
   25a62:	4653      	mov	r3, sl
   25a64:	4631      	mov	r1, r6
   25a66:	4648      	mov	r0, r9
   25a68:	f7f3 fbaa 	bl	191c0 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   25a6c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   25a70:	9a04      	ldr	r2, [sp, #16]
   25a72:	441a      	add	r2, r3
   25a74:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   25a78:	4601      	mov	r1, r0
   25a7a:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   25a7c:	d2eb      	bcs.n	25a56 <_lv_txt_get_size+0x70>
            size_res->y += line_space;
   25a7e:	9a05      	ldr	r2, [sp, #20]
   25a80:	4413      	add	r3, r2
   25a82:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
   25a84:	9b03      	ldr	r3, [sp, #12]
   25a86:	9300      	str	r3, [sp, #0]
   25a88:	4632      	mov	r2, r6
   25a8a:	4643      	mov	r3, r8
   25a8c:	4648      	mov	r0, r9
   25a8e:	f7f3 fb45 	bl	1911c <_lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   25a92:	f9b4 3000 	ldrsh.w	r3, [r4]
   25a96:	4283      	cmp	r3, r0
   25a98:	bfb8      	it	lt
   25a9a:	4603      	movlt	r3, r0
   25a9c:	8023      	strh	r3, [r4, #0]
        line_start  = new_line_start;
   25a9e:	e7c4      	b.n	25a2a <_lv_txt_get_size+0x44>
        size_res->y -= line_space;
   25aa0:	1bdf      	subs	r7, r3, r7
   25aa2:	8067      	strh	r7, [r4, #2]
   25aa4:	e7d7      	b.n	25a56 <_lv_txt_get_size+0x70>

00025aa6 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
   25aa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25aaa:	9d08      	ldr	r5, [sp, #32]
   25aac:	4680      	mov	r8, r0
   25aae:	460f      	mov	r7, r1
   25ab0:	4614      	mov	r4, r2
   25ab2:	4699      	mov	r9, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
   25ab4:	b90c      	cbnz	r4, 25aba <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
   25ab6:	4626      	mov	r6, r4
   25ab8:	e012      	b.n	25ae0 <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
   25aba:	ea4f 0a54 	mov.w	sl, r4, lsr #1
   25abe:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
   25ac2:	4631      	mov	r1, r6
   25ac4:	4640      	mov	r0, r8
   25ac6:	47a8      	blx	r5
   25ac8:	2800      	cmp	r0, #0
   25aca:	dd08      	ble.n	25ade <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
   25acc:	43e4      	mvns	r4, r4
   25ace:	f004 0401 	and.w	r4, r4, #1
   25ad2:	ebaa 0a04 	sub.w	sl, sl, r4
            base = (middle += size);
   25ad6:	eb06 0709 	add.w	r7, r6, r9
{
   25ada:	4654      	mov	r4, sl
   25adc:	e7ea      	b.n	25ab4 <_lv_utils_bsearch+0xe>
        else if(c < 0) {
   25ade:	d1fc      	bne.n	25ada <_lv_utils_bsearch+0x34>
}
   25ae0:	4630      	mov	r0, r6
   25ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025ae6 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
   25ae6:	6843      	ldr	r3, [r0, #4]
   25ae8:	4718      	bx	r3

00025aea <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
   25aea:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   25aec:	6804      	ldr	r4, [r0, #0]
   25aee:	46a4      	mov	ip, r4
}
   25af0:	bc10      	pop	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   25af2:	4760      	bx	ip

00025af4 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
   25af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   25af6:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
   25af8:	460a      	mov	r2, r1
   25afa:	a901      	add	r1, sp, #4
   25afc:	f7ff fff5 	bl	25aea <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
   25b00:	b108      	cbz	r0, 25b06 <lv_font_get_glyph_width+0x12>
   25b02:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
   25b06:	b005      	add	sp, #20
   25b08:	f85d fb04 	ldr.w	pc, [sp], #4

00025b0c <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   25b0c:	7803      	ldrb	r3, [r0, #0]
   25b0e:	780a      	ldrb	r2, [r1, #0]
   25b10:	4293      	cmp	r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   25b12:	bf09      	itett	eq
   25b14:	784b      	ldrbeq	r3, [r1, #1]
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   25b16:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   25b18:	7840      	ldrbeq	r0, [r0, #1]
   25b1a:	1ac0      	subeq	r0, r0, r3

}
   25b1c:	4770      	bx	lr

00025b1e <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   25b1e:	8803      	ldrh	r3, [r0, #0]
   25b20:	880a      	ldrh	r2, [r1, #0]
   25b22:	4293      	cmp	r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   25b24:	bf09      	itett	eq
   25b26:	884b      	ldrheq	r3, [r1, #2]
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   25b28:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   25b2a:	8840      	ldrheq	r0, [r0, #2]
   25b2c:	1ac0      	subeq	r0, r0, r3
}
   25b2e:	4770      	bx	lr

00025b30 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
   25b30:	8800      	ldrh	r0, [r0, #0]
   25b32:	880b      	ldrh	r3, [r1, #0]
}
   25b34:	1ac0      	subs	r0, r0, r3
   25b36:	4770      	bx	lr

00025b38 <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
   25b38:	2909      	cmp	r1, #9
{
   25b3a:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
   25b3c:	d002      	beq.n	25b44 <lv_font_get_bitmap_fmt_txt+0xc>
    if(letter == '\0') return 0;
   25b3e:	b911      	cbnz	r1, 25b46 <lv_font_get_bitmap_fmt_txt+0xe>
    if(!gid) return NULL;
   25b40:	2000      	movs	r0, #0
}
   25b42:	bd10      	pop	{r4, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
   25b44:	2120      	movs	r1, #32
   25b46:	f850 4f10 	ldr.w	r4, [r0, #16]!
   25b4a:	f7f3 fc1d 	bl	19388 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return NULL;
   25b4e:	2800      	cmp	r0, #0
   25b50:	d0f6      	beq.n	25b40 <lv_font_get_bitmap_fmt_txt+0x8>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   25b52:	7d21      	ldrb	r1, [r4, #20]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   25b54:	6863      	ldr	r3, [r4, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   25b56:	0789      	lsls	r1, r1, #30
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   25b58:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   25b5c:	d1f0      	bne.n	25b40 <lv_font_get_bitmap_fmt_txt+0x8>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
   25b5e:	2a00      	cmp	r2, #0
   25b60:	d0ee      	beq.n	25b40 <lv_font_get_bitmap_fmt_txt+0x8>
   25b62:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   25b66:	6820      	ldr	r0, [r4, #0]
   25b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
   25b6c:	4418      	add	r0, r3
   25b6e:	e7e8      	b.n	25b42 <lv_font_get_bitmap_fmt_txt+0xa>

00025b70 <style_init_reset>:
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) lv_style_reset(style);
    else lv_style_init(style);
   25b70:	f7fc bdb1 	b.w	226d6 <lv_style_init>

00025b74 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
   25b74:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25b76:	f7fb ff3a 	bl	219ee <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   25b7a:	7c43      	ldrb	r3, [r0, #17]
   25b7c:	07db      	lsls	r3, r3, #31
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25b7e:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   25b80:	d503      	bpl.n	25b8a <lv_label_dot_tmp_free+0x16>
   25b82:	6840      	ldr	r0, [r0, #4]
   25b84:	b108      	cbz	r0, 25b8a <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
   25b86:	f7f3 f873 	bl	18c70 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
   25b8a:	7c63      	ldrb	r3, [r4, #17]
   25b8c:	f36f 0300 	bfc	r3, #0, #1
   25b90:	7463      	strb	r3, [r4, #17]
    ext->dot.tmp_ptr   = NULL;
   25b92:	2300      	movs	r3, #0
   25b94:	6063      	str	r3, [r4, #4]
}
   25b96:	bd10      	pop	{r4, pc}

00025b98 <_lv_memcpy>:
   25b98:	f000 bf57 	b.w	26a4a <memcpy>

00025b9c <lv_label_set_dot_tmp>:
{
   25b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b9e:	4615      	mov	r5, r2
   25ba0:	4607      	mov	r7, r0
   25ba2:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25ba4:	f7fb ff23 	bl	219ee <lv_obj_get_ext_attr>
   25ba8:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
   25baa:	4638      	mov	r0, r7
   25bac:	f7ff ffe2 	bl	25b74 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
   25bb0:	2d04      	cmp	r5, #4
   25bb2:	d911      	bls.n	25bd8 <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
   25bb4:	1c68      	adds	r0, r5, #1
   25bb6:	f7f3 f847 	bl	18c48 <lv_mem_alloc>
   25bba:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
   25bbc:	b158      	cbz	r0, 25bd6 <lv_label_set_dot_tmp+0x3a>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
   25bbe:	462a      	mov	r2, r5
   25bc0:	4631      	mov	r1, r6
   25bc2:	f7ff ffe9 	bl	25b98 <_lv_memcpy>
        ext->dot.tmp_ptr[len] = '\0';
   25bc6:	6863      	ldr	r3, [r4, #4]
   25bc8:	2200      	movs	r2, #0
   25bca:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
   25bcc:	7c63      	ldrb	r3, [r4, #17]
   25bce:	f043 0301 	orr.w	r3, r3, #1
   25bd2:	7463      	strb	r3, [r4, #17]
    return true;
   25bd4:	2001      	movs	r0, #1
}
   25bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
   25bd8:	7c63      	ldrb	r3, [r4, #17]
   25bda:	f36f 0300 	bfc	r3, #0, #1
   25bde:	7463      	strb	r3, [r4, #17]
        _lv_memcpy(ext->dot.tmp, data, len);
   25be0:	462a      	mov	r2, r5
   25be2:	4631      	mov	r1, r6
   25be4:	1d20      	adds	r0, r4, #4
   25be6:	f7ff ffd7 	bl	25b98 <_lv_memcpy>
   25bea:	e7f3      	b.n	25bd4 <lv_label_set_dot_tmp+0x38>

00025bec <get_txt_coords>:

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
   25bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25bf0:	4605      	mov	r5, r0
   25bf2:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
   25bf4:	f7fb fd16 	bl	21624 <lv_obj_get_coords>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   25bf8:	2212      	movs	r2, #18
   25bfa:	2100      	movs	r1, #0
   25bfc:	4628      	mov	r0, r5
   25bfe:	f7f0 fb9f 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   25c02:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   25c04:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   25c06:	2100      	movs	r1, #0
   25c08:	4628      	mov	r0, r5
   25c0a:	f7f0 fb99 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   25c0e:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   25c10:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   25c12:	2100      	movs	r1, #0
   25c14:	4628      	mov	r0, r5
   25c16:	f7f0 fb93 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   25c1a:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   25c1c:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   25c1e:	2100      	movs	r1, #0
   25c20:	4628      	mov	r0, r5
   25c22:	f7f0 fb8d 	bl	16340 <_lv_obj_get_style_int>

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
   25c26:	8823      	ldrh	r3, [r4, #0]
    area->x2 -= right;
   25c28:	88a2      	ldrh	r2, [r4, #4]
    area->x1 += left;
   25c2a:	441f      	add	r7, r3
    area->y1 += top;
   25c2c:	8863      	ldrh	r3, [r4, #2]
    area->x1 += left;
   25c2e:	8027      	strh	r7, [r4, #0]
    area->y1 += top;
   25c30:	441e      	add	r6, r3
    area->y2 -= bottom;
   25c32:	88e3      	ldrh	r3, [r4, #6]
    area->y1 += top;
   25c34:	8066      	strh	r6, [r4, #2]
    area->x2 -= right;
   25c36:	eba2 0208 	sub.w	r2, r2, r8
    area->y2 -= bottom;
   25c3a:	1a1b      	subs	r3, r3, r0
    area->x2 -= right;
   25c3c:	80a2      	strh	r2, [r4, #4]
    area->y2 -= bottom;
   25c3e:	80e3      	strh	r3, [r4, #6]
}
   25c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025c44 <lv_label_set_align>:
{
   25c44:	b538      	push	{r3, r4, r5, lr}
   25c46:	460c      	mov	r4, r1
   25c48:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25c4a:	f7fb fed0 	bl	219ee <lv_obj_get_ext_attr>
    if(ext->align == align) return;
   25c4e:	7c03      	ldrb	r3, [r0, #16]
   25c50:	f3c3 1201 	ubfx	r2, r3, #4, #2
   25c54:	42a2      	cmp	r2, r4
   25c56:	d007      	beq.n	25c68 <lv_label_set_align+0x24>
    ext->align = align;
   25c58:	f364 1305 	bfi	r3, r4, #4, #2
   25c5c:	7403      	strb	r3, [r0, #16]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   25c5e:	4628      	mov	r0, r5
}
   25c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   25c64:	f7fb bbae 	b.w	213c4 <lv_obj_invalidate>
}
   25c68:	bd38      	pop	{r3, r4, r5, pc}

00025c6a <lv_label_get_text>:
{
   25c6a:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25c6c:	f7fb febf 	bl	219ee <lv_obj_get_ext_attr>
}
   25c70:	6800      	ldr	r0, [r0, #0]
   25c72:	bd08      	pop	{r3, pc}

00025c74 <lv_label_get_long_mode>:
{
   25c74:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25c76:	f7fb feba 	bl	219ee <lv_obj_get_ext_attr>
    return ext->long_mode;
   25c7a:	7c00      	ldrb	r0, [r0, #16]
}
   25c7c:	f000 0007 	and.w	r0, r0, #7
   25c80:	bd08      	pop	{r3, pc}

00025c82 <lv_label_get_align>:
{
   25c82:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25c84:	f7fb feb3 	bl	219ee <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
   25c88:	7c00      	ldrb	r0, [r0, #16]
   25c8a:	f3c0 1001 	ubfx	r0, r0, #4, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
   25c8e:	2803      	cmp	r0, #3
}
   25c90:	bf08      	it	eq
   25c92:	2000      	moveq	r0, #0
   25c94:	bd08      	pop	{r3, pc}

00025c96 <lv_label_design>:
{
   25c96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(mode == LV_DESIGN_COVER_CHK)
   25c9a:	2a02      	cmp	r2, #2
{
   25c9c:	b0a7      	sub	sp, #156	; 0x9c
   25c9e:	4607      	mov	r7, r0
   25ca0:	4689      	mov	r9, r1
   25ca2:	4616      	mov	r6, r2
    if(mode == LV_DESIGN_COVER_CHK)
   25ca4:	f000 80f2 	beq.w	25e8c <lv_label_design+0x1f6>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   25ca8:	2a00      	cmp	r2, #0
   25caa:	f040 80f8 	bne.w	25e9e <lv_label_design+0x208>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25cae:	f7fb fe9e 	bl	219ee <lv_obj_get_ext_attr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   25cb2:	2204      	movs	r2, #4
   25cb4:	4631      	mov	r1, r6
   25cb6:	4604      	mov	r4, r0
   25cb8:	4638      	mov	r0, r7
   25cba:	f7f0 fb41 	bl	16340 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   25cbe:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   25cc0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   25cc2:	4631      	mov	r1, r6
   25cc4:	4638      	mov	r0, r7
   25cc6:	f7f0 fb3b 	bl	16340 <_lv_obj_get_style_int>
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   25cca:	2208      	movs	r2, #8
   25ccc:	4605      	mov	r5, r0
   25cce:	f107 0110 	add.w	r1, r7, #16
   25cd2:	a805      	add	r0, sp, #20
   25cd4:	f7ff ff60 	bl	25b98 <_lv_memcpy>
        bg_coords.x1 -= w;
   25cd8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        bg_coords.x2 += w;
   25cdc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
        bg_coords.x1 -= w;
   25ce0:	eba3 0308 	sub.w	r3, r3, r8
   25ce4:	f8ad 3014 	strh.w	r3, [sp, #20]
        bg_coords.x2 += w;
   25ce8:	4480      	add	r8, r0
        bg_coords.y1 -= h;
   25cea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
        bg_coords.y2 += h;
   25cee:	f8bd 001a 	ldrh.w	r0, [sp, #26]
        bg_coords.x2 += w;
   25cf2:	f8ad 8018 	strh.w	r8, [sp, #24]
        bg_coords.y1 -= h;
   25cf6:	1b5b      	subs	r3, r3, r5
        bg_coords.y2 += h;
   25cf8:	4405      	add	r5, r0
        lv_draw_rect_dsc_init(&draw_rect_dsc);
   25cfa:	a813      	add	r0, sp, #76	; 0x4c
        bg_coords.y1 -= h;
   25cfc:	f8ad 3016 	strh.w	r3, [sp, #22]
        bg_coords.y2 += h;
   25d00:	f8ad 501a 	strh.w	r5, [sp, #26]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
   25d04:	f7f2 fbe0 	bl	184c8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
   25d08:	aa13      	add	r2, sp, #76	; 0x4c
   25d0a:	4631      	mov	r1, r6
   25d0c:	4638      	mov	r0, r7
   25d0e:	f7fb fe7e 	bl	21a0e <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
   25d12:	aa13      	add	r2, sp, #76	; 0x4c
   25d14:	4649      	mov	r1, r9
   25d16:	a805      	add	r0, sp, #20
   25d18:	f7fe fb58 	bl	243cc <lv_draw_rect>
        get_txt_coords(label, &txt_coords);
   25d1c:	a907      	add	r1, sp, #28
   25d1e:	4638      	mov	r0, r7
   25d20:	f7ff ff64 	bl	25bec <get_txt_coords>
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
   25d24:	aa07      	add	r2, sp, #28
   25d26:	4649      	mov	r1, r9
   25d28:	a809      	add	r0, sp, #36	; 0x24
   25d2a:	f7ff fa84 	bl	25236 <_lv_area_intersect>
        if(!is_common) return LV_DESIGN_RES_OK;
   25d2e:	2800      	cmp	r0, #0
   25d30:	f000 80ac 	beq.w	25e8c <lv_label_design+0x1f6>
        lv_label_align_t align = lv_label_get_align(label);
   25d34:	4638      	mov	r0, r7
   25d36:	f7ff ffa4 	bl	25c82 <lv_label_get_align>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   25d3a:	7c23      	ldrb	r3, [r4, #16]
   25d3c:	f3c3 1580 	ubfx	r5, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   25d40:	061a      	lsls	r2, r3, #24
   25d42:	bf48      	it	mi
   25d44:	f045 0502 	orrmi.w	r5, r5, #2
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   25d48:	075b      	lsls	r3, r3, #29
   25d4a:	bf08      	it	eq
   25d4c:	f045 0510 	orreq.w	r5, r5, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   25d50:	2801      	cmp	r0, #1
   25d52:	f040 809f 	bne.w	25e94 <lv_label_design+0x1fe>
   25d56:	f045 0504 	orr.w	r5, r5, #4
        lv_draw_label_dsc_init(&label_draw_dsc);
   25d5a:	a80b      	add	r0, sp, #44	; 0x2c
   25d5c:	f7f1 fa44 	bl	171e8 <lv_draw_label_dsc_init>
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
   25d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
   25d64:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
        label_draw_dsc.ofs_x = ext->offset.x;
   25d68:	89a3      	ldrh	r3, [r4, #12]
   25d6a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
   25d6e:	aa0b      	add	r2, sp, #44	; 0x2c
        label_draw_dsc.ofs_y = ext->offset.y;
   25d70:	89e3      	ldrh	r3, [r4, #14]
   25d72:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
   25d76:	2100      	movs	r1, #0
   25d78:	4638      	mov	r0, r7
        label_draw_dsc.flag = flag;
   25d7a:	f88d 5049 	strb.w	r5, [sp, #73]	; 0x49
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
   25d7e:	f7fb ffc7 	bl	21d10 <lv_obj_init_draw_label_dsc>
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   25d82:	7c23      	ldrb	r3, [r4, #16]
   25d84:	f003 0207 	and.w	r2, r3, #7
   25d88:	3a03      	subs	r2, #3
   25d8a:	2a01      	cmp	r2, #1
   25d8c:	d824      	bhi.n	25dd8 <lv_label_design+0x142>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   25d8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   25d92:	2b10      	cmp	r3, #16
   25d94:	d001      	beq.n	25d9a <lv_label_design+0x104>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   25d96:	2b20      	cmp	r3, #32
   25d98:	d11e      	bne.n	25dd8 <lv_label_design+0x142>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
   25d9a:	f647 4318 	movw	r3, #31768	; 0x7c18
   25d9e:	9301      	str	r3, [sp, #4]
   25da0:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
   25da4:	9300      	str	r3, [sp, #0]
   25da6:	9502      	str	r5, [sp, #8]
   25da8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   25dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   25dae:	6821      	ldr	r1, [r4, #0]
   25db0:	a804      	add	r0, sp, #16
   25db2:	f7ff fe18 	bl	259e6 <_lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   25db6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25dba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   25dbe:	3301      	adds	r3, #1
   25dc0:	1a9b      	subs	r3, r3, r2
            if(size.x > lv_area_get_width(&txt_coords)) {
   25dc2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   25dc6:	b21b      	sxth	r3, r3
   25dc8:	429a      	cmp	r2, r3
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
   25dca:	bfc2      	ittt	gt
   25dcc:	f89d 3049 	ldrbgt.w	r3, [sp, #73]	; 0x49
   25dd0:	f023 030c 	bicgt.w	r3, r3, #12
   25dd4:	f88d 3049 	strbgt.w	r3, [sp, #73]	; 0x49
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   25dd8:	2700      	movs	r7, #0
   25dda:	9700      	str	r7, [sp, #0]
   25ddc:	6823      	ldr	r3, [r4, #0]
   25dde:	aa0b      	add	r2, sp, #44	; 0x2c
   25de0:	a909      	add	r1, sp, #36	; 0x24
   25de2:	a807      	add	r0, sp, #28
   25de4:	f7f1 fa16 	bl	17214 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
   25de8:	7c23      	ldrb	r3, [r4, #16]
   25dea:	f003 0307 	and.w	r3, r3, #7
   25dee:	2b04      	cmp	r3, #4
   25df0:	d14c      	bne.n	25e8c <lv_label_design+0x1f6>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
   25df2:	f647 4318 	movw	r3, #31768	; 0x7c18
   25df6:	9301      	str	r3, [sp, #4]
   25df8:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
   25dfc:	9300      	str	r3, [sp, #0]
   25dfe:	9502      	str	r5, [sp, #8]
   25e00:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   25e04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   25e06:	6821      	ldr	r1, [r4, #0]
   25e08:	a804      	add	r0, sp, #16
   25e0a:	f7ff fdec 	bl	259e6 <_lv_txt_get_size>
   25e0e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   25e12:	f8bd 101c 	ldrh.w	r1, [sp, #28]
            if(size.x > lv_area_get_width(&txt_coords)) {
   25e16:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   25e1a:	3201      	adds	r2, #1
   25e1c:	1a52      	subs	r2, r2, r1
   25e1e:	b212      	sxth	r2, r2
   25e20:	4293      	cmp	r3, r2
   25e22:	dd16      	ble.n	25e52 <lv_label_design+0x1bc>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   25e24:	89a5      	ldrh	r5, [r4, #12]
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   25e26:	980c      	ldr	r0, [sp, #48]	; 0x30
   25e28:	2220      	movs	r2, #32
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   25e2a:	442b      	add	r3, r5
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   25e2c:	4611      	mov	r1, r2
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   25e2e:	b21d      	sxth	r5, r3
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   25e30:	f7ff fe60 	bl	25af4 <lv_font_get_glyph_width>
                label_draw_dsc.ofs_y = ext->offset.y;
   25e34:	89e3      	ldrh	r3, [r4, #14]
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   25e36:	9700      	str	r7, [sp, #0]
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   25e38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   25e3c:	4405      	add	r5, r0
                label_draw_dsc.ofs_y = ext->offset.y;
   25e3e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   25e42:	aa0b      	add	r2, sp, #44	; 0x2c
   25e44:	6823      	ldr	r3, [r4, #0]
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   25e46:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   25e4a:	a909      	add	r1, sp, #36	; 0x24
   25e4c:	a807      	add	r0, sp, #28
   25e4e:	f7f1 f9e1 	bl	17214 <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   25e52:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   25e56:	f8bd 101e 	ldrh.w	r1, [sp, #30]
            if(size.y > lv_area_get_height(&txt_coords)) {
   25e5a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
   25e5e:	3301      	adds	r3, #1
   25e60:	1a5b      	subs	r3, r3, r1
   25e62:	b21b      	sxth	r3, r3
   25e64:	429a      	cmp	r2, r3
   25e66:	dd11      	ble.n	25e8c <lv_label_design+0x1f6>
                label_draw_dsc.ofs_x = ext->offset.x;
   25e68:	89a3      	ldrh	r3, [r4, #12]
   25e6a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
   25e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25e70:	891b      	ldrh	r3, [r3, #8]
   25e72:	441a      	add	r2, r3
   25e74:	89e3      	ldrh	r3, [r4, #14]
   25e76:	441a      	add	r2, r3
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   25e78:	2300      	movs	r3, #0
   25e7a:	9300      	str	r3, [sp, #0]
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
   25e7c:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   25e80:	6823      	ldr	r3, [r4, #0]
   25e82:	aa0b      	add	r2, sp, #44	; 0x2c
   25e84:	a909      	add	r1, sp, #36	; 0x24
   25e86:	a807      	add	r0, sp, #28
   25e88:	f7f1 f9c4 	bl	17214 <lv_draw_label>
}
   25e8c:	4630      	mov	r0, r6
   25e8e:	b027      	add	sp, #156	; 0x9c
   25e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   25e94:	2802      	cmp	r0, #2
   25e96:	bf08      	it	eq
   25e98:	f045 0508 	orreq.w	r5, r5, #8
   25e9c:	e75d      	b.n	25d5a <lv_label_design+0xc4>
    return LV_DESIGN_RES_OK;
   25e9e:	2600      	movs	r6, #0
   25ea0:	e7f4      	b.n	25e8c <lv_label_design+0x1f6>

00025ea2 <lv_label_get_recolor>:
{
   25ea2:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25ea4:	f7fb fda3 	bl	219ee <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
   25ea8:	7c00      	ldrb	r0, [r0, #16]
}
   25eaa:	f3c0 1080 	ubfx	r0, r0, #6, #1
   25eae:	bd08      	pop	{r3, pc}

00025eb0 <lv_label_set_text>:
{
   25eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25eb4:	4607      	mov	r7, r0
   25eb6:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
   25eb8:	f7fb fa84 	bl	213c4 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25ebc:	4638      	mov	r0, r7
   25ebe:	f7fb fd96 	bl	219ee <lv_obj_get_ext_attr>
   25ec2:	4604      	mov	r4, r0
    if(text == NULL) {
   25ec4:	b925      	cbnz	r5, 25ed0 <lv_label_set_text+0x20>
        lv_label_refr_text(label);
   25ec6:	4638      	mov	r0, r7
}
   25ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_label_refr_text(label);
   25ecc:	f7f3 bf8c 	b.w	19de8 <lv_label_refr_text>
    if(ext->text == text && ext->static_txt == 0) {
   25ed0:	6806      	ldr	r6, [r0, #0]
   25ed2:	42ae      	cmp	r6, r5
   25ed4:	d10e      	bne.n	25ef4 <lv_label_set_text+0x44>
   25ed6:	7c03      	ldrb	r3, [r0, #16]
   25ed8:	071b      	lsls	r3, r3, #28
   25eda:	d415      	bmi.n	25f08 <lv_label_set_text+0x58>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
   25edc:	4630      	mov	r0, r6
   25ede:	f7da fad5 	bl	48c <strlen>
   25ee2:	1c41      	adds	r1, r0, #1
   25ee4:	4630      	mov	r0, r6
   25ee6:	f7ff fd05 	bl	258f4 <lv_mem_realloc>
   25eea:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
   25eec:	2800      	cmp	r0, #0
   25eee:	d1ea      	bne.n	25ec6 <lv_label_set_text+0x16>
}
   25ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(ext->text != NULL && ext->static_txt == 0) {
   25ef4:	b146      	cbz	r6, 25f08 <lv_label_set_text+0x58>
   25ef6:	7c03      	ldrb	r3, [r0, #16]
   25ef8:	f013 0808 	ands.w	r8, r3, #8
   25efc:	d104      	bne.n	25f08 <lv_label_set_text+0x58>
            lv_mem_free(ext->text);
   25efe:	4630      	mov	r0, r6
   25f00:	f7f2 feb6 	bl	18c70 <lv_mem_free>
            ext->text = NULL;
   25f04:	f8c4 8000 	str.w	r8, [r4]
        size_t len = strlen(text) + 1;
   25f08:	4628      	mov	r0, r5
   25f0a:	f7da fabf 	bl	48c <strlen>
        ext->text = lv_mem_alloc(len);
   25f0e:	3001      	adds	r0, #1
   25f10:	f7f2 fe9a 	bl	18c48 <lv_mem_alloc>
   25f14:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
   25f16:	2800      	cmp	r0, #0
   25f18:	d0ea      	beq.n	25ef0 <lv_label_set_text+0x40>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   25f1a:	4629      	mov	r1, r5
   25f1c:	f000 fdc0 	bl	26aa0 <strcpy>
        ext->static_txt = 0;
   25f20:	7c23      	ldrb	r3, [r4, #16]
   25f22:	f36f 03c3 	bfc	r3, #3, #1
   25f26:	7423      	strb	r3, [r4, #16]
   25f28:	e7cd      	b.n	25ec6 <lv_label_set_text+0x16>

00025f2a <lv_label_set_text_static>:
{
   25f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25f2c:	4607      	mov	r7, r0
   25f2e:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25f30:	f7fb fd5d 	bl	219ee <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
   25f34:	7c03      	ldrb	r3, [r0, #16]
   25f36:	f013 0608 	ands.w	r6, r3, #8
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25f3a:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
   25f3c:	d104      	bne.n	25f48 <lv_label_set_text_static+0x1e>
   25f3e:	6800      	ldr	r0, [r0, #0]
   25f40:	b110      	cbz	r0, 25f48 <lv_label_set_text_static+0x1e>
        lv_mem_free(ext->text);
   25f42:	f7f2 fe95 	bl	18c70 <lv_mem_free>
        ext->text = NULL;
   25f46:	6026      	str	r6, [r4, #0]
    if(text != NULL) {
   25f48:	b125      	cbz	r5, 25f54 <lv_label_set_text_static+0x2a>
        ext->static_txt = 1;
   25f4a:	7c23      	ldrb	r3, [r4, #16]
        ext->text       = (char *)text;
   25f4c:	6025      	str	r5, [r4, #0]
        ext->static_txt = 1;
   25f4e:	f043 0308 	orr.w	r3, r3, #8
   25f52:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
   25f54:	4638      	mov	r0, r7
}
   25f56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
   25f5a:	f7f3 bf45 	b.w	19de8 <lv_label_refr_text>

00025f5e <lv_label_set_long_mode>:
{
   25f5e:	b570      	push	{r4, r5, r6, lr}
   25f60:	460e      	mov	r6, r1
   25f62:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25f64:	f7fb fd43 	bl	219ee <lv_obj_get_ext_attr>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   25f68:	1ef2      	subs	r2, r6, #3
    ext->offset.x = 0;
   25f6a:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   25f6c:	2a02      	cmp	r2, #2
    ext->offset.x = 0;
   25f6e:	60c3      	str	r3, [r0, #12]
   25f70:	7c03      	ldrb	r3, [r0, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   25f72:	bf8c      	ite	hi
   25f74:	2200      	movhi	r2, #0
   25f76:	2201      	movls	r2, #1
   25f78:	f362 13c7 	bfi	r3, r2, #7, #1
   25f7c:	7403      	strb	r3, [r0, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   25f7e:	f003 0307 	and.w	r3, r3, #7
   25f82:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25f84:	4604      	mov	r4, r0
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   25f86:	d107      	bne.n	25f98 <lv_label_set_long_mode+0x3a>
   25f88:	6882      	ldr	r2, [r0, #8]
   25f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25f8e:	429a      	cmp	r2, r3
   25f90:	d002      	beq.n	25f98 <lv_label_set_long_mode+0x3a>
        lv_label_revert_dots(label);
   25f92:	4628      	mov	r0, r5
   25f94:	f7f3 fdd6 	bl	19b44 <lv_label_revert_dots>
    ext->long_mode = long_mode;
   25f98:	7c23      	ldrb	r3, [r4, #16]
   25f9a:	f366 0302 	bfi	r3, r6, #0, #3
   25f9e:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
   25fa0:	4628      	mov	r0, r5
}
   25fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
   25fa6:	f7f3 bf1f 	b.w	19de8 <lv_label_refr_text>

00025faa <lv_label_set_recolor>:
{
   25faa:	b538      	push	{r3, r4, r5, lr}
   25fac:	460c      	mov	r4, r1
   25fae:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   25fb0:	f7fb fd1d 	bl	219ee <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
   25fb4:	7c03      	ldrb	r3, [r0, #16]
   25fb6:	f3c3 1280 	ubfx	r2, r3, #6, #1
   25fba:	42a2      	cmp	r2, r4
   25fbc:	d007      	beq.n	25fce <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
   25fbe:	f364 1386 	bfi	r3, r4, #6, #1
   25fc2:	7403      	strb	r3, [r0, #16]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
   25fc4:	4628      	mov	r0, r5
}
   25fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
   25fca:	f7f3 bf0d 	b.w	19de8 <lv_label_refr_text>
}
   25fce:	bd38      	pop	{r3, r4, r5, pc}

00025fd0 <device_pm_control_nop>:
			  void *unused_context,
			  device_pm_cb cb,
			  void *unused_arg)
{
	return -ENOTSUP;
}
   25fd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25fd4:	4770      	bx	lr

00025fd6 <arch_system_halt>:
	__asm__ volatile(
   25fd6:	f04f 0220 	mov.w	r2, #32
   25fda:	f3ef 8311 	mrs	r3, BASEPRI
   25fde:	f382 8811 	msr	BASEPRI, r2
   25fe2:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   25fe6:	e7fe      	b.n	25fe6 <arch_system_halt+0x10>

00025fe8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   25fe8:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   25fea:	f7ff fff4 	bl	25fd6 <arch_system_halt>

00025fee <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   25fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25ff0:	4605      	mov	r5, r0
   25ff2:	460e      	mov	r6, r1
   25ff4:	f04f 0320 	mov.w	r3, #32
   25ff8:	f3ef 8711 	mrs	r7, BASEPRI
   25ffc:	f383 8811 	msr	BASEPRI, r3
   26000:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   26004:	f7f4 ffb8 	bl	1af78 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   26008:	4631      	mov	r1, r6
   2600a:	4604      	mov	r4, r0
   2600c:	4628      	mov	r0, r5
   2600e:	f7ff ffeb 	bl	25fe8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   26012:	f387 8811 	msr	BASEPRI, r7
   26016:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2601a:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   2601c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26020:	f7de bcee 	b.w	4a00 <z_impl_k_thread_abort>

00026024 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   26024:	f7f8 bb86 	b.w	1e734 <z_clock_idle_exit>

00026028 <k_heap_init>:
{
   26028:	b410      	push	{r4}
   2602a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2602e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   26032:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   26034:	f7f8 b961 	b.w	1e2fa <sys_heap_init>

00026038 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   26038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2603c:	4604      	mov	r4, r0
   2603e:	b085      	sub	sp, #20
   26040:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   26042:	4610      	mov	r0, r2
   26044:	4619      	mov	r1, r3
   26046:	f000 fb27 	bl	26698 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2604a:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   2604e:	4605      	mov	r5, r0
   26050:	460f      	mov	r7, r1
	__asm__ volatile(
   26052:	f04f 0220 	mov.w	r2, #32
   26056:	f3ef 8311 	mrs	r3, BASEPRI
   2605a:	f382 8811 	msr	BASEPRI, r2
   2605e:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   26062:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   26066:	4631      	mov	r1, r6
   26068:	4620      	mov	r0, r4
   2606a:	9303      	str	r3, [sp, #12]
   2606c:	f7f8 f911 	bl	1e292 <sys_heap_alloc>
   26070:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   26072:	f7f5 fa67 	bl	1b544 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   26076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2607a:	b13a      	cbz	r2, 2608c <k_heap_alloc+0x54>
	__asm__ volatile(
   2607c:	f383 8811 	msr	BASEPRI, r3
   26080:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   26084:	4610      	mov	r0, r2
   26086:	b005      	add	sp, #20
   26088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   2608c:	ebb5 0800 	subs.w	r8, r5, r0
   26090:	eb67 0901 	sbc.w	r9, r7, r1
   26094:	f1b8 0f01 	cmp.w	r8, #1
   26098:	f179 0100 	sbcs.w	r1, r9, #0
   2609c:	dbee      	blt.n	2607c <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2609e:	e9cd 8900 	strd	r8, r9, [sp]
   260a2:	465a      	mov	r2, fp
   260a4:	4619      	mov	r1, r3
   260a6:	4650      	mov	r0, sl
   260a8:	f7f4 fe66 	bl	1ad78 <z_pend_curr>
	__asm__ volatile(
   260ac:	f04f 0220 	mov.w	r2, #32
   260b0:	f3ef 8311 	mrs	r3, BASEPRI
   260b4:	f382 8811 	msr	BASEPRI, r2
   260b8:	f3bf 8f6f 	isb	sy
   260bc:	e7d3      	b.n	26066 <k_heap_alloc+0x2e>

000260be <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   260be:	b538      	push	{r3, r4, r5, lr}
   260c0:	4604      	mov	r4, r0
   260c2:	f04f 0320 	mov.w	r3, #32
   260c6:	f3ef 8511 	mrs	r5, BASEPRI
   260ca:	f383 8811 	msr	BASEPRI, r3
   260ce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   260d2:	f7f8 f88b 	bl	1e1ec <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   260d6:	f104 000c 	add.w	r0, r4, #12
   260da:	f000 f9ea 	bl	264b2 <z_unpend_all>
   260de:	b130      	cbz	r0, 260ee <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   260e0:	4629      	mov	r1, r5
   260e2:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   260e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   260ea:	f7f4 bbfd 	b.w	1a8e8 <z_reschedule>
	__asm__ volatile(
   260ee:	f385 8811 	msr	BASEPRI, r5
   260f2:	f3bf 8f6f 	isb	sy
}
   260f6:	bd38      	pop	{r3, r4, r5, pc}

000260f8 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   260f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   260fa:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   260fe:	6800      	ldr	r0, [r0, #0]
   26100:	6048      	str	r0, [r1, #4]
{
   26102:	4614      	mov	r4, r2
   26104:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   26106:	4632      	mov	r2, r6
   26108:	463b      	mov	r3, r7
   2610a:	4621      	mov	r1, r4
   2610c:	f7ff ff94 	bl	26038 <k_heap_alloc>
   26110:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   26112:	b144      	cbz	r4, 26126 <k_mem_pool_alloc+0x2e>
   26114:	b938      	cbnz	r0, 26126 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   26116:	ea56 0307 	orrs.w	r3, r6, r7
   2611a:	bf0c      	ite	eq
   2611c:	f06f 000b 	mvneq.w	r0, #11
   26120:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   26124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   26126:	2000      	movs	r0, #0
   26128:	e7fc      	b.n	26124 <k_mem_pool_alloc+0x2c>

0002612a <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   2612a:	e9d0 1000 	ldrd	r1, r0, [r0]
   2612e:	f7ff bfc6 	b.w	260be <k_heap_free>

00026132 <z_impl_k_mutex_init>:
{
   26132:	4603      	mov	r3, r0
	mutex->owner = NULL;
   26134:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   26136:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2613a:	e9c3 3300 	strd	r3, r3, [r3]
}
   2613e:	4770      	bx	lr

00026140 <queue_insert>:
{
   26140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26144:	4699      	mov	r9, r3
   26146:	4604      	mov	r4, r0
   26148:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2614c:	460d      	mov	r5, r1
   2614e:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26150:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   26154:	f04f 0220 	mov.w	r2, #32
   26158:	f3ef 8711 	mrs	r7, BASEPRI
   2615c:	f382 8811 	msr	BASEPRI, r2
   26160:	f3bf 8f6f 	isb	sy
	if (is_append) {
   26164:	b103      	cbz	r3, 26168 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   26166:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   26168:	4630      	mov	r0, r6
   2616a:	f000 f97d 	bl	26468 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2616e:	b160      	cbz	r0, 2618a <queue_insert+0x4a>
   26170:	2400      	movs	r4, #0
   26172:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   26176:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2617a:	f000 f91a 	bl	263b2 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2617e:	4630      	mov	r0, r6
   26180:	4639      	mov	r1, r7
   26182:	f7f4 fbb1 	bl	1a8e8 <z_reschedule>
	return 0;
   26186:	2000      	movs	r0, #0
   26188:	e00c      	b.n	261a4 <queue_insert+0x64>
	if (alloc) {
   2618a:	f1b9 0f00 	cmp.w	r9, #0
   2618e:	d01b      	beq.n	261c8 <queue_insert+0x88>
		anode = z_thread_malloc(sizeof(*anode));
   26190:	2008      	movs	r0, #8
   26192:	f7f5 faf7 	bl	1b784 <z_thread_malloc>
		if (anode == NULL) {
   26196:	b938      	cbnz	r0, 261a8 <queue_insert+0x68>
	__asm__ volatile(
   26198:	f387 8811 	msr	BASEPRI, r7
   2619c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   261a0:	f06f 000b 	mvn.w	r0, #11
}
   261a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   261a8:	2301      	movs	r3, #1
		anode->data = data;
   261aa:	f8c0 8004 	str.w	r8, [r0, #4]
   261ae:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   261b0:	6803      	ldr	r3, [r0, #0]
   261b2:	f003 0203 	and.w	r2, r3, #3
   261b6:	b95d      	cbnz	r5, 261d0 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   261b8:	6823      	ldr	r3, [r4, #0]
   261ba:	4313      	orrs	r3, r2
   261bc:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   261be:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   261c0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   261c2:	b973      	cbnz	r3, 261e2 <queue_insert+0xa2>
	list->tail = node;
   261c4:	6060      	str	r0, [r4, #4]
}
   261c6:	e00c      	b.n	261e2 <queue_insert+0xa2>
	node->next_and_flags = flags;
   261c8:	f8c8 9000 	str.w	r9, [r8]
}
   261cc:	4640      	mov	r0, r8
   261ce:	e7ef      	b.n	261b0 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   261d0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   261d2:	f033 0303 	bics.w	r3, r3, #3
   261d6:	d110      	bne.n	261fa <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   261d8:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   261da:	6862      	ldr	r2, [r4, #4]
   261dc:	b93a      	cbnz	r2, 261ee <queue_insert+0xae>
	list->head = node;
   261de:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   261e2:	2104      	movs	r1, #4
   261e4:	f104 0010 	add.w	r0, r4, #16
   261e8:	f000 fbf1 	bl	269ce <z_handle_obj_poll_events>
   261ec:	e7c7      	b.n	2617e <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   261ee:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   261f0:	f003 0303 	and.w	r3, r3, #3
   261f4:	4303      	orrs	r3, r0
   261f6:	6013      	str	r3, [r2, #0]
   261f8:	e7e4      	b.n	261c4 <queue_insert+0x84>
   261fa:	4313      	orrs	r3, r2
   261fc:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   261fe:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26200:	f003 0303 	and.w	r3, r3, #3
   26204:	4303      	orrs	r3, r0
   26206:	602b      	str	r3, [r5, #0]
}
   26208:	e7eb      	b.n	261e2 <queue_insert+0xa2>

0002620a <z_queue_node_peek>:
{
   2620a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2620c:	4604      	mov	r4, r0
   2620e:	b130      	cbz	r0, 2621e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26210:	6802      	ldr	r2, [r0, #0]
   26212:	0793      	lsls	r3, r2, #30
   26214:	d003      	beq.n	2621e <z_queue_node_peek+0x14>
		ret = anode->data;
   26216:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   26218:	b109      	cbz	r1, 2621e <z_queue_node_peek+0x14>
			k_free(anode);
   2621a:	f000 fbfe 	bl	26a1a <k_free>
}
   2621e:	4620      	mov	r0, r4
   26220:	bd10      	pop	{r4, pc}

00026222 <z_impl_k_queue_init>:
	list->head = NULL;
   26222:	2300      	movs	r3, #0
	list->tail = NULL;
   26224:	e9c0 3300 	strd	r3, r3, [r0]
   26228:	f100 0308 	add.w	r3, r0, #8
   2622c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   26230:	f100 0310 	add.w	r3, r0, #16
   26234:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   26238:	4770      	bx	lr

0002623a <k_queue_append>:
{
   2623a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2623c:	2301      	movs	r3, #1
   2623e:	9300      	str	r3, [sp, #0]
   26240:	2300      	movs	r3, #0
{
   26242:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   26244:	4619      	mov	r1, r3
   26246:	f7ff ff7b 	bl	26140 <queue_insert>
}
   2624a:	b003      	add	sp, #12
   2624c:	f85d fb04 	ldr.w	pc, [sp], #4

00026250 <k_queue_prepend>:
{
   26250:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   26252:	2300      	movs	r3, #0
{
   26254:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   26256:	9300      	str	r3, [sp, #0]
   26258:	4619      	mov	r1, r3
   2625a:	f7ff ff71 	bl	26140 <queue_insert>
}
   2625e:	b003      	add	sp, #12
   26260:	f85d fb04 	ldr.w	pc, [sp], #4

00026264 <k_queue_append_list>:
{
   26264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26268:	4605      	mov	r5, r0
   2626a:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2626c:	460c      	mov	r4, r1
   2626e:	b391      	cbz	r1, 262d6 <k_queue_append_list+0x72>
   26270:	b38a      	cbz	r2, 262d6 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26272:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   26276:	f04f 0320 	mov.w	r3, #32
   2627a:	f3ef 8811 	mrs	r8, BASEPRI
   2627e:	f383 8811 	msr	BASEPRI, r3
   26282:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   26286:	4638      	mov	r0, r7
   26288:	f000 f8ee 	bl	26468 <z_unpend_first_thread>
   2628c:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   26290:	b920      	cbnz	r0, 2629c <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   26292:	686b      	ldr	r3, [r5, #4]
   26294:	b9cb      	cbnz	r3, 262ca <k_queue_append_list+0x66>
	list->head = node;
   26296:	602c      	str	r4, [r5, #0]
	list->tail = node;
   26298:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2629a:	e00a      	b.n	262b2 <k_queue_append_list+0x4e>
   2629c:	6144      	str	r4, [r0, #20]
   2629e:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   262a2:	f000 f886 	bl	263b2 <z_ready_thread>
		head = *(void **)head;
   262a6:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   262a8:	4638      	mov	r0, r7
   262aa:	f000 f8dd 	bl	26468 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   262ae:	2c00      	cmp	r4, #0
   262b0:	d1ee      	bne.n	26290 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   262b2:	2104      	movs	r1, #4
   262b4:	f105 0010 	add.w	r0, r5, #16
   262b8:	f000 fb89 	bl	269ce <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   262bc:	4638      	mov	r0, r7
   262be:	4641      	mov	r1, r8
   262c0:	f7f4 fb12 	bl	1a8e8 <z_reschedule>
	return 0;
   262c4:	2000      	movs	r0, #0
}
   262c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   262ca:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   262cc:	f001 0103 	and.w	r1, r1, #3
   262d0:	430c      	orrs	r4, r1
   262d2:	601c      	str	r4, [r3, #0]
}
   262d4:	e7e0      	b.n	26298 <k_queue_append_list+0x34>
		return -EINVAL;
   262d6:	f06f 0015 	mvn.w	r0, #21
   262da:	e7f4      	b.n	262c6 <k_queue_append_list+0x62>

000262dc <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   262dc:	f990 000e 	ldrsb.w	r0, [r0, #14]
   262e0:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   262e4:	4298      	cmp	r0, r3
   262e6:	bfac      	ite	ge
   262e8:	2000      	movge	r0, #0
   262ea:	2001      	movlt	r0, #1
   262ec:	4770      	bx	lr

000262ee <z_find_first_thread_to_unpend>:
{
   262ee:	b510      	push	{r4, lr}
   262f0:	f04f 0320 	mov.w	r3, #32
   262f4:	f3ef 8411 	mrs	r4, BASEPRI
   262f8:	f383 8811 	msr	BASEPRI, r3
   262fc:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   26300:	f000 f84d 	bl	2639e <z_priq_dumb_best>
	__asm__ volatile(
   26304:	f384 8811 	msr	BASEPRI, r4
   26308:	f3bf 8f6f 	isb	sy
}
   2630c:	bd10      	pop	{r4, pc}

0002630e <z_unpend_thread_no_timeout>:
{
   2630e:	b510      	push	{r4, lr}
	__asm__ volatile(
   26310:	f04f 0320 	mov.w	r3, #32
   26314:	f3ef 8411 	mrs	r4, BASEPRI
   26318:	f383 8811 	msr	BASEPRI, r3
   2631c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   26320:	f000 f81b 	bl	2635a <unpend_thread_no_timeout>
	__asm__ volatile(
   26324:	f384 8811 	msr	BASEPRI, r4
   26328:	f3bf 8f6f 	isb	sy
}
   2632c:	bd10      	pop	{r4, pc}

0002632e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2632e:	4603      	mov	r3, r0
   26330:	b920      	cbnz	r0, 2633c <z_reschedule_irqlock+0xe>
   26332:	f3ef 8205 	mrs	r2, IPSR
   26336:	b90a      	cbnz	r2, 2633c <z_reschedule_irqlock+0xe>
   26338:	f7de b916 	b.w	4568 <arch_swap>
   2633c:	f383 8811 	msr	BASEPRI, r3
   26340:	f3bf 8f6f 	isb	sy
}
   26344:	4770      	bx	lr

00026346 <z_reschedule_unlocked>:
	__asm__ volatile(
   26346:	f04f 0320 	mov.w	r3, #32
   2634a:	f3ef 8011 	mrs	r0, BASEPRI
   2634e:	f383 8811 	msr	BASEPRI, r3
   26352:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26356:	f7ff bfea 	b.w	2632e <z_reschedule_irqlock>

0002635a <unpend_thread_no_timeout>:
{
   2635a:	4601      	mov	r1, r0
   2635c:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2635e:	6880      	ldr	r0, [r0, #8]
   26360:	f7f4 fae8 	bl	1a934 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26364:	7b4b      	ldrb	r3, [r1, #13]
   26366:	f023 0302 	bic.w	r3, r3, #2
   2636a:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   2636c:	2300      	movs	r3, #0
   2636e:	608b      	str	r3, [r1, #8]
}
   26370:	bd08      	pop	{r3, pc}

00026372 <z_unpend_thread>:
{
   26372:	b538      	push	{r3, r4, r5, lr}
   26374:	4604      	mov	r4, r0
   26376:	f04f 0320 	mov.w	r3, #32
   2637a:	f3ef 8511 	mrs	r5, BASEPRI
   2637e:	f383 8811 	msr	BASEPRI, r3
   26382:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   26386:	f7ff ffe8 	bl	2635a <unpend_thread_no_timeout>
	__asm__ volatile(
   2638a:	f385 8811 	msr	BASEPRI, r5
   2638e:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   26392:	f104 0018 	add.w	r0, r4, #24
}
   26396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2639a:	f000 b937 	b.w	2660c <z_abort_timeout>

0002639e <z_priq_dumb_best>:
{
   2639e:	4603      	mov	r3, r0
	return list->head == list;
   263a0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   263a2:	4283      	cmp	r3, r0
   263a4:	d003      	beq.n	263ae <z_priq_dumb_best+0x10>
	if (n != NULL) {
   263a6:	2800      	cmp	r0, #0
   263a8:	bf38      	it	cc
   263aa:	2000      	movcc	r0, #0
   263ac:	4770      	bx	lr
	struct k_thread *thread = NULL;
   263ae:	2000      	movs	r0, #0
}
   263b0:	4770      	bx	lr

000263b2 <z_ready_thread>:
{
   263b2:	b510      	push	{r4, lr}
	__asm__ volatile(
   263b4:	f04f 0320 	mov.w	r3, #32
   263b8:	f3ef 8411 	mrs	r4, BASEPRI
   263bc:	f383 8811 	msr	BASEPRI, r3
   263c0:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   263c4:	f7f4 fb10 	bl	1a9e8 <ready_thread>
	__asm__ volatile(
   263c8:	f384 8811 	msr	BASEPRI, r4
   263cc:	f3bf 8f6f 	isb	sy
}
   263d0:	bd10      	pop	{r4, pc}

000263d2 <z_thread_timeout>:
{
   263d2:	b570      	push	{r4, r5, r6, lr}
   263d4:	4604      	mov	r4, r0
	__asm__ volatile(
   263d6:	f04f 0320 	mov.w	r3, #32
   263da:	f3ef 8611 	mrs	r6, BASEPRI
   263de:	f383 8811 	msr	BASEPRI, r3
   263e2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   263e6:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   263ea:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   263ee:	b113      	cbz	r3, 263f6 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   263f0:	4628      	mov	r0, r5
   263f2:	f7ff ffb2 	bl	2635a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   263f6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   263fa:	f023 0314 	bic.w	r3, r3, #20
   263fe:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   26402:	4628      	mov	r0, r5
   26404:	f7f4 faf0 	bl	1a9e8 <ready_thread>
	__asm__ volatile(
   26408:	f386 8811 	msr	BASEPRI, r6
   2640c:	f3bf 8f6f 	isb	sy
}
   26410:	bd70      	pop	{r4, r5, r6, pc}

00026412 <add_to_waitq_locked>:
{
   26412:	b538      	push	{r3, r4, r5, lr}
   26414:	4604      	mov	r4, r0
   26416:	460d      	mov	r5, r1
	unready_thread(thread);
   26418:	f7f4 fc6e 	bl	1acf8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2641c:	7b63      	ldrb	r3, [r4, #13]
   2641e:	f043 0302 	orr.w	r3, r3, #2
   26422:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   26424:	b1c5      	cbz	r5, 26458 <add_to_waitq_locked+0x46>
	return list->head == list;
   26426:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   26428:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2642a:	429d      	cmp	r5, r3
   2642c:	bf08      	it	eq
   2642e:	2300      	moveq	r3, #0
   26430:	2b00      	cmp	r3, #0
   26432:	bf38      	it	cc
   26434:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26436:	b183      	cbz	r3, 2645a <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   26438:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2643c:	f993 200e 	ldrsb.w	r2, [r3, #14]
   26440:	4291      	cmp	r1, r2
   26442:	db04      	blt.n	2644e <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   26444:	686a      	ldr	r2, [r5, #4]
   26446:	429a      	cmp	r2, r3
   26448:	d007      	beq.n	2645a <add_to_waitq_locked+0x48>
   2644a:	681b      	ldr	r3, [r3, #0]
   2644c:	e7f3      	b.n	26436 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   2644e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26450:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   26454:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26456:	605c      	str	r4, [r3, #4]
}
   26458:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   2645a:	686b      	ldr	r3, [r5, #4]
   2645c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2645e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   26460:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   26462:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26464:	606c      	str	r4, [r5, #4]
   26466:	e7f7      	b.n	26458 <add_to_waitq_locked+0x46>

00026468 <z_unpend_first_thread>:
{
   26468:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2646a:	f04f 0320 	mov.w	r3, #32
   2646e:	f3ef 8211 	mrs	r2, BASEPRI
   26472:	f383 8811 	msr	BASEPRI, r3
   26476:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2647a:	f7ff ff90 	bl	2639e <z_priq_dumb_best>
   2647e:	4604      	mov	r4, r0
	__asm__ volatile(
   26480:	f382 8811 	msr	BASEPRI, r2
   26484:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   26488:	b188      	cbz	r0, 264ae <z_unpend_first_thread+0x46>
	__asm__ volatile(
   2648a:	f04f 0320 	mov.w	r3, #32
   2648e:	f3ef 8511 	mrs	r5, BASEPRI
   26492:	f383 8811 	msr	BASEPRI, r3
   26496:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2649a:	f7ff ff5e 	bl	2635a <unpend_thread_no_timeout>
	__asm__ volatile(
   2649e:	f385 8811 	msr	BASEPRI, r5
   264a2:	f3bf 8f6f 	isb	sy
   264a6:	f104 0018 	add.w	r0, r4, #24
   264aa:	f000 f8af 	bl	2660c <z_abort_timeout>
}
   264ae:	4620      	mov	r0, r4
   264b0:	bd38      	pop	{r3, r4, r5, pc}

000264b2 <z_unpend_all>:
{
   264b2:	b538      	push	{r3, r4, r5, lr}
   264b4:	4605      	mov	r5, r0
	int need_sched = 0;
   264b6:	2000      	movs	r0, #0
	return list->head == list;
   264b8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   264ba:	42a5      	cmp	r5, r4
   264bc:	d000      	beq.n	264c0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   264be:	b904      	cbnz	r4, 264c2 <z_unpend_all+0x10>
}
   264c0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   264c2:	4620      	mov	r0, r4
   264c4:	f7ff ff55 	bl	26372 <z_unpend_thread>
		z_ready_thread(thread);
   264c8:	4620      	mov	r0, r4
   264ca:	f7ff ff72 	bl	263b2 <z_ready_thread>
		need_sched = 1;
   264ce:	2001      	movs	r0, #1
   264d0:	e7f2      	b.n	264b8 <z_unpend_all+0x6>

000264d2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   264d2:	b15a      	cbz	r2, 264ec <z_impl_k_sem_init+0x1a>
   264d4:	428a      	cmp	r2, r1
   264d6:	d309      	bcc.n	264ec <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   264d8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   264dc:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   264e0:	e9c0 0000 	strd	r0, r0, [r0]
   264e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   264e8:	2000      	movs	r0, #0
   264ea:	4770      	bx	lr
		return -EINVAL;
   264ec:	f06f 0015 	mvn.w	r0, #21
}
   264f0:	4770      	bx	lr

000264f2 <k_is_in_isr>:
   264f2:	f3ef 8005 	mrs	r0, IPSR
}
   264f6:	3800      	subs	r0, #0
   264f8:	bf18      	it	ne
   264fa:	2001      	movne	r0, #1
   264fc:	4770      	bx	lr

000264fe <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   264fe:	b108      	cbz	r0, 26504 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   26500:	f7de bc32 	b.w	4d68 <arch_busy_wait>
}
   26504:	4770      	bx	lr

00026506 <z_impl_k_thread_name_set>:
}
   26506:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2650a:	4770      	bx	lr

0002650c <k_work_submit_to_queue>:
{
   2650c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2650e:	f101 0308 	add.w	r3, r1, #8
   26512:	f3bf 8f5b 	dmb	ish
   26516:	e853 2f00 	ldrex	r2, [r3]
   2651a:	f042 0c01 	orr.w	ip, r2, #1
   2651e:	e843 ce00 	strex	lr, ip, [r3]
   26522:	f1be 0f00 	cmp.w	lr, #0
   26526:	d1f6      	bne.n	26516 <k_work_submit_to_queue+0xa>
   26528:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2652c:	07d3      	lsls	r3, r2, #31
   2652e:	d403      	bmi.n	26538 <k_work_submit_to_queue+0x2c>
}
   26530:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   26534:	f7ff be81 	b.w	2623a <k_queue_append>
}
   26538:	f85d fb04 	ldr.w	pc, [sp], #4

0002653c <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2653c:	f1a0 0110 	sub.w	r1, r0, #16
   26540:	6980      	ldr	r0, [r0, #24]
   26542:	f7ff bfe3 	b.w	2650c <k_work_submit_to_queue>

00026546 <work_cancel>:
{
   26546:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26548:	f3bf 8f5b 	dmb	ish
   2654c:	6883      	ldr	r3, [r0, #8]
   2654e:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   26552:	07db      	lsls	r3, r3, #31
{
   26554:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   26556:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   2655a:	d532      	bpl.n	265c2 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2655c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2655e:	6813      	ldr	r3, [r2, #0]
   26560:	2100      	movs	r1, #0
   26562:	b913      	cbnz	r3, 2656a <work_cancel+0x24>
			return -EINVAL;
   26564:	f06f 0015 	mvn.w	r0, #21
}
   26568:	bd70      	pop	{r4, r5, r6, pc}
   2656a:	429c      	cmp	r4, r3
   2656c:	d124      	bne.n	265b8 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   2656e:	6823      	ldr	r3, [r4, #0]
   26570:	6856      	ldr	r6, [r2, #4]
   26572:	f023 0003 	bic.w	r0, r3, #3
   26576:	b9b1      	cbnz	r1, 265a6 <work_cancel+0x60>
   26578:	42b4      	cmp	r4, r6
	list->head = node;
   2657a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2657c:	d100      	bne.n	26580 <work_cancel+0x3a>
	list->tail = node;
   2657e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26580:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26582:	f003 0303 	and.w	r3, r3, #3
   26586:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   26588:	2000      	movs	r0, #0
   2658a:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2658c:	f3bf 8f5b 	dmb	ish
   26590:	e855 3f00 	ldrex	r3, [r5]
   26594:	f023 0301 	bic.w	r3, r3, #1
   26598:	e845 3200 	strex	r2, r3, [r5]
   2659c:	2a00      	cmp	r2, #0
   2659e:	d1f7      	bne.n	26590 <work_cancel+0x4a>
   265a0:	f3bf 8f5b 	dmb	ish
   265a4:	e7e0      	b.n	26568 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   265a6:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   265a8:	f003 0303 	and.w	r3, r3, #3
   265ac:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   265ae:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   265b0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   265b2:	bf08      	it	eq
   265b4:	6051      	streq	r1, [r2, #4]
}
   265b6:	e7e3      	b.n	26580 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   265b8:	6818      	ldr	r0, [r3, #0]
   265ba:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   265bc:	f020 0303 	bic.w	r3, r0, #3
   265c0:	e7cf      	b.n	26562 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   265c2:	3010      	adds	r0, #16
   265c4:	f000 f822 	bl	2660c <z_abort_timeout>
		if (err) {
   265c8:	2800      	cmp	r0, #0
   265ca:	d0dd      	beq.n	26588 <work_cancel+0x42>
			return -EALREADY;
   265cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   265d0:	e7ca      	b.n	26568 <work_cancel+0x22>

000265d2 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   265d2:	2300      	movs	r3, #0
   265d4:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   265d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   265dc:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   265de:	6283      	str	r3, [r0, #40]	; 0x28
}
   265e0:	4770      	bx	lr

000265e2 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   265e2:	b510      	push	{r4, lr}
	__asm__ volatile(
   265e4:	f04f 0220 	mov.w	r2, #32
   265e8:	f3ef 8411 	mrs	r4, BASEPRI
   265ec:	f382 8811 	msr	BASEPRI, r2
   265f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   265f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
   265f6:	b133      	cbz	r3, 26606 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   265f8:	f7ff ffa5 	bl	26546 <work_cancel>
	__asm__ volatile(
   265fc:	f384 8811 	msr	BASEPRI, r4
   26600:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   26604:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   26606:	f06f 0015 	mvn.w	r0, #21
   2660a:	e7f7      	b.n	265fc <k_delayed_work_cancel+0x1a>

0002660c <z_abort_timeout>:
{
   2660c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2660e:	f04f 0220 	mov.w	r2, #32
   26612:	f3ef 8411 	mrs	r4, BASEPRI
   26616:	f382 8811 	msr	BASEPRI, r2
   2661a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2661e:	6803      	ldr	r3, [r0, #0]
   26620:	b13b      	cbz	r3, 26632 <z_abort_timeout+0x26>
			remove_timeout(to);
   26622:	f7f4 fe55 	bl	1b2d0 <remove_timeout>
			ret = 0;
   26626:	2000      	movs	r0, #0
	__asm__ volatile(
   26628:	f384 8811 	msr	BASEPRI, r4
   2662c:	f3bf 8f6f 	isb	sy
}
   26630:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   26632:	f06f 0015 	mvn.w	r0, #21
   26636:	e7f7      	b.n	26628 <z_abort_timeout+0x1c>

00026638 <z_get_next_timeout_expiry>:
{
   26638:	b510      	push	{r4, lr}
	__asm__ volatile(
   2663a:	f04f 0320 	mov.w	r3, #32
   2663e:	f3ef 8411 	mrs	r4, BASEPRI
   26642:	f383 8811 	msr	BASEPRI, r3
   26646:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2664a:	f7f4 fe5b 	bl	1b304 <next_timeout>
	__asm__ volatile(
   2664e:	f384 8811 	msr	BASEPRI, r4
   26652:	f3bf 8f6f 	isb	sy
}
   26656:	bd10      	pop	{r4, pc}

00026658 <z_set_timeout_expiry>:
{
   26658:	b570      	push	{r4, r5, r6, lr}
   2665a:	4604      	mov	r4, r0
   2665c:	460d      	mov	r5, r1
	__asm__ volatile(
   2665e:	f04f 0320 	mov.w	r3, #32
   26662:	f3ef 8611 	mrs	r6, BASEPRI
   26666:	f383 8811 	msr	BASEPRI, r3
   2666a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2666e:	f7f4 fe49 	bl	1b304 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   26672:	2801      	cmp	r0, #1
   26674:	dd05      	ble.n	26682 <z_set_timeout_expiry+0x2a>
   26676:	42a0      	cmp	r0, r4
   26678:	dd03      	ble.n	26682 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   2667a:	4629      	mov	r1, r5
   2667c:	4620      	mov	r0, r4
   2667e:	f7dd fef3 	bl	4468 <z_clock_set_timeout>
	__asm__ volatile(
   26682:	f386 8811 	msr	BASEPRI, r6
   26686:	f3bf 8f6f 	isb	sy
}
   2668a:	bd70      	pop	{r4, r5, r6, pc}

0002668c <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2668c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2668e:	f7f4 ff59 	bl	1b544 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   26692:	bd08      	pop	{r3, pc}

00026694 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   26694:	f7f4 bf56 	b.w	1b544 <z_tick_get>

00026698 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   26698:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2669a:	1c4b      	adds	r3, r1, #1
   2669c:	bf08      	it	eq
   2669e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   266a2:	4604      	mov	r4, r0
   266a4:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   266a6:	d013      	beq.n	266d0 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   266a8:	ea54 0105 	orrs.w	r1, r4, r5
   266ac:	d103      	bne.n	266b6 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   266ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   266b2:	f7f4 bf47 	b.w	1b544 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   266b6:	f06f 0101 	mvn.w	r1, #1
   266ba:	1a0a      	subs	r2, r1, r0
   266bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   266c0:	eb61 0305 	sbc.w	r3, r1, r5
   266c4:	2a00      	cmp	r2, #0
   266c6:	f173 0100 	sbcs.w	r1, r3, #0
   266ca:	db02      	blt.n	266d2 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   266cc:	4610      	mov	r0, r2
   266ce:	4619      	mov	r1, r3
}
   266d0:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   266d2:	f7f4 ff37 	bl	1b544 <z_tick_get>
   266d6:	2c01      	cmp	r4, #1
   266d8:	f175 0300 	sbcs.w	r3, r5, #0
   266dc:	bfbc      	itt	lt
   266de:	2401      	movlt	r4, #1
   266e0:	2500      	movlt	r5, #0
   266e2:	1820      	adds	r0, r4, r0
   266e4:	eb45 0101 	adc.w	r1, r5, r1
   266e8:	e7f2      	b.n	266d0 <z_timeout_end_calc+0x38>

000266ea <k_timer_init>:
	timer->status = 0U;
   266ea:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   266ec:	e9c0 1208 	strd	r1, r2, [r0, #32]
   266f0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   266f4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   266f8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   266fc:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   266fe:	6343      	str	r3, [r0, #52]	; 0x34
}
   26700:	4770      	bx	lr

00026702 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   26702:	b510      	push	{r4, lr}
   26704:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   26706:	f7ff ff81 	bl	2660c <z_abort_timeout>

	if (inactive) {
   2670a:	b9d8      	cbnz	r0, 26744 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2670c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2670e:	b10b      	cbz	r3, 26714 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   26710:	4620      	mov	r0, r4
   26712:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   26714:	f104 0018 	add.w	r0, r4, #24
   26718:	2100      	movs	r1, #0
   2671a:	f7ff fde8 	bl	262ee <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2671e:	4604      	mov	r4, r0
   26720:	b180      	cbz	r0, 26744 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   26722:	f7ff fdf4 	bl	2630e <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   26726:	4620      	mov	r0, r4
   26728:	f7ff fe43 	bl	263b2 <z_ready_thread>
	__asm__ volatile(
   2672c:	f04f 0320 	mov.w	r3, #32
   26730:	f3ef 8011 	mrs	r0, BASEPRI
   26734:	f383 8811 	msr	BASEPRI, r3
   26738:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2673c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   26740:	f7ff bdf5 	b.w	2632e <z_reschedule_irqlock>
   26744:	bd10      	pop	{r4, pc}

00026746 <clear_event_registrations>:
	while (num_events--) {
   26746:	2314      	movs	r3, #20
{
   26748:	b530      	push	{r4, r5, lr}
   2674a:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   2674e:	2400      	movs	r4, #0
	while (num_events--) {
   26750:	4281      	cmp	r1, r0
   26752:	d100      	bne.n	26756 <clear_event_registrations+0x10>
}
   26754:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   26756:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2675a:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2675e:	f003 030f 	and.w	r3, r3, #15
   26762:	2b02      	cmp	r3, #2
   26764:	d80a      	bhi.n	2677c <clear_event_registrations+0x36>
   26766:	b15b      	cbz	r3, 26780 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   26768:	f851 3c14 	ldr.w	r3, [r1, #-20]
   2676c:	b143      	cbz	r3, 26780 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   2676e:	f851 5c10 	ldr.w	r5, [r1, #-16]
   26772:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   26774:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   26776:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   2677a:	e001      	b.n	26780 <clear_event_registrations+0x3a>
	switch (event->type) {
   2677c:	2b04      	cmp	r3, #4
   2677e:	d0f3      	beq.n	26768 <clear_event_registrations+0x22>
	__asm__ volatile(
   26780:	f382 8811 	msr	BASEPRI, r2
   26784:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   26788:	f04f 0320 	mov.w	r3, #32
   2678c:	f3ef 8211 	mrs	r2, BASEPRI
   26790:	f383 8811 	msr	BASEPRI, r3
   26794:	f3bf 8f6f 	isb	sy
   26798:	3914      	subs	r1, #20
   2679a:	e7d9      	b.n	26750 <clear_event_registrations+0xa>

0002679c <k_work_submit_to_queue>:
{
   2679c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2679e:	f101 0308 	add.w	r3, r1, #8
   267a2:	f3bf 8f5b 	dmb	ish
   267a6:	e853 2f00 	ldrex	r2, [r3]
   267aa:	f042 0c01 	orr.w	ip, r2, #1
   267ae:	e843 ce00 	strex	lr, ip, [r3]
   267b2:	f1be 0f00 	cmp.w	lr, #0
   267b6:	d1f6      	bne.n	267a6 <k_work_submit_to_queue+0xa>
   267b8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   267bc:	07d3      	lsls	r3, r2, #31
   267be:	d403      	bmi.n	267c8 <k_work_submit_to_queue+0x2c>
}
   267c0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   267c4:	f7ff bd39 	b.w	2623a <k_queue_append>
}
   267c8:	f85d fb04 	ldr.w	pc, [sp], #4

000267cc <signal_poll_event>:
{
   267cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   267d0:	6884      	ldr	r4, [r0, #8]
{
   267d2:	4605      	mov	r5, r0
   267d4:	460e      	mov	r6, r1
	if (poller) {
   267d6:	b144      	cbz	r4, 267ea <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   267d8:	7863      	ldrb	r3, [r4, #1]
   267da:	2b01      	cmp	r3, #1
   267dc:	d138      	bne.n	26850 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   267de:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   267e2:	f013 0302 	ands.w	r3, r3, #2
   267e6:	d10a      	bne.n	267fe <signal_poll_event+0x32>
		poller->is_polling = false;
   267e8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   267ea:	68eb      	ldr	r3, [r5, #12]
   267ec:	f3c3 3104 	ubfx	r1, r3, #12, #5
   267f0:	430e      	orrs	r6, r1
	event->poller = NULL;
   267f2:	2000      	movs	r0, #0
	event->state |= state;
   267f4:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   267f8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   267fa:	60eb      	str	r3, [r5, #12]
	return retcode;
   267fc:	e00d      	b.n	2681a <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   267fe:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   26802:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26806:	f06f 0001 	mvn.w	r0, #1
   2680a:	428b      	cmp	r3, r1
   2680c:	bf08      	it	eq
   2680e:	4282      	cmpeq	r2, r0
   26810:	d105      	bne.n	2681e <signal_poll_event+0x52>
		poller->is_polling = false;
   26812:	2300      	movs	r3, #0
   26814:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   26816:	f06f 000a 	mvn.w	r0, #10
}
   2681a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2681e:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   26822:	4640      	mov	r0, r8
   26824:	f7ff fda5 	bl	26372 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   26828:	2e08      	cmp	r6, #8
   2682a:	bf0c      	ite	eq
   2682c:	f06f 0303 	mvneq.w	r3, #3
   26830:	2300      	movne	r3, #0
   26832:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26834:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   26838:	06db      	lsls	r3, r3, #27
   2683a:	d102      	bne.n	26842 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   2683c:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   26840:	b10f      	cbz	r7, 26846 <signal_poll_event+0x7a>
		poller->is_polling = false;
   26842:	2300      	movs	r3, #0
   26844:	e7d0      	b.n	267e8 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   26846:	4640      	mov	r0, r8
   26848:	f7ff fdb3 	bl	263b2 <z_ready_thread>
		poller->is_polling = false;
   2684c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2684e:	e7cc      	b.n	267ea <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   26850:	2b02      	cmp	r3, #2
   26852:	d1f6      	bne.n	26842 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   26854:	7823      	ldrb	r3, [r4, #0]
   26856:	2b00      	cmp	r3, #0
   26858:	d0c7      	beq.n	267ea <signal_poll_event+0x1e>
   2685a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2685e:	2f00      	cmp	r7, #0
   26860:	d0f4      	beq.n	2684c <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   26862:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   26866:	f1a4 0910 	sub.w	r9, r4, #16
   2686a:	f104 0010 	add.w	r0, r4, #16
   2686e:	f7ff fecd 	bl	2660c <z_abort_timeout>
		twork->poll_result = 0;
   26872:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   26876:	4649      	mov	r1, r9
   26878:	4638      	mov	r0, r7
   2687a:	f7ff ff8f 	bl	2679c <k_work_submit_to_queue>
		poller->is_polling = false;
   2687e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   26882:	e7b2      	b.n	267ea <signal_poll_event+0x1e>

00026884 <add_event>:
{
   26884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26886:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26888:	e9d0 2300 	ldrd	r2, r3, [r0]
   2688c:	4290      	cmp	r0, r2
   2688e:	4604      	mov	r4, r0
   26890:	460d      	mov	r5, r1
   26892:	d106      	bne.n	268a2 <add_event+0x1e>
	node->prev = list->tail;
   26894:	6863      	ldr	r3, [r4, #4]
   26896:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   26898:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2689a:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2689c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2689e:	6065      	str	r5, [r4, #4]
}
   268a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   268a2:	2b00      	cmp	r3, #0
   268a4:	d0f6      	beq.n	26894 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   268a6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   268a8:	b100      	cbz	r0, 268ac <add_event+0x28>
   268aa:	3864      	subs	r0, #100	; 0x64
   268ac:	b107      	cbz	r7, 268b0 <add_event+0x2c>
   268ae:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   268b0:	4639      	mov	r1, r7
   268b2:	f7ff fd13 	bl	262dc <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   268b6:	2800      	cmp	r0, #0
   268b8:	d1ec      	bne.n	26894 <add_event+0x10>
	return list->head == list;
   268ba:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   268bc:	42b4      	cmp	r4, r6
   268be:	d0e9      	beq.n	26894 <add_event+0x10>
   268c0:	2e00      	cmp	r6, #0
   268c2:	bf38      	it	cc
   268c4:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   268c6:	2e00      	cmp	r6, #0
   268c8:	d0e4      	beq.n	26894 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   268ca:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   268cc:	b101      	cbz	r1, 268d0 <add_event+0x4c>
   268ce:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   268d0:	4638      	mov	r0, r7
   268d2:	f7ff fd03 	bl	262dc <z_is_t1_higher_prio_than_t2>
   268d6:	b128      	cbz	r0, 268e4 <add_event+0x60>
	node->prev = successor->prev;
   268d8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   268da:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   268de:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   268e0:	6075      	str	r5, [r6, #4]
			return;
   268e2:	e7dd      	b.n	268a0 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   268e4:	6863      	ldr	r3, [r4, #4]
   268e6:	42b3      	cmp	r3, r6
   268e8:	d0d4      	beq.n	26894 <add_event+0x10>
   268ea:	6836      	ldr	r6, [r6, #0]
   268ec:	e7eb      	b.n	268c6 <add_event+0x42>

000268ee <register_events>:
{
   268ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   268f2:	f04f 0a00 	mov.w	sl, #0
{
   268f6:	460e      	mov	r6, r1
   268f8:	4614      	mov	r4, r2
   268fa:	461f      	mov	r7, r3
   268fc:	4683      	mov	fp, r0
	int events_registered = 0;
   268fe:	4655      	mov	r5, sl
	event->poller = NULL;
   26900:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   26902:	45b2      	cmp	sl, r6
   26904:	db02      	blt.n	2690c <register_events+0x1e>
}
   26906:	4628      	mov	r0, r5
   26908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2690c:	f04f 0320 	mov.w	r3, #32
   26910:	f3ef 8911 	mrs	r9, BASEPRI
   26914:	f383 8811 	msr	BASEPRI, r3
   26918:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2691c:	f89b 200d 	ldrb.w	r2, [fp, #13]
   26920:	f002 020f 	and.w	r2, r2, #15
   26924:	2a02      	cmp	r2, #2
   26926:	d006      	beq.n	26936 <register_events+0x48>
   26928:	2a04      	cmp	r2, #4
   2692a:	d008      	beq.n	2693e <register_events+0x50>
   2692c:	2a01      	cmp	r2, #1
   2692e:	d120      	bne.n	26972 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   26930:	f8db 3010 	ldr.w	r3, [fp, #16]
   26934:	e001      	b.n	2693a <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   26936:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   2693a:	689b      	ldr	r3, [r3, #8]
   2693c:	e002      	b.n	26944 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   2693e:	f8db 3010 	ldr.w	r3, [fp, #16]
   26942:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   26944:	b1ab      	cbz	r3, 26972 <register_events+0x84>
	event->state |= state;
   26946:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   2694a:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   2694e:	f3c3 3104 	ubfx	r1, r3, #12, #5
   26952:	430a      	orrs	r2, r1
   26954:	f362 3310 	bfi	r3, r2, #12, #5
   26958:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   2695c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   26960:	f389 8811 	msr	BASEPRI, r9
   26964:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   26968:	f10a 0a01 	add.w	sl, sl, #1
   2696c:	f10b 0b14 	add.w	fp, fp, #20
   26970:	e7c7      	b.n	26902 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   26972:	2f00      	cmp	r7, #0
   26974:	d1f4      	bne.n	26960 <register_events+0x72>
   26976:	7823      	ldrb	r3, [r4, #0]
   26978:	2b00      	cmp	r3, #0
   2697a:	d0f1      	beq.n	26960 <register_events+0x72>
	switch (event->type) {
   2697c:	f89b 300d 	ldrb.w	r3, [fp, #13]
   26980:	f003 030f 	and.w	r3, r3, #15
   26984:	2b02      	cmp	r3, #2
   26986:	d008      	beq.n	2699a <register_events+0xac>
   26988:	2b04      	cmp	r3, #4
   2698a:	d006      	beq.n	2699a <register_events+0xac>
   2698c:	2b01      	cmp	r3, #1
   2698e:	d10b      	bne.n	269a8 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   26990:	f8db 0010 	ldr.w	r0, [fp, #16]
   26994:	4622      	mov	r2, r4
   26996:	4659      	mov	r1, fp
   26998:	e004      	b.n	269a4 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   2699a:	f8db 0010 	ldr.w	r0, [fp, #16]
   2699e:	4622      	mov	r2, r4
   269a0:	4659      	mov	r1, fp
   269a2:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   269a4:	f7ff ff6e 	bl	26884 <add_event>
	event->poller = poller;
   269a8:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   269ac:	3501      	adds	r5, #1
   269ae:	e7d7      	b.n	26960 <register_events+0x72>

000269b0 <k_poll_event_init>:
{
   269b0:	b510      	push	{r4, lr}
	event->type = type;
   269b2:	0452      	lsls	r2, r2, #17
   269b4:	0209      	lsls	r1, r1, #8
   269b6:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   269ba:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   269be:	430a      	orrs	r2, r1
   269c0:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   269c2:	2400      	movs	r4, #0
	event->type = type;
   269c4:	430a      	orrs	r2, r1
	event->obj = obj;
   269c6:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   269ca:	6084      	str	r4, [r0, #8]
}
   269cc:	bd10      	pop	{r4, pc}

000269ce <z_handle_obj_poll_events>:
{
   269ce:	4603      	mov	r3, r0
	return list->head == list;
   269d0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   269d2:	4283      	cmp	r3, r0
   269d4:	d008      	beq.n	269e8 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   269d6:	e9d0 3200 	ldrd	r3, r2, [r0]
   269da:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   269dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   269de:	2300      	movs	r3, #0
	node->prev = NULL;
   269e0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   269e4:	f7ff bef2 	b.w	267cc <signal_poll_event>
}
   269e8:	4770      	bx	lr

000269ea <k_mem_pool_malloc>:
{
   269ea:	b530      	push	{r4, r5, lr}
   269ec:	2208      	movs	r2, #8
   269ee:	188a      	adds	r2, r1, r2
   269f0:	b085      	sub	sp, #20
   269f2:	d207      	bcs.n	26a04 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   269f4:	2400      	movs	r4, #0
   269f6:	2500      	movs	r5, #0
   269f8:	e9cd 4500 	strd	r4, r5, [sp]
   269fc:	a902      	add	r1, sp, #8
   269fe:	f7ff fb7b 	bl	260f8 <k_mem_pool_alloc>
   26a02:	b110      	cbz	r0, 26a0a <k_mem_pool_malloc+0x20>
		return NULL;
   26a04:	2000      	movs	r0, #0
}
   26a06:	b005      	add	sp, #20
   26a08:	bd30      	pop	{r4, r5, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26a0a:	ab02      	add	r3, sp, #8
   26a0c:	cb03      	ldmia	r3!, {r0, r1}
   26a0e:	9a02      	ldr	r2, [sp, #8]
   26a10:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   26a12:	9802      	ldr	r0, [sp, #8]
   26a14:	6051      	str	r1, [r2, #4]
   26a16:	3008      	adds	r0, #8
   26a18:	e7f5      	b.n	26a06 <k_mem_pool_malloc+0x1c>

00026a1a <k_free>:
	if (ptr != NULL) {
   26a1a:	b110      	cbz	r0, 26a22 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   26a1c:	3808      	subs	r0, #8
   26a1e:	f7ff bb84 	b.w	2612a <k_mem_pool_free_id>
}
   26a22:	4770      	bx	lr

00026a24 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   26a24:	4770      	bx	lr

00026a26 <abs>:
   26a26:	2800      	cmp	r0, #0
   26a28:	bfb8      	it	lt
   26a2a:	4240      	neglt	r0, r0
   26a2c:	4770      	bx	lr

00026a2e <memcmp>:
   26a2e:	b530      	push	{r4, r5, lr}
   26a30:	3901      	subs	r1, #1
   26a32:	2400      	movs	r4, #0
   26a34:	42a2      	cmp	r2, r4
   26a36:	d101      	bne.n	26a3c <memcmp+0xe>
   26a38:	2000      	movs	r0, #0
   26a3a:	e005      	b.n	26a48 <memcmp+0x1a>
   26a3c:	5d03      	ldrb	r3, [r0, r4]
   26a3e:	3401      	adds	r4, #1
   26a40:	5d0d      	ldrb	r5, [r1, r4]
   26a42:	42ab      	cmp	r3, r5
   26a44:	d0f6      	beq.n	26a34 <memcmp+0x6>
   26a46:	1b58      	subs	r0, r3, r5
   26a48:	bd30      	pop	{r4, r5, pc}

00026a4a <memcpy>:
   26a4a:	440a      	add	r2, r1
   26a4c:	4291      	cmp	r1, r2
   26a4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   26a52:	d100      	bne.n	26a56 <memcpy+0xc>
   26a54:	4770      	bx	lr
   26a56:	b510      	push	{r4, lr}
   26a58:	f811 4b01 	ldrb.w	r4, [r1], #1
   26a5c:	f803 4f01 	strb.w	r4, [r3, #1]!
   26a60:	4291      	cmp	r1, r2
   26a62:	d1f9      	bne.n	26a58 <memcpy+0xe>
   26a64:	bd10      	pop	{r4, pc}

00026a66 <__memcpy_chk>:
   26a66:	429a      	cmp	r2, r3
   26a68:	b508      	push	{r3, lr}
   26a6a:	d901      	bls.n	26a70 <__memcpy_chk+0xa>
   26a6c:	f7de f8c0 	bl	4bf0 <__chk_fail>
   26a70:	4281      	cmp	r1, r0
   26a72:	d804      	bhi.n	26a7e <__memcpy_chk+0x18>
   26a74:	188b      	adds	r3, r1, r2
   26a76:	4298      	cmp	r0, r3
   26a78:	d3f8      	bcc.n	26a6c <__memcpy_chk+0x6>
   26a7a:	4281      	cmp	r1, r0
   26a7c:	d102      	bne.n	26a84 <__memcpy_chk+0x1e>
   26a7e:	1883      	adds	r3, r0, r2
   26a80:	4299      	cmp	r1, r3
   26a82:	d3f3      	bcc.n	26a6c <__memcpy_chk+0x6>
   26a84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   26a88:	f7ff bfdf 	b.w	26a4a <memcpy>

00026a8c <memset>:
   26a8c:	4402      	add	r2, r0
   26a8e:	4603      	mov	r3, r0
   26a90:	4293      	cmp	r3, r2
   26a92:	d100      	bne.n	26a96 <memset+0xa>
   26a94:	4770      	bx	lr
   26a96:	f803 1b01 	strb.w	r1, [r3], #1
   26a9a:	e7f9      	b.n	26a90 <memset+0x4>

00026a9c <__seofread>:
   26a9c:	2000      	movs	r0, #0
   26a9e:	4770      	bx	lr

00026aa0 <strcpy>:
   26aa0:	4603      	mov	r3, r0
   26aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
   26aa6:	f803 2b01 	strb.w	r2, [r3], #1
   26aaa:	2a00      	cmp	r2, #0
   26aac:	d1f9      	bne.n	26aa2 <strcpy+0x2>
   26aae:	4770      	bx	lr

00026ab0 <strncmp>:
   26ab0:	b510      	push	{r4, lr}
   26ab2:	b16a      	cbz	r2, 26ad0 <strncmp+0x20>
   26ab4:	3901      	subs	r1, #1
   26ab6:	1884      	adds	r4, r0, r2
   26ab8:	f810 3b01 	ldrb.w	r3, [r0], #1
   26abc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   26ac0:	4293      	cmp	r3, r2
   26ac2:	d103      	bne.n	26acc <strncmp+0x1c>
   26ac4:	42a0      	cmp	r0, r4
   26ac6:	d001      	beq.n	26acc <strncmp+0x1c>
   26ac8:	2b00      	cmp	r3, #0
   26aca:	d1f5      	bne.n	26ab8 <strncmp+0x8>
   26acc:	1a98      	subs	r0, r3, r2
   26ace:	bd10      	pop	{r4, pc}
   26ad0:	4610      	mov	r0, r2
   26ad2:	e7fc      	b.n	26ace <strncmp+0x1e>

00026ad4 <__strncpy_chk>:
   26ad4:	429a      	cmp	r2, r3
   26ad6:	b508      	push	{r3, lr}
   26ad8:	d901      	bls.n	26ade <__strncpy_chk+0xa>
   26ada:	f7de f889 	bl	4bf0 <__chk_fail>
   26ade:	4281      	cmp	r1, r0
   26ae0:	d804      	bhi.n	26aec <__strncpy_chk+0x18>
   26ae2:	188b      	adds	r3, r1, r2
   26ae4:	4298      	cmp	r0, r3
   26ae6:	d3f8      	bcc.n	26ada <__strncpy_chk+0x6>
   26ae8:	4281      	cmp	r1, r0
   26aea:	d102      	bne.n	26af2 <__strncpy_chk+0x1e>
   26aec:	1883      	adds	r3, r0, r2
   26aee:	4299      	cmp	r1, r3
   26af0:	d3f3      	bcc.n	26ada <__strncpy_chk+0x6>
   26af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   26af6:	f000 b995 	b.w	26e24 <strncpy>

00026afa <_strtol_r>:
   26afa:	f7f5 bf17 	b.w	1c92c <_strtol_l.isra.0>

00026afe <_strtoul_r>:
   26afe:	f7f5 bf99 	b.w	1ca34 <_strtoul_l.isra.0>

00026b02 <_tzset_unlocked>:
   26b02:	f7f6 b8c5 	b.w	1cc90 <tzset>

00026b06 <div>:
   26b06:	2900      	cmp	r1, #0
   26b08:	b510      	push	{r4, lr}
   26b0a:	fb91 f4f2 	sdiv	r4, r1, r2
   26b0e:	fb02 1314 	mls	r3, r2, r4, r1
   26b12:	db06      	blt.n	26b22 <div+0x1c>
   26b14:	2b00      	cmp	r3, #0
   26b16:	da01      	bge.n	26b1c <div+0x16>
   26b18:	3401      	adds	r4, #1
   26b1a:	1a9b      	subs	r3, r3, r2
   26b1c:	e9c0 4300 	strd	r4, r3, [r0]
   26b20:	bd10      	pop	{r4, pc}
   26b22:	2b00      	cmp	r3, #0
   26b24:	bfc4      	itt	gt
   26b26:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   26b2a:	189b      	addgt	r3, r3, r2
   26b2c:	e7f6      	b.n	26b1c <div+0x16>

00026b2e <_getenv_r>:
   26b2e:	b507      	push	{r0, r1, r2, lr}
   26b30:	aa01      	add	r2, sp, #4
   26b32:	f7f6 fa2f 	bl	1cf94 <_findenv_r>
   26b36:	b003      	add	sp, #12
   26b38:	f85d fb04 	ldr.w	pc, [sp], #4

00026b3c <labs>:
   26b3c:	2800      	cmp	r0, #0
   26b3e:	bfb8      	it	lt
   26b40:	4240      	neglt	r0, r0
   26b42:	4770      	bx	lr

00026b44 <__ascii_mbtowc>:
   26b44:	b082      	sub	sp, #8
   26b46:	b901      	cbnz	r1, 26b4a <__ascii_mbtowc+0x6>
   26b48:	a901      	add	r1, sp, #4
   26b4a:	b142      	cbz	r2, 26b5e <__ascii_mbtowc+0x1a>
   26b4c:	b14b      	cbz	r3, 26b62 <__ascii_mbtowc+0x1e>
   26b4e:	7813      	ldrb	r3, [r2, #0]
   26b50:	600b      	str	r3, [r1, #0]
   26b52:	7812      	ldrb	r2, [r2, #0]
   26b54:	1e10      	subs	r0, r2, #0
   26b56:	bf18      	it	ne
   26b58:	2001      	movne	r0, #1
   26b5a:	b002      	add	sp, #8
   26b5c:	4770      	bx	lr
   26b5e:	4610      	mov	r0, r2
   26b60:	e7fb      	b.n	26b5a <__ascii_mbtowc+0x16>
   26b62:	f06f 0001 	mvn.w	r0, #1
   26b66:	e7f8      	b.n	26b5a <__ascii_mbtowc+0x16>

00026b68 <__malloc_lock>:
   26b68:	4770      	bx	lr

00026b6a <__malloc_unlock>:
   26b6a:	4770      	bx	lr

00026b6c <__ssputs_r>:
   26b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26b70:	688e      	ldr	r6, [r1, #8]
   26b72:	429e      	cmp	r6, r3
   26b74:	4682      	mov	sl, r0
   26b76:	460c      	mov	r4, r1
   26b78:	4690      	mov	r8, r2
   26b7a:	461f      	mov	r7, r3
   26b7c:	d838      	bhi.n	26bf0 <__ssputs_r+0x84>
   26b7e:	898a      	ldrh	r2, [r1, #12]
   26b80:	f412 6f90 	tst.w	r2, #1152	; 0x480
   26b84:	d032      	beq.n	26bec <__ssputs_r+0x80>
   26b86:	6825      	ldr	r5, [r4, #0]
   26b88:	6909      	ldr	r1, [r1, #16]
   26b8a:	eba5 0901 	sub.w	r9, r5, r1
   26b8e:	6965      	ldr	r5, [r4, #20]
   26b90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26b94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   26b98:	3301      	adds	r3, #1
   26b9a:	444b      	add	r3, r9
   26b9c:	106d      	asrs	r5, r5, #1
   26b9e:	429d      	cmp	r5, r3
   26ba0:	bf38      	it	cc
   26ba2:	461d      	movcc	r5, r3
   26ba4:	0553      	lsls	r3, r2, #21
   26ba6:	d531      	bpl.n	26c0c <__ssputs_r+0xa0>
   26ba8:	4629      	mov	r1, r5
   26baa:	f7f5 f8d5 	bl	1bd58 <_malloc_r>
   26bae:	4606      	mov	r6, r0
   26bb0:	b950      	cbnz	r0, 26bc8 <__ssputs_r+0x5c>
   26bb2:	230c      	movs	r3, #12
   26bb4:	f8ca 3000 	str.w	r3, [sl]
   26bb8:	89a3      	ldrh	r3, [r4, #12]
   26bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26bbe:	81a3      	strh	r3, [r4, #12]
   26bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26bc8:	6921      	ldr	r1, [r4, #16]
   26bca:	464a      	mov	r2, r9
   26bcc:	f7ff ff3d 	bl	26a4a <memcpy>
   26bd0:	89a3      	ldrh	r3, [r4, #12]
   26bd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   26bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26bda:	81a3      	strh	r3, [r4, #12]
   26bdc:	6126      	str	r6, [r4, #16]
   26bde:	6165      	str	r5, [r4, #20]
   26be0:	444e      	add	r6, r9
   26be2:	eba5 0509 	sub.w	r5, r5, r9
   26be6:	6026      	str	r6, [r4, #0]
   26be8:	60a5      	str	r5, [r4, #8]
   26bea:	463e      	mov	r6, r7
   26bec:	42be      	cmp	r6, r7
   26bee:	d900      	bls.n	26bf2 <__ssputs_r+0x86>
   26bf0:	463e      	mov	r6, r7
   26bf2:	4632      	mov	r2, r6
   26bf4:	6820      	ldr	r0, [r4, #0]
   26bf6:	4641      	mov	r1, r8
   26bf8:	f000 f970 	bl	26edc <memmove>
   26bfc:	68a3      	ldr	r3, [r4, #8]
   26bfe:	6822      	ldr	r2, [r4, #0]
   26c00:	1b9b      	subs	r3, r3, r6
   26c02:	4432      	add	r2, r6
   26c04:	60a3      	str	r3, [r4, #8]
   26c06:	6022      	str	r2, [r4, #0]
   26c08:	2000      	movs	r0, #0
   26c0a:	e7db      	b.n	26bc4 <__ssputs_r+0x58>
   26c0c:	462a      	mov	r2, r5
   26c0e:	f000 f97f 	bl	26f10 <_realloc_r>
   26c12:	4606      	mov	r6, r0
   26c14:	2800      	cmp	r0, #0
   26c16:	d1e1      	bne.n	26bdc <__ssputs_r+0x70>
   26c18:	6921      	ldr	r1, [r4, #16]
   26c1a:	4650      	mov	r0, sl
   26c1c:	f7f5 f84e 	bl	1bcbc <_free_r>
   26c20:	e7c7      	b.n	26bb2 <__ssputs_r+0x46>

00026c22 <_sungetc_r>:
   26c22:	b538      	push	{r3, r4, r5, lr}
   26c24:	1c4b      	adds	r3, r1, #1
   26c26:	4614      	mov	r4, r2
   26c28:	d103      	bne.n	26c32 <_sungetc_r+0x10>
   26c2a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26c2e:	4628      	mov	r0, r5
   26c30:	bd38      	pop	{r3, r4, r5, pc}
   26c32:	8993      	ldrh	r3, [r2, #12]
   26c34:	f023 0320 	bic.w	r3, r3, #32
   26c38:	8193      	strh	r3, [r2, #12]
   26c3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26c3c:	6852      	ldr	r2, [r2, #4]
   26c3e:	b2cd      	uxtb	r5, r1
   26c40:	b18b      	cbz	r3, 26c66 <_sungetc_r+0x44>
   26c42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26c44:	4293      	cmp	r3, r2
   26c46:	dd08      	ble.n	26c5a <_sungetc_r+0x38>
   26c48:	6823      	ldr	r3, [r4, #0]
   26c4a:	1e5a      	subs	r2, r3, #1
   26c4c:	6022      	str	r2, [r4, #0]
   26c4e:	f803 5c01 	strb.w	r5, [r3, #-1]
   26c52:	6863      	ldr	r3, [r4, #4]
   26c54:	3301      	adds	r3, #1
   26c56:	6063      	str	r3, [r4, #4]
   26c58:	e7e9      	b.n	26c2e <_sungetc_r+0xc>
   26c5a:	4621      	mov	r1, r4
   26c5c:	f000 f8f5 	bl	26e4a <__submore>
   26c60:	2800      	cmp	r0, #0
   26c62:	d0f1      	beq.n	26c48 <_sungetc_r+0x26>
   26c64:	e7e1      	b.n	26c2a <_sungetc_r+0x8>
   26c66:	6921      	ldr	r1, [r4, #16]
   26c68:	6823      	ldr	r3, [r4, #0]
   26c6a:	b151      	cbz	r1, 26c82 <_sungetc_r+0x60>
   26c6c:	4299      	cmp	r1, r3
   26c6e:	d208      	bcs.n	26c82 <_sungetc_r+0x60>
   26c70:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   26c74:	42a9      	cmp	r1, r5
   26c76:	d104      	bne.n	26c82 <_sungetc_r+0x60>
   26c78:	3b01      	subs	r3, #1
   26c7a:	3201      	adds	r2, #1
   26c7c:	6023      	str	r3, [r4, #0]
   26c7e:	6062      	str	r2, [r4, #4]
   26c80:	e7d5      	b.n	26c2e <_sungetc_r+0xc>
   26c82:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   26c86:	f104 0344 	add.w	r3, r4, #68	; 0x44
   26c8a:	6363      	str	r3, [r4, #52]	; 0x34
   26c8c:	2303      	movs	r3, #3
   26c8e:	63a3      	str	r3, [r4, #56]	; 0x38
   26c90:	4623      	mov	r3, r4
   26c92:	f803 5f46 	strb.w	r5, [r3, #70]!
   26c96:	6023      	str	r3, [r4, #0]
   26c98:	2301      	movs	r3, #1
   26c9a:	e7dc      	b.n	26c56 <_sungetc_r+0x34>

00026c9c <__ssrefill_r>:
   26c9c:	b510      	push	{r4, lr}
   26c9e:	460c      	mov	r4, r1
   26ca0:	6b49      	ldr	r1, [r1, #52]	; 0x34
   26ca2:	b169      	cbz	r1, 26cc0 <__ssrefill_r+0x24>
   26ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   26ca8:	4299      	cmp	r1, r3
   26caa:	d001      	beq.n	26cb0 <__ssrefill_r+0x14>
   26cac:	f7f5 f806 	bl	1bcbc <_free_r>
   26cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   26cb2:	6063      	str	r3, [r4, #4]
   26cb4:	2000      	movs	r0, #0
   26cb6:	6360      	str	r0, [r4, #52]	; 0x34
   26cb8:	b113      	cbz	r3, 26cc0 <__ssrefill_r+0x24>
   26cba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   26cbc:	6023      	str	r3, [r4, #0]
   26cbe:	bd10      	pop	{r4, pc}
   26cc0:	6923      	ldr	r3, [r4, #16]
   26cc2:	6023      	str	r3, [r4, #0]
   26cc4:	2300      	movs	r3, #0
   26cc6:	6063      	str	r3, [r4, #4]
   26cc8:	89a3      	ldrh	r3, [r4, #12]
   26cca:	f043 0320 	orr.w	r3, r3, #32
   26cce:	81a3      	strh	r3, [r4, #12]
   26cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26cd4:	e7f3      	b.n	26cbe <__ssrefill_r+0x22>

00026cd6 <_printf_common>:
   26cd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26cda:	4616      	mov	r6, r2
   26cdc:	4699      	mov	r9, r3
   26cde:	688a      	ldr	r2, [r1, #8]
   26ce0:	690b      	ldr	r3, [r1, #16]
   26ce2:	f8dd 8020 	ldr.w	r8, [sp, #32]
   26ce6:	4293      	cmp	r3, r2
   26ce8:	bfb8      	it	lt
   26cea:	4613      	movlt	r3, r2
   26cec:	6033      	str	r3, [r6, #0]
   26cee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   26cf2:	4607      	mov	r7, r0
   26cf4:	460c      	mov	r4, r1
   26cf6:	b10a      	cbz	r2, 26cfc <_printf_common+0x26>
   26cf8:	3301      	adds	r3, #1
   26cfa:	6033      	str	r3, [r6, #0]
   26cfc:	6823      	ldr	r3, [r4, #0]
   26cfe:	0699      	lsls	r1, r3, #26
   26d00:	bf42      	ittt	mi
   26d02:	6833      	ldrmi	r3, [r6, #0]
   26d04:	3302      	addmi	r3, #2
   26d06:	6033      	strmi	r3, [r6, #0]
   26d08:	6825      	ldr	r5, [r4, #0]
   26d0a:	f015 0506 	ands.w	r5, r5, #6
   26d0e:	d106      	bne.n	26d1e <_printf_common+0x48>
   26d10:	f104 0a19 	add.w	sl, r4, #25
   26d14:	68e3      	ldr	r3, [r4, #12]
   26d16:	6832      	ldr	r2, [r6, #0]
   26d18:	1a9b      	subs	r3, r3, r2
   26d1a:	42ab      	cmp	r3, r5
   26d1c:	dc26      	bgt.n	26d6c <_printf_common+0x96>
   26d1e:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   26d22:	1e13      	subs	r3, r2, #0
   26d24:	6822      	ldr	r2, [r4, #0]
   26d26:	bf18      	it	ne
   26d28:	2301      	movne	r3, #1
   26d2a:	0692      	lsls	r2, r2, #26
   26d2c:	d42b      	bmi.n	26d86 <_printf_common+0xb0>
   26d2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   26d32:	4649      	mov	r1, r9
   26d34:	4638      	mov	r0, r7
   26d36:	47c0      	blx	r8
   26d38:	3001      	adds	r0, #1
   26d3a:	d01e      	beq.n	26d7a <_printf_common+0xa4>
   26d3c:	6823      	ldr	r3, [r4, #0]
   26d3e:	68e5      	ldr	r5, [r4, #12]
   26d40:	6832      	ldr	r2, [r6, #0]
   26d42:	f003 0306 	and.w	r3, r3, #6
   26d46:	2b04      	cmp	r3, #4
   26d48:	bf08      	it	eq
   26d4a:	1aad      	subeq	r5, r5, r2
   26d4c:	68a3      	ldr	r3, [r4, #8]
   26d4e:	6922      	ldr	r2, [r4, #16]
   26d50:	bf0c      	ite	eq
   26d52:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   26d56:	2500      	movne	r5, #0
   26d58:	4293      	cmp	r3, r2
   26d5a:	bfc4      	itt	gt
   26d5c:	1a9b      	subgt	r3, r3, r2
   26d5e:	18ed      	addgt	r5, r5, r3
   26d60:	2600      	movs	r6, #0
   26d62:	341a      	adds	r4, #26
   26d64:	42b5      	cmp	r5, r6
   26d66:	d11a      	bne.n	26d9e <_printf_common+0xc8>
   26d68:	2000      	movs	r0, #0
   26d6a:	e008      	b.n	26d7e <_printf_common+0xa8>
   26d6c:	2301      	movs	r3, #1
   26d6e:	4652      	mov	r2, sl
   26d70:	4649      	mov	r1, r9
   26d72:	4638      	mov	r0, r7
   26d74:	47c0      	blx	r8
   26d76:	3001      	adds	r0, #1
   26d78:	d103      	bne.n	26d82 <_printf_common+0xac>
   26d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26d82:	3501      	adds	r5, #1
   26d84:	e7c6      	b.n	26d14 <_printf_common+0x3e>
   26d86:	18e1      	adds	r1, r4, r3
   26d88:	1c5a      	adds	r2, r3, #1
   26d8a:	2030      	movs	r0, #48	; 0x30
   26d8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   26d90:	4422      	add	r2, r4
   26d92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   26d96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   26d9a:	3302      	adds	r3, #2
   26d9c:	e7c7      	b.n	26d2e <_printf_common+0x58>
   26d9e:	2301      	movs	r3, #1
   26da0:	4622      	mov	r2, r4
   26da2:	4649      	mov	r1, r9
   26da4:	4638      	mov	r0, r7
   26da6:	47c0      	blx	r8
   26da8:	3001      	adds	r0, #1
   26daa:	d0e6      	beq.n	26d7a <_printf_common+0xa4>
   26dac:	3601      	adds	r6, #1
   26dae:	e7d9      	b.n	26d64 <_printf_common+0x8e>

00026db0 <__sccl>:
   26db0:	b570      	push	{r4, r5, r6, lr}
   26db2:	780b      	ldrb	r3, [r1, #0]
   26db4:	4604      	mov	r4, r0
   26db6:	2b5e      	cmp	r3, #94	; 0x5e
   26db8:	bf0b      	itete	eq
   26dba:	784b      	ldrbeq	r3, [r1, #1]
   26dbc:	1c48      	addne	r0, r1, #1
   26dbe:	1c88      	addeq	r0, r1, #2
   26dc0:	2200      	movne	r2, #0
   26dc2:	bf08      	it	eq
   26dc4:	2201      	moveq	r2, #1
   26dc6:	1e61      	subs	r1, r4, #1
   26dc8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   26dcc:	f801 2f01 	strb.w	r2, [r1, #1]!
   26dd0:	42a9      	cmp	r1, r5
   26dd2:	d1fb      	bne.n	26dcc <__sccl+0x1c>
   26dd4:	b90b      	cbnz	r3, 26dda <__sccl+0x2a>
   26dd6:	3801      	subs	r0, #1
   26dd8:	bd70      	pop	{r4, r5, r6, pc}
   26dda:	f082 0101 	eor.w	r1, r2, #1
   26dde:	54e1      	strb	r1, [r4, r3]
   26de0:	1c42      	adds	r2, r0, #1
   26de2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   26de6:	2d2d      	cmp	r5, #45	; 0x2d
   26de8:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
   26dec:	4610      	mov	r0, r2
   26dee:	d006      	beq.n	26dfe <__sccl+0x4e>
   26df0:	2d5d      	cmp	r5, #93	; 0x5d
   26df2:	d0f1      	beq.n	26dd8 <__sccl+0x28>
   26df4:	b90d      	cbnz	r5, 26dfa <__sccl+0x4a>
   26df6:	4630      	mov	r0, r6
   26df8:	e7ee      	b.n	26dd8 <__sccl+0x28>
   26dfa:	462b      	mov	r3, r5
   26dfc:	e7ef      	b.n	26dde <__sccl+0x2e>
   26dfe:	7816      	ldrb	r6, [r2, #0]
   26e00:	2e5d      	cmp	r6, #93	; 0x5d
   26e02:	d0fa      	beq.n	26dfa <__sccl+0x4a>
   26e04:	42b3      	cmp	r3, r6
   26e06:	dcf8      	bgt.n	26dfa <__sccl+0x4a>
   26e08:	4618      	mov	r0, r3
   26e0a:	3001      	adds	r0, #1
   26e0c:	4286      	cmp	r6, r0
   26e0e:	5421      	strb	r1, [r4, r0]
   26e10:	dcfb      	bgt.n	26e0a <__sccl+0x5a>
   26e12:	43d8      	mvns	r0, r3
   26e14:	4430      	add	r0, r6
   26e16:	1c5d      	adds	r5, r3, #1
   26e18:	42b3      	cmp	r3, r6
   26e1a:	bfa8      	it	ge
   26e1c:	2000      	movge	r0, #0
   26e1e:	182b      	adds	r3, r5, r0
   26e20:	3202      	adds	r2, #2
   26e22:	e7de      	b.n	26de2 <__sccl+0x32>

00026e24 <strncpy>:
   26e24:	b510      	push	{r4, lr}
   26e26:	3901      	subs	r1, #1
   26e28:	4603      	mov	r3, r0
   26e2a:	b132      	cbz	r2, 26e3a <strncpy+0x16>
   26e2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   26e30:	f803 4b01 	strb.w	r4, [r3], #1
   26e34:	3a01      	subs	r2, #1
   26e36:	2c00      	cmp	r4, #0
   26e38:	d1f7      	bne.n	26e2a <strncpy+0x6>
   26e3a:	441a      	add	r2, r3
   26e3c:	2100      	movs	r1, #0
   26e3e:	4293      	cmp	r3, r2
   26e40:	d100      	bne.n	26e44 <strncpy+0x20>
   26e42:	bd10      	pop	{r4, pc}
   26e44:	f803 1b01 	strb.w	r1, [r3], #1
   26e48:	e7f9      	b.n	26e3e <strncpy+0x1a>

00026e4a <__submore>:
   26e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26e4e:	460c      	mov	r4, r1
   26e50:	6b49      	ldr	r1, [r1, #52]	; 0x34
   26e52:	f104 0344 	add.w	r3, r4, #68	; 0x44
   26e56:	4299      	cmp	r1, r3
   26e58:	d11d      	bne.n	26e96 <__submore+0x4c>
   26e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   26e5e:	f7f4 ff7b 	bl	1bd58 <_malloc_r>
   26e62:	b918      	cbnz	r0, 26e6c <__submore+0x22>
   26e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   26e70:	63a3      	str	r3, [r4, #56]	; 0x38
   26e72:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   26e76:	6360      	str	r0, [r4, #52]	; 0x34
   26e78:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   26e7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   26e80:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   26e84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   26e88:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   26e8c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   26e90:	6020      	str	r0, [r4, #0]
   26e92:	2000      	movs	r0, #0
   26e94:	e7e8      	b.n	26e68 <__submore+0x1e>
   26e96:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   26e98:	0077      	lsls	r7, r6, #1
   26e9a:	463a      	mov	r2, r7
   26e9c:	f000 f838 	bl	26f10 <_realloc_r>
   26ea0:	4605      	mov	r5, r0
   26ea2:	2800      	cmp	r0, #0
   26ea4:	d0de      	beq.n	26e64 <__submore+0x1a>
   26ea6:	eb00 0806 	add.w	r8, r0, r6
   26eaa:	4601      	mov	r1, r0
   26eac:	4632      	mov	r2, r6
   26eae:	4640      	mov	r0, r8
   26eb0:	f7ff fdcb 	bl	26a4a <memcpy>
   26eb4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   26eb8:	f8c4 8000 	str.w	r8, [r4]
   26ebc:	e7e9      	b.n	26e92 <__submore+0x48>

00026ebe <__ascii_wctomb>:
   26ebe:	4603      	mov	r3, r0
   26ec0:	4608      	mov	r0, r1
   26ec2:	b141      	cbz	r1, 26ed6 <__ascii_wctomb+0x18>
   26ec4:	2aff      	cmp	r2, #255	; 0xff
   26ec6:	d904      	bls.n	26ed2 <__ascii_wctomb+0x14>
   26ec8:	228a      	movs	r2, #138	; 0x8a
   26eca:	601a      	str	r2, [r3, #0]
   26ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26ed0:	4770      	bx	lr
   26ed2:	700a      	strb	r2, [r1, #0]
   26ed4:	2001      	movs	r0, #1
   26ed6:	4770      	bx	lr

00026ed8 <__env_lock>:
   26ed8:	4770      	bx	lr

00026eda <__env_unlock>:
   26eda:	4770      	bx	lr

00026edc <memmove>:
   26edc:	4288      	cmp	r0, r1
   26ede:	b510      	push	{r4, lr}
   26ee0:	eb01 0402 	add.w	r4, r1, r2
   26ee4:	d902      	bls.n	26eec <memmove+0x10>
   26ee6:	4284      	cmp	r4, r0
   26ee8:	4623      	mov	r3, r4
   26eea:	d807      	bhi.n	26efc <memmove+0x20>
   26eec:	1e43      	subs	r3, r0, #1
   26eee:	42a1      	cmp	r1, r4
   26ef0:	d008      	beq.n	26f04 <memmove+0x28>
   26ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
   26ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
   26efa:	e7f8      	b.n	26eee <memmove+0x12>
   26efc:	4402      	add	r2, r0
   26efe:	4601      	mov	r1, r0
   26f00:	428a      	cmp	r2, r1
   26f02:	d100      	bne.n	26f06 <memmove+0x2a>
   26f04:	bd10      	pop	{r4, pc}
   26f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   26f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   26f0e:	e7f7      	b.n	26f00 <memmove+0x24>

00026f10 <_realloc_r>:
   26f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f12:	4607      	mov	r7, r0
   26f14:	4614      	mov	r4, r2
   26f16:	460e      	mov	r6, r1
   26f18:	b921      	cbnz	r1, 26f24 <_realloc_r+0x14>
   26f1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26f1e:	4611      	mov	r1, r2
   26f20:	f7f4 bf1a 	b.w	1bd58 <_malloc_r>
   26f24:	b922      	cbnz	r2, 26f30 <_realloc_r+0x20>
   26f26:	f7f4 fec9 	bl	1bcbc <_free_r>
   26f2a:	4625      	mov	r5, r4
   26f2c:	4628      	mov	r0, r5
   26f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f30:	f000 f814 	bl	26f5c <_malloc_usable_size_r>
   26f34:	42a0      	cmp	r0, r4
   26f36:	d20f      	bcs.n	26f58 <_realloc_r+0x48>
   26f38:	4621      	mov	r1, r4
   26f3a:	4638      	mov	r0, r7
   26f3c:	f7f4 ff0c 	bl	1bd58 <_malloc_r>
   26f40:	4605      	mov	r5, r0
   26f42:	2800      	cmp	r0, #0
   26f44:	d0f2      	beq.n	26f2c <_realloc_r+0x1c>
   26f46:	4631      	mov	r1, r6
   26f48:	4622      	mov	r2, r4
   26f4a:	f7ff fd7e 	bl	26a4a <memcpy>
   26f4e:	4631      	mov	r1, r6
   26f50:	4638      	mov	r0, r7
   26f52:	f7f4 feb3 	bl	1bcbc <_free_r>
   26f56:	e7e9      	b.n	26f2c <_realloc_r+0x1c>
   26f58:	4635      	mov	r5, r6
   26f5a:	e7e7      	b.n	26f2c <_realloc_r+0x1c>

00026f5c <_malloc_usable_size_r>:
   26f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   26f60:	1f18      	subs	r0, r3, #4
   26f62:	2b00      	cmp	r3, #0
   26f64:	bfbc      	itt	lt
   26f66:	580b      	ldrlt	r3, [r1, r0]
   26f68:	18c0      	addlt	r0, r0, r3
   26f6a:	4770      	bx	lr
